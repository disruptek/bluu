
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: WebApps API Client
## version: 2018-02-01
## termsOfService: (not provided)
## license: (not provided)
## 
## 
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-WebApps"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_WebAppsList_593659 = ref object of OpenApiRestCall_593437
proc url_WebAppsList_593661(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsList_593660(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Get all apps for a subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_593834 = path.getOrDefault("subscriptionId")
  valid_593834 = validateParameter(valid_593834, JString, required = true,
                                 default = nil)
  if valid_593834 != nil:
    section.add "subscriptionId", valid_593834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593835 = query.getOrDefault("api-version")
  valid_593835 = validateParameter(valid_593835, JString, required = true,
                                 default = nil)
  if valid_593835 != nil:
    section.add "api-version", valid_593835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593858: Call_WebAppsList_593659; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get all apps for a subscription.
  ## 
  let valid = call_593858.validator(path, query, header, formData, body)
  let scheme = call_593858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593858.url(scheme.get, call_593858.host, call_593858.base,
                         call_593858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593858, url, valid)

proc call*(call_593929: Call_WebAppsList_593659; apiVersion: string;
          subscriptionId: string): Recallable =
  ## webAppsList
  ## Get all apps for a subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_593930 = newJObject()
  var query_593932 = newJObject()
  add(query_593932, "api-version", newJString(apiVersion))
  add(path_593930, "subscriptionId", newJString(subscriptionId))
  result = call_593929.call(path_593930, query_593932, nil, nil, nil)

var webAppsList* = Call_WebAppsList_593659(name: "webAppsList",
                                        meth: HttpMethod.HttpGet,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
                                        validator: validate_WebAppsList_593660,
                                        base: "", url: url_WebAppsList_593661,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsListByResourceGroup_593971 = ref object of OpenApiRestCall_593437
proc url_WebAppsListByResourceGroup_593973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListByResourceGroup_593972(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593974 = path.getOrDefault("resourceGroupName")
  valid_593974 = validateParameter(valid_593974, JString, required = true,
                                 default = nil)
  if valid_593974 != nil:
    section.add "resourceGroupName", valid_593974
  var valid_593975 = path.getOrDefault("subscriptionId")
  valid_593975 = validateParameter(valid_593975, JString, required = true,
                                 default = nil)
  if valid_593975 != nil:
    section.add "subscriptionId", valid_593975
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593976 = query.getOrDefault("api-version")
  valid_593976 = validateParameter(valid_593976, JString, required = true,
                                 default = nil)
  if valid_593976 != nil:
    section.add "api-version", valid_593976
  var valid_593977 = query.getOrDefault("includeSlots")
  valid_593977 = validateParameter(valid_593977, JBool, required = false, default = nil)
  if valid_593977 != nil:
    section.add "includeSlots", valid_593977
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593978: Call_WebAppsListByResourceGroup_593971; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  let valid = call_593978.validator(path, query, header, formData, body)
  let scheme = call_593978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593978.url(scheme.get, call_593978.host, call_593978.base,
                         call_593978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593978, url, valid)

proc call*(call_593979: Call_WebAppsListByResourceGroup_593971;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          includeSlots: bool = false): Recallable =
  ## webAppsListByResourceGroup
  ## Gets all web, mobile, and API apps in the specified resource group.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   includeSlots: bool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  var path_593980 = newJObject()
  var query_593981 = newJObject()
  add(path_593980, "resourceGroupName", newJString(resourceGroupName))
  add(query_593981, "api-version", newJString(apiVersion))
  add(path_593980, "subscriptionId", newJString(subscriptionId))
  add(query_593981, "includeSlots", newJBool(includeSlots))
  result = call_593979.call(path_593980, query_593981, nil, nil, nil)

var webAppsListByResourceGroup* = Call_WebAppsListByResourceGroup_593971(
    name: "webAppsListByResourceGroup", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_WebAppsListByResourceGroup_593972, base: "",
    url: url_WebAppsListByResourceGroup_593973, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdate_593993 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdate_593995(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdate_593994(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593996 = path.getOrDefault("resourceGroupName")
  valid_593996 = validateParameter(valid_593996, JString, required = true,
                                 default = nil)
  if valid_593996 != nil:
    section.add "resourceGroupName", valid_593996
  var valid_593997 = path.getOrDefault("name")
  valid_593997 = validateParameter(valid_593997, JString, required = true,
                                 default = nil)
  if valid_593997 != nil:
    section.add "name", valid_593997
  var valid_593998 = path.getOrDefault("subscriptionId")
  valid_593998 = validateParameter(valid_593998, JString, required = true,
                                 default = nil)
  if valid_593998 != nil:
    section.add "subscriptionId", valid_593998
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593999 = query.getOrDefault("api-version")
  valid_593999 = validateParameter(valid_593999, JString, required = true,
                                 default = nil)
  if valid_593999 != nil:
    section.add "api-version", valid_593999
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594001: Call_WebAppsCreateOrUpdate_593993; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_594001.validator(path, query, header, formData, body)
  let scheme = call_594001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594001.url(scheme.get, call_594001.host, call_594001.base,
                         call_594001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594001, url, valid)

proc call*(call_594002: Call_WebAppsCreateOrUpdate_593993; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594003 = newJObject()
  var query_594004 = newJObject()
  var body_594005 = newJObject()
  if siteEnvelope != nil:
    body_594005 = siteEnvelope
  add(path_594003, "resourceGroupName", newJString(resourceGroupName))
  add(query_594004, "api-version", newJString(apiVersion))
  add(path_594003, "name", newJString(name))
  add(path_594003, "subscriptionId", newJString(subscriptionId))
  result = call_594002.call(path_594003, query_594004, nil, nil, body_594005)

var webAppsCreateOrUpdate* = Call_WebAppsCreateOrUpdate_593993(
    name: "webAppsCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsCreateOrUpdate_593994, base: "",
    url: url_WebAppsCreateOrUpdate_593995, schemes: {Scheme.Https})
type
  Call_WebAppsGet_593982 = ref object of OpenApiRestCall_593437
proc url_WebAppsGet_593984(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGet_593983(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593985 = path.getOrDefault("resourceGroupName")
  valid_593985 = validateParameter(valid_593985, JString, required = true,
                                 default = nil)
  if valid_593985 != nil:
    section.add "resourceGroupName", valid_593985
  var valid_593986 = path.getOrDefault("name")
  valid_593986 = validateParameter(valid_593986, JString, required = true,
                                 default = nil)
  if valid_593986 != nil:
    section.add "name", valid_593986
  var valid_593987 = path.getOrDefault("subscriptionId")
  valid_593987 = validateParameter(valid_593987, JString, required = true,
                                 default = nil)
  if valid_593987 != nil:
    section.add "subscriptionId", valid_593987
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593988 = query.getOrDefault("api-version")
  valid_593988 = validateParameter(valid_593988, JString, required = true,
                                 default = nil)
  if valid_593988 != nil:
    section.add "api-version", valid_593988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593989: Call_WebAppsGet_593982; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_593989.validator(path, query, header, formData, body)
  let scheme = call_593989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593989.url(scheme.get, call_593989.host, call_593989.base,
                         call_593989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593989, url, valid)

proc call*(call_593990: Call_WebAppsGet_593982; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsGet
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_593991 = newJObject()
  var query_593992 = newJObject()
  add(path_593991, "resourceGroupName", newJString(resourceGroupName))
  add(query_593992, "api-version", newJString(apiVersion))
  add(path_593991, "name", newJString(name))
  add(path_593991, "subscriptionId", newJString(subscriptionId))
  result = call_593990.call(path_593991, query_593992, nil, nil, nil)

var webAppsGet* = Call_WebAppsGet_593982(name: "webAppsGet",
                                      meth: HttpMethod.HttpGet,
                                      host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
                                      validator: validate_WebAppsGet_593983,
                                      base: "", url: url_WebAppsGet_593984,
                                      schemes: {Scheme.Https})
type
  Call_WebAppsUpdate_594019 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdate_594021(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdate_594020(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594022 = path.getOrDefault("resourceGroupName")
  valid_594022 = validateParameter(valid_594022, JString, required = true,
                                 default = nil)
  if valid_594022 != nil:
    section.add "resourceGroupName", valid_594022
  var valid_594023 = path.getOrDefault("name")
  valid_594023 = validateParameter(valid_594023, JString, required = true,
                                 default = nil)
  if valid_594023 != nil:
    section.add "name", valid_594023
  var valid_594024 = path.getOrDefault("subscriptionId")
  valid_594024 = validateParameter(valid_594024, JString, required = true,
                                 default = nil)
  if valid_594024 != nil:
    section.add "subscriptionId", valid_594024
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594025 = query.getOrDefault("api-version")
  valid_594025 = validateParameter(valid_594025, JString, required = true,
                                 default = nil)
  if valid_594025 != nil:
    section.add "api-version", valid_594025
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594027: Call_WebAppsUpdate_594019; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_594027.validator(path, query, header, formData, body)
  let scheme = call_594027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594027.url(scheme.get, call_594027.host, call_594027.base,
                         call_594027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594027, url, valid)

proc call*(call_594028: Call_WebAppsUpdate_594019; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594029 = newJObject()
  var query_594030 = newJObject()
  var body_594031 = newJObject()
  if siteEnvelope != nil:
    body_594031 = siteEnvelope
  add(path_594029, "resourceGroupName", newJString(resourceGroupName))
  add(query_594030, "api-version", newJString(apiVersion))
  add(path_594029, "name", newJString(name))
  add(path_594029, "subscriptionId", newJString(subscriptionId))
  result = call_594028.call(path_594029, query_594030, nil, nil, body_594031)

var webAppsUpdate* = Call_WebAppsUpdate_594019(name: "webAppsUpdate",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsUpdate_594020, base: "", url: url_WebAppsUpdate_594021,
    schemes: {Scheme.Https})
type
  Call_WebAppsDelete_594006 = ref object of OpenApiRestCall_593437
proc url_WebAppsDelete_594008(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDelete_594007(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594009 = path.getOrDefault("resourceGroupName")
  valid_594009 = validateParameter(valid_594009, JString, required = true,
                                 default = nil)
  if valid_594009 != nil:
    section.add "resourceGroupName", valid_594009
  var valid_594010 = path.getOrDefault("name")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = nil)
  if valid_594010 != nil:
    section.add "name", valid_594010
  var valid_594011 = path.getOrDefault("subscriptionId")
  valid_594011 = validateParameter(valid_594011, JString, required = true,
                                 default = nil)
  if valid_594011 != nil:
    section.add "subscriptionId", valid_594011
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594012 = query.getOrDefault("api-version")
  valid_594012 = validateParameter(valid_594012, JString, required = true,
                                 default = nil)
  if valid_594012 != nil:
    section.add "api-version", valid_594012
  var valid_594013 = query.getOrDefault("deleteMetrics")
  valid_594013 = validateParameter(valid_594013, JBool, required = false, default = nil)
  if valid_594013 != nil:
    section.add "deleteMetrics", valid_594013
  var valid_594014 = query.getOrDefault("deleteEmptyServerFarm")
  valid_594014 = validateParameter(valid_594014, JBool, required = false, default = nil)
  if valid_594014 != nil:
    section.add "deleteEmptyServerFarm", valid_594014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594015: Call_WebAppsDelete_594006; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_594015.validator(path, query, header, formData, body)
  let scheme = call_594015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594015.url(scheme.get, call_594015.host, call_594015.base,
                         call_594015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594015, url, valid)

proc call*(call_594016: Call_WebAppsDelete_594006; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          deleteMetrics: bool = false; deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDelete
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_594017 = newJObject()
  var query_594018 = newJObject()
  add(path_594017, "resourceGroupName", newJString(resourceGroupName))
  add(query_594018, "api-version", newJString(apiVersion))
  add(path_594017, "name", newJString(name))
  add(path_594017, "subscriptionId", newJString(subscriptionId))
  add(query_594018, "deleteMetrics", newJBool(deleteMetrics))
  add(query_594018, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_594016.call(path_594017, query_594018, nil, nil, nil)

var webAppsDelete* = Call_WebAppsDelete_594006(name: "webAppsDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsDelete_594007, base: "", url: url_WebAppsDelete_594008,
    schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostname_594032 = ref object of OpenApiRestCall_593437
proc url_WebAppsAnalyzeCustomHostname_594034(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostname_594033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594035 = path.getOrDefault("resourceGroupName")
  valid_594035 = validateParameter(valid_594035, JString, required = true,
                                 default = nil)
  if valid_594035 != nil:
    section.add "resourceGroupName", valid_594035
  var valid_594036 = path.getOrDefault("name")
  valid_594036 = validateParameter(valid_594036, JString, required = true,
                                 default = nil)
  if valid_594036 != nil:
    section.add "name", valid_594036
  var valid_594037 = path.getOrDefault("subscriptionId")
  valid_594037 = validateParameter(valid_594037, JString, required = true,
                                 default = nil)
  if valid_594037 != nil:
    section.add "subscriptionId", valid_594037
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594038 = query.getOrDefault("api-version")
  valid_594038 = validateParameter(valid_594038, JString, required = true,
                                 default = nil)
  if valid_594038 != nil:
    section.add "api-version", valid_594038
  var valid_594039 = query.getOrDefault("hostName")
  valid_594039 = validateParameter(valid_594039, JString, required = false,
                                 default = nil)
  if valid_594039 != nil:
    section.add "hostName", valid_594039
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594040: Call_WebAppsAnalyzeCustomHostname_594032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_594040.validator(path, query, header, formData, body)
  let scheme = call_594040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594040.url(scheme.get, call_594040.host, call_594040.base,
                         call_594040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594040, url, valid)

proc call*(call_594041: Call_WebAppsAnalyzeCustomHostname_594032;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostname
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594042 = newJObject()
  var query_594043 = newJObject()
  add(path_594042, "resourceGroupName", newJString(resourceGroupName))
  add(query_594043, "api-version", newJString(apiVersion))
  add(path_594042, "name", newJString(name))
  add(query_594043, "hostName", newJString(hostName))
  add(path_594042, "subscriptionId", newJString(subscriptionId))
  result = call_594041.call(path_594042, query_594043, nil, nil, nil)

var webAppsAnalyzeCustomHostname* = Call_WebAppsAnalyzeCustomHostname_594032(
    name: "webAppsAnalyzeCustomHostname", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostname_594033, base: "",
    url: url_WebAppsAnalyzeCustomHostname_594034, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigToProduction_594044 = ref object of OpenApiRestCall_593437
proc url_WebAppsApplySlotConfigToProduction_594046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigToProduction_594045(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594047 = path.getOrDefault("resourceGroupName")
  valid_594047 = validateParameter(valid_594047, JString, required = true,
                                 default = nil)
  if valid_594047 != nil:
    section.add "resourceGroupName", valid_594047
  var valid_594048 = path.getOrDefault("name")
  valid_594048 = validateParameter(valid_594048, JString, required = true,
                                 default = nil)
  if valid_594048 != nil:
    section.add "name", valid_594048
  var valid_594049 = path.getOrDefault("subscriptionId")
  valid_594049 = validateParameter(valid_594049, JString, required = true,
                                 default = nil)
  if valid_594049 != nil:
    section.add "subscriptionId", valid_594049
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594050 = query.getOrDefault("api-version")
  valid_594050 = validateParameter(valid_594050, JString, required = true,
                                 default = nil)
  if valid_594050 != nil:
    section.add "api-version", valid_594050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594052: Call_WebAppsApplySlotConfigToProduction_594044;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_594052.validator(path, query, header, formData, body)
  let scheme = call_594052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594052.url(scheme.get, call_594052.host, call_594052.base,
                         call_594052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594052, url, valid)

proc call*(call_594053: Call_WebAppsApplySlotConfigToProduction_594044;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigToProduction
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_594054 = newJObject()
  var query_594055 = newJObject()
  var body_594056 = newJObject()
  add(path_594054, "resourceGroupName", newJString(resourceGroupName))
  add(query_594055, "api-version", newJString(apiVersion))
  add(path_594054, "name", newJString(name))
  add(path_594054, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_594056 = slotSwapEntity
  result = call_594053.call(path_594054, query_594055, nil, nil, body_594056)

var webAppsApplySlotConfigToProduction* = Call_WebAppsApplySlotConfigToProduction_594044(
    name: "webAppsApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigToProduction_594045, base: "",
    url: url_WebAppsApplySlotConfigToProduction_594046, schemes: {Scheme.Https})
type
  Call_WebAppsBackup_594057 = ref object of OpenApiRestCall_593437
proc url_WebAppsBackup_594059(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackup_594058(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594060 = path.getOrDefault("resourceGroupName")
  valid_594060 = validateParameter(valid_594060, JString, required = true,
                                 default = nil)
  if valid_594060 != nil:
    section.add "resourceGroupName", valid_594060
  var valid_594061 = path.getOrDefault("name")
  valid_594061 = validateParameter(valid_594061, JString, required = true,
                                 default = nil)
  if valid_594061 != nil:
    section.add "name", valid_594061
  var valid_594062 = path.getOrDefault("subscriptionId")
  valid_594062 = validateParameter(valid_594062, JString, required = true,
                                 default = nil)
  if valid_594062 != nil:
    section.add "subscriptionId", valid_594062
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594063 = query.getOrDefault("api-version")
  valid_594063 = validateParameter(valid_594063, JString, required = true,
                                 default = nil)
  if valid_594063 != nil:
    section.add "api-version", valid_594063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594065: Call_WebAppsBackup_594057; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_594065.validator(path, query, header, formData, body)
  let scheme = call_594065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594065.url(scheme.get, call_594065.host, call_594065.base,
                         call_594065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594065, url, valid)

proc call*(call_594066: Call_WebAppsBackup_594057; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsBackup
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_594067 = newJObject()
  var query_594068 = newJObject()
  var body_594069 = newJObject()
  add(path_594067, "resourceGroupName", newJString(resourceGroupName))
  add(query_594068, "api-version", newJString(apiVersion))
  add(path_594067, "name", newJString(name))
  add(path_594067, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594069 = request
  result = call_594066.call(path_594067, query_594068, nil, nil, body_594069)

var webAppsBackup* = Call_WebAppsBackup_594057(name: "webAppsBackup",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_WebAppsBackup_594058, base: "", url: url_WebAppsBackup_594059,
    schemes: {Scheme.Https})
type
  Call_WebAppsListBackups_594070 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackups_594072(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackups_594071(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594073 = path.getOrDefault("resourceGroupName")
  valid_594073 = validateParameter(valid_594073, JString, required = true,
                                 default = nil)
  if valid_594073 != nil:
    section.add "resourceGroupName", valid_594073
  var valid_594074 = path.getOrDefault("name")
  valid_594074 = validateParameter(valid_594074, JString, required = true,
                                 default = nil)
  if valid_594074 != nil:
    section.add "name", valid_594074
  var valid_594075 = path.getOrDefault("subscriptionId")
  valid_594075 = validateParameter(valid_594075, JString, required = true,
                                 default = nil)
  if valid_594075 != nil:
    section.add "subscriptionId", valid_594075
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594076 = query.getOrDefault("api-version")
  valid_594076 = validateParameter(valid_594076, JString, required = true,
                                 default = nil)
  if valid_594076 != nil:
    section.add "api-version", valid_594076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594077: Call_WebAppsListBackups_594070; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_594077.validator(path, query, header, formData, body)
  let scheme = call_594077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594077.url(scheme.get, call_594077.host, call_594077.base,
                         call_594077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594077, url, valid)

proc call*(call_594078: Call_WebAppsListBackups_594070; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListBackups
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594079 = newJObject()
  var query_594080 = newJObject()
  add(path_594079, "resourceGroupName", newJString(resourceGroupName))
  add(query_594080, "api-version", newJString(apiVersion))
  add(path_594079, "name", newJString(name))
  add(path_594079, "subscriptionId", newJString(subscriptionId))
  result = call_594078.call(path_594079, query_594080, nil, nil, nil)

var webAppsListBackups* = Call_WebAppsListBackups_594070(
    name: "webAppsListBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_WebAppsListBackups_594071, base: "",
    url: url_WebAppsListBackups_594072, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatus_594081 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupStatus_594083(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatus_594082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594084 = path.getOrDefault("resourceGroupName")
  valid_594084 = validateParameter(valid_594084, JString, required = true,
                                 default = nil)
  if valid_594084 != nil:
    section.add "resourceGroupName", valid_594084
  var valid_594085 = path.getOrDefault("name")
  valid_594085 = validateParameter(valid_594085, JString, required = true,
                                 default = nil)
  if valid_594085 != nil:
    section.add "name", valid_594085
  var valid_594086 = path.getOrDefault("subscriptionId")
  valid_594086 = validateParameter(valid_594086, JString, required = true,
                                 default = nil)
  if valid_594086 != nil:
    section.add "subscriptionId", valid_594086
  var valid_594087 = path.getOrDefault("backupId")
  valid_594087 = validateParameter(valid_594087, JString, required = true,
                                 default = nil)
  if valid_594087 != nil:
    section.add "backupId", valid_594087
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594088 = query.getOrDefault("api-version")
  valid_594088 = validateParameter(valid_594088, JString, required = true,
                                 default = nil)
  if valid_594088 != nil:
    section.add "api-version", valid_594088
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594089: Call_WebAppsGetBackupStatus_594081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_594089.validator(path, query, header, formData, body)
  let scheme = call_594089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594089.url(scheme.get, call_594089.host, call_594089.base,
                         call_594089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594089, url, valid)

proc call*(call_594090: Call_WebAppsGetBackupStatus_594081;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatus
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_594091 = newJObject()
  var query_594092 = newJObject()
  add(path_594091, "resourceGroupName", newJString(resourceGroupName))
  add(query_594092, "api-version", newJString(apiVersion))
  add(path_594091, "name", newJString(name))
  add(path_594091, "subscriptionId", newJString(subscriptionId))
  add(path_594091, "backupId", newJString(backupId))
  result = call_594090.call(path_594091, query_594092, nil, nil, nil)

var webAppsGetBackupStatus* = Call_WebAppsGetBackupStatus_594081(
    name: "webAppsGetBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatus_594082, base: "",
    url: url_WebAppsGetBackupStatus_594083, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackup_594093 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackup_594095(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackup_594094(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594096 = path.getOrDefault("resourceGroupName")
  valid_594096 = validateParameter(valid_594096, JString, required = true,
                                 default = nil)
  if valid_594096 != nil:
    section.add "resourceGroupName", valid_594096
  var valid_594097 = path.getOrDefault("name")
  valid_594097 = validateParameter(valid_594097, JString, required = true,
                                 default = nil)
  if valid_594097 != nil:
    section.add "name", valid_594097
  var valid_594098 = path.getOrDefault("subscriptionId")
  valid_594098 = validateParameter(valid_594098, JString, required = true,
                                 default = nil)
  if valid_594098 != nil:
    section.add "subscriptionId", valid_594098
  var valid_594099 = path.getOrDefault("backupId")
  valid_594099 = validateParameter(valid_594099, JString, required = true,
                                 default = nil)
  if valid_594099 != nil:
    section.add "backupId", valid_594099
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594100 = query.getOrDefault("api-version")
  valid_594100 = validateParameter(valid_594100, JString, required = true,
                                 default = nil)
  if valid_594100 != nil:
    section.add "api-version", valid_594100
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594101: Call_WebAppsDeleteBackup_594093; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_594101.validator(path, query, header, formData, body)
  let scheme = call_594101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594101.url(scheme.get, call_594101.host, call_594101.base,
                         call_594101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594101, url, valid)

proc call*(call_594102: Call_WebAppsDeleteBackup_594093; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackup
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_594103 = newJObject()
  var query_594104 = newJObject()
  add(path_594103, "resourceGroupName", newJString(resourceGroupName))
  add(query_594104, "api-version", newJString(apiVersion))
  add(path_594103, "name", newJString(name))
  add(path_594103, "subscriptionId", newJString(subscriptionId))
  add(path_594103, "backupId", newJString(backupId))
  result = call_594102.call(path_594103, query_594104, nil, nil, nil)

var webAppsDeleteBackup* = Call_WebAppsDeleteBackup_594093(
    name: "webAppsDeleteBackup", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackup_594094, base: "",
    url: url_WebAppsDeleteBackup_594095, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecrets_594105 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackupStatusSecrets_594107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecrets_594106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594108 = path.getOrDefault("resourceGroupName")
  valid_594108 = validateParameter(valid_594108, JString, required = true,
                                 default = nil)
  if valid_594108 != nil:
    section.add "resourceGroupName", valid_594108
  var valid_594109 = path.getOrDefault("name")
  valid_594109 = validateParameter(valid_594109, JString, required = true,
                                 default = nil)
  if valid_594109 != nil:
    section.add "name", valid_594109
  var valid_594110 = path.getOrDefault("subscriptionId")
  valid_594110 = validateParameter(valid_594110, JString, required = true,
                                 default = nil)
  if valid_594110 != nil:
    section.add "subscriptionId", valid_594110
  var valid_594111 = path.getOrDefault("backupId")
  valid_594111 = validateParameter(valid_594111, JString, required = true,
                                 default = nil)
  if valid_594111 != nil:
    section.add "backupId", valid_594111
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594112 = query.getOrDefault("api-version")
  valid_594112 = validateParameter(valid_594112, JString, required = true,
                                 default = nil)
  if valid_594112 != nil:
    section.add "api-version", valid_594112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594114: Call_WebAppsListBackupStatusSecrets_594105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_594114.validator(path, query, header, formData, body)
  let scheme = call_594114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594114.url(scheme.get, call_594114.host, call_594114.base,
                         call_594114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594114, url, valid)

proc call*(call_594115: Call_WebAppsListBackupStatusSecrets_594105;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecrets
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_594116 = newJObject()
  var query_594117 = newJObject()
  var body_594118 = newJObject()
  add(path_594116, "resourceGroupName", newJString(resourceGroupName))
  add(query_594117, "api-version", newJString(apiVersion))
  add(path_594116, "name", newJString(name))
  add(path_594116, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594118 = request
  add(path_594116, "backupId", newJString(backupId))
  result = call_594115.call(path_594116, query_594117, nil, nil, body_594118)

var webAppsListBackupStatusSecrets* = Call_WebAppsListBackupStatusSecrets_594105(
    name: "webAppsListBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecrets_594106, base: "",
    url: url_WebAppsListBackupStatusSecrets_594107, schemes: {Scheme.Https})
type
  Call_WebAppsRestore_594119 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestore_594121(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestore_594120(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594122 = path.getOrDefault("resourceGroupName")
  valid_594122 = validateParameter(valid_594122, JString, required = true,
                                 default = nil)
  if valid_594122 != nil:
    section.add "resourceGroupName", valid_594122
  var valid_594123 = path.getOrDefault("name")
  valid_594123 = validateParameter(valid_594123, JString, required = true,
                                 default = nil)
  if valid_594123 != nil:
    section.add "name", valid_594123
  var valid_594124 = path.getOrDefault("subscriptionId")
  valid_594124 = validateParameter(valid_594124, JString, required = true,
                                 default = nil)
  if valid_594124 != nil:
    section.add "subscriptionId", valid_594124
  var valid_594125 = path.getOrDefault("backupId")
  valid_594125 = validateParameter(valid_594125, JString, required = true,
                                 default = nil)
  if valid_594125 != nil:
    section.add "backupId", valid_594125
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594126 = query.getOrDefault("api-version")
  valid_594126 = validateParameter(valid_594126, JString, required = true,
                                 default = nil)
  if valid_594126 != nil:
    section.add "api-version", valid_594126
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594128: Call_WebAppsRestore_594119; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_594128.validator(path, query, header, formData, body)
  let scheme = call_594128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594128.url(scheme.get, call_594128.host, call_594128.base,
                         call_594128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594128, url, valid)

proc call*(call_594129: Call_WebAppsRestore_594119; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode;
          backupId: string): Recallable =
  ## webAppsRestore
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_594130 = newJObject()
  var query_594131 = newJObject()
  var body_594132 = newJObject()
  add(path_594130, "resourceGroupName", newJString(resourceGroupName))
  add(query_594131, "api-version", newJString(apiVersion))
  add(path_594130, "name", newJString(name))
  add(path_594130, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594132 = request
  add(path_594130, "backupId", newJString(backupId))
  result = call_594129.call(path_594130, query_594131, nil, nil, body_594132)

var webAppsRestore* = Call_WebAppsRestore_594119(name: "webAppsRestore",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_WebAppsRestore_594120, base: "", url: url_WebAppsRestore_594121,
    schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurations_594133 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurations_594135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurations_594134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594136 = path.getOrDefault("resourceGroupName")
  valid_594136 = validateParameter(valid_594136, JString, required = true,
                                 default = nil)
  if valid_594136 != nil:
    section.add "resourceGroupName", valid_594136
  var valid_594137 = path.getOrDefault("name")
  valid_594137 = validateParameter(valid_594137, JString, required = true,
                                 default = nil)
  if valid_594137 != nil:
    section.add "name", valid_594137
  var valid_594138 = path.getOrDefault("subscriptionId")
  valid_594138 = validateParameter(valid_594138, JString, required = true,
                                 default = nil)
  if valid_594138 != nil:
    section.add "subscriptionId", valid_594138
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594139 = query.getOrDefault("api-version")
  valid_594139 = validateParameter(valid_594139, JString, required = true,
                                 default = nil)
  if valid_594139 != nil:
    section.add "api-version", valid_594139
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594140: Call_WebAppsListConfigurations_594133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_594140.validator(path, query, header, formData, body)
  let scheme = call_594140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594140.url(scheme.get, call_594140.host, call_594140.base,
                         call_594140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594140, url, valid)

proc call*(call_594141: Call_WebAppsListConfigurations_594133;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurations
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594142 = newJObject()
  var query_594143 = newJObject()
  add(path_594142, "resourceGroupName", newJString(resourceGroupName))
  add(query_594143, "api-version", newJString(apiVersion))
  add(path_594142, "name", newJString(name))
  add(path_594142, "subscriptionId", newJString(subscriptionId))
  result = call_594141.call(path_594142, query_594143, nil, nil, nil)

var webAppsListConfigurations* = Call_WebAppsListConfigurations_594133(
    name: "webAppsListConfigurations", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    validator: validate_WebAppsListConfigurations_594134, base: "",
    url: url_WebAppsListConfigurations_594135, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettings_594144 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateApplicationSettings_594146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettings_594145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594147 = path.getOrDefault("resourceGroupName")
  valid_594147 = validateParameter(valid_594147, JString, required = true,
                                 default = nil)
  if valid_594147 != nil:
    section.add "resourceGroupName", valid_594147
  var valid_594148 = path.getOrDefault("name")
  valid_594148 = validateParameter(valid_594148, JString, required = true,
                                 default = nil)
  if valid_594148 != nil:
    section.add "name", valid_594148
  var valid_594149 = path.getOrDefault("subscriptionId")
  valid_594149 = validateParameter(valid_594149, JString, required = true,
                                 default = nil)
  if valid_594149 != nil:
    section.add "subscriptionId", valid_594149
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594150 = query.getOrDefault("api-version")
  valid_594150 = validateParameter(valid_594150, JString, required = true,
                                 default = nil)
  if valid_594150 != nil:
    section.add "api-version", valid_594150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594152: Call_WebAppsUpdateApplicationSettings_594144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_594152.validator(path, query, header, formData, body)
  let scheme = call_594152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594152.url(scheme.get, call_594152.host, call_594152.base,
                         call_594152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594152, url, valid)

proc call*(call_594153: Call_WebAppsUpdateApplicationSettings_594144;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettings
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594154 = newJObject()
  var query_594155 = newJObject()
  var body_594156 = newJObject()
  add(path_594154, "resourceGroupName", newJString(resourceGroupName))
  add(query_594155, "api-version", newJString(apiVersion))
  add(path_594154, "name", newJString(name))
  if appSettings != nil:
    body_594156 = appSettings
  add(path_594154, "subscriptionId", newJString(subscriptionId))
  result = call_594153.call(path_594154, query_594155, nil, nil, body_594156)

var webAppsUpdateApplicationSettings* = Call_WebAppsUpdateApplicationSettings_594144(
    name: "webAppsUpdateApplicationSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettings_594145, base: "",
    url: url_WebAppsUpdateApplicationSettings_594146, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettings_594157 = ref object of OpenApiRestCall_593437
proc url_WebAppsListApplicationSettings_594159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettings_594158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594160 = path.getOrDefault("resourceGroupName")
  valid_594160 = validateParameter(valid_594160, JString, required = true,
                                 default = nil)
  if valid_594160 != nil:
    section.add "resourceGroupName", valid_594160
  var valid_594161 = path.getOrDefault("name")
  valid_594161 = validateParameter(valid_594161, JString, required = true,
                                 default = nil)
  if valid_594161 != nil:
    section.add "name", valid_594161
  var valid_594162 = path.getOrDefault("subscriptionId")
  valid_594162 = validateParameter(valid_594162, JString, required = true,
                                 default = nil)
  if valid_594162 != nil:
    section.add "subscriptionId", valid_594162
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594163 = query.getOrDefault("api-version")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "api-version", valid_594163
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594164: Call_WebAppsListApplicationSettings_594157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_594164.validator(path, query, header, formData, body)
  let scheme = call_594164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594164.url(scheme.get, call_594164.host, call_594164.base,
                         call_594164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594164, url, valid)

proc call*(call_594165: Call_WebAppsListApplicationSettings_594157;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettings
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594166 = newJObject()
  var query_594167 = newJObject()
  add(path_594166, "resourceGroupName", newJString(resourceGroupName))
  add(query_594167, "api-version", newJString(apiVersion))
  add(path_594166, "name", newJString(name))
  add(path_594166, "subscriptionId", newJString(subscriptionId))
  result = call_594165.call(path_594166, query_594167, nil, nil, nil)

var webAppsListApplicationSettings* = Call_WebAppsListApplicationSettings_594157(
    name: "webAppsListApplicationSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettings_594158, base: "",
    url: url_WebAppsListApplicationSettings_594159, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettings_594168 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateAuthSettings_594170(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettings_594169(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594171 = path.getOrDefault("resourceGroupName")
  valid_594171 = validateParameter(valid_594171, JString, required = true,
                                 default = nil)
  if valid_594171 != nil:
    section.add "resourceGroupName", valid_594171
  var valid_594172 = path.getOrDefault("name")
  valid_594172 = validateParameter(valid_594172, JString, required = true,
                                 default = nil)
  if valid_594172 != nil:
    section.add "name", valid_594172
  var valid_594173 = path.getOrDefault("subscriptionId")
  valid_594173 = validateParameter(valid_594173, JString, required = true,
                                 default = nil)
  if valid_594173 != nil:
    section.add "subscriptionId", valid_594173
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594174 = query.getOrDefault("api-version")
  valid_594174 = validateParameter(valid_594174, JString, required = true,
                                 default = nil)
  if valid_594174 != nil:
    section.add "api-version", valid_594174
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594176: Call_WebAppsUpdateAuthSettings_594168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_594176.validator(path, query, header, formData, body)
  let scheme = call_594176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594176.url(scheme.get, call_594176.host, call_594176.base,
                         call_594176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594176, url, valid)

proc call*(call_594177: Call_WebAppsUpdateAuthSettings_594168;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettings
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_594178 = newJObject()
  var query_594179 = newJObject()
  var body_594180 = newJObject()
  add(path_594178, "resourceGroupName", newJString(resourceGroupName))
  add(query_594179, "api-version", newJString(apiVersion))
  add(path_594178, "name", newJString(name))
  add(path_594178, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_594180 = siteAuthSettings
  result = call_594177.call(path_594178, query_594179, nil, nil, body_594180)

var webAppsUpdateAuthSettings* = Call_WebAppsUpdateAuthSettings_594168(
    name: "webAppsUpdateAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettings_594169, base: "",
    url: url_WebAppsUpdateAuthSettings_594170, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettings_594181 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetAuthSettings_594183(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettings_594182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594184 = path.getOrDefault("resourceGroupName")
  valid_594184 = validateParameter(valid_594184, JString, required = true,
                                 default = nil)
  if valid_594184 != nil:
    section.add "resourceGroupName", valid_594184
  var valid_594185 = path.getOrDefault("name")
  valid_594185 = validateParameter(valid_594185, JString, required = true,
                                 default = nil)
  if valid_594185 != nil:
    section.add "name", valid_594185
  var valid_594186 = path.getOrDefault("subscriptionId")
  valid_594186 = validateParameter(valid_594186, JString, required = true,
                                 default = nil)
  if valid_594186 != nil:
    section.add "subscriptionId", valid_594186
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594187 = query.getOrDefault("api-version")
  valid_594187 = validateParameter(valid_594187, JString, required = true,
                                 default = nil)
  if valid_594187 != nil:
    section.add "api-version", valid_594187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594188: Call_WebAppsGetAuthSettings_594181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_594188.validator(path, query, header, formData, body)
  let scheme = call_594188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594188.url(scheme.get, call_594188.host, call_594188.base,
                         call_594188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594188, url, valid)

proc call*(call_594189: Call_WebAppsGetAuthSettings_594181;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettings
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594190 = newJObject()
  var query_594191 = newJObject()
  add(path_594190, "resourceGroupName", newJString(resourceGroupName))
  add(query_594191, "api-version", newJString(apiVersion))
  add(path_594190, "name", newJString(name))
  add(path_594190, "subscriptionId", newJString(subscriptionId))
  result = call_594189.call(path_594190, query_594191, nil, nil, nil)

var webAppsGetAuthSettings* = Call_WebAppsGetAuthSettings_594181(
    name: "webAppsGetAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettings_594182, base: "",
    url: url_WebAppsGetAuthSettings_594183, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAzureStorageAccounts_594192 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateAzureStorageAccounts_594194(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/azurestorageaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAzureStorageAccounts_594193(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594195 = path.getOrDefault("resourceGroupName")
  valid_594195 = validateParameter(valid_594195, JString, required = true,
                                 default = nil)
  if valid_594195 != nil:
    section.add "resourceGroupName", valid_594195
  var valid_594196 = path.getOrDefault("name")
  valid_594196 = validateParameter(valid_594196, JString, required = true,
                                 default = nil)
  if valid_594196 != nil:
    section.add "name", valid_594196
  var valid_594197 = path.getOrDefault("subscriptionId")
  valid_594197 = validateParameter(valid_594197, JString, required = true,
                                 default = nil)
  if valid_594197 != nil:
    section.add "subscriptionId", valid_594197
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594198 = query.getOrDefault("api-version")
  valid_594198 = validateParameter(valid_594198, JString, required = true,
                                 default = nil)
  if valid_594198 != nil:
    section.add "api-version", valid_594198
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594200: Call_WebAppsUpdateAzureStorageAccounts_594192;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Azure storage account configurations of an app.
  ## 
  let valid = call_594200.validator(path, query, header, formData, body)
  let scheme = call_594200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594200.url(scheme.get, call_594200.host, call_594200.base,
                         call_594200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594200, url, valid)

proc call*(call_594201: Call_WebAppsUpdateAzureStorageAccounts_594192;
          resourceGroupName: string; apiVersion: string; name: string;
          azureStorageAccounts: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateAzureStorageAccounts
  ## Updates the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594202 = newJObject()
  var query_594203 = newJObject()
  var body_594204 = newJObject()
  add(path_594202, "resourceGroupName", newJString(resourceGroupName))
  add(query_594203, "api-version", newJString(apiVersion))
  add(path_594202, "name", newJString(name))
  if azureStorageAccounts != nil:
    body_594204 = azureStorageAccounts
  add(path_594202, "subscriptionId", newJString(subscriptionId))
  result = call_594201.call(path_594202, query_594203, nil, nil, body_594204)

var webAppsUpdateAzureStorageAccounts* = Call_WebAppsUpdateAzureStorageAccounts_594192(
    name: "webAppsUpdateAzureStorageAccounts", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
    validator: validate_WebAppsUpdateAzureStorageAccounts_594193, base: "",
    url: url_WebAppsUpdateAzureStorageAccounts_594194, schemes: {Scheme.Https})
type
  Call_WebAppsListAzureStorageAccounts_594205 = ref object of OpenApiRestCall_593437
proc url_WebAppsListAzureStorageAccounts_594207(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/azurestorageaccounts/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListAzureStorageAccounts_594206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594208 = path.getOrDefault("resourceGroupName")
  valid_594208 = validateParameter(valid_594208, JString, required = true,
                                 default = nil)
  if valid_594208 != nil:
    section.add "resourceGroupName", valid_594208
  var valid_594209 = path.getOrDefault("name")
  valid_594209 = validateParameter(valid_594209, JString, required = true,
                                 default = nil)
  if valid_594209 != nil:
    section.add "name", valid_594209
  var valid_594210 = path.getOrDefault("subscriptionId")
  valid_594210 = validateParameter(valid_594210, JString, required = true,
                                 default = nil)
  if valid_594210 != nil:
    section.add "subscriptionId", valid_594210
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594211 = query.getOrDefault("api-version")
  valid_594211 = validateParameter(valid_594211, JString, required = true,
                                 default = nil)
  if valid_594211 != nil:
    section.add "api-version", valid_594211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594212: Call_WebAppsListAzureStorageAccounts_594205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Azure storage account configurations of an app.
  ## 
  let valid = call_594212.validator(path, query, header, formData, body)
  let scheme = call_594212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594212.url(scheme.get, call_594212.host, call_594212.base,
                         call_594212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594212, url, valid)

proc call*(call_594213: Call_WebAppsListAzureStorageAccounts_594205;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListAzureStorageAccounts
  ## Gets the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594214 = newJObject()
  var query_594215 = newJObject()
  add(path_594214, "resourceGroupName", newJString(resourceGroupName))
  add(query_594215, "api-version", newJString(apiVersion))
  add(path_594214, "name", newJString(name))
  add(path_594214, "subscriptionId", newJString(subscriptionId))
  result = call_594213.call(path_594214, query_594215, nil, nil, nil)

var webAppsListAzureStorageAccounts* = Call_WebAppsListAzureStorageAccounts_594205(
    name: "webAppsListAzureStorageAccounts", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
    validator: validate_WebAppsListAzureStorageAccounts_594206, base: "",
    url: url_WebAppsListAzureStorageAccounts_594207, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfiguration_594216 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateBackupConfiguration_594218(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfiguration_594217(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594219 = path.getOrDefault("resourceGroupName")
  valid_594219 = validateParameter(valid_594219, JString, required = true,
                                 default = nil)
  if valid_594219 != nil:
    section.add "resourceGroupName", valid_594219
  var valid_594220 = path.getOrDefault("name")
  valid_594220 = validateParameter(valid_594220, JString, required = true,
                                 default = nil)
  if valid_594220 != nil:
    section.add "name", valid_594220
  var valid_594221 = path.getOrDefault("subscriptionId")
  valid_594221 = validateParameter(valid_594221, JString, required = true,
                                 default = nil)
  if valid_594221 != nil:
    section.add "subscriptionId", valid_594221
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594222 = query.getOrDefault("api-version")
  valid_594222 = validateParameter(valid_594222, JString, required = true,
                                 default = nil)
  if valid_594222 != nil:
    section.add "api-version", valid_594222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594224: Call_WebAppsUpdateBackupConfiguration_594216;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_594224.validator(path, query, header, formData, body)
  let scheme = call_594224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594224.url(scheme.get, call_594224.host, call_594224.base,
                         call_594224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594224, url, valid)

proc call*(call_594225: Call_WebAppsUpdateBackupConfiguration_594216;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfiguration
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_594226 = newJObject()
  var query_594227 = newJObject()
  var body_594228 = newJObject()
  add(path_594226, "resourceGroupName", newJString(resourceGroupName))
  add(query_594227, "api-version", newJString(apiVersion))
  add(path_594226, "name", newJString(name))
  add(path_594226, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594228 = request
  result = call_594225.call(path_594226, query_594227, nil, nil, body_594228)

var webAppsUpdateBackupConfiguration* = Call_WebAppsUpdateBackupConfiguration_594216(
    name: "webAppsUpdateBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsUpdateBackupConfiguration_594217, base: "",
    url: url_WebAppsUpdateBackupConfiguration_594218, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfiguration_594229 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackupConfiguration_594231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfiguration_594230(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594232 = path.getOrDefault("resourceGroupName")
  valid_594232 = validateParameter(valid_594232, JString, required = true,
                                 default = nil)
  if valid_594232 != nil:
    section.add "resourceGroupName", valid_594232
  var valid_594233 = path.getOrDefault("name")
  valid_594233 = validateParameter(valid_594233, JString, required = true,
                                 default = nil)
  if valid_594233 != nil:
    section.add "name", valid_594233
  var valid_594234 = path.getOrDefault("subscriptionId")
  valid_594234 = validateParameter(valid_594234, JString, required = true,
                                 default = nil)
  if valid_594234 != nil:
    section.add "subscriptionId", valid_594234
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594235 = query.getOrDefault("api-version")
  valid_594235 = validateParameter(valid_594235, JString, required = true,
                                 default = nil)
  if valid_594235 != nil:
    section.add "api-version", valid_594235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594236: Call_WebAppsDeleteBackupConfiguration_594229;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_594236.validator(path, query, header, formData, body)
  let scheme = call_594236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594236.url(scheme.get, call_594236.host, call_594236.base,
                         call_594236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594236, url, valid)

proc call*(call_594237: Call_WebAppsDeleteBackupConfiguration_594229;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfiguration
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594238 = newJObject()
  var query_594239 = newJObject()
  add(path_594238, "resourceGroupName", newJString(resourceGroupName))
  add(query_594239, "api-version", newJString(apiVersion))
  add(path_594238, "name", newJString(name))
  add(path_594238, "subscriptionId", newJString(subscriptionId))
  result = call_594237.call(path_594238, query_594239, nil, nil, nil)

var webAppsDeleteBackupConfiguration* = Call_WebAppsDeleteBackupConfiguration_594229(
    name: "webAppsDeleteBackupConfiguration", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsDeleteBackupConfiguration_594230, base: "",
    url: url_WebAppsDeleteBackupConfiguration_594231, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfiguration_594240 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupConfiguration_594242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfiguration_594241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594243 = path.getOrDefault("resourceGroupName")
  valid_594243 = validateParameter(valid_594243, JString, required = true,
                                 default = nil)
  if valid_594243 != nil:
    section.add "resourceGroupName", valid_594243
  var valid_594244 = path.getOrDefault("name")
  valid_594244 = validateParameter(valid_594244, JString, required = true,
                                 default = nil)
  if valid_594244 != nil:
    section.add "name", valid_594244
  var valid_594245 = path.getOrDefault("subscriptionId")
  valid_594245 = validateParameter(valid_594245, JString, required = true,
                                 default = nil)
  if valid_594245 != nil:
    section.add "subscriptionId", valid_594245
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594246 = query.getOrDefault("api-version")
  valid_594246 = validateParameter(valid_594246, JString, required = true,
                                 default = nil)
  if valid_594246 != nil:
    section.add "api-version", valid_594246
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594247: Call_WebAppsGetBackupConfiguration_594240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_594247.validator(path, query, header, formData, body)
  let scheme = call_594247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594247.url(scheme.get, call_594247.host, call_594247.base,
                         call_594247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594247, url, valid)

proc call*(call_594248: Call_WebAppsGetBackupConfiguration_594240;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfiguration
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594249 = newJObject()
  var query_594250 = newJObject()
  add(path_594249, "resourceGroupName", newJString(resourceGroupName))
  add(query_594250, "api-version", newJString(apiVersion))
  add(path_594249, "name", newJString(name))
  add(path_594249, "subscriptionId", newJString(subscriptionId))
  result = call_594248.call(path_594249, query_594250, nil, nil, nil)

var webAppsGetBackupConfiguration* = Call_WebAppsGetBackupConfiguration_594240(
    name: "webAppsGetBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_WebAppsGetBackupConfiguration_594241, base: "",
    url: url_WebAppsGetBackupConfiguration_594242, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStrings_594251 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConnectionStrings_594253(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStrings_594252(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594254 = path.getOrDefault("resourceGroupName")
  valid_594254 = validateParameter(valid_594254, JString, required = true,
                                 default = nil)
  if valid_594254 != nil:
    section.add "resourceGroupName", valid_594254
  var valid_594255 = path.getOrDefault("name")
  valid_594255 = validateParameter(valid_594255, JString, required = true,
                                 default = nil)
  if valid_594255 != nil:
    section.add "name", valid_594255
  var valid_594256 = path.getOrDefault("subscriptionId")
  valid_594256 = validateParameter(valid_594256, JString, required = true,
                                 default = nil)
  if valid_594256 != nil:
    section.add "subscriptionId", valid_594256
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594257 = query.getOrDefault("api-version")
  valid_594257 = validateParameter(valid_594257, JString, required = true,
                                 default = nil)
  if valid_594257 != nil:
    section.add "api-version", valid_594257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594259: Call_WebAppsUpdateConnectionStrings_594251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_594259.validator(path, query, header, formData, body)
  let scheme = call_594259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594259.url(scheme.get, call_594259.host, call_594259.base,
                         call_594259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594259, url, valid)

proc call*(call_594260: Call_WebAppsUpdateConnectionStrings_594251;
          resourceGroupName: string; apiVersion: string; name: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStrings
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594261 = newJObject()
  var query_594262 = newJObject()
  var body_594263 = newJObject()
  add(path_594261, "resourceGroupName", newJString(resourceGroupName))
  add(query_594262, "api-version", newJString(apiVersion))
  add(path_594261, "name", newJString(name))
  if connectionStrings != nil:
    body_594263 = connectionStrings
  add(path_594261, "subscriptionId", newJString(subscriptionId))
  result = call_594260.call(path_594261, query_594262, nil, nil, body_594263)

var webAppsUpdateConnectionStrings* = Call_WebAppsUpdateConnectionStrings_594251(
    name: "webAppsUpdateConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStrings_594252, base: "",
    url: url_WebAppsUpdateConnectionStrings_594253, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStrings_594264 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConnectionStrings_594266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStrings_594265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594267 = path.getOrDefault("resourceGroupName")
  valid_594267 = validateParameter(valid_594267, JString, required = true,
                                 default = nil)
  if valid_594267 != nil:
    section.add "resourceGroupName", valid_594267
  var valid_594268 = path.getOrDefault("name")
  valid_594268 = validateParameter(valid_594268, JString, required = true,
                                 default = nil)
  if valid_594268 != nil:
    section.add "name", valid_594268
  var valid_594269 = path.getOrDefault("subscriptionId")
  valid_594269 = validateParameter(valid_594269, JString, required = true,
                                 default = nil)
  if valid_594269 != nil:
    section.add "subscriptionId", valid_594269
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594270 = query.getOrDefault("api-version")
  valid_594270 = validateParameter(valid_594270, JString, required = true,
                                 default = nil)
  if valid_594270 != nil:
    section.add "api-version", valid_594270
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594271: Call_WebAppsListConnectionStrings_594264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_594271.validator(path, query, header, formData, body)
  let scheme = call_594271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594271.url(scheme.get, call_594271.host, call_594271.base,
                         call_594271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594271, url, valid)

proc call*(call_594272: Call_WebAppsListConnectionStrings_594264;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStrings
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594273 = newJObject()
  var query_594274 = newJObject()
  add(path_594273, "resourceGroupName", newJString(resourceGroupName))
  add(query_594274, "api-version", newJString(apiVersion))
  add(path_594273, "name", newJString(name))
  add(path_594273, "subscriptionId", newJString(subscriptionId))
  result = call_594272.call(path_594273, query_594274, nil, nil, nil)

var webAppsListConnectionStrings* = Call_WebAppsListConnectionStrings_594264(
    name: "webAppsListConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStrings_594265, base: "",
    url: url_WebAppsListConnectionStrings_594266, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfig_594286 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDiagnosticLogsConfig_594288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfig_594287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594289 = path.getOrDefault("resourceGroupName")
  valid_594289 = validateParameter(valid_594289, JString, required = true,
                                 default = nil)
  if valid_594289 != nil:
    section.add "resourceGroupName", valid_594289
  var valid_594290 = path.getOrDefault("name")
  valid_594290 = validateParameter(valid_594290, JString, required = true,
                                 default = nil)
  if valid_594290 != nil:
    section.add "name", valid_594290
  var valid_594291 = path.getOrDefault("subscriptionId")
  valid_594291 = validateParameter(valid_594291, JString, required = true,
                                 default = nil)
  if valid_594291 != nil:
    section.add "subscriptionId", valid_594291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594292 = query.getOrDefault("api-version")
  valid_594292 = validateParameter(valid_594292, JString, required = true,
                                 default = nil)
  if valid_594292 != nil:
    section.add "api-version", valid_594292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594294: Call_WebAppsUpdateDiagnosticLogsConfig_594286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_594294.validator(path, query, header, formData, body)
  let scheme = call_594294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594294.url(scheme.get, call_594294.host, call_594294.base,
                         call_594294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594294, url, valid)

proc call*(call_594295: Call_WebAppsUpdateDiagnosticLogsConfig_594286;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfig
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594296 = newJObject()
  var query_594297 = newJObject()
  var body_594298 = newJObject()
  add(path_594296, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_594298 = siteLogsConfig
  add(query_594297, "api-version", newJString(apiVersion))
  add(path_594296, "name", newJString(name))
  add(path_594296, "subscriptionId", newJString(subscriptionId))
  result = call_594295.call(path_594296, query_594297, nil, nil, body_594298)

var webAppsUpdateDiagnosticLogsConfig* = Call_WebAppsUpdateDiagnosticLogsConfig_594286(
    name: "webAppsUpdateDiagnosticLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfig_594287, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfig_594288, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfiguration_594275 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDiagnosticLogsConfiguration_594277(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfiguration_594276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594278 = path.getOrDefault("resourceGroupName")
  valid_594278 = validateParameter(valid_594278, JString, required = true,
                                 default = nil)
  if valid_594278 != nil:
    section.add "resourceGroupName", valid_594278
  var valid_594279 = path.getOrDefault("name")
  valid_594279 = validateParameter(valid_594279, JString, required = true,
                                 default = nil)
  if valid_594279 != nil:
    section.add "name", valid_594279
  var valid_594280 = path.getOrDefault("subscriptionId")
  valid_594280 = validateParameter(valid_594280, JString, required = true,
                                 default = nil)
  if valid_594280 != nil:
    section.add "subscriptionId", valid_594280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594281 = query.getOrDefault("api-version")
  valid_594281 = validateParameter(valid_594281, JString, required = true,
                                 default = nil)
  if valid_594281 != nil:
    section.add "api-version", valid_594281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594282: Call_WebAppsGetDiagnosticLogsConfiguration_594275;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_594282.validator(path, query, header, formData, body)
  let scheme = call_594282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594282.url(scheme.get, call_594282.host, call_594282.base,
                         call_594282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594282, url, valid)

proc call*(call_594283: Call_WebAppsGetDiagnosticLogsConfiguration_594275;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfiguration
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594284 = newJObject()
  var query_594285 = newJObject()
  add(path_594284, "resourceGroupName", newJString(resourceGroupName))
  add(query_594285, "api-version", newJString(apiVersion))
  add(path_594284, "name", newJString(name))
  add(path_594284, "subscriptionId", newJString(subscriptionId))
  result = call_594283.call(path_594284, query_594285, nil, nil, nil)

var webAppsGetDiagnosticLogsConfiguration* = Call_WebAppsGetDiagnosticLogsConfiguration_594275(
    name: "webAppsGetDiagnosticLogsConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfiguration_594276, base: "",
    url: url_WebAppsGetDiagnosticLogsConfiguration_594277, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadata_594299 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateMetadata_594301(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadata_594300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594302 = path.getOrDefault("resourceGroupName")
  valid_594302 = validateParameter(valid_594302, JString, required = true,
                                 default = nil)
  if valid_594302 != nil:
    section.add "resourceGroupName", valid_594302
  var valid_594303 = path.getOrDefault("name")
  valid_594303 = validateParameter(valid_594303, JString, required = true,
                                 default = nil)
  if valid_594303 != nil:
    section.add "name", valid_594303
  var valid_594304 = path.getOrDefault("subscriptionId")
  valid_594304 = validateParameter(valid_594304, JString, required = true,
                                 default = nil)
  if valid_594304 != nil:
    section.add "subscriptionId", valid_594304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594305 = query.getOrDefault("api-version")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = nil)
  if valid_594305 != nil:
    section.add "api-version", valid_594305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594307: Call_WebAppsUpdateMetadata_594299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_594307.validator(path, query, header, formData, body)
  let scheme = call_594307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594307.url(scheme.get, call_594307.host, call_594307.base,
                         call_594307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594307, url, valid)

proc call*(call_594308: Call_WebAppsUpdateMetadata_594299;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadata
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_594309 = newJObject()
  var query_594310 = newJObject()
  var body_594311 = newJObject()
  add(path_594309, "resourceGroupName", newJString(resourceGroupName))
  add(query_594310, "api-version", newJString(apiVersion))
  add(path_594309, "name", newJString(name))
  add(path_594309, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_594311 = metadata
  result = call_594308.call(path_594309, query_594310, nil, nil, body_594311)

var webAppsUpdateMetadata* = Call_WebAppsUpdateMetadata_594299(
    name: "webAppsUpdateMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_WebAppsUpdateMetadata_594300, base: "",
    url: url_WebAppsUpdateMetadata_594301, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadata_594312 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetadata_594314(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadata_594313(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594315 = path.getOrDefault("resourceGroupName")
  valid_594315 = validateParameter(valid_594315, JString, required = true,
                                 default = nil)
  if valid_594315 != nil:
    section.add "resourceGroupName", valid_594315
  var valid_594316 = path.getOrDefault("name")
  valid_594316 = validateParameter(valid_594316, JString, required = true,
                                 default = nil)
  if valid_594316 != nil:
    section.add "name", valid_594316
  var valid_594317 = path.getOrDefault("subscriptionId")
  valid_594317 = validateParameter(valid_594317, JString, required = true,
                                 default = nil)
  if valid_594317 != nil:
    section.add "subscriptionId", valid_594317
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594318 = query.getOrDefault("api-version")
  valid_594318 = validateParameter(valid_594318, JString, required = true,
                                 default = nil)
  if valid_594318 != nil:
    section.add "api-version", valid_594318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594319: Call_WebAppsListMetadata_594312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_594319.validator(path, query, header, formData, body)
  let scheme = call_594319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594319.url(scheme.get, call_594319.host, call_594319.base,
                         call_594319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594319, url, valid)

proc call*(call_594320: Call_WebAppsListMetadata_594312; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListMetadata
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594321 = newJObject()
  var query_594322 = newJObject()
  add(path_594321, "resourceGroupName", newJString(resourceGroupName))
  add(query_594322, "api-version", newJString(apiVersion))
  add(path_594321, "name", newJString(name))
  add(path_594321, "subscriptionId", newJString(subscriptionId))
  result = call_594320.call(path_594321, query_594322, nil, nil, nil)

var webAppsListMetadata* = Call_WebAppsListMetadata_594312(
    name: "webAppsListMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_WebAppsListMetadata_594313, base: "",
    url: url_WebAppsListMetadata_594314, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentials_594323 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingCredentials_594325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentials_594324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594326 = path.getOrDefault("resourceGroupName")
  valid_594326 = validateParameter(valid_594326, JString, required = true,
                                 default = nil)
  if valid_594326 != nil:
    section.add "resourceGroupName", valid_594326
  var valid_594327 = path.getOrDefault("name")
  valid_594327 = validateParameter(valid_594327, JString, required = true,
                                 default = nil)
  if valid_594327 != nil:
    section.add "name", valid_594327
  var valid_594328 = path.getOrDefault("subscriptionId")
  valid_594328 = validateParameter(valid_594328, JString, required = true,
                                 default = nil)
  if valid_594328 != nil:
    section.add "subscriptionId", valid_594328
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594329 = query.getOrDefault("api-version")
  valid_594329 = validateParameter(valid_594329, JString, required = true,
                                 default = nil)
  if valid_594329 != nil:
    section.add "api-version", valid_594329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594330: Call_WebAppsListPublishingCredentials_594323;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_594330.validator(path, query, header, formData, body)
  let scheme = call_594330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594330.url(scheme.get, call_594330.host, call_594330.base,
                         call_594330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594330, url, valid)

proc call*(call_594331: Call_WebAppsListPublishingCredentials_594323;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentials
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594332 = newJObject()
  var query_594333 = newJObject()
  add(path_594332, "resourceGroupName", newJString(resourceGroupName))
  add(query_594333, "api-version", newJString(apiVersion))
  add(path_594332, "name", newJString(name))
  add(path_594332, "subscriptionId", newJString(subscriptionId))
  result = call_594331.call(path_594332, query_594333, nil, nil, nil)

var webAppsListPublishingCredentials* = Call_WebAppsListPublishingCredentials_594323(
    name: "webAppsListPublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentials_594324, base: "",
    url: url_WebAppsListPublishingCredentials_594325, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettings_594334 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSitePushSettings_594336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettings_594335(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594337 = path.getOrDefault("resourceGroupName")
  valid_594337 = validateParameter(valid_594337, JString, required = true,
                                 default = nil)
  if valid_594337 != nil:
    section.add "resourceGroupName", valid_594337
  var valid_594338 = path.getOrDefault("name")
  valid_594338 = validateParameter(valid_594338, JString, required = true,
                                 default = nil)
  if valid_594338 != nil:
    section.add "name", valid_594338
  var valid_594339 = path.getOrDefault("subscriptionId")
  valid_594339 = validateParameter(valid_594339, JString, required = true,
                                 default = nil)
  if valid_594339 != nil:
    section.add "subscriptionId", valid_594339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594340 = query.getOrDefault("api-version")
  valid_594340 = validateParameter(valid_594340, JString, required = true,
                                 default = nil)
  if valid_594340 != nil:
    section.add "api-version", valid_594340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594342: Call_WebAppsUpdateSitePushSettings_594334; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_594342.validator(path, query, header, formData, body)
  let scheme = call_594342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594342.url(scheme.get, call_594342.host, call_594342.base,
                         call_594342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594342, url, valid)

proc call*(call_594343: Call_WebAppsUpdateSitePushSettings_594334;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettings
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_594344 = newJObject()
  var query_594345 = newJObject()
  var body_594346 = newJObject()
  add(path_594344, "resourceGroupName", newJString(resourceGroupName))
  add(query_594345, "api-version", newJString(apiVersion))
  add(path_594344, "name", newJString(name))
  add(path_594344, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_594346 = pushSettings
  result = call_594343.call(path_594344, query_594345, nil, nil, body_594346)

var webAppsUpdateSitePushSettings* = Call_WebAppsUpdateSitePushSettings_594334(
    name: "webAppsUpdateSitePushSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettings_594335, base: "",
    url: url_WebAppsUpdateSitePushSettings_594336, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettings_594347 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSitePushSettings_594349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettings_594348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594350 = path.getOrDefault("resourceGroupName")
  valid_594350 = validateParameter(valid_594350, JString, required = true,
                                 default = nil)
  if valid_594350 != nil:
    section.add "resourceGroupName", valid_594350
  var valid_594351 = path.getOrDefault("name")
  valid_594351 = validateParameter(valid_594351, JString, required = true,
                                 default = nil)
  if valid_594351 != nil:
    section.add "name", valid_594351
  var valid_594352 = path.getOrDefault("subscriptionId")
  valid_594352 = validateParameter(valid_594352, JString, required = true,
                                 default = nil)
  if valid_594352 != nil:
    section.add "subscriptionId", valid_594352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594353 = query.getOrDefault("api-version")
  valid_594353 = validateParameter(valid_594353, JString, required = true,
                                 default = nil)
  if valid_594353 != nil:
    section.add "api-version", valid_594353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594354: Call_WebAppsListSitePushSettings_594347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_594354.validator(path, query, header, formData, body)
  let scheme = call_594354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594354.url(scheme.get, call_594354.host, call_594354.base,
                         call_594354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594354, url, valid)

proc call*(call_594355: Call_WebAppsListSitePushSettings_594347;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettings
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594356 = newJObject()
  var query_594357 = newJObject()
  add(path_594356, "resourceGroupName", newJString(resourceGroupName))
  add(query_594357, "api-version", newJString(apiVersion))
  add(path_594356, "name", newJString(name))
  add(path_594356, "subscriptionId", newJString(subscriptionId))
  result = call_594355.call(path_594356, query_594357, nil, nil, nil)

var webAppsListSitePushSettings* = Call_WebAppsListSitePushSettings_594347(
    name: "webAppsListSitePushSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettings_594348, base: "",
    url: url_WebAppsListSitePushSettings_594349, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlotConfigurationNames_594369 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSlotConfigurationNames_594371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlotConfigurationNames_594370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594372 = path.getOrDefault("resourceGroupName")
  valid_594372 = validateParameter(valid_594372, JString, required = true,
                                 default = nil)
  if valid_594372 != nil:
    section.add "resourceGroupName", valid_594372
  var valid_594373 = path.getOrDefault("name")
  valid_594373 = validateParameter(valid_594373, JString, required = true,
                                 default = nil)
  if valid_594373 != nil:
    section.add "name", valid_594373
  var valid_594374 = path.getOrDefault("subscriptionId")
  valid_594374 = validateParameter(valid_594374, JString, required = true,
                                 default = nil)
  if valid_594374 != nil:
    section.add "subscriptionId", valid_594374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594375 = query.getOrDefault("api-version")
  valid_594375 = validateParameter(valid_594375, JString, required = true,
                                 default = nil)
  if valid_594375 != nil:
    section.add "api-version", valid_594375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594377: Call_WebAppsUpdateSlotConfigurationNames_594369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  let valid = call_594377.validator(path, query, header, formData, body)
  let scheme = call_594377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594377.url(scheme.get, call_594377.host, call_594377.base,
                         call_594377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594377, url, valid)

proc call*(call_594378: Call_WebAppsUpdateSlotConfigurationNames_594369;
          resourceGroupName: string; apiVersion: string; name: string;
          slotConfigNames: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateSlotConfigurationNames
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594379 = newJObject()
  var query_594380 = newJObject()
  var body_594381 = newJObject()
  add(path_594379, "resourceGroupName", newJString(resourceGroupName))
  add(query_594380, "api-version", newJString(apiVersion))
  add(path_594379, "name", newJString(name))
  if slotConfigNames != nil:
    body_594381 = slotConfigNames
  add(path_594379, "subscriptionId", newJString(subscriptionId))
  result = call_594378.call(path_594379, query_594380, nil, nil, body_594381)

var webAppsUpdateSlotConfigurationNames* = Call_WebAppsUpdateSlotConfigurationNames_594369(
    name: "webAppsUpdateSlotConfigurationNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsUpdateSlotConfigurationNames_594370, base: "",
    url: url_WebAppsUpdateSlotConfigurationNames_594371, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotConfigurationNames_594358 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlotConfigurationNames_594360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotConfigurationNames_594359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594361 = path.getOrDefault("resourceGroupName")
  valid_594361 = validateParameter(valid_594361, JString, required = true,
                                 default = nil)
  if valid_594361 != nil:
    section.add "resourceGroupName", valid_594361
  var valid_594362 = path.getOrDefault("name")
  valid_594362 = validateParameter(valid_594362, JString, required = true,
                                 default = nil)
  if valid_594362 != nil:
    section.add "name", valid_594362
  var valid_594363 = path.getOrDefault("subscriptionId")
  valid_594363 = validateParameter(valid_594363, JString, required = true,
                                 default = nil)
  if valid_594363 != nil:
    section.add "subscriptionId", valid_594363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594364 = query.getOrDefault("api-version")
  valid_594364 = validateParameter(valid_594364, JString, required = true,
                                 default = nil)
  if valid_594364 != nil:
    section.add "api-version", valid_594364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594365: Call_WebAppsListSlotConfigurationNames_594358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  let valid = call_594365.validator(path, query, header, formData, body)
  let scheme = call_594365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594365.url(scheme.get, call_594365.host, call_594365.base,
                         call_594365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594365, url, valid)

proc call*(call_594366: Call_WebAppsListSlotConfigurationNames_594358;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSlotConfigurationNames
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594367 = newJObject()
  var query_594368 = newJObject()
  add(path_594367, "resourceGroupName", newJString(resourceGroupName))
  add(query_594368, "api-version", newJString(apiVersion))
  add(path_594367, "name", newJString(name))
  add(path_594367, "subscriptionId", newJString(subscriptionId))
  result = call_594366.call(path_594367, query_594368, nil, nil, nil)

var webAppsListSlotConfigurationNames* = Call_WebAppsListSlotConfigurationNames_594358(
    name: "webAppsListSlotConfigurationNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsListSlotConfigurationNames_594359, base: "",
    url: url_WebAppsListSlotConfigurationNames_594360, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfiguration_594393 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateConfiguration_594395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfiguration_594394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594396 = path.getOrDefault("resourceGroupName")
  valid_594396 = validateParameter(valid_594396, JString, required = true,
                                 default = nil)
  if valid_594396 != nil:
    section.add "resourceGroupName", valid_594396
  var valid_594397 = path.getOrDefault("name")
  valid_594397 = validateParameter(valid_594397, JString, required = true,
                                 default = nil)
  if valid_594397 != nil:
    section.add "name", valid_594397
  var valid_594398 = path.getOrDefault("subscriptionId")
  valid_594398 = validateParameter(valid_594398, JString, required = true,
                                 default = nil)
  if valid_594398 != nil:
    section.add "subscriptionId", valid_594398
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594399 = query.getOrDefault("api-version")
  valid_594399 = validateParameter(valid_594399, JString, required = true,
                                 default = nil)
  if valid_594399 != nil:
    section.add "api-version", valid_594399
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594401: Call_WebAppsCreateOrUpdateConfiguration_594393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_594401.validator(path, query, header, formData, body)
  let scheme = call_594401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594401.url(scheme.get, call_594401.host, call_594401.base,
                         call_594401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594401, url, valid)

proc call*(call_594402: Call_WebAppsCreateOrUpdateConfiguration_594393;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594403 = newJObject()
  var query_594404 = newJObject()
  var body_594405 = newJObject()
  add(path_594403, "resourceGroupName", newJString(resourceGroupName))
  add(query_594404, "api-version", newJString(apiVersion))
  add(path_594403, "name", newJString(name))
  if siteConfig != nil:
    body_594405 = siteConfig
  add(path_594403, "subscriptionId", newJString(subscriptionId))
  result = call_594402.call(path_594403, query_594404, nil, nil, body_594405)

var webAppsCreateOrUpdateConfiguration* = Call_WebAppsCreateOrUpdateConfiguration_594393(
    name: "webAppsCreateOrUpdateConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfiguration_594394, base: "",
    url: url_WebAppsCreateOrUpdateConfiguration_594395, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfiguration_594382 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfiguration_594384(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfiguration_594383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594385 = path.getOrDefault("resourceGroupName")
  valid_594385 = validateParameter(valid_594385, JString, required = true,
                                 default = nil)
  if valid_594385 != nil:
    section.add "resourceGroupName", valid_594385
  var valid_594386 = path.getOrDefault("name")
  valid_594386 = validateParameter(valid_594386, JString, required = true,
                                 default = nil)
  if valid_594386 != nil:
    section.add "name", valid_594386
  var valid_594387 = path.getOrDefault("subscriptionId")
  valid_594387 = validateParameter(valid_594387, JString, required = true,
                                 default = nil)
  if valid_594387 != nil:
    section.add "subscriptionId", valid_594387
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594388 = query.getOrDefault("api-version")
  valid_594388 = validateParameter(valid_594388, JString, required = true,
                                 default = nil)
  if valid_594388 != nil:
    section.add "api-version", valid_594388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594389: Call_WebAppsGetConfiguration_594382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_594389.validator(path, query, header, formData, body)
  let scheme = call_594389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594389.url(scheme.get, call_594389.host, call_594389.base,
                         call_594389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594389, url, valid)

proc call*(call_594390: Call_WebAppsGetConfiguration_594382;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfiguration
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594391 = newJObject()
  var query_594392 = newJObject()
  add(path_594391, "resourceGroupName", newJString(resourceGroupName))
  add(query_594392, "api-version", newJString(apiVersion))
  add(path_594391, "name", newJString(name))
  add(path_594391, "subscriptionId", newJString(subscriptionId))
  result = call_594390.call(path_594391, query_594392, nil, nil, nil)

var webAppsGetConfiguration* = Call_WebAppsGetConfiguration_594382(
    name: "webAppsGetConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsGetConfiguration_594383, base: "",
    url: url_WebAppsGetConfiguration_594384, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfiguration_594406 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConfiguration_594408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfiguration_594407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594409 = path.getOrDefault("resourceGroupName")
  valid_594409 = validateParameter(valid_594409, JString, required = true,
                                 default = nil)
  if valid_594409 != nil:
    section.add "resourceGroupName", valid_594409
  var valid_594410 = path.getOrDefault("name")
  valid_594410 = validateParameter(valid_594410, JString, required = true,
                                 default = nil)
  if valid_594410 != nil:
    section.add "name", valid_594410
  var valid_594411 = path.getOrDefault("subscriptionId")
  valid_594411 = validateParameter(valid_594411, JString, required = true,
                                 default = nil)
  if valid_594411 != nil:
    section.add "subscriptionId", valid_594411
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594412 = query.getOrDefault("api-version")
  valid_594412 = validateParameter(valid_594412, JString, required = true,
                                 default = nil)
  if valid_594412 != nil:
    section.add "api-version", valid_594412
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594414: Call_WebAppsUpdateConfiguration_594406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_594414.validator(path, query, header, formData, body)
  let scheme = call_594414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594414.url(scheme.get, call_594414.host, call_594414.base,
                         call_594414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594414, url, valid)

proc call*(call_594415: Call_WebAppsUpdateConfiguration_594406;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594416 = newJObject()
  var query_594417 = newJObject()
  var body_594418 = newJObject()
  add(path_594416, "resourceGroupName", newJString(resourceGroupName))
  add(query_594417, "api-version", newJString(apiVersion))
  add(path_594416, "name", newJString(name))
  if siteConfig != nil:
    body_594418 = siteConfig
  add(path_594416, "subscriptionId", newJString(subscriptionId))
  result = call_594415.call(path_594416, query_594417, nil, nil, body_594418)

var webAppsUpdateConfiguration* = Call_WebAppsUpdateConfiguration_594406(
    name: "webAppsUpdateConfiguration", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsUpdateConfiguration_594407, base: "",
    url: url_WebAppsUpdateConfiguration_594408, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfo_594419 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurationSnapshotInfo_594421(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfo_594420(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594422 = path.getOrDefault("resourceGroupName")
  valid_594422 = validateParameter(valid_594422, JString, required = true,
                                 default = nil)
  if valid_594422 != nil:
    section.add "resourceGroupName", valid_594422
  var valid_594423 = path.getOrDefault("name")
  valid_594423 = validateParameter(valid_594423, JString, required = true,
                                 default = nil)
  if valid_594423 != nil:
    section.add "name", valid_594423
  var valid_594424 = path.getOrDefault("subscriptionId")
  valid_594424 = validateParameter(valid_594424, JString, required = true,
                                 default = nil)
  if valid_594424 != nil:
    section.add "subscriptionId", valid_594424
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594425 = query.getOrDefault("api-version")
  valid_594425 = validateParameter(valid_594425, JString, required = true,
                                 default = nil)
  if valid_594425 != nil:
    section.add "api-version", valid_594425
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594426: Call_WebAppsListConfigurationSnapshotInfo_594419;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_594426.validator(path, query, header, formData, body)
  let scheme = call_594426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594426.url(scheme.get, call_594426.host, call_594426.base,
                         call_594426.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594426, url, valid)

proc call*(call_594427: Call_WebAppsListConfigurationSnapshotInfo_594419;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfo
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594428 = newJObject()
  var query_594429 = newJObject()
  add(path_594428, "resourceGroupName", newJString(resourceGroupName))
  add(query_594429, "api-version", newJString(apiVersion))
  add(path_594428, "name", newJString(name))
  add(path_594428, "subscriptionId", newJString(subscriptionId))
  result = call_594427.call(path_594428, query_594429, nil, nil, nil)

var webAppsListConfigurationSnapshotInfo* = Call_WebAppsListConfigurationSnapshotInfo_594419(
    name: "webAppsListConfigurationSnapshotInfo", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfo_594420, base: "",
    url: url_WebAppsListConfigurationSnapshotInfo_594421, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshot_594430 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfigurationSnapshot_594432(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshot_594431(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594433 = path.getOrDefault("resourceGroupName")
  valid_594433 = validateParameter(valid_594433, JString, required = true,
                                 default = nil)
  if valid_594433 != nil:
    section.add "resourceGroupName", valid_594433
  var valid_594434 = path.getOrDefault("name")
  valid_594434 = validateParameter(valid_594434, JString, required = true,
                                 default = nil)
  if valid_594434 != nil:
    section.add "name", valid_594434
  var valid_594435 = path.getOrDefault("snapshotId")
  valid_594435 = validateParameter(valid_594435, JString, required = true,
                                 default = nil)
  if valid_594435 != nil:
    section.add "snapshotId", valid_594435
  var valid_594436 = path.getOrDefault("subscriptionId")
  valid_594436 = validateParameter(valid_594436, JString, required = true,
                                 default = nil)
  if valid_594436 != nil:
    section.add "subscriptionId", valid_594436
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594437 = query.getOrDefault("api-version")
  valid_594437 = validateParameter(valid_594437, JString, required = true,
                                 default = nil)
  if valid_594437 != nil:
    section.add "api-version", valid_594437
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594438: Call_WebAppsGetConfigurationSnapshot_594430;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_594438.validator(path, query, header, formData, body)
  let scheme = call_594438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594438.url(scheme.get, call_594438.host, call_594438.base,
                         call_594438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594438, url, valid)

proc call*(call_594439: Call_WebAppsGetConfigurationSnapshot_594430;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594440 = newJObject()
  var query_594441 = newJObject()
  add(path_594440, "resourceGroupName", newJString(resourceGroupName))
  add(query_594441, "api-version", newJString(apiVersion))
  add(path_594440, "name", newJString(name))
  add(path_594440, "snapshotId", newJString(snapshotId))
  add(path_594440, "subscriptionId", newJString(subscriptionId))
  result = call_594439.call(path_594440, query_594441, nil, nil, nil)

var webAppsGetConfigurationSnapshot* = Call_WebAppsGetConfigurationSnapshot_594430(
    name: "webAppsGetConfigurationSnapshot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshot_594431, base: "",
    url: url_WebAppsGetConfigurationSnapshot_594432, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshot_594442 = ref object of OpenApiRestCall_593437
proc url_WebAppsRecoverSiteConfigurationSnapshot_594444(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshot_594443(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594445 = path.getOrDefault("resourceGroupName")
  valid_594445 = validateParameter(valid_594445, JString, required = true,
                                 default = nil)
  if valid_594445 != nil:
    section.add "resourceGroupName", valid_594445
  var valid_594446 = path.getOrDefault("name")
  valid_594446 = validateParameter(valid_594446, JString, required = true,
                                 default = nil)
  if valid_594446 != nil:
    section.add "name", valid_594446
  var valid_594447 = path.getOrDefault("snapshotId")
  valid_594447 = validateParameter(valid_594447, JString, required = true,
                                 default = nil)
  if valid_594447 != nil:
    section.add "snapshotId", valid_594447
  var valid_594448 = path.getOrDefault("subscriptionId")
  valid_594448 = validateParameter(valid_594448, JString, required = true,
                                 default = nil)
  if valid_594448 != nil:
    section.add "subscriptionId", valid_594448
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594449 = query.getOrDefault("api-version")
  valid_594449 = validateParameter(valid_594449, JString, required = true,
                                 default = nil)
  if valid_594449 != nil:
    section.add "api-version", valid_594449
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594450: Call_WebAppsRecoverSiteConfigurationSnapshot_594442;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_594450.validator(path, query, header, formData, body)
  let scheme = call_594450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594450.url(scheme.get, call_594450.host, call_594450.base,
                         call_594450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594450, url, valid)

proc call*(call_594451: Call_WebAppsRecoverSiteConfigurationSnapshot_594442;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594452 = newJObject()
  var query_594453 = newJObject()
  add(path_594452, "resourceGroupName", newJString(resourceGroupName))
  add(query_594453, "api-version", newJString(apiVersion))
  add(path_594452, "name", newJString(name))
  add(path_594452, "snapshotId", newJString(snapshotId))
  add(path_594452, "subscriptionId", newJString(subscriptionId))
  result = call_594451.call(path_594452, query_594453, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshot* = Call_WebAppsRecoverSiteConfigurationSnapshot_594442(
    name: "webAppsRecoverSiteConfigurationSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshot_594443, base: "",
    url: url_WebAppsRecoverSiteConfigurationSnapshot_594444,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogs_594454 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebSiteContainerLogs_594456(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogs_594455(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594457 = path.getOrDefault("resourceGroupName")
  valid_594457 = validateParameter(valid_594457, JString, required = true,
                                 default = nil)
  if valid_594457 != nil:
    section.add "resourceGroupName", valid_594457
  var valid_594458 = path.getOrDefault("name")
  valid_594458 = validateParameter(valid_594458, JString, required = true,
                                 default = nil)
  if valid_594458 != nil:
    section.add "name", valid_594458
  var valid_594459 = path.getOrDefault("subscriptionId")
  valid_594459 = validateParameter(valid_594459, JString, required = true,
                                 default = nil)
  if valid_594459 != nil:
    section.add "subscriptionId", valid_594459
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594460 = query.getOrDefault("api-version")
  valid_594460 = validateParameter(valid_594460, JString, required = true,
                                 default = nil)
  if valid_594460 != nil:
    section.add "api-version", valid_594460
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594461: Call_WebAppsGetWebSiteContainerLogs_594454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_594461.validator(path, query, header, formData, body)
  let scheme = call_594461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594461.url(scheme.get, call_594461.host, call_594461.base,
                         call_594461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594461, url, valid)

proc call*(call_594462: Call_WebAppsGetWebSiteContainerLogs_594454;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogs
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594463 = newJObject()
  var query_594464 = newJObject()
  add(path_594463, "resourceGroupName", newJString(resourceGroupName))
  add(query_594464, "api-version", newJString(apiVersion))
  add(path_594463, "name", newJString(name))
  add(path_594463, "subscriptionId", newJString(subscriptionId))
  result = call_594462.call(path_594463, query_594464, nil, nil, nil)

var webAppsGetWebSiteContainerLogs* = Call_WebAppsGetWebSiteContainerLogs_594454(
    name: "webAppsGetWebSiteContainerLogs", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogs_594455, base: "",
    url: url_WebAppsGetWebSiteContainerLogs_594456, schemes: {Scheme.Https})
type
  Call_WebAppsGetContainerLogsZip_594465 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetContainerLogsZip_594467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContainerLogsZip_594466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594468 = path.getOrDefault("resourceGroupName")
  valid_594468 = validateParameter(valid_594468, JString, required = true,
                                 default = nil)
  if valid_594468 != nil:
    section.add "resourceGroupName", valid_594468
  var valid_594469 = path.getOrDefault("name")
  valid_594469 = validateParameter(valid_594469, JString, required = true,
                                 default = nil)
  if valid_594469 != nil:
    section.add "name", valid_594469
  var valid_594470 = path.getOrDefault("subscriptionId")
  valid_594470 = validateParameter(valid_594470, JString, required = true,
                                 default = nil)
  if valid_594470 != nil:
    section.add "subscriptionId", valid_594470
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594471 = query.getOrDefault("api-version")
  valid_594471 = validateParameter(valid_594471, JString, required = true,
                                 default = nil)
  if valid_594471 != nil:
    section.add "api-version", valid_594471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594472: Call_WebAppsGetContainerLogsZip_594465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_594472.validator(path, query, header, formData, body)
  let scheme = call_594472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594472.url(scheme.get, call_594472.host, call_594472.base,
                         call_594472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594472, url, valid)

proc call*(call_594473: Call_WebAppsGetContainerLogsZip_594465;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetContainerLogsZip
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594474 = newJObject()
  var query_594475 = newJObject()
  add(path_594474, "resourceGroupName", newJString(resourceGroupName))
  add(query_594475, "api-version", newJString(apiVersion))
  add(path_594474, "name", newJString(name))
  add(path_594474, "subscriptionId", newJString(subscriptionId))
  result = call_594473.call(path_594474, query_594475, nil, nil, nil)

var webAppsGetContainerLogsZip* = Call_WebAppsGetContainerLogsZip_594465(
    name: "webAppsGetContainerLogsZip", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    validator: validate_WebAppsGetContainerLogsZip_594466, base: "",
    url: url_WebAppsGetContainerLogsZip_594467, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobs_594476 = ref object of OpenApiRestCall_593437
proc url_WebAppsListContinuousWebJobs_594478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobs_594477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594479 = path.getOrDefault("resourceGroupName")
  valid_594479 = validateParameter(valid_594479, JString, required = true,
                                 default = nil)
  if valid_594479 != nil:
    section.add "resourceGroupName", valid_594479
  var valid_594480 = path.getOrDefault("name")
  valid_594480 = validateParameter(valid_594480, JString, required = true,
                                 default = nil)
  if valid_594480 != nil:
    section.add "name", valid_594480
  var valid_594481 = path.getOrDefault("subscriptionId")
  valid_594481 = validateParameter(valid_594481, JString, required = true,
                                 default = nil)
  if valid_594481 != nil:
    section.add "subscriptionId", valid_594481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594482 = query.getOrDefault("api-version")
  valid_594482 = validateParameter(valid_594482, JString, required = true,
                                 default = nil)
  if valid_594482 != nil:
    section.add "api-version", valid_594482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594483: Call_WebAppsListContinuousWebJobs_594476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_594483.validator(path, query, header, formData, body)
  let scheme = call_594483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594483.url(scheme.get, call_594483.host, call_594483.base,
                         call_594483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594483, url, valid)

proc call*(call_594484: Call_WebAppsListContinuousWebJobs_594476;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobs
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594485 = newJObject()
  var query_594486 = newJObject()
  add(path_594485, "resourceGroupName", newJString(resourceGroupName))
  add(query_594486, "api-version", newJString(apiVersion))
  add(path_594485, "name", newJString(name))
  add(path_594485, "subscriptionId", newJString(subscriptionId))
  result = call_594484.call(path_594485, query_594486, nil, nil, nil)

var webAppsListContinuousWebJobs* = Call_WebAppsListContinuousWebJobs_594476(
    name: "webAppsListContinuousWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobs_594477, base: "",
    url: url_WebAppsListContinuousWebJobs_594478, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJob_594487 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetContinuousWebJob_594489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJob_594488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594490 = path.getOrDefault("resourceGroupName")
  valid_594490 = validateParameter(valid_594490, JString, required = true,
                                 default = nil)
  if valid_594490 != nil:
    section.add "resourceGroupName", valid_594490
  var valid_594491 = path.getOrDefault("name")
  valid_594491 = validateParameter(valid_594491, JString, required = true,
                                 default = nil)
  if valid_594491 != nil:
    section.add "name", valid_594491
  var valid_594492 = path.getOrDefault("subscriptionId")
  valid_594492 = validateParameter(valid_594492, JString, required = true,
                                 default = nil)
  if valid_594492 != nil:
    section.add "subscriptionId", valid_594492
  var valid_594493 = path.getOrDefault("webJobName")
  valid_594493 = validateParameter(valid_594493, JString, required = true,
                                 default = nil)
  if valid_594493 != nil:
    section.add "webJobName", valid_594493
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594494 = query.getOrDefault("api-version")
  valid_594494 = validateParameter(valid_594494, JString, required = true,
                                 default = nil)
  if valid_594494 != nil:
    section.add "api-version", valid_594494
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594495: Call_WebAppsGetContinuousWebJob_594487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594495.validator(path, query, header, formData, body)
  let scheme = call_594495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594495.url(scheme.get, call_594495.host, call_594495.base,
                         call_594495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594495, url, valid)

proc call*(call_594496: Call_WebAppsGetContinuousWebJob_594487;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJob
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594497 = newJObject()
  var query_594498 = newJObject()
  add(path_594497, "resourceGroupName", newJString(resourceGroupName))
  add(query_594498, "api-version", newJString(apiVersion))
  add(path_594497, "name", newJString(name))
  add(path_594497, "subscriptionId", newJString(subscriptionId))
  add(path_594497, "webJobName", newJString(webJobName))
  result = call_594496.call(path_594497, query_594498, nil, nil, nil)

var webAppsGetContinuousWebJob* = Call_WebAppsGetContinuousWebJob_594487(
    name: "webAppsGetContinuousWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJob_594488, base: "",
    url: url_WebAppsGetContinuousWebJob_594489, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJob_594499 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteContinuousWebJob_594501(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJob_594500(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594502 = path.getOrDefault("resourceGroupName")
  valid_594502 = validateParameter(valid_594502, JString, required = true,
                                 default = nil)
  if valid_594502 != nil:
    section.add "resourceGroupName", valid_594502
  var valid_594503 = path.getOrDefault("name")
  valid_594503 = validateParameter(valid_594503, JString, required = true,
                                 default = nil)
  if valid_594503 != nil:
    section.add "name", valid_594503
  var valid_594504 = path.getOrDefault("subscriptionId")
  valid_594504 = validateParameter(valid_594504, JString, required = true,
                                 default = nil)
  if valid_594504 != nil:
    section.add "subscriptionId", valid_594504
  var valid_594505 = path.getOrDefault("webJobName")
  valid_594505 = validateParameter(valid_594505, JString, required = true,
                                 default = nil)
  if valid_594505 != nil:
    section.add "webJobName", valid_594505
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594506 = query.getOrDefault("api-version")
  valid_594506 = validateParameter(valid_594506, JString, required = true,
                                 default = nil)
  if valid_594506 != nil:
    section.add "api-version", valid_594506
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594507: Call_WebAppsDeleteContinuousWebJob_594499; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594507.validator(path, query, header, formData, body)
  let scheme = call_594507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594507.url(scheme.get, call_594507.host, call_594507.base,
                         call_594507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594507, url, valid)

proc call*(call_594508: Call_WebAppsDeleteContinuousWebJob_594499;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJob
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594509 = newJObject()
  var query_594510 = newJObject()
  add(path_594509, "resourceGroupName", newJString(resourceGroupName))
  add(query_594510, "api-version", newJString(apiVersion))
  add(path_594509, "name", newJString(name))
  add(path_594509, "subscriptionId", newJString(subscriptionId))
  add(path_594509, "webJobName", newJString(webJobName))
  result = call_594508.call(path_594509, query_594510, nil, nil, nil)

var webAppsDeleteContinuousWebJob* = Call_WebAppsDeleteContinuousWebJob_594499(
    name: "webAppsDeleteContinuousWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJob_594500, base: "",
    url: url_WebAppsDeleteContinuousWebJob_594501, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJob_594511 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartContinuousWebJob_594513(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJob_594512(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594514 = path.getOrDefault("resourceGroupName")
  valid_594514 = validateParameter(valid_594514, JString, required = true,
                                 default = nil)
  if valid_594514 != nil:
    section.add "resourceGroupName", valid_594514
  var valid_594515 = path.getOrDefault("name")
  valid_594515 = validateParameter(valid_594515, JString, required = true,
                                 default = nil)
  if valid_594515 != nil:
    section.add "name", valid_594515
  var valid_594516 = path.getOrDefault("subscriptionId")
  valid_594516 = validateParameter(valid_594516, JString, required = true,
                                 default = nil)
  if valid_594516 != nil:
    section.add "subscriptionId", valid_594516
  var valid_594517 = path.getOrDefault("webJobName")
  valid_594517 = validateParameter(valid_594517, JString, required = true,
                                 default = nil)
  if valid_594517 != nil:
    section.add "webJobName", valid_594517
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594518 = query.getOrDefault("api-version")
  valid_594518 = validateParameter(valid_594518, JString, required = true,
                                 default = nil)
  if valid_594518 != nil:
    section.add "api-version", valid_594518
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594519: Call_WebAppsStartContinuousWebJob_594511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_594519.validator(path, query, header, formData, body)
  let scheme = call_594519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594519.url(scheme.get, call_594519.host, call_594519.base,
                         call_594519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594519, url, valid)

proc call*(call_594520: Call_WebAppsStartContinuousWebJob_594511;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJob
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594521 = newJObject()
  var query_594522 = newJObject()
  add(path_594521, "resourceGroupName", newJString(resourceGroupName))
  add(query_594522, "api-version", newJString(apiVersion))
  add(path_594521, "name", newJString(name))
  add(path_594521, "subscriptionId", newJString(subscriptionId))
  add(path_594521, "webJobName", newJString(webJobName))
  result = call_594520.call(path_594521, query_594522, nil, nil, nil)

var webAppsStartContinuousWebJob* = Call_WebAppsStartContinuousWebJob_594511(
    name: "webAppsStartContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJob_594512, base: "",
    url: url_WebAppsStartContinuousWebJob_594513, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJob_594523 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopContinuousWebJob_594525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJob_594524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594526 = path.getOrDefault("resourceGroupName")
  valid_594526 = validateParameter(valid_594526, JString, required = true,
                                 default = nil)
  if valid_594526 != nil:
    section.add "resourceGroupName", valid_594526
  var valid_594527 = path.getOrDefault("name")
  valid_594527 = validateParameter(valid_594527, JString, required = true,
                                 default = nil)
  if valid_594527 != nil:
    section.add "name", valid_594527
  var valid_594528 = path.getOrDefault("subscriptionId")
  valid_594528 = validateParameter(valid_594528, JString, required = true,
                                 default = nil)
  if valid_594528 != nil:
    section.add "subscriptionId", valid_594528
  var valid_594529 = path.getOrDefault("webJobName")
  valid_594529 = validateParameter(valid_594529, JString, required = true,
                                 default = nil)
  if valid_594529 != nil:
    section.add "webJobName", valid_594529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594530 = query.getOrDefault("api-version")
  valid_594530 = validateParameter(valid_594530, JString, required = true,
                                 default = nil)
  if valid_594530 != nil:
    section.add "api-version", valid_594530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594531: Call_WebAppsStopContinuousWebJob_594523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_594531.validator(path, query, header, formData, body)
  let scheme = call_594531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594531.url(scheme.get, call_594531.host, call_594531.base,
                         call_594531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594531, url, valid)

proc call*(call_594532: Call_WebAppsStopContinuousWebJob_594523;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJob
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594533 = newJObject()
  var query_594534 = newJObject()
  add(path_594533, "resourceGroupName", newJString(resourceGroupName))
  add(query_594534, "api-version", newJString(apiVersion))
  add(path_594533, "name", newJString(name))
  add(path_594533, "subscriptionId", newJString(subscriptionId))
  add(path_594533, "webJobName", newJString(webJobName))
  result = call_594532.call(path_594533, query_594534, nil, nil, nil)

var webAppsStopContinuousWebJob* = Call_WebAppsStopContinuousWebJob_594523(
    name: "webAppsStopContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJob_594524, base: "",
    url: url_WebAppsStopContinuousWebJob_594525, schemes: {Scheme.Https})
type
  Call_WebAppsListDeployments_594535 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeployments_594537(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeployments_594536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594538 = path.getOrDefault("resourceGroupName")
  valid_594538 = validateParameter(valid_594538, JString, required = true,
                                 default = nil)
  if valid_594538 != nil:
    section.add "resourceGroupName", valid_594538
  var valid_594539 = path.getOrDefault("name")
  valid_594539 = validateParameter(valid_594539, JString, required = true,
                                 default = nil)
  if valid_594539 != nil:
    section.add "name", valid_594539
  var valid_594540 = path.getOrDefault("subscriptionId")
  valid_594540 = validateParameter(valid_594540, JString, required = true,
                                 default = nil)
  if valid_594540 != nil:
    section.add "subscriptionId", valid_594540
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594541 = query.getOrDefault("api-version")
  valid_594541 = validateParameter(valid_594541, JString, required = true,
                                 default = nil)
  if valid_594541 != nil:
    section.add "api-version", valid_594541
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594542: Call_WebAppsListDeployments_594535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_594542.validator(path, query, header, formData, body)
  let scheme = call_594542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594542.url(scheme.get, call_594542.host, call_594542.base,
                         call_594542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594542, url, valid)

proc call*(call_594543: Call_WebAppsListDeployments_594535;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeployments
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594544 = newJObject()
  var query_594545 = newJObject()
  add(path_594544, "resourceGroupName", newJString(resourceGroupName))
  add(query_594545, "api-version", newJString(apiVersion))
  add(path_594544, "name", newJString(name))
  add(path_594544, "subscriptionId", newJString(subscriptionId))
  result = call_594543.call(path_594544, query_594545, nil, nil, nil)

var webAppsListDeployments* = Call_WebAppsListDeployments_594535(
    name: "webAppsListDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_WebAppsListDeployments_594536, base: "",
    url: url_WebAppsListDeployments_594537, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeployment_594558 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateDeployment_594560(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeployment_594559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594561 = path.getOrDefault("resourceGroupName")
  valid_594561 = validateParameter(valid_594561, JString, required = true,
                                 default = nil)
  if valid_594561 != nil:
    section.add "resourceGroupName", valid_594561
  var valid_594562 = path.getOrDefault("name")
  valid_594562 = validateParameter(valid_594562, JString, required = true,
                                 default = nil)
  if valid_594562 != nil:
    section.add "name", valid_594562
  var valid_594563 = path.getOrDefault("subscriptionId")
  valid_594563 = validateParameter(valid_594563, JString, required = true,
                                 default = nil)
  if valid_594563 != nil:
    section.add "subscriptionId", valid_594563
  var valid_594564 = path.getOrDefault("id")
  valid_594564 = validateParameter(valid_594564, JString, required = true,
                                 default = nil)
  if valid_594564 != nil:
    section.add "id", valid_594564
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594565 = query.getOrDefault("api-version")
  valid_594565 = validateParameter(valid_594565, JString, required = true,
                                 default = nil)
  if valid_594565 != nil:
    section.add "api-version", valid_594565
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594567: Call_WebAppsCreateDeployment_594558; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_594567.validator(path, query, header, formData, body)
  let scheme = call_594567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594567.url(scheme.get, call_594567.host, call_594567.base,
                         call_594567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594567, url, valid)

proc call*(call_594568: Call_WebAppsCreateDeployment_594558;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeployment
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_594569 = newJObject()
  var query_594570 = newJObject()
  var body_594571 = newJObject()
  add(path_594569, "resourceGroupName", newJString(resourceGroupName))
  add(query_594570, "api-version", newJString(apiVersion))
  add(path_594569, "name", newJString(name))
  add(path_594569, "subscriptionId", newJString(subscriptionId))
  add(path_594569, "id", newJString(id))
  if deployment != nil:
    body_594571 = deployment
  result = call_594568.call(path_594569, query_594570, nil, nil, body_594571)

var webAppsCreateDeployment* = Call_WebAppsCreateDeployment_594558(
    name: "webAppsCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsCreateDeployment_594559, base: "",
    url: url_WebAppsCreateDeployment_594560, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeployment_594546 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDeployment_594548(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeployment_594547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594549 = path.getOrDefault("resourceGroupName")
  valid_594549 = validateParameter(valid_594549, JString, required = true,
                                 default = nil)
  if valid_594549 != nil:
    section.add "resourceGroupName", valid_594549
  var valid_594550 = path.getOrDefault("name")
  valid_594550 = validateParameter(valid_594550, JString, required = true,
                                 default = nil)
  if valid_594550 != nil:
    section.add "name", valid_594550
  var valid_594551 = path.getOrDefault("subscriptionId")
  valid_594551 = validateParameter(valid_594551, JString, required = true,
                                 default = nil)
  if valid_594551 != nil:
    section.add "subscriptionId", valid_594551
  var valid_594552 = path.getOrDefault("id")
  valid_594552 = validateParameter(valid_594552, JString, required = true,
                                 default = nil)
  if valid_594552 != nil:
    section.add "id", valid_594552
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594553 = query.getOrDefault("api-version")
  valid_594553 = validateParameter(valid_594553, JString, required = true,
                                 default = nil)
  if valid_594553 != nil:
    section.add "api-version", valid_594553
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594554: Call_WebAppsGetDeployment_594546; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594554.validator(path, query, header, formData, body)
  let scheme = call_594554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594554.url(scheme.get, call_594554.host, call_594554.base,
                         call_594554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594554, url, valid)

proc call*(call_594555: Call_WebAppsGetDeployment_594546;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeployment
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_594556 = newJObject()
  var query_594557 = newJObject()
  add(path_594556, "resourceGroupName", newJString(resourceGroupName))
  add(query_594557, "api-version", newJString(apiVersion))
  add(path_594556, "name", newJString(name))
  add(path_594556, "subscriptionId", newJString(subscriptionId))
  add(path_594556, "id", newJString(id))
  result = call_594555.call(path_594556, query_594557, nil, nil, nil)

var webAppsGetDeployment* = Call_WebAppsGetDeployment_594546(
    name: "webAppsGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsGetDeployment_594547, base: "",
    url: url_WebAppsGetDeployment_594548, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeployment_594572 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDeployment_594574(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeployment_594573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594575 = path.getOrDefault("resourceGroupName")
  valid_594575 = validateParameter(valid_594575, JString, required = true,
                                 default = nil)
  if valid_594575 != nil:
    section.add "resourceGroupName", valid_594575
  var valid_594576 = path.getOrDefault("name")
  valid_594576 = validateParameter(valid_594576, JString, required = true,
                                 default = nil)
  if valid_594576 != nil:
    section.add "name", valid_594576
  var valid_594577 = path.getOrDefault("subscriptionId")
  valid_594577 = validateParameter(valid_594577, JString, required = true,
                                 default = nil)
  if valid_594577 != nil:
    section.add "subscriptionId", valid_594577
  var valid_594578 = path.getOrDefault("id")
  valid_594578 = validateParameter(valid_594578, JString, required = true,
                                 default = nil)
  if valid_594578 != nil:
    section.add "id", valid_594578
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594579 = query.getOrDefault("api-version")
  valid_594579 = validateParameter(valid_594579, JString, required = true,
                                 default = nil)
  if valid_594579 != nil:
    section.add "api-version", valid_594579
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594580: Call_WebAppsDeleteDeployment_594572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594580.validator(path, query, header, formData, body)
  let scheme = call_594580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594580.url(scheme.get, call_594580.host, call_594580.base,
                         call_594580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594580, url, valid)

proc call*(call_594581: Call_WebAppsDeleteDeployment_594572;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeployment
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_594582 = newJObject()
  var query_594583 = newJObject()
  add(path_594582, "resourceGroupName", newJString(resourceGroupName))
  add(query_594583, "api-version", newJString(apiVersion))
  add(path_594582, "name", newJString(name))
  add(path_594582, "subscriptionId", newJString(subscriptionId))
  add(path_594582, "id", newJString(id))
  result = call_594581.call(path_594582, query_594583, nil, nil, nil)

var webAppsDeleteDeployment* = Call_WebAppsDeleteDeployment_594572(
    name: "webAppsDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsDeleteDeployment_594573, base: "",
    url: url_WebAppsDeleteDeployment_594574, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLog_594584 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeploymentLog_594586(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLog_594585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594587 = path.getOrDefault("resourceGroupName")
  valid_594587 = validateParameter(valid_594587, JString, required = true,
                                 default = nil)
  if valid_594587 != nil:
    section.add "resourceGroupName", valid_594587
  var valid_594588 = path.getOrDefault("name")
  valid_594588 = validateParameter(valid_594588, JString, required = true,
                                 default = nil)
  if valid_594588 != nil:
    section.add "name", valid_594588
  var valid_594589 = path.getOrDefault("subscriptionId")
  valid_594589 = validateParameter(valid_594589, JString, required = true,
                                 default = nil)
  if valid_594589 != nil:
    section.add "subscriptionId", valid_594589
  var valid_594590 = path.getOrDefault("id")
  valid_594590 = validateParameter(valid_594590, JString, required = true,
                                 default = nil)
  if valid_594590 != nil:
    section.add "id", valid_594590
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594591 = query.getOrDefault("api-version")
  valid_594591 = validateParameter(valid_594591, JString, required = true,
                                 default = nil)
  if valid_594591 != nil:
    section.add "api-version", valid_594591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594592: Call_WebAppsListDeploymentLog_594584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_594592.validator(path, query, header, formData, body)
  let scheme = call_594592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594592.url(scheme.get, call_594592.host, call_594592.base,
                         call_594592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594592, url, valid)

proc call*(call_594593: Call_WebAppsListDeploymentLog_594584;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLog
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_594594 = newJObject()
  var query_594595 = newJObject()
  add(path_594594, "resourceGroupName", newJString(resourceGroupName))
  add(query_594595, "api-version", newJString(apiVersion))
  add(path_594594, "name", newJString(name))
  add(path_594594, "subscriptionId", newJString(subscriptionId))
  add(path_594594, "id", newJString(id))
  result = call_594593.call(path_594594, query_594595, nil, nil, nil)

var webAppsListDeploymentLog* = Call_WebAppsListDeploymentLog_594584(
    name: "webAppsListDeploymentLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLog_594585, base: "",
    url: url_WebAppsListDeploymentLog_594586, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverBackup_594596 = ref object of OpenApiRestCall_593437
proc url_WebAppsDiscoverBackup_594598(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/discoverbackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverBackup_594597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594599 = path.getOrDefault("resourceGroupName")
  valid_594599 = validateParameter(valid_594599, JString, required = true,
                                 default = nil)
  if valid_594599 != nil:
    section.add "resourceGroupName", valid_594599
  var valid_594600 = path.getOrDefault("name")
  valid_594600 = validateParameter(valid_594600, JString, required = true,
                                 default = nil)
  if valid_594600 != nil:
    section.add "name", valid_594600
  var valid_594601 = path.getOrDefault("subscriptionId")
  valid_594601 = validateParameter(valid_594601, JString, required = true,
                                 default = nil)
  if valid_594601 != nil:
    section.add "subscriptionId", valid_594601
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594602 = query.getOrDefault("api-version")
  valid_594602 = validateParameter(valid_594602, JString, required = true,
                                 default = nil)
  if valid_594602 != nil:
    section.add "api-version", valid_594602
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594604: Call_WebAppsDiscoverBackup_594596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  let valid = call_594604.validator(path, query, header, formData, body)
  let scheme = call_594604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594604.url(scheme.get, call_594604.host, call_594604.base,
                         call_594604.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594604, url, valid)

proc call*(call_594605: Call_WebAppsDiscoverBackup_594596;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverBackup
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_594606 = newJObject()
  var query_594607 = newJObject()
  var body_594608 = newJObject()
  add(path_594606, "resourceGroupName", newJString(resourceGroupName))
  add(query_594607, "api-version", newJString(apiVersion))
  add(path_594606, "name", newJString(name))
  add(path_594606, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594608 = request
  result = call_594605.call(path_594606, query_594607, nil, nil, body_594608)

var webAppsDiscoverBackup* = Call_WebAppsDiscoverBackup_594596(
    name: "webAppsDiscoverBackup", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
    validator: validate_WebAppsDiscoverBackup_594597, base: "",
    url: url_WebAppsDiscoverBackup_594598, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiers_594609 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDomainOwnershipIdentifiers_594611(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiers_594610(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594612 = path.getOrDefault("resourceGroupName")
  valid_594612 = validateParameter(valid_594612, JString, required = true,
                                 default = nil)
  if valid_594612 != nil:
    section.add "resourceGroupName", valid_594612
  var valid_594613 = path.getOrDefault("name")
  valid_594613 = validateParameter(valid_594613, JString, required = true,
                                 default = nil)
  if valid_594613 != nil:
    section.add "name", valid_594613
  var valid_594614 = path.getOrDefault("subscriptionId")
  valid_594614 = validateParameter(valid_594614, JString, required = true,
                                 default = nil)
  if valid_594614 != nil:
    section.add "subscriptionId", valid_594614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594615 = query.getOrDefault("api-version")
  valid_594615 = validateParameter(valid_594615, JString, required = true,
                                 default = nil)
  if valid_594615 != nil:
    section.add "api-version", valid_594615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594616: Call_WebAppsListDomainOwnershipIdentifiers_594609;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_594616.validator(path, query, header, formData, body)
  let scheme = call_594616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594616.url(scheme.get, call_594616.host, call_594616.base,
                         call_594616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594616, url, valid)

proc call*(call_594617: Call_WebAppsListDomainOwnershipIdentifiers_594609;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiers
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594618 = newJObject()
  var query_594619 = newJObject()
  add(path_594618, "resourceGroupName", newJString(resourceGroupName))
  add(query_594619, "api-version", newJString(apiVersion))
  add(path_594618, "name", newJString(name))
  add(path_594618, "subscriptionId", newJString(subscriptionId))
  result = call_594617.call(path_594618, query_594619, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiers* = Call_WebAppsListDomainOwnershipIdentifiers_594609(
    name: "webAppsListDomainOwnershipIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiers_594610, base: "",
    url: url_WebAppsListDomainOwnershipIdentifiers_594611, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594632 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594634(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594633(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594635 = path.getOrDefault("resourceGroupName")
  valid_594635 = validateParameter(valid_594635, JString, required = true,
                                 default = nil)
  if valid_594635 != nil:
    section.add "resourceGroupName", valid_594635
  var valid_594636 = path.getOrDefault("name")
  valid_594636 = validateParameter(valid_594636, JString, required = true,
                                 default = nil)
  if valid_594636 != nil:
    section.add "name", valid_594636
  var valid_594637 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594637 = validateParameter(valid_594637, JString, required = true,
                                 default = nil)
  if valid_594637 != nil:
    section.add "domainOwnershipIdentifierName", valid_594637
  var valid_594638 = path.getOrDefault("subscriptionId")
  valid_594638 = validateParameter(valid_594638, JString, required = true,
                                 default = nil)
  if valid_594638 != nil:
    section.add "subscriptionId", valid_594638
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594639 = query.getOrDefault("api-version")
  valid_594639 = validateParameter(valid_594639, JString, required = true,
                                 default = nil)
  if valid_594639 != nil:
    section.add "api-version", valid_594639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594641: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594632;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_594641.validator(path, query, header, formData, body)
  let scheme = call_594641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594641.url(scheme.get, call_594641.host, call_594641.base,
                         call_594641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594641, url, valid)

proc call*(call_594642: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594632;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594643 = newJObject()
  var query_594644 = newJObject()
  var body_594645 = newJObject()
  add(path_594643, "resourceGroupName", newJString(resourceGroupName))
  add(query_594644, "api-version", newJString(apiVersion))
  add(path_594643, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_594645 = domainOwnershipIdentifier
  add(path_594643, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594643, "subscriptionId", newJString(subscriptionId))
  result = call_594642.call(path_594643, query_594644, nil, nil, body_594645)

var webAppsCreateOrUpdateDomainOwnershipIdentifier* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594632(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifier",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594633,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594634,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifier_594620 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDomainOwnershipIdentifier_594622(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifier_594621(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594623 = path.getOrDefault("resourceGroupName")
  valid_594623 = validateParameter(valid_594623, JString, required = true,
                                 default = nil)
  if valid_594623 != nil:
    section.add "resourceGroupName", valid_594623
  var valid_594624 = path.getOrDefault("name")
  valid_594624 = validateParameter(valid_594624, JString, required = true,
                                 default = nil)
  if valid_594624 != nil:
    section.add "name", valid_594624
  var valid_594625 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594625 = validateParameter(valid_594625, JString, required = true,
                                 default = nil)
  if valid_594625 != nil:
    section.add "domainOwnershipIdentifierName", valid_594625
  var valid_594626 = path.getOrDefault("subscriptionId")
  valid_594626 = validateParameter(valid_594626, JString, required = true,
                                 default = nil)
  if valid_594626 != nil:
    section.add "subscriptionId", valid_594626
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594627 = query.getOrDefault("api-version")
  valid_594627 = validateParameter(valid_594627, JString, required = true,
                                 default = nil)
  if valid_594627 != nil:
    section.add "api-version", valid_594627
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594628: Call_WebAppsGetDomainOwnershipIdentifier_594620;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_594628.validator(path, query, header, formData, body)
  let scheme = call_594628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594628.url(scheme.get, call_594628.host, call_594628.base,
                         call_594628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594628, url, valid)

proc call*(call_594629: Call_WebAppsGetDomainOwnershipIdentifier_594620;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifier
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594630 = newJObject()
  var query_594631 = newJObject()
  add(path_594630, "resourceGroupName", newJString(resourceGroupName))
  add(query_594631, "api-version", newJString(apiVersion))
  add(path_594630, "name", newJString(name))
  add(path_594630, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594630, "subscriptionId", newJString(subscriptionId))
  result = call_594629.call(path_594630, query_594631, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifier* = Call_WebAppsGetDomainOwnershipIdentifier_594620(
    name: "webAppsGetDomainOwnershipIdentifier", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifier_594621, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifier_594622, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifier_594658 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDomainOwnershipIdentifier_594660(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifier_594659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594661 = path.getOrDefault("resourceGroupName")
  valid_594661 = validateParameter(valid_594661, JString, required = true,
                                 default = nil)
  if valid_594661 != nil:
    section.add "resourceGroupName", valid_594661
  var valid_594662 = path.getOrDefault("name")
  valid_594662 = validateParameter(valid_594662, JString, required = true,
                                 default = nil)
  if valid_594662 != nil:
    section.add "name", valid_594662
  var valid_594663 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594663 = validateParameter(valid_594663, JString, required = true,
                                 default = nil)
  if valid_594663 != nil:
    section.add "domainOwnershipIdentifierName", valid_594663
  var valid_594664 = path.getOrDefault("subscriptionId")
  valid_594664 = validateParameter(valid_594664, JString, required = true,
                                 default = nil)
  if valid_594664 != nil:
    section.add "subscriptionId", valid_594664
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594665 = query.getOrDefault("api-version")
  valid_594665 = validateParameter(valid_594665, JString, required = true,
                                 default = nil)
  if valid_594665 != nil:
    section.add "api-version", valid_594665
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594667: Call_WebAppsUpdateDomainOwnershipIdentifier_594658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_594667.validator(path, query, header, formData, body)
  let scheme = call_594667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594667.url(scheme.get, call_594667.host, call_594667.base,
                         call_594667.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594667, url, valid)

proc call*(call_594668: Call_WebAppsUpdateDomainOwnershipIdentifier_594658;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594669 = newJObject()
  var query_594670 = newJObject()
  var body_594671 = newJObject()
  add(path_594669, "resourceGroupName", newJString(resourceGroupName))
  add(query_594670, "api-version", newJString(apiVersion))
  add(path_594669, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_594671 = domainOwnershipIdentifier
  add(path_594669, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594669, "subscriptionId", newJString(subscriptionId))
  result = call_594668.call(path_594669, query_594670, nil, nil, body_594671)

var webAppsUpdateDomainOwnershipIdentifier* = Call_WebAppsUpdateDomainOwnershipIdentifier_594658(
    name: "webAppsUpdateDomainOwnershipIdentifier", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifier_594659, base: "",
    url: url_WebAppsUpdateDomainOwnershipIdentifier_594660,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifier_594646 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDomainOwnershipIdentifier_594648(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifier_594647(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594649 = path.getOrDefault("resourceGroupName")
  valid_594649 = validateParameter(valid_594649, JString, required = true,
                                 default = nil)
  if valid_594649 != nil:
    section.add "resourceGroupName", valid_594649
  var valid_594650 = path.getOrDefault("name")
  valid_594650 = validateParameter(valid_594650, JString, required = true,
                                 default = nil)
  if valid_594650 != nil:
    section.add "name", valid_594650
  var valid_594651 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594651 = validateParameter(valid_594651, JString, required = true,
                                 default = nil)
  if valid_594651 != nil:
    section.add "domainOwnershipIdentifierName", valid_594651
  var valid_594652 = path.getOrDefault("subscriptionId")
  valid_594652 = validateParameter(valid_594652, JString, required = true,
                                 default = nil)
  if valid_594652 != nil:
    section.add "subscriptionId", valid_594652
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594653 = query.getOrDefault("api-version")
  valid_594653 = validateParameter(valid_594653, JString, required = true,
                                 default = nil)
  if valid_594653 != nil:
    section.add "api-version", valid_594653
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594654: Call_WebAppsDeleteDomainOwnershipIdentifier_594646;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_594654.validator(path, query, header, formData, body)
  let scheme = call_594654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594654.url(scheme.get, call_594654.host, call_594654.base,
                         call_594654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594654, url, valid)

proc call*(call_594655: Call_WebAppsDeleteDomainOwnershipIdentifier_594646;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifier
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594656 = newJObject()
  var query_594657 = newJObject()
  add(path_594656, "resourceGroupName", newJString(resourceGroupName))
  add(query_594657, "api-version", newJString(apiVersion))
  add(path_594656, "name", newJString(name))
  add(path_594656, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594656, "subscriptionId", newJString(subscriptionId))
  result = call_594655.call(path_594656, query_594657, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifier* = Call_WebAppsDeleteDomainOwnershipIdentifier_594646(
    name: "webAppsDeleteDomainOwnershipIdentifier", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifier_594647, base: "",
    url: url_WebAppsDeleteDomainOwnershipIdentifier_594648,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperation_594683 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateMSDeployOperation_594685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperation_594684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594686 = path.getOrDefault("resourceGroupName")
  valid_594686 = validateParameter(valid_594686, JString, required = true,
                                 default = nil)
  if valid_594686 != nil:
    section.add "resourceGroupName", valid_594686
  var valid_594687 = path.getOrDefault("name")
  valid_594687 = validateParameter(valid_594687, JString, required = true,
                                 default = nil)
  if valid_594687 != nil:
    section.add "name", valid_594687
  var valid_594688 = path.getOrDefault("subscriptionId")
  valid_594688 = validateParameter(valid_594688, JString, required = true,
                                 default = nil)
  if valid_594688 != nil:
    section.add "subscriptionId", valid_594688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594689 = query.getOrDefault("api-version")
  valid_594689 = validateParameter(valid_594689, JString, required = true,
                                 default = nil)
  if valid_594689 != nil:
    section.add "api-version", valid_594689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594691: Call_WebAppsCreateMSDeployOperation_594683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_594691.validator(path, query, header, formData, body)
  let scheme = call_594691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594691.url(scheme.get, call_594691.host, call_594691.base,
                         call_594691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594691, url, valid)

proc call*(call_594692: Call_WebAppsCreateMSDeployOperation_594683;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_594693 = newJObject()
  var query_594694 = newJObject()
  var body_594695 = newJObject()
  add(path_594693, "resourceGroupName", newJString(resourceGroupName))
  add(query_594694, "api-version", newJString(apiVersion))
  add(path_594693, "name", newJString(name))
  add(path_594693, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_594695 = MSDeploy
  result = call_594692.call(path_594693, query_594694, nil, nil, body_594695)

var webAppsCreateMSDeployOperation* = Call_WebAppsCreateMSDeployOperation_594683(
    name: "webAppsCreateMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperation_594684, base: "",
    url: url_WebAppsCreateMSDeployOperation_594685, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatus_594672 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployStatus_594674(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatus_594673(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594675 = path.getOrDefault("resourceGroupName")
  valid_594675 = validateParameter(valid_594675, JString, required = true,
                                 default = nil)
  if valid_594675 != nil:
    section.add "resourceGroupName", valid_594675
  var valid_594676 = path.getOrDefault("name")
  valid_594676 = validateParameter(valid_594676, JString, required = true,
                                 default = nil)
  if valid_594676 != nil:
    section.add "name", valid_594676
  var valid_594677 = path.getOrDefault("subscriptionId")
  valid_594677 = validateParameter(valid_594677, JString, required = true,
                                 default = nil)
  if valid_594677 != nil:
    section.add "subscriptionId", valid_594677
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594678 = query.getOrDefault("api-version")
  valid_594678 = validateParameter(valid_594678, JString, required = true,
                                 default = nil)
  if valid_594678 != nil:
    section.add "api-version", valid_594678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594679: Call_WebAppsGetMSDeployStatus_594672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_594679.validator(path, query, header, formData, body)
  let scheme = call_594679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594679.url(scheme.get, call_594679.host, call_594679.base,
                         call_594679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594679, url, valid)

proc call*(call_594680: Call_WebAppsGetMSDeployStatus_594672;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594681 = newJObject()
  var query_594682 = newJObject()
  add(path_594681, "resourceGroupName", newJString(resourceGroupName))
  add(query_594682, "api-version", newJString(apiVersion))
  add(path_594681, "name", newJString(name))
  add(path_594681, "subscriptionId", newJString(subscriptionId))
  result = call_594680.call(path_594681, query_594682, nil, nil, nil)

var webAppsGetMSDeployStatus* = Call_WebAppsGetMSDeployStatus_594672(
    name: "webAppsGetMSDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatus_594673, base: "",
    url: url_WebAppsGetMSDeployStatus_594674, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLog_594696 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployLog_594698(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLog_594697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594699 = path.getOrDefault("resourceGroupName")
  valid_594699 = validateParameter(valid_594699, JString, required = true,
                                 default = nil)
  if valid_594699 != nil:
    section.add "resourceGroupName", valid_594699
  var valid_594700 = path.getOrDefault("name")
  valid_594700 = validateParameter(valid_594700, JString, required = true,
                                 default = nil)
  if valid_594700 != nil:
    section.add "name", valid_594700
  var valid_594701 = path.getOrDefault("subscriptionId")
  valid_594701 = validateParameter(valid_594701, JString, required = true,
                                 default = nil)
  if valid_594701 != nil:
    section.add "subscriptionId", valid_594701
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594702 = query.getOrDefault("api-version")
  valid_594702 = validateParameter(valid_594702, JString, required = true,
                                 default = nil)
  if valid_594702 != nil:
    section.add "api-version", valid_594702
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594703: Call_WebAppsGetMSDeployLog_594696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_594703.validator(path, query, header, formData, body)
  let scheme = call_594703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594703.url(scheme.get, call_594703.host, call_594703.base,
                         call_594703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594703, url, valid)

proc call*(call_594704: Call_WebAppsGetMSDeployLog_594696;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594705 = newJObject()
  var query_594706 = newJObject()
  add(path_594705, "resourceGroupName", newJString(resourceGroupName))
  add(query_594706, "api-version", newJString(apiVersion))
  add(path_594705, "name", newJString(name))
  add(path_594705, "subscriptionId", newJString(subscriptionId))
  result = call_594704.call(path_594705, query_594706, nil, nil, nil)

var webAppsGetMSDeployLog* = Call_WebAppsGetMSDeployLog_594696(
    name: "webAppsGetMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLog_594697, base: "",
    url: url_WebAppsGetMSDeployLog_594698, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctions_594707 = ref object of OpenApiRestCall_593437
proc url_WebAppsListFunctions_594709(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctions_594708(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594710 = path.getOrDefault("resourceGroupName")
  valid_594710 = validateParameter(valid_594710, JString, required = true,
                                 default = nil)
  if valid_594710 != nil:
    section.add "resourceGroupName", valid_594710
  var valid_594711 = path.getOrDefault("name")
  valid_594711 = validateParameter(valid_594711, JString, required = true,
                                 default = nil)
  if valid_594711 != nil:
    section.add "name", valid_594711
  var valid_594712 = path.getOrDefault("subscriptionId")
  valid_594712 = validateParameter(valid_594712, JString, required = true,
                                 default = nil)
  if valid_594712 != nil:
    section.add "subscriptionId", valid_594712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594713 = query.getOrDefault("api-version")
  valid_594713 = validateParameter(valid_594713, JString, required = true,
                                 default = nil)
  if valid_594713 != nil:
    section.add "api-version", valid_594713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594714: Call_WebAppsListFunctions_594707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_594714.validator(path, query, header, formData, body)
  let scheme = call_594714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594714.url(scheme.get, call_594714.host, call_594714.base,
                         call_594714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594714, url, valid)

proc call*(call_594715: Call_WebAppsListFunctions_594707;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListFunctions
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594716 = newJObject()
  var query_594717 = newJObject()
  add(path_594716, "resourceGroupName", newJString(resourceGroupName))
  add(query_594717, "api-version", newJString(apiVersion))
  add(path_594716, "name", newJString(name))
  add(path_594716, "subscriptionId", newJString(subscriptionId))
  result = call_594715.call(path_594716, query_594717, nil, nil, nil)

var webAppsListFunctions* = Call_WebAppsListFunctions_594707(
    name: "webAppsListFunctions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    validator: validate_WebAppsListFunctions_594708, base: "",
    url: url_WebAppsListFunctions_594709, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminToken_594718 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetFunctionsAdminToken_594720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminToken_594719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594721 = path.getOrDefault("resourceGroupName")
  valid_594721 = validateParameter(valid_594721, JString, required = true,
                                 default = nil)
  if valid_594721 != nil:
    section.add "resourceGroupName", valid_594721
  var valid_594722 = path.getOrDefault("name")
  valid_594722 = validateParameter(valid_594722, JString, required = true,
                                 default = nil)
  if valid_594722 != nil:
    section.add "name", valid_594722
  var valid_594723 = path.getOrDefault("subscriptionId")
  valid_594723 = validateParameter(valid_594723, JString, required = true,
                                 default = nil)
  if valid_594723 != nil:
    section.add "subscriptionId", valid_594723
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594724 = query.getOrDefault("api-version")
  valid_594724 = validateParameter(valid_594724, JString, required = true,
                                 default = nil)
  if valid_594724 != nil:
    section.add "api-version", valid_594724
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594725: Call_WebAppsGetFunctionsAdminToken_594718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_594725.validator(path, query, header, formData, body)
  let scheme = call_594725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594725.url(scheme.get, call_594725.host, call_594725.base,
                         call_594725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594725, url, valid)

proc call*(call_594726: Call_WebAppsGetFunctionsAdminToken_594718;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminToken
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594727 = newJObject()
  var query_594728 = newJObject()
  add(path_594727, "resourceGroupName", newJString(resourceGroupName))
  add(query_594728, "api-version", newJString(apiVersion))
  add(path_594727, "name", newJString(name))
  add(path_594727, "subscriptionId", newJString(subscriptionId))
  result = call_594726.call(path_594727, query_594728, nil, nil, nil)

var webAppsGetFunctionsAdminToken* = Call_WebAppsGetFunctionsAdminToken_594718(
    name: "webAppsGetFunctionsAdminToken", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminToken_594719, base: "",
    url: url_WebAppsGetFunctionsAdminToken_594720, schemes: {Scheme.Https})
type
  Call_WebAppsCreateFunction_594741 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateFunction_594743(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateFunction_594742(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594744 = path.getOrDefault("resourceGroupName")
  valid_594744 = validateParameter(valid_594744, JString, required = true,
                                 default = nil)
  if valid_594744 != nil:
    section.add "resourceGroupName", valid_594744
  var valid_594745 = path.getOrDefault("name")
  valid_594745 = validateParameter(valid_594745, JString, required = true,
                                 default = nil)
  if valid_594745 != nil:
    section.add "name", valid_594745
  var valid_594746 = path.getOrDefault("subscriptionId")
  valid_594746 = validateParameter(valid_594746, JString, required = true,
                                 default = nil)
  if valid_594746 != nil:
    section.add "subscriptionId", valid_594746
  var valid_594747 = path.getOrDefault("functionName")
  valid_594747 = validateParameter(valid_594747, JString, required = true,
                                 default = nil)
  if valid_594747 != nil:
    section.add "functionName", valid_594747
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594748 = query.getOrDefault("api-version")
  valid_594748 = validateParameter(valid_594748, JString, required = true,
                                 default = nil)
  if valid_594748 != nil:
    section.add "api-version", valid_594748
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594750: Call_WebAppsCreateFunction_594741; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_594750.validator(path, query, header, formData, body)
  let scheme = call_594750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594750.url(scheme.get, call_594750.host, call_594750.base,
                         call_594750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594750, url, valid)

proc call*(call_594751: Call_WebAppsCreateFunction_594741;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateFunction
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_594752 = newJObject()
  var query_594753 = newJObject()
  var body_594754 = newJObject()
  add(path_594752, "resourceGroupName", newJString(resourceGroupName))
  add(query_594753, "api-version", newJString(apiVersion))
  add(path_594752, "name", newJString(name))
  add(path_594752, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_594754 = functionEnvelope
  add(path_594752, "functionName", newJString(functionName))
  result = call_594751.call(path_594752, query_594753, nil, nil, body_594754)

var webAppsCreateFunction* = Call_WebAppsCreateFunction_594741(
    name: "webAppsCreateFunction", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsCreateFunction_594742, base: "",
    url: url_WebAppsCreateFunction_594743, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunction_594729 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetFunction_594731(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunction_594730(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594732 = path.getOrDefault("resourceGroupName")
  valid_594732 = validateParameter(valid_594732, JString, required = true,
                                 default = nil)
  if valid_594732 != nil:
    section.add "resourceGroupName", valid_594732
  var valid_594733 = path.getOrDefault("name")
  valid_594733 = validateParameter(valid_594733, JString, required = true,
                                 default = nil)
  if valid_594733 != nil:
    section.add "name", valid_594733
  var valid_594734 = path.getOrDefault("subscriptionId")
  valid_594734 = validateParameter(valid_594734, JString, required = true,
                                 default = nil)
  if valid_594734 != nil:
    section.add "subscriptionId", valid_594734
  var valid_594735 = path.getOrDefault("functionName")
  valid_594735 = validateParameter(valid_594735, JString, required = true,
                                 default = nil)
  if valid_594735 != nil:
    section.add "functionName", valid_594735
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594736 = query.getOrDefault("api-version")
  valid_594736 = validateParameter(valid_594736, JString, required = true,
                                 default = nil)
  if valid_594736 != nil:
    section.add "api-version", valid_594736
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594737: Call_WebAppsGetFunction_594729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_594737.validator(path, query, header, formData, body)
  let scheme = call_594737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594737.url(scheme.get, call_594737.host, call_594737.base,
                         call_594737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594737, url, valid)

proc call*(call_594738: Call_WebAppsGetFunction_594729; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          functionName: string): Recallable =
  ## webAppsGetFunction
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_594739 = newJObject()
  var query_594740 = newJObject()
  add(path_594739, "resourceGroupName", newJString(resourceGroupName))
  add(query_594740, "api-version", newJString(apiVersion))
  add(path_594739, "name", newJString(name))
  add(path_594739, "subscriptionId", newJString(subscriptionId))
  add(path_594739, "functionName", newJString(functionName))
  result = call_594738.call(path_594739, query_594740, nil, nil, nil)

var webAppsGetFunction* = Call_WebAppsGetFunction_594729(
    name: "webAppsGetFunction", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsGetFunction_594730, base: "",
    url: url_WebAppsGetFunction_594731, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteFunction_594755 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteFunction_594757(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteFunction_594756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594758 = path.getOrDefault("resourceGroupName")
  valid_594758 = validateParameter(valid_594758, JString, required = true,
                                 default = nil)
  if valid_594758 != nil:
    section.add "resourceGroupName", valid_594758
  var valid_594759 = path.getOrDefault("name")
  valid_594759 = validateParameter(valid_594759, JString, required = true,
                                 default = nil)
  if valid_594759 != nil:
    section.add "name", valid_594759
  var valid_594760 = path.getOrDefault("subscriptionId")
  valid_594760 = validateParameter(valid_594760, JString, required = true,
                                 default = nil)
  if valid_594760 != nil:
    section.add "subscriptionId", valid_594760
  var valid_594761 = path.getOrDefault("functionName")
  valid_594761 = validateParameter(valid_594761, JString, required = true,
                                 default = nil)
  if valid_594761 != nil:
    section.add "functionName", valid_594761
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594762 = query.getOrDefault("api-version")
  valid_594762 = validateParameter(valid_594762, JString, required = true,
                                 default = nil)
  if valid_594762 != nil:
    section.add "api-version", valid_594762
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594763: Call_WebAppsDeleteFunction_594755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_594763.validator(path, query, header, formData, body)
  let scheme = call_594763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594763.url(scheme.get, call_594763.host, call_594763.base,
                         call_594763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594763, url, valid)

proc call*(call_594764: Call_WebAppsDeleteFunction_594755;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteFunction
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_594765 = newJObject()
  var query_594766 = newJObject()
  add(path_594765, "resourceGroupName", newJString(resourceGroupName))
  add(query_594766, "api-version", newJString(apiVersion))
  add(path_594765, "name", newJString(name))
  add(path_594765, "subscriptionId", newJString(subscriptionId))
  add(path_594765, "functionName", newJString(functionName))
  result = call_594764.call(path_594765, query_594766, nil, nil, nil)

var webAppsDeleteFunction* = Call_WebAppsDeleteFunction_594755(
    name: "webAppsDeleteFunction", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsDeleteFunction_594756, base: "",
    url: url_WebAppsDeleteFunction_594757, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecrets_594767 = ref object of OpenApiRestCall_593437
proc url_WebAppsListFunctionSecrets_594769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecrets_594768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594770 = path.getOrDefault("resourceGroupName")
  valid_594770 = validateParameter(valid_594770, JString, required = true,
                                 default = nil)
  if valid_594770 != nil:
    section.add "resourceGroupName", valid_594770
  var valid_594771 = path.getOrDefault("name")
  valid_594771 = validateParameter(valid_594771, JString, required = true,
                                 default = nil)
  if valid_594771 != nil:
    section.add "name", valid_594771
  var valid_594772 = path.getOrDefault("subscriptionId")
  valid_594772 = validateParameter(valid_594772, JString, required = true,
                                 default = nil)
  if valid_594772 != nil:
    section.add "subscriptionId", valid_594772
  var valid_594773 = path.getOrDefault("functionName")
  valid_594773 = validateParameter(valid_594773, JString, required = true,
                                 default = nil)
  if valid_594773 != nil:
    section.add "functionName", valid_594773
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594774 = query.getOrDefault("api-version")
  valid_594774 = validateParameter(valid_594774, JString, required = true,
                                 default = nil)
  if valid_594774 != nil:
    section.add "api-version", valid_594774
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594775: Call_WebAppsListFunctionSecrets_594767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_594775.validator(path, query, header, formData, body)
  let scheme = call_594775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594775.url(scheme.get, call_594775.host, call_594775.base,
                         call_594775.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594775, url, valid)

proc call*(call_594776: Call_WebAppsListFunctionSecrets_594767;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecrets
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_594777 = newJObject()
  var query_594778 = newJObject()
  add(path_594777, "resourceGroupName", newJString(resourceGroupName))
  add(query_594778, "api-version", newJString(apiVersion))
  add(path_594777, "name", newJString(name))
  add(path_594777, "subscriptionId", newJString(subscriptionId))
  add(path_594777, "functionName", newJString(functionName))
  result = call_594776.call(path_594777, query_594778, nil, nil, nil)

var webAppsListFunctionSecrets* = Call_WebAppsListFunctionSecrets_594767(
    name: "webAppsListFunctionSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecrets_594768, base: "",
    url: url_WebAppsListFunctionSecrets_594769, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindings_594779 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHostNameBindings_594781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindings_594780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594782 = path.getOrDefault("resourceGroupName")
  valid_594782 = validateParameter(valid_594782, JString, required = true,
                                 default = nil)
  if valid_594782 != nil:
    section.add "resourceGroupName", valid_594782
  var valid_594783 = path.getOrDefault("name")
  valid_594783 = validateParameter(valid_594783, JString, required = true,
                                 default = nil)
  if valid_594783 != nil:
    section.add "name", valid_594783
  var valid_594784 = path.getOrDefault("subscriptionId")
  valid_594784 = validateParameter(valid_594784, JString, required = true,
                                 default = nil)
  if valid_594784 != nil:
    section.add "subscriptionId", valid_594784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594785 = query.getOrDefault("api-version")
  valid_594785 = validateParameter(valid_594785, JString, required = true,
                                 default = nil)
  if valid_594785 != nil:
    section.add "api-version", valid_594785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594786: Call_WebAppsListHostNameBindings_594779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_594786.validator(path, query, header, formData, body)
  let scheme = call_594786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594786.url(scheme.get, call_594786.host, call_594786.base,
                         call_594786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594786, url, valid)

proc call*(call_594787: Call_WebAppsListHostNameBindings_594779;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindings
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594788 = newJObject()
  var query_594789 = newJObject()
  add(path_594788, "resourceGroupName", newJString(resourceGroupName))
  add(query_594789, "api-version", newJString(apiVersion))
  add(path_594788, "name", newJString(name))
  add(path_594788, "subscriptionId", newJString(subscriptionId))
  result = call_594787.call(path_594788, query_594789, nil, nil, nil)

var webAppsListHostNameBindings* = Call_WebAppsListHostNameBindings_594779(
    name: "webAppsListHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindings_594780, base: "",
    url: url_WebAppsListHostNameBindings_594781, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBinding_594802 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHostNameBinding_594804(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBinding_594803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594805 = path.getOrDefault("resourceGroupName")
  valid_594805 = validateParameter(valid_594805, JString, required = true,
                                 default = nil)
  if valid_594805 != nil:
    section.add "resourceGroupName", valid_594805
  var valid_594806 = path.getOrDefault("name")
  valid_594806 = validateParameter(valid_594806, JString, required = true,
                                 default = nil)
  if valid_594806 != nil:
    section.add "name", valid_594806
  var valid_594807 = path.getOrDefault("subscriptionId")
  valid_594807 = validateParameter(valid_594807, JString, required = true,
                                 default = nil)
  if valid_594807 != nil:
    section.add "subscriptionId", valid_594807
  var valid_594808 = path.getOrDefault("hostName")
  valid_594808 = validateParameter(valid_594808, JString, required = true,
                                 default = nil)
  if valid_594808 != nil:
    section.add "hostName", valid_594808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594809 = query.getOrDefault("api-version")
  valid_594809 = validateParameter(valid_594809, JString, required = true,
                                 default = nil)
  if valid_594809 != nil:
    section.add "api-version", valid_594809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594811: Call_WebAppsCreateOrUpdateHostNameBinding_594802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_594811.validator(path, query, header, formData, body)
  let scheme = call_594811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594811.url(scheme.get, call_594811.host, call_594811.base,
                         call_594811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594811, url, valid)

proc call*(call_594812: Call_WebAppsCreateOrUpdateHostNameBinding_594802;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBinding
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_594813 = newJObject()
  var query_594814 = newJObject()
  var body_594815 = newJObject()
  add(path_594813, "resourceGroupName", newJString(resourceGroupName))
  add(query_594814, "api-version", newJString(apiVersion))
  add(path_594813, "name", newJString(name))
  add(path_594813, "subscriptionId", newJString(subscriptionId))
  add(path_594813, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_594815 = hostNameBinding
  result = call_594812.call(path_594813, query_594814, nil, nil, body_594815)

var webAppsCreateOrUpdateHostNameBinding* = Call_WebAppsCreateOrUpdateHostNameBinding_594802(
    name: "webAppsCreateOrUpdateHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBinding_594803, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBinding_594804, schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBinding_594790 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHostNameBinding_594792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBinding_594791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594793 = path.getOrDefault("resourceGroupName")
  valid_594793 = validateParameter(valid_594793, JString, required = true,
                                 default = nil)
  if valid_594793 != nil:
    section.add "resourceGroupName", valid_594793
  var valid_594794 = path.getOrDefault("name")
  valid_594794 = validateParameter(valid_594794, JString, required = true,
                                 default = nil)
  if valid_594794 != nil:
    section.add "name", valid_594794
  var valid_594795 = path.getOrDefault("subscriptionId")
  valid_594795 = validateParameter(valid_594795, JString, required = true,
                                 default = nil)
  if valid_594795 != nil:
    section.add "subscriptionId", valid_594795
  var valid_594796 = path.getOrDefault("hostName")
  valid_594796 = validateParameter(valid_594796, JString, required = true,
                                 default = nil)
  if valid_594796 != nil:
    section.add "hostName", valid_594796
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594797 = query.getOrDefault("api-version")
  valid_594797 = validateParameter(valid_594797, JString, required = true,
                                 default = nil)
  if valid_594797 != nil:
    section.add "api-version", valid_594797
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594798: Call_WebAppsGetHostNameBinding_594790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_594798.validator(path, query, header, formData, body)
  let scheme = call_594798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594798.url(scheme.get, call_594798.host, call_594798.base,
                         call_594798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594798, url, valid)

proc call*(call_594799: Call_WebAppsGetHostNameBinding_594790;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBinding
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_594800 = newJObject()
  var query_594801 = newJObject()
  add(path_594800, "resourceGroupName", newJString(resourceGroupName))
  add(query_594801, "api-version", newJString(apiVersion))
  add(path_594800, "name", newJString(name))
  add(path_594800, "subscriptionId", newJString(subscriptionId))
  add(path_594800, "hostName", newJString(hostName))
  result = call_594799.call(path_594800, query_594801, nil, nil, nil)

var webAppsGetHostNameBinding* = Call_WebAppsGetHostNameBinding_594790(
    name: "webAppsGetHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBinding_594791, base: "",
    url: url_WebAppsGetHostNameBinding_594792, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBinding_594816 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHostNameBinding_594818(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBinding_594817(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594819 = path.getOrDefault("resourceGroupName")
  valid_594819 = validateParameter(valid_594819, JString, required = true,
                                 default = nil)
  if valid_594819 != nil:
    section.add "resourceGroupName", valid_594819
  var valid_594820 = path.getOrDefault("name")
  valid_594820 = validateParameter(valid_594820, JString, required = true,
                                 default = nil)
  if valid_594820 != nil:
    section.add "name", valid_594820
  var valid_594821 = path.getOrDefault("subscriptionId")
  valid_594821 = validateParameter(valid_594821, JString, required = true,
                                 default = nil)
  if valid_594821 != nil:
    section.add "subscriptionId", valid_594821
  var valid_594822 = path.getOrDefault("hostName")
  valid_594822 = validateParameter(valid_594822, JString, required = true,
                                 default = nil)
  if valid_594822 != nil:
    section.add "hostName", valid_594822
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594823 = query.getOrDefault("api-version")
  valid_594823 = validateParameter(valid_594823, JString, required = true,
                                 default = nil)
  if valid_594823 != nil:
    section.add "api-version", valid_594823
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594824: Call_WebAppsDeleteHostNameBinding_594816; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_594824.validator(path, query, header, formData, body)
  let scheme = call_594824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594824.url(scheme.get, call_594824.host, call_594824.base,
                         call_594824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594824, url, valid)

proc call*(call_594825: Call_WebAppsDeleteHostNameBinding_594816;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBinding
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_594826 = newJObject()
  var query_594827 = newJObject()
  add(path_594826, "resourceGroupName", newJString(resourceGroupName))
  add(query_594827, "api-version", newJString(apiVersion))
  add(path_594826, "name", newJString(name))
  add(path_594826, "subscriptionId", newJString(subscriptionId))
  add(path_594826, "hostName", newJString(hostName))
  result = call_594825.call(path_594826, query_594827, nil, nil, nil)

var webAppsDeleteHostNameBinding* = Call_WebAppsDeleteHostNameBinding_594816(
    name: "webAppsDeleteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBinding_594817, base: "",
    url: url_WebAppsDeleteHostNameBinding_594818, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnection_594841 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHybridConnection_594843(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnection_594842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594844 = path.getOrDefault("namespaceName")
  valid_594844 = validateParameter(valid_594844, JString, required = true,
                                 default = nil)
  if valid_594844 != nil:
    section.add "namespaceName", valid_594844
  var valid_594845 = path.getOrDefault("resourceGroupName")
  valid_594845 = validateParameter(valid_594845, JString, required = true,
                                 default = nil)
  if valid_594845 != nil:
    section.add "resourceGroupName", valid_594845
  var valid_594846 = path.getOrDefault("name")
  valid_594846 = validateParameter(valid_594846, JString, required = true,
                                 default = nil)
  if valid_594846 != nil:
    section.add "name", valid_594846
  var valid_594847 = path.getOrDefault("subscriptionId")
  valid_594847 = validateParameter(valid_594847, JString, required = true,
                                 default = nil)
  if valid_594847 != nil:
    section.add "subscriptionId", valid_594847
  var valid_594848 = path.getOrDefault("relayName")
  valid_594848 = validateParameter(valid_594848, JString, required = true,
                                 default = nil)
  if valid_594848 != nil:
    section.add "relayName", valid_594848
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594849 = query.getOrDefault("api-version")
  valid_594849 = validateParameter(valid_594849, JString, required = true,
                                 default = nil)
  if valid_594849 != nil:
    section.add "api-version", valid_594849
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594851: Call_WebAppsCreateOrUpdateHybridConnection_594841;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_594851.validator(path, query, header, formData, body)
  let scheme = call_594851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594851.url(scheme.get, call_594851.host, call_594851.base,
                         call_594851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594851, url, valid)

proc call*(call_594852: Call_WebAppsCreateOrUpdateHybridConnection_594841;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594853 = newJObject()
  var query_594854 = newJObject()
  var body_594855 = newJObject()
  add(path_594853, "namespaceName", newJString(namespaceName))
  add(path_594853, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594855 = connectionEnvelope
  add(path_594853, "name", newJString(name))
  add(query_594854, "api-version", newJString(apiVersion))
  add(path_594853, "subscriptionId", newJString(subscriptionId))
  add(path_594853, "relayName", newJString(relayName))
  result = call_594852.call(path_594853, query_594854, nil, nil, body_594855)

var webAppsCreateOrUpdateHybridConnection* = Call_WebAppsCreateOrUpdateHybridConnection_594841(
    name: "webAppsCreateOrUpdateHybridConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnection_594842, base: "",
    url: url_WebAppsCreateOrUpdateHybridConnection_594843, schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnection_594828 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHybridConnection_594830(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnection_594829(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594831 = path.getOrDefault("namespaceName")
  valid_594831 = validateParameter(valid_594831, JString, required = true,
                                 default = nil)
  if valid_594831 != nil:
    section.add "namespaceName", valid_594831
  var valid_594832 = path.getOrDefault("resourceGroupName")
  valid_594832 = validateParameter(valid_594832, JString, required = true,
                                 default = nil)
  if valid_594832 != nil:
    section.add "resourceGroupName", valid_594832
  var valid_594833 = path.getOrDefault("name")
  valid_594833 = validateParameter(valid_594833, JString, required = true,
                                 default = nil)
  if valid_594833 != nil:
    section.add "name", valid_594833
  var valid_594834 = path.getOrDefault("subscriptionId")
  valid_594834 = validateParameter(valid_594834, JString, required = true,
                                 default = nil)
  if valid_594834 != nil:
    section.add "subscriptionId", valid_594834
  var valid_594835 = path.getOrDefault("relayName")
  valid_594835 = validateParameter(valid_594835, JString, required = true,
                                 default = nil)
  if valid_594835 != nil:
    section.add "relayName", valid_594835
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594836 = query.getOrDefault("api-version")
  valid_594836 = validateParameter(valid_594836, JString, required = true,
                                 default = nil)
  if valid_594836 != nil:
    section.add "api-version", valid_594836
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594837: Call_WebAppsGetHybridConnection_594828; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_594837.validator(path, query, header, formData, body)
  let scheme = call_594837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594837.url(scheme.get, call_594837.host, call_594837.base,
                         call_594837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594837, url, valid)

proc call*(call_594838: Call_WebAppsGetHybridConnection_594828;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnection
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594839 = newJObject()
  var query_594840 = newJObject()
  add(path_594839, "namespaceName", newJString(namespaceName))
  add(path_594839, "resourceGroupName", newJString(resourceGroupName))
  add(query_594840, "api-version", newJString(apiVersion))
  add(path_594839, "name", newJString(name))
  add(path_594839, "subscriptionId", newJString(subscriptionId))
  add(path_594839, "relayName", newJString(relayName))
  result = call_594838.call(path_594839, query_594840, nil, nil, nil)

var webAppsGetHybridConnection* = Call_WebAppsGetHybridConnection_594828(
    name: "webAppsGetHybridConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnection_594829, base: "",
    url: url_WebAppsGetHybridConnection_594830, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnection_594869 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateHybridConnection_594871(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnection_594870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594872 = path.getOrDefault("namespaceName")
  valid_594872 = validateParameter(valid_594872, JString, required = true,
                                 default = nil)
  if valid_594872 != nil:
    section.add "namespaceName", valid_594872
  var valid_594873 = path.getOrDefault("resourceGroupName")
  valid_594873 = validateParameter(valid_594873, JString, required = true,
                                 default = nil)
  if valid_594873 != nil:
    section.add "resourceGroupName", valid_594873
  var valid_594874 = path.getOrDefault("name")
  valid_594874 = validateParameter(valid_594874, JString, required = true,
                                 default = nil)
  if valid_594874 != nil:
    section.add "name", valid_594874
  var valid_594875 = path.getOrDefault("subscriptionId")
  valid_594875 = validateParameter(valid_594875, JString, required = true,
                                 default = nil)
  if valid_594875 != nil:
    section.add "subscriptionId", valid_594875
  var valid_594876 = path.getOrDefault("relayName")
  valid_594876 = validateParameter(valid_594876, JString, required = true,
                                 default = nil)
  if valid_594876 != nil:
    section.add "relayName", valid_594876
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594877 = query.getOrDefault("api-version")
  valid_594877 = validateParameter(valid_594877, JString, required = true,
                                 default = nil)
  if valid_594877 != nil:
    section.add "api-version", valid_594877
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594879: Call_WebAppsUpdateHybridConnection_594869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_594879.validator(path, query, header, formData, body)
  let scheme = call_594879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594879.url(scheme.get, call_594879.host, call_594879.base,
                         call_594879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594879, url, valid)

proc call*(call_594880: Call_WebAppsUpdateHybridConnection_594869;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594881 = newJObject()
  var query_594882 = newJObject()
  var body_594883 = newJObject()
  add(path_594881, "namespaceName", newJString(namespaceName))
  add(path_594881, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594883 = connectionEnvelope
  add(path_594881, "name", newJString(name))
  add(query_594882, "api-version", newJString(apiVersion))
  add(path_594881, "subscriptionId", newJString(subscriptionId))
  add(path_594881, "relayName", newJString(relayName))
  result = call_594880.call(path_594881, query_594882, nil, nil, body_594883)

var webAppsUpdateHybridConnection* = Call_WebAppsUpdateHybridConnection_594869(
    name: "webAppsUpdateHybridConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnection_594870, base: "",
    url: url_WebAppsUpdateHybridConnection_594871, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnection_594856 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHybridConnection_594858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnection_594857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594859 = path.getOrDefault("namespaceName")
  valid_594859 = validateParameter(valid_594859, JString, required = true,
                                 default = nil)
  if valid_594859 != nil:
    section.add "namespaceName", valid_594859
  var valid_594860 = path.getOrDefault("resourceGroupName")
  valid_594860 = validateParameter(valid_594860, JString, required = true,
                                 default = nil)
  if valid_594860 != nil:
    section.add "resourceGroupName", valid_594860
  var valid_594861 = path.getOrDefault("name")
  valid_594861 = validateParameter(valid_594861, JString, required = true,
                                 default = nil)
  if valid_594861 != nil:
    section.add "name", valid_594861
  var valid_594862 = path.getOrDefault("subscriptionId")
  valid_594862 = validateParameter(valid_594862, JString, required = true,
                                 default = nil)
  if valid_594862 != nil:
    section.add "subscriptionId", valid_594862
  var valid_594863 = path.getOrDefault("relayName")
  valid_594863 = validateParameter(valid_594863, JString, required = true,
                                 default = nil)
  if valid_594863 != nil:
    section.add "relayName", valid_594863
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594864 = query.getOrDefault("api-version")
  valid_594864 = validateParameter(valid_594864, JString, required = true,
                                 default = nil)
  if valid_594864 != nil:
    section.add "api-version", valid_594864
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594865: Call_WebAppsDeleteHybridConnection_594856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_594865.validator(path, query, header, formData, body)
  let scheme = call_594865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594865.url(scheme.get, call_594865.host, call_594865.base,
                         call_594865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594865, url, valid)

proc call*(call_594866: Call_WebAppsDeleteHybridConnection_594856;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnection
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594867 = newJObject()
  var query_594868 = newJObject()
  add(path_594867, "namespaceName", newJString(namespaceName))
  add(path_594867, "resourceGroupName", newJString(resourceGroupName))
  add(query_594868, "api-version", newJString(apiVersion))
  add(path_594867, "name", newJString(name))
  add(path_594867, "subscriptionId", newJString(subscriptionId))
  add(path_594867, "relayName", newJString(relayName))
  result = call_594866.call(path_594867, query_594868, nil, nil, nil)

var webAppsDeleteHybridConnection* = Call_WebAppsDeleteHybridConnection_594856(
    name: "webAppsDeleteHybridConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnection_594857, base: "",
    url: url_WebAppsDeleteHybridConnection_594858, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeys_594884 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnectionKeys_594886(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeys_594885(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594887 = path.getOrDefault("namespaceName")
  valid_594887 = validateParameter(valid_594887, JString, required = true,
                                 default = nil)
  if valid_594887 != nil:
    section.add "namespaceName", valid_594887
  var valid_594888 = path.getOrDefault("resourceGroupName")
  valid_594888 = validateParameter(valid_594888, JString, required = true,
                                 default = nil)
  if valid_594888 != nil:
    section.add "resourceGroupName", valid_594888
  var valid_594889 = path.getOrDefault("name")
  valid_594889 = validateParameter(valid_594889, JString, required = true,
                                 default = nil)
  if valid_594889 != nil:
    section.add "name", valid_594889
  var valid_594890 = path.getOrDefault("subscriptionId")
  valid_594890 = validateParameter(valid_594890, JString, required = true,
                                 default = nil)
  if valid_594890 != nil:
    section.add "subscriptionId", valid_594890
  var valid_594891 = path.getOrDefault("relayName")
  valid_594891 = validateParameter(valid_594891, JString, required = true,
                                 default = nil)
  if valid_594891 != nil:
    section.add "relayName", valid_594891
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594892 = query.getOrDefault("api-version")
  valid_594892 = validateParameter(valid_594892, JString, required = true,
                                 default = nil)
  if valid_594892 != nil:
    section.add "api-version", valid_594892
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594893: Call_WebAppsListHybridConnectionKeys_594884;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_594893.validator(path, query, header, formData, body)
  let scheme = call_594893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594893.url(scheme.get, call_594893.host, call_594893.base,
                         call_594893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594893, url, valid)

proc call*(call_594894: Call_WebAppsListHybridConnectionKeys_594884;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeys
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594895 = newJObject()
  var query_594896 = newJObject()
  add(path_594895, "namespaceName", newJString(namespaceName))
  add(path_594895, "resourceGroupName", newJString(resourceGroupName))
  add(query_594896, "api-version", newJString(apiVersion))
  add(path_594895, "name", newJString(name))
  add(path_594895, "subscriptionId", newJString(subscriptionId))
  add(path_594895, "relayName", newJString(relayName))
  result = call_594894.call(path_594895, query_594896, nil, nil, nil)

var webAppsListHybridConnectionKeys* = Call_WebAppsListHybridConnectionKeys_594884(
    name: "webAppsListHybridConnectionKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeys_594885, base: "",
    url: url_WebAppsListHybridConnectionKeys_594886, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnections_594897 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnections_594899(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnections_594898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594900 = path.getOrDefault("resourceGroupName")
  valid_594900 = validateParameter(valid_594900, JString, required = true,
                                 default = nil)
  if valid_594900 != nil:
    section.add "resourceGroupName", valid_594900
  var valid_594901 = path.getOrDefault("name")
  valid_594901 = validateParameter(valid_594901, JString, required = true,
                                 default = nil)
  if valid_594901 != nil:
    section.add "name", valid_594901
  var valid_594902 = path.getOrDefault("subscriptionId")
  valid_594902 = validateParameter(valid_594902, JString, required = true,
                                 default = nil)
  if valid_594902 != nil:
    section.add "subscriptionId", valid_594902
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594903 = query.getOrDefault("api-version")
  valid_594903 = validateParameter(valid_594903, JString, required = true,
                                 default = nil)
  if valid_594903 != nil:
    section.add "api-version", valid_594903
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594904: Call_WebAppsListHybridConnections_594897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_594904.validator(path, query, header, formData, body)
  let scheme = call_594904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594904.url(scheme.get, call_594904.host, call_594904.base,
                         call_594904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594904, url, valid)

proc call*(call_594905: Call_WebAppsListHybridConnections_594897;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnections
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594906 = newJObject()
  var query_594907 = newJObject()
  add(path_594906, "resourceGroupName", newJString(resourceGroupName))
  add(query_594907, "api-version", newJString(apiVersion))
  add(path_594906, "name", newJString(name))
  add(path_594906, "subscriptionId", newJString(subscriptionId))
  result = call_594905.call(path_594906, query_594907, nil, nil, nil)

var webAppsListHybridConnections* = Call_WebAppsListHybridConnections_594897(
    name: "webAppsListHybridConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnections_594898, base: "",
    url: url_WebAppsListHybridConnections_594899, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnections_594908 = ref object of OpenApiRestCall_593437
proc url_WebAppsListRelayServiceConnections_594910(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnections_594909(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594911 = path.getOrDefault("resourceGroupName")
  valid_594911 = validateParameter(valid_594911, JString, required = true,
                                 default = nil)
  if valid_594911 != nil:
    section.add "resourceGroupName", valid_594911
  var valid_594912 = path.getOrDefault("name")
  valid_594912 = validateParameter(valid_594912, JString, required = true,
                                 default = nil)
  if valid_594912 != nil:
    section.add "name", valid_594912
  var valid_594913 = path.getOrDefault("subscriptionId")
  valid_594913 = validateParameter(valid_594913, JString, required = true,
                                 default = nil)
  if valid_594913 != nil:
    section.add "subscriptionId", valid_594913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594914 = query.getOrDefault("api-version")
  valid_594914 = validateParameter(valid_594914, JString, required = true,
                                 default = nil)
  if valid_594914 != nil:
    section.add "api-version", valid_594914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594915: Call_WebAppsListRelayServiceConnections_594908;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_594915.validator(path, query, header, formData, body)
  let scheme = call_594915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594915.url(scheme.get, call_594915.host, call_594915.base,
                         call_594915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594915, url, valid)

proc call*(call_594916: Call_WebAppsListRelayServiceConnections_594908;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnections
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594917 = newJObject()
  var query_594918 = newJObject()
  add(path_594917, "resourceGroupName", newJString(resourceGroupName))
  add(query_594918, "api-version", newJString(apiVersion))
  add(path_594917, "name", newJString(name))
  add(path_594917, "subscriptionId", newJString(subscriptionId))
  result = call_594916.call(path_594917, query_594918, nil, nil, nil)

var webAppsListRelayServiceConnections* = Call_WebAppsListRelayServiceConnections_594908(
    name: "webAppsListRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnections_594909, base: "",
    url: url_WebAppsListRelayServiceConnections_594910, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnection_594931 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateRelayServiceConnection_594933(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnection_594932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594934 = path.getOrDefault("resourceGroupName")
  valid_594934 = validateParameter(valid_594934, JString, required = true,
                                 default = nil)
  if valid_594934 != nil:
    section.add "resourceGroupName", valid_594934
  var valid_594935 = path.getOrDefault("name")
  valid_594935 = validateParameter(valid_594935, JString, required = true,
                                 default = nil)
  if valid_594935 != nil:
    section.add "name", valid_594935
  var valid_594936 = path.getOrDefault("subscriptionId")
  valid_594936 = validateParameter(valid_594936, JString, required = true,
                                 default = nil)
  if valid_594936 != nil:
    section.add "subscriptionId", valid_594936
  var valid_594937 = path.getOrDefault("entityName")
  valid_594937 = validateParameter(valid_594937, JString, required = true,
                                 default = nil)
  if valid_594937 != nil:
    section.add "entityName", valid_594937
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594938 = query.getOrDefault("api-version")
  valid_594938 = validateParameter(valid_594938, JString, required = true,
                                 default = nil)
  if valid_594938 != nil:
    section.add "api-version", valid_594938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594940: Call_WebAppsCreateOrUpdateRelayServiceConnection_594931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_594940.validator(path, query, header, formData, body)
  let scheme = call_594940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594940.url(scheme.get, call_594940.host, call_594940.base,
                         call_594940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594940, url, valid)

proc call*(call_594941: Call_WebAppsCreateOrUpdateRelayServiceConnection_594931;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_594942 = newJObject()
  var query_594943 = newJObject()
  var body_594944 = newJObject()
  add(path_594942, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594944 = connectionEnvelope
  add(path_594942, "name", newJString(name))
  add(query_594943, "api-version", newJString(apiVersion))
  add(path_594942, "subscriptionId", newJString(subscriptionId))
  add(path_594942, "entityName", newJString(entityName))
  result = call_594941.call(path_594942, query_594943, nil, nil, body_594944)

var webAppsCreateOrUpdateRelayServiceConnection* = Call_WebAppsCreateOrUpdateRelayServiceConnection_594931(
    name: "webAppsCreateOrUpdateRelayServiceConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnection_594932,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnection_594933,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnection_594919 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetRelayServiceConnection_594921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnection_594920(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594922 = path.getOrDefault("resourceGroupName")
  valid_594922 = validateParameter(valid_594922, JString, required = true,
                                 default = nil)
  if valid_594922 != nil:
    section.add "resourceGroupName", valid_594922
  var valid_594923 = path.getOrDefault("name")
  valid_594923 = validateParameter(valid_594923, JString, required = true,
                                 default = nil)
  if valid_594923 != nil:
    section.add "name", valid_594923
  var valid_594924 = path.getOrDefault("subscriptionId")
  valid_594924 = validateParameter(valid_594924, JString, required = true,
                                 default = nil)
  if valid_594924 != nil:
    section.add "subscriptionId", valid_594924
  var valid_594925 = path.getOrDefault("entityName")
  valid_594925 = validateParameter(valid_594925, JString, required = true,
                                 default = nil)
  if valid_594925 != nil:
    section.add "entityName", valid_594925
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594926 = query.getOrDefault("api-version")
  valid_594926 = validateParameter(valid_594926, JString, required = true,
                                 default = nil)
  if valid_594926 != nil:
    section.add "api-version", valid_594926
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594927: Call_WebAppsGetRelayServiceConnection_594919;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_594927.validator(path, query, header, formData, body)
  let scheme = call_594927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594927.url(scheme.get, call_594927.host, call_594927.base,
                         call_594927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594927, url, valid)

proc call*(call_594928: Call_WebAppsGetRelayServiceConnection_594919;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnection
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_594929 = newJObject()
  var query_594930 = newJObject()
  add(path_594929, "resourceGroupName", newJString(resourceGroupName))
  add(query_594930, "api-version", newJString(apiVersion))
  add(path_594929, "name", newJString(name))
  add(path_594929, "subscriptionId", newJString(subscriptionId))
  add(path_594929, "entityName", newJString(entityName))
  result = call_594928.call(path_594929, query_594930, nil, nil, nil)

var webAppsGetRelayServiceConnection* = Call_WebAppsGetRelayServiceConnection_594919(
    name: "webAppsGetRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnection_594920, base: "",
    url: url_WebAppsGetRelayServiceConnection_594921, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnection_594957 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateRelayServiceConnection_594959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnection_594958(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594960 = path.getOrDefault("resourceGroupName")
  valid_594960 = validateParameter(valid_594960, JString, required = true,
                                 default = nil)
  if valid_594960 != nil:
    section.add "resourceGroupName", valid_594960
  var valid_594961 = path.getOrDefault("name")
  valid_594961 = validateParameter(valid_594961, JString, required = true,
                                 default = nil)
  if valid_594961 != nil:
    section.add "name", valid_594961
  var valid_594962 = path.getOrDefault("subscriptionId")
  valid_594962 = validateParameter(valid_594962, JString, required = true,
                                 default = nil)
  if valid_594962 != nil:
    section.add "subscriptionId", valid_594962
  var valid_594963 = path.getOrDefault("entityName")
  valid_594963 = validateParameter(valid_594963, JString, required = true,
                                 default = nil)
  if valid_594963 != nil:
    section.add "entityName", valid_594963
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594964 = query.getOrDefault("api-version")
  valid_594964 = validateParameter(valid_594964, JString, required = true,
                                 default = nil)
  if valid_594964 != nil:
    section.add "api-version", valid_594964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594966: Call_WebAppsUpdateRelayServiceConnection_594957;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_594966.validator(path, query, header, formData, body)
  let scheme = call_594966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594966.url(scheme.get, call_594966.host, call_594966.base,
                         call_594966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594966, url, valid)

proc call*(call_594967: Call_WebAppsUpdateRelayServiceConnection_594957;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_594968 = newJObject()
  var query_594969 = newJObject()
  var body_594970 = newJObject()
  add(path_594968, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594970 = connectionEnvelope
  add(path_594968, "name", newJString(name))
  add(query_594969, "api-version", newJString(apiVersion))
  add(path_594968, "subscriptionId", newJString(subscriptionId))
  add(path_594968, "entityName", newJString(entityName))
  result = call_594967.call(path_594968, query_594969, nil, nil, body_594970)

var webAppsUpdateRelayServiceConnection* = Call_WebAppsUpdateRelayServiceConnection_594957(
    name: "webAppsUpdateRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnection_594958, base: "",
    url: url_WebAppsUpdateRelayServiceConnection_594959, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnection_594945 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteRelayServiceConnection_594947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnection_594946(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594948 = path.getOrDefault("resourceGroupName")
  valid_594948 = validateParameter(valid_594948, JString, required = true,
                                 default = nil)
  if valid_594948 != nil:
    section.add "resourceGroupName", valid_594948
  var valid_594949 = path.getOrDefault("name")
  valid_594949 = validateParameter(valid_594949, JString, required = true,
                                 default = nil)
  if valid_594949 != nil:
    section.add "name", valid_594949
  var valid_594950 = path.getOrDefault("subscriptionId")
  valid_594950 = validateParameter(valid_594950, JString, required = true,
                                 default = nil)
  if valid_594950 != nil:
    section.add "subscriptionId", valid_594950
  var valid_594951 = path.getOrDefault("entityName")
  valid_594951 = validateParameter(valid_594951, JString, required = true,
                                 default = nil)
  if valid_594951 != nil:
    section.add "entityName", valid_594951
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594952 = query.getOrDefault("api-version")
  valid_594952 = validateParameter(valid_594952, JString, required = true,
                                 default = nil)
  if valid_594952 != nil:
    section.add "api-version", valid_594952
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594953: Call_WebAppsDeleteRelayServiceConnection_594945;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_594953.validator(path, query, header, formData, body)
  let scheme = call_594953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594953.url(scheme.get, call_594953.host, call_594953.base,
                         call_594953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594953, url, valid)

proc call*(call_594954: Call_WebAppsDeleteRelayServiceConnection_594945;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnection
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_594955 = newJObject()
  var query_594956 = newJObject()
  add(path_594955, "resourceGroupName", newJString(resourceGroupName))
  add(query_594956, "api-version", newJString(apiVersion))
  add(path_594955, "name", newJString(name))
  add(path_594955, "subscriptionId", newJString(subscriptionId))
  add(path_594955, "entityName", newJString(entityName))
  result = call_594954.call(path_594955, query_594956, nil, nil, nil)

var webAppsDeleteRelayServiceConnection* = Call_WebAppsDeleteRelayServiceConnection_594945(
    name: "webAppsDeleteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnection_594946, base: "",
    url: url_WebAppsDeleteRelayServiceConnection_594947, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiers_594971 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceIdentifiers_594973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiers_594972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594974 = path.getOrDefault("resourceGroupName")
  valid_594974 = validateParameter(valid_594974, JString, required = true,
                                 default = nil)
  if valid_594974 != nil:
    section.add "resourceGroupName", valid_594974
  var valid_594975 = path.getOrDefault("name")
  valid_594975 = validateParameter(valid_594975, JString, required = true,
                                 default = nil)
  if valid_594975 != nil:
    section.add "name", valid_594975
  var valid_594976 = path.getOrDefault("subscriptionId")
  valid_594976 = validateParameter(valid_594976, JString, required = true,
                                 default = nil)
  if valid_594976 != nil:
    section.add "subscriptionId", valid_594976
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594977 = query.getOrDefault("api-version")
  valid_594977 = validateParameter(valid_594977, JString, required = true,
                                 default = nil)
  if valid_594977 != nil:
    section.add "api-version", valid_594977
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594978: Call_WebAppsListInstanceIdentifiers_594971; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_594978.validator(path, query, header, formData, body)
  let scheme = call_594978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594978.url(scheme.get, call_594978.host, call_594978.base,
                         call_594978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594978, url, valid)

proc call*(call_594979: Call_WebAppsListInstanceIdentifiers_594971;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiers
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594980 = newJObject()
  var query_594981 = newJObject()
  add(path_594980, "resourceGroupName", newJString(resourceGroupName))
  add(query_594981, "api-version", newJString(apiVersion))
  add(path_594980, "name", newJString(name))
  add(path_594980, "subscriptionId", newJString(subscriptionId))
  result = call_594979.call(path_594980, query_594981, nil, nil, nil)

var webAppsListInstanceIdentifiers* = Call_WebAppsListInstanceIdentifiers_594971(
    name: "webAppsListInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_WebAppsListInstanceIdentifiers_594972, base: "",
    url: url_WebAppsListInstanceIdentifiers_594973, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperation_594994 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateInstanceMSDeployOperation_594996(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperation_594995(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594997 = path.getOrDefault("resourceGroupName")
  valid_594997 = validateParameter(valid_594997, JString, required = true,
                                 default = nil)
  if valid_594997 != nil:
    section.add "resourceGroupName", valid_594997
  var valid_594998 = path.getOrDefault("name")
  valid_594998 = validateParameter(valid_594998, JString, required = true,
                                 default = nil)
  if valid_594998 != nil:
    section.add "name", valid_594998
  var valid_594999 = path.getOrDefault("subscriptionId")
  valid_594999 = validateParameter(valid_594999, JString, required = true,
                                 default = nil)
  if valid_594999 != nil:
    section.add "subscriptionId", valid_594999
  var valid_595000 = path.getOrDefault("instanceId")
  valid_595000 = validateParameter(valid_595000, JString, required = true,
                                 default = nil)
  if valid_595000 != nil:
    section.add "instanceId", valid_595000
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595001 = query.getOrDefault("api-version")
  valid_595001 = validateParameter(valid_595001, JString, required = true,
                                 default = nil)
  if valid_595001 != nil:
    section.add "api-version", valid_595001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595003: Call_WebAppsCreateInstanceMSDeployOperation_594994;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_595003.validator(path, query, header, formData, body)
  let scheme = call_595003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595003.url(scheme.get, call_595003.host, call_595003.base,
                         call_595003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595003, url, valid)

proc call*(call_595004: Call_WebAppsCreateInstanceMSDeployOperation_594994;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_595005 = newJObject()
  var query_595006 = newJObject()
  var body_595007 = newJObject()
  add(path_595005, "resourceGroupName", newJString(resourceGroupName))
  add(query_595006, "api-version", newJString(apiVersion))
  add(path_595005, "name", newJString(name))
  add(path_595005, "subscriptionId", newJString(subscriptionId))
  add(path_595005, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_595007 = MSDeploy
  result = call_595004.call(path_595005, query_595006, nil, nil, body_595007)

var webAppsCreateInstanceMSDeployOperation* = Call_WebAppsCreateInstanceMSDeployOperation_594994(
    name: "webAppsCreateInstanceMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperation_594995, base: "",
    url: url_WebAppsCreateInstanceMSDeployOperation_594996,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatus_594982 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMsDeployStatus_594984(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatus_594983(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594985 = path.getOrDefault("resourceGroupName")
  valid_594985 = validateParameter(valid_594985, JString, required = true,
                                 default = nil)
  if valid_594985 != nil:
    section.add "resourceGroupName", valid_594985
  var valid_594986 = path.getOrDefault("name")
  valid_594986 = validateParameter(valid_594986, JString, required = true,
                                 default = nil)
  if valid_594986 != nil:
    section.add "name", valid_594986
  var valid_594987 = path.getOrDefault("subscriptionId")
  valid_594987 = validateParameter(valid_594987, JString, required = true,
                                 default = nil)
  if valid_594987 != nil:
    section.add "subscriptionId", valid_594987
  var valid_594988 = path.getOrDefault("instanceId")
  valid_594988 = validateParameter(valid_594988, JString, required = true,
                                 default = nil)
  if valid_594988 != nil:
    section.add "instanceId", valid_594988
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594989 = query.getOrDefault("api-version")
  valid_594989 = validateParameter(valid_594989, JString, required = true,
                                 default = nil)
  if valid_594989 != nil:
    section.add "api-version", valid_594989
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594990: Call_WebAppsGetInstanceMsDeployStatus_594982;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_594990.validator(path, query, header, formData, body)
  let scheme = call_594990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594990.url(scheme.get, call_594990.host, call_594990.base,
                         call_594990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594990, url, valid)

proc call*(call_594991: Call_WebAppsGetInstanceMsDeployStatus_594982;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_594992 = newJObject()
  var query_594993 = newJObject()
  add(path_594992, "resourceGroupName", newJString(resourceGroupName))
  add(query_594993, "api-version", newJString(apiVersion))
  add(path_594992, "name", newJString(name))
  add(path_594992, "subscriptionId", newJString(subscriptionId))
  add(path_594992, "instanceId", newJString(instanceId))
  result = call_594991.call(path_594992, query_594993, nil, nil, nil)

var webAppsGetInstanceMsDeployStatus* = Call_WebAppsGetInstanceMsDeployStatus_594982(
    name: "webAppsGetInstanceMsDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatus_594983, base: "",
    url: url_WebAppsGetInstanceMsDeployStatus_594984, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLog_595008 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMSDeployLog_595010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLog_595009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595011 = path.getOrDefault("resourceGroupName")
  valid_595011 = validateParameter(valid_595011, JString, required = true,
                                 default = nil)
  if valid_595011 != nil:
    section.add "resourceGroupName", valid_595011
  var valid_595012 = path.getOrDefault("name")
  valid_595012 = validateParameter(valid_595012, JString, required = true,
                                 default = nil)
  if valid_595012 != nil:
    section.add "name", valid_595012
  var valid_595013 = path.getOrDefault("subscriptionId")
  valid_595013 = validateParameter(valid_595013, JString, required = true,
                                 default = nil)
  if valid_595013 != nil:
    section.add "subscriptionId", valid_595013
  var valid_595014 = path.getOrDefault("instanceId")
  valid_595014 = validateParameter(valid_595014, JString, required = true,
                                 default = nil)
  if valid_595014 != nil:
    section.add "instanceId", valid_595014
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595015 = query.getOrDefault("api-version")
  valid_595015 = validateParameter(valid_595015, JString, required = true,
                                 default = nil)
  if valid_595015 != nil:
    section.add "api-version", valid_595015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595016: Call_WebAppsGetInstanceMSDeployLog_595008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_595016.validator(path, query, header, formData, body)
  let scheme = call_595016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595016.url(scheme.get, call_595016.host, call_595016.base,
                         call_595016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595016, url, valid)

proc call*(call_595017: Call_WebAppsGetInstanceMSDeployLog_595008;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_595018 = newJObject()
  var query_595019 = newJObject()
  add(path_595018, "resourceGroupName", newJString(resourceGroupName))
  add(query_595019, "api-version", newJString(apiVersion))
  add(path_595018, "name", newJString(name))
  add(path_595018, "subscriptionId", newJString(subscriptionId))
  add(path_595018, "instanceId", newJString(instanceId))
  result = call_595017.call(path_595018, query_595019, nil, nil, nil)

var webAppsGetInstanceMSDeployLog* = Call_WebAppsGetInstanceMSDeployLog_595008(
    name: "webAppsGetInstanceMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLog_595009, base: "",
    url: url_WebAppsGetInstanceMSDeployLog_595010, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcesses_595020 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcesses_595022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcesses_595021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595023 = path.getOrDefault("resourceGroupName")
  valid_595023 = validateParameter(valid_595023, JString, required = true,
                                 default = nil)
  if valid_595023 != nil:
    section.add "resourceGroupName", valid_595023
  var valid_595024 = path.getOrDefault("name")
  valid_595024 = validateParameter(valid_595024, JString, required = true,
                                 default = nil)
  if valid_595024 != nil:
    section.add "name", valid_595024
  var valid_595025 = path.getOrDefault("subscriptionId")
  valid_595025 = validateParameter(valid_595025, JString, required = true,
                                 default = nil)
  if valid_595025 != nil:
    section.add "subscriptionId", valid_595025
  var valid_595026 = path.getOrDefault("instanceId")
  valid_595026 = validateParameter(valid_595026, JString, required = true,
                                 default = nil)
  if valid_595026 != nil:
    section.add "instanceId", valid_595026
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595027 = query.getOrDefault("api-version")
  valid_595027 = validateParameter(valid_595027, JString, required = true,
                                 default = nil)
  if valid_595027 != nil:
    section.add "api-version", valid_595027
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595028: Call_WebAppsListInstanceProcesses_595020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595028.validator(path, query, header, formData, body)
  let scheme = call_595028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595028.url(scheme.get, call_595028.host, call_595028.base,
                         call_595028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595028, url, valid)

proc call*(call_595029: Call_WebAppsListInstanceProcesses_595020;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595030 = newJObject()
  var query_595031 = newJObject()
  add(path_595030, "resourceGroupName", newJString(resourceGroupName))
  add(query_595031, "api-version", newJString(apiVersion))
  add(path_595030, "name", newJString(name))
  add(path_595030, "subscriptionId", newJString(subscriptionId))
  add(path_595030, "instanceId", newJString(instanceId))
  result = call_595029.call(path_595030, query_595031, nil, nil, nil)

var webAppsListInstanceProcesses* = Call_WebAppsListInstanceProcesses_595020(
    name: "webAppsListInstanceProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcesses_595021, base: "",
    url: url_WebAppsListInstanceProcesses_595022, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcess_595032 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcess_595034(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcess_595033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595035 = path.getOrDefault("resourceGroupName")
  valid_595035 = validateParameter(valid_595035, JString, required = true,
                                 default = nil)
  if valid_595035 != nil:
    section.add "resourceGroupName", valid_595035
  var valid_595036 = path.getOrDefault("name")
  valid_595036 = validateParameter(valid_595036, JString, required = true,
                                 default = nil)
  if valid_595036 != nil:
    section.add "name", valid_595036
  var valid_595037 = path.getOrDefault("processId")
  valid_595037 = validateParameter(valid_595037, JString, required = true,
                                 default = nil)
  if valid_595037 != nil:
    section.add "processId", valid_595037
  var valid_595038 = path.getOrDefault("subscriptionId")
  valid_595038 = validateParameter(valid_595038, JString, required = true,
                                 default = nil)
  if valid_595038 != nil:
    section.add "subscriptionId", valid_595038
  var valid_595039 = path.getOrDefault("instanceId")
  valid_595039 = validateParameter(valid_595039, JString, required = true,
                                 default = nil)
  if valid_595039 != nil:
    section.add "instanceId", valid_595039
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595040 = query.getOrDefault("api-version")
  valid_595040 = validateParameter(valid_595040, JString, required = true,
                                 default = nil)
  if valid_595040 != nil:
    section.add "api-version", valid_595040
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595041: Call_WebAppsGetInstanceProcess_595032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595041.validator(path, query, header, formData, body)
  let scheme = call_595041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595041.url(scheme.get, call_595041.host, call_595041.base,
                         call_595041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595041, url, valid)

proc call*(call_595042: Call_WebAppsGetInstanceProcess_595032;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595043 = newJObject()
  var query_595044 = newJObject()
  add(path_595043, "resourceGroupName", newJString(resourceGroupName))
  add(query_595044, "api-version", newJString(apiVersion))
  add(path_595043, "name", newJString(name))
  add(path_595043, "processId", newJString(processId))
  add(path_595043, "subscriptionId", newJString(subscriptionId))
  add(path_595043, "instanceId", newJString(instanceId))
  result = call_595042.call(path_595043, query_595044, nil, nil, nil)

var webAppsGetInstanceProcess* = Call_WebAppsGetInstanceProcess_595032(
    name: "webAppsGetInstanceProcess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcess_595033, base: "",
    url: url_WebAppsGetInstanceProcess_595034, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcess_595045 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteInstanceProcess_595047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcess_595046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595048 = path.getOrDefault("resourceGroupName")
  valid_595048 = validateParameter(valid_595048, JString, required = true,
                                 default = nil)
  if valid_595048 != nil:
    section.add "resourceGroupName", valid_595048
  var valid_595049 = path.getOrDefault("name")
  valid_595049 = validateParameter(valid_595049, JString, required = true,
                                 default = nil)
  if valid_595049 != nil:
    section.add "name", valid_595049
  var valid_595050 = path.getOrDefault("processId")
  valid_595050 = validateParameter(valid_595050, JString, required = true,
                                 default = nil)
  if valid_595050 != nil:
    section.add "processId", valid_595050
  var valid_595051 = path.getOrDefault("subscriptionId")
  valid_595051 = validateParameter(valid_595051, JString, required = true,
                                 default = nil)
  if valid_595051 != nil:
    section.add "subscriptionId", valid_595051
  var valid_595052 = path.getOrDefault("instanceId")
  valid_595052 = validateParameter(valid_595052, JString, required = true,
                                 default = nil)
  if valid_595052 != nil:
    section.add "instanceId", valid_595052
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595053 = query.getOrDefault("api-version")
  valid_595053 = validateParameter(valid_595053, JString, required = true,
                                 default = nil)
  if valid_595053 != nil:
    section.add "api-version", valid_595053
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595054: Call_WebAppsDeleteInstanceProcess_595045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_595054.validator(path, query, header, formData, body)
  let scheme = call_595054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595054.url(scheme.get, call_595054.host, call_595054.base,
                         call_595054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595054, url, valid)

proc call*(call_595055: Call_WebAppsDeleteInstanceProcess_595045;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595056 = newJObject()
  var query_595057 = newJObject()
  add(path_595056, "resourceGroupName", newJString(resourceGroupName))
  add(query_595057, "api-version", newJString(apiVersion))
  add(path_595056, "name", newJString(name))
  add(path_595056, "processId", newJString(processId))
  add(path_595056, "subscriptionId", newJString(subscriptionId))
  add(path_595056, "instanceId", newJString(instanceId))
  result = call_595055.call(path_595056, query_595057, nil, nil, nil)

var webAppsDeleteInstanceProcess* = Call_WebAppsDeleteInstanceProcess_595045(
    name: "webAppsDeleteInstanceProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcess_595046, base: "",
    url: url_WebAppsDeleteInstanceProcess_595047, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDump_595058 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessDump_595060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDump_595059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595061 = path.getOrDefault("resourceGroupName")
  valid_595061 = validateParameter(valid_595061, JString, required = true,
                                 default = nil)
  if valid_595061 != nil:
    section.add "resourceGroupName", valid_595061
  var valid_595062 = path.getOrDefault("name")
  valid_595062 = validateParameter(valid_595062, JString, required = true,
                                 default = nil)
  if valid_595062 != nil:
    section.add "name", valid_595062
  var valid_595063 = path.getOrDefault("processId")
  valid_595063 = validateParameter(valid_595063, JString, required = true,
                                 default = nil)
  if valid_595063 != nil:
    section.add "processId", valid_595063
  var valid_595064 = path.getOrDefault("subscriptionId")
  valid_595064 = validateParameter(valid_595064, JString, required = true,
                                 default = nil)
  if valid_595064 != nil:
    section.add "subscriptionId", valid_595064
  var valid_595065 = path.getOrDefault("instanceId")
  valid_595065 = validateParameter(valid_595065, JString, required = true,
                                 default = nil)
  if valid_595065 != nil:
    section.add "instanceId", valid_595065
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595066 = query.getOrDefault("api-version")
  valid_595066 = validateParameter(valid_595066, JString, required = true,
                                 default = nil)
  if valid_595066 != nil:
    section.add "api-version", valid_595066
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595067: Call_WebAppsGetInstanceProcessDump_595058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595067.validator(path, query, header, formData, body)
  let scheme = call_595067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595067.url(scheme.get, call_595067.host, call_595067.base,
                         call_595067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595067, url, valid)

proc call*(call_595068: Call_WebAppsGetInstanceProcessDump_595058;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595069 = newJObject()
  var query_595070 = newJObject()
  add(path_595069, "resourceGroupName", newJString(resourceGroupName))
  add(query_595070, "api-version", newJString(apiVersion))
  add(path_595069, "name", newJString(name))
  add(path_595069, "processId", newJString(processId))
  add(path_595069, "subscriptionId", newJString(subscriptionId))
  add(path_595069, "instanceId", newJString(instanceId))
  result = call_595068.call(path_595069, query_595070, nil, nil, nil)

var webAppsGetInstanceProcessDump* = Call_WebAppsGetInstanceProcessDump_595058(
    name: "webAppsGetInstanceProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDump_595059, base: "",
    url: url_WebAppsGetInstanceProcessDump_595060, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModules_595071 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessModules_595073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModules_595072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595074 = path.getOrDefault("resourceGroupName")
  valid_595074 = validateParameter(valid_595074, JString, required = true,
                                 default = nil)
  if valid_595074 != nil:
    section.add "resourceGroupName", valid_595074
  var valid_595075 = path.getOrDefault("name")
  valid_595075 = validateParameter(valid_595075, JString, required = true,
                                 default = nil)
  if valid_595075 != nil:
    section.add "name", valid_595075
  var valid_595076 = path.getOrDefault("processId")
  valid_595076 = validateParameter(valid_595076, JString, required = true,
                                 default = nil)
  if valid_595076 != nil:
    section.add "processId", valid_595076
  var valid_595077 = path.getOrDefault("subscriptionId")
  valid_595077 = validateParameter(valid_595077, JString, required = true,
                                 default = nil)
  if valid_595077 != nil:
    section.add "subscriptionId", valid_595077
  var valid_595078 = path.getOrDefault("instanceId")
  valid_595078 = validateParameter(valid_595078, JString, required = true,
                                 default = nil)
  if valid_595078 != nil:
    section.add "instanceId", valid_595078
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595079 = query.getOrDefault("api-version")
  valid_595079 = validateParameter(valid_595079, JString, required = true,
                                 default = nil)
  if valid_595079 != nil:
    section.add "api-version", valid_595079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595080: Call_WebAppsListInstanceProcessModules_595071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595080.validator(path, query, header, formData, body)
  let scheme = call_595080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595080.url(scheme.get, call_595080.host, call_595080.base,
                         call_595080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595080, url, valid)

proc call*(call_595081: Call_WebAppsListInstanceProcessModules_595071;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595082 = newJObject()
  var query_595083 = newJObject()
  add(path_595082, "resourceGroupName", newJString(resourceGroupName))
  add(query_595083, "api-version", newJString(apiVersion))
  add(path_595082, "name", newJString(name))
  add(path_595082, "processId", newJString(processId))
  add(path_595082, "subscriptionId", newJString(subscriptionId))
  add(path_595082, "instanceId", newJString(instanceId))
  result = call_595081.call(path_595082, query_595083, nil, nil, nil)

var webAppsListInstanceProcessModules* = Call_WebAppsListInstanceProcessModules_595071(
    name: "webAppsListInstanceProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModules_595072, base: "",
    url: url_WebAppsListInstanceProcessModules_595073, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModule_595084 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessModule_595086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModule_595085(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595087 = path.getOrDefault("resourceGroupName")
  valid_595087 = validateParameter(valid_595087, JString, required = true,
                                 default = nil)
  if valid_595087 != nil:
    section.add "resourceGroupName", valid_595087
  var valid_595088 = path.getOrDefault("name")
  valid_595088 = validateParameter(valid_595088, JString, required = true,
                                 default = nil)
  if valid_595088 != nil:
    section.add "name", valid_595088
  var valid_595089 = path.getOrDefault("processId")
  valid_595089 = validateParameter(valid_595089, JString, required = true,
                                 default = nil)
  if valid_595089 != nil:
    section.add "processId", valid_595089
  var valid_595090 = path.getOrDefault("subscriptionId")
  valid_595090 = validateParameter(valid_595090, JString, required = true,
                                 default = nil)
  if valid_595090 != nil:
    section.add "subscriptionId", valid_595090
  var valid_595091 = path.getOrDefault("baseAddress")
  valid_595091 = validateParameter(valid_595091, JString, required = true,
                                 default = nil)
  if valid_595091 != nil:
    section.add "baseAddress", valid_595091
  var valid_595092 = path.getOrDefault("instanceId")
  valid_595092 = validateParameter(valid_595092, JString, required = true,
                                 default = nil)
  if valid_595092 != nil:
    section.add "instanceId", valid_595092
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595093 = query.getOrDefault("api-version")
  valid_595093 = validateParameter(valid_595093, JString, required = true,
                                 default = nil)
  if valid_595093 != nil:
    section.add "api-version", valid_595093
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595094: Call_WebAppsGetInstanceProcessModule_595084;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595094.validator(path, query, header, formData, body)
  let scheme = call_595094.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595094.url(scheme.get, call_595094.host, call_595094.base,
                         call_595094.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595094, url, valid)

proc call*(call_595095: Call_WebAppsGetInstanceProcessModule_595084;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595096 = newJObject()
  var query_595097 = newJObject()
  add(path_595096, "resourceGroupName", newJString(resourceGroupName))
  add(query_595097, "api-version", newJString(apiVersion))
  add(path_595096, "name", newJString(name))
  add(path_595096, "processId", newJString(processId))
  add(path_595096, "subscriptionId", newJString(subscriptionId))
  add(path_595096, "baseAddress", newJString(baseAddress))
  add(path_595096, "instanceId", newJString(instanceId))
  result = call_595095.call(path_595096, query_595097, nil, nil, nil)

var webAppsGetInstanceProcessModule* = Call_WebAppsGetInstanceProcessModule_595084(
    name: "webAppsGetInstanceProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModule_595085, base: "",
    url: url_WebAppsGetInstanceProcessModule_595086, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreads_595098 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessThreads_595100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreads_595099(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595101 = path.getOrDefault("resourceGroupName")
  valid_595101 = validateParameter(valid_595101, JString, required = true,
                                 default = nil)
  if valid_595101 != nil:
    section.add "resourceGroupName", valid_595101
  var valid_595102 = path.getOrDefault("name")
  valid_595102 = validateParameter(valid_595102, JString, required = true,
                                 default = nil)
  if valid_595102 != nil:
    section.add "name", valid_595102
  var valid_595103 = path.getOrDefault("processId")
  valid_595103 = validateParameter(valid_595103, JString, required = true,
                                 default = nil)
  if valid_595103 != nil:
    section.add "processId", valid_595103
  var valid_595104 = path.getOrDefault("subscriptionId")
  valid_595104 = validateParameter(valid_595104, JString, required = true,
                                 default = nil)
  if valid_595104 != nil:
    section.add "subscriptionId", valid_595104
  var valid_595105 = path.getOrDefault("instanceId")
  valid_595105 = validateParameter(valid_595105, JString, required = true,
                                 default = nil)
  if valid_595105 != nil:
    section.add "instanceId", valid_595105
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595106 = query.getOrDefault("api-version")
  valid_595106 = validateParameter(valid_595106, JString, required = true,
                                 default = nil)
  if valid_595106 != nil:
    section.add "api-version", valid_595106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595107: Call_WebAppsListInstanceProcessThreads_595098;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595107.validator(path, query, header, formData, body)
  let scheme = call_595107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595107.url(scheme.get, call_595107.host, call_595107.base,
                         call_595107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595107, url, valid)

proc call*(call_595108: Call_WebAppsListInstanceProcessThreads_595098;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595109 = newJObject()
  var query_595110 = newJObject()
  add(path_595109, "resourceGroupName", newJString(resourceGroupName))
  add(query_595110, "api-version", newJString(apiVersion))
  add(path_595109, "name", newJString(name))
  add(path_595109, "processId", newJString(processId))
  add(path_595109, "subscriptionId", newJString(subscriptionId))
  add(path_595109, "instanceId", newJString(instanceId))
  result = call_595108.call(path_595109, query_595110, nil, nil, nil)

var webAppsListInstanceProcessThreads* = Call_WebAppsListInstanceProcessThreads_595098(
    name: "webAppsListInstanceProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreads_595099, base: "",
    url: url_WebAppsListInstanceProcessThreads_595100, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThread_595111 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessThread_595113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThread_595112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595114 = path.getOrDefault("resourceGroupName")
  valid_595114 = validateParameter(valid_595114, JString, required = true,
                                 default = nil)
  if valid_595114 != nil:
    section.add "resourceGroupName", valid_595114
  var valid_595115 = path.getOrDefault("name")
  valid_595115 = validateParameter(valid_595115, JString, required = true,
                                 default = nil)
  if valid_595115 != nil:
    section.add "name", valid_595115
  var valid_595116 = path.getOrDefault("processId")
  valid_595116 = validateParameter(valid_595116, JString, required = true,
                                 default = nil)
  if valid_595116 != nil:
    section.add "processId", valid_595116
  var valid_595117 = path.getOrDefault("subscriptionId")
  valid_595117 = validateParameter(valid_595117, JString, required = true,
                                 default = nil)
  if valid_595117 != nil:
    section.add "subscriptionId", valid_595117
  var valid_595118 = path.getOrDefault("instanceId")
  valid_595118 = validateParameter(valid_595118, JString, required = true,
                                 default = nil)
  if valid_595118 != nil:
    section.add "instanceId", valid_595118
  var valid_595119 = path.getOrDefault("threadId")
  valid_595119 = validateParameter(valid_595119, JString, required = true,
                                 default = nil)
  if valid_595119 != nil:
    section.add "threadId", valid_595119
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595120 = query.getOrDefault("api-version")
  valid_595120 = validateParameter(valid_595120, JString, required = true,
                                 default = nil)
  if valid_595120 != nil:
    section.add "api-version", valid_595120
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595121: Call_WebAppsGetInstanceProcessThread_595111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_595121.validator(path, query, header, formData, body)
  let scheme = call_595121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595121.url(scheme.get, call_595121.host, call_595121.base,
                         call_595121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595121, url, valid)

proc call*(call_595122: Call_WebAppsGetInstanceProcessThread_595111;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_595123 = newJObject()
  var query_595124 = newJObject()
  add(path_595123, "resourceGroupName", newJString(resourceGroupName))
  add(query_595124, "api-version", newJString(apiVersion))
  add(path_595123, "name", newJString(name))
  add(path_595123, "processId", newJString(processId))
  add(path_595123, "subscriptionId", newJString(subscriptionId))
  add(path_595123, "instanceId", newJString(instanceId))
  add(path_595123, "threadId", newJString(threadId))
  result = call_595122.call(path_595123, query_595124, nil, nil, nil)

var webAppsGetInstanceProcessThread* = Call_WebAppsGetInstanceProcessThread_595111(
    name: "webAppsGetInstanceProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThread_595112, base: "",
    url: url_WebAppsGetInstanceProcessThread_595113, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneable_595125 = ref object of OpenApiRestCall_593437
proc url_WebAppsIsCloneable_595127(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneable_595126(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595128 = path.getOrDefault("resourceGroupName")
  valid_595128 = validateParameter(valid_595128, JString, required = true,
                                 default = nil)
  if valid_595128 != nil:
    section.add "resourceGroupName", valid_595128
  var valid_595129 = path.getOrDefault("name")
  valid_595129 = validateParameter(valid_595129, JString, required = true,
                                 default = nil)
  if valid_595129 != nil:
    section.add "name", valid_595129
  var valid_595130 = path.getOrDefault("subscriptionId")
  valid_595130 = validateParameter(valid_595130, JString, required = true,
                                 default = nil)
  if valid_595130 != nil:
    section.add "subscriptionId", valid_595130
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595131 = query.getOrDefault("api-version")
  valid_595131 = validateParameter(valid_595131, JString, required = true,
                                 default = nil)
  if valid_595131 != nil:
    section.add "api-version", valid_595131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595132: Call_WebAppsIsCloneable_595125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_595132.validator(path, query, header, formData, body)
  let scheme = call_595132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595132.url(scheme.get, call_595132.host, call_595132.base,
                         call_595132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595132, url, valid)

proc call*(call_595133: Call_WebAppsIsCloneable_595125; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsIsCloneable
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595134 = newJObject()
  var query_595135 = newJObject()
  add(path_595134, "resourceGroupName", newJString(resourceGroupName))
  add(query_595135, "api-version", newJString(apiVersion))
  add(path_595134, "name", newJString(name))
  add(path_595134, "subscriptionId", newJString(subscriptionId))
  result = call_595133.call(path_595134, query_595135, nil, nil, nil)

var webAppsIsCloneable* = Call_WebAppsIsCloneable_595125(
    name: "webAppsIsCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_WebAppsIsCloneable_595126, base: "",
    url: url_WebAppsIsCloneable_595127, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggers_595136 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSyncFunctionTriggers_595138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggers_595137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595139 = path.getOrDefault("resourceGroupName")
  valid_595139 = validateParameter(valid_595139, JString, required = true,
                                 default = nil)
  if valid_595139 != nil:
    section.add "resourceGroupName", valid_595139
  var valid_595140 = path.getOrDefault("name")
  valid_595140 = validateParameter(valid_595140, JString, required = true,
                                 default = nil)
  if valid_595140 != nil:
    section.add "name", valid_595140
  var valid_595141 = path.getOrDefault("subscriptionId")
  valid_595141 = validateParameter(valid_595141, JString, required = true,
                                 default = nil)
  if valid_595141 != nil:
    section.add "subscriptionId", valid_595141
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595142 = query.getOrDefault("api-version")
  valid_595142 = validateParameter(valid_595142, JString, required = true,
                                 default = nil)
  if valid_595142 != nil:
    section.add "api-version", valid_595142
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595143: Call_WebAppsListSyncFunctionTriggers_595136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_595143.validator(path, query, header, formData, body)
  let scheme = call_595143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595143.url(scheme.get, call_595143.host, call_595143.base,
                         call_595143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595143, url, valid)

proc call*(call_595144: Call_WebAppsListSyncFunctionTriggers_595136;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggers
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595145 = newJObject()
  var query_595146 = newJObject()
  add(path_595145, "resourceGroupName", newJString(resourceGroupName))
  add(query_595146, "api-version", newJString(apiVersion))
  add(path_595145, "name", newJString(name))
  add(path_595145, "subscriptionId", newJString(subscriptionId))
  result = call_595144.call(path_595145, query_595146, nil, nil, nil)

var webAppsListSyncFunctionTriggers* = Call_WebAppsListSyncFunctionTriggers_595136(
    name: "webAppsListSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggers_595137, base: "",
    url: url_WebAppsListSyncFunctionTriggers_595138, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitions_595147 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetricDefinitions_595149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitions_595148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595150 = path.getOrDefault("resourceGroupName")
  valid_595150 = validateParameter(valid_595150, JString, required = true,
                                 default = nil)
  if valid_595150 != nil:
    section.add "resourceGroupName", valid_595150
  var valid_595151 = path.getOrDefault("name")
  valid_595151 = validateParameter(valid_595151, JString, required = true,
                                 default = nil)
  if valid_595151 != nil:
    section.add "name", valid_595151
  var valid_595152 = path.getOrDefault("subscriptionId")
  valid_595152 = validateParameter(valid_595152, JString, required = true,
                                 default = nil)
  if valid_595152 != nil:
    section.add "subscriptionId", valid_595152
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595153 = query.getOrDefault("api-version")
  valid_595153 = validateParameter(valid_595153, JString, required = true,
                                 default = nil)
  if valid_595153 != nil:
    section.add "api-version", valid_595153
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595154: Call_WebAppsListMetricDefinitions_595147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_595154.validator(path, query, header, formData, body)
  let scheme = call_595154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595154.url(scheme.get, call_595154.host, call_595154.base,
                         call_595154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595154, url, valid)

proc call*(call_595155: Call_WebAppsListMetricDefinitions_595147;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitions
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595156 = newJObject()
  var query_595157 = newJObject()
  add(path_595156, "resourceGroupName", newJString(resourceGroupName))
  add(query_595157, "api-version", newJString(apiVersion))
  add(path_595156, "name", newJString(name))
  add(path_595156, "subscriptionId", newJString(subscriptionId))
  result = call_595155.call(path_595156, query_595157, nil, nil, nil)

var webAppsListMetricDefinitions* = Call_WebAppsListMetricDefinitions_595147(
    name: "webAppsListMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitions_595148, base: "",
    url: url_WebAppsListMetricDefinitions_595149, schemes: {Scheme.Https})
type
  Call_WebAppsListMetrics_595158 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetrics_595160(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetrics_595159(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595162 = path.getOrDefault("resourceGroupName")
  valid_595162 = validateParameter(valid_595162, JString, required = true,
                                 default = nil)
  if valid_595162 != nil:
    section.add "resourceGroupName", valid_595162
  var valid_595163 = path.getOrDefault("name")
  valid_595163 = validateParameter(valid_595163, JString, required = true,
                                 default = nil)
  if valid_595163 != nil:
    section.add "name", valid_595163
  var valid_595164 = path.getOrDefault("subscriptionId")
  valid_595164 = validateParameter(valid_595164, JString, required = true,
                                 default = nil)
  if valid_595164 != nil:
    section.add "subscriptionId", valid_595164
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595165 = query.getOrDefault("api-version")
  valid_595165 = validateParameter(valid_595165, JString, required = true,
                                 default = nil)
  if valid_595165 != nil:
    section.add "api-version", valid_595165
  var valid_595166 = query.getOrDefault("details")
  valid_595166 = validateParameter(valid_595166, JBool, required = false, default = nil)
  if valid_595166 != nil:
    section.add "details", valid_595166
  var valid_595167 = query.getOrDefault("$filter")
  valid_595167 = validateParameter(valid_595167, JString, required = false,
                                 default = nil)
  if valid_595167 != nil:
    section.add "$filter", valid_595167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595168: Call_WebAppsListMetrics_595158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_595168.validator(path, query, header, formData, body)
  let scheme = call_595168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595168.url(scheme.get, call_595168.host, call_595168.base,
                         call_595168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595168, url, valid)

proc call*(call_595169: Call_WebAppsListMetrics_595158; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetrics
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595170 = newJObject()
  var query_595171 = newJObject()
  add(path_595170, "resourceGroupName", newJString(resourceGroupName))
  add(query_595171, "api-version", newJString(apiVersion))
  add(path_595170, "name", newJString(name))
  add(query_595171, "details", newJBool(details))
  add(path_595170, "subscriptionId", newJString(subscriptionId))
  add(query_595171, "$filter", newJString(Filter))
  result = call_595169.call(path_595170, query_595171, nil, nil, nil)

var webAppsListMetrics* = Call_WebAppsListMetrics_595158(
    name: "webAppsListMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_WebAppsListMetrics_595159, base: "",
    url: url_WebAppsListMetrics_595160, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateStorage_595172 = ref object of OpenApiRestCall_593437
proc url_WebAppsMigrateStorage_595174(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migrate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateStorage_595173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595175 = path.getOrDefault("resourceGroupName")
  valid_595175 = validateParameter(valid_595175, JString, required = true,
                                 default = nil)
  if valid_595175 != nil:
    section.add "resourceGroupName", valid_595175
  var valid_595176 = path.getOrDefault("name")
  valid_595176 = validateParameter(valid_595176, JString, required = true,
                                 default = nil)
  if valid_595176 != nil:
    section.add "name", valid_595176
  var valid_595177 = path.getOrDefault("subscriptionId")
  valid_595177 = validateParameter(valid_595177, JString, required = true,
                                 default = nil)
  if valid_595177 != nil:
    section.add "subscriptionId", valid_595177
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   subscriptionName: JString (required)
  ##                   : Azure subscription.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595178 = query.getOrDefault("api-version")
  valid_595178 = validateParameter(valid_595178, JString, required = true,
                                 default = nil)
  if valid_595178 != nil:
    section.add "api-version", valid_595178
  var valid_595179 = query.getOrDefault("subscriptionName")
  valid_595179 = validateParameter(valid_595179, JString, required = true,
                                 default = nil)
  if valid_595179 != nil:
    section.add "subscriptionName", valid_595179
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595181: Call_WebAppsMigrateStorage_595172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app.
  ## 
  let valid = call_595181.validator(path, query, header, formData, body)
  let scheme = call_595181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595181.url(scheme.get, call_595181.host, call_595181.base,
                         call_595181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595181, url, valid)

proc call*(call_595182: Call_WebAppsMigrateStorage_595172;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionName: string; subscriptionId: string;
          migrationOptions: JsonNode): Recallable =
  ## webAppsMigrateStorage
  ## Restores a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionName: string (required)
  ##                   : Azure subscription.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  var path_595183 = newJObject()
  var query_595184 = newJObject()
  var body_595185 = newJObject()
  add(path_595183, "resourceGroupName", newJString(resourceGroupName))
  add(query_595184, "api-version", newJString(apiVersion))
  add(path_595183, "name", newJString(name))
  add(query_595184, "subscriptionName", newJString(subscriptionName))
  add(path_595183, "subscriptionId", newJString(subscriptionId))
  if migrationOptions != nil:
    body_595185 = migrationOptions
  result = call_595182.call(path_595183, query_595184, nil, nil, body_595185)

var webAppsMigrateStorage* = Call_WebAppsMigrateStorage_595172(
    name: "webAppsMigrateStorage", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    validator: validate_WebAppsMigrateStorage_595173, base: "",
    url: url_WebAppsMigrateStorage_595174, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateMySql_595186 = ref object of OpenApiRestCall_593437
proc url_WebAppsMigrateMySql_595188(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateMySql_595187(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595189 = path.getOrDefault("resourceGroupName")
  valid_595189 = validateParameter(valid_595189, JString, required = true,
                                 default = nil)
  if valid_595189 != nil:
    section.add "resourceGroupName", valid_595189
  var valid_595190 = path.getOrDefault("name")
  valid_595190 = validateParameter(valid_595190, JString, required = true,
                                 default = nil)
  if valid_595190 != nil:
    section.add "name", valid_595190
  var valid_595191 = path.getOrDefault("subscriptionId")
  valid_595191 = validateParameter(valid_595191, JString, required = true,
                                 default = nil)
  if valid_595191 != nil:
    section.add "subscriptionId", valid_595191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595192 = query.getOrDefault("api-version")
  valid_595192 = validateParameter(valid_595192, JString, required = true,
                                 default = nil)
  if valid_595192 != nil:
    section.add "api-version", valid_595192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595194: Call_WebAppsMigrateMySql_595186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  let valid = call_595194.validator(path, query, header, formData, body)
  let scheme = call_595194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595194.url(scheme.get, call_595194.host, call_595194.base,
                         call_595194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595194, url, valid)

proc call*(call_595195: Call_WebAppsMigrateMySql_595186; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          migrationRequestEnvelope: JsonNode): Recallable =
  ## webAppsMigrateMySql
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  var path_595196 = newJObject()
  var query_595197 = newJObject()
  var body_595198 = newJObject()
  add(path_595196, "resourceGroupName", newJString(resourceGroupName))
  add(query_595197, "api-version", newJString(apiVersion))
  add(path_595196, "name", newJString(name))
  add(path_595196, "subscriptionId", newJString(subscriptionId))
  if migrationRequestEnvelope != nil:
    body_595198 = migrationRequestEnvelope
  result = call_595195.call(path_595196, query_595197, nil, nil, body_595198)

var webAppsMigrateMySql* = Call_WebAppsMigrateMySql_595186(
    name: "webAppsMigrateMySql", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    validator: validate_WebAppsMigrateMySql_595187, base: "",
    url: url_WebAppsMigrateMySql_595188, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatus_595199 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMigrateMySqlStatus_595201(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatus_595200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595202 = path.getOrDefault("resourceGroupName")
  valid_595202 = validateParameter(valid_595202, JString, required = true,
                                 default = nil)
  if valid_595202 != nil:
    section.add "resourceGroupName", valid_595202
  var valid_595203 = path.getOrDefault("name")
  valid_595203 = validateParameter(valid_595203, JString, required = true,
                                 default = nil)
  if valid_595203 != nil:
    section.add "name", valid_595203
  var valid_595204 = path.getOrDefault("subscriptionId")
  valid_595204 = validateParameter(valid_595204, JString, required = true,
                                 default = nil)
  if valid_595204 != nil:
    section.add "subscriptionId", valid_595204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595205 = query.getOrDefault("api-version")
  valid_595205 = validateParameter(valid_595205, JString, required = true,
                                 default = nil)
  if valid_595205 != nil:
    section.add "api-version", valid_595205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595206: Call_WebAppsGetMigrateMySqlStatus_595199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_595206.validator(path, query, header, formData, body)
  let scheme = call_595206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595206.url(scheme.get, call_595206.host, call_595206.base,
                         call_595206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595206, url, valid)

proc call*(call_595207: Call_WebAppsGetMigrateMySqlStatus_595199;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatus
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595208 = newJObject()
  var query_595209 = newJObject()
  add(path_595208, "resourceGroupName", newJString(resourceGroupName))
  add(query_595209, "api-version", newJString(apiVersion))
  add(path_595208, "name", newJString(name))
  add(path_595208, "subscriptionId", newJString(subscriptionId))
  result = call_595207.call(path_595208, query_595209, nil, nil, nil)

var webAppsGetMigrateMySqlStatus* = Call_WebAppsGetMigrateMySqlStatus_595199(
    name: "webAppsGetMigrateMySqlStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatus_595200, base: "",
    url: url_WebAppsGetMigrateMySqlStatus_595201, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595221 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595223(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595222(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595224 = path.getOrDefault("resourceGroupName")
  valid_595224 = validateParameter(valid_595224, JString, required = true,
                                 default = nil)
  if valid_595224 != nil:
    section.add "resourceGroupName", valid_595224
  var valid_595225 = path.getOrDefault("name")
  valid_595225 = validateParameter(valid_595225, JString, required = true,
                                 default = nil)
  if valid_595225 != nil:
    section.add "name", valid_595225
  var valid_595226 = path.getOrDefault("subscriptionId")
  valid_595226 = validateParameter(valid_595226, JString, required = true,
                                 default = nil)
  if valid_595226 != nil:
    section.add "subscriptionId", valid_595226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595227 = query.getOrDefault("api-version")
  valid_595227 = validateParameter(valid_595227, JString, required = true,
                                 default = nil)
  if valid_595227 != nil:
    section.add "api-version", valid_595227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595229: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595221;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_595229.validator(path, query, header, formData, body)
  let scheme = call_595229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595229.url(scheme.get, call_595229.host, call_595229.base,
                         call_595229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595229, url, valid)

proc call*(call_595230: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595221;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateSwiftVirtualNetworkConnection
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595231 = newJObject()
  var query_595232 = newJObject()
  var body_595233 = newJObject()
  add(path_595231, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_595233 = connectionEnvelope
  add(path_595231, "name", newJString(name))
  add(query_595232, "api-version", newJString(apiVersion))
  add(path_595231, "subscriptionId", newJString(subscriptionId))
  result = call_595230.call(path_595231, query_595232, nil, nil, body_595233)

var webAppsCreateOrUpdateSwiftVirtualNetworkConnection* = Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595221(
    name: "webAppsCreateOrUpdateSwiftVirtualNetworkConnection",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595222,
    base: "", url: url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_595223,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSwiftVirtualNetworkConnection_595210 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSwiftVirtualNetworkConnection_595212(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSwiftVirtualNetworkConnection_595211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a Swift Virtual Network connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595213 = path.getOrDefault("resourceGroupName")
  valid_595213 = validateParameter(valid_595213, JString, required = true,
                                 default = nil)
  if valid_595213 != nil:
    section.add "resourceGroupName", valid_595213
  var valid_595214 = path.getOrDefault("name")
  valid_595214 = validateParameter(valid_595214, JString, required = true,
                                 default = nil)
  if valid_595214 != nil:
    section.add "name", valid_595214
  var valid_595215 = path.getOrDefault("subscriptionId")
  valid_595215 = validateParameter(valid_595215, JString, required = true,
                                 default = nil)
  if valid_595215 != nil:
    section.add "subscriptionId", valid_595215
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595216 = query.getOrDefault("api-version")
  valid_595216 = validateParameter(valid_595216, JString, required = true,
                                 default = nil)
  if valid_595216 != nil:
    section.add "api-version", valid_595216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595217: Call_WebAppsGetSwiftVirtualNetworkConnection_595210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a Swift Virtual Network connection.
  ## 
  let valid = call_595217.validator(path, query, header, formData, body)
  let scheme = call_595217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595217.url(scheme.get, call_595217.host, call_595217.base,
                         call_595217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595217, url, valid)

proc call*(call_595218: Call_WebAppsGetSwiftVirtualNetworkConnection_595210;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSwiftVirtualNetworkConnection
  ## Gets a Swift Virtual Network connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595219 = newJObject()
  var query_595220 = newJObject()
  add(path_595219, "resourceGroupName", newJString(resourceGroupName))
  add(query_595220, "api-version", newJString(apiVersion))
  add(path_595219, "name", newJString(name))
  add(path_595219, "subscriptionId", newJString(subscriptionId))
  result = call_595218.call(path_595219, query_595220, nil, nil, nil)

var webAppsGetSwiftVirtualNetworkConnection* = Call_WebAppsGetSwiftVirtualNetworkConnection_595210(
    name: "webAppsGetSwiftVirtualNetworkConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsGetSwiftVirtualNetworkConnection_595211, base: "",
    url: url_WebAppsGetSwiftVirtualNetworkConnection_595212,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSwiftVirtualNetworkConnection_595245 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSwiftVirtualNetworkConnection_595247(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSwiftVirtualNetworkConnection_595246(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595248 = path.getOrDefault("resourceGroupName")
  valid_595248 = validateParameter(valid_595248, JString, required = true,
                                 default = nil)
  if valid_595248 != nil:
    section.add "resourceGroupName", valid_595248
  var valid_595249 = path.getOrDefault("name")
  valid_595249 = validateParameter(valid_595249, JString, required = true,
                                 default = nil)
  if valid_595249 != nil:
    section.add "name", valid_595249
  var valid_595250 = path.getOrDefault("subscriptionId")
  valid_595250 = validateParameter(valid_595250, JString, required = true,
                                 default = nil)
  if valid_595250 != nil:
    section.add "subscriptionId", valid_595250
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595251 = query.getOrDefault("api-version")
  valid_595251 = validateParameter(valid_595251, JString, required = true,
                                 default = nil)
  if valid_595251 != nil:
    section.add "api-version", valid_595251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595253: Call_WebAppsUpdateSwiftVirtualNetworkConnection_595245;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_595253.validator(path, query, header, formData, body)
  let scheme = call_595253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595253.url(scheme.get, call_595253.host, call_595253.base,
                         call_595253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595253, url, valid)

proc call*(call_595254: Call_WebAppsUpdateSwiftVirtualNetworkConnection_595245;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsUpdateSwiftVirtualNetworkConnection
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595255 = newJObject()
  var query_595256 = newJObject()
  var body_595257 = newJObject()
  add(path_595255, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_595257 = connectionEnvelope
  add(path_595255, "name", newJString(name))
  add(query_595256, "api-version", newJString(apiVersion))
  add(path_595255, "subscriptionId", newJString(subscriptionId))
  result = call_595254.call(path_595255, query_595256, nil, nil, body_595257)

var webAppsUpdateSwiftVirtualNetworkConnection* = Call_WebAppsUpdateSwiftVirtualNetworkConnection_595245(
    name: "webAppsUpdateSwiftVirtualNetworkConnection",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsUpdateSwiftVirtualNetworkConnection_595246,
    base: "", url: url_WebAppsUpdateSwiftVirtualNetworkConnection_595247,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSwiftVirtualNetwork_595234 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSwiftVirtualNetwork_595236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSwiftVirtualNetwork_595235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595237 = path.getOrDefault("resourceGroupName")
  valid_595237 = validateParameter(valid_595237, JString, required = true,
                                 default = nil)
  if valid_595237 != nil:
    section.add "resourceGroupName", valid_595237
  var valid_595238 = path.getOrDefault("name")
  valid_595238 = validateParameter(valid_595238, JString, required = true,
                                 default = nil)
  if valid_595238 != nil:
    section.add "name", valid_595238
  var valid_595239 = path.getOrDefault("subscriptionId")
  valid_595239 = validateParameter(valid_595239, JString, required = true,
                                 default = nil)
  if valid_595239 != nil:
    section.add "subscriptionId", valid_595239
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595240 = query.getOrDefault("api-version")
  valid_595240 = validateParameter(valid_595240, JString, required = true,
                                 default = nil)
  if valid_595240 != nil:
    section.add "api-version", valid_595240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595241: Call_WebAppsDeleteSwiftVirtualNetwork_595234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  let valid = call_595241.validator(path, query, header, formData, body)
  let scheme = call_595241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595241.url(scheme.get, call_595241.host, call_595241.base,
                         call_595241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595241, url, valid)

proc call*(call_595242: Call_WebAppsDeleteSwiftVirtualNetwork_595234;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSwiftVirtualNetwork
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595243 = newJObject()
  var query_595244 = newJObject()
  add(path_595243, "resourceGroupName", newJString(resourceGroupName))
  add(query_595244, "api-version", newJString(apiVersion))
  add(path_595243, "name", newJString(name))
  add(path_595243, "subscriptionId", newJString(subscriptionId))
  result = call_595242.call(path_595243, query_595244, nil, nil, nil)

var webAppsDeleteSwiftVirtualNetwork* = Call_WebAppsDeleteSwiftVirtualNetwork_595234(
    name: "webAppsDeleteSwiftVirtualNetwork", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsDeleteSwiftVirtualNetwork_595235, base: "",
    url: url_WebAppsDeleteSwiftVirtualNetwork_595236, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeatures_595258 = ref object of OpenApiRestCall_593437
proc url_WebAppsListNetworkFeatures_595260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeatures_595259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595261 = path.getOrDefault("resourceGroupName")
  valid_595261 = validateParameter(valid_595261, JString, required = true,
                                 default = nil)
  if valid_595261 != nil:
    section.add "resourceGroupName", valid_595261
  var valid_595262 = path.getOrDefault("name")
  valid_595262 = validateParameter(valid_595262, JString, required = true,
                                 default = nil)
  if valid_595262 != nil:
    section.add "name", valid_595262
  var valid_595263 = path.getOrDefault("subscriptionId")
  valid_595263 = validateParameter(valid_595263, JString, required = true,
                                 default = nil)
  if valid_595263 != nil:
    section.add "subscriptionId", valid_595263
  var valid_595264 = path.getOrDefault("view")
  valid_595264 = validateParameter(valid_595264, JString, required = true,
                                 default = nil)
  if valid_595264 != nil:
    section.add "view", valid_595264
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595265 = query.getOrDefault("api-version")
  valid_595265 = validateParameter(valid_595265, JString, required = true,
                                 default = nil)
  if valid_595265 != nil:
    section.add "api-version", valid_595265
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595266: Call_WebAppsListNetworkFeatures_595258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_595266.validator(path, query, header, formData, body)
  let scheme = call_595266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595266.url(scheme.get, call_595266.host, call_595266.base,
                         call_595266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595266, url, valid)

proc call*(call_595267: Call_WebAppsListNetworkFeatures_595258;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeatures
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_595268 = newJObject()
  var query_595269 = newJObject()
  add(path_595268, "resourceGroupName", newJString(resourceGroupName))
  add(query_595269, "api-version", newJString(apiVersion))
  add(path_595268, "name", newJString(name))
  add(path_595268, "subscriptionId", newJString(subscriptionId))
  add(path_595268, "view", newJString(view))
  result = call_595267.call(path_595268, query_595269, nil, nil, nil)

var webAppsListNetworkFeatures* = Call_WebAppsListNetworkFeatures_595258(
    name: "webAppsListNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeatures_595259, base: "",
    url: url_WebAppsListNetworkFeatures_595260, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperation_595270 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTraceOperation_595272(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/networkTrace/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperation_595271(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595273 = path.getOrDefault("resourceGroupName")
  valid_595273 = validateParameter(valid_595273, JString, required = true,
                                 default = nil)
  if valid_595273 != nil:
    section.add "resourceGroupName", valid_595273
  var valid_595274 = path.getOrDefault("name")
  valid_595274 = validateParameter(valid_595274, JString, required = true,
                                 default = nil)
  if valid_595274 != nil:
    section.add "name", valid_595274
  var valid_595275 = path.getOrDefault("subscriptionId")
  valid_595275 = validateParameter(valid_595275, JString, required = true,
                                 default = nil)
  if valid_595275 != nil:
    section.add "subscriptionId", valid_595275
  var valid_595276 = path.getOrDefault("operationId")
  valid_595276 = validateParameter(valid_595276, JString, required = true,
                                 default = nil)
  if valid_595276 != nil:
    section.add "operationId", valid_595276
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595277 = query.getOrDefault("api-version")
  valid_595277 = validateParameter(valid_595277, JString, required = true,
                                 default = nil)
  if valid_595277 != nil:
    section.add "api-version", valid_595277
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595278: Call_WebAppsGetNetworkTraceOperation_595270;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_595278.validator(path, query, header, formData, body)
  let scheme = call_595278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595278.url(scheme.get, call_595278.host, call_595278.base,
                         call_595278.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595278, url, valid)

proc call*(call_595279: Call_WebAppsGetNetworkTraceOperation_595270;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperation
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_595280 = newJObject()
  var query_595281 = newJObject()
  add(path_595280, "resourceGroupName", newJString(resourceGroupName))
  add(query_595281, "api-version", newJString(apiVersion))
  add(path_595280, "name", newJString(name))
  add(path_595280, "subscriptionId", newJString(subscriptionId))
  add(path_595280, "operationId", newJString(operationId))
  result = call_595279.call(path_595280, query_595281, nil, nil, nil)

var webAppsGetNetworkTraceOperation* = Call_WebAppsGetNetworkTraceOperation_595270(
    name: "webAppsGetNetworkTraceOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperation_595271, base: "",
    url: url_WebAppsGetNetworkTraceOperation_595272, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTrace_595282 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartWebSiteNetworkTrace_595284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTrace_595283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595285 = path.getOrDefault("resourceGroupName")
  valid_595285 = validateParameter(valid_595285, JString, required = true,
                                 default = nil)
  if valid_595285 != nil:
    section.add "resourceGroupName", valid_595285
  var valid_595286 = path.getOrDefault("name")
  valid_595286 = validateParameter(valid_595286, JString, required = true,
                                 default = nil)
  if valid_595286 != nil:
    section.add "name", valid_595286
  var valid_595287 = path.getOrDefault("subscriptionId")
  valid_595287 = validateParameter(valid_595287, JString, required = true,
                                 default = nil)
  if valid_595287 != nil:
    section.add "subscriptionId", valid_595287
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595288 = query.getOrDefault("api-version")
  valid_595288 = validateParameter(valid_595288, JString, required = true,
                                 default = nil)
  if valid_595288 != nil:
    section.add "api-version", valid_595288
  var valid_595289 = query.getOrDefault("durationInSeconds")
  valid_595289 = validateParameter(valid_595289, JInt, required = false, default = nil)
  if valid_595289 != nil:
    section.add "durationInSeconds", valid_595289
  var valid_595290 = query.getOrDefault("maxFrameLength")
  valid_595290 = validateParameter(valid_595290, JInt, required = false, default = nil)
  if valid_595290 != nil:
    section.add "maxFrameLength", valid_595290
  var valid_595291 = query.getOrDefault("sasUrl")
  valid_595291 = validateParameter(valid_595291, JString, required = false,
                                 default = nil)
  if valid_595291 != nil:
    section.add "sasUrl", valid_595291
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595292: Call_WebAppsStartWebSiteNetworkTrace_595282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  let valid = call_595292.validator(path, query, header, formData, body)
  let scheme = call_595292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595292.url(scheme.get, call_595292.host, call_595292.base,
                         call_595292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595292, url, valid)

proc call*(call_595293: Call_WebAppsStartWebSiteNetworkTrace_595282;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTrace
  ## Start capturing network packets for the site (To be deprecated).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_595294 = newJObject()
  var query_595295 = newJObject()
  add(path_595294, "resourceGroupName", newJString(resourceGroupName))
  add(query_595295, "api-version", newJString(apiVersion))
  add(path_595294, "name", newJString(name))
  add(path_595294, "subscriptionId", newJString(subscriptionId))
  add(query_595295, "durationInSeconds", newJInt(durationInSeconds))
  add(query_595295, "maxFrameLength", newJInt(maxFrameLength))
  add(query_595295, "sasUrl", newJString(sasUrl))
  result = call_595293.call(path_595294, query_595295, nil, nil, nil)

var webAppsStartWebSiteNetworkTrace* = Call_WebAppsStartWebSiteNetworkTrace_595282(
    name: "webAppsStartWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTrace_595283, base: "",
    url: url_WebAppsStartWebSiteNetworkTrace_595284, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceOperation_595296 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartWebSiteNetworkTraceOperation_595298(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/startOperation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceOperation_595297(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595299 = path.getOrDefault("resourceGroupName")
  valid_595299 = validateParameter(valid_595299, JString, required = true,
                                 default = nil)
  if valid_595299 != nil:
    section.add "resourceGroupName", valid_595299
  var valid_595300 = path.getOrDefault("name")
  valid_595300 = validateParameter(valid_595300, JString, required = true,
                                 default = nil)
  if valid_595300 != nil:
    section.add "name", valid_595300
  var valid_595301 = path.getOrDefault("subscriptionId")
  valid_595301 = validateParameter(valid_595301, JString, required = true,
                                 default = nil)
  if valid_595301 != nil:
    section.add "subscriptionId", valid_595301
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595302 = query.getOrDefault("api-version")
  valid_595302 = validateParameter(valid_595302, JString, required = true,
                                 default = nil)
  if valid_595302 != nil:
    section.add "api-version", valid_595302
  var valid_595303 = query.getOrDefault("durationInSeconds")
  valid_595303 = validateParameter(valid_595303, JInt, required = false, default = nil)
  if valid_595303 != nil:
    section.add "durationInSeconds", valid_595303
  var valid_595304 = query.getOrDefault("maxFrameLength")
  valid_595304 = validateParameter(valid_595304, JInt, required = false, default = nil)
  if valid_595304 != nil:
    section.add "maxFrameLength", valid_595304
  var valid_595305 = query.getOrDefault("sasUrl")
  valid_595305 = validateParameter(valid_595305, JString, required = false,
                                 default = nil)
  if valid_595305 != nil:
    section.add "sasUrl", valid_595305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595306: Call_WebAppsStartWebSiteNetworkTraceOperation_595296;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_595306.validator(path, query, header, formData, body)
  let scheme = call_595306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595306.url(scheme.get, call_595306.host, call_595306.base,
                         call_595306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595306, url, valid)

proc call*(call_595307: Call_WebAppsStartWebSiteNetworkTraceOperation_595296;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceOperation
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_595308 = newJObject()
  var query_595309 = newJObject()
  add(path_595308, "resourceGroupName", newJString(resourceGroupName))
  add(query_595309, "api-version", newJString(apiVersion))
  add(path_595308, "name", newJString(name))
  add(path_595308, "subscriptionId", newJString(subscriptionId))
  add(query_595309, "durationInSeconds", newJInt(durationInSeconds))
  add(query_595309, "maxFrameLength", newJInt(maxFrameLength))
  add(query_595309, "sasUrl", newJString(sasUrl))
  result = call_595307.call(path_595308, query_595309, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceOperation* = Call_WebAppsStartWebSiteNetworkTraceOperation_595296(
    name: "webAppsStartWebSiteNetworkTraceOperation", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
    validator: validate_WebAppsStartWebSiteNetworkTraceOperation_595297, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceOperation_595298,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTrace_595310 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopWebSiteNetworkTrace_595312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTrace_595311(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595313 = path.getOrDefault("resourceGroupName")
  valid_595313 = validateParameter(valid_595313, JString, required = true,
                                 default = nil)
  if valid_595313 != nil:
    section.add "resourceGroupName", valid_595313
  var valid_595314 = path.getOrDefault("name")
  valid_595314 = validateParameter(valid_595314, JString, required = true,
                                 default = nil)
  if valid_595314 != nil:
    section.add "name", valid_595314
  var valid_595315 = path.getOrDefault("subscriptionId")
  valid_595315 = validateParameter(valid_595315, JString, required = true,
                                 default = nil)
  if valid_595315 != nil:
    section.add "subscriptionId", valid_595315
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595316 = query.getOrDefault("api-version")
  valid_595316 = validateParameter(valid_595316, JString, required = true,
                                 default = nil)
  if valid_595316 != nil:
    section.add "api-version", valid_595316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595317: Call_WebAppsStopWebSiteNetworkTrace_595310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_595317.validator(path, query, header, formData, body)
  let scheme = call_595317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595317.url(scheme.get, call_595317.host, call_595317.base,
                         call_595317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595317, url, valid)

proc call*(call_595318: Call_WebAppsStopWebSiteNetworkTrace_595310;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595319 = newJObject()
  var query_595320 = newJObject()
  add(path_595319, "resourceGroupName", newJString(resourceGroupName))
  add(query_595320, "api-version", newJString(apiVersion))
  add(path_595319, "name", newJString(name))
  add(path_595319, "subscriptionId", newJString(subscriptionId))
  result = call_595318.call(path_595319, query_595320, nil, nil, nil)

var webAppsStopWebSiteNetworkTrace* = Call_WebAppsStopWebSiteNetworkTrace_595310(
    name: "webAppsStopWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTrace_595311, base: "",
    url: url_WebAppsStopWebSiteNetworkTrace_595312, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraces_595321 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTraces_595323(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraces_595322(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595324 = path.getOrDefault("resourceGroupName")
  valid_595324 = validateParameter(valid_595324, JString, required = true,
                                 default = nil)
  if valid_595324 != nil:
    section.add "resourceGroupName", valid_595324
  var valid_595325 = path.getOrDefault("name")
  valid_595325 = validateParameter(valid_595325, JString, required = true,
                                 default = nil)
  if valid_595325 != nil:
    section.add "name", valid_595325
  var valid_595326 = path.getOrDefault("subscriptionId")
  valid_595326 = validateParameter(valid_595326, JString, required = true,
                                 default = nil)
  if valid_595326 != nil:
    section.add "subscriptionId", valid_595326
  var valid_595327 = path.getOrDefault("operationId")
  valid_595327 = validateParameter(valid_595327, JString, required = true,
                                 default = nil)
  if valid_595327 != nil:
    section.add "operationId", valid_595327
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595328 = query.getOrDefault("api-version")
  valid_595328 = validateParameter(valid_595328, JString, required = true,
                                 default = nil)
  if valid_595328 != nil:
    section.add "api-version", valid_595328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595329: Call_WebAppsGetNetworkTraces_595321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_595329.validator(path, query, header, formData, body)
  let scheme = call_595329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595329.url(scheme.get, call_595329.host, call_595329.base,
                         call_595329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595329, url, valid)

proc call*(call_595330: Call_WebAppsGetNetworkTraces_595321;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraces
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_595331 = newJObject()
  var query_595332 = newJObject()
  add(path_595331, "resourceGroupName", newJString(resourceGroupName))
  add(query_595332, "api-version", newJString(apiVersion))
  add(path_595331, "name", newJString(name))
  add(path_595331, "subscriptionId", newJString(subscriptionId))
  add(path_595331, "operationId", newJString(operationId))
  result = call_595330.call(path_595331, query_595332, nil, nil, nil)

var webAppsGetNetworkTraces* = Call_WebAppsGetNetworkTraces_595321(
    name: "webAppsGetNetworkTraces", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
    validator: validate_WebAppsGetNetworkTraces_595322, base: "",
    url: url_WebAppsGetNetworkTraces_595323, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationV2_595333 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTraceOperationV2_595335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/networkTraces/current/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationV2_595334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595336 = path.getOrDefault("resourceGroupName")
  valid_595336 = validateParameter(valid_595336, JString, required = true,
                                 default = nil)
  if valid_595336 != nil:
    section.add "resourceGroupName", valid_595336
  var valid_595337 = path.getOrDefault("name")
  valid_595337 = validateParameter(valid_595337, JString, required = true,
                                 default = nil)
  if valid_595337 != nil:
    section.add "name", valid_595337
  var valid_595338 = path.getOrDefault("subscriptionId")
  valid_595338 = validateParameter(valid_595338, JString, required = true,
                                 default = nil)
  if valid_595338 != nil:
    section.add "subscriptionId", valid_595338
  var valid_595339 = path.getOrDefault("operationId")
  valid_595339 = validateParameter(valid_595339, JString, required = true,
                                 default = nil)
  if valid_595339 != nil:
    section.add "operationId", valid_595339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595340 = query.getOrDefault("api-version")
  valid_595340 = validateParameter(valid_595340, JString, required = true,
                                 default = nil)
  if valid_595340 != nil:
    section.add "api-version", valid_595340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595341: Call_WebAppsGetNetworkTraceOperationV2_595333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_595341.validator(path, query, header, formData, body)
  let scheme = call_595341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595341.url(scheme.get, call_595341.host, call_595341.base,
                         call_595341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595341, url, valid)

proc call*(call_595342: Call_WebAppsGetNetworkTraceOperationV2_595333;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperationV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_595343 = newJObject()
  var query_595344 = newJObject()
  add(path_595343, "resourceGroupName", newJString(resourceGroupName))
  add(query_595344, "api-version", newJString(apiVersion))
  add(path_595343, "name", newJString(name))
  add(path_595343, "subscriptionId", newJString(subscriptionId))
  add(path_595343, "operationId", newJString(operationId))
  result = call_595342.call(path_595343, query_595344, nil, nil, nil)

var webAppsGetNetworkTraceOperationV2* = Call_WebAppsGetNetworkTraceOperationV2_595333(
    name: "webAppsGetNetworkTraceOperationV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationV2_595334, base: "",
    url: url_WebAppsGetNetworkTraceOperationV2_595335, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesV2_595345 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTracesV2_595347(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTraces/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesV2_595346(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595348 = path.getOrDefault("resourceGroupName")
  valid_595348 = validateParameter(valid_595348, JString, required = true,
                                 default = nil)
  if valid_595348 != nil:
    section.add "resourceGroupName", valid_595348
  var valid_595349 = path.getOrDefault("name")
  valid_595349 = validateParameter(valid_595349, JString, required = true,
                                 default = nil)
  if valid_595349 != nil:
    section.add "name", valid_595349
  var valid_595350 = path.getOrDefault("subscriptionId")
  valid_595350 = validateParameter(valid_595350, JString, required = true,
                                 default = nil)
  if valid_595350 != nil:
    section.add "subscriptionId", valid_595350
  var valid_595351 = path.getOrDefault("operationId")
  valid_595351 = validateParameter(valid_595351, JString, required = true,
                                 default = nil)
  if valid_595351 != nil:
    section.add "operationId", valid_595351
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595352 = query.getOrDefault("api-version")
  valid_595352 = validateParameter(valid_595352, JString, required = true,
                                 default = nil)
  if valid_595352 != nil:
    section.add "api-version", valid_595352
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595353: Call_WebAppsGetNetworkTracesV2_595345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_595353.validator(path, query, header, formData, body)
  let scheme = call_595353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595353.url(scheme.get, call_595353.host, call_595353.base,
                         call_595353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595353, url, valid)

proc call*(call_595354: Call_WebAppsGetNetworkTracesV2_595345;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTracesV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_595355 = newJObject()
  var query_595356 = newJObject()
  add(path_595355, "resourceGroupName", newJString(resourceGroupName))
  add(query_595356, "api-version", newJString(apiVersion))
  add(path_595355, "name", newJString(name))
  add(path_595355, "subscriptionId", newJString(subscriptionId))
  add(path_595355, "operationId", newJString(operationId))
  result = call_595354.call(path_595355, query_595356, nil, nil, nil)

var webAppsGetNetworkTracesV2* = Call_WebAppsGetNetworkTracesV2_595345(
    name: "webAppsGetNetworkTracesV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
    validator: validate_WebAppsGetNetworkTracesV2_595346, base: "",
    url: url_WebAppsGetNetworkTracesV2_595347, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPassword_595357 = ref object of OpenApiRestCall_593437
proc url_WebAppsGenerateNewSitePublishingPassword_595359(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPassword_595358(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595360 = path.getOrDefault("resourceGroupName")
  valid_595360 = validateParameter(valid_595360, JString, required = true,
                                 default = nil)
  if valid_595360 != nil:
    section.add "resourceGroupName", valid_595360
  var valid_595361 = path.getOrDefault("name")
  valid_595361 = validateParameter(valid_595361, JString, required = true,
                                 default = nil)
  if valid_595361 != nil:
    section.add "name", valid_595361
  var valid_595362 = path.getOrDefault("subscriptionId")
  valid_595362 = validateParameter(valid_595362, JString, required = true,
                                 default = nil)
  if valid_595362 != nil:
    section.add "subscriptionId", valid_595362
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595363 = query.getOrDefault("api-version")
  valid_595363 = validateParameter(valid_595363, JString, required = true,
                                 default = nil)
  if valid_595363 != nil:
    section.add "api-version", valid_595363
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595364: Call_WebAppsGenerateNewSitePublishingPassword_595357;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_595364.validator(path, query, header, formData, body)
  let scheme = call_595364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595364.url(scheme.get, call_595364.host, call_595364.base,
                         call_595364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595364, url, valid)

proc call*(call_595365: Call_WebAppsGenerateNewSitePublishingPassword_595357;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPassword
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595366 = newJObject()
  var query_595367 = newJObject()
  add(path_595366, "resourceGroupName", newJString(resourceGroupName))
  add(query_595367, "api-version", newJString(apiVersion))
  add(path_595366, "name", newJString(name))
  add(path_595366, "subscriptionId", newJString(subscriptionId))
  result = call_595365.call(path_595366, query_595367, nil, nil, nil)

var webAppsGenerateNewSitePublishingPassword* = Call_WebAppsGenerateNewSitePublishingPassword_595357(
    name: "webAppsGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPassword_595358, base: "",
    url: url_WebAppsGenerateNewSitePublishingPassword_595359,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCounters_595368 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPerfMonCounters_595370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCounters_595369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595371 = path.getOrDefault("resourceGroupName")
  valid_595371 = validateParameter(valid_595371, JString, required = true,
                                 default = nil)
  if valid_595371 != nil:
    section.add "resourceGroupName", valid_595371
  var valid_595372 = path.getOrDefault("name")
  valid_595372 = validateParameter(valid_595372, JString, required = true,
                                 default = nil)
  if valid_595372 != nil:
    section.add "name", valid_595372
  var valid_595373 = path.getOrDefault("subscriptionId")
  valid_595373 = validateParameter(valid_595373, JString, required = true,
                                 default = nil)
  if valid_595373 != nil:
    section.add "subscriptionId", valid_595373
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595374 = query.getOrDefault("api-version")
  valid_595374 = validateParameter(valid_595374, JString, required = true,
                                 default = nil)
  if valid_595374 != nil:
    section.add "api-version", valid_595374
  var valid_595375 = query.getOrDefault("$filter")
  valid_595375 = validateParameter(valid_595375, JString, required = false,
                                 default = nil)
  if valid_595375 != nil:
    section.add "$filter", valid_595375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595376: Call_WebAppsListPerfMonCounters_595368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_595376.validator(path, query, header, formData, body)
  let scheme = call_595376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595376.url(scheme.get, call_595376.host, call_595376.base,
                         call_595376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595376, url, valid)

proc call*(call_595377: Call_WebAppsListPerfMonCounters_595368;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCounters
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595378 = newJObject()
  var query_595379 = newJObject()
  add(path_595378, "resourceGroupName", newJString(resourceGroupName))
  add(query_595379, "api-version", newJString(apiVersion))
  add(path_595378, "name", newJString(name))
  add(path_595378, "subscriptionId", newJString(subscriptionId))
  add(query_595379, "$filter", newJString(Filter))
  result = call_595377.call(path_595378, query_595379, nil, nil, nil)

var webAppsListPerfMonCounters* = Call_WebAppsListPerfMonCounters_595368(
    name: "webAppsListPerfMonCounters", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    validator: validate_WebAppsListPerfMonCounters_595369, base: "",
    url: url_WebAppsListPerfMonCounters_595370, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlag_595380 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSitePhpErrorLogFlag_595382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlag_595381(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595383 = path.getOrDefault("resourceGroupName")
  valid_595383 = validateParameter(valid_595383, JString, required = true,
                                 default = nil)
  if valid_595383 != nil:
    section.add "resourceGroupName", valid_595383
  var valid_595384 = path.getOrDefault("name")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = nil)
  if valid_595384 != nil:
    section.add "name", valid_595384
  var valid_595385 = path.getOrDefault("subscriptionId")
  valid_595385 = validateParameter(valid_595385, JString, required = true,
                                 default = nil)
  if valid_595385 != nil:
    section.add "subscriptionId", valid_595385
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595386 = query.getOrDefault("api-version")
  valid_595386 = validateParameter(valid_595386, JString, required = true,
                                 default = nil)
  if valid_595386 != nil:
    section.add "api-version", valid_595386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595387: Call_WebAppsGetSitePhpErrorLogFlag_595380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_595387.validator(path, query, header, formData, body)
  let scheme = call_595387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595387.url(scheme.get, call_595387.host, call_595387.base,
                         call_595387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595387, url, valid)

proc call*(call_595388: Call_WebAppsGetSitePhpErrorLogFlag_595380;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlag
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595389 = newJObject()
  var query_595390 = newJObject()
  add(path_595389, "resourceGroupName", newJString(resourceGroupName))
  add(query_595390, "api-version", newJString(apiVersion))
  add(path_595389, "name", newJString(name))
  add(path_595389, "subscriptionId", newJString(subscriptionId))
  result = call_595388.call(path_595389, query_595390, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlag* = Call_WebAppsGetSitePhpErrorLogFlag_595380(
    name: "webAppsGetSitePhpErrorLogFlag", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlag_595381, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlag_595382, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOns_595391 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPremierAddOns_595393(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOns_595392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595394 = path.getOrDefault("resourceGroupName")
  valid_595394 = validateParameter(valid_595394, JString, required = true,
                                 default = nil)
  if valid_595394 != nil:
    section.add "resourceGroupName", valid_595394
  var valid_595395 = path.getOrDefault("name")
  valid_595395 = validateParameter(valid_595395, JString, required = true,
                                 default = nil)
  if valid_595395 != nil:
    section.add "name", valid_595395
  var valid_595396 = path.getOrDefault("subscriptionId")
  valid_595396 = validateParameter(valid_595396, JString, required = true,
                                 default = nil)
  if valid_595396 != nil:
    section.add "subscriptionId", valid_595396
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595397 = query.getOrDefault("api-version")
  valid_595397 = validateParameter(valid_595397, JString, required = true,
                                 default = nil)
  if valid_595397 != nil:
    section.add "api-version", valid_595397
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595398: Call_WebAppsListPremierAddOns_595391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_595398.validator(path, query, header, formData, body)
  let scheme = call_595398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595398.url(scheme.get, call_595398.host, call_595398.base,
                         call_595398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595398, url, valid)

proc call*(call_595399: Call_WebAppsListPremierAddOns_595391;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOns
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595400 = newJObject()
  var query_595401 = newJObject()
  add(path_595400, "resourceGroupName", newJString(resourceGroupName))
  add(query_595401, "api-version", newJString(apiVersion))
  add(path_595400, "name", newJString(name))
  add(path_595400, "subscriptionId", newJString(subscriptionId))
  result = call_595399.call(path_595400, query_595401, nil, nil, nil)

var webAppsListPremierAddOns* = Call_WebAppsListPremierAddOns_595391(
    name: "webAppsListPremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_WebAppsListPremierAddOns_595392, base: "",
    url: url_WebAppsListPremierAddOns_595393, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOn_595414 = ref object of OpenApiRestCall_593437
proc url_WebAppsAddPremierAddOn_595416(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOn_595415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595417 = path.getOrDefault("resourceGroupName")
  valid_595417 = validateParameter(valid_595417, JString, required = true,
                                 default = nil)
  if valid_595417 != nil:
    section.add "resourceGroupName", valid_595417
  var valid_595418 = path.getOrDefault("name")
  valid_595418 = validateParameter(valid_595418, JString, required = true,
                                 default = nil)
  if valid_595418 != nil:
    section.add "name", valid_595418
  var valid_595419 = path.getOrDefault("subscriptionId")
  valid_595419 = validateParameter(valid_595419, JString, required = true,
                                 default = nil)
  if valid_595419 != nil:
    section.add "subscriptionId", valid_595419
  var valid_595420 = path.getOrDefault("premierAddOnName")
  valid_595420 = validateParameter(valid_595420, JString, required = true,
                                 default = nil)
  if valid_595420 != nil:
    section.add "premierAddOnName", valid_595420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595421 = query.getOrDefault("api-version")
  valid_595421 = validateParameter(valid_595421, JString, required = true,
                                 default = nil)
  if valid_595421 != nil:
    section.add "api-version", valid_595421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595423: Call_WebAppsAddPremierAddOn_595414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_595423.validator(path, query, header, formData, body)
  let scheme = call_595423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595423.url(scheme.get, call_595423.host, call_595423.base,
                         call_595423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595423, url, valid)

proc call*(call_595424: Call_WebAppsAddPremierAddOn_595414;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOn
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595425 = newJObject()
  var query_595426 = newJObject()
  var body_595427 = newJObject()
  add(path_595425, "resourceGroupName", newJString(resourceGroupName))
  add(query_595426, "api-version", newJString(apiVersion))
  add(path_595425, "name", newJString(name))
  if premierAddOn != nil:
    body_595427 = premierAddOn
  add(path_595425, "subscriptionId", newJString(subscriptionId))
  add(path_595425, "premierAddOnName", newJString(premierAddOnName))
  result = call_595424.call(path_595425, query_595426, nil, nil, body_595427)

var webAppsAddPremierAddOn* = Call_WebAppsAddPremierAddOn_595414(
    name: "webAppsAddPremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOn_595415, base: "",
    url: url_WebAppsAddPremierAddOn_595416, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOn_595402 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPremierAddOn_595404(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOn_595403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595405 = path.getOrDefault("resourceGroupName")
  valid_595405 = validateParameter(valid_595405, JString, required = true,
                                 default = nil)
  if valid_595405 != nil:
    section.add "resourceGroupName", valid_595405
  var valid_595406 = path.getOrDefault("name")
  valid_595406 = validateParameter(valid_595406, JString, required = true,
                                 default = nil)
  if valid_595406 != nil:
    section.add "name", valid_595406
  var valid_595407 = path.getOrDefault("subscriptionId")
  valid_595407 = validateParameter(valid_595407, JString, required = true,
                                 default = nil)
  if valid_595407 != nil:
    section.add "subscriptionId", valid_595407
  var valid_595408 = path.getOrDefault("premierAddOnName")
  valid_595408 = validateParameter(valid_595408, JString, required = true,
                                 default = nil)
  if valid_595408 != nil:
    section.add "premierAddOnName", valid_595408
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595409 = query.getOrDefault("api-version")
  valid_595409 = validateParameter(valid_595409, JString, required = true,
                                 default = nil)
  if valid_595409 != nil:
    section.add "api-version", valid_595409
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595410: Call_WebAppsGetPremierAddOn_595402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_595410.validator(path, query, header, formData, body)
  let scheme = call_595410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595410.url(scheme.get, call_595410.host, call_595410.base,
                         call_595410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595410, url, valid)

proc call*(call_595411: Call_WebAppsGetPremierAddOn_595402;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOn
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595412 = newJObject()
  var query_595413 = newJObject()
  add(path_595412, "resourceGroupName", newJString(resourceGroupName))
  add(query_595413, "api-version", newJString(apiVersion))
  add(path_595412, "name", newJString(name))
  add(path_595412, "subscriptionId", newJString(subscriptionId))
  add(path_595412, "premierAddOnName", newJString(premierAddOnName))
  result = call_595411.call(path_595412, query_595413, nil, nil, nil)

var webAppsGetPremierAddOn* = Call_WebAppsGetPremierAddOn_595402(
    name: "webAppsGetPremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOn_595403, base: "",
    url: url_WebAppsGetPremierAddOn_595404, schemes: {Scheme.Https})
type
  Call_WebAppsUpdatePremierAddOn_595440 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdatePremierAddOn_595442(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdatePremierAddOn_595441(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595443 = path.getOrDefault("resourceGroupName")
  valid_595443 = validateParameter(valid_595443, JString, required = true,
                                 default = nil)
  if valid_595443 != nil:
    section.add "resourceGroupName", valid_595443
  var valid_595444 = path.getOrDefault("name")
  valid_595444 = validateParameter(valid_595444, JString, required = true,
                                 default = nil)
  if valid_595444 != nil:
    section.add "name", valid_595444
  var valid_595445 = path.getOrDefault("subscriptionId")
  valid_595445 = validateParameter(valid_595445, JString, required = true,
                                 default = nil)
  if valid_595445 != nil:
    section.add "subscriptionId", valid_595445
  var valid_595446 = path.getOrDefault("premierAddOnName")
  valid_595446 = validateParameter(valid_595446, JString, required = true,
                                 default = nil)
  if valid_595446 != nil:
    section.add "premierAddOnName", valid_595446
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595447 = query.getOrDefault("api-version")
  valid_595447 = validateParameter(valid_595447, JString, required = true,
                                 default = nil)
  if valid_595447 != nil:
    section.add "api-version", valid_595447
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595449: Call_WebAppsUpdatePremierAddOn_595440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_595449.validator(path, query, header, formData, body)
  let scheme = call_595449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595449.url(scheme.get, call_595449.host, call_595449.base,
                         call_595449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595449, url, valid)

proc call*(call_595450: Call_WebAppsUpdatePremierAddOn_595440;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsUpdatePremierAddOn
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595451 = newJObject()
  var query_595452 = newJObject()
  var body_595453 = newJObject()
  add(path_595451, "resourceGroupName", newJString(resourceGroupName))
  add(query_595452, "api-version", newJString(apiVersion))
  add(path_595451, "name", newJString(name))
  if premierAddOn != nil:
    body_595453 = premierAddOn
  add(path_595451, "subscriptionId", newJString(subscriptionId))
  add(path_595451, "premierAddOnName", newJString(premierAddOnName))
  result = call_595450.call(path_595451, query_595452, nil, nil, body_595453)

var webAppsUpdatePremierAddOn* = Call_WebAppsUpdatePremierAddOn_595440(
    name: "webAppsUpdatePremierAddOn", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsUpdatePremierAddOn_595441, base: "",
    url: url_WebAppsUpdatePremierAddOn_595442, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOn_595428 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePremierAddOn_595430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOn_595429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595431 = path.getOrDefault("resourceGroupName")
  valid_595431 = validateParameter(valid_595431, JString, required = true,
                                 default = nil)
  if valid_595431 != nil:
    section.add "resourceGroupName", valid_595431
  var valid_595432 = path.getOrDefault("name")
  valid_595432 = validateParameter(valid_595432, JString, required = true,
                                 default = nil)
  if valid_595432 != nil:
    section.add "name", valid_595432
  var valid_595433 = path.getOrDefault("subscriptionId")
  valid_595433 = validateParameter(valid_595433, JString, required = true,
                                 default = nil)
  if valid_595433 != nil:
    section.add "subscriptionId", valid_595433
  var valid_595434 = path.getOrDefault("premierAddOnName")
  valid_595434 = validateParameter(valid_595434, JString, required = true,
                                 default = nil)
  if valid_595434 != nil:
    section.add "premierAddOnName", valid_595434
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595435 = query.getOrDefault("api-version")
  valid_595435 = validateParameter(valid_595435, JString, required = true,
                                 default = nil)
  if valid_595435 != nil:
    section.add "api-version", valid_595435
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595436: Call_WebAppsDeletePremierAddOn_595428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_595436.validator(path, query, header, formData, body)
  let scheme = call_595436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595436.url(scheme.get, call_595436.host, call_595436.base,
                         call_595436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595436, url, valid)

proc call*(call_595437: Call_WebAppsDeletePremierAddOn_595428;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOn
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595438 = newJObject()
  var query_595439 = newJObject()
  add(path_595438, "resourceGroupName", newJString(resourceGroupName))
  add(query_595439, "api-version", newJString(apiVersion))
  add(path_595438, "name", newJString(name))
  add(path_595438, "subscriptionId", newJString(subscriptionId))
  add(path_595438, "premierAddOnName", newJString(premierAddOnName))
  result = call_595437.call(path_595438, query_595439, nil, nil, nil)

var webAppsDeletePremierAddOn* = Call_WebAppsDeletePremierAddOn_595428(
    name: "webAppsDeletePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOn_595429, base: "",
    url: url_WebAppsDeletePremierAddOn_595430, schemes: {Scheme.Https})
type
  Call_WebAppsPutPrivateAccessVnet_595465 = ref object of OpenApiRestCall_593437
proc url_WebAppsPutPrivateAccessVnet_595467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsPutPrivateAccessVnet_595466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595468 = path.getOrDefault("resourceGroupName")
  valid_595468 = validateParameter(valid_595468, JString, required = true,
                                 default = nil)
  if valid_595468 != nil:
    section.add "resourceGroupName", valid_595468
  var valid_595469 = path.getOrDefault("name")
  valid_595469 = validateParameter(valid_595469, JString, required = true,
                                 default = nil)
  if valid_595469 != nil:
    section.add "name", valid_595469
  var valid_595470 = path.getOrDefault("subscriptionId")
  valid_595470 = validateParameter(valid_595470, JString, required = true,
                                 default = nil)
  if valid_595470 != nil:
    section.add "subscriptionId", valid_595470
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595471 = query.getOrDefault("api-version")
  valid_595471 = validateParameter(valid_595471, JString, required = true,
                                 default = nil)
  if valid_595471 != nil:
    section.add "api-version", valid_595471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   access: JObject (required)
  ##         : The information for the private access
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595473: Call_WebAppsPutPrivateAccessVnet_595465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_595473.validator(path, query, header, formData, body)
  let scheme = call_595473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595473.url(scheme.get, call_595473.host, call_595473.base,
                         call_595473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595473, url, valid)

proc call*(call_595474: Call_WebAppsPutPrivateAccessVnet_595465;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; access: JsonNode): Recallable =
  ## webAppsPutPrivateAccessVnet
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   access: JObject (required)
  ##         : The information for the private access
  var path_595475 = newJObject()
  var query_595476 = newJObject()
  var body_595477 = newJObject()
  add(path_595475, "resourceGroupName", newJString(resourceGroupName))
  add(query_595476, "api-version", newJString(apiVersion))
  add(path_595475, "name", newJString(name))
  add(path_595475, "subscriptionId", newJString(subscriptionId))
  if access != nil:
    body_595477 = access
  result = call_595474.call(path_595475, query_595476, nil, nil, body_595477)

var webAppsPutPrivateAccessVnet* = Call_WebAppsPutPrivateAccessVnet_595465(
    name: "webAppsPutPrivateAccessVnet", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    validator: validate_WebAppsPutPrivateAccessVnet_595466, base: "",
    url: url_WebAppsPutPrivateAccessVnet_595467, schemes: {Scheme.Https})
type
  Call_WebAppsGetPrivateAccess_595454 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPrivateAccess_595456(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPrivateAccess_595455(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595457 = path.getOrDefault("resourceGroupName")
  valid_595457 = validateParameter(valid_595457, JString, required = true,
                                 default = nil)
  if valid_595457 != nil:
    section.add "resourceGroupName", valid_595457
  var valid_595458 = path.getOrDefault("name")
  valid_595458 = validateParameter(valid_595458, JString, required = true,
                                 default = nil)
  if valid_595458 != nil:
    section.add "name", valid_595458
  var valid_595459 = path.getOrDefault("subscriptionId")
  valid_595459 = validateParameter(valid_595459, JString, required = true,
                                 default = nil)
  if valid_595459 != nil:
    section.add "subscriptionId", valid_595459
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595460 = query.getOrDefault("api-version")
  valid_595460 = validateParameter(valid_595460, JString, required = true,
                                 default = nil)
  if valid_595460 != nil:
    section.add "api-version", valid_595460
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595461: Call_WebAppsGetPrivateAccess_595454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_595461.validator(path, query, header, formData, body)
  let scheme = call_595461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595461.url(scheme.get, call_595461.host, call_595461.base,
                         call_595461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595461, url, valid)

proc call*(call_595462: Call_WebAppsGetPrivateAccess_595454;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetPrivateAccess
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595463 = newJObject()
  var query_595464 = newJObject()
  add(path_595463, "resourceGroupName", newJString(resourceGroupName))
  add(query_595464, "api-version", newJString(apiVersion))
  add(path_595463, "name", newJString(name))
  add(path_595463, "subscriptionId", newJString(subscriptionId))
  result = call_595462.call(path_595463, query_595464, nil, nil, nil)

var webAppsGetPrivateAccess* = Call_WebAppsGetPrivateAccess_595454(
    name: "webAppsGetPrivateAccess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    validator: validate_WebAppsGetPrivateAccess_595455, base: "",
    url: url_WebAppsGetPrivateAccess_595456, schemes: {Scheme.Https})
type
  Call_WebAppsListProcesses_595478 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcesses_595480(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcesses_595479(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595481 = path.getOrDefault("resourceGroupName")
  valid_595481 = validateParameter(valid_595481, JString, required = true,
                                 default = nil)
  if valid_595481 != nil:
    section.add "resourceGroupName", valid_595481
  var valid_595482 = path.getOrDefault("name")
  valid_595482 = validateParameter(valid_595482, JString, required = true,
                                 default = nil)
  if valid_595482 != nil:
    section.add "name", valid_595482
  var valid_595483 = path.getOrDefault("subscriptionId")
  valid_595483 = validateParameter(valid_595483, JString, required = true,
                                 default = nil)
  if valid_595483 != nil:
    section.add "subscriptionId", valid_595483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595484 = query.getOrDefault("api-version")
  valid_595484 = validateParameter(valid_595484, JString, required = true,
                                 default = nil)
  if valid_595484 != nil:
    section.add "api-version", valid_595484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595485: Call_WebAppsListProcesses_595478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595485.validator(path, query, header, formData, body)
  let scheme = call_595485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595485.url(scheme.get, call_595485.host, call_595485.base,
                         call_595485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595485, url, valid)

proc call*(call_595486: Call_WebAppsListProcesses_595478;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595487 = newJObject()
  var query_595488 = newJObject()
  add(path_595487, "resourceGroupName", newJString(resourceGroupName))
  add(query_595488, "api-version", newJString(apiVersion))
  add(path_595487, "name", newJString(name))
  add(path_595487, "subscriptionId", newJString(subscriptionId))
  result = call_595486.call(path_595487, query_595488, nil, nil, nil)

var webAppsListProcesses* = Call_WebAppsListProcesses_595478(
    name: "webAppsListProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    validator: validate_WebAppsListProcesses_595479, base: "",
    url: url_WebAppsListProcesses_595480, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcess_595489 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcess_595491(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcess_595490(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595492 = path.getOrDefault("resourceGroupName")
  valid_595492 = validateParameter(valid_595492, JString, required = true,
                                 default = nil)
  if valid_595492 != nil:
    section.add "resourceGroupName", valid_595492
  var valid_595493 = path.getOrDefault("name")
  valid_595493 = validateParameter(valid_595493, JString, required = true,
                                 default = nil)
  if valid_595493 != nil:
    section.add "name", valid_595493
  var valid_595494 = path.getOrDefault("processId")
  valid_595494 = validateParameter(valid_595494, JString, required = true,
                                 default = nil)
  if valid_595494 != nil:
    section.add "processId", valid_595494
  var valid_595495 = path.getOrDefault("subscriptionId")
  valid_595495 = validateParameter(valid_595495, JString, required = true,
                                 default = nil)
  if valid_595495 != nil:
    section.add "subscriptionId", valid_595495
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595496 = query.getOrDefault("api-version")
  valid_595496 = validateParameter(valid_595496, JString, required = true,
                                 default = nil)
  if valid_595496 != nil:
    section.add "api-version", valid_595496
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595497: Call_WebAppsGetProcess_595489; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595497.validator(path, query, header, formData, body)
  let scheme = call_595497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595497.url(scheme.get, call_595497.host, call_595497.base,
                         call_595497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595497, url, valid)

proc call*(call_595498: Call_WebAppsGetProcess_595489; resourceGroupName: string;
          apiVersion: string; name: string; processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595499 = newJObject()
  var query_595500 = newJObject()
  add(path_595499, "resourceGroupName", newJString(resourceGroupName))
  add(query_595500, "api-version", newJString(apiVersion))
  add(path_595499, "name", newJString(name))
  add(path_595499, "processId", newJString(processId))
  add(path_595499, "subscriptionId", newJString(subscriptionId))
  result = call_595498.call(path_595499, query_595500, nil, nil, nil)

var webAppsGetProcess* = Call_WebAppsGetProcess_595489(name: "webAppsGetProcess",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsGetProcess_595490, base: "",
    url: url_WebAppsGetProcess_595491, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcess_595501 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteProcess_595503(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcess_595502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595504 = path.getOrDefault("resourceGroupName")
  valid_595504 = validateParameter(valid_595504, JString, required = true,
                                 default = nil)
  if valid_595504 != nil:
    section.add "resourceGroupName", valid_595504
  var valid_595505 = path.getOrDefault("name")
  valid_595505 = validateParameter(valid_595505, JString, required = true,
                                 default = nil)
  if valid_595505 != nil:
    section.add "name", valid_595505
  var valid_595506 = path.getOrDefault("processId")
  valid_595506 = validateParameter(valid_595506, JString, required = true,
                                 default = nil)
  if valid_595506 != nil:
    section.add "processId", valid_595506
  var valid_595507 = path.getOrDefault("subscriptionId")
  valid_595507 = validateParameter(valid_595507, JString, required = true,
                                 default = nil)
  if valid_595507 != nil:
    section.add "subscriptionId", valid_595507
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595508 = query.getOrDefault("api-version")
  valid_595508 = validateParameter(valid_595508, JString, required = true,
                                 default = nil)
  if valid_595508 != nil:
    section.add "api-version", valid_595508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595509: Call_WebAppsDeleteProcess_595501; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_595509.validator(path, query, header, formData, body)
  let scheme = call_595509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595509.url(scheme.get, call_595509.host, call_595509.base,
                         call_595509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595509, url, valid)

proc call*(call_595510: Call_WebAppsDeleteProcess_595501;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595511 = newJObject()
  var query_595512 = newJObject()
  add(path_595511, "resourceGroupName", newJString(resourceGroupName))
  add(query_595512, "api-version", newJString(apiVersion))
  add(path_595511, "name", newJString(name))
  add(path_595511, "processId", newJString(processId))
  add(path_595511, "subscriptionId", newJString(subscriptionId))
  result = call_595510.call(path_595511, query_595512, nil, nil, nil)

var webAppsDeleteProcess* = Call_WebAppsDeleteProcess_595501(
    name: "webAppsDeleteProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsDeleteProcess_595502, base: "",
    url: url_WebAppsDeleteProcess_595503, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDump_595513 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessDump_595515(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDump_595514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595516 = path.getOrDefault("resourceGroupName")
  valid_595516 = validateParameter(valid_595516, JString, required = true,
                                 default = nil)
  if valid_595516 != nil:
    section.add "resourceGroupName", valid_595516
  var valid_595517 = path.getOrDefault("name")
  valid_595517 = validateParameter(valid_595517, JString, required = true,
                                 default = nil)
  if valid_595517 != nil:
    section.add "name", valid_595517
  var valid_595518 = path.getOrDefault("processId")
  valid_595518 = validateParameter(valid_595518, JString, required = true,
                                 default = nil)
  if valid_595518 != nil:
    section.add "processId", valid_595518
  var valid_595519 = path.getOrDefault("subscriptionId")
  valid_595519 = validateParameter(valid_595519, JString, required = true,
                                 default = nil)
  if valid_595519 != nil:
    section.add "subscriptionId", valid_595519
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595520 = query.getOrDefault("api-version")
  valid_595520 = validateParameter(valid_595520, JString, required = true,
                                 default = nil)
  if valid_595520 != nil:
    section.add "api-version", valid_595520
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595521: Call_WebAppsGetProcessDump_595513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595521.validator(path, query, header, formData, body)
  let scheme = call_595521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595521.url(scheme.get, call_595521.host, call_595521.base,
                         call_595521.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595521, url, valid)

proc call*(call_595522: Call_WebAppsGetProcessDump_595513;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595523 = newJObject()
  var query_595524 = newJObject()
  add(path_595523, "resourceGroupName", newJString(resourceGroupName))
  add(query_595524, "api-version", newJString(apiVersion))
  add(path_595523, "name", newJString(name))
  add(path_595523, "processId", newJString(processId))
  add(path_595523, "subscriptionId", newJString(subscriptionId))
  result = call_595522.call(path_595523, query_595524, nil, nil, nil)

var webAppsGetProcessDump* = Call_WebAppsGetProcessDump_595513(
    name: "webAppsGetProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDump_595514, base: "",
    url: url_WebAppsGetProcessDump_595515, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModules_595525 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessModules_595527(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModules_595526(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595528 = path.getOrDefault("resourceGroupName")
  valid_595528 = validateParameter(valid_595528, JString, required = true,
                                 default = nil)
  if valid_595528 != nil:
    section.add "resourceGroupName", valid_595528
  var valid_595529 = path.getOrDefault("name")
  valid_595529 = validateParameter(valid_595529, JString, required = true,
                                 default = nil)
  if valid_595529 != nil:
    section.add "name", valid_595529
  var valid_595530 = path.getOrDefault("processId")
  valid_595530 = validateParameter(valid_595530, JString, required = true,
                                 default = nil)
  if valid_595530 != nil:
    section.add "processId", valid_595530
  var valid_595531 = path.getOrDefault("subscriptionId")
  valid_595531 = validateParameter(valid_595531, JString, required = true,
                                 default = nil)
  if valid_595531 != nil:
    section.add "subscriptionId", valid_595531
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595532 = query.getOrDefault("api-version")
  valid_595532 = validateParameter(valid_595532, JString, required = true,
                                 default = nil)
  if valid_595532 != nil:
    section.add "api-version", valid_595532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595533: Call_WebAppsListProcessModules_595525; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595533.validator(path, query, header, formData, body)
  let scheme = call_595533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595533.url(scheme.get, call_595533.host, call_595533.base,
                         call_595533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595533, url, valid)

proc call*(call_595534: Call_WebAppsListProcessModules_595525;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595535 = newJObject()
  var query_595536 = newJObject()
  add(path_595535, "resourceGroupName", newJString(resourceGroupName))
  add(query_595536, "api-version", newJString(apiVersion))
  add(path_595535, "name", newJString(name))
  add(path_595535, "processId", newJString(processId))
  add(path_595535, "subscriptionId", newJString(subscriptionId))
  result = call_595534.call(path_595535, query_595536, nil, nil, nil)

var webAppsListProcessModules* = Call_WebAppsListProcessModules_595525(
    name: "webAppsListProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModules_595526, base: "",
    url: url_WebAppsListProcessModules_595527, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModule_595537 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessModule_595539(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModule_595538(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595540 = path.getOrDefault("resourceGroupName")
  valid_595540 = validateParameter(valid_595540, JString, required = true,
                                 default = nil)
  if valid_595540 != nil:
    section.add "resourceGroupName", valid_595540
  var valid_595541 = path.getOrDefault("name")
  valid_595541 = validateParameter(valid_595541, JString, required = true,
                                 default = nil)
  if valid_595541 != nil:
    section.add "name", valid_595541
  var valid_595542 = path.getOrDefault("processId")
  valid_595542 = validateParameter(valid_595542, JString, required = true,
                                 default = nil)
  if valid_595542 != nil:
    section.add "processId", valid_595542
  var valid_595543 = path.getOrDefault("subscriptionId")
  valid_595543 = validateParameter(valid_595543, JString, required = true,
                                 default = nil)
  if valid_595543 != nil:
    section.add "subscriptionId", valid_595543
  var valid_595544 = path.getOrDefault("baseAddress")
  valid_595544 = validateParameter(valid_595544, JString, required = true,
                                 default = nil)
  if valid_595544 != nil:
    section.add "baseAddress", valid_595544
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595545 = query.getOrDefault("api-version")
  valid_595545 = validateParameter(valid_595545, JString, required = true,
                                 default = nil)
  if valid_595545 != nil:
    section.add "api-version", valid_595545
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595546: Call_WebAppsGetProcessModule_595537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595546.validator(path, query, header, formData, body)
  let scheme = call_595546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595546.url(scheme.get, call_595546.host, call_595546.base,
                         call_595546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595546, url, valid)

proc call*(call_595547: Call_WebAppsGetProcessModule_595537;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_595548 = newJObject()
  var query_595549 = newJObject()
  add(path_595548, "resourceGroupName", newJString(resourceGroupName))
  add(query_595549, "api-version", newJString(apiVersion))
  add(path_595548, "name", newJString(name))
  add(path_595548, "processId", newJString(processId))
  add(path_595548, "subscriptionId", newJString(subscriptionId))
  add(path_595548, "baseAddress", newJString(baseAddress))
  result = call_595547.call(path_595548, query_595549, nil, nil, nil)

var webAppsGetProcessModule* = Call_WebAppsGetProcessModule_595537(
    name: "webAppsGetProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModule_595538, base: "",
    url: url_WebAppsGetProcessModule_595539, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreads_595550 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessThreads_595552(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreads_595551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595553 = path.getOrDefault("resourceGroupName")
  valid_595553 = validateParameter(valid_595553, JString, required = true,
                                 default = nil)
  if valid_595553 != nil:
    section.add "resourceGroupName", valid_595553
  var valid_595554 = path.getOrDefault("name")
  valid_595554 = validateParameter(valid_595554, JString, required = true,
                                 default = nil)
  if valid_595554 != nil:
    section.add "name", valid_595554
  var valid_595555 = path.getOrDefault("processId")
  valid_595555 = validateParameter(valid_595555, JString, required = true,
                                 default = nil)
  if valid_595555 != nil:
    section.add "processId", valid_595555
  var valid_595556 = path.getOrDefault("subscriptionId")
  valid_595556 = validateParameter(valid_595556, JString, required = true,
                                 default = nil)
  if valid_595556 != nil:
    section.add "subscriptionId", valid_595556
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595557 = query.getOrDefault("api-version")
  valid_595557 = validateParameter(valid_595557, JString, required = true,
                                 default = nil)
  if valid_595557 != nil:
    section.add "api-version", valid_595557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595558: Call_WebAppsListProcessThreads_595550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595558.validator(path, query, header, formData, body)
  let scheme = call_595558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595558.url(scheme.get, call_595558.host, call_595558.base,
                         call_595558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595558, url, valid)

proc call*(call_595559: Call_WebAppsListProcessThreads_595550;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595560 = newJObject()
  var query_595561 = newJObject()
  add(path_595560, "resourceGroupName", newJString(resourceGroupName))
  add(query_595561, "api-version", newJString(apiVersion))
  add(path_595560, "name", newJString(name))
  add(path_595560, "processId", newJString(processId))
  add(path_595560, "subscriptionId", newJString(subscriptionId))
  result = call_595559.call(path_595560, query_595561, nil, nil, nil)

var webAppsListProcessThreads* = Call_WebAppsListProcessThreads_595550(
    name: "webAppsListProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreads_595551, base: "",
    url: url_WebAppsListProcessThreads_595552, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThread_595562 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessThread_595564(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThread_595563(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595565 = path.getOrDefault("resourceGroupName")
  valid_595565 = validateParameter(valid_595565, JString, required = true,
                                 default = nil)
  if valid_595565 != nil:
    section.add "resourceGroupName", valid_595565
  var valid_595566 = path.getOrDefault("name")
  valid_595566 = validateParameter(valid_595566, JString, required = true,
                                 default = nil)
  if valid_595566 != nil:
    section.add "name", valid_595566
  var valid_595567 = path.getOrDefault("processId")
  valid_595567 = validateParameter(valid_595567, JString, required = true,
                                 default = nil)
  if valid_595567 != nil:
    section.add "processId", valid_595567
  var valid_595568 = path.getOrDefault("subscriptionId")
  valid_595568 = validateParameter(valid_595568, JString, required = true,
                                 default = nil)
  if valid_595568 != nil:
    section.add "subscriptionId", valid_595568
  var valid_595569 = path.getOrDefault("threadId")
  valid_595569 = validateParameter(valid_595569, JString, required = true,
                                 default = nil)
  if valid_595569 != nil:
    section.add "threadId", valid_595569
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595570 = query.getOrDefault("api-version")
  valid_595570 = validateParameter(valid_595570, JString, required = true,
                                 default = nil)
  if valid_595570 != nil:
    section.add "api-version", valid_595570
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595571: Call_WebAppsGetProcessThread_595562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_595571.validator(path, query, header, formData, body)
  let scheme = call_595571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595571.url(scheme.get, call_595571.host, call_595571.base,
                         call_595571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595571, url, valid)

proc call*(call_595572: Call_WebAppsGetProcessThread_595562;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_595573 = newJObject()
  var query_595574 = newJObject()
  add(path_595573, "resourceGroupName", newJString(resourceGroupName))
  add(query_595574, "api-version", newJString(apiVersion))
  add(path_595573, "name", newJString(name))
  add(path_595573, "processId", newJString(processId))
  add(path_595573, "subscriptionId", newJString(subscriptionId))
  add(path_595573, "threadId", newJString(threadId))
  result = call_595572.call(path_595573, query_595574, nil, nil, nil)

var webAppsGetProcessThread* = Call_WebAppsGetProcessThread_595562(
    name: "webAppsGetProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThread_595563, base: "",
    url: url_WebAppsGetProcessThread_595564, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificates_595575 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublicCertificates_595577(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificates_595576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595578 = path.getOrDefault("resourceGroupName")
  valid_595578 = validateParameter(valid_595578, JString, required = true,
                                 default = nil)
  if valid_595578 != nil:
    section.add "resourceGroupName", valid_595578
  var valid_595579 = path.getOrDefault("name")
  valid_595579 = validateParameter(valid_595579, JString, required = true,
                                 default = nil)
  if valid_595579 != nil:
    section.add "name", valid_595579
  var valid_595580 = path.getOrDefault("subscriptionId")
  valid_595580 = validateParameter(valid_595580, JString, required = true,
                                 default = nil)
  if valid_595580 != nil:
    section.add "subscriptionId", valid_595580
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595581 = query.getOrDefault("api-version")
  valid_595581 = validateParameter(valid_595581, JString, required = true,
                                 default = nil)
  if valid_595581 != nil:
    section.add "api-version", valid_595581
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595582: Call_WebAppsListPublicCertificates_595575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_595582.validator(path, query, header, formData, body)
  let scheme = call_595582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595582.url(scheme.get, call_595582.host, call_595582.base,
                         call_595582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595582, url, valid)

proc call*(call_595583: Call_WebAppsListPublicCertificates_595575;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificates
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595584 = newJObject()
  var query_595585 = newJObject()
  add(path_595584, "resourceGroupName", newJString(resourceGroupName))
  add(query_595585, "api-version", newJString(apiVersion))
  add(path_595584, "name", newJString(name))
  add(path_595584, "subscriptionId", newJString(subscriptionId))
  result = call_595583.call(path_595584, query_595585, nil, nil, nil)

var webAppsListPublicCertificates* = Call_WebAppsListPublicCertificates_595575(
    name: "webAppsListPublicCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    validator: validate_WebAppsListPublicCertificates_595576, base: "",
    url: url_WebAppsListPublicCertificates_595577, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificate_595598 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdatePublicCertificate_595600(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificate_595599(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595601 = path.getOrDefault("resourceGroupName")
  valid_595601 = validateParameter(valid_595601, JString, required = true,
                                 default = nil)
  if valid_595601 != nil:
    section.add "resourceGroupName", valid_595601
  var valid_595602 = path.getOrDefault("name")
  valid_595602 = validateParameter(valid_595602, JString, required = true,
                                 default = nil)
  if valid_595602 != nil:
    section.add "name", valid_595602
  var valid_595603 = path.getOrDefault("subscriptionId")
  valid_595603 = validateParameter(valid_595603, JString, required = true,
                                 default = nil)
  if valid_595603 != nil:
    section.add "subscriptionId", valid_595603
  var valid_595604 = path.getOrDefault("publicCertificateName")
  valid_595604 = validateParameter(valid_595604, JString, required = true,
                                 default = nil)
  if valid_595604 != nil:
    section.add "publicCertificateName", valid_595604
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595605 = query.getOrDefault("api-version")
  valid_595605 = validateParameter(valid_595605, JString, required = true,
                                 default = nil)
  if valid_595605 != nil:
    section.add "api-version", valid_595605
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595607: Call_WebAppsCreateOrUpdatePublicCertificate_595598;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_595607.validator(path, query, header, formData, body)
  let scheme = call_595607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595607.url(scheme.get, call_595607.host, call_595607.base,
                         call_595607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595607, url, valid)

proc call*(call_595608: Call_WebAppsCreateOrUpdatePublicCertificate_595598;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificate
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_595609 = newJObject()
  var query_595610 = newJObject()
  var body_595611 = newJObject()
  add(path_595609, "resourceGroupName", newJString(resourceGroupName))
  add(query_595610, "api-version", newJString(apiVersion))
  add(path_595609, "name", newJString(name))
  add(path_595609, "subscriptionId", newJString(subscriptionId))
  add(path_595609, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_595611 = publicCertificate
  result = call_595608.call(path_595609, query_595610, nil, nil, body_595611)

var webAppsCreateOrUpdatePublicCertificate* = Call_WebAppsCreateOrUpdatePublicCertificate_595598(
    name: "webAppsCreateOrUpdatePublicCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificate_595599, base: "",
    url: url_WebAppsCreateOrUpdatePublicCertificate_595600,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificate_595586 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPublicCertificate_595588(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificate_595587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595589 = path.getOrDefault("resourceGroupName")
  valid_595589 = validateParameter(valid_595589, JString, required = true,
                                 default = nil)
  if valid_595589 != nil:
    section.add "resourceGroupName", valid_595589
  var valid_595590 = path.getOrDefault("name")
  valid_595590 = validateParameter(valid_595590, JString, required = true,
                                 default = nil)
  if valid_595590 != nil:
    section.add "name", valid_595590
  var valid_595591 = path.getOrDefault("subscriptionId")
  valid_595591 = validateParameter(valid_595591, JString, required = true,
                                 default = nil)
  if valid_595591 != nil:
    section.add "subscriptionId", valid_595591
  var valid_595592 = path.getOrDefault("publicCertificateName")
  valid_595592 = validateParameter(valid_595592, JString, required = true,
                                 default = nil)
  if valid_595592 != nil:
    section.add "publicCertificateName", valid_595592
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595593 = query.getOrDefault("api-version")
  valid_595593 = validateParameter(valid_595593, JString, required = true,
                                 default = nil)
  if valid_595593 != nil:
    section.add "api-version", valid_595593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595594: Call_WebAppsGetPublicCertificate_595586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_595594.validator(path, query, header, formData, body)
  let scheme = call_595594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595594.url(scheme.get, call_595594.host, call_595594.base,
                         call_595594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595594, url, valid)

proc call*(call_595595: Call_WebAppsGetPublicCertificate_595586;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificate
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_595596 = newJObject()
  var query_595597 = newJObject()
  add(path_595596, "resourceGroupName", newJString(resourceGroupName))
  add(query_595597, "api-version", newJString(apiVersion))
  add(path_595596, "name", newJString(name))
  add(path_595596, "subscriptionId", newJString(subscriptionId))
  add(path_595596, "publicCertificateName", newJString(publicCertificateName))
  result = call_595595.call(path_595596, query_595597, nil, nil, nil)

var webAppsGetPublicCertificate* = Call_WebAppsGetPublicCertificate_595586(
    name: "webAppsGetPublicCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificate_595587, base: "",
    url: url_WebAppsGetPublicCertificate_595588, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificate_595612 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePublicCertificate_595614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificate_595613(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595615 = path.getOrDefault("resourceGroupName")
  valid_595615 = validateParameter(valid_595615, JString, required = true,
                                 default = nil)
  if valid_595615 != nil:
    section.add "resourceGroupName", valid_595615
  var valid_595616 = path.getOrDefault("name")
  valid_595616 = validateParameter(valid_595616, JString, required = true,
                                 default = nil)
  if valid_595616 != nil:
    section.add "name", valid_595616
  var valid_595617 = path.getOrDefault("subscriptionId")
  valid_595617 = validateParameter(valid_595617, JString, required = true,
                                 default = nil)
  if valid_595617 != nil:
    section.add "subscriptionId", valid_595617
  var valid_595618 = path.getOrDefault("publicCertificateName")
  valid_595618 = validateParameter(valid_595618, JString, required = true,
                                 default = nil)
  if valid_595618 != nil:
    section.add "publicCertificateName", valid_595618
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595619 = query.getOrDefault("api-version")
  valid_595619 = validateParameter(valid_595619, JString, required = true,
                                 default = nil)
  if valid_595619 != nil:
    section.add "api-version", valid_595619
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595620: Call_WebAppsDeletePublicCertificate_595612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_595620.validator(path, query, header, formData, body)
  let scheme = call_595620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595620.url(scheme.get, call_595620.host, call_595620.base,
                         call_595620.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595620, url, valid)

proc call*(call_595621: Call_WebAppsDeletePublicCertificate_595612;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificate
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_595622 = newJObject()
  var query_595623 = newJObject()
  add(path_595622, "resourceGroupName", newJString(resourceGroupName))
  add(query_595623, "api-version", newJString(apiVersion))
  add(path_595622, "name", newJString(name))
  add(path_595622, "subscriptionId", newJString(subscriptionId))
  add(path_595622, "publicCertificateName", newJString(publicCertificateName))
  result = call_595621.call(path_595622, query_595623, nil, nil, nil)

var webAppsDeletePublicCertificate* = Call_WebAppsDeletePublicCertificate_595612(
    name: "webAppsDeletePublicCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificate_595613, base: "",
    url: url_WebAppsDeletePublicCertificate_595614, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecrets_595624 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingProfileXmlWithSecrets_595626(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecrets_595625(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595627 = path.getOrDefault("resourceGroupName")
  valid_595627 = validateParameter(valid_595627, JString, required = true,
                                 default = nil)
  if valid_595627 != nil:
    section.add "resourceGroupName", valid_595627
  var valid_595628 = path.getOrDefault("name")
  valid_595628 = validateParameter(valid_595628, JString, required = true,
                                 default = nil)
  if valid_595628 != nil:
    section.add "name", valid_595628
  var valid_595629 = path.getOrDefault("subscriptionId")
  valid_595629 = validateParameter(valid_595629, JString, required = true,
                                 default = nil)
  if valid_595629 != nil:
    section.add "subscriptionId", valid_595629
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595630 = query.getOrDefault("api-version")
  valid_595630 = validateParameter(valid_595630, JString, required = true,
                                 default = nil)
  if valid_595630 != nil:
    section.add "api-version", valid_595630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595632: Call_WebAppsListPublishingProfileXmlWithSecrets_595624;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_595632.validator(path, query, header, formData, body)
  let scheme = call_595632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595632.url(scheme.get, call_595632.host, call_595632.base,
                         call_595632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595632, url, valid)

proc call*(call_595633: Call_WebAppsListPublishingProfileXmlWithSecrets_595624;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecrets
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_595634 = newJObject()
  var query_595635 = newJObject()
  var body_595636 = newJObject()
  add(path_595634, "resourceGroupName", newJString(resourceGroupName))
  add(query_595635, "api-version", newJString(apiVersion))
  add(path_595634, "name", newJString(name))
  add(path_595634, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_595636 = publishingProfileOptions
  result = call_595633.call(path_595634, query_595635, nil, nil, body_595636)

var webAppsListPublishingProfileXmlWithSecrets* = Call_WebAppsListPublishingProfileXmlWithSecrets_595624(
    name: "webAppsListPublishingProfileXmlWithSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecrets_595625,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecrets_595626,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetProductionSlotConfig_595637 = ref object of OpenApiRestCall_593437
proc url_WebAppsResetProductionSlotConfig_595639(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetProductionSlotConfig_595638(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595640 = path.getOrDefault("resourceGroupName")
  valid_595640 = validateParameter(valid_595640, JString, required = true,
                                 default = nil)
  if valid_595640 != nil:
    section.add "resourceGroupName", valid_595640
  var valid_595641 = path.getOrDefault("name")
  valid_595641 = validateParameter(valid_595641, JString, required = true,
                                 default = nil)
  if valid_595641 != nil:
    section.add "name", valid_595641
  var valid_595642 = path.getOrDefault("subscriptionId")
  valid_595642 = validateParameter(valid_595642, JString, required = true,
                                 default = nil)
  if valid_595642 != nil:
    section.add "subscriptionId", valid_595642
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595643 = query.getOrDefault("api-version")
  valid_595643 = validateParameter(valid_595643, JString, required = true,
                                 default = nil)
  if valid_595643 != nil:
    section.add "api-version", valid_595643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595644: Call_WebAppsResetProductionSlotConfig_595637;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_595644.validator(path, query, header, formData, body)
  let scheme = call_595644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595644.url(scheme.get, call_595644.host, call_595644.base,
                         call_595644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595644, url, valid)

proc call*(call_595645: Call_WebAppsResetProductionSlotConfig_595637;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsResetProductionSlotConfig
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595646 = newJObject()
  var query_595647 = newJObject()
  add(path_595646, "resourceGroupName", newJString(resourceGroupName))
  add(query_595647, "api-version", newJString(apiVersion))
  add(path_595646, "name", newJString(name))
  add(path_595646, "subscriptionId", newJString(subscriptionId))
  result = call_595645.call(path_595646, query_595647, nil, nil, nil)

var webAppsResetProductionSlotConfig* = Call_WebAppsResetProductionSlotConfig_595637(
    name: "webAppsResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_WebAppsResetProductionSlotConfig_595638, base: "",
    url: url_WebAppsResetProductionSlotConfig_595639, schemes: {Scheme.Https})
type
  Call_WebAppsRestart_595648 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestart_595650(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestart_595649(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595651 = path.getOrDefault("resourceGroupName")
  valid_595651 = validateParameter(valid_595651, JString, required = true,
                                 default = nil)
  if valid_595651 != nil:
    section.add "resourceGroupName", valid_595651
  var valid_595652 = path.getOrDefault("name")
  valid_595652 = validateParameter(valid_595652, JString, required = true,
                                 default = nil)
  if valid_595652 != nil:
    section.add "name", valid_595652
  var valid_595653 = path.getOrDefault("subscriptionId")
  valid_595653 = validateParameter(valid_595653, JString, required = true,
                                 default = nil)
  if valid_595653 != nil:
    section.add "subscriptionId", valid_595653
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595654 = query.getOrDefault("api-version")
  valid_595654 = validateParameter(valid_595654, JString, required = true,
                                 default = nil)
  if valid_595654 != nil:
    section.add "api-version", valid_595654
  var valid_595655 = query.getOrDefault("synchronous")
  valid_595655 = validateParameter(valid_595655, JBool, required = false, default = nil)
  if valid_595655 != nil:
    section.add "synchronous", valid_595655
  var valid_595656 = query.getOrDefault("softRestart")
  valid_595656 = validateParameter(valid_595656, JBool, required = false, default = nil)
  if valid_595656 != nil:
    section.add "softRestart", valid_595656
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595657: Call_WebAppsRestart_595648; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_595657.validator(path, query, header, formData, body)
  let scheme = call_595657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595657.url(scheme.get, call_595657.host, call_595657.base,
                         call_595657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595657, url, valid)

proc call*(call_595658: Call_WebAppsRestart_595648; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestart
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_595659 = newJObject()
  var query_595660 = newJObject()
  add(path_595659, "resourceGroupName", newJString(resourceGroupName))
  add(query_595660, "api-version", newJString(apiVersion))
  add(path_595659, "name", newJString(name))
  add(path_595659, "subscriptionId", newJString(subscriptionId))
  add(query_595660, "synchronous", newJBool(synchronous))
  add(query_595660, "softRestart", newJBool(softRestart))
  result = call_595658.call(path_595659, query_595660, nil, nil, nil)

var webAppsRestart* = Call_WebAppsRestart_595648(name: "webAppsRestart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_WebAppsRestart_595649, base: "", url: url_WebAppsRestart_595650,
    schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromBackupBlob_595661 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreFromBackupBlob_595663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreFromBackupBlob")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromBackupBlob_595662(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595664 = path.getOrDefault("resourceGroupName")
  valid_595664 = validateParameter(valid_595664, JString, required = true,
                                 default = nil)
  if valid_595664 != nil:
    section.add "resourceGroupName", valid_595664
  var valid_595665 = path.getOrDefault("name")
  valid_595665 = validateParameter(valid_595665, JString, required = true,
                                 default = nil)
  if valid_595665 != nil:
    section.add "name", valid_595665
  var valid_595666 = path.getOrDefault("subscriptionId")
  valid_595666 = validateParameter(valid_595666, JString, required = true,
                                 default = nil)
  if valid_595666 != nil:
    section.add "subscriptionId", valid_595666
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595667 = query.getOrDefault("api-version")
  valid_595667 = validateParameter(valid_595667, JString, required = true,
                                 default = nil)
  if valid_595667 != nil:
    section.add "api-version", valid_595667
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595669: Call_WebAppsRestoreFromBackupBlob_595661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  let valid = call_595669.validator(path, query, header, formData, body)
  let scheme = call_595669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595669.url(scheme.get, call_595669.host, call_595669.base,
                         call_595669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595669, url, valid)

proc call*(call_595670: Call_WebAppsRestoreFromBackupBlob_595661;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsRestoreFromBackupBlob
  ## Restores an app from a backup blob in Azure Storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_595671 = newJObject()
  var query_595672 = newJObject()
  var body_595673 = newJObject()
  add(path_595671, "resourceGroupName", newJString(resourceGroupName))
  add(query_595672, "api-version", newJString(apiVersion))
  add(path_595671, "name", newJString(name))
  add(path_595671, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595673 = request
  result = call_595670.call(path_595671, query_595672, nil, nil, body_595673)

var webAppsRestoreFromBackupBlob* = Call_WebAppsRestoreFromBackupBlob_595661(
    name: "webAppsRestoreFromBackupBlob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
    validator: validate_WebAppsRestoreFromBackupBlob_595662, base: "",
    url: url_WebAppsRestoreFromBackupBlob_595663, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromDeletedApp_595674 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreFromDeletedApp_595676(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreFromDeletedApp")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromDeletedApp_595675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a deleted web app to this web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595677 = path.getOrDefault("resourceGroupName")
  valid_595677 = validateParameter(valid_595677, JString, required = true,
                                 default = nil)
  if valid_595677 != nil:
    section.add "resourceGroupName", valid_595677
  var valid_595678 = path.getOrDefault("name")
  valid_595678 = validateParameter(valid_595678, JString, required = true,
                                 default = nil)
  if valid_595678 != nil:
    section.add "name", valid_595678
  var valid_595679 = path.getOrDefault("subscriptionId")
  valid_595679 = validateParameter(valid_595679, JString, required = true,
                                 default = nil)
  if valid_595679 != nil:
    section.add "subscriptionId", valid_595679
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595680 = query.getOrDefault("api-version")
  valid_595680 = validateParameter(valid_595680, JString, required = true,
                                 default = nil)
  if valid_595680 != nil:
    section.add "api-version", valid_595680
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595682: Call_WebAppsRestoreFromDeletedApp_595674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a deleted web app to this web app.
  ## 
  let valid = call_595682.validator(path, query, header, formData, body)
  let scheme = call_595682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595682.url(scheme.get, call_595682.host, call_595682.base,
                         call_595682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595682, url, valid)

proc call*(call_595683: Call_WebAppsRestoreFromDeletedApp_595674;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreFromDeletedApp
  ## Restores a deleted web app to this web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  var path_595684 = newJObject()
  var query_595685 = newJObject()
  var body_595686 = newJObject()
  add(path_595684, "resourceGroupName", newJString(resourceGroupName))
  add(query_595685, "api-version", newJString(apiVersion))
  add(path_595684, "name", newJString(name))
  add(path_595684, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_595686 = restoreRequest
  result = call_595683.call(path_595684, query_595685, nil, nil, body_595686)

var webAppsRestoreFromDeletedApp* = Call_WebAppsRestoreFromDeletedApp_595674(
    name: "webAppsRestoreFromDeletedApp", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
    validator: validate_WebAppsRestoreFromDeletedApp_595675, base: "",
    url: url_WebAppsRestoreFromDeletedApp_595676, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSnapshot_595687 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreSnapshot_595689(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreSnapshot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSnapshot_595688(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app from a snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595690 = path.getOrDefault("resourceGroupName")
  valid_595690 = validateParameter(valid_595690, JString, required = true,
                                 default = nil)
  if valid_595690 != nil:
    section.add "resourceGroupName", valid_595690
  var valid_595691 = path.getOrDefault("name")
  valid_595691 = validateParameter(valid_595691, JString, required = true,
                                 default = nil)
  if valid_595691 != nil:
    section.add "name", valid_595691
  var valid_595692 = path.getOrDefault("subscriptionId")
  valid_595692 = validateParameter(valid_595692, JString, required = true,
                                 default = nil)
  if valid_595692 != nil:
    section.add "subscriptionId", valid_595692
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595693 = query.getOrDefault("api-version")
  valid_595693 = validateParameter(valid_595693, JString, required = true,
                                 default = nil)
  if valid_595693 != nil:
    section.add "api-version", valid_595693
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595695: Call_WebAppsRestoreSnapshot_595687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app from a snapshot.
  ## 
  let valid = call_595695.validator(path, query, header, formData, body)
  let scheme = call_595695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595695.url(scheme.get, call_595695.host, call_595695.base,
                         call_595695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595695, url, valid)

proc call*(call_595696: Call_WebAppsRestoreSnapshot_595687;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreSnapshot
  ## Restores a web app from a snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_595697 = newJObject()
  var query_595698 = newJObject()
  var body_595699 = newJObject()
  add(path_595697, "resourceGroupName", newJString(resourceGroupName))
  add(query_595698, "api-version", newJString(apiVersion))
  add(path_595697, "name", newJString(name))
  add(path_595697, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_595699 = restoreRequest
  result = call_595696.call(path_595697, query_595698, nil, nil, body_595699)

var webAppsRestoreSnapshot* = Call_WebAppsRestoreSnapshot_595687(
    name: "webAppsRestoreSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
    validator: validate_WebAppsRestoreSnapshot_595688, base: "",
    url: url_WebAppsRestoreSnapshot_595689, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensions_595700 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSiteExtensions_595702(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensions_595701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595703 = path.getOrDefault("resourceGroupName")
  valid_595703 = validateParameter(valid_595703, JString, required = true,
                                 default = nil)
  if valid_595703 != nil:
    section.add "resourceGroupName", valid_595703
  var valid_595704 = path.getOrDefault("name")
  valid_595704 = validateParameter(valid_595704, JString, required = true,
                                 default = nil)
  if valid_595704 != nil:
    section.add "name", valid_595704
  var valid_595705 = path.getOrDefault("subscriptionId")
  valid_595705 = validateParameter(valid_595705, JString, required = true,
                                 default = nil)
  if valid_595705 != nil:
    section.add "subscriptionId", valid_595705
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595706 = query.getOrDefault("api-version")
  valid_595706 = validateParameter(valid_595706, JString, required = true,
                                 default = nil)
  if valid_595706 != nil:
    section.add "api-version", valid_595706
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595707: Call_WebAppsListSiteExtensions_595700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  let valid = call_595707.validator(path, query, header, formData, body)
  let scheme = call_595707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595707.url(scheme.get, call_595707.host, call_595707.base,
                         call_595707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595707, url, valid)

proc call*(call_595708: Call_WebAppsListSiteExtensions_595700;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensions
  ## Get list of siteextensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595709 = newJObject()
  var query_595710 = newJObject()
  add(path_595709, "resourceGroupName", newJString(resourceGroupName))
  add(query_595710, "api-version", newJString(apiVersion))
  add(path_595709, "name", newJString(name))
  add(path_595709, "subscriptionId", newJString(subscriptionId))
  result = call_595708.call(path_595709, query_595710, nil, nil, nil)

var webAppsListSiteExtensions* = Call_WebAppsListSiteExtensions_595700(
    name: "webAppsListSiteExtensions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    validator: validate_WebAppsListSiteExtensions_595701, base: "",
    url: url_WebAppsListSiteExtensions_595702, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtension_595723 = ref object of OpenApiRestCall_593437
proc url_WebAppsInstallSiteExtension_595725(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtension_595724(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595726 = path.getOrDefault("resourceGroupName")
  valid_595726 = validateParameter(valid_595726, JString, required = true,
                                 default = nil)
  if valid_595726 != nil:
    section.add "resourceGroupName", valid_595726
  var valid_595727 = path.getOrDefault("name")
  valid_595727 = validateParameter(valid_595727, JString, required = true,
                                 default = nil)
  if valid_595727 != nil:
    section.add "name", valid_595727
  var valid_595728 = path.getOrDefault("subscriptionId")
  valid_595728 = validateParameter(valid_595728, JString, required = true,
                                 default = nil)
  if valid_595728 != nil:
    section.add "subscriptionId", valid_595728
  var valid_595729 = path.getOrDefault("siteExtensionId")
  valid_595729 = validateParameter(valid_595729, JString, required = true,
                                 default = nil)
  if valid_595729 != nil:
    section.add "siteExtensionId", valid_595729
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595730 = query.getOrDefault("api-version")
  valid_595730 = validateParameter(valid_595730, JString, required = true,
                                 default = nil)
  if valid_595730 != nil:
    section.add "api-version", valid_595730
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595731: Call_WebAppsInstallSiteExtension_595723; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_595731.validator(path, query, header, formData, body)
  let scheme = call_595731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595731.url(scheme.get, call_595731.host, call_595731.base,
                         call_595731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595731, url, valid)

proc call*(call_595732: Call_WebAppsInstallSiteExtension_595723;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtension
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_595733 = newJObject()
  var query_595734 = newJObject()
  add(path_595733, "resourceGroupName", newJString(resourceGroupName))
  add(query_595734, "api-version", newJString(apiVersion))
  add(path_595733, "name", newJString(name))
  add(path_595733, "subscriptionId", newJString(subscriptionId))
  add(path_595733, "siteExtensionId", newJString(siteExtensionId))
  result = call_595732.call(path_595733, query_595734, nil, nil, nil)

var webAppsInstallSiteExtension* = Call_WebAppsInstallSiteExtension_595723(
    name: "webAppsInstallSiteExtension", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtension_595724, base: "",
    url: url_WebAppsInstallSiteExtension_595725, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtension_595711 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSiteExtension_595713(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtension_595712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595714 = path.getOrDefault("resourceGroupName")
  valid_595714 = validateParameter(valid_595714, JString, required = true,
                                 default = nil)
  if valid_595714 != nil:
    section.add "resourceGroupName", valid_595714
  var valid_595715 = path.getOrDefault("name")
  valid_595715 = validateParameter(valid_595715, JString, required = true,
                                 default = nil)
  if valid_595715 != nil:
    section.add "name", valid_595715
  var valid_595716 = path.getOrDefault("subscriptionId")
  valid_595716 = validateParameter(valid_595716, JString, required = true,
                                 default = nil)
  if valid_595716 != nil:
    section.add "subscriptionId", valid_595716
  var valid_595717 = path.getOrDefault("siteExtensionId")
  valid_595717 = validateParameter(valid_595717, JString, required = true,
                                 default = nil)
  if valid_595717 != nil:
    section.add "siteExtensionId", valid_595717
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595718 = query.getOrDefault("api-version")
  valid_595718 = validateParameter(valid_595718, JString, required = true,
                                 default = nil)
  if valid_595718 != nil:
    section.add "api-version", valid_595718
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595719: Call_WebAppsGetSiteExtension_595711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_595719.validator(path, query, header, formData, body)
  let scheme = call_595719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595719.url(scheme.get, call_595719.host, call_595719.base,
                         call_595719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595719, url, valid)

proc call*(call_595720: Call_WebAppsGetSiteExtension_595711;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtension
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_595721 = newJObject()
  var query_595722 = newJObject()
  add(path_595721, "resourceGroupName", newJString(resourceGroupName))
  add(query_595722, "api-version", newJString(apiVersion))
  add(path_595721, "name", newJString(name))
  add(path_595721, "subscriptionId", newJString(subscriptionId))
  add(path_595721, "siteExtensionId", newJString(siteExtensionId))
  result = call_595720.call(path_595721, query_595722, nil, nil, nil)

var webAppsGetSiteExtension* = Call_WebAppsGetSiteExtension_595711(
    name: "webAppsGetSiteExtension", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtension_595712, base: "",
    url: url_WebAppsGetSiteExtension_595713, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtension_595735 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSiteExtension_595737(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtension_595736(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595738 = path.getOrDefault("resourceGroupName")
  valid_595738 = validateParameter(valid_595738, JString, required = true,
                                 default = nil)
  if valid_595738 != nil:
    section.add "resourceGroupName", valid_595738
  var valid_595739 = path.getOrDefault("name")
  valid_595739 = validateParameter(valid_595739, JString, required = true,
                                 default = nil)
  if valid_595739 != nil:
    section.add "name", valid_595739
  var valid_595740 = path.getOrDefault("subscriptionId")
  valid_595740 = validateParameter(valid_595740, JString, required = true,
                                 default = nil)
  if valid_595740 != nil:
    section.add "subscriptionId", valid_595740
  var valid_595741 = path.getOrDefault("siteExtensionId")
  valid_595741 = validateParameter(valid_595741, JString, required = true,
                                 default = nil)
  if valid_595741 != nil:
    section.add "siteExtensionId", valid_595741
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595742 = query.getOrDefault("api-version")
  valid_595742 = validateParameter(valid_595742, JString, required = true,
                                 default = nil)
  if valid_595742 != nil:
    section.add "api-version", valid_595742
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595743: Call_WebAppsDeleteSiteExtension_595735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_595743.validator(path, query, header, formData, body)
  let scheme = call_595743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595743.url(scheme.get, call_595743.host, call_595743.base,
                         call_595743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595743, url, valid)

proc call*(call_595744: Call_WebAppsDeleteSiteExtension_595735;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtension
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_595745 = newJObject()
  var query_595746 = newJObject()
  add(path_595745, "resourceGroupName", newJString(resourceGroupName))
  add(query_595746, "api-version", newJString(apiVersion))
  add(path_595745, "name", newJString(name))
  add(path_595745, "subscriptionId", newJString(subscriptionId))
  add(path_595745, "siteExtensionId", newJString(siteExtensionId))
  result = call_595744.call(path_595745, query_595746, nil, nil, nil)

var webAppsDeleteSiteExtension* = Call_WebAppsDeleteSiteExtension_595735(
    name: "webAppsDeleteSiteExtension", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtension_595736, base: "",
    url: url_WebAppsDeleteSiteExtension_595737, schemes: {Scheme.Https})
type
  Call_WebAppsListSlots_595747 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlots_595749(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlots_595748(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets an app's deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595750 = path.getOrDefault("resourceGroupName")
  valid_595750 = validateParameter(valid_595750, JString, required = true,
                                 default = nil)
  if valid_595750 != nil:
    section.add "resourceGroupName", valid_595750
  var valid_595751 = path.getOrDefault("name")
  valid_595751 = validateParameter(valid_595751, JString, required = true,
                                 default = nil)
  if valid_595751 != nil:
    section.add "name", valid_595751
  var valid_595752 = path.getOrDefault("subscriptionId")
  valid_595752 = validateParameter(valid_595752, JString, required = true,
                                 default = nil)
  if valid_595752 != nil:
    section.add "subscriptionId", valid_595752
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595753 = query.getOrDefault("api-version")
  valid_595753 = validateParameter(valid_595753, JString, required = true,
                                 default = nil)
  if valid_595753 != nil:
    section.add "api-version", valid_595753
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595754: Call_WebAppsListSlots_595747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets an app's deployment slots.
  ## 
  let valid = call_595754.validator(path, query, header, formData, body)
  let scheme = call_595754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595754.url(scheme.get, call_595754.host, call_595754.base,
                         call_595754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595754, url, valid)

proc call*(call_595755: Call_WebAppsListSlots_595747; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListSlots
  ## Gets an app's deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595756 = newJObject()
  var query_595757 = newJObject()
  add(path_595756, "resourceGroupName", newJString(resourceGroupName))
  add(query_595757, "api-version", newJString(apiVersion))
  add(path_595756, "name", newJString(name))
  add(path_595756, "subscriptionId", newJString(subscriptionId))
  result = call_595755.call(path_595756, query_595757, nil, nil, nil)

var webAppsListSlots* = Call_WebAppsListSlots_595747(name: "webAppsListSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_WebAppsListSlots_595748, base: "",
    url: url_WebAppsListSlots_595749, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSlot_595770 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSlot_595772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSlot_595771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595773 = path.getOrDefault("resourceGroupName")
  valid_595773 = validateParameter(valid_595773, JString, required = true,
                                 default = nil)
  if valid_595773 != nil:
    section.add "resourceGroupName", valid_595773
  var valid_595774 = path.getOrDefault("name")
  valid_595774 = validateParameter(valid_595774, JString, required = true,
                                 default = nil)
  if valid_595774 != nil:
    section.add "name", valid_595774
  var valid_595775 = path.getOrDefault("slot")
  valid_595775 = validateParameter(valid_595775, JString, required = true,
                                 default = nil)
  if valid_595775 != nil:
    section.add "slot", valid_595775
  var valid_595776 = path.getOrDefault("subscriptionId")
  valid_595776 = validateParameter(valid_595776, JString, required = true,
                                 default = nil)
  if valid_595776 != nil:
    section.add "subscriptionId", valid_595776
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595777 = query.getOrDefault("api-version")
  valid_595777 = validateParameter(valid_595777, JString, required = true,
                                 default = nil)
  if valid_595777 != nil:
    section.add "api-version", valid_595777
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595779: Call_WebAppsCreateOrUpdateSlot_595770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_595779.validator(path, query, header, formData, body)
  let scheme = call_595779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595779.url(scheme.get, call_595779.host, call_595779.base,
                         call_595779.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595779, url, valid)

proc call*(call_595780: Call_WebAppsCreateOrUpdateSlot_595770;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595781 = newJObject()
  var query_595782 = newJObject()
  var body_595783 = newJObject()
  if siteEnvelope != nil:
    body_595783 = siteEnvelope
  add(path_595781, "resourceGroupName", newJString(resourceGroupName))
  add(query_595782, "api-version", newJString(apiVersion))
  add(path_595781, "name", newJString(name))
  add(path_595781, "slot", newJString(slot))
  add(path_595781, "subscriptionId", newJString(subscriptionId))
  result = call_595780.call(path_595781, query_595782, nil, nil, body_595783)

var webAppsCreateOrUpdateSlot* = Call_WebAppsCreateOrUpdateSlot_595770(
    name: "webAppsCreateOrUpdateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsCreateOrUpdateSlot_595771, base: "",
    url: url_WebAppsCreateOrUpdateSlot_595772, schemes: {Scheme.Https})
type
  Call_WebAppsGetSlot_595758 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSlot_595760(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSlot_595759(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595761 = path.getOrDefault("resourceGroupName")
  valid_595761 = validateParameter(valid_595761, JString, required = true,
                                 default = nil)
  if valid_595761 != nil:
    section.add "resourceGroupName", valid_595761
  var valid_595762 = path.getOrDefault("name")
  valid_595762 = validateParameter(valid_595762, JString, required = true,
                                 default = nil)
  if valid_595762 != nil:
    section.add "name", valid_595762
  var valid_595763 = path.getOrDefault("slot")
  valid_595763 = validateParameter(valid_595763, JString, required = true,
                                 default = nil)
  if valid_595763 != nil:
    section.add "slot", valid_595763
  var valid_595764 = path.getOrDefault("subscriptionId")
  valid_595764 = validateParameter(valid_595764, JString, required = true,
                                 default = nil)
  if valid_595764 != nil:
    section.add "subscriptionId", valid_595764
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595765 = query.getOrDefault("api-version")
  valid_595765 = validateParameter(valid_595765, JString, required = true,
                                 default = nil)
  if valid_595765 != nil:
    section.add "api-version", valid_595765
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595766: Call_WebAppsGetSlot_595758; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_595766.validator(path, query, header, formData, body)
  let scheme = call_595766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595766.url(scheme.get, call_595766.host, call_595766.base,
                         call_595766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595766, url, valid)

proc call*(call_595767: Call_WebAppsGetSlot_595758; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetSlot
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595768 = newJObject()
  var query_595769 = newJObject()
  add(path_595768, "resourceGroupName", newJString(resourceGroupName))
  add(query_595769, "api-version", newJString(apiVersion))
  add(path_595768, "name", newJString(name))
  add(path_595768, "slot", newJString(slot))
  add(path_595768, "subscriptionId", newJString(subscriptionId))
  result = call_595767.call(path_595768, query_595769, nil, nil, nil)

var webAppsGetSlot* = Call_WebAppsGetSlot_595758(name: "webAppsGetSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsGetSlot_595759, base: "", url: url_WebAppsGetSlot_595760,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlot_595798 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSlot_595800(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlot_595799(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595801 = path.getOrDefault("resourceGroupName")
  valid_595801 = validateParameter(valid_595801, JString, required = true,
                                 default = nil)
  if valid_595801 != nil:
    section.add "resourceGroupName", valid_595801
  var valid_595802 = path.getOrDefault("name")
  valid_595802 = validateParameter(valid_595802, JString, required = true,
                                 default = nil)
  if valid_595802 != nil:
    section.add "name", valid_595802
  var valid_595803 = path.getOrDefault("slot")
  valid_595803 = validateParameter(valid_595803, JString, required = true,
                                 default = nil)
  if valid_595803 != nil:
    section.add "slot", valid_595803
  var valid_595804 = path.getOrDefault("subscriptionId")
  valid_595804 = validateParameter(valid_595804, JString, required = true,
                                 default = nil)
  if valid_595804 != nil:
    section.add "subscriptionId", valid_595804
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595805 = query.getOrDefault("api-version")
  valid_595805 = validateParameter(valid_595805, JString, required = true,
                                 default = nil)
  if valid_595805 != nil:
    section.add "api-version", valid_595805
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595807: Call_WebAppsUpdateSlot_595798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_595807.validator(path, query, header, formData, body)
  let scheme = call_595807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595807.url(scheme.get, call_595807.host, call_595807.base,
                         call_595807.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595807, url, valid)

proc call*(call_595808: Call_WebAppsUpdateSlot_595798; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595809 = newJObject()
  var query_595810 = newJObject()
  var body_595811 = newJObject()
  if siteEnvelope != nil:
    body_595811 = siteEnvelope
  add(path_595809, "resourceGroupName", newJString(resourceGroupName))
  add(query_595810, "api-version", newJString(apiVersion))
  add(path_595809, "name", newJString(name))
  add(path_595809, "slot", newJString(slot))
  add(path_595809, "subscriptionId", newJString(subscriptionId))
  result = call_595808.call(path_595809, query_595810, nil, nil, body_595811)

var webAppsUpdateSlot* = Call_WebAppsUpdateSlot_595798(name: "webAppsUpdateSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsUpdateSlot_595799, base: "",
    url: url_WebAppsUpdateSlot_595800, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSlot_595784 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSlot_595786(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSlot_595785(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595787 = path.getOrDefault("resourceGroupName")
  valid_595787 = validateParameter(valid_595787, JString, required = true,
                                 default = nil)
  if valid_595787 != nil:
    section.add "resourceGroupName", valid_595787
  var valid_595788 = path.getOrDefault("name")
  valid_595788 = validateParameter(valid_595788, JString, required = true,
                                 default = nil)
  if valid_595788 != nil:
    section.add "name", valid_595788
  var valid_595789 = path.getOrDefault("slot")
  valid_595789 = validateParameter(valid_595789, JString, required = true,
                                 default = nil)
  if valid_595789 != nil:
    section.add "slot", valid_595789
  var valid_595790 = path.getOrDefault("subscriptionId")
  valid_595790 = validateParameter(valid_595790, JString, required = true,
                                 default = nil)
  if valid_595790 != nil:
    section.add "subscriptionId", valid_595790
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595791 = query.getOrDefault("api-version")
  valid_595791 = validateParameter(valid_595791, JString, required = true,
                                 default = nil)
  if valid_595791 != nil:
    section.add "api-version", valid_595791
  var valid_595792 = query.getOrDefault("deleteMetrics")
  valid_595792 = validateParameter(valid_595792, JBool, required = false, default = nil)
  if valid_595792 != nil:
    section.add "deleteMetrics", valid_595792
  var valid_595793 = query.getOrDefault("deleteEmptyServerFarm")
  valid_595793 = validateParameter(valid_595793, JBool, required = false, default = nil)
  if valid_595793 != nil:
    section.add "deleteEmptyServerFarm", valid_595793
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595794: Call_WebAppsDeleteSlot_595784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_595794.validator(path, query, header, formData, body)
  let scheme = call_595794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595794.url(scheme.get, call_595794.host, call_595794.base,
                         call_595794.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595794, url, valid)

proc call*(call_595795: Call_WebAppsDeleteSlot_595784; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          deleteMetrics: bool = false; deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDeleteSlot
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   slot: string (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_595796 = newJObject()
  var query_595797 = newJObject()
  add(path_595796, "resourceGroupName", newJString(resourceGroupName))
  add(query_595797, "api-version", newJString(apiVersion))
  add(path_595796, "name", newJString(name))
  add(path_595796, "slot", newJString(slot))
  add(path_595796, "subscriptionId", newJString(subscriptionId))
  add(query_595797, "deleteMetrics", newJBool(deleteMetrics))
  add(query_595797, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_595795.call(path_595796, query_595797, nil, nil, nil)

var webAppsDeleteSlot* = Call_WebAppsDeleteSlot_595784(name: "webAppsDeleteSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsDeleteSlot_595785, base: "",
    url: url_WebAppsDeleteSlot_595786, schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostnameSlot_595812 = ref object of OpenApiRestCall_593437
proc url_WebAppsAnalyzeCustomHostnameSlot_595814(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostnameSlot_595813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595815 = path.getOrDefault("resourceGroupName")
  valid_595815 = validateParameter(valid_595815, JString, required = true,
                                 default = nil)
  if valid_595815 != nil:
    section.add "resourceGroupName", valid_595815
  var valid_595816 = path.getOrDefault("name")
  valid_595816 = validateParameter(valid_595816, JString, required = true,
                                 default = nil)
  if valid_595816 != nil:
    section.add "name", valid_595816
  var valid_595817 = path.getOrDefault("slot")
  valid_595817 = validateParameter(valid_595817, JString, required = true,
                                 default = nil)
  if valid_595817 != nil:
    section.add "slot", valid_595817
  var valid_595818 = path.getOrDefault("subscriptionId")
  valid_595818 = validateParameter(valid_595818, JString, required = true,
                                 default = nil)
  if valid_595818 != nil:
    section.add "subscriptionId", valid_595818
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595819 = query.getOrDefault("api-version")
  valid_595819 = validateParameter(valid_595819, JString, required = true,
                                 default = nil)
  if valid_595819 != nil:
    section.add "api-version", valid_595819
  var valid_595820 = query.getOrDefault("hostName")
  valid_595820 = validateParameter(valid_595820, JString, required = false,
                                 default = nil)
  if valid_595820 != nil:
    section.add "hostName", valid_595820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595821: Call_WebAppsAnalyzeCustomHostnameSlot_595812;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_595821.validator(path, query, header, formData, body)
  let scheme = call_595821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595821.url(scheme.get, call_595821.host, call_595821.base,
                         call_595821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595821, url, valid)

proc call*(call_595822: Call_WebAppsAnalyzeCustomHostnameSlot_595812;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostnameSlot
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595823 = newJObject()
  var query_595824 = newJObject()
  add(path_595823, "resourceGroupName", newJString(resourceGroupName))
  add(query_595824, "api-version", newJString(apiVersion))
  add(path_595823, "name", newJString(name))
  add(query_595824, "hostName", newJString(hostName))
  add(path_595823, "slot", newJString(slot))
  add(path_595823, "subscriptionId", newJString(subscriptionId))
  result = call_595822.call(path_595823, query_595824, nil, nil, nil)

var webAppsAnalyzeCustomHostnameSlot* = Call_WebAppsAnalyzeCustomHostnameSlot_595812(
    name: "webAppsAnalyzeCustomHostnameSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostnameSlot_595813, base: "",
    url: url_WebAppsAnalyzeCustomHostnameSlot_595814, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigurationSlot_595825 = ref object of OpenApiRestCall_593437
proc url_WebAppsApplySlotConfigurationSlot_595827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigurationSlot_595826(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595828 = path.getOrDefault("resourceGroupName")
  valid_595828 = validateParameter(valid_595828, JString, required = true,
                                 default = nil)
  if valid_595828 != nil:
    section.add "resourceGroupName", valid_595828
  var valid_595829 = path.getOrDefault("name")
  valid_595829 = validateParameter(valid_595829, JString, required = true,
                                 default = nil)
  if valid_595829 != nil:
    section.add "name", valid_595829
  var valid_595830 = path.getOrDefault("slot")
  valid_595830 = validateParameter(valid_595830, JString, required = true,
                                 default = nil)
  if valid_595830 != nil:
    section.add "slot", valid_595830
  var valid_595831 = path.getOrDefault("subscriptionId")
  valid_595831 = validateParameter(valid_595831, JString, required = true,
                                 default = nil)
  if valid_595831 != nil:
    section.add "subscriptionId", valid_595831
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595832 = query.getOrDefault("api-version")
  valid_595832 = validateParameter(valid_595832, JString, required = true,
                                 default = nil)
  if valid_595832 != nil:
    section.add "api-version", valid_595832
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595834: Call_WebAppsApplySlotConfigurationSlot_595825;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_595834.validator(path, query, header, formData, body)
  let scheme = call_595834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595834.url(scheme.get, call_595834.host, call_595834.base,
                         call_595834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595834, url, valid)

proc call*(call_595835: Call_WebAppsApplySlotConfigurationSlot_595825;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigurationSlot
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_595836 = newJObject()
  var query_595837 = newJObject()
  var body_595838 = newJObject()
  add(path_595836, "resourceGroupName", newJString(resourceGroupName))
  add(query_595837, "api-version", newJString(apiVersion))
  add(path_595836, "name", newJString(name))
  add(path_595836, "slot", newJString(slot))
  add(path_595836, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_595838 = slotSwapEntity
  result = call_595835.call(path_595836, query_595837, nil, nil, body_595838)

var webAppsApplySlotConfigurationSlot* = Call_WebAppsApplySlotConfigurationSlot_595825(
    name: "webAppsApplySlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigurationSlot_595826, base: "",
    url: url_WebAppsApplySlotConfigurationSlot_595827, schemes: {Scheme.Https})
type
  Call_WebAppsBackupSlot_595839 = ref object of OpenApiRestCall_593437
proc url_WebAppsBackupSlot_595841(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackupSlot_595840(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595842 = path.getOrDefault("resourceGroupName")
  valid_595842 = validateParameter(valid_595842, JString, required = true,
                                 default = nil)
  if valid_595842 != nil:
    section.add "resourceGroupName", valid_595842
  var valid_595843 = path.getOrDefault("name")
  valid_595843 = validateParameter(valid_595843, JString, required = true,
                                 default = nil)
  if valid_595843 != nil:
    section.add "name", valid_595843
  var valid_595844 = path.getOrDefault("slot")
  valid_595844 = validateParameter(valid_595844, JString, required = true,
                                 default = nil)
  if valid_595844 != nil:
    section.add "slot", valid_595844
  var valid_595845 = path.getOrDefault("subscriptionId")
  valid_595845 = validateParameter(valid_595845, JString, required = true,
                                 default = nil)
  if valid_595845 != nil:
    section.add "subscriptionId", valid_595845
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595846 = query.getOrDefault("api-version")
  valid_595846 = validateParameter(valid_595846, JString, required = true,
                                 default = nil)
  if valid_595846 != nil:
    section.add "api-version", valid_595846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595848: Call_WebAppsBackupSlot_595839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_595848.validator(path, query, header, formData, body)
  let scheme = call_595848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595848.url(scheme.get, call_595848.host, call_595848.base,
                         call_595848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595848, url, valid)

proc call*(call_595849: Call_WebAppsBackupSlot_595839; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode): Recallable =
  ## webAppsBackupSlot
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_595850 = newJObject()
  var query_595851 = newJObject()
  var body_595852 = newJObject()
  add(path_595850, "resourceGroupName", newJString(resourceGroupName))
  add(query_595851, "api-version", newJString(apiVersion))
  add(path_595850, "name", newJString(name))
  add(path_595850, "slot", newJString(slot))
  add(path_595850, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595852 = request
  result = call_595849.call(path_595850, query_595851, nil, nil, body_595852)

var webAppsBackupSlot* = Call_WebAppsBackupSlot_595839(name: "webAppsBackupSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_WebAppsBackupSlot_595840, base: "",
    url: url_WebAppsBackupSlot_595841, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupsSlot_595853 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackupsSlot_595855(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupsSlot_595854(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595856 = path.getOrDefault("resourceGroupName")
  valid_595856 = validateParameter(valid_595856, JString, required = true,
                                 default = nil)
  if valid_595856 != nil:
    section.add "resourceGroupName", valid_595856
  var valid_595857 = path.getOrDefault("name")
  valid_595857 = validateParameter(valid_595857, JString, required = true,
                                 default = nil)
  if valid_595857 != nil:
    section.add "name", valid_595857
  var valid_595858 = path.getOrDefault("slot")
  valid_595858 = validateParameter(valid_595858, JString, required = true,
                                 default = nil)
  if valid_595858 != nil:
    section.add "slot", valid_595858
  var valid_595859 = path.getOrDefault("subscriptionId")
  valid_595859 = validateParameter(valid_595859, JString, required = true,
                                 default = nil)
  if valid_595859 != nil:
    section.add "subscriptionId", valid_595859
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595860 = query.getOrDefault("api-version")
  valid_595860 = validateParameter(valid_595860, JString, required = true,
                                 default = nil)
  if valid_595860 != nil:
    section.add "api-version", valid_595860
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595861: Call_WebAppsListBackupsSlot_595853; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_595861.validator(path, query, header, formData, body)
  let scheme = call_595861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595861.url(scheme.get, call_595861.host, call_595861.base,
                         call_595861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595861, url, valid)

proc call*(call_595862: Call_WebAppsListBackupsSlot_595853;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListBackupsSlot
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595863 = newJObject()
  var query_595864 = newJObject()
  add(path_595863, "resourceGroupName", newJString(resourceGroupName))
  add(query_595864, "api-version", newJString(apiVersion))
  add(path_595863, "name", newJString(name))
  add(path_595863, "slot", newJString(slot))
  add(path_595863, "subscriptionId", newJString(subscriptionId))
  result = call_595862.call(path_595863, query_595864, nil, nil, nil)

var webAppsListBackupsSlot* = Call_WebAppsListBackupsSlot_595853(
    name: "webAppsListBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_WebAppsListBackupsSlot_595854, base: "",
    url: url_WebAppsListBackupsSlot_595855, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatusSlot_595865 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupStatusSlot_595867(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatusSlot_595866(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595868 = path.getOrDefault("resourceGroupName")
  valid_595868 = validateParameter(valid_595868, JString, required = true,
                                 default = nil)
  if valid_595868 != nil:
    section.add "resourceGroupName", valid_595868
  var valid_595869 = path.getOrDefault("name")
  valid_595869 = validateParameter(valid_595869, JString, required = true,
                                 default = nil)
  if valid_595869 != nil:
    section.add "name", valid_595869
  var valid_595870 = path.getOrDefault("slot")
  valid_595870 = validateParameter(valid_595870, JString, required = true,
                                 default = nil)
  if valid_595870 != nil:
    section.add "slot", valid_595870
  var valid_595871 = path.getOrDefault("subscriptionId")
  valid_595871 = validateParameter(valid_595871, JString, required = true,
                                 default = nil)
  if valid_595871 != nil:
    section.add "subscriptionId", valid_595871
  var valid_595872 = path.getOrDefault("backupId")
  valid_595872 = validateParameter(valid_595872, JString, required = true,
                                 default = nil)
  if valid_595872 != nil:
    section.add "backupId", valid_595872
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595873 = query.getOrDefault("api-version")
  valid_595873 = validateParameter(valid_595873, JString, required = true,
                                 default = nil)
  if valid_595873 != nil:
    section.add "api-version", valid_595873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595874: Call_WebAppsGetBackupStatusSlot_595865; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_595874.validator(path, query, header, formData, body)
  let scheme = call_595874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595874.url(scheme.get, call_595874.host, call_595874.base,
                         call_595874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595874, url, valid)

proc call*(call_595875: Call_WebAppsGetBackupStatusSlot_595865;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatusSlot
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_595876 = newJObject()
  var query_595877 = newJObject()
  add(path_595876, "resourceGroupName", newJString(resourceGroupName))
  add(query_595877, "api-version", newJString(apiVersion))
  add(path_595876, "name", newJString(name))
  add(path_595876, "slot", newJString(slot))
  add(path_595876, "subscriptionId", newJString(subscriptionId))
  add(path_595876, "backupId", newJString(backupId))
  result = call_595875.call(path_595876, query_595877, nil, nil, nil)

var webAppsGetBackupStatusSlot* = Call_WebAppsGetBackupStatusSlot_595865(
    name: "webAppsGetBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatusSlot_595866, base: "",
    url: url_WebAppsGetBackupStatusSlot_595867, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupSlot_595878 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackupSlot_595880(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupSlot_595879(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595881 = path.getOrDefault("resourceGroupName")
  valid_595881 = validateParameter(valid_595881, JString, required = true,
                                 default = nil)
  if valid_595881 != nil:
    section.add "resourceGroupName", valid_595881
  var valid_595882 = path.getOrDefault("name")
  valid_595882 = validateParameter(valid_595882, JString, required = true,
                                 default = nil)
  if valid_595882 != nil:
    section.add "name", valid_595882
  var valid_595883 = path.getOrDefault("slot")
  valid_595883 = validateParameter(valid_595883, JString, required = true,
                                 default = nil)
  if valid_595883 != nil:
    section.add "slot", valid_595883
  var valid_595884 = path.getOrDefault("subscriptionId")
  valid_595884 = validateParameter(valid_595884, JString, required = true,
                                 default = nil)
  if valid_595884 != nil:
    section.add "subscriptionId", valid_595884
  var valid_595885 = path.getOrDefault("backupId")
  valid_595885 = validateParameter(valid_595885, JString, required = true,
                                 default = nil)
  if valid_595885 != nil:
    section.add "backupId", valid_595885
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595886 = query.getOrDefault("api-version")
  valid_595886 = validateParameter(valid_595886, JString, required = true,
                                 default = nil)
  if valid_595886 != nil:
    section.add "api-version", valid_595886
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595887: Call_WebAppsDeleteBackupSlot_595878; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_595887.validator(path, query, header, formData, body)
  let scheme = call_595887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595887.url(scheme.get, call_595887.host, call_595887.base,
                         call_595887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595887, url, valid)

proc call*(call_595888: Call_WebAppsDeleteBackupSlot_595878;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackupSlot
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_595889 = newJObject()
  var query_595890 = newJObject()
  add(path_595889, "resourceGroupName", newJString(resourceGroupName))
  add(query_595890, "api-version", newJString(apiVersion))
  add(path_595889, "name", newJString(name))
  add(path_595889, "slot", newJString(slot))
  add(path_595889, "subscriptionId", newJString(subscriptionId))
  add(path_595889, "backupId", newJString(backupId))
  result = call_595888.call(path_595889, query_595890, nil, nil, nil)

var webAppsDeleteBackupSlot* = Call_WebAppsDeleteBackupSlot_595878(
    name: "webAppsDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackupSlot_595879, base: "",
    url: url_WebAppsDeleteBackupSlot_595880, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecretsSlot_595891 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackupStatusSecretsSlot_595893(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecretsSlot_595892(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595894 = path.getOrDefault("resourceGroupName")
  valid_595894 = validateParameter(valid_595894, JString, required = true,
                                 default = nil)
  if valid_595894 != nil:
    section.add "resourceGroupName", valid_595894
  var valid_595895 = path.getOrDefault("name")
  valid_595895 = validateParameter(valid_595895, JString, required = true,
                                 default = nil)
  if valid_595895 != nil:
    section.add "name", valid_595895
  var valid_595896 = path.getOrDefault("slot")
  valid_595896 = validateParameter(valid_595896, JString, required = true,
                                 default = nil)
  if valid_595896 != nil:
    section.add "slot", valid_595896
  var valid_595897 = path.getOrDefault("subscriptionId")
  valid_595897 = validateParameter(valid_595897, JString, required = true,
                                 default = nil)
  if valid_595897 != nil:
    section.add "subscriptionId", valid_595897
  var valid_595898 = path.getOrDefault("backupId")
  valid_595898 = validateParameter(valid_595898, JString, required = true,
                                 default = nil)
  if valid_595898 != nil:
    section.add "backupId", valid_595898
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595899 = query.getOrDefault("api-version")
  valid_595899 = validateParameter(valid_595899, JString, required = true,
                                 default = nil)
  if valid_595899 != nil:
    section.add "api-version", valid_595899
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595901: Call_WebAppsListBackupStatusSecretsSlot_595891;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_595901.validator(path, query, header, formData, body)
  let scheme = call_595901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595901.url(scheme.get, call_595901.host, call_595901.base,
                         call_595901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595901, url, valid)

proc call*(call_595902: Call_WebAppsListBackupStatusSecretsSlot_595891;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecretsSlot
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_595903 = newJObject()
  var query_595904 = newJObject()
  var body_595905 = newJObject()
  add(path_595903, "resourceGroupName", newJString(resourceGroupName))
  add(query_595904, "api-version", newJString(apiVersion))
  add(path_595903, "name", newJString(name))
  add(path_595903, "slot", newJString(slot))
  add(path_595903, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595905 = request
  add(path_595903, "backupId", newJString(backupId))
  result = call_595902.call(path_595903, query_595904, nil, nil, body_595905)

var webAppsListBackupStatusSecretsSlot* = Call_WebAppsListBackupStatusSecretsSlot_595891(
    name: "webAppsListBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecretsSlot_595892, base: "",
    url: url_WebAppsListBackupStatusSecretsSlot_595893, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSlot_595906 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreSlot_595908(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSlot_595907(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595909 = path.getOrDefault("resourceGroupName")
  valid_595909 = validateParameter(valid_595909, JString, required = true,
                                 default = nil)
  if valid_595909 != nil:
    section.add "resourceGroupName", valid_595909
  var valid_595910 = path.getOrDefault("name")
  valid_595910 = validateParameter(valid_595910, JString, required = true,
                                 default = nil)
  if valid_595910 != nil:
    section.add "name", valid_595910
  var valid_595911 = path.getOrDefault("slot")
  valid_595911 = validateParameter(valid_595911, JString, required = true,
                                 default = nil)
  if valid_595911 != nil:
    section.add "slot", valid_595911
  var valid_595912 = path.getOrDefault("subscriptionId")
  valid_595912 = validateParameter(valid_595912, JString, required = true,
                                 default = nil)
  if valid_595912 != nil:
    section.add "subscriptionId", valid_595912
  var valid_595913 = path.getOrDefault("backupId")
  valid_595913 = validateParameter(valid_595913, JString, required = true,
                                 default = nil)
  if valid_595913 != nil:
    section.add "backupId", valid_595913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595914 = query.getOrDefault("api-version")
  valid_595914 = validateParameter(valid_595914, JString, required = true,
                                 default = nil)
  if valid_595914 != nil:
    section.add "api-version", valid_595914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595916: Call_WebAppsRestoreSlot_595906; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_595916.validator(path, query, header, formData, body)
  let scheme = call_595916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595916.url(scheme.get, call_595916.host, call_595916.base,
                         call_595916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595916, url, valid)

proc call*(call_595917: Call_WebAppsRestoreSlot_595906; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode; backupId: string): Recallable =
  ## webAppsRestoreSlot
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_595918 = newJObject()
  var query_595919 = newJObject()
  var body_595920 = newJObject()
  add(path_595918, "resourceGroupName", newJString(resourceGroupName))
  add(query_595919, "api-version", newJString(apiVersion))
  add(path_595918, "name", newJString(name))
  add(path_595918, "slot", newJString(slot))
  add(path_595918, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595920 = request
  add(path_595918, "backupId", newJString(backupId))
  result = call_595917.call(path_595918, query_595919, nil, nil, body_595920)

var webAppsRestoreSlot* = Call_WebAppsRestoreSlot_595906(
    name: "webAppsRestoreSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_WebAppsRestoreSlot_595907, base: "",
    url: url_WebAppsRestoreSlot_595908, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationsSlot_595921 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurationsSlot_595923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationsSlot_595922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595924 = path.getOrDefault("resourceGroupName")
  valid_595924 = validateParameter(valid_595924, JString, required = true,
                                 default = nil)
  if valid_595924 != nil:
    section.add "resourceGroupName", valid_595924
  var valid_595925 = path.getOrDefault("name")
  valid_595925 = validateParameter(valid_595925, JString, required = true,
                                 default = nil)
  if valid_595925 != nil:
    section.add "name", valid_595925
  var valid_595926 = path.getOrDefault("slot")
  valid_595926 = validateParameter(valid_595926, JString, required = true,
                                 default = nil)
  if valid_595926 != nil:
    section.add "slot", valid_595926
  var valid_595927 = path.getOrDefault("subscriptionId")
  valid_595927 = validateParameter(valid_595927, JString, required = true,
                                 default = nil)
  if valid_595927 != nil:
    section.add "subscriptionId", valid_595927
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595928 = query.getOrDefault("api-version")
  valid_595928 = validateParameter(valid_595928, JString, required = true,
                                 default = nil)
  if valid_595928 != nil:
    section.add "api-version", valid_595928
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595929: Call_WebAppsListConfigurationsSlot_595921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_595929.validator(path, query, header, formData, body)
  let scheme = call_595929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595929.url(scheme.get, call_595929.host, call_595929.base,
                         call_595929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595929, url, valid)

proc call*(call_595930: Call_WebAppsListConfigurationsSlot_595921;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationsSlot
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595931 = newJObject()
  var query_595932 = newJObject()
  add(path_595931, "resourceGroupName", newJString(resourceGroupName))
  add(query_595932, "api-version", newJString(apiVersion))
  add(path_595931, "name", newJString(name))
  add(path_595931, "slot", newJString(slot))
  add(path_595931, "subscriptionId", newJString(subscriptionId))
  result = call_595930.call(path_595931, query_595932, nil, nil, nil)

var webAppsListConfigurationsSlot* = Call_WebAppsListConfigurationsSlot_595921(
    name: "webAppsListConfigurationsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    validator: validate_WebAppsListConfigurationsSlot_595922, base: "",
    url: url_WebAppsListConfigurationsSlot_595923, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettingsSlot_595933 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateApplicationSettingsSlot_595935(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettingsSlot_595934(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595936 = path.getOrDefault("resourceGroupName")
  valid_595936 = validateParameter(valid_595936, JString, required = true,
                                 default = nil)
  if valid_595936 != nil:
    section.add "resourceGroupName", valid_595936
  var valid_595937 = path.getOrDefault("name")
  valid_595937 = validateParameter(valid_595937, JString, required = true,
                                 default = nil)
  if valid_595937 != nil:
    section.add "name", valid_595937
  var valid_595938 = path.getOrDefault("slot")
  valid_595938 = validateParameter(valid_595938, JString, required = true,
                                 default = nil)
  if valid_595938 != nil:
    section.add "slot", valid_595938
  var valid_595939 = path.getOrDefault("subscriptionId")
  valid_595939 = validateParameter(valid_595939, JString, required = true,
                                 default = nil)
  if valid_595939 != nil:
    section.add "subscriptionId", valid_595939
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595940 = query.getOrDefault("api-version")
  valid_595940 = validateParameter(valid_595940, JString, required = true,
                                 default = nil)
  if valid_595940 != nil:
    section.add "api-version", valid_595940
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595942: Call_WebAppsUpdateApplicationSettingsSlot_595933;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_595942.validator(path, query, header, formData, body)
  let scheme = call_595942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595942.url(scheme.get, call_595942.host, call_595942.base,
                         call_595942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595942, url, valid)

proc call*(call_595943: Call_WebAppsUpdateApplicationSettingsSlot_595933;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettingsSlot
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595944 = newJObject()
  var query_595945 = newJObject()
  var body_595946 = newJObject()
  add(path_595944, "resourceGroupName", newJString(resourceGroupName))
  add(query_595945, "api-version", newJString(apiVersion))
  add(path_595944, "name", newJString(name))
  if appSettings != nil:
    body_595946 = appSettings
  add(path_595944, "slot", newJString(slot))
  add(path_595944, "subscriptionId", newJString(subscriptionId))
  result = call_595943.call(path_595944, query_595945, nil, nil, body_595946)

var webAppsUpdateApplicationSettingsSlot* = Call_WebAppsUpdateApplicationSettingsSlot_595933(
    name: "webAppsUpdateApplicationSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettingsSlot_595934, base: "",
    url: url_WebAppsUpdateApplicationSettingsSlot_595935, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettingsSlot_595947 = ref object of OpenApiRestCall_593437
proc url_WebAppsListApplicationSettingsSlot_595949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettingsSlot_595948(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595950 = path.getOrDefault("resourceGroupName")
  valid_595950 = validateParameter(valid_595950, JString, required = true,
                                 default = nil)
  if valid_595950 != nil:
    section.add "resourceGroupName", valid_595950
  var valid_595951 = path.getOrDefault("name")
  valid_595951 = validateParameter(valid_595951, JString, required = true,
                                 default = nil)
  if valid_595951 != nil:
    section.add "name", valid_595951
  var valid_595952 = path.getOrDefault("slot")
  valid_595952 = validateParameter(valid_595952, JString, required = true,
                                 default = nil)
  if valid_595952 != nil:
    section.add "slot", valid_595952
  var valid_595953 = path.getOrDefault("subscriptionId")
  valid_595953 = validateParameter(valid_595953, JString, required = true,
                                 default = nil)
  if valid_595953 != nil:
    section.add "subscriptionId", valid_595953
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595954 = query.getOrDefault("api-version")
  valid_595954 = validateParameter(valid_595954, JString, required = true,
                                 default = nil)
  if valid_595954 != nil:
    section.add "api-version", valid_595954
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595955: Call_WebAppsListApplicationSettingsSlot_595947;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_595955.validator(path, query, header, formData, body)
  let scheme = call_595955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595955.url(scheme.get, call_595955.host, call_595955.base,
                         call_595955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595955, url, valid)

proc call*(call_595956: Call_WebAppsListApplicationSettingsSlot_595947;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettingsSlot
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595957 = newJObject()
  var query_595958 = newJObject()
  add(path_595957, "resourceGroupName", newJString(resourceGroupName))
  add(query_595958, "api-version", newJString(apiVersion))
  add(path_595957, "name", newJString(name))
  add(path_595957, "slot", newJString(slot))
  add(path_595957, "subscriptionId", newJString(subscriptionId))
  result = call_595956.call(path_595957, query_595958, nil, nil, nil)

var webAppsListApplicationSettingsSlot* = Call_WebAppsListApplicationSettingsSlot_595947(
    name: "webAppsListApplicationSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettingsSlot_595948, base: "",
    url: url_WebAppsListApplicationSettingsSlot_595949, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettingsSlot_595959 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateAuthSettingsSlot_595961(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettingsSlot_595960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595962 = path.getOrDefault("resourceGroupName")
  valid_595962 = validateParameter(valid_595962, JString, required = true,
                                 default = nil)
  if valid_595962 != nil:
    section.add "resourceGroupName", valid_595962
  var valid_595963 = path.getOrDefault("name")
  valid_595963 = validateParameter(valid_595963, JString, required = true,
                                 default = nil)
  if valid_595963 != nil:
    section.add "name", valid_595963
  var valid_595964 = path.getOrDefault("slot")
  valid_595964 = validateParameter(valid_595964, JString, required = true,
                                 default = nil)
  if valid_595964 != nil:
    section.add "slot", valid_595964
  var valid_595965 = path.getOrDefault("subscriptionId")
  valid_595965 = validateParameter(valid_595965, JString, required = true,
                                 default = nil)
  if valid_595965 != nil:
    section.add "subscriptionId", valid_595965
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595966 = query.getOrDefault("api-version")
  valid_595966 = validateParameter(valid_595966, JString, required = true,
                                 default = nil)
  if valid_595966 != nil:
    section.add "api-version", valid_595966
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595968: Call_WebAppsUpdateAuthSettingsSlot_595959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_595968.validator(path, query, header, formData, body)
  let scheme = call_595968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595968.url(scheme.get, call_595968.host, call_595968.base,
                         call_595968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595968, url, valid)

proc call*(call_595969: Call_WebAppsUpdateAuthSettingsSlot_595959;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettingsSlot
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_595970 = newJObject()
  var query_595971 = newJObject()
  var body_595972 = newJObject()
  add(path_595970, "resourceGroupName", newJString(resourceGroupName))
  add(query_595971, "api-version", newJString(apiVersion))
  add(path_595970, "name", newJString(name))
  add(path_595970, "slot", newJString(slot))
  add(path_595970, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_595972 = siteAuthSettings
  result = call_595969.call(path_595970, query_595971, nil, nil, body_595972)

var webAppsUpdateAuthSettingsSlot* = Call_WebAppsUpdateAuthSettingsSlot_595959(
    name: "webAppsUpdateAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettingsSlot_595960, base: "",
    url: url_WebAppsUpdateAuthSettingsSlot_595961, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettingsSlot_595973 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetAuthSettingsSlot_595975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettingsSlot_595974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595976 = path.getOrDefault("resourceGroupName")
  valid_595976 = validateParameter(valid_595976, JString, required = true,
                                 default = nil)
  if valid_595976 != nil:
    section.add "resourceGroupName", valid_595976
  var valid_595977 = path.getOrDefault("name")
  valid_595977 = validateParameter(valid_595977, JString, required = true,
                                 default = nil)
  if valid_595977 != nil:
    section.add "name", valid_595977
  var valid_595978 = path.getOrDefault("slot")
  valid_595978 = validateParameter(valid_595978, JString, required = true,
                                 default = nil)
  if valid_595978 != nil:
    section.add "slot", valid_595978
  var valid_595979 = path.getOrDefault("subscriptionId")
  valid_595979 = validateParameter(valid_595979, JString, required = true,
                                 default = nil)
  if valid_595979 != nil:
    section.add "subscriptionId", valid_595979
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595980 = query.getOrDefault("api-version")
  valid_595980 = validateParameter(valid_595980, JString, required = true,
                                 default = nil)
  if valid_595980 != nil:
    section.add "api-version", valid_595980
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595981: Call_WebAppsGetAuthSettingsSlot_595973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_595981.validator(path, query, header, formData, body)
  let scheme = call_595981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595981.url(scheme.get, call_595981.host, call_595981.base,
                         call_595981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595981, url, valid)

proc call*(call_595982: Call_WebAppsGetAuthSettingsSlot_595973;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettingsSlot
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595983 = newJObject()
  var query_595984 = newJObject()
  add(path_595983, "resourceGroupName", newJString(resourceGroupName))
  add(query_595984, "api-version", newJString(apiVersion))
  add(path_595983, "name", newJString(name))
  add(path_595983, "slot", newJString(slot))
  add(path_595983, "subscriptionId", newJString(subscriptionId))
  result = call_595982.call(path_595983, query_595984, nil, nil, nil)

var webAppsGetAuthSettingsSlot* = Call_WebAppsGetAuthSettingsSlot_595973(
    name: "webAppsGetAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettingsSlot_595974, base: "",
    url: url_WebAppsGetAuthSettingsSlot_595975, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAzureStorageAccountsSlot_595985 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateAzureStorageAccountsSlot_595987(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/azurestorageaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAzureStorageAccountsSlot_595986(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595988 = path.getOrDefault("resourceGroupName")
  valid_595988 = validateParameter(valid_595988, JString, required = true,
                                 default = nil)
  if valid_595988 != nil:
    section.add "resourceGroupName", valid_595988
  var valid_595989 = path.getOrDefault("name")
  valid_595989 = validateParameter(valid_595989, JString, required = true,
                                 default = nil)
  if valid_595989 != nil:
    section.add "name", valid_595989
  var valid_595990 = path.getOrDefault("slot")
  valid_595990 = validateParameter(valid_595990, JString, required = true,
                                 default = nil)
  if valid_595990 != nil:
    section.add "slot", valid_595990
  var valid_595991 = path.getOrDefault("subscriptionId")
  valid_595991 = validateParameter(valid_595991, JString, required = true,
                                 default = nil)
  if valid_595991 != nil:
    section.add "subscriptionId", valid_595991
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595992 = query.getOrDefault("api-version")
  valid_595992 = validateParameter(valid_595992, JString, required = true,
                                 default = nil)
  if valid_595992 != nil:
    section.add "api-version", valid_595992
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595994: Call_WebAppsUpdateAzureStorageAccountsSlot_595985;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Azure storage account configurations of an app.
  ## 
  let valid = call_595994.validator(path, query, header, formData, body)
  let scheme = call_595994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595994.url(scheme.get, call_595994.host, call_595994.base,
                         call_595994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595994, url, valid)

proc call*(call_595995: Call_WebAppsUpdateAzureStorageAccountsSlot_595985;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          azureStorageAccounts: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateAzureStorageAccountsSlot
  ## Updates the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595996 = newJObject()
  var query_595997 = newJObject()
  var body_595998 = newJObject()
  add(path_595996, "resourceGroupName", newJString(resourceGroupName))
  add(query_595997, "api-version", newJString(apiVersion))
  add(path_595996, "name", newJString(name))
  add(path_595996, "slot", newJString(slot))
  if azureStorageAccounts != nil:
    body_595998 = azureStorageAccounts
  add(path_595996, "subscriptionId", newJString(subscriptionId))
  result = call_595995.call(path_595996, query_595997, nil, nil, body_595998)

var webAppsUpdateAzureStorageAccountsSlot* = Call_WebAppsUpdateAzureStorageAccountsSlot_595985(
    name: "webAppsUpdateAzureStorageAccountsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
    validator: validate_WebAppsUpdateAzureStorageAccountsSlot_595986, base: "",
    url: url_WebAppsUpdateAzureStorageAccountsSlot_595987, schemes: {Scheme.Https})
type
  Call_WebAppsListAzureStorageAccountsSlot_595999 = ref object of OpenApiRestCall_593437
proc url_WebAppsListAzureStorageAccountsSlot_596001(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/azurestorageaccounts/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListAzureStorageAccountsSlot_596000(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596002 = path.getOrDefault("resourceGroupName")
  valid_596002 = validateParameter(valid_596002, JString, required = true,
                                 default = nil)
  if valid_596002 != nil:
    section.add "resourceGroupName", valid_596002
  var valid_596003 = path.getOrDefault("name")
  valid_596003 = validateParameter(valid_596003, JString, required = true,
                                 default = nil)
  if valid_596003 != nil:
    section.add "name", valid_596003
  var valid_596004 = path.getOrDefault("slot")
  valid_596004 = validateParameter(valid_596004, JString, required = true,
                                 default = nil)
  if valid_596004 != nil:
    section.add "slot", valid_596004
  var valid_596005 = path.getOrDefault("subscriptionId")
  valid_596005 = validateParameter(valid_596005, JString, required = true,
                                 default = nil)
  if valid_596005 != nil:
    section.add "subscriptionId", valid_596005
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596006 = query.getOrDefault("api-version")
  valid_596006 = validateParameter(valid_596006, JString, required = true,
                                 default = nil)
  if valid_596006 != nil:
    section.add "api-version", valid_596006
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596007: Call_WebAppsListAzureStorageAccountsSlot_595999;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Azure storage account configurations of an app.
  ## 
  let valid = call_596007.validator(path, query, header, formData, body)
  let scheme = call_596007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596007.url(scheme.get, call_596007.host, call_596007.base,
                         call_596007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596007, url, valid)

proc call*(call_596008: Call_WebAppsListAzureStorageAccountsSlot_595999;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListAzureStorageAccountsSlot
  ## Gets the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596009 = newJObject()
  var query_596010 = newJObject()
  add(path_596009, "resourceGroupName", newJString(resourceGroupName))
  add(query_596010, "api-version", newJString(apiVersion))
  add(path_596009, "name", newJString(name))
  add(path_596009, "slot", newJString(slot))
  add(path_596009, "subscriptionId", newJString(subscriptionId))
  result = call_596008.call(path_596009, query_596010, nil, nil, nil)

var webAppsListAzureStorageAccountsSlot* = Call_WebAppsListAzureStorageAccountsSlot_595999(
    name: "webAppsListAzureStorageAccountsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
    validator: validate_WebAppsListAzureStorageAccountsSlot_596000, base: "",
    url: url_WebAppsListAzureStorageAccountsSlot_596001, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfigurationSlot_596011 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateBackupConfigurationSlot_596013(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfigurationSlot_596012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596014 = path.getOrDefault("resourceGroupName")
  valid_596014 = validateParameter(valid_596014, JString, required = true,
                                 default = nil)
  if valid_596014 != nil:
    section.add "resourceGroupName", valid_596014
  var valid_596015 = path.getOrDefault("name")
  valid_596015 = validateParameter(valid_596015, JString, required = true,
                                 default = nil)
  if valid_596015 != nil:
    section.add "name", valid_596015
  var valid_596016 = path.getOrDefault("slot")
  valid_596016 = validateParameter(valid_596016, JString, required = true,
                                 default = nil)
  if valid_596016 != nil:
    section.add "slot", valid_596016
  var valid_596017 = path.getOrDefault("subscriptionId")
  valid_596017 = validateParameter(valid_596017, JString, required = true,
                                 default = nil)
  if valid_596017 != nil:
    section.add "subscriptionId", valid_596017
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596018 = query.getOrDefault("api-version")
  valid_596018 = validateParameter(valid_596018, JString, required = true,
                                 default = nil)
  if valid_596018 != nil:
    section.add "api-version", valid_596018
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596020: Call_WebAppsUpdateBackupConfigurationSlot_596011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_596020.validator(path, query, header, formData, body)
  let scheme = call_596020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596020.url(scheme.get, call_596020.host, call_596020.base,
                         call_596020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596020, url, valid)

proc call*(call_596021: Call_WebAppsUpdateBackupConfigurationSlot_596011;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfigurationSlot
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_596022 = newJObject()
  var query_596023 = newJObject()
  var body_596024 = newJObject()
  add(path_596022, "resourceGroupName", newJString(resourceGroupName))
  add(query_596023, "api-version", newJString(apiVersion))
  add(path_596022, "name", newJString(name))
  add(path_596022, "slot", newJString(slot))
  add(path_596022, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596024 = request
  result = call_596021.call(path_596022, query_596023, nil, nil, body_596024)

var webAppsUpdateBackupConfigurationSlot* = Call_WebAppsUpdateBackupConfigurationSlot_596011(
    name: "webAppsUpdateBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsUpdateBackupConfigurationSlot_596012, base: "",
    url: url_WebAppsUpdateBackupConfigurationSlot_596013, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfigurationSlot_596025 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackupConfigurationSlot_596027(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfigurationSlot_596026(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596028 = path.getOrDefault("resourceGroupName")
  valid_596028 = validateParameter(valid_596028, JString, required = true,
                                 default = nil)
  if valid_596028 != nil:
    section.add "resourceGroupName", valid_596028
  var valid_596029 = path.getOrDefault("name")
  valid_596029 = validateParameter(valid_596029, JString, required = true,
                                 default = nil)
  if valid_596029 != nil:
    section.add "name", valid_596029
  var valid_596030 = path.getOrDefault("slot")
  valid_596030 = validateParameter(valid_596030, JString, required = true,
                                 default = nil)
  if valid_596030 != nil:
    section.add "slot", valid_596030
  var valid_596031 = path.getOrDefault("subscriptionId")
  valid_596031 = validateParameter(valid_596031, JString, required = true,
                                 default = nil)
  if valid_596031 != nil:
    section.add "subscriptionId", valid_596031
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596032 = query.getOrDefault("api-version")
  valid_596032 = validateParameter(valid_596032, JString, required = true,
                                 default = nil)
  if valid_596032 != nil:
    section.add "api-version", valid_596032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596033: Call_WebAppsDeleteBackupConfigurationSlot_596025;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_596033.validator(path, query, header, formData, body)
  let scheme = call_596033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596033.url(scheme.get, call_596033.host, call_596033.base,
                         call_596033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596033, url, valid)

proc call*(call_596034: Call_WebAppsDeleteBackupConfigurationSlot_596025;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfigurationSlot
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596035 = newJObject()
  var query_596036 = newJObject()
  add(path_596035, "resourceGroupName", newJString(resourceGroupName))
  add(query_596036, "api-version", newJString(apiVersion))
  add(path_596035, "name", newJString(name))
  add(path_596035, "slot", newJString(slot))
  add(path_596035, "subscriptionId", newJString(subscriptionId))
  result = call_596034.call(path_596035, query_596036, nil, nil, nil)

var webAppsDeleteBackupConfigurationSlot* = Call_WebAppsDeleteBackupConfigurationSlot_596025(
    name: "webAppsDeleteBackupConfigurationSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsDeleteBackupConfigurationSlot_596026, base: "",
    url: url_WebAppsDeleteBackupConfigurationSlot_596027, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfigurationSlot_596037 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupConfigurationSlot_596039(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfigurationSlot_596038(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596040 = path.getOrDefault("resourceGroupName")
  valid_596040 = validateParameter(valid_596040, JString, required = true,
                                 default = nil)
  if valid_596040 != nil:
    section.add "resourceGroupName", valid_596040
  var valid_596041 = path.getOrDefault("name")
  valid_596041 = validateParameter(valid_596041, JString, required = true,
                                 default = nil)
  if valid_596041 != nil:
    section.add "name", valid_596041
  var valid_596042 = path.getOrDefault("slot")
  valid_596042 = validateParameter(valid_596042, JString, required = true,
                                 default = nil)
  if valid_596042 != nil:
    section.add "slot", valid_596042
  var valid_596043 = path.getOrDefault("subscriptionId")
  valid_596043 = validateParameter(valid_596043, JString, required = true,
                                 default = nil)
  if valid_596043 != nil:
    section.add "subscriptionId", valid_596043
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596044 = query.getOrDefault("api-version")
  valid_596044 = validateParameter(valid_596044, JString, required = true,
                                 default = nil)
  if valid_596044 != nil:
    section.add "api-version", valid_596044
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596045: Call_WebAppsGetBackupConfigurationSlot_596037;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_596045.validator(path, query, header, formData, body)
  let scheme = call_596045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596045.url(scheme.get, call_596045.host, call_596045.base,
                         call_596045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596045, url, valid)

proc call*(call_596046: Call_WebAppsGetBackupConfigurationSlot_596037;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfigurationSlot
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596047 = newJObject()
  var query_596048 = newJObject()
  add(path_596047, "resourceGroupName", newJString(resourceGroupName))
  add(query_596048, "api-version", newJString(apiVersion))
  add(path_596047, "name", newJString(name))
  add(path_596047, "slot", newJString(slot))
  add(path_596047, "subscriptionId", newJString(subscriptionId))
  result = call_596046.call(path_596047, query_596048, nil, nil, nil)

var webAppsGetBackupConfigurationSlot* = Call_WebAppsGetBackupConfigurationSlot_596037(
    name: "webAppsGetBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_WebAppsGetBackupConfigurationSlot_596038, base: "",
    url: url_WebAppsGetBackupConfigurationSlot_596039, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStringsSlot_596049 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConnectionStringsSlot_596051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStringsSlot_596050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596052 = path.getOrDefault("resourceGroupName")
  valid_596052 = validateParameter(valid_596052, JString, required = true,
                                 default = nil)
  if valid_596052 != nil:
    section.add "resourceGroupName", valid_596052
  var valid_596053 = path.getOrDefault("name")
  valid_596053 = validateParameter(valid_596053, JString, required = true,
                                 default = nil)
  if valid_596053 != nil:
    section.add "name", valid_596053
  var valid_596054 = path.getOrDefault("slot")
  valid_596054 = validateParameter(valid_596054, JString, required = true,
                                 default = nil)
  if valid_596054 != nil:
    section.add "slot", valid_596054
  var valid_596055 = path.getOrDefault("subscriptionId")
  valid_596055 = validateParameter(valid_596055, JString, required = true,
                                 default = nil)
  if valid_596055 != nil:
    section.add "subscriptionId", valid_596055
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596056 = query.getOrDefault("api-version")
  valid_596056 = validateParameter(valid_596056, JString, required = true,
                                 default = nil)
  if valid_596056 != nil:
    section.add "api-version", valid_596056
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596058: Call_WebAppsUpdateConnectionStringsSlot_596049;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_596058.validator(path, query, header, formData, body)
  let scheme = call_596058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596058.url(scheme.get, call_596058.host, call_596058.base,
                         call_596058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596058, url, valid)

proc call*(call_596059: Call_WebAppsUpdateConnectionStringsSlot_596049;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStringsSlot
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596060 = newJObject()
  var query_596061 = newJObject()
  var body_596062 = newJObject()
  add(path_596060, "resourceGroupName", newJString(resourceGroupName))
  add(query_596061, "api-version", newJString(apiVersion))
  add(path_596060, "name", newJString(name))
  add(path_596060, "slot", newJString(slot))
  if connectionStrings != nil:
    body_596062 = connectionStrings
  add(path_596060, "subscriptionId", newJString(subscriptionId))
  result = call_596059.call(path_596060, query_596061, nil, nil, body_596062)

var webAppsUpdateConnectionStringsSlot* = Call_WebAppsUpdateConnectionStringsSlot_596049(
    name: "webAppsUpdateConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStringsSlot_596050, base: "",
    url: url_WebAppsUpdateConnectionStringsSlot_596051, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStringsSlot_596063 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConnectionStringsSlot_596065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStringsSlot_596064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596066 = path.getOrDefault("resourceGroupName")
  valid_596066 = validateParameter(valid_596066, JString, required = true,
                                 default = nil)
  if valid_596066 != nil:
    section.add "resourceGroupName", valid_596066
  var valid_596067 = path.getOrDefault("name")
  valid_596067 = validateParameter(valid_596067, JString, required = true,
                                 default = nil)
  if valid_596067 != nil:
    section.add "name", valid_596067
  var valid_596068 = path.getOrDefault("slot")
  valid_596068 = validateParameter(valid_596068, JString, required = true,
                                 default = nil)
  if valid_596068 != nil:
    section.add "slot", valid_596068
  var valid_596069 = path.getOrDefault("subscriptionId")
  valid_596069 = validateParameter(valid_596069, JString, required = true,
                                 default = nil)
  if valid_596069 != nil:
    section.add "subscriptionId", valid_596069
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596070 = query.getOrDefault("api-version")
  valid_596070 = validateParameter(valid_596070, JString, required = true,
                                 default = nil)
  if valid_596070 != nil:
    section.add "api-version", valid_596070
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596071: Call_WebAppsListConnectionStringsSlot_596063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_596071.validator(path, query, header, formData, body)
  let scheme = call_596071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596071.url(scheme.get, call_596071.host, call_596071.base,
                         call_596071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596071, url, valid)

proc call*(call_596072: Call_WebAppsListConnectionStringsSlot_596063;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStringsSlot
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596073 = newJObject()
  var query_596074 = newJObject()
  add(path_596073, "resourceGroupName", newJString(resourceGroupName))
  add(query_596074, "api-version", newJString(apiVersion))
  add(path_596073, "name", newJString(name))
  add(path_596073, "slot", newJString(slot))
  add(path_596073, "subscriptionId", newJString(subscriptionId))
  result = call_596072.call(path_596073, query_596074, nil, nil, nil)

var webAppsListConnectionStringsSlot* = Call_WebAppsListConnectionStringsSlot_596063(
    name: "webAppsListConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStringsSlot_596064, base: "",
    url: url_WebAppsListConnectionStringsSlot_596065, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfigSlot_596087 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDiagnosticLogsConfigSlot_596089(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfigSlot_596088(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596090 = path.getOrDefault("resourceGroupName")
  valid_596090 = validateParameter(valid_596090, JString, required = true,
                                 default = nil)
  if valid_596090 != nil:
    section.add "resourceGroupName", valid_596090
  var valid_596091 = path.getOrDefault("name")
  valid_596091 = validateParameter(valid_596091, JString, required = true,
                                 default = nil)
  if valid_596091 != nil:
    section.add "name", valid_596091
  var valid_596092 = path.getOrDefault("slot")
  valid_596092 = validateParameter(valid_596092, JString, required = true,
                                 default = nil)
  if valid_596092 != nil:
    section.add "slot", valid_596092
  var valid_596093 = path.getOrDefault("subscriptionId")
  valid_596093 = validateParameter(valid_596093, JString, required = true,
                                 default = nil)
  if valid_596093 != nil:
    section.add "subscriptionId", valid_596093
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596094 = query.getOrDefault("api-version")
  valid_596094 = validateParameter(valid_596094, JString, required = true,
                                 default = nil)
  if valid_596094 != nil:
    section.add "api-version", valid_596094
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596096: Call_WebAppsUpdateDiagnosticLogsConfigSlot_596087;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_596096.validator(path, query, header, formData, body)
  let scheme = call_596096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596096.url(scheme.get, call_596096.host, call_596096.base,
                         call_596096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596096, url, valid)

proc call*(call_596097: Call_WebAppsUpdateDiagnosticLogsConfigSlot_596087;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfigSlot
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596098 = newJObject()
  var query_596099 = newJObject()
  var body_596100 = newJObject()
  add(path_596098, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_596100 = siteLogsConfig
  add(query_596099, "api-version", newJString(apiVersion))
  add(path_596098, "name", newJString(name))
  add(path_596098, "slot", newJString(slot))
  add(path_596098, "subscriptionId", newJString(subscriptionId))
  result = call_596097.call(path_596098, query_596099, nil, nil, body_596100)

var webAppsUpdateDiagnosticLogsConfigSlot* = Call_WebAppsUpdateDiagnosticLogsConfigSlot_596087(
    name: "webAppsUpdateDiagnosticLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfigSlot_596088, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfigSlot_596089, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfigurationSlot_596075 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDiagnosticLogsConfigurationSlot_596077(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfigurationSlot_596076(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596078 = path.getOrDefault("resourceGroupName")
  valid_596078 = validateParameter(valid_596078, JString, required = true,
                                 default = nil)
  if valid_596078 != nil:
    section.add "resourceGroupName", valid_596078
  var valid_596079 = path.getOrDefault("name")
  valid_596079 = validateParameter(valid_596079, JString, required = true,
                                 default = nil)
  if valid_596079 != nil:
    section.add "name", valid_596079
  var valid_596080 = path.getOrDefault("slot")
  valid_596080 = validateParameter(valid_596080, JString, required = true,
                                 default = nil)
  if valid_596080 != nil:
    section.add "slot", valid_596080
  var valid_596081 = path.getOrDefault("subscriptionId")
  valid_596081 = validateParameter(valid_596081, JString, required = true,
                                 default = nil)
  if valid_596081 != nil:
    section.add "subscriptionId", valid_596081
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596082 = query.getOrDefault("api-version")
  valid_596082 = validateParameter(valid_596082, JString, required = true,
                                 default = nil)
  if valid_596082 != nil:
    section.add "api-version", valid_596082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596083: Call_WebAppsGetDiagnosticLogsConfigurationSlot_596075;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_596083.validator(path, query, header, formData, body)
  let scheme = call_596083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596083.url(scheme.get, call_596083.host, call_596083.base,
                         call_596083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596083, url, valid)

proc call*(call_596084: Call_WebAppsGetDiagnosticLogsConfigurationSlot_596075;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfigurationSlot
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596085 = newJObject()
  var query_596086 = newJObject()
  add(path_596085, "resourceGroupName", newJString(resourceGroupName))
  add(query_596086, "api-version", newJString(apiVersion))
  add(path_596085, "name", newJString(name))
  add(path_596085, "slot", newJString(slot))
  add(path_596085, "subscriptionId", newJString(subscriptionId))
  result = call_596084.call(path_596085, query_596086, nil, nil, nil)

var webAppsGetDiagnosticLogsConfigurationSlot* = Call_WebAppsGetDiagnosticLogsConfigurationSlot_596075(
    name: "webAppsGetDiagnosticLogsConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfigurationSlot_596076,
    base: "", url: url_WebAppsGetDiagnosticLogsConfigurationSlot_596077,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadataSlot_596101 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateMetadataSlot_596103(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadataSlot_596102(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596104 = path.getOrDefault("resourceGroupName")
  valid_596104 = validateParameter(valid_596104, JString, required = true,
                                 default = nil)
  if valid_596104 != nil:
    section.add "resourceGroupName", valid_596104
  var valid_596105 = path.getOrDefault("name")
  valid_596105 = validateParameter(valid_596105, JString, required = true,
                                 default = nil)
  if valid_596105 != nil:
    section.add "name", valid_596105
  var valid_596106 = path.getOrDefault("slot")
  valid_596106 = validateParameter(valid_596106, JString, required = true,
                                 default = nil)
  if valid_596106 != nil:
    section.add "slot", valid_596106
  var valid_596107 = path.getOrDefault("subscriptionId")
  valid_596107 = validateParameter(valid_596107, JString, required = true,
                                 default = nil)
  if valid_596107 != nil:
    section.add "subscriptionId", valid_596107
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596108 = query.getOrDefault("api-version")
  valid_596108 = validateParameter(valid_596108, JString, required = true,
                                 default = nil)
  if valid_596108 != nil:
    section.add "api-version", valid_596108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596110: Call_WebAppsUpdateMetadataSlot_596101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_596110.validator(path, query, header, formData, body)
  let scheme = call_596110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596110.url(scheme.get, call_596110.host, call_596110.base,
                         call_596110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596110, url, valid)

proc call*(call_596111: Call_WebAppsUpdateMetadataSlot_596101;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadataSlot
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_596112 = newJObject()
  var query_596113 = newJObject()
  var body_596114 = newJObject()
  add(path_596112, "resourceGroupName", newJString(resourceGroupName))
  add(query_596113, "api-version", newJString(apiVersion))
  add(path_596112, "name", newJString(name))
  add(path_596112, "slot", newJString(slot))
  add(path_596112, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_596114 = metadata
  result = call_596111.call(path_596112, query_596113, nil, nil, body_596114)

var webAppsUpdateMetadataSlot* = Call_WebAppsUpdateMetadataSlot_596101(
    name: "webAppsUpdateMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_WebAppsUpdateMetadataSlot_596102, base: "",
    url: url_WebAppsUpdateMetadataSlot_596103, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadataSlot_596115 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetadataSlot_596117(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadataSlot_596116(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596118 = path.getOrDefault("resourceGroupName")
  valid_596118 = validateParameter(valid_596118, JString, required = true,
                                 default = nil)
  if valid_596118 != nil:
    section.add "resourceGroupName", valid_596118
  var valid_596119 = path.getOrDefault("name")
  valid_596119 = validateParameter(valid_596119, JString, required = true,
                                 default = nil)
  if valid_596119 != nil:
    section.add "name", valid_596119
  var valid_596120 = path.getOrDefault("slot")
  valid_596120 = validateParameter(valid_596120, JString, required = true,
                                 default = nil)
  if valid_596120 != nil:
    section.add "slot", valid_596120
  var valid_596121 = path.getOrDefault("subscriptionId")
  valid_596121 = validateParameter(valid_596121, JString, required = true,
                                 default = nil)
  if valid_596121 != nil:
    section.add "subscriptionId", valid_596121
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596122 = query.getOrDefault("api-version")
  valid_596122 = validateParameter(valid_596122, JString, required = true,
                                 default = nil)
  if valid_596122 != nil:
    section.add "api-version", valid_596122
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596123: Call_WebAppsListMetadataSlot_596115; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_596123.validator(path, query, header, formData, body)
  let scheme = call_596123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596123.url(scheme.get, call_596123.host, call_596123.base,
                         call_596123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596123, url, valid)

proc call*(call_596124: Call_WebAppsListMetadataSlot_596115;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetadataSlot
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596125 = newJObject()
  var query_596126 = newJObject()
  add(path_596125, "resourceGroupName", newJString(resourceGroupName))
  add(query_596126, "api-version", newJString(apiVersion))
  add(path_596125, "name", newJString(name))
  add(path_596125, "slot", newJString(slot))
  add(path_596125, "subscriptionId", newJString(subscriptionId))
  result = call_596124.call(path_596125, query_596126, nil, nil, nil)

var webAppsListMetadataSlot* = Call_WebAppsListMetadataSlot_596115(
    name: "webAppsListMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_WebAppsListMetadataSlot_596116, base: "",
    url: url_WebAppsListMetadataSlot_596117, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentialsSlot_596127 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingCredentialsSlot_596129(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentialsSlot_596128(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596130 = path.getOrDefault("resourceGroupName")
  valid_596130 = validateParameter(valid_596130, JString, required = true,
                                 default = nil)
  if valid_596130 != nil:
    section.add "resourceGroupName", valid_596130
  var valid_596131 = path.getOrDefault("name")
  valid_596131 = validateParameter(valid_596131, JString, required = true,
                                 default = nil)
  if valid_596131 != nil:
    section.add "name", valid_596131
  var valid_596132 = path.getOrDefault("slot")
  valid_596132 = validateParameter(valid_596132, JString, required = true,
                                 default = nil)
  if valid_596132 != nil:
    section.add "slot", valid_596132
  var valid_596133 = path.getOrDefault("subscriptionId")
  valid_596133 = validateParameter(valid_596133, JString, required = true,
                                 default = nil)
  if valid_596133 != nil:
    section.add "subscriptionId", valid_596133
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596134 = query.getOrDefault("api-version")
  valid_596134 = validateParameter(valid_596134, JString, required = true,
                                 default = nil)
  if valid_596134 != nil:
    section.add "api-version", valid_596134
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596135: Call_WebAppsListPublishingCredentialsSlot_596127;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_596135.validator(path, query, header, formData, body)
  let scheme = call_596135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596135.url(scheme.get, call_596135.host, call_596135.base,
                         call_596135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596135, url, valid)

proc call*(call_596136: Call_WebAppsListPublishingCredentialsSlot_596127;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentialsSlot
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596137 = newJObject()
  var query_596138 = newJObject()
  add(path_596137, "resourceGroupName", newJString(resourceGroupName))
  add(query_596138, "api-version", newJString(apiVersion))
  add(path_596137, "name", newJString(name))
  add(path_596137, "slot", newJString(slot))
  add(path_596137, "subscriptionId", newJString(subscriptionId))
  result = call_596136.call(path_596137, query_596138, nil, nil, nil)

var webAppsListPublishingCredentialsSlot* = Call_WebAppsListPublishingCredentialsSlot_596127(
    name: "webAppsListPublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentialsSlot_596128, base: "",
    url: url_WebAppsListPublishingCredentialsSlot_596129, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettingsSlot_596139 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSitePushSettingsSlot_596141(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettingsSlot_596140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596142 = path.getOrDefault("resourceGroupName")
  valid_596142 = validateParameter(valid_596142, JString, required = true,
                                 default = nil)
  if valid_596142 != nil:
    section.add "resourceGroupName", valid_596142
  var valid_596143 = path.getOrDefault("name")
  valid_596143 = validateParameter(valid_596143, JString, required = true,
                                 default = nil)
  if valid_596143 != nil:
    section.add "name", valid_596143
  var valid_596144 = path.getOrDefault("slot")
  valid_596144 = validateParameter(valid_596144, JString, required = true,
                                 default = nil)
  if valid_596144 != nil:
    section.add "slot", valid_596144
  var valid_596145 = path.getOrDefault("subscriptionId")
  valid_596145 = validateParameter(valid_596145, JString, required = true,
                                 default = nil)
  if valid_596145 != nil:
    section.add "subscriptionId", valid_596145
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596146 = query.getOrDefault("api-version")
  valid_596146 = validateParameter(valid_596146, JString, required = true,
                                 default = nil)
  if valid_596146 != nil:
    section.add "api-version", valid_596146
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596148: Call_WebAppsUpdateSitePushSettingsSlot_596139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_596148.validator(path, query, header, formData, body)
  let scheme = call_596148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596148.url(scheme.get, call_596148.host, call_596148.base,
                         call_596148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596148, url, valid)

proc call*(call_596149: Call_WebAppsUpdateSitePushSettingsSlot_596139;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettingsSlot
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_596150 = newJObject()
  var query_596151 = newJObject()
  var body_596152 = newJObject()
  add(path_596150, "resourceGroupName", newJString(resourceGroupName))
  add(query_596151, "api-version", newJString(apiVersion))
  add(path_596150, "name", newJString(name))
  add(path_596150, "slot", newJString(slot))
  add(path_596150, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_596152 = pushSettings
  result = call_596149.call(path_596150, query_596151, nil, nil, body_596152)

var webAppsUpdateSitePushSettingsSlot* = Call_WebAppsUpdateSitePushSettingsSlot_596139(
    name: "webAppsUpdateSitePushSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettingsSlot_596140, base: "",
    url: url_WebAppsUpdateSitePushSettingsSlot_596141, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettingsSlot_596153 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSitePushSettingsSlot_596155(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettingsSlot_596154(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596156 = path.getOrDefault("resourceGroupName")
  valid_596156 = validateParameter(valid_596156, JString, required = true,
                                 default = nil)
  if valid_596156 != nil:
    section.add "resourceGroupName", valid_596156
  var valid_596157 = path.getOrDefault("name")
  valid_596157 = validateParameter(valid_596157, JString, required = true,
                                 default = nil)
  if valid_596157 != nil:
    section.add "name", valid_596157
  var valid_596158 = path.getOrDefault("slot")
  valid_596158 = validateParameter(valid_596158, JString, required = true,
                                 default = nil)
  if valid_596158 != nil:
    section.add "slot", valid_596158
  var valid_596159 = path.getOrDefault("subscriptionId")
  valid_596159 = validateParameter(valid_596159, JString, required = true,
                                 default = nil)
  if valid_596159 != nil:
    section.add "subscriptionId", valid_596159
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596160 = query.getOrDefault("api-version")
  valid_596160 = validateParameter(valid_596160, JString, required = true,
                                 default = nil)
  if valid_596160 != nil:
    section.add "api-version", valid_596160
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596161: Call_WebAppsListSitePushSettingsSlot_596153;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_596161.validator(path, query, header, formData, body)
  let scheme = call_596161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596161.url(scheme.get, call_596161.host, call_596161.base,
                         call_596161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596161, url, valid)

proc call*(call_596162: Call_WebAppsListSitePushSettingsSlot_596153;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettingsSlot
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596163 = newJObject()
  var query_596164 = newJObject()
  add(path_596163, "resourceGroupName", newJString(resourceGroupName))
  add(query_596164, "api-version", newJString(apiVersion))
  add(path_596163, "name", newJString(name))
  add(path_596163, "slot", newJString(slot))
  add(path_596163, "subscriptionId", newJString(subscriptionId))
  result = call_596162.call(path_596163, query_596164, nil, nil, nil)

var webAppsListSitePushSettingsSlot* = Call_WebAppsListSitePushSettingsSlot_596153(
    name: "webAppsListSitePushSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettingsSlot_596154, base: "",
    url: url_WebAppsListSitePushSettingsSlot_596155, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfigurationSlot_596177 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateConfigurationSlot_596179(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfigurationSlot_596178(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596180 = path.getOrDefault("resourceGroupName")
  valid_596180 = validateParameter(valid_596180, JString, required = true,
                                 default = nil)
  if valid_596180 != nil:
    section.add "resourceGroupName", valid_596180
  var valid_596181 = path.getOrDefault("name")
  valid_596181 = validateParameter(valid_596181, JString, required = true,
                                 default = nil)
  if valid_596181 != nil:
    section.add "name", valid_596181
  var valid_596182 = path.getOrDefault("slot")
  valid_596182 = validateParameter(valid_596182, JString, required = true,
                                 default = nil)
  if valid_596182 != nil:
    section.add "slot", valid_596182
  var valid_596183 = path.getOrDefault("subscriptionId")
  valid_596183 = validateParameter(valid_596183, JString, required = true,
                                 default = nil)
  if valid_596183 != nil:
    section.add "subscriptionId", valid_596183
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596184 = query.getOrDefault("api-version")
  valid_596184 = validateParameter(valid_596184, JString, required = true,
                                 default = nil)
  if valid_596184 != nil:
    section.add "api-version", valid_596184
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596186: Call_WebAppsCreateOrUpdateConfigurationSlot_596177;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_596186.validator(path, query, header, formData, body)
  let scheme = call_596186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596186.url(scheme.get, call_596186.host, call_596186.base,
                         call_596186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596186, url, valid)

proc call*(call_596187: Call_WebAppsCreateOrUpdateConfigurationSlot_596177;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596188 = newJObject()
  var query_596189 = newJObject()
  var body_596190 = newJObject()
  add(path_596188, "resourceGroupName", newJString(resourceGroupName))
  add(query_596189, "api-version", newJString(apiVersion))
  add(path_596188, "name", newJString(name))
  if siteConfig != nil:
    body_596190 = siteConfig
  add(path_596188, "slot", newJString(slot))
  add(path_596188, "subscriptionId", newJString(subscriptionId))
  result = call_596187.call(path_596188, query_596189, nil, nil, body_596190)

var webAppsCreateOrUpdateConfigurationSlot* = Call_WebAppsCreateOrUpdateConfigurationSlot_596177(
    name: "webAppsCreateOrUpdateConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfigurationSlot_596178, base: "",
    url: url_WebAppsCreateOrUpdateConfigurationSlot_596179,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSlot_596165 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfigurationSlot_596167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSlot_596166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596168 = path.getOrDefault("resourceGroupName")
  valid_596168 = validateParameter(valid_596168, JString, required = true,
                                 default = nil)
  if valid_596168 != nil:
    section.add "resourceGroupName", valid_596168
  var valid_596169 = path.getOrDefault("name")
  valid_596169 = validateParameter(valid_596169, JString, required = true,
                                 default = nil)
  if valid_596169 != nil:
    section.add "name", valid_596169
  var valid_596170 = path.getOrDefault("slot")
  valid_596170 = validateParameter(valid_596170, JString, required = true,
                                 default = nil)
  if valid_596170 != nil:
    section.add "slot", valid_596170
  var valid_596171 = path.getOrDefault("subscriptionId")
  valid_596171 = validateParameter(valid_596171, JString, required = true,
                                 default = nil)
  if valid_596171 != nil:
    section.add "subscriptionId", valid_596171
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596172 = query.getOrDefault("api-version")
  valid_596172 = validateParameter(valid_596172, JString, required = true,
                                 default = nil)
  if valid_596172 != nil:
    section.add "api-version", valid_596172
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596173: Call_WebAppsGetConfigurationSlot_596165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_596173.validator(path, query, header, formData, body)
  let scheme = call_596173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596173.url(scheme.get, call_596173.host, call_596173.base,
                         call_596173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596173, url, valid)

proc call*(call_596174: Call_WebAppsGetConfigurationSlot_596165;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSlot
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596175 = newJObject()
  var query_596176 = newJObject()
  add(path_596175, "resourceGroupName", newJString(resourceGroupName))
  add(query_596176, "api-version", newJString(apiVersion))
  add(path_596175, "name", newJString(name))
  add(path_596175, "slot", newJString(slot))
  add(path_596175, "subscriptionId", newJString(subscriptionId))
  result = call_596174.call(path_596175, query_596176, nil, nil, nil)

var webAppsGetConfigurationSlot* = Call_WebAppsGetConfigurationSlot_596165(
    name: "webAppsGetConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsGetConfigurationSlot_596166, base: "",
    url: url_WebAppsGetConfigurationSlot_596167, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfigurationSlot_596191 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConfigurationSlot_596193(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfigurationSlot_596192(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596194 = path.getOrDefault("resourceGroupName")
  valid_596194 = validateParameter(valid_596194, JString, required = true,
                                 default = nil)
  if valid_596194 != nil:
    section.add "resourceGroupName", valid_596194
  var valid_596195 = path.getOrDefault("name")
  valid_596195 = validateParameter(valid_596195, JString, required = true,
                                 default = nil)
  if valid_596195 != nil:
    section.add "name", valid_596195
  var valid_596196 = path.getOrDefault("slot")
  valid_596196 = validateParameter(valid_596196, JString, required = true,
                                 default = nil)
  if valid_596196 != nil:
    section.add "slot", valid_596196
  var valid_596197 = path.getOrDefault("subscriptionId")
  valid_596197 = validateParameter(valid_596197, JString, required = true,
                                 default = nil)
  if valid_596197 != nil:
    section.add "subscriptionId", valid_596197
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596198 = query.getOrDefault("api-version")
  valid_596198 = validateParameter(valid_596198, JString, required = true,
                                 default = nil)
  if valid_596198 != nil:
    section.add "api-version", valid_596198
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596200: Call_WebAppsUpdateConfigurationSlot_596191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_596200.validator(path, query, header, formData, body)
  let scheme = call_596200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596200.url(scheme.get, call_596200.host, call_596200.base,
                         call_596200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596200, url, valid)

proc call*(call_596201: Call_WebAppsUpdateConfigurationSlot_596191;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596202 = newJObject()
  var query_596203 = newJObject()
  var body_596204 = newJObject()
  add(path_596202, "resourceGroupName", newJString(resourceGroupName))
  add(query_596203, "api-version", newJString(apiVersion))
  add(path_596202, "name", newJString(name))
  if siteConfig != nil:
    body_596204 = siteConfig
  add(path_596202, "slot", newJString(slot))
  add(path_596202, "subscriptionId", newJString(subscriptionId))
  result = call_596201.call(path_596202, query_596203, nil, nil, body_596204)

var webAppsUpdateConfigurationSlot* = Call_WebAppsUpdateConfigurationSlot_596191(
    name: "webAppsUpdateConfigurationSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsUpdateConfigurationSlot_596192, base: "",
    url: url_WebAppsUpdateConfigurationSlot_596193, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfoSlot_596205 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurationSnapshotInfoSlot_596207(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfoSlot_596206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596208 = path.getOrDefault("resourceGroupName")
  valid_596208 = validateParameter(valid_596208, JString, required = true,
                                 default = nil)
  if valid_596208 != nil:
    section.add "resourceGroupName", valid_596208
  var valid_596209 = path.getOrDefault("name")
  valid_596209 = validateParameter(valid_596209, JString, required = true,
                                 default = nil)
  if valid_596209 != nil:
    section.add "name", valid_596209
  var valid_596210 = path.getOrDefault("slot")
  valid_596210 = validateParameter(valid_596210, JString, required = true,
                                 default = nil)
  if valid_596210 != nil:
    section.add "slot", valid_596210
  var valid_596211 = path.getOrDefault("subscriptionId")
  valid_596211 = validateParameter(valid_596211, JString, required = true,
                                 default = nil)
  if valid_596211 != nil:
    section.add "subscriptionId", valid_596211
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596212 = query.getOrDefault("api-version")
  valid_596212 = validateParameter(valid_596212, JString, required = true,
                                 default = nil)
  if valid_596212 != nil:
    section.add "api-version", valid_596212
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596213: Call_WebAppsListConfigurationSnapshotInfoSlot_596205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_596213.validator(path, query, header, formData, body)
  let scheme = call_596213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596213.url(scheme.get, call_596213.host, call_596213.base,
                         call_596213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596213, url, valid)

proc call*(call_596214: Call_WebAppsListConfigurationSnapshotInfoSlot_596205;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfoSlot
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596215 = newJObject()
  var query_596216 = newJObject()
  add(path_596215, "resourceGroupName", newJString(resourceGroupName))
  add(query_596216, "api-version", newJString(apiVersion))
  add(path_596215, "name", newJString(name))
  add(path_596215, "slot", newJString(slot))
  add(path_596215, "subscriptionId", newJString(subscriptionId))
  result = call_596214.call(path_596215, query_596216, nil, nil, nil)

var webAppsListConfigurationSnapshotInfoSlot* = Call_WebAppsListConfigurationSnapshotInfoSlot_596205(
    name: "webAppsListConfigurationSnapshotInfoSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfoSlot_596206, base: "",
    url: url_WebAppsListConfigurationSnapshotInfoSlot_596207,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshotSlot_596217 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfigurationSnapshotSlot_596219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshotSlot_596218(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596220 = path.getOrDefault("resourceGroupName")
  valid_596220 = validateParameter(valid_596220, JString, required = true,
                                 default = nil)
  if valid_596220 != nil:
    section.add "resourceGroupName", valid_596220
  var valid_596221 = path.getOrDefault("name")
  valid_596221 = validateParameter(valid_596221, JString, required = true,
                                 default = nil)
  if valid_596221 != nil:
    section.add "name", valid_596221
  var valid_596222 = path.getOrDefault("snapshotId")
  valid_596222 = validateParameter(valid_596222, JString, required = true,
                                 default = nil)
  if valid_596222 != nil:
    section.add "snapshotId", valid_596222
  var valid_596223 = path.getOrDefault("slot")
  valid_596223 = validateParameter(valid_596223, JString, required = true,
                                 default = nil)
  if valid_596223 != nil:
    section.add "slot", valid_596223
  var valid_596224 = path.getOrDefault("subscriptionId")
  valid_596224 = validateParameter(valid_596224, JString, required = true,
                                 default = nil)
  if valid_596224 != nil:
    section.add "subscriptionId", valid_596224
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596225 = query.getOrDefault("api-version")
  valid_596225 = validateParameter(valid_596225, JString, required = true,
                                 default = nil)
  if valid_596225 != nil:
    section.add "api-version", valid_596225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596226: Call_WebAppsGetConfigurationSnapshotSlot_596217;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_596226.validator(path, query, header, formData, body)
  let scheme = call_596226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596226.url(scheme.get, call_596226.host, call_596226.base,
                         call_596226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596226, url, valid)

proc call*(call_596227: Call_WebAppsGetConfigurationSnapshotSlot_596217;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshotSlot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596228 = newJObject()
  var query_596229 = newJObject()
  add(path_596228, "resourceGroupName", newJString(resourceGroupName))
  add(query_596229, "api-version", newJString(apiVersion))
  add(path_596228, "name", newJString(name))
  add(path_596228, "snapshotId", newJString(snapshotId))
  add(path_596228, "slot", newJString(slot))
  add(path_596228, "subscriptionId", newJString(subscriptionId))
  result = call_596227.call(path_596228, query_596229, nil, nil, nil)

var webAppsGetConfigurationSnapshotSlot* = Call_WebAppsGetConfigurationSnapshotSlot_596217(
    name: "webAppsGetConfigurationSnapshotSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshotSlot_596218, base: "",
    url: url_WebAppsGetConfigurationSnapshotSlot_596219, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596230 = ref object of OpenApiRestCall_593437
proc url_WebAppsRecoverSiteConfigurationSnapshotSlot_596232(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshotSlot_596231(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596233 = path.getOrDefault("resourceGroupName")
  valid_596233 = validateParameter(valid_596233, JString, required = true,
                                 default = nil)
  if valid_596233 != nil:
    section.add "resourceGroupName", valid_596233
  var valid_596234 = path.getOrDefault("name")
  valid_596234 = validateParameter(valid_596234, JString, required = true,
                                 default = nil)
  if valid_596234 != nil:
    section.add "name", valid_596234
  var valid_596235 = path.getOrDefault("snapshotId")
  valid_596235 = validateParameter(valid_596235, JString, required = true,
                                 default = nil)
  if valid_596235 != nil:
    section.add "snapshotId", valid_596235
  var valid_596236 = path.getOrDefault("slot")
  valid_596236 = validateParameter(valid_596236, JString, required = true,
                                 default = nil)
  if valid_596236 != nil:
    section.add "slot", valid_596236
  var valid_596237 = path.getOrDefault("subscriptionId")
  valid_596237 = validateParameter(valid_596237, JString, required = true,
                                 default = nil)
  if valid_596237 != nil:
    section.add "subscriptionId", valid_596237
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596238 = query.getOrDefault("api-version")
  valid_596238 = validateParameter(valid_596238, JString, required = true,
                                 default = nil)
  if valid_596238 != nil:
    section.add "api-version", valid_596238
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596239: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596230;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_596239.validator(path, query, header, formData, body)
  let scheme = call_596239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596239.url(scheme.get, call_596239.host, call_596239.base,
                         call_596239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596239, url, valid)

proc call*(call_596240: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596230;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshotSlot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596241 = newJObject()
  var query_596242 = newJObject()
  add(path_596241, "resourceGroupName", newJString(resourceGroupName))
  add(query_596242, "api-version", newJString(apiVersion))
  add(path_596241, "name", newJString(name))
  add(path_596241, "snapshotId", newJString(snapshotId))
  add(path_596241, "slot", newJString(slot))
  add(path_596241, "subscriptionId", newJString(subscriptionId))
  result = call_596240.call(path_596241, query_596242, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshotSlot* = Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596230(
    name: "webAppsRecoverSiteConfigurationSnapshotSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshotSlot_596231,
    base: "", url: url_WebAppsRecoverSiteConfigurationSnapshotSlot_596232,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsSlot_596243 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebSiteContainerLogsSlot_596245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsSlot_596244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596246 = path.getOrDefault("resourceGroupName")
  valid_596246 = validateParameter(valid_596246, JString, required = true,
                                 default = nil)
  if valid_596246 != nil:
    section.add "resourceGroupName", valid_596246
  var valid_596247 = path.getOrDefault("name")
  valid_596247 = validateParameter(valid_596247, JString, required = true,
                                 default = nil)
  if valid_596247 != nil:
    section.add "name", valid_596247
  var valid_596248 = path.getOrDefault("slot")
  valid_596248 = validateParameter(valid_596248, JString, required = true,
                                 default = nil)
  if valid_596248 != nil:
    section.add "slot", valid_596248
  var valid_596249 = path.getOrDefault("subscriptionId")
  valid_596249 = validateParameter(valid_596249, JString, required = true,
                                 default = nil)
  if valid_596249 != nil:
    section.add "subscriptionId", valid_596249
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596250 = query.getOrDefault("api-version")
  valid_596250 = validateParameter(valid_596250, JString, required = true,
                                 default = nil)
  if valid_596250 != nil:
    section.add "api-version", valid_596250
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596251: Call_WebAppsGetWebSiteContainerLogsSlot_596243;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_596251.validator(path, query, header, formData, body)
  let scheme = call_596251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596251.url(scheme.get, call_596251.host, call_596251.base,
                         call_596251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596251, url, valid)

proc call*(call_596252: Call_WebAppsGetWebSiteContainerLogsSlot_596243;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsSlot
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596253 = newJObject()
  var query_596254 = newJObject()
  add(path_596253, "resourceGroupName", newJString(resourceGroupName))
  add(query_596254, "api-version", newJString(apiVersion))
  add(path_596253, "name", newJString(name))
  add(path_596253, "slot", newJString(slot))
  add(path_596253, "subscriptionId", newJString(subscriptionId))
  result = call_596252.call(path_596253, query_596254, nil, nil, nil)

var webAppsGetWebSiteContainerLogsSlot* = Call_WebAppsGetWebSiteContainerLogsSlot_596243(
    name: "webAppsGetWebSiteContainerLogsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogsSlot_596244, base: "",
    url: url_WebAppsGetWebSiteContainerLogsSlot_596245, schemes: {Scheme.Https})
type
  Call_WebAppsGetContainerLogsZipSlot_596255 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetContainerLogsZipSlot_596257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContainerLogsZipSlot_596256(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596258 = path.getOrDefault("resourceGroupName")
  valid_596258 = validateParameter(valid_596258, JString, required = true,
                                 default = nil)
  if valid_596258 != nil:
    section.add "resourceGroupName", valid_596258
  var valid_596259 = path.getOrDefault("name")
  valid_596259 = validateParameter(valid_596259, JString, required = true,
                                 default = nil)
  if valid_596259 != nil:
    section.add "name", valid_596259
  var valid_596260 = path.getOrDefault("slot")
  valid_596260 = validateParameter(valid_596260, JString, required = true,
                                 default = nil)
  if valid_596260 != nil:
    section.add "slot", valid_596260
  var valid_596261 = path.getOrDefault("subscriptionId")
  valid_596261 = validateParameter(valid_596261, JString, required = true,
                                 default = nil)
  if valid_596261 != nil:
    section.add "subscriptionId", valid_596261
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596262 = query.getOrDefault("api-version")
  valid_596262 = validateParameter(valid_596262, JString, required = true,
                                 default = nil)
  if valid_596262 != nil:
    section.add "api-version", valid_596262
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596263: Call_WebAppsGetContainerLogsZipSlot_596255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_596263.validator(path, query, header, formData, body)
  let scheme = call_596263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596263.url(scheme.get, call_596263.host, call_596263.base,
                         call_596263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596263, url, valid)

proc call*(call_596264: Call_WebAppsGetContainerLogsZipSlot_596255;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetContainerLogsZipSlot
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596265 = newJObject()
  var query_596266 = newJObject()
  add(path_596265, "resourceGroupName", newJString(resourceGroupName))
  add(query_596266, "api-version", newJString(apiVersion))
  add(path_596265, "name", newJString(name))
  add(path_596265, "slot", newJString(slot))
  add(path_596265, "subscriptionId", newJString(subscriptionId))
  result = call_596264.call(path_596265, query_596266, nil, nil, nil)

var webAppsGetContainerLogsZipSlot* = Call_WebAppsGetContainerLogsZipSlot_596255(
    name: "webAppsGetContainerLogsZipSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    validator: validate_WebAppsGetContainerLogsZipSlot_596256, base: "",
    url: url_WebAppsGetContainerLogsZipSlot_596257, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobsSlot_596267 = ref object of OpenApiRestCall_593437
proc url_WebAppsListContinuousWebJobsSlot_596269(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobsSlot_596268(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596270 = path.getOrDefault("resourceGroupName")
  valid_596270 = validateParameter(valid_596270, JString, required = true,
                                 default = nil)
  if valid_596270 != nil:
    section.add "resourceGroupName", valid_596270
  var valid_596271 = path.getOrDefault("name")
  valid_596271 = validateParameter(valid_596271, JString, required = true,
                                 default = nil)
  if valid_596271 != nil:
    section.add "name", valid_596271
  var valid_596272 = path.getOrDefault("slot")
  valid_596272 = validateParameter(valid_596272, JString, required = true,
                                 default = nil)
  if valid_596272 != nil:
    section.add "slot", valid_596272
  var valid_596273 = path.getOrDefault("subscriptionId")
  valid_596273 = validateParameter(valid_596273, JString, required = true,
                                 default = nil)
  if valid_596273 != nil:
    section.add "subscriptionId", valid_596273
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596274 = query.getOrDefault("api-version")
  valid_596274 = validateParameter(valid_596274, JString, required = true,
                                 default = nil)
  if valid_596274 != nil:
    section.add "api-version", valid_596274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596275: Call_WebAppsListContinuousWebJobsSlot_596267;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_596275.validator(path, query, header, formData, body)
  let scheme = call_596275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596275.url(scheme.get, call_596275.host, call_596275.base,
                         call_596275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596275, url, valid)

proc call*(call_596276: Call_WebAppsListContinuousWebJobsSlot_596267;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobsSlot
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596277 = newJObject()
  var query_596278 = newJObject()
  add(path_596277, "resourceGroupName", newJString(resourceGroupName))
  add(query_596278, "api-version", newJString(apiVersion))
  add(path_596277, "name", newJString(name))
  add(path_596277, "slot", newJString(slot))
  add(path_596277, "subscriptionId", newJString(subscriptionId))
  result = call_596276.call(path_596277, query_596278, nil, nil, nil)

var webAppsListContinuousWebJobsSlot* = Call_WebAppsListContinuousWebJobsSlot_596267(
    name: "webAppsListContinuousWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobsSlot_596268, base: "",
    url: url_WebAppsListContinuousWebJobsSlot_596269, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJobSlot_596279 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetContinuousWebJobSlot_596281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJobSlot_596280(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596282 = path.getOrDefault("resourceGroupName")
  valid_596282 = validateParameter(valid_596282, JString, required = true,
                                 default = nil)
  if valid_596282 != nil:
    section.add "resourceGroupName", valid_596282
  var valid_596283 = path.getOrDefault("name")
  valid_596283 = validateParameter(valid_596283, JString, required = true,
                                 default = nil)
  if valid_596283 != nil:
    section.add "name", valid_596283
  var valid_596284 = path.getOrDefault("slot")
  valid_596284 = validateParameter(valid_596284, JString, required = true,
                                 default = nil)
  if valid_596284 != nil:
    section.add "slot", valid_596284
  var valid_596285 = path.getOrDefault("subscriptionId")
  valid_596285 = validateParameter(valid_596285, JString, required = true,
                                 default = nil)
  if valid_596285 != nil:
    section.add "subscriptionId", valid_596285
  var valid_596286 = path.getOrDefault("webJobName")
  valid_596286 = validateParameter(valid_596286, JString, required = true,
                                 default = nil)
  if valid_596286 != nil:
    section.add "webJobName", valid_596286
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596287 = query.getOrDefault("api-version")
  valid_596287 = validateParameter(valid_596287, JString, required = true,
                                 default = nil)
  if valid_596287 != nil:
    section.add "api-version", valid_596287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596288: Call_WebAppsGetContinuousWebJobSlot_596279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596288.validator(path, query, header, formData, body)
  let scheme = call_596288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596288.url(scheme.get, call_596288.host, call_596288.base,
                         call_596288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596288, url, valid)

proc call*(call_596289: Call_WebAppsGetContinuousWebJobSlot_596279;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJobSlot
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596290 = newJObject()
  var query_596291 = newJObject()
  add(path_596290, "resourceGroupName", newJString(resourceGroupName))
  add(query_596291, "api-version", newJString(apiVersion))
  add(path_596290, "name", newJString(name))
  add(path_596290, "slot", newJString(slot))
  add(path_596290, "subscriptionId", newJString(subscriptionId))
  add(path_596290, "webJobName", newJString(webJobName))
  result = call_596289.call(path_596290, query_596291, nil, nil, nil)

var webAppsGetContinuousWebJobSlot* = Call_WebAppsGetContinuousWebJobSlot_596279(
    name: "webAppsGetContinuousWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJobSlot_596280, base: "",
    url: url_WebAppsGetContinuousWebJobSlot_596281, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJobSlot_596292 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteContinuousWebJobSlot_596294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJobSlot_596293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596295 = path.getOrDefault("resourceGroupName")
  valid_596295 = validateParameter(valid_596295, JString, required = true,
                                 default = nil)
  if valid_596295 != nil:
    section.add "resourceGroupName", valid_596295
  var valid_596296 = path.getOrDefault("name")
  valid_596296 = validateParameter(valid_596296, JString, required = true,
                                 default = nil)
  if valid_596296 != nil:
    section.add "name", valid_596296
  var valid_596297 = path.getOrDefault("slot")
  valid_596297 = validateParameter(valid_596297, JString, required = true,
                                 default = nil)
  if valid_596297 != nil:
    section.add "slot", valid_596297
  var valid_596298 = path.getOrDefault("subscriptionId")
  valid_596298 = validateParameter(valid_596298, JString, required = true,
                                 default = nil)
  if valid_596298 != nil:
    section.add "subscriptionId", valid_596298
  var valid_596299 = path.getOrDefault("webJobName")
  valid_596299 = validateParameter(valid_596299, JString, required = true,
                                 default = nil)
  if valid_596299 != nil:
    section.add "webJobName", valid_596299
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596300 = query.getOrDefault("api-version")
  valid_596300 = validateParameter(valid_596300, JString, required = true,
                                 default = nil)
  if valid_596300 != nil:
    section.add "api-version", valid_596300
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596301: Call_WebAppsDeleteContinuousWebJobSlot_596292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596301.validator(path, query, header, formData, body)
  let scheme = call_596301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596301.url(scheme.get, call_596301.host, call_596301.base,
                         call_596301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596301, url, valid)

proc call*(call_596302: Call_WebAppsDeleteContinuousWebJobSlot_596292;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJobSlot
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596303 = newJObject()
  var query_596304 = newJObject()
  add(path_596303, "resourceGroupName", newJString(resourceGroupName))
  add(query_596304, "api-version", newJString(apiVersion))
  add(path_596303, "name", newJString(name))
  add(path_596303, "slot", newJString(slot))
  add(path_596303, "subscriptionId", newJString(subscriptionId))
  add(path_596303, "webJobName", newJString(webJobName))
  result = call_596302.call(path_596303, query_596304, nil, nil, nil)

var webAppsDeleteContinuousWebJobSlot* = Call_WebAppsDeleteContinuousWebJobSlot_596292(
    name: "webAppsDeleteContinuousWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJobSlot_596293, base: "",
    url: url_WebAppsDeleteContinuousWebJobSlot_596294, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJobSlot_596305 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartContinuousWebJobSlot_596307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJobSlot_596306(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596308 = path.getOrDefault("resourceGroupName")
  valid_596308 = validateParameter(valid_596308, JString, required = true,
                                 default = nil)
  if valid_596308 != nil:
    section.add "resourceGroupName", valid_596308
  var valid_596309 = path.getOrDefault("name")
  valid_596309 = validateParameter(valid_596309, JString, required = true,
                                 default = nil)
  if valid_596309 != nil:
    section.add "name", valid_596309
  var valid_596310 = path.getOrDefault("slot")
  valid_596310 = validateParameter(valid_596310, JString, required = true,
                                 default = nil)
  if valid_596310 != nil:
    section.add "slot", valid_596310
  var valid_596311 = path.getOrDefault("subscriptionId")
  valid_596311 = validateParameter(valid_596311, JString, required = true,
                                 default = nil)
  if valid_596311 != nil:
    section.add "subscriptionId", valid_596311
  var valid_596312 = path.getOrDefault("webJobName")
  valid_596312 = validateParameter(valid_596312, JString, required = true,
                                 default = nil)
  if valid_596312 != nil:
    section.add "webJobName", valid_596312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596313 = query.getOrDefault("api-version")
  valid_596313 = validateParameter(valid_596313, JString, required = true,
                                 default = nil)
  if valid_596313 != nil:
    section.add "api-version", valid_596313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596314: Call_WebAppsStartContinuousWebJobSlot_596305;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_596314.validator(path, query, header, formData, body)
  let scheme = call_596314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596314.url(scheme.get, call_596314.host, call_596314.base,
                         call_596314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596314, url, valid)

proc call*(call_596315: Call_WebAppsStartContinuousWebJobSlot_596305;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJobSlot
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596316 = newJObject()
  var query_596317 = newJObject()
  add(path_596316, "resourceGroupName", newJString(resourceGroupName))
  add(query_596317, "api-version", newJString(apiVersion))
  add(path_596316, "name", newJString(name))
  add(path_596316, "slot", newJString(slot))
  add(path_596316, "subscriptionId", newJString(subscriptionId))
  add(path_596316, "webJobName", newJString(webJobName))
  result = call_596315.call(path_596316, query_596317, nil, nil, nil)

var webAppsStartContinuousWebJobSlot* = Call_WebAppsStartContinuousWebJobSlot_596305(
    name: "webAppsStartContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJobSlot_596306, base: "",
    url: url_WebAppsStartContinuousWebJobSlot_596307, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJobSlot_596318 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopContinuousWebJobSlot_596320(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJobSlot_596319(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596321 = path.getOrDefault("resourceGroupName")
  valid_596321 = validateParameter(valid_596321, JString, required = true,
                                 default = nil)
  if valid_596321 != nil:
    section.add "resourceGroupName", valid_596321
  var valid_596322 = path.getOrDefault("name")
  valid_596322 = validateParameter(valid_596322, JString, required = true,
                                 default = nil)
  if valid_596322 != nil:
    section.add "name", valid_596322
  var valid_596323 = path.getOrDefault("slot")
  valid_596323 = validateParameter(valid_596323, JString, required = true,
                                 default = nil)
  if valid_596323 != nil:
    section.add "slot", valid_596323
  var valid_596324 = path.getOrDefault("subscriptionId")
  valid_596324 = validateParameter(valid_596324, JString, required = true,
                                 default = nil)
  if valid_596324 != nil:
    section.add "subscriptionId", valid_596324
  var valid_596325 = path.getOrDefault("webJobName")
  valid_596325 = validateParameter(valid_596325, JString, required = true,
                                 default = nil)
  if valid_596325 != nil:
    section.add "webJobName", valid_596325
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596326 = query.getOrDefault("api-version")
  valid_596326 = validateParameter(valid_596326, JString, required = true,
                                 default = nil)
  if valid_596326 != nil:
    section.add "api-version", valid_596326
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596327: Call_WebAppsStopContinuousWebJobSlot_596318;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_596327.validator(path, query, header, formData, body)
  let scheme = call_596327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596327.url(scheme.get, call_596327.host, call_596327.base,
                         call_596327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596327, url, valid)

proc call*(call_596328: Call_WebAppsStopContinuousWebJobSlot_596318;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJobSlot
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596329 = newJObject()
  var query_596330 = newJObject()
  add(path_596329, "resourceGroupName", newJString(resourceGroupName))
  add(query_596330, "api-version", newJString(apiVersion))
  add(path_596329, "name", newJString(name))
  add(path_596329, "slot", newJString(slot))
  add(path_596329, "subscriptionId", newJString(subscriptionId))
  add(path_596329, "webJobName", newJString(webJobName))
  result = call_596328.call(path_596329, query_596330, nil, nil, nil)

var webAppsStopContinuousWebJobSlot* = Call_WebAppsStopContinuousWebJobSlot_596318(
    name: "webAppsStopContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJobSlot_596319, base: "",
    url: url_WebAppsStopContinuousWebJobSlot_596320, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentsSlot_596331 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeploymentsSlot_596333(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentsSlot_596332(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596334 = path.getOrDefault("resourceGroupName")
  valid_596334 = validateParameter(valid_596334, JString, required = true,
                                 default = nil)
  if valid_596334 != nil:
    section.add "resourceGroupName", valid_596334
  var valid_596335 = path.getOrDefault("name")
  valid_596335 = validateParameter(valid_596335, JString, required = true,
                                 default = nil)
  if valid_596335 != nil:
    section.add "name", valid_596335
  var valid_596336 = path.getOrDefault("slot")
  valid_596336 = validateParameter(valid_596336, JString, required = true,
                                 default = nil)
  if valid_596336 != nil:
    section.add "slot", valid_596336
  var valid_596337 = path.getOrDefault("subscriptionId")
  valid_596337 = validateParameter(valid_596337, JString, required = true,
                                 default = nil)
  if valid_596337 != nil:
    section.add "subscriptionId", valid_596337
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596338 = query.getOrDefault("api-version")
  valid_596338 = validateParameter(valid_596338, JString, required = true,
                                 default = nil)
  if valid_596338 != nil:
    section.add "api-version", valid_596338
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596339: Call_WebAppsListDeploymentsSlot_596331; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_596339.validator(path, query, header, formData, body)
  let scheme = call_596339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596339.url(scheme.get, call_596339.host, call_596339.base,
                         call_596339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596339, url, valid)

proc call*(call_596340: Call_WebAppsListDeploymentsSlot_596331;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeploymentsSlot
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596341 = newJObject()
  var query_596342 = newJObject()
  add(path_596341, "resourceGroupName", newJString(resourceGroupName))
  add(query_596342, "api-version", newJString(apiVersion))
  add(path_596341, "name", newJString(name))
  add(path_596341, "slot", newJString(slot))
  add(path_596341, "subscriptionId", newJString(subscriptionId))
  result = call_596340.call(path_596341, query_596342, nil, nil, nil)

var webAppsListDeploymentsSlot* = Call_WebAppsListDeploymentsSlot_596331(
    name: "webAppsListDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_WebAppsListDeploymentsSlot_596332, base: "",
    url: url_WebAppsListDeploymentsSlot_596333, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeploymentSlot_596356 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateDeploymentSlot_596358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeploymentSlot_596357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596359 = path.getOrDefault("resourceGroupName")
  valid_596359 = validateParameter(valid_596359, JString, required = true,
                                 default = nil)
  if valid_596359 != nil:
    section.add "resourceGroupName", valid_596359
  var valid_596360 = path.getOrDefault("name")
  valid_596360 = validateParameter(valid_596360, JString, required = true,
                                 default = nil)
  if valid_596360 != nil:
    section.add "name", valid_596360
  var valid_596361 = path.getOrDefault("slot")
  valid_596361 = validateParameter(valid_596361, JString, required = true,
                                 default = nil)
  if valid_596361 != nil:
    section.add "slot", valid_596361
  var valid_596362 = path.getOrDefault("subscriptionId")
  valid_596362 = validateParameter(valid_596362, JString, required = true,
                                 default = nil)
  if valid_596362 != nil:
    section.add "subscriptionId", valid_596362
  var valid_596363 = path.getOrDefault("id")
  valid_596363 = validateParameter(valid_596363, JString, required = true,
                                 default = nil)
  if valid_596363 != nil:
    section.add "id", valid_596363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596364 = query.getOrDefault("api-version")
  valid_596364 = validateParameter(valid_596364, JString, required = true,
                                 default = nil)
  if valid_596364 != nil:
    section.add "api-version", valid_596364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596366: Call_WebAppsCreateDeploymentSlot_596356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_596366.validator(path, query, header, formData, body)
  let scheme = call_596366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596366.url(scheme.get, call_596366.host, call_596366.base,
                         call_596366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596366, url, valid)

proc call*(call_596367: Call_WebAppsCreateDeploymentSlot_596356;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeploymentSlot
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_596368 = newJObject()
  var query_596369 = newJObject()
  var body_596370 = newJObject()
  add(path_596368, "resourceGroupName", newJString(resourceGroupName))
  add(query_596369, "api-version", newJString(apiVersion))
  add(path_596368, "name", newJString(name))
  add(path_596368, "slot", newJString(slot))
  add(path_596368, "subscriptionId", newJString(subscriptionId))
  add(path_596368, "id", newJString(id))
  if deployment != nil:
    body_596370 = deployment
  result = call_596367.call(path_596368, query_596369, nil, nil, body_596370)

var webAppsCreateDeploymentSlot* = Call_WebAppsCreateDeploymentSlot_596356(
    name: "webAppsCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsCreateDeploymentSlot_596357, base: "",
    url: url_WebAppsCreateDeploymentSlot_596358, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeploymentSlot_596343 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDeploymentSlot_596345(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeploymentSlot_596344(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596346 = path.getOrDefault("resourceGroupName")
  valid_596346 = validateParameter(valid_596346, JString, required = true,
                                 default = nil)
  if valid_596346 != nil:
    section.add "resourceGroupName", valid_596346
  var valid_596347 = path.getOrDefault("name")
  valid_596347 = validateParameter(valid_596347, JString, required = true,
                                 default = nil)
  if valid_596347 != nil:
    section.add "name", valid_596347
  var valid_596348 = path.getOrDefault("slot")
  valid_596348 = validateParameter(valid_596348, JString, required = true,
                                 default = nil)
  if valid_596348 != nil:
    section.add "slot", valid_596348
  var valid_596349 = path.getOrDefault("subscriptionId")
  valid_596349 = validateParameter(valid_596349, JString, required = true,
                                 default = nil)
  if valid_596349 != nil:
    section.add "subscriptionId", valid_596349
  var valid_596350 = path.getOrDefault("id")
  valid_596350 = validateParameter(valid_596350, JString, required = true,
                                 default = nil)
  if valid_596350 != nil:
    section.add "id", valid_596350
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596351 = query.getOrDefault("api-version")
  valid_596351 = validateParameter(valid_596351, JString, required = true,
                                 default = nil)
  if valid_596351 != nil:
    section.add "api-version", valid_596351
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596352: Call_WebAppsGetDeploymentSlot_596343; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596352.validator(path, query, header, formData, body)
  let scheme = call_596352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596352.url(scheme.get, call_596352.host, call_596352.base,
                         call_596352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596352, url, valid)

proc call*(call_596353: Call_WebAppsGetDeploymentSlot_596343;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeploymentSlot
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_596354 = newJObject()
  var query_596355 = newJObject()
  add(path_596354, "resourceGroupName", newJString(resourceGroupName))
  add(query_596355, "api-version", newJString(apiVersion))
  add(path_596354, "name", newJString(name))
  add(path_596354, "slot", newJString(slot))
  add(path_596354, "subscriptionId", newJString(subscriptionId))
  add(path_596354, "id", newJString(id))
  result = call_596353.call(path_596354, query_596355, nil, nil, nil)

var webAppsGetDeploymentSlot* = Call_WebAppsGetDeploymentSlot_596343(
    name: "webAppsGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsGetDeploymentSlot_596344, base: "",
    url: url_WebAppsGetDeploymentSlot_596345, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeploymentSlot_596371 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDeploymentSlot_596373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeploymentSlot_596372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596374 = path.getOrDefault("resourceGroupName")
  valid_596374 = validateParameter(valid_596374, JString, required = true,
                                 default = nil)
  if valid_596374 != nil:
    section.add "resourceGroupName", valid_596374
  var valid_596375 = path.getOrDefault("name")
  valid_596375 = validateParameter(valid_596375, JString, required = true,
                                 default = nil)
  if valid_596375 != nil:
    section.add "name", valid_596375
  var valid_596376 = path.getOrDefault("slot")
  valid_596376 = validateParameter(valid_596376, JString, required = true,
                                 default = nil)
  if valid_596376 != nil:
    section.add "slot", valid_596376
  var valid_596377 = path.getOrDefault("subscriptionId")
  valid_596377 = validateParameter(valid_596377, JString, required = true,
                                 default = nil)
  if valid_596377 != nil:
    section.add "subscriptionId", valid_596377
  var valid_596378 = path.getOrDefault("id")
  valid_596378 = validateParameter(valid_596378, JString, required = true,
                                 default = nil)
  if valid_596378 != nil:
    section.add "id", valid_596378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596379 = query.getOrDefault("api-version")
  valid_596379 = validateParameter(valid_596379, JString, required = true,
                                 default = nil)
  if valid_596379 != nil:
    section.add "api-version", valid_596379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596380: Call_WebAppsDeleteDeploymentSlot_596371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596380.validator(path, query, header, formData, body)
  let scheme = call_596380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596380.url(scheme.get, call_596380.host, call_596380.base,
                         call_596380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596380, url, valid)

proc call*(call_596381: Call_WebAppsDeleteDeploymentSlot_596371;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeploymentSlot
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_596382 = newJObject()
  var query_596383 = newJObject()
  add(path_596382, "resourceGroupName", newJString(resourceGroupName))
  add(query_596383, "api-version", newJString(apiVersion))
  add(path_596382, "name", newJString(name))
  add(path_596382, "slot", newJString(slot))
  add(path_596382, "subscriptionId", newJString(subscriptionId))
  add(path_596382, "id", newJString(id))
  result = call_596381.call(path_596382, query_596383, nil, nil, nil)

var webAppsDeleteDeploymentSlot* = Call_WebAppsDeleteDeploymentSlot_596371(
    name: "webAppsDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsDeleteDeploymentSlot_596372, base: "",
    url: url_WebAppsDeleteDeploymentSlot_596373, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLogSlot_596384 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeploymentLogSlot_596386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLogSlot_596385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596387 = path.getOrDefault("resourceGroupName")
  valid_596387 = validateParameter(valid_596387, JString, required = true,
                                 default = nil)
  if valid_596387 != nil:
    section.add "resourceGroupName", valid_596387
  var valid_596388 = path.getOrDefault("name")
  valid_596388 = validateParameter(valid_596388, JString, required = true,
                                 default = nil)
  if valid_596388 != nil:
    section.add "name", valid_596388
  var valid_596389 = path.getOrDefault("slot")
  valid_596389 = validateParameter(valid_596389, JString, required = true,
                                 default = nil)
  if valid_596389 != nil:
    section.add "slot", valid_596389
  var valid_596390 = path.getOrDefault("subscriptionId")
  valid_596390 = validateParameter(valid_596390, JString, required = true,
                                 default = nil)
  if valid_596390 != nil:
    section.add "subscriptionId", valid_596390
  var valid_596391 = path.getOrDefault("id")
  valid_596391 = validateParameter(valid_596391, JString, required = true,
                                 default = nil)
  if valid_596391 != nil:
    section.add "id", valid_596391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596392 = query.getOrDefault("api-version")
  valid_596392 = validateParameter(valid_596392, JString, required = true,
                                 default = nil)
  if valid_596392 != nil:
    section.add "api-version", valid_596392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596393: Call_WebAppsListDeploymentLogSlot_596384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_596393.validator(path, query, header, formData, body)
  let scheme = call_596393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596393.url(scheme.get, call_596393.host, call_596393.base,
                         call_596393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596393, url, valid)

proc call*(call_596394: Call_WebAppsListDeploymentLogSlot_596384;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLogSlot
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_596395 = newJObject()
  var query_596396 = newJObject()
  add(path_596395, "resourceGroupName", newJString(resourceGroupName))
  add(query_596396, "api-version", newJString(apiVersion))
  add(path_596395, "name", newJString(name))
  add(path_596395, "slot", newJString(slot))
  add(path_596395, "subscriptionId", newJString(subscriptionId))
  add(path_596395, "id", newJString(id))
  result = call_596394.call(path_596395, query_596396, nil, nil, nil)

var webAppsListDeploymentLogSlot* = Call_WebAppsListDeploymentLogSlot_596384(
    name: "webAppsListDeploymentLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLogSlot_596385, base: "",
    url: url_WebAppsListDeploymentLogSlot_596386, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverBackupSlot_596397 = ref object of OpenApiRestCall_593437
proc url_WebAppsDiscoverBackupSlot_596399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/discoverbackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverBackupSlot_596398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596400 = path.getOrDefault("resourceGroupName")
  valid_596400 = validateParameter(valid_596400, JString, required = true,
                                 default = nil)
  if valid_596400 != nil:
    section.add "resourceGroupName", valid_596400
  var valid_596401 = path.getOrDefault("name")
  valid_596401 = validateParameter(valid_596401, JString, required = true,
                                 default = nil)
  if valid_596401 != nil:
    section.add "name", valid_596401
  var valid_596402 = path.getOrDefault("slot")
  valid_596402 = validateParameter(valid_596402, JString, required = true,
                                 default = nil)
  if valid_596402 != nil:
    section.add "slot", valid_596402
  var valid_596403 = path.getOrDefault("subscriptionId")
  valid_596403 = validateParameter(valid_596403, JString, required = true,
                                 default = nil)
  if valid_596403 != nil:
    section.add "subscriptionId", valid_596403
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596404 = query.getOrDefault("api-version")
  valid_596404 = validateParameter(valid_596404, JString, required = true,
                                 default = nil)
  if valid_596404 != nil:
    section.add "api-version", valid_596404
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596406: Call_WebAppsDiscoverBackupSlot_596397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  let valid = call_596406.validator(path, query, header, formData, body)
  let scheme = call_596406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596406.url(scheme.get, call_596406.host, call_596406.base,
                         call_596406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596406, url, valid)

proc call*(call_596407: Call_WebAppsDiscoverBackupSlot_596397;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverBackupSlot
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_596408 = newJObject()
  var query_596409 = newJObject()
  var body_596410 = newJObject()
  add(path_596408, "resourceGroupName", newJString(resourceGroupName))
  add(query_596409, "api-version", newJString(apiVersion))
  add(path_596408, "name", newJString(name))
  add(path_596408, "slot", newJString(slot))
  add(path_596408, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_596410 = request
  result = call_596407.call(path_596408, query_596409, nil, nil, body_596410)

var webAppsDiscoverBackupSlot* = Call_WebAppsDiscoverBackupSlot_596397(
    name: "webAppsDiscoverBackupSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
    validator: validate_WebAppsDiscoverBackupSlot_596398, base: "",
    url: url_WebAppsDiscoverBackupSlot_596399, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiersSlot_596411 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDomainOwnershipIdentifiersSlot_596413(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiersSlot_596412(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596414 = path.getOrDefault("resourceGroupName")
  valid_596414 = validateParameter(valid_596414, JString, required = true,
                                 default = nil)
  if valid_596414 != nil:
    section.add "resourceGroupName", valid_596414
  var valid_596415 = path.getOrDefault("name")
  valid_596415 = validateParameter(valid_596415, JString, required = true,
                                 default = nil)
  if valid_596415 != nil:
    section.add "name", valid_596415
  var valid_596416 = path.getOrDefault("slot")
  valid_596416 = validateParameter(valid_596416, JString, required = true,
                                 default = nil)
  if valid_596416 != nil:
    section.add "slot", valid_596416
  var valid_596417 = path.getOrDefault("subscriptionId")
  valid_596417 = validateParameter(valid_596417, JString, required = true,
                                 default = nil)
  if valid_596417 != nil:
    section.add "subscriptionId", valid_596417
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596418 = query.getOrDefault("api-version")
  valid_596418 = validateParameter(valid_596418, JString, required = true,
                                 default = nil)
  if valid_596418 != nil:
    section.add "api-version", valid_596418
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596419: Call_WebAppsListDomainOwnershipIdentifiersSlot_596411;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_596419.validator(path, query, header, formData, body)
  let scheme = call_596419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596419.url(scheme.get, call_596419.host, call_596419.base,
                         call_596419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596419, url, valid)

proc call*(call_596420: Call_WebAppsListDomainOwnershipIdentifiersSlot_596411;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiersSlot
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596421 = newJObject()
  var query_596422 = newJObject()
  add(path_596421, "resourceGroupName", newJString(resourceGroupName))
  add(query_596422, "api-version", newJString(apiVersion))
  add(path_596421, "name", newJString(name))
  add(path_596421, "slot", newJString(slot))
  add(path_596421, "subscriptionId", newJString(subscriptionId))
  result = call_596420.call(path_596421, query_596422, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiersSlot* = Call_WebAppsListDomainOwnershipIdentifiersSlot_596411(
    name: "webAppsListDomainOwnershipIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiersSlot_596412,
    base: "", url: url_WebAppsListDomainOwnershipIdentifiersSlot_596413,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596436 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596438(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596437(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596439 = path.getOrDefault("resourceGroupName")
  valid_596439 = validateParameter(valid_596439, JString, required = true,
                                 default = nil)
  if valid_596439 != nil:
    section.add "resourceGroupName", valid_596439
  var valid_596440 = path.getOrDefault("name")
  valid_596440 = validateParameter(valid_596440, JString, required = true,
                                 default = nil)
  if valid_596440 != nil:
    section.add "name", valid_596440
  var valid_596441 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596441 = validateParameter(valid_596441, JString, required = true,
                                 default = nil)
  if valid_596441 != nil:
    section.add "domainOwnershipIdentifierName", valid_596441
  var valid_596442 = path.getOrDefault("slot")
  valid_596442 = validateParameter(valid_596442, JString, required = true,
                                 default = nil)
  if valid_596442 != nil:
    section.add "slot", valid_596442
  var valid_596443 = path.getOrDefault("subscriptionId")
  valid_596443 = validateParameter(valid_596443, JString, required = true,
                                 default = nil)
  if valid_596443 != nil:
    section.add "subscriptionId", valid_596443
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596444 = query.getOrDefault("api-version")
  valid_596444 = validateParameter(valid_596444, JString, required = true,
                                 default = nil)
  if valid_596444 != nil:
    section.add "api-version", valid_596444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596446: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596436;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_596446.validator(path, query, header, formData, body)
  let scheme = call_596446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596446.url(scheme.get, call_596446.host, call_596446.base,
                         call_596446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596446, url, valid)

proc call*(call_596447: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596436;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596448 = newJObject()
  var query_596449 = newJObject()
  var body_596450 = newJObject()
  add(path_596448, "resourceGroupName", newJString(resourceGroupName))
  add(query_596449, "api-version", newJString(apiVersion))
  add(path_596448, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_596450 = domainOwnershipIdentifier
  add(path_596448, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596448, "slot", newJString(slot))
  add(path_596448, "subscriptionId", newJString(subscriptionId))
  result = call_596447.call(path_596448, query_596449, nil, nil, body_596450)

var webAppsCreateOrUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596436(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596437,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596438,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifierSlot_596423 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDomainOwnershipIdentifierSlot_596425(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifierSlot_596424(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596426 = path.getOrDefault("resourceGroupName")
  valid_596426 = validateParameter(valid_596426, JString, required = true,
                                 default = nil)
  if valid_596426 != nil:
    section.add "resourceGroupName", valid_596426
  var valid_596427 = path.getOrDefault("name")
  valid_596427 = validateParameter(valid_596427, JString, required = true,
                                 default = nil)
  if valid_596427 != nil:
    section.add "name", valid_596427
  var valid_596428 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596428 = validateParameter(valid_596428, JString, required = true,
                                 default = nil)
  if valid_596428 != nil:
    section.add "domainOwnershipIdentifierName", valid_596428
  var valid_596429 = path.getOrDefault("slot")
  valid_596429 = validateParameter(valid_596429, JString, required = true,
                                 default = nil)
  if valid_596429 != nil:
    section.add "slot", valid_596429
  var valid_596430 = path.getOrDefault("subscriptionId")
  valid_596430 = validateParameter(valid_596430, JString, required = true,
                                 default = nil)
  if valid_596430 != nil:
    section.add "subscriptionId", valid_596430
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596431 = query.getOrDefault("api-version")
  valid_596431 = validateParameter(valid_596431, JString, required = true,
                                 default = nil)
  if valid_596431 != nil:
    section.add "api-version", valid_596431
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596432: Call_WebAppsGetDomainOwnershipIdentifierSlot_596423;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_596432.validator(path, query, header, formData, body)
  let scheme = call_596432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596432.url(scheme.get, call_596432.host, call_596432.base,
                         call_596432.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596432, url, valid)

proc call*(call_596433: Call_WebAppsGetDomainOwnershipIdentifierSlot_596423;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifierSlot
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596434 = newJObject()
  var query_596435 = newJObject()
  add(path_596434, "resourceGroupName", newJString(resourceGroupName))
  add(query_596435, "api-version", newJString(apiVersion))
  add(path_596434, "name", newJString(name))
  add(path_596434, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596434, "slot", newJString(slot))
  add(path_596434, "subscriptionId", newJString(subscriptionId))
  result = call_596433.call(path_596434, query_596435, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifierSlot* = Call_WebAppsGetDomainOwnershipIdentifierSlot_596423(
    name: "webAppsGetDomainOwnershipIdentifierSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifierSlot_596424, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifierSlot_596425,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596464 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDomainOwnershipIdentifierSlot_596466(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifierSlot_596465(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596467 = path.getOrDefault("resourceGroupName")
  valid_596467 = validateParameter(valid_596467, JString, required = true,
                                 default = nil)
  if valid_596467 != nil:
    section.add "resourceGroupName", valid_596467
  var valid_596468 = path.getOrDefault("name")
  valid_596468 = validateParameter(valid_596468, JString, required = true,
                                 default = nil)
  if valid_596468 != nil:
    section.add "name", valid_596468
  var valid_596469 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596469 = validateParameter(valid_596469, JString, required = true,
                                 default = nil)
  if valid_596469 != nil:
    section.add "domainOwnershipIdentifierName", valid_596469
  var valid_596470 = path.getOrDefault("slot")
  valid_596470 = validateParameter(valid_596470, JString, required = true,
                                 default = nil)
  if valid_596470 != nil:
    section.add "slot", valid_596470
  var valid_596471 = path.getOrDefault("subscriptionId")
  valid_596471 = validateParameter(valid_596471, JString, required = true,
                                 default = nil)
  if valid_596471 != nil:
    section.add "subscriptionId", valid_596471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596472 = query.getOrDefault("api-version")
  valid_596472 = validateParameter(valid_596472, JString, required = true,
                                 default = nil)
  if valid_596472 != nil:
    section.add "api-version", valid_596472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596474: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596464;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_596474.validator(path, query, header, formData, body)
  let scheme = call_596474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596474.url(scheme.get, call_596474.host, call_596474.base,
                         call_596474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596474, url, valid)

proc call*(call_596475: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596464;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596476 = newJObject()
  var query_596477 = newJObject()
  var body_596478 = newJObject()
  add(path_596476, "resourceGroupName", newJString(resourceGroupName))
  add(query_596477, "api-version", newJString(apiVersion))
  add(path_596476, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_596478 = domainOwnershipIdentifier
  add(path_596476, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596476, "slot", newJString(slot))
  add(path_596476, "subscriptionId", newJString(subscriptionId))
  result = call_596475.call(path_596476, query_596477, nil, nil, body_596478)

var webAppsUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596464(
    name: "webAppsUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifierSlot_596465,
    base: "", url: url_WebAppsUpdateDomainOwnershipIdentifierSlot_596466,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596451 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDomainOwnershipIdentifierSlot_596453(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifierSlot_596452(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596454 = path.getOrDefault("resourceGroupName")
  valid_596454 = validateParameter(valid_596454, JString, required = true,
                                 default = nil)
  if valid_596454 != nil:
    section.add "resourceGroupName", valid_596454
  var valid_596455 = path.getOrDefault("name")
  valid_596455 = validateParameter(valid_596455, JString, required = true,
                                 default = nil)
  if valid_596455 != nil:
    section.add "name", valid_596455
  var valid_596456 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596456 = validateParameter(valid_596456, JString, required = true,
                                 default = nil)
  if valid_596456 != nil:
    section.add "domainOwnershipIdentifierName", valid_596456
  var valid_596457 = path.getOrDefault("slot")
  valid_596457 = validateParameter(valid_596457, JString, required = true,
                                 default = nil)
  if valid_596457 != nil:
    section.add "slot", valid_596457
  var valid_596458 = path.getOrDefault("subscriptionId")
  valid_596458 = validateParameter(valid_596458, JString, required = true,
                                 default = nil)
  if valid_596458 != nil:
    section.add "subscriptionId", valid_596458
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596459 = query.getOrDefault("api-version")
  valid_596459 = validateParameter(valid_596459, JString, required = true,
                                 default = nil)
  if valid_596459 != nil:
    section.add "api-version", valid_596459
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596460: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596451;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_596460.validator(path, query, header, formData, body)
  let scheme = call_596460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596460.url(scheme.get, call_596460.host, call_596460.base,
                         call_596460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596460, url, valid)

proc call*(call_596461: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596451;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifierSlot
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596462 = newJObject()
  var query_596463 = newJObject()
  add(path_596462, "resourceGroupName", newJString(resourceGroupName))
  add(query_596463, "api-version", newJString(apiVersion))
  add(path_596462, "name", newJString(name))
  add(path_596462, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596462, "slot", newJString(slot))
  add(path_596462, "subscriptionId", newJString(subscriptionId))
  result = call_596461.call(path_596462, query_596463, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifierSlot* = Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596451(
    name: "webAppsDeleteDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifierSlot_596452,
    base: "", url: url_WebAppsDeleteDomainOwnershipIdentifierSlot_596453,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperationSlot_596491 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateMSDeployOperationSlot_596493(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperationSlot_596492(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596494 = path.getOrDefault("resourceGroupName")
  valid_596494 = validateParameter(valid_596494, JString, required = true,
                                 default = nil)
  if valid_596494 != nil:
    section.add "resourceGroupName", valid_596494
  var valid_596495 = path.getOrDefault("name")
  valid_596495 = validateParameter(valid_596495, JString, required = true,
                                 default = nil)
  if valid_596495 != nil:
    section.add "name", valid_596495
  var valid_596496 = path.getOrDefault("slot")
  valid_596496 = validateParameter(valid_596496, JString, required = true,
                                 default = nil)
  if valid_596496 != nil:
    section.add "slot", valid_596496
  var valid_596497 = path.getOrDefault("subscriptionId")
  valid_596497 = validateParameter(valid_596497, JString, required = true,
                                 default = nil)
  if valid_596497 != nil:
    section.add "subscriptionId", valid_596497
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596498 = query.getOrDefault("api-version")
  valid_596498 = validateParameter(valid_596498, JString, required = true,
                                 default = nil)
  if valid_596498 != nil:
    section.add "api-version", valid_596498
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596500: Call_WebAppsCreateMSDeployOperationSlot_596491;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_596500.validator(path, query, header, formData, body)
  let scheme = call_596500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596500.url(scheme.get, call_596500.host, call_596500.base,
                         call_596500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596500, url, valid)

proc call*(call_596501: Call_WebAppsCreateMSDeployOperationSlot_596491;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_596502 = newJObject()
  var query_596503 = newJObject()
  var body_596504 = newJObject()
  add(path_596502, "resourceGroupName", newJString(resourceGroupName))
  add(query_596503, "api-version", newJString(apiVersion))
  add(path_596502, "name", newJString(name))
  add(path_596502, "slot", newJString(slot))
  add(path_596502, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_596504 = MSDeploy
  result = call_596501.call(path_596502, query_596503, nil, nil, body_596504)

var webAppsCreateMSDeployOperationSlot* = Call_WebAppsCreateMSDeployOperationSlot_596491(
    name: "webAppsCreateMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperationSlot_596492, base: "",
    url: url_WebAppsCreateMSDeployOperationSlot_596493, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatusSlot_596479 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployStatusSlot_596481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatusSlot_596480(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596482 = path.getOrDefault("resourceGroupName")
  valid_596482 = validateParameter(valid_596482, JString, required = true,
                                 default = nil)
  if valid_596482 != nil:
    section.add "resourceGroupName", valid_596482
  var valid_596483 = path.getOrDefault("name")
  valid_596483 = validateParameter(valid_596483, JString, required = true,
                                 default = nil)
  if valid_596483 != nil:
    section.add "name", valid_596483
  var valid_596484 = path.getOrDefault("slot")
  valid_596484 = validateParameter(valid_596484, JString, required = true,
                                 default = nil)
  if valid_596484 != nil:
    section.add "slot", valid_596484
  var valid_596485 = path.getOrDefault("subscriptionId")
  valid_596485 = validateParameter(valid_596485, JString, required = true,
                                 default = nil)
  if valid_596485 != nil:
    section.add "subscriptionId", valid_596485
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596486 = query.getOrDefault("api-version")
  valid_596486 = validateParameter(valid_596486, JString, required = true,
                                 default = nil)
  if valid_596486 != nil:
    section.add "api-version", valid_596486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596487: Call_WebAppsGetMSDeployStatusSlot_596479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_596487.validator(path, query, header, formData, body)
  let scheme = call_596487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596487.url(scheme.get, call_596487.host, call_596487.base,
                         call_596487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596487, url, valid)

proc call*(call_596488: Call_WebAppsGetMSDeployStatusSlot_596479;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596489 = newJObject()
  var query_596490 = newJObject()
  add(path_596489, "resourceGroupName", newJString(resourceGroupName))
  add(query_596490, "api-version", newJString(apiVersion))
  add(path_596489, "name", newJString(name))
  add(path_596489, "slot", newJString(slot))
  add(path_596489, "subscriptionId", newJString(subscriptionId))
  result = call_596488.call(path_596489, query_596490, nil, nil, nil)

var webAppsGetMSDeployStatusSlot* = Call_WebAppsGetMSDeployStatusSlot_596479(
    name: "webAppsGetMSDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatusSlot_596480, base: "",
    url: url_WebAppsGetMSDeployStatusSlot_596481, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLogSlot_596505 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployLogSlot_596507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLogSlot_596506(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596508 = path.getOrDefault("resourceGroupName")
  valid_596508 = validateParameter(valid_596508, JString, required = true,
                                 default = nil)
  if valid_596508 != nil:
    section.add "resourceGroupName", valid_596508
  var valid_596509 = path.getOrDefault("name")
  valid_596509 = validateParameter(valid_596509, JString, required = true,
                                 default = nil)
  if valid_596509 != nil:
    section.add "name", valid_596509
  var valid_596510 = path.getOrDefault("slot")
  valid_596510 = validateParameter(valid_596510, JString, required = true,
                                 default = nil)
  if valid_596510 != nil:
    section.add "slot", valid_596510
  var valid_596511 = path.getOrDefault("subscriptionId")
  valid_596511 = validateParameter(valid_596511, JString, required = true,
                                 default = nil)
  if valid_596511 != nil:
    section.add "subscriptionId", valid_596511
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596512 = query.getOrDefault("api-version")
  valid_596512 = validateParameter(valid_596512, JString, required = true,
                                 default = nil)
  if valid_596512 != nil:
    section.add "api-version", valid_596512
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596513: Call_WebAppsGetMSDeployLogSlot_596505; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_596513.validator(path, query, header, formData, body)
  let scheme = call_596513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596513.url(scheme.get, call_596513.host, call_596513.base,
                         call_596513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596513, url, valid)

proc call*(call_596514: Call_WebAppsGetMSDeployLogSlot_596505;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596515 = newJObject()
  var query_596516 = newJObject()
  add(path_596515, "resourceGroupName", newJString(resourceGroupName))
  add(query_596516, "api-version", newJString(apiVersion))
  add(path_596515, "name", newJString(name))
  add(path_596515, "slot", newJString(slot))
  add(path_596515, "subscriptionId", newJString(subscriptionId))
  result = call_596514.call(path_596515, query_596516, nil, nil, nil)

var webAppsGetMSDeployLogSlot* = Call_WebAppsGetMSDeployLogSlot_596505(
    name: "webAppsGetMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLogSlot_596506, base: "",
    url: url_WebAppsGetMSDeployLogSlot_596507, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceFunctionsSlot_596517 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceFunctionsSlot_596519(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceFunctionsSlot_596518(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596520 = path.getOrDefault("resourceGroupName")
  valid_596520 = validateParameter(valid_596520, JString, required = true,
                                 default = nil)
  if valid_596520 != nil:
    section.add "resourceGroupName", valid_596520
  var valid_596521 = path.getOrDefault("name")
  valid_596521 = validateParameter(valid_596521, JString, required = true,
                                 default = nil)
  if valid_596521 != nil:
    section.add "name", valid_596521
  var valid_596522 = path.getOrDefault("slot")
  valid_596522 = validateParameter(valid_596522, JString, required = true,
                                 default = nil)
  if valid_596522 != nil:
    section.add "slot", valid_596522
  var valid_596523 = path.getOrDefault("subscriptionId")
  valid_596523 = validateParameter(valid_596523, JString, required = true,
                                 default = nil)
  if valid_596523 != nil:
    section.add "subscriptionId", valid_596523
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596524 = query.getOrDefault("api-version")
  valid_596524 = validateParameter(valid_596524, JString, required = true,
                                 default = nil)
  if valid_596524 != nil:
    section.add "api-version", valid_596524
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596525: Call_WebAppsListInstanceFunctionsSlot_596517;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_596525.validator(path, query, header, formData, body)
  let scheme = call_596525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596525.url(scheme.get, call_596525.host, call_596525.base,
                         call_596525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596525, url, valid)

proc call*(call_596526: Call_WebAppsListInstanceFunctionsSlot_596517;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceFunctionsSlot
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596527 = newJObject()
  var query_596528 = newJObject()
  add(path_596527, "resourceGroupName", newJString(resourceGroupName))
  add(query_596528, "api-version", newJString(apiVersion))
  add(path_596527, "name", newJString(name))
  add(path_596527, "slot", newJString(slot))
  add(path_596527, "subscriptionId", newJString(subscriptionId))
  result = call_596526.call(path_596527, query_596528, nil, nil, nil)

var webAppsListInstanceFunctionsSlot* = Call_WebAppsListInstanceFunctionsSlot_596517(
    name: "webAppsListInstanceFunctionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    validator: validate_WebAppsListInstanceFunctionsSlot_596518, base: "",
    url: url_WebAppsListInstanceFunctionsSlot_596519, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminTokenSlot_596529 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetFunctionsAdminTokenSlot_596531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminTokenSlot_596530(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596532 = path.getOrDefault("resourceGroupName")
  valid_596532 = validateParameter(valid_596532, JString, required = true,
                                 default = nil)
  if valid_596532 != nil:
    section.add "resourceGroupName", valid_596532
  var valid_596533 = path.getOrDefault("name")
  valid_596533 = validateParameter(valid_596533, JString, required = true,
                                 default = nil)
  if valid_596533 != nil:
    section.add "name", valid_596533
  var valid_596534 = path.getOrDefault("slot")
  valid_596534 = validateParameter(valid_596534, JString, required = true,
                                 default = nil)
  if valid_596534 != nil:
    section.add "slot", valid_596534
  var valid_596535 = path.getOrDefault("subscriptionId")
  valid_596535 = validateParameter(valid_596535, JString, required = true,
                                 default = nil)
  if valid_596535 != nil:
    section.add "subscriptionId", valid_596535
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596536 = query.getOrDefault("api-version")
  valid_596536 = validateParameter(valid_596536, JString, required = true,
                                 default = nil)
  if valid_596536 != nil:
    section.add "api-version", valid_596536
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596537: Call_WebAppsGetFunctionsAdminTokenSlot_596529;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_596537.validator(path, query, header, formData, body)
  let scheme = call_596537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596537.url(scheme.get, call_596537.host, call_596537.base,
                         call_596537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596537, url, valid)

proc call*(call_596538: Call_WebAppsGetFunctionsAdminTokenSlot_596529;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminTokenSlot
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596539 = newJObject()
  var query_596540 = newJObject()
  add(path_596539, "resourceGroupName", newJString(resourceGroupName))
  add(query_596540, "api-version", newJString(apiVersion))
  add(path_596539, "name", newJString(name))
  add(path_596539, "slot", newJString(slot))
  add(path_596539, "subscriptionId", newJString(subscriptionId))
  result = call_596538.call(path_596539, query_596540, nil, nil, nil)

var webAppsGetFunctionsAdminTokenSlot* = Call_WebAppsGetFunctionsAdminTokenSlot_596529(
    name: "webAppsGetFunctionsAdminTokenSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminTokenSlot_596530, base: "",
    url: url_WebAppsGetFunctionsAdminTokenSlot_596531, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceFunctionSlot_596554 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateInstanceFunctionSlot_596556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceFunctionSlot_596555(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596557 = path.getOrDefault("resourceGroupName")
  valid_596557 = validateParameter(valid_596557, JString, required = true,
                                 default = nil)
  if valid_596557 != nil:
    section.add "resourceGroupName", valid_596557
  var valid_596558 = path.getOrDefault("name")
  valid_596558 = validateParameter(valid_596558, JString, required = true,
                                 default = nil)
  if valid_596558 != nil:
    section.add "name", valid_596558
  var valid_596559 = path.getOrDefault("slot")
  valid_596559 = validateParameter(valid_596559, JString, required = true,
                                 default = nil)
  if valid_596559 != nil:
    section.add "slot", valid_596559
  var valid_596560 = path.getOrDefault("subscriptionId")
  valid_596560 = validateParameter(valid_596560, JString, required = true,
                                 default = nil)
  if valid_596560 != nil:
    section.add "subscriptionId", valid_596560
  var valid_596561 = path.getOrDefault("functionName")
  valid_596561 = validateParameter(valid_596561, JString, required = true,
                                 default = nil)
  if valid_596561 != nil:
    section.add "functionName", valid_596561
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596562 = query.getOrDefault("api-version")
  valid_596562 = validateParameter(valid_596562, JString, required = true,
                                 default = nil)
  if valid_596562 != nil:
    section.add "api-version", valid_596562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596564: Call_WebAppsCreateInstanceFunctionSlot_596554;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_596564.validator(path, query, header, formData, body)
  let scheme = call_596564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596564.url(scheme.get, call_596564.host, call_596564.base,
                         call_596564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596564, url, valid)

proc call*(call_596565: Call_WebAppsCreateInstanceFunctionSlot_596554;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateInstanceFunctionSlot
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_596566 = newJObject()
  var query_596567 = newJObject()
  var body_596568 = newJObject()
  add(path_596566, "resourceGroupName", newJString(resourceGroupName))
  add(query_596567, "api-version", newJString(apiVersion))
  add(path_596566, "name", newJString(name))
  add(path_596566, "slot", newJString(slot))
  add(path_596566, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_596568 = functionEnvelope
  add(path_596566, "functionName", newJString(functionName))
  result = call_596565.call(path_596566, query_596567, nil, nil, body_596568)

var webAppsCreateInstanceFunctionSlot* = Call_WebAppsCreateInstanceFunctionSlot_596554(
    name: "webAppsCreateInstanceFunctionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsCreateInstanceFunctionSlot_596555, base: "",
    url: url_WebAppsCreateInstanceFunctionSlot_596556, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceFunctionSlot_596541 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceFunctionSlot_596543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceFunctionSlot_596542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596544 = path.getOrDefault("resourceGroupName")
  valid_596544 = validateParameter(valid_596544, JString, required = true,
                                 default = nil)
  if valid_596544 != nil:
    section.add "resourceGroupName", valid_596544
  var valid_596545 = path.getOrDefault("name")
  valid_596545 = validateParameter(valid_596545, JString, required = true,
                                 default = nil)
  if valid_596545 != nil:
    section.add "name", valid_596545
  var valid_596546 = path.getOrDefault("slot")
  valid_596546 = validateParameter(valid_596546, JString, required = true,
                                 default = nil)
  if valid_596546 != nil:
    section.add "slot", valid_596546
  var valid_596547 = path.getOrDefault("subscriptionId")
  valid_596547 = validateParameter(valid_596547, JString, required = true,
                                 default = nil)
  if valid_596547 != nil:
    section.add "subscriptionId", valid_596547
  var valid_596548 = path.getOrDefault("functionName")
  valid_596548 = validateParameter(valid_596548, JString, required = true,
                                 default = nil)
  if valid_596548 != nil:
    section.add "functionName", valid_596548
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596549 = query.getOrDefault("api-version")
  valid_596549 = validateParameter(valid_596549, JString, required = true,
                                 default = nil)
  if valid_596549 != nil:
    section.add "api-version", valid_596549
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596550: Call_WebAppsGetInstanceFunctionSlot_596541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_596550.validator(path, query, header, formData, body)
  let scheme = call_596550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596550.url(scheme.get, call_596550.host, call_596550.base,
                         call_596550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596550, url, valid)

proc call*(call_596551: Call_WebAppsGetInstanceFunctionSlot_596541;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsGetInstanceFunctionSlot
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_596552 = newJObject()
  var query_596553 = newJObject()
  add(path_596552, "resourceGroupName", newJString(resourceGroupName))
  add(query_596553, "api-version", newJString(apiVersion))
  add(path_596552, "name", newJString(name))
  add(path_596552, "slot", newJString(slot))
  add(path_596552, "subscriptionId", newJString(subscriptionId))
  add(path_596552, "functionName", newJString(functionName))
  result = call_596551.call(path_596552, query_596553, nil, nil, nil)

var webAppsGetInstanceFunctionSlot* = Call_WebAppsGetInstanceFunctionSlot_596541(
    name: "webAppsGetInstanceFunctionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsGetInstanceFunctionSlot_596542, base: "",
    url: url_WebAppsGetInstanceFunctionSlot_596543, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceFunctionSlot_596569 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteInstanceFunctionSlot_596571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceFunctionSlot_596570(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596572 = path.getOrDefault("resourceGroupName")
  valid_596572 = validateParameter(valid_596572, JString, required = true,
                                 default = nil)
  if valid_596572 != nil:
    section.add "resourceGroupName", valid_596572
  var valid_596573 = path.getOrDefault("name")
  valid_596573 = validateParameter(valid_596573, JString, required = true,
                                 default = nil)
  if valid_596573 != nil:
    section.add "name", valid_596573
  var valid_596574 = path.getOrDefault("slot")
  valid_596574 = validateParameter(valid_596574, JString, required = true,
                                 default = nil)
  if valid_596574 != nil:
    section.add "slot", valid_596574
  var valid_596575 = path.getOrDefault("subscriptionId")
  valid_596575 = validateParameter(valid_596575, JString, required = true,
                                 default = nil)
  if valid_596575 != nil:
    section.add "subscriptionId", valid_596575
  var valid_596576 = path.getOrDefault("functionName")
  valid_596576 = validateParameter(valid_596576, JString, required = true,
                                 default = nil)
  if valid_596576 != nil:
    section.add "functionName", valid_596576
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596577 = query.getOrDefault("api-version")
  valid_596577 = validateParameter(valid_596577, JString, required = true,
                                 default = nil)
  if valid_596577 != nil:
    section.add "api-version", valid_596577
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596578: Call_WebAppsDeleteInstanceFunctionSlot_596569;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_596578.validator(path, query, header, formData, body)
  let scheme = call_596578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596578.url(scheme.get, call_596578.host, call_596578.base,
                         call_596578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596578, url, valid)

proc call*(call_596579: Call_WebAppsDeleteInstanceFunctionSlot_596569;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteInstanceFunctionSlot
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_596580 = newJObject()
  var query_596581 = newJObject()
  add(path_596580, "resourceGroupName", newJString(resourceGroupName))
  add(query_596581, "api-version", newJString(apiVersion))
  add(path_596580, "name", newJString(name))
  add(path_596580, "slot", newJString(slot))
  add(path_596580, "subscriptionId", newJString(subscriptionId))
  add(path_596580, "functionName", newJString(functionName))
  result = call_596579.call(path_596580, query_596581, nil, nil, nil)

var webAppsDeleteInstanceFunctionSlot* = Call_WebAppsDeleteInstanceFunctionSlot_596569(
    name: "webAppsDeleteInstanceFunctionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsDeleteInstanceFunctionSlot_596570, base: "",
    url: url_WebAppsDeleteInstanceFunctionSlot_596571, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecretsSlot_596582 = ref object of OpenApiRestCall_593437
proc url_WebAppsListFunctionSecretsSlot_596584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecretsSlot_596583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596585 = path.getOrDefault("resourceGroupName")
  valid_596585 = validateParameter(valid_596585, JString, required = true,
                                 default = nil)
  if valid_596585 != nil:
    section.add "resourceGroupName", valid_596585
  var valid_596586 = path.getOrDefault("name")
  valid_596586 = validateParameter(valid_596586, JString, required = true,
                                 default = nil)
  if valid_596586 != nil:
    section.add "name", valid_596586
  var valid_596587 = path.getOrDefault("slot")
  valid_596587 = validateParameter(valid_596587, JString, required = true,
                                 default = nil)
  if valid_596587 != nil:
    section.add "slot", valid_596587
  var valid_596588 = path.getOrDefault("subscriptionId")
  valid_596588 = validateParameter(valid_596588, JString, required = true,
                                 default = nil)
  if valid_596588 != nil:
    section.add "subscriptionId", valid_596588
  var valid_596589 = path.getOrDefault("functionName")
  valid_596589 = validateParameter(valid_596589, JString, required = true,
                                 default = nil)
  if valid_596589 != nil:
    section.add "functionName", valid_596589
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596590 = query.getOrDefault("api-version")
  valid_596590 = validateParameter(valid_596590, JString, required = true,
                                 default = nil)
  if valid_596590 != nil:
    section.add "api-version", valid_596590
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596591: Call_WebAppsListFunctionSecretsSlot_596582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_596591.validator(path, query, header, formData, body)
  let scheme = call_596591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596591.url(scheme.get, call_596591.host, call_596591.base,
                         call_596591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596591, url, valid)

proc call*(call_596592: Call_WebAppsListFunctionSecretsSlot_596582;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecretsSlot
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_596593 = newJObject()
  var query_596594 = newJObject()
  add(path_596593, "resourceGroupName", newJString(resourceGroupName))
  add(query_596594, "api-version", newJString(apiVersion))
  add(path_596593, "name", newJString(name))
  add(path_596593, "slot", newJString(slot))
  add(path_596593, "subscriptionId", newJString(subscriptionId))
  add(path_596593, "functionName", newJString(functionName))
  result = call_596592.call(path_596593, query_596594, nil, nil, nil)

var webAppsListFunctionSecretsSlot* = Call_WebAppsListFunctionSecretsSlot_596582(
    name: "webAppsListFunctionSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecretsSlot_596583, base: "",
    url: url_WebAppsListFunctionSecretsSlot_596584, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindingsSlot_596595 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHostNameBindingsSlot_596597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindingsSlot_596596(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596598 = path.getOrDefault("resourceGroupName")
  valid_596598 = validateParameter(valid_596598, JString, required = true,
                                 default = nil)
  if valid_596598 != nil:
    section.add "resourceGroupName", valid_596598
  var valid_596599 = path.getOrDefault("name")
  valid_596599 = validateParameter(valid_596599, JString, required = true,
                                 default = nil)
  if valid_596599 != nil:
    section.add "name", valid_596599
  var valid_596600 = path.getOrDefault("slot")
  valid_596600 = validateParameter(valid_596600, JString, required = true,
                                 default = nil)
  if valid_596600 != nil:
    section.add "slot", valid_596600
  var valid_596601 = path.getOrDefault("subscriptionId")
  valid_596601 = validateParameter(valid_596601, JString, required = true,
                                 default = nil)
  if valid_596601 != nil:
    section.add "subscriptionId", valid_596601
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596602 = query.getOrDefault("api-version")
  valid_596602 = validateParameter(valid_596602, JString, required = true,
                                 default = nil)
  if valid_596602 != nil:
    section.add "api-version", valid_596602
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596603: Call_WebAppsListHostNameBindingsSlot_596595;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_596603.validator(path, query, header, formData, body)
  let scheme = call_596603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596603.url(scheme.get, call_596603.host, call_596603.base,
                         call_596603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596603, url, valid)

proc call*(call_596604: Call_WebAppsListHostNameBindingsSlot_596595;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindingsSlot
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596605 = newJObject()
  var query_596606 = newJObject()
  add(path_596605, "resourceGroupName", newJString(resourceGroupName))
  add(query_596606, "api-version", newJString(apiVersion))
  add(path_596605, "name", newJString(name))
  add(path_596605, "slot", newJString(slot))
  add(path_596605, "subscriptionId", newJString(subscriptionId))
  result = call_596604.call(path_596605, query_596606, nil, nil, nil)

var webAppsListHostNameBindingsSlot* = Call_WebAppsListHostNameBindingsSlot_596595(
    name: "webAppsListHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindingsSlot_596596, base: "",
    url: url_WebAppsListHostNameBindingsSlot_596597, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBindingSlot_596620 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHostNameBindingSlot_596622(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBindingSlot_596621(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596623 = path.getOrDefault("resourceGroupName")
  valid_596623 = validateParameter(valid_596623, JString, required = true,
                                 default = nil)
  if valid_596623 != nil:
    section.add "resourceGroupName", valid_596623
  var valid_596624 = path.getOrDefault("name")
  valid_596624 = validateParameter(valid_596624, JString, required = true,
                                 default = nil)
  if valid_596624 != nil:
    section.add "name", valid_596624
  var valid_596625 = path.getOrDefault("slot")
  valid_596625 = validateParameter(valid_596625, JString, required = true,
                                 default = nil)
  if valid_596625 != nil:
    section.add "slot", valid_596625
  var valid_596626 = path.getOrDefault("subscriptionId")
  valid_596626 = validateParameter(valid_596626, JString, required = true,
                                 default = nil)
  if valid_596626 != nil:
    section.add "subscriptionId", valid_596626
  var valid_596627 = path.getOrDefault("hostName")
  valid_596627 = validateParameter(valid_596627, JString, required = true,
                                 default = nil)
  if valid_596627 != nil:
    section.add "hostName", valid_596627
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596628 = query.getOrDefault("api-version")
  valid_596628 = validateParameter(valid_596628, JString, required = true,
                                 default = nil)
  if valid_596628 != nil:
    section.add "api-version", valid_596628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596630: Call_WebAppsCreateOrUpdateHostNameBindingSlot_596620;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_596630.validator(path, query, header, formData, body)
  let scheme = call_596630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596630.url(scheme.get, call_596630.host, call_596630.base,
                         call_596630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596630, url, valid)

proc call*(call_596631: Call_WebAppsCreateOrUpdateHostNameBindingSlot_596620;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBindingSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_596632 = newJObject()
  var query_596633 = newJObject()
  var body_596634 = newJObject()
  add(path_596632, "resourceGroupName", newJString(resourceGroupName))
  add(query_596633, "api-version", newJString(apiVersion))
  add(path_596632, "name", newJString(name))
  add(path_596632, "slot", newJString(slot))
  add(path_596632, "subscriptionId", newJString(subscriptionId))
  add(path_596632, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_596634 = hostNameBinding
  result = call_596631.call(path_596632, query_596633, nil, nil, body_596634)

var webAppsCreateOrUpdateHostNameBindingSlot* = Call_WebAppsCreateOrUpdateHostNameBindingSlot_596620(
    name: "webAppsCreateOrUpdateHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBindingSlot_596621, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBindingSlot_596622,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBindingSlot_596607 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHostNameBindingSlot_596609(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBindingSlot_596608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596610 = path.getOrDefault("resourceGroupName")
  valid_596610 = validateParameter(valid_596610, JString, required = true,
                                 default = nil)
  if valid_596610 != nil:
    section.add "resourceGroupName", valid_596610
  var valid_596611 = path.getOrDefault("name")
  valid_596611 = validateParameter(valid_596611, JString, required = true,
                                 default = nil)
  if valid_596611 != nil:
    section.add "name", valid_596611
  var valid_596612 = path.getOrDefault("slot")
  valid_596612 = validateParameter(valid_596612, JString, required = true,
                                 default = nil)
  if valid_596612 != nil:
    section.add "slot", valid_596612
  var valid_596613 = path.getOrDefault("subscriptionId")
  valid_596613 = validateParameter(valid_596613, JString, required = true,
                                 default = nil)
  if valid_596613 != nil:
    section.add "subscriptionId", valid_596613
  var valid_596614 = path.getOrDefault("hostName")
  valid_596614 = validateParameter(valid_596614, JString, required = true,
                                 default = nil)
  if valid_596614 != nil:
    section.add "hostName", valid_596614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596615 = query.getOrDefault("api-version")
  valid_596615 = validateParameter(valid_596615, JString, required = true,
                                 default = nil)
  if valid_596615 != nil:
    section.add "api-version", valid_596615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596616: Call_WebAppsGetHostNameBindingSlot_596607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_596616.validator(path, query, header, formData, body)
  let scheme = call_596616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596616.url(scheme.get, call_596616.host, call_596616.base,
                         call_596616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596616, url, valid)

proc call*(call_596617: Call_WebAppsGetHostNameBindingSlot_596607;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBindingSlot
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_596618 = newJObject()
  var query_596619 = newJObject()
  add(path_596618, "resourceGroupName", newJString(resourceGroupName))
  add(query_596619, "api-version", newJString(apiVersion))
  add(path_596618, "name", newJString(name))
  add(path_596618, "slot", newJString(slot))
  add(path_596618, "subscriptionId", newJString(subscriptionId))
  add(path_596618, "hostName", newJString(hostName))
  result = call_596617.call(path_596618, query_596619, nil, nil, nil)

var webAppsGetHostNameBindingSlot* = Call_WebAppsGetHostNameBindingSlot_596607(
    name: "webAppsGetHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBindingSlot_596608, base: "",
    url: url_WebAppsGetHostNameBindingSlot_596609, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBindingSlot_596635 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHostNameBindingSlot_596637(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBindingSlot_596636(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596638 = path.getOrDefault("resourceGroupName")
  valid_596638 = validateParameter(valid_596638, JString, required = true,
                                 default = nil)
  if valid_596638 != nil:
    section.add "resourceGroupName", valid_596638
  var valid_596639 = path.getOrDefault("name")
  valid_596639 = validateParameter(valid_596639, JString, required = true,
                                 default = nil)
  if valid_596639 != nil:
    section.add "name", valid_596639
  var valid_596640 = path.getOrDefault("slot")
  valid_596640 = validateParameter(valid_596640, JString, required = true,
                                 default = nil)
  if valid_596640 != nil:
    section.add "slot", valid_596640
  var valid_596641 = path.getOrDefault("subscriptionId")
  valid_596641 = validateParameter(valid_596641, JString, required = true,
                                 default = nil)
  if valid_596641 != nil:
    section.add "subscriptionId", valid_596641
  var valid_596642 = path.getOrDefault("hostName")
  valid_596642 = validateParameter(valid_596642, JString, required = true,
                                 default = nil)
  if valid_596642 != nil:
    section.add "hostName", valid_596642
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596643 = query.getOrDefault("api-version")
  valid_596643 = validateParameter(valid_596643, JString, required = true,
                                 default = nil)
  if valid_596643 != nil:
    section.add "api-version", valid_596643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596644: Call_WebAppsDeleteHostNameBindingSlot_596635;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_596644.validator(path, query, header, formData, body)
  let scheme = call_596644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596644.url(scheme.get, call_596644.host, call_596644.base,
                         call_596644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596644, url, valid)

proc call*(call_596645: Call_WebAppsDeleteHostNameBindingSlot_596635;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBindingSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_596646 = newJObject()
  var query_596647 = newJObject()
  add(path_596646, "resourceGroupName", newJString(resourceGroupName))
  add(query_596647, "api-version", newJString(apiVersion))
  add(path_596646, "name", newJString(name))
  add(path_596646, "slot", newJString(slot))
  add(path_596646, "subscriptionId", newJString(subscriptionId))
  add(path_596646, "hostName", newJString(hostName))
  result = call_596645.call(path_596646, query_596647, nil, nil, nil)

var webAppsDeleteHostNameBindingSlot* = Call_WebAppsDeleteHostNameBindingSlot_596635(
    name: "webAppsDeleteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBindingSlot_596636, base: "",
    url: url_WebAppsDeleteHostNameBindingSlot_596637, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnectionSlot_596662 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHybridConnectionSlot_596664(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnectionSlot_596663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596665 = path.getOrDefault("namespaceName")
  valid_596665 = validateParameter(valid_596665, JString, required = true,
                                 default = nil)
  if valid_596665 != nil:
    section.add "namespaceName", valid_596665
  var valid_596666 = path.getOrDefault("resourceGroupName")
  valid_596666 = validateParameter(valid_596666, JString, required = true,
                                 default = nil)
  if valid_596666 != nil:
    section.add "resourceGroupName", valid_596666
  var valid_596667 = path.getOrDefault("name")
  valid_596667 = validateParameter(valid_596667, JString, required = true,
                                 default = nil)
  if valid_596667 != nil:
    section.add "name", valid_596667
  var valid_596668 = path.getOrDefault("slot")
  valid_596668 = validateParameter(valid_596668, JString, required = true,
                                 default = nil)
  if valid_596668 != nil:
    section.add "slot", valid_596668
  var valid_596669 = path.getOrDefault("subscriptionId")
  valid_596669 = validateParameter(valid_596669, JString, required = true,
                                 default = nil)
  if valid_596669 != nil:
    section.add "subscriptionId", valid_596669
  var valid_596670 = path.getOrDefault("relayName")
  valid_596670 = validateParameter(valid_596670, JString, required = true,
                                 default = nil)
  if valid_596670 != nil:
    section.add "relayName", valid_596670
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596671 = query.getOrDefault("api-version")
  valid_596671 = validateParameter(valid_596671, JString, required = true,
                                 default = nil)
  if valid_596671 != nil:
    section.add "api-version", valid_596671
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596673: Call_WebAppsCreateOrUpdateHybridConnectionSlot_596662;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_596673.validator(path, query, header, formData, body)
  let scheme = call_596673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596673.url(scheme.get, call_596673.host, call_596673.base,
                         call_596673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596673, url, valid)

proc call*(call_596674: Call_WebAppsCreateOrUpdateHybridConnectionSlot_596662;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596675 = newJObject()
  var query_596676 = newJObject()
  var body_596677 = newJObject()
  add(path_596675, "namespaceName", newJString(namespaceName))
  add(path_596675, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596677 = connectionEnvelope
  add(path_596675, "name", newJString(name))
  add(query_596676, "api-version", newJString(apiVersion))
  add(path_596675, "slot", newJString(slot))
  add(path_596675, "subscriptionId", newJString(subscriptionId))
  add(path_596675, "relayName", newJString(relayName))
  result = call_596674.call(path_596675, query_596676, nil, nil, body_596677)

var webAppsCreateOrUpdateHybridConnectionSlot* = Call_WebAppsCreateOrUpdateHybridConnectionSlot_596662(
    name: "webAppsCreateOrUpdateHybridConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnectionSlot_596663,
    base: "", url: url_WebAppsCreateOrUpdateHybridConnectionSlot_596664,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnectionSlot_596648 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHybridConnectionSlot_596650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnectionSlot_596649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596651 = path.getOrDefault("namespaceName")
  valid_596651 = validateParameter(valid_596651, JString, required = true,
                                 default = nil)
  if valid_596651 != nil:
    section.add "namespaceName", valid_596651
  var valid_596652 = path.getOrDefault("resourceGroupName")
  valid_596652 = validateParameter(valid_596652, JString, required = true,
                                 default = nil)
  if valid_596652 != nil:
    section.add "resourceGroupName", valid_596652
  var valid_596653 = path.getOrDefault("name")
  valid_596653 = validateParameter(valid_596653, JString, required = true,
                                 default = nil)
  if valid_596653 != nil:
    section.add "name", valid_596653
  var valid_596654 = path.getOrDefault("slot")
  valid_596654 = validateParameter(valid_596654, JString, required = true,
                                 default = nil)
  if valid_596654 != nil:
    section.add "slot", valid_596654
  var valid_596655 = path.getOrDefault("subscriptionId")
  valid_596655 = validateParameter(valid_596655, JString, required = true,
                                 default = nil)
  if valid_596655 != nil:
    section.add "subscriptionId", valid_596655
  var valid_596656 = path.getOrDefault("relayName")
  valid_596656 = validateParameter(valid_596656, JString, required = true,
                                 default = nil)
  if valid_596656 != nil:
    section.add "relayName", valid_596656
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596657 = query.getOrDefault("api-version")
  valid_596657 = validateParameter(valid_596657, JString, required = true,
                                 default = nil)
  if valid_596657 != nil:
    section.add "api-version", valid_596657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596658: Call_WebAppsGetHybridConnectionSlot_596648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_596658.validator(path, query, header, formData, body)
  let scheme = call_596658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596658.url(scheme.get, call_596658.host, call_596658.base,
                         call_596658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596658, url, valid)

proc call*(call_596659: Call_WebAppsGetHybridConnectionSlot_596648;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnectionSlot
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596660 = newJObject()
  var query_596661 = newJObject()
  add(path_596660, "namespaceName", newJString(namespaceName))
  add(path_596660, "resourceGroupName", newJString(resourceGroupName))
  add(query_596661, "api-version", newJString(apiVersion))
  add(path_596660, "name", newJString(name))
  add(path_596660, "slot", newJString(slot))
  add(path_596660, "subscriptionId", newJString(subscriptionId))
  add(path_596660, "relayName", newJString(relayName))
  result = call_596659.call(path_596660, query_596661, nil, nil, nil)

var webAppsGetHybridConnectionSlot* = Call_WebAppsGetHybridConnectionSlot_596648(
    name: "webAppsGetHybridConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnectionSlot_596649, base: "",
    url: url_WebAppsGetHybridConnectionSlot_596650, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnectionSlot_596692 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateHybridConnectionSlot_596694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnectionSlot_596693(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596695 = path.getOrDefault("namespaceName")
  valid_596695 = validateParameter(valid_596695, JString, required = true,
                                 default = nil)
  if valid_596695 != nil:
    section.add "namespaceName", valid_596695
  var valid_596696 = path.getOrDefault("resourceGroupName")
  valid_596696 = validateParameter(valid_596696, JString, required = true,
                                 default = nil)
  if valid_596696 != nil:
    section.add "resourceGroupName", valid_596696
  var valid_596697 = path.getOrDefault("name")
  valid_596697 = validateParameter(valid_596697, JString, required = true,
                                 default = nil)
  if valid_596697 != nil:
    section.add "name", valid_596697
  var valid_596698 = path.getOrDefault("slot")
  valid_596698 = validateParameter(valid_596698, JString, required = true,
                                 default = nil)
  if valid_596698 != nil:
    section.add "slot", valid_596698
  var valid_596699 = path.getOrDefault("subscriptionId")
  valid_596699 = validateParameter(valid_596699, JString, required = true,
                                 default = nil)
  if valid_596699 != nil:
    section.add "subscriptionId", valid_596699
  var valid_596700 = path.getOrDefault("relayName")
  valid_596700 = validateParameter(valid_596700, JString, required = true,
                                 default = nil)
  if valid_596700 != nil:
    section.add "relayName", valid_596700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596701 = query.getOrDefault("api-version")
  valid_596701 = validateParameter(valid_596701, JString, required = true,
                                 default = nil)
  if valid_596701 != nil:
    section.add "api-version", valid_596701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596703: Call_WebAppsUpdateHybridConnectionSlot_596692;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_596703.validator(path, query, header, formData, body)
  let scheme = call_596703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596703.url(scheme.get, call_596703.host, call_596703.base,
                         call_596703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596703, url, valid)

proc call*(call_596704: Call_WebAppsUpdateHybridConnectionSlot_596692;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596705 = newJObject()
  var query_596706 = newJObject()
  var body_596707 = newJObject()
  add(path_596705, "namespaceName", newJString(namespaceName))
  add(path_596705, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596707 = connectionEnvelope
  add(path_596705, "name", newJString(name))
  add(query_596706, "api-version", newJString(apiVersion))
  add(path_596705, "slot", newJString(slot))
  add(path_596705, "subscriptionId", newJString(subscriptionId))
  add(path_596705, "relayName", newJString(relayName))
  result = call_596704.call(path_596705, query_596706, nil, nil, body_596707)

var webAppsUpdateHybridConnectionSlot* = Call_WebAppsUpdateHybridConnectionSlot_596692(
    name: "webAppsUpdateHybridConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnectionSlot_596693, base: "",
    url: url_WebAppsUpdateHybridConnectionSlot_596694, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnectionSlot_596678 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHybridConnectionSlot_596680(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnectionSlot_596679(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596681 = path.getOrDefault("namespaceName")
  valid_596681 = validateParameter(valid_596681, JString, required = true,
                                 default = nil)
  if valid_596681 != nil:
    section.add "namespaceName", valid_596681
  var valid_596682 = path.getOrDefault("resourceGroupName")
  valid_596682 = validateParameter(valid_596682, JString, required = true,
                                 default = nil)
  if valid_596682 != nil:
    section.add "resourceGroupName", valid_596682
  var valid_596683 = path.getOrDefault("name")
  valid_596683 = validateParameter(valid_596683, JString, required = true,
                                 default = nil)
  if valid_596683 != nil:
    section.add "name", valid_596683
  var valid_596684 = path.getOrDefault("slot")
  valid_596684 = validateParameter(valid_596684, JString, required = true,
                                 default = nil)
  if valid_596684 != nil:
    section.add "slot", valid_596684
  var valid_596685 = path.getOrDefault("subscriptionId")
  valid_596685 = validateParameter(valid_596685, JString, required = true,
                                 default = nil)
  if valid_596685 != nil:
    section.add "subscriptionId", valid_596685
  var valid_596686 = path.getOrDefault("relayName")
  valid_596686 = validateParameter(valid_596686, JString, required = true,
                                 default = nil)
  if valid_596686 != nil:
    section.add "relayName", valid_596686
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596687 = query.getOrDefault("api-version")
  valid_596687 = validateParameter(valid_596687, JString, required = true,
                                 default = nil)
  if valid_596687 != nil:
    section.add "api-version", valid_596687
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596688: Call_WebAppsDeleteHybridConnectionSlot_596678;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_596688.validator(path, query, header, formData, body)
  let scheme = call_596688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596688.url(scheme.get, call_596688.host, call_596688.base,
                         call_596688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596688, url, valid)

proc call*(call_596689: Call_WebAppsDeleteHybridConnectionSlot_596678;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnectionSlot
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596690 = newJObject()
  var query_596691 = newJObject()
  add(path_596690, "namespaceName", newJString(namespaceName))
  add(path_596690, "resourceGroupName", newJString(resourceGroupName))
  add(query_596691, "api-version", newJString(apiVersion))
  add(path_596690, "name", newJString(name))
  add(path_596690, "slot", newJString(slot))
  add(path_596690, "subscriptionId", newJString(subscriptionId))
  add(path_596690, "relayName", newJString(relayName))
  result = call_596689.call(path_596690, query_596691, nil, nil, nil)

var webAppsDeleteHybridConnectionSlot* = Call_WebAppsDeleteHybridConnectionSlot_596678(
    name: "webAppsDeleteHybridConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnectionSlot_596679, base: "",
    url: url_WebAppsDeleteHybridConnectionSlot_596680, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeysSlot_596708 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnectionKeysSlot_596710(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeysSlot_596709(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596711 = path.getOrDefault("namespaceName")
  valid_596711 = validateParameter(valid_596711, JString, required = true,
                                 default = nil)
  if valid_596711 != nil:
    section.add "namespaceName", valid_596711
  var valid_596712 = path.getOrDefault("resourceGroupName")
  valid_596712 = validateParameter(valid_596712, JString, required = true,
                                 default = nil)
  if valid_596712 != nil:
    section.add "resourceGroupName", valid_596712
  var valid_596713 = path.getOrDefault("name")
  valid_596713 = validateParameter(valid_596713, JString, required = true,
                                 default = nil)
  if valid_596713 != nil:
    section.add "name", valid_596713
  var valid_596714 = path.getOrDefault("slot")
  valid_596714 = validateParameter(valid_596714, JString, required = true,
                                 default = nil)
  if valid_596714 != nil:
    section.add "slot", valid_596714
  var valid_596715 = path.getOrDefault("subscriptionId")
  valid_596715 = validateParameter(valid_596715, JString, required = true,
                                 default = nil)
  if valid_596715 != nil:
    section.add "subscriptionId", valid_596715
  var valid_596716 = path.getOrDefault("relayName")
  valid_596716 = validateParameter(valid_596716, JString, required = true,
                                 default = nil)
  if valid_596716 != nil:
    section.add "relayName", valid_596716
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596717 = query.getOrDefault("api-version")
  valid_596717 = validateParameter(valid_596717, JString, required = true,
                                 default = nil)
  if valid_596717 != nil:
    section.add "api-version", valid_596717
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596718: Call_WebAppsListHybridConnectionKeysSlot_596708;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_596718.validator(path, query, header, formData, body)
  let scheme = call_596718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596718.url(scheme.get, call_596718.host, call_596718.base,
                         call_596718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596718, url, valid)

proc call*(call_596719: Call_WebAppsListHybridConnectionKeysSlot_596708;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeysSlot
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596720 = newJObject()
  var query_596721 = newJObject()
  add(path_596720, "namespaceName", newJString(namespaceName))
  add(path_596720, "resourceGroupName", newJString(resourceGroupName))
  add(query_596721, "api-version", newJString(apiVersion))
  add(path_596720, "name", newJString(name))
  add(path_596720, "slot", newJString(slot))
  add(path_596720, "subscriptionId", newJString(subscriptionId))
  add(path_596720, "relayName", newJString(relayName))
  result = call_596719.call(path_596720, query_596721, nil, nil, nil)

var webAppsListHybridConnectionKeysSlot* = Call_WebAppsListHybridConnectionKeysSlot_596708(
    name: "webAppsListHybridConnectionKeysSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeysSlot_596709, base: "",
    url: url_WebAppsListHybridConnectionKeysSlot_596710, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionsSlot_596722 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnectionsSlot_596724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionsSlot_596723(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596725 = path.getOrDefault("resourceGroupName")
  valid_596725 = validateParameter(valid_596725, JString, required = true,
                                 default = nil)
  if valid_596725 != nil:
    section.add "resourceGroupName", valid_596725
  var valid_596726 = path.getOrDefault("name")
  valid_596726 = validateParameter(valid_596726, JString, required = true,
                                 default = nil)
  if valid_596726 != nil:
    section.add "name", valid_596726
  var valid_596727 = path.getOrDefault("slot")
  valid_596727 = validateParameter(valid_596727, JString, required = true,
                                 default = nil)
  if valid_596727 != nil:
    section.add "slot", valid_596727
  var valid_596728 = path.getOrDefault("subscriptionId")
  valid_596728 = validateParameter(valid_596728, JString, required = true,
                                 default = nil)
  if valid_596728 != nil:
    section.add "subscriptionId", valid_596728
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596729 = query.getOrDefault("api-version")
  valid_596729 = validateParameter(valid_596729, JString, required = true,
                                 default = nil)
  if valid_596729 != nil:
    section.add "api-version", valid_596729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596730: Call_WebAppsListHybridConnectionsSlot_596722;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_596730.validator(path, query, header, formData, body)
  let scheme = call_596730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596730.url(scheme.get, call_596730.host, call_596730.base,
                         call_596730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596730, url, valid)

proc call*(call_596731: Call_WebAppsListHybridConnectionsSlot_596722;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnectionsSlot
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596732 = newJObject()
  var query_596733 = newJObject()
  add(path_596732, "resourceGroupName", newJString(resourceGroupName))
  add(query_596733, "api-version", newJString(apiVersion))
  add(path_596732, "name", newJString(name))
  add(path_596732, "slot", newJString(slot))
  add(path_596732, "subscriptionId", newJString(subscriptionId))
  result = call_596731.call(path_596732, query_596733, nil, nil, nil)

var webAppsListHybridConnectionsSlot* = Call_WebAppsListHybridConnectionsSlot_596722(
    name: "webAppsListHybridConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnectionsSlot_596723, base: "",
    url: url_WebAppsListHybridConnectionsSlot_596724, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnectionsSlot_596734 = ref object of OpenApiRestCall_593437
proc url_WebAppsListRelayServiceConnectionsSlot_596736(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnectionsSlot_596735(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596737 = path.getOrDefault("resourceGroupName")
  valid_596737 = validateParameter(valid_596737, JString, required = true,
                                 default = nil)
  if valid_596737 != nil:
    section.add "resourceGroupName", valid_596737
  var valid_596738 = path.getOrDefault("name")
  valid_596738 = validateParameter(valid_596738, JString, required = true,
                                 default = nil)
  if valid_596738 != nil:
    section.add "name", valid_596738
  var valid_596739 = path.getOrDefault("slot")
  valid_596739 = validateParameter(valid_596739, JString, required = true,
                                 default = nil)
  if valid_596739 != nil:
    section.add "slot", valid_596739
  var valid_596740 = path.getOrDefault("subscriptionId")
  valid_596740 = validateParameter(valid_596740, JString, required = true,
                                 default = nil)
  if valid_596740 != nil:
    section.add "subscriptionId", valid_596740
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596741 = query.getOrDefault("api-version")
  valid_596741 = validateParameter(valid_596741, JString, required = true,
                                 default = nil)
  if valid_596741 != nil:
    section.add "api-version", valid_596741
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596742: Call_WebAppsListRelayServiceConnectionsSlot_596734;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_596742.validator(path, query, header, formData, body)
  let scheme = call_596742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596742.url(scheme.get, call_596742.host, call_596742.base,
                         call_596742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596742, url, valid)

proc call*(call_596743: Call_WebAppsListRelayServiceConnectionsSlot_596734;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnectionsSlot
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596744 = newJObject()
  var query_596745 = newJObject()
  add(path_596744, "resourceGroupName", newJString(resourceGroupName))
  add(query_596745, "api-version", newJString(apiVersion))
  add(path_596744, "name", newJString(name))
  add(path_596744, "slot", newJString(slot))
  add(path_596744, "subscriptionId", newJString(subscriptionId))
  result = call_596743.call(path_596744, query_596745, nil, nil, nil)

var webAppsListRelayServiceConnectionsSlot* = Call_WebAppsListRelayServiceConnectionsSlot_596734(
    name: "webAppsListRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnectionsSlot_596735, base: "",
    url: url_WebAppsListRelayServiceConnectionsSlot_596736,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596759 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596761(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596760(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596762 = path.getOrDefault("resourceGroupName")
  valid_596762 = validateParameter(valid_596762, JString, required = true,
                                 default = nil)
  if valid_596762 != nil:
    section.add "resourceGroupName", valid_596762
  var valid_596763 = path.getOrDefault("name")
  valid_596763 = validateParameter(valid_596763, JString, required = true,
                                 default = nil)
  if valid_596763 != nil:
    section.add "name", valid_596763
  var valid_596764 = path.getOrDefault("slot")
  valid_596764 = validateParameter(valid_596764, JString, required = true,
                                 default = nil)
  if valid_596764 != nil:
    section.add "slot", valid_596764
  var valid_596765 = path.getOrDefault("subscriptionId")
  valid_596765 = validateParameter(valid_596765, JString, required = true,
                                 default = nil)
  if valid_596765 != nil:
    section.add "subscriptionId", valid_596765
  var valid_596766 = path.getOrDefault("entityName")
  valid_596766 = validateParameter(valid_596766, JString, required = true,
                                 default = nil)
  if valid_596766 != nil:
    section.add "entityName", valid_596766
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596767 = query.getOrDefault("api-version")
  valid_596767 = validateParameter(valid_596767, JString, required = true,
                                 default = nil)
  if valid_596767 != nil:
    section.add "api-version", valid_596767
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596769: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596759;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_596769.validator(path, query, header, formData, body)
  let scheme = call_596769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596769.url(scheme.get, call_596769.host, call_596769.base,
                         call_596769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596769, url, valid)

proc call*(call_596770: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596759;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_596771 = newJObject()
  var query_596772 = newJObject()
  var body_596773 = newJObject()
  add(path_596771, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596773 = connectionEnvelope
  add(path_596771, "name", newJString(name))
  add(query_596772, "api-version", newJString(apiVersion))
  add(path_596771, "slot", newJString(slot))
  add(path_596771, "subscriptionId", newJString(subscriptionId))
  add(path_596771, "entityName", newJString(entityName))
  result = call_596770.call(path_596771, query_596772, nil, nil, body_596773)

var webAppsCreateOrUpdateRelayServiceConnectionSlot* = Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596759(
    name: "webAppsCreateOrUpdateRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596760,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596761,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnectionSlot_596746 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetRelayServiceConnectionSlot_596748(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnectionSlot_596747(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596749 = path.getOrDefault("resourceGroupName")
  valid_596749 = validateParameter(valid_596749, JString, required = true,
                                 default = nil)
  if valid_596749 != nil:
    section.add "resourceGroupName", valid_596749
  var valid_596750 = path.getOrDefault("name")
  valid_596750 = validateParameter(valid_596750, JString, required = true,
                                 default = nil)
  if valid_596750 != nil:
    section.add "name", valid_596750
  var valid_596751 = path.getOrDefault("slot")
  valid_596751 = validateParameter(valid_596751, JString, required = true,
                                 default = nil)
  if valid_596751 != nil:
    section.add "slot", valid_596751
  var valid_596752 = path.getOrDefault("subscriptionId")
  valid_596752 = validateParameter(valid_596752, JString, required = true,
                                 default = nil)
  if valid_596752 != nil:
    section.add "subscriptionId", valid_596752
  var valid_596753 = path.getOrDefault("entityName")
  valid_596753 = validateParameter(valid_596753, JString, required = true,
                                 default = nil)
  if valid_596753 != nil:
    section.add "entityName", valid_596753
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596754 = query.getOrDefault("api-version")
  valid_596754 = validateParameter(valid_596754, JString, required = true,
                                 default = nil)
  if valid_596754 != nil:
    section.add "api-version", valid_596754
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596755: Call_WebAppsGetRelayServiceConnectionSlot_596746;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_596755.validator(path, query, header, formData, body)
  let scheme = call_596755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596755.url(scheme.get, call_596755.host, call_596755.base,
                         call_596755.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596755, url, valid)

proc call*(call_596756: Call_WebAppsGetRelayServiceConnectionSlot_596746;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnectionSlot
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_596757 = newJObject()
  var query_596758 = newJObject()
  add(path_596757, "resourceGroupName", newJString(resourceGroupName))
  add(query_596758, "api-version", newJString(apiVersion))
  add(path_596757, "name", newJString(name))
  add(path_596757, "slot", newJString(slot))
  add(path_596757, "subscriptionId", newJString(subscriptionId))
  add(path_596757, "entityName", newJString(entityName))
  result = call_596756.call(path_596757, query_596758, nil, nil, nil)

var webAppsGetRelayServiceConnectionSlot* = Call_WebAppsGetRelayServiceConnectionSlot_596746(
    name: "webAppsGetRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnectionSlot_596747, base: "",
    url: url_WebAppsGetRelayServiceConnectionSlot_596748, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnectionSlot_596787 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateRelayServiceConnectionSlot_596789(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnectionSlot_596788(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596790 = path.getOrDefault("resourceGroupName")
  valid_596790 = validateParameter(valid_596790, JString, required = true,
                                 default = nil)
  if valid_596790 != nil:
    section.add "resourceGroupName", valid_596790
  var valid_596791 = path.getOrDefault("name")
  valid_596791 = validateParameter(valid_596791, JString, required = true,
                                 default = nil)
  if valid_596791 != nil:
    section.add "name", valid_596791
  var valid_596792 = path.getOrDefault("slot")
  valid_596792 = validateParameter(valid_596792, JString, required = true,
                                 default = nil)
  if valid_596792 != nil:
    section.add "slot", valid_596792
  var valid_596793 = path.getOrDefault("subscriptionId")
  valid_596793 = validateParameter(valid_596793, JString, required = true,
                                 default = nil)
  if valid_596793 != nil:
    section.add "subscriptionId", valid_596793
  var valid_596794 = path.getOrDefault("entityName")
  valid_596794 = validateParameter(valid_596794, JString, required = true,
                                 default = nil)
  if valid_596794 != nil:
    section.add "entityName", valid_596794
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596795 = query.getOrDefault("api-version")
  valid_596795 = validateParameter(valid_596795, JString, required = true,
                                 default = nil)
  if valid_596795 != nil:
    section.add "api-version", valid_596795
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596797: Call_WebAppsUpdateRelayServiceConnectionSlot_596787;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_596797.validator(path, query, header, formData, body)
  let scheme = call_596797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596797.url(scheme.get, call_596797.host, call_596797.base,
                         call_596797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596797, url, valid)

proc call*(call_596798: Call_WebAppsUpdateRelayServiceConnectionSlot_596787;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_596799 = newJObject()
  var query_596800 = newJObject()
  var body_596801 = newJObject()
  add(path_596799, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596801 = connectionEnvelope
  add(path_596799, "name", newJString(name))
  add(query_596800, "api-version", newJString(apiVersion))
  add(path_596799, "slot", newJString(slot))
  add(path_596799, "subscriptionId", newJString(subscriptionId))
  add(path_596799, "entityName", newJString(entityName))
  result = call_596798.call(path_596799, query_596800, nil, nil, body_596801)

var webAppsUpdateRelayServiceConnectionSlot* = Call_WebAppsUpdateRelayServiceConnectionSlot_596787(
    name: "webAppsUpdateRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnectionSlot_596788, base: "",
    url: url_WebAppsUpdateRelayServiceConnectionSlot_596789,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnectionSlot_596774 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteRelayServiceConnectionSlot_596776(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnectionSlot_596775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596777 = path.getOrDefault("resourceGroupName")
  valid_596777 = validateParameter(valid_596777, JString, required = true,
                                 default = nil)
  if valid_596777 != nil:
    section.add "resourceGroupName", valid_596777
  var valid_596778 = path.getOrDefault("name")
  valid_596778 = validateParameter(valid_596778, JString, required = true,
                                 default = nil)
  if valid_596778 != nil:
    section.add "name", valid_596778
  var valid_596779 = path.getOrDefault("slot")
  valid_596779 = validateParameter(valid_596779, JString, required = true,
                                 default = nil)
  if valid_596779 != nil:
    section.add "slot", valid_596779
  var valid_596780 = path.getOrDefault("subscriptionId")
  valid_596780 = validateParameter(valid_596780, JString, required = true,
                                 default = nil)
  if valid_596780 != nil:
    section.add "subscriptionId", valid_596780
  var valid_596781 = path.getOrDefault("entityName")
  valid_596781 = validateParameter(valid_596781, JString, required = true,
                                 default = nil)
  if valid_596781 != nil:
    section.add "entityName", valid_596781
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596782 = query.getOrDefault("api-version")
  valid_596782 = validateParameter(valid_596782, JString, required = true,
                                 default = nil)
  if valid_596782 != nil:
    section.add "api-version", valid_596782
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596783: Call_WebAppsDeleteRelayServiceConnectionSlot_596774;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_596783.validator(path, query, header, formData, body)
  let scheme = call_596783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596783.url(scheme.get, call_596783.host, call_596783.base,
                         call_596783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596783, url, valid)

proc call*(call_596784: Call_WebAppsDeleteRelayServiceConnectionSlot_596774;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnectionSlot
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_596785 = newJObject()
  var query_596786 = newJObject()
  add(path_596785, "resourceGroupName", newJString(resourceGroupName))
  add(query_596786, "api-version", newJString(apiVersion))
  add(path_596785, "name", newJString(name))
  add(path_596785, "slot", newJString(slot))
  add(path_596785, "subscriptionId", newJString(subscriptionId))
  add(path_596785, "entityName", newJString(entityName))
  result = call_596784.call(path_596785, query_596786, nil, nil, nil)

var webAppsDeleteRelayServiceConnectionSlot* = Call_WebAppsDeleteRelayServiceConnectionSlot_596774(
    name: "webAppsDeleteRelayServiceConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnectionSlot_596775, base: "",
    url: url_WebAppsDeleteRelayServiceConnectionSlot_596776,
    schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiersSlot_596802 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceIdentifiersSlot_596804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiersSlot_596803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596805 = path.getOrDefault("resourceGroupName")
  valid_596805 = validateParameter(valid_596805, JString, required = true,
                                 default = nil)
  if valid_596805 != nil:
    section.add "resourceGroupName", valid_596805
  var valid_596806 = path.getOrDefault("name")
  valid_596806 = validateParameter(valid_596806, JString, required = true,
                                 default = nil)
  if valid_596806 != nil:
    section.add "name", valid_596806
  var valid_596807 = path.getOrDefault("slot")
  valid_596807 = validateParameter(valid_596807, JString, required = true,
                                 default = nil)
  if valid_596807 != nil:
    section.add "slot", valid_596807
  var valid_596808 = path.getOrDefault("subscriptionId")
  valid_596808 = validateParameter(valid_596808, JString, required = true,
                                 default = nil)
  if valid_596808 != nil:
    section.add "subscriptionId", valid_596808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596809 = query.getOrDefault("api-version")
  valid_596809 = validateParameter(valid_596809, JString, required = true,
                                 default = nil)
  if valid_596809 != nil:
    section.add "api-version", valid_596809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596810: Call_WebAppsListInstanceIdentifiersSlot_596802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_596810.validator(path, query, header, formData, body)
  let scheme = call_596810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596810.url(scheme.get, call_596810.host, call_596810.base,
                         call_596810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596810, url, valid)

proc call*(call_596811: Call_WebAppsListInstanceIdentifiersSlot_596802;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiersSlot
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596812 = newJObject()
  var query_596813 = newJObject()
  add(path_596812, "resourceGroupName", newJString(resourceGroupName))
  add(query_596813, "api-version", newJString(apiVersion))
  add(path_596812, "name", newJString(name))
  add(path_596812, "slot", newJString(slot))
  add(path_596812, "subscriptionId", newJString(subscriptionId))
  result = call_596811.call(path_596812, query_596813, nil, nil, nil)

var webAppsListInstanceIdentifiersSlot* = Call_WebAppsListInstanceIdentifiersSlot_596802(
    name: "webAppsListInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_WebAppsListInstanceIdentifiersSlot_596803, base: "",
    url: url_WebAppsListInstanceIdentifiersSlot_596804, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperationSlot_596827 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateInstanceMSDeployOperationSlot_596829(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperationSlot_596828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596830 = path.getOrDefault("resourceGroupName")
  valid_596830 = validateParameter(valid_596830, JString, required = true,
                                 default = nil)
  if valid_596830 != nil:
    section.add "resourceGroupName", valid_596830
  var valid_596831 = path.getOrDefault("name")
  valid_596831 = validateParameter(valid_596831, JString, required = true,
                                 default = nil)
  if valid_596831 != nil:
    section.add "name", valid_596831
  var valid_596832 = path.getOrDefault("slot")
  valid_596832 = validateParameter(valid_596832, JString, required = true,
                                 default = nil)
  if valid_596832 != nil:
    section.add "slot", valid_596832
  var valid_596833 = path.getOrDefault("subscriptionId")
  valid_596833 = validateParameter(valid_596833, JString, required = true,
                                 default = nil)
  if valid_596833 != nil:
    section.add "subscriptionId", valid_596833
  var valid_596834 = path.getOrDefault("instanceId")
  valid_596834 = validateParameter(valid_596834, JString, required = true,
                                 default = nil)
  if valid_596834 != nil:
    section.add "instanceId", valid_596834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596835 = query.getOrDefault("api-version")
  valid_596835 = validateParameter(valid_596835, JString, required = true,
                                 default = nil)
  if valid_596835 != nil:
    section.add "api-version", valid_596835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596837: Call_WebAppsCreateInstanceMSDeployOperationSlot_596827;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_596837.validator(path, query, header, formData, body)
  let scheme = call_596837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596837.url(scheme.get, call_596837.host, call_596837.base,
                         call_596837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596837, url, valid)

proc call*(call_596838: Call_WebAppsCreateInstanceMSDeployOperationSlot_596827;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_596839 = newJObject()
  var query_596840 = newJObject()
  var body_596841 = newJObject()
  add(path_596839, "resourceGroupName", newJString(resourceGroupName))
  add(query_596840, "api-version", newJString(apiVersion))
  add(path_596839, "name", newJString(name))
  add(path_596839, "slot", newJString(slot))
  add(path_596839, "subscriptionId", newJString(subscriptionId))
  add(path_596839, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_596841 = MSDeploy
  result = call_596838.call(path_596839, query_596840, nil, nil, body_596841)

var webAppsCreateInstanceMSDeployOperationSlot* = Call_WebAppsCreateInstanceMSDeployOperationSlot_596827(
    name: "webAppsCreateInstanceMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperationSlot_596828,
    base: "", url: url_WebAppsCreateInstanceMSDeployOperationSlot_596829,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatusSlot_596814 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMsDeployStatusSlot_596816(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatusSlot_596815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596817 = path.getOrDefault("resourceGroupName")
  valid_596817 = validateParameter(valid_596817, JString, required = true,
                                 default = nil)
  if valid_596817 != nil:
    section.add "resourceGroupName", valid_596817
  var valid_596818 = path.getOrDefault("name")
  valid_596818 = validateParameter(valid_596818, JString, required = true,
                                 default = nil)
  if valid_596818 != nil:
    section.add "name", valid_596818
  var valid_596819 = path.getOrDefault("slot")
  valid_596819 = validateParameter(valid_596819, JString, required = true,
                                 default = nil)
  if valid_596819 != nil:
    section.add "slot", valid_596819
  var valid_596820 = path.getOrDefault("subscriptionId")
  valid_596820 = validateParameter(valid_596820, JString, required = true,
                                 default = nil)
  if valid_596820 != nil:
    section.add "subscriptionId", valid_596820
  var valid_596821 = path.getOrDefault("instanceId")
  valid_596821 = validateParameter(valid_596821, JString, required = true,
                                 default = nil)
  if valid_596821 != nil:
    section.add "instanceId", valid_596821
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596822 = query.getOrDefault("api-version")
  valid_596822 = validateParameter(valid_596822, JString, required = true,
                                 default = nil)
  if valid_596822 != nil:
    section.add "api-version", valid_596822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596823: Call_WebAppsGetInstanceMsDeployStatusSlot_596814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_596823.validator(path, query, header, formData, body)
  let scheme = call_596823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596823.url(scheme.get, call_596823.host, call_596823.base,
                         call_596823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596823, url, valid)

proc call*(call_596824: Call_WebAppsGetInstanceMsDeployStatusSlot_596814;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_596825 = newJObject()
  var query_596826 = newJObject()
  add(path_596825, "resourceGroupName", newJString(resourceGroupName))
  add(query_596826, "api-version", newJString(apiVersion))
  add(path_596825, "name", newJString(name))
  add(path_596825, "slot", newJString(slot))
  add(path_596825, "subscriptionId", newJString(subscriptionId))
  add(path_596825, "instanceId", newJString(instanceId))
  result = call_596824.call(path_596825, query_596826, nil, nil, nil)

var webAppsGetInstanceMsDeployStatusSlot* = Call_WebAppsGetInstanceMsDeployStatusSlot_596814(
    name: "webAppsGetInstanceMsDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatusSlot_596815, base: "",
    url: url_WebAppsGetInstanceMsDeployStatusSlot_596816, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLogSlot_596842 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMSDeployLogSlot_596844(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLogSlot_596843(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596845 = path.getOrDefault("resourceGroupName")
  valid_596845 = validateParameter(valid_596845, JString, required = true,
                                 default = nil)
  if valid_596845 != nil:
    section.add "resourceGroupName", valid_596845
  var valid_596846 = path.getOrDefault("name")
  valid_596846 = validateParameter(valid_596846, JString, required = true,
                                 default = nil)
  if valid_596846 != nil:
    section.add "name", valid_596846
  var valid_596847 = path.getOrDefault("slot")
  valid_596847 = validateParameter(valid_596847, JString, required = true,
                                 default = nil)
  if valid_596847 != nil:
    section.add "slot", valid_596847
  var valid_596848 = path.getOrDefault("subscriptionId")
  valid_596848 = validateParameter(valid_596848, JString, required = true,
                                 default = nil)
  if valid_596848 != nil:
    section.add "subscriptionId", valid_596848
  var valid_596849 = path.getOrDefault("instanceId")
  valid_596849 = validateParameter(valid_596849, JString, required = true,
                                 default = nil)
  if valid_596849 != nil:
    section.add "instanceId", valid_596849
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596850 = query.getOrDefault("api-version")
  valid_596850 = validateParameter(valid_596850, JString, required = true,
                                 default = nil)
  if valid_596850 != nil:
    section.add "api-version", valid_596850
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596851: Call_WebAppsGetInstanceMSDeployLogSlot_596842;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_596851.validator(path, query, header, formData, body)
  let scheme = call_596851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596851.url(scheme.get, call_596851.host, call_596851.base,
                         call_596851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596851, url, valid)

proc call*(call_596852: Call_WebAppsGetInstanceMSDeployLogSlot_596842;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_596853 = newJObject()
  var query_596854 = newJObject()
  add(path_596853, "resourceGroupName", newJString(resourceGroupName))
  add(query_596854, "api-version", newJString(apiVersion))
  add(path_596853, "name", newJString(name))
  add(path_596853, "slot", newJString(slot))
  add(path_596853, "subscriptionId", newJString(subscriptionId))
  add(path_596853, "instanceId", newJString(instanceId))
  result = call_596852.call(path_596853, query_596854, nil, nil, nil)

var webAppsGetInstanceMSDeployLogSlot* = Call_WebAppsGetInstanceMSDeployLogSlot_596842(
    name: "webAppsGetInstanceMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLogSlot_596843, base: "",
    url: url_WebAppsGetInstanceMSDeployLogSlot_596844, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessesSlot_596855 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessesSlot_596857(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessesSlot_596856(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596858 = path.getOrDefault("resourceGroupName")
  valid_596858 = validateParameter(valid_596858, JString, required = true,
                                 default = nil)
  if valid_596858 != nil:
    section.add "resourceGroupName", valid_596858
  var valid_596859 = path.getOrDefault("name")
  valid_596859 = validateParameter(valid_596859, JString, required = true,
                                 default = nil)
  if valid_596859 != nil:
    section.add "name", valid_596859
  var valid_596860 = path.getOrDefault("slot")
  valid_596860 = validateParameter(valid_596860, JString, required = true,
                                 default = nil)
  if valid_596860 != nil:
    section.add "slot", valid_596860
  var valid_596861 = path.getOrDefault("subscriptionId")
  valid_596861 = validateParameter(valid_596861, JString, required = true,
                                 default = nil)
  if valid_596861 != nil:
    section.add "subscriptionId", valid_596861
  var valid_596862 = path.getOrDefault("instanceId")
  valid_596862 = validateParameter(valid_596862, JString, required = true,
                                 default = nil)
  if valid_596862 != nil:
    section.add "instanceId", valid_596862
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596863 = query.getOrDefault("api-version")
  valid_596863 = validateParameter(valid_596863, JString, required = true,
                                 default = nil)
  if valid_596863 != nil:
    section.add "api-version", valid_596863
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596864: Call_WebAppsListInstanceProcessesSlot_596855;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596864.validator(path, query, header, formData, body)
  let scheme = call_596864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596864.url(scheme.get, call_596864.host, call_596864.base,
                         call_596864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596864, url, valid)

proc call*(call_596865: Call_WebAppsListInstanceProcessesSlot_596855;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596866 = newJObject()
  var query_596867 = newJObject()
  add(path_596866, "resourceGroupName", newJString(resourceGroupName))
  add(query_596867, "api-version", newJString(apiVersion))
  add(path_596866, "name", newJString(name))
  add(path_596866, "slot", newJString(slot))
  add(path_596866, "subscriptionId", newJString(subscriptionId))
  add(path_596866, "instanceId", newJString(instanceId))
  result = call_596865.call(path_596866, query_596867, nil, nil, nil)

var webAppsListInstanceProcessesSlot* = Call_WebAppsListInstanceProcessesSlot_596855(
    name: "webAppsListInstanceProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcessesSlot_596856, base: "",
    url: url_WebAppsListInstanceProcessesSlot_596857, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessSlot_596868 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessSlot_596870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessSlot_596869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596871 = path.getOrDefault("resourceGroupName")
  valid_596871 = validateParameter(valid_596871, JString, required = true,
                                 default = nil)
  if valid_596871 != nil:
    section.add "resourceGroupName", valid_596871
  var valid_596872 = path.getOrDefault("name")
  valid_596872 = validateParameter(valid_596872, JString, required = true,
                                 default = nil)
  if valid_596872 != nil:
    section.add "name", valid_596872
  var valid_596873 = path.getOrDefault("processId")
  valid_596873 = validateParameter(valid_596873, JString, required = true,
                                 default = nil)
  if valid_596873 != nil:
    section.add "processId", valid_596873
  var valid_596874 = path.getOrDefault("slot")
  valid_596874 = validateParameter(valid_596874, JString, required = true,
                                 default = nil)
  if valid_596874 != nil:
    section.add "slot", valid_596874
  var valid_596875 = path.getOrDefault("subscriptionId")
  valid_596875 = validateParameter(valid_596875, JString, required = true,
                                 default = nil)
  if valid_596875 != nil:
    section.add "subscriptionId", valid_596875
  var valid_596876 = path.getOrDefault("instanceId")
  valid_596876 = validateParameter(valid_596876, JString, required = true,
                                 default = nil)
  if valid_596876 != nil:
    section.add "instanceId", valid_596876
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596877 = query.getOrDefault("api-version")
  valid_596877 = validateParameter(valid_596877, JString, required = true,
                                 default = nil)
  if valid_596877 != nil:
    section.add "api-version", valid_596877
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596878: Call_WebAppsGetInstanceProcessSlot_596868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596878.validator(path, query, header, formData, body)
  let scheme = call_596878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596878.url(scheme.get, call_596878.host, call_596878.base,
                         call_596878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596878, url, valid)

proc call*(call_596879: Call_WebAppsGetInstanceProcessSlot_596868;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596880 = newJObject()
  var query_596881 = newJObject()
  add(path_596880, "resourceGroupName", newJString(resourceGroupName))
  add(query_596881, "api-version", newJString(apiVersion))
  add(path_596880, "name", newJString(name))
  add(path_596880, "processId", newJString(processId))
  add(path_596880, "slot", newJString(slot))
  add(path_596880, "subscriptionId", newJString(subscriptionId))
  add(path_596880, "instanceId", newJString(instanceId))
  result = call_596879.call(path_596880, query_596881, nil, nil, nil)

var webAppsGetInstanceProcessSlot* = Call_WebAppsGetInstanceProcessSlot_596868(
    name: "webAppsGetInstanceProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcessSlot_596869, base: "",
    url: url_WebAppsGetInstanceProcessSlot_596870, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcessSlot_596882 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteInstanceProcessSlot_596884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcessSlot_596883(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596885 = path.getOrDefault("resourceGroupName")
  valid_596885 = validateParameter(valid_596885, JString, required = true,
                                 default = nil)
  if valid_596885 != nil:
    section.add "resourceGroupName", valid_596885
  var valid_596886 = path.getOrDefault("name")
  valid_596886 = validateParameter(valid_596886, JString, required = true,
                                 default = nil)
  if valid_596886 != nil:
    section.add "name", valid_596886
  var valid_596887 = path.getOrDefault("processId")
  valid_596887 = validateParameter(valid_596887, JString, required = true,
                                 default = nil)
  if valid_596887 != nil:
    section.add "processId", valid_596887
  var valid_596888 = path.getOrDefault("slot")
  valid_596888 = validateParameter(valid_596888, JString, required = true,
                                 default = nil)
  if valid_596888 != nil:
    section.add "slot", valid_596888
  var valid_596889 = path.getOrDefault("subscriptionId")
  valid_596889 = validateParameter(valid_596889, JString, required = true,
                                 default = nil)
  if valid_596889 != nil:
    section.add "subscriptionId", valid_596889
  var valid_596890 = path.getOrDefault("instanceId")
  valid_596890 = validateParameter(valid_596890, JString, required = true,
                                 default = nil)
  if valid_596890 != nil:
    section.add "instanceId", valid_596890
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596891 = query.getOrDefault("api-version")
  valid_596891 = validateParameter(valid_596891, JString, required = true,
                                 default = nil)
  if valid_596891 != nil:
    section.add "api-version", valid_596891
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596892: Call_WebAppsDeleteInstanceProcessSlot_596882;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_596892.validator(path, query, header, formData, body)
  let scheme = call_596892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596892.url(scheme.get, call_596892.host, call_596892.base,
                         call_596892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596892, url, valid)

proc call*(call_596893: Call_WebAppsDeleteInstanceProcessSlot_596882;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596894 = newJObject()
  var query_596895 = newJObject()
  add(path_596894, "resourceGroupName", newJString(resourceGroupName))
  add(query_596895, "api-version", newJString(apiVersion))
  add(path_596894, "name", newJString(name))
  add(path_596894, "processId", newJString(processId))
  add(path_596894, "slot", newJString(slot))
  add(path_596894, "subscriptionId", newJString(subscriptionId))
  add(path_596894, "instanceId", newJString(instanceId))
  result = call_596893.call(path_596894, query_596895, nil, nil, nil)

var webAppsDeleteInstanceProcessSlot* = Call_WebAppsDeleteInstanceProcessSlot_596882(
    name: "webAppsDeleteInstanceProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcessSlot_596883, base: "",
    url: url_WebAppsDeleteInstanceProcessSlot_596884, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDumpSlot_596896 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessDumpSlot_596898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDumpSlot_596897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596899 = path.getOrDefault("resourceGroupName")
  valid_596899 = validateParameter(valid_596899, JString, required = true,
                                 default = nil)
  if valid_596899 != nil:
    section.add "resourceGroupName", valid_596899
  var valid_596900 = path.getOrDefault("name")
  valid_596900 = validateParameter(valid_596900, JString, required = true,
                                 default = nil)
  if valid_596900 != nil:
    section.add "name", valid_596900
  var valid_596901 = path.getOrDefault("processId")
  valid_596901 = validateParameter(valid_596901, JString, required = true,
                                 default = nil)
  if valid_596901 != nil:
    section.add "processId", valid_596901
  var valid_596902 = path.getOrDefault("slot")
  valid_596902 = validateParameter(valid_596902, JString, required = true,
                                 default = nil)
  if valid_596902 != nil:
    section.add "slot", valid_596902
  var valid_596903 = path.getOrDefault("subscriptionId")
  valid_596903 = validateParameter(valid_596903, JString, required = true,
                                 default = nil)
  if valid_596903 != nil:
    section.add "subscriptionId", valid_596903
  var valid_596904 = path.getOrDefault("instanceId")
  valid_596904 = validateParameter(valid_596904, JString, required = true,
                                 default = nil)
  if valid_596904 != nil:
    section.add "instanceId", valid_596904
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596905 = query.getOrDefault("api-version")
  valid_596905 = validateParameter(valid_596905, JString, required = true,
                                 default = nil)
  if valid_596905 != nil:
    section.add "api-version", valid_596905
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596906: Call_WebAppsGetInstanceProcessDumpSlot_596896;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596906.validator(path, query, header, formData, body)
  let scheme = call_596906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596906.url(scheme.get, call_596906.host, call_596906.base,
                         call_596906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596906, url, valid)

proc call*(call_596907: Call_WebAppsGetInstanceProcessDumpSlot_596896;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596908 = newJObject()
  var query_596909 = newJObject()
  add(path_596908, "resourceGroupName", newJString(resourceGroupName))
  add(query_596909, "api-version", newJString(apiVersion))
  add(path_596908, "name", newJString(name))
  add(path_596908, "processId", newJString(processId))
  add(path_596908, "slot", newJString(slot))
  add(path_596908, "subscriptionId", newJString(subscriptionId))
  add(path_596908, "instanceId", newJString(instanceId))
  result = call_596907.call(path_596908, query_596909, nil, nil, nil)

var webAppsGetInstanceProcessDumpSlot* = Call_WebAppsGetInstanceProcessDumpSlot_596896(
    name: "webAppsGetInstanceProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDumpSlot_596897, base: "",
    url: url_WebAppsGetInstanceProcessDumpSlot_596898, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModulesSlot_596910 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessModulesSlot_596912(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModulesSlot_596911(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596913 = path.getOrDefault("resourceGroupName")
  valid_596913 = validateParameter(valid_596913, JString, required = true,
                                 default = nil)
  if valid_596913 != nil:
    section.add "resourceGroupName", valid_596913
  var valid_596914 = path.getOrDefault("name")
  valid_596914 = validateParameter(valid_596914, JString, required = true,
                                 default = nil)
  if valid_596914 != nil:
    section.add "name", valid_596914
  var valid_596915 = path.getOrDefault("processId")
  valid_596915 = validateParameter(valid_596915, JString, required = true,
                                 default = nil)
  if valid_596915 != nil:
    section.add "processId", valid_596915
  var valid_596916 = path.getOrDefault("slot")
  valid_596916 = validateParameter(valid_596916, JString, required = true,
                                 default = nil)
  if valid_596916 != nil:
    section.add "slot", valid_596916
  var valid_596917 = path.getOrDefault("subscriptionId")
  valid_596917 = validateParameter(valid_596917, JString, required = true,
                                 default = nil)
  if valid_596917 != nil:
    section.add "subscriptionId", valid_596917
  var valid_596918 = path.getOrDefault("instanceId")
  valid_596918 = validateParameter(valid_596918, JString, required = true,
                                 default = nil)
  if valid_596918 != nil:
    section.add "instanceId", valid_596918
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596919 = query.getOrDefault("api-version")
  valid_596919 = validateParameter(valid_596919, JString, required = true,
                                 default = nil)
  if valid_596919 != nil:
    section.add "api-version", valid_596919
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596920: Call_WebAppsListInstanceProcessModulesSlot_596910;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596920.validator(path, query, header, formData, body)
  let scheme = call_596920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596920.url(scheme.get, call_596920.host, call_596920.base,
                         call_596920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596920, url, valid)

proc call*(call_596921: Call_WebAppsListInstanceProcessModulesSlot_596910;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596922 = newJObject()
  var query_596923 = newJObject()
  add(path_596922, "resourceGroupName", newJString(resourceGroupName))
  add(query_596923, "api-version", newJString(apiVersion))
  add(path_596922, "name", newJString(name))
  add(path_596922, "processId", newJString(processId))
  add(path_596922, "slot", newJString(slot))
  add(path_596922, "subscriptionId", newJString(subscriptionId))
  add(path_596922, "instanceId", newJString(instanceId))
  result = call_596921.call(path_596922, query_596923, nil, nil, nil)

var webAppsListInstanceProcessModulesSlot* = Call_WebAppsListInstanceProcessModulesSlot_596910(
    name: "webAppsListInstanceProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModulesSlot_596911, base: "",
    url: url_WebAppsListInstanceProcessModulesSlot_596912, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModuleSlot_596924 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessModuleSlot_596926(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModuleSlot_596925(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596927 = path.getOrDefault("resourceGroupName")
  valid_596927 = validateParameter(valid_596927, JString, required = true,
                                 default = nil)
  if valid_596927 != nil:
    section.add "resourceGroupName", valid_596927
  var valid_596928 = path.getOrDefault("name")
  valid_596928 = validateParameter(valid_596928, JString, required = true,
                                 default = nil)
  if valid_596928 != nil:
    section.add "name", valid_596928
  var valid_596929 = path.getOrDefault("processId")
  valid_596929 = validateParameter(valid_596929, JString, required = true,
                                 default = nil)
  if valid_596929 != nil:
    section.add "processId", valid_596929
  var valid_596930 = path.getOrDefault("slot")
  valid_596930 = validateParameter(valid_596930, JString, required = true,
                                 default = nil)
  if valid_596930 != nil:
    section.add "slot", valid_596930
  var valid_596931 = path.getOrDefault("subscriptionId")
  valid_596931 = validateParameter(valid_596931, JString, required = true,
                                 default = nil)
  if valid_596931 != nil:
    section.add "subscriptionId", valid_596931
  var valid_596932 = path.getOrDefault("baseAddress")
  valid_596932 = validateParameter(valid_596932, JString, required = true,
                                 default = nil)
  if valid_596932 != nil:
    section.add "baseAddress", valid_596932
  var valid_596933 = path.getOrDefault("instanceId")
  valid_596933 = validateParameter(valid_596933, JString, required = true,
                                 default = nil)
  if valid_596933 != nil:
    section.add "instanceId", valid_596933
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596934 = query.getOrDefault("api-version")
  valid_596934 = validateParameter(valid_596934, JString, required = true,
                                 default = nil)
  if valid_596934 != nil:
    section.add "api-version", valid_596934
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596935: Call_WebAppsGetInstanceProcessModuleSlot_596924;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596935.validator(path, query, header, formData, body)
  let scheme = call_596935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596935.url(scheme.get, call_596935.host, call_596935.base,
                         call_596935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596935, url, valid)

proc call*(call_596936: Call_WebAppsGetInstanceProcessModuleSlot_596924;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string;
          baseAddress: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596937 = newJObject()
  var query_596938 = newJObject()
  add(path_596937, "resourceGroupName", newJString(resourceGroupName))
  add(query_596938, "api-version", newJString(apiVersion))
  add(path_596937, "name", newJString(name))
  add(path_596937, "processId", newJString(processId))
  add(path_596937, "slot", newJString(slot))
  add(path_596937, "subscriptionId", newJString(subscriptionId))
  add(path_596937, "baseAddress", newJString(baseAddress))
  add(path_596937, "instanceId", newJString(instanceId))
  result = call_596936.call(path_596937, query_596938, nil, nil, nil)

var webAppsGetInstanceProcessModuleSlot* = Call_WebAppsGetInstanceProcessModuleSlot_596924(
    name: "webAppsGetInstanceProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModuleSlot_596925, base: "",
    url: url_WebAppsGetInstanceProcessModuleSlot_596926, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreadsSlot_596939 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessThreadsSlot_596941(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreadsSlot_596940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596942 = path.getOrDefault("resourceGroupName")
  valid_596942 = validateParameter(valid_596942, JString, required = true,
                                 default = nil)
  if valid_596942 != nil:
    section.add "resourceGroupName", valid_596942
  var valid_596943 = path.getOrDefault("name")
  valid_596943 = validateParameter(valid_596943, JString, required = true,
                                 default = nil)
  if valid_596943 != nil:
    section.add "name", valid_596943
  var valid_596944 = path.getOrDefault("processId")
  valid_596944 = validateParameter(valid_596944, JString, required = true,
                                 default = nil)
  if valid_596944 != nil:
    section.add "processId", valid_596944
  var valid_596945 = path.getOrDefault("slot")
  valid_596945 = validateParameter(valid_596945, JString, required = true,
                                 default = nil)
  if valid_596945 != nil:
    section.add "slot", valid_596945
  var valid_596946 = path.getOrDefault("subscriptionId")
  valid_596946 = validateParameter(valid_596946, JString, required = true,
                                 default = nil)
  if valid_596946 != nil:
    section.add "subscriptionId", valid_596946
  var valid_596947 = path.getOrDefault("instanceId")
  valid_596947 = validateParameter(valid_596947, JString, required = true,
                                 default = nil)
  if valid_596947 != nil:
    section.add "instanceId", valid_596947
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596948 = query.getOrDefault("api-version")
  valid_596948 = validateParameter(valid_596948, JString, required = true,
                                 default = nil)
  if valid_596948 != nil:
    section.add "api-version", valid_596948
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596949: Call_WebAppsListInstanceProcessThreadsSlot_596939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596949.validator(path, query, header, formData, body)
  let scheme = call_596949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596949.url(scheme.get, call_596949.host, call_596949.base,
                         call_596949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596949, url, valid)

proc call*(call_596950: Call_WebAppsListInstanceProcessThreadsSlot_596939;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596951 = newJObject()
  var query_596952 = newJObject()
  add(path_596951, "resourceGroupName", newJString(resourceGroupName))
  add(query_596952, "api-version", newJString(apiVersion))
  add(path_596951, "name", newJString(name))
  add(path_596951, "processId", newJString(processId))
  add(path_596951, "slot", newJString(slot))
  add(path_596951, "subscriptionId", newJString(subscriptionId))
  add(path_596951, "instanceId", newJString(instanceId))
  result = call_596950.call(path_596951, query_596952, nil, nil, nil)

var webAppsListInstanceProcessThreadsSlot* = Call_WebAppsListInstanceProcessThreadsSlot_596939(
    name: "webAppsListInstanceProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreadsSlot_596940, base: "",
    url: url_WebAppsListInstanceProcessThreadsSlot_596941, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThreadSlot_596953 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessThreadSlot_596955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThreadSlot_596954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596956 = path.getOrDefault("resourceGroupName")
  valid_596956 = validateParameter(valid_596956, JString, required = true,
                                 default = nil)
  if valid_596956 != nil:
    section.add "resourceGroupName", valid_596956
  var valid_596957 = path.getOrDefault("name")
  valid_596957 = validateParameter(valid_596957, JString, required = true,
                                 default = nil)
  if valid_596957 != nil:
    section.add "name", valid_596957
  var valid_596958 = path.getOrDefault("processId")
  valid_596958 = validateParameter(valid_596958, JString, required = true,
                                 default = nil)
  if valid_596958 != nil:
    section.add "processId", valid_596958
  var valid_596959 = path.getOrDefault("slot")
  valid_596959 = validateParameter(valid_596959, JString, required = true,
                                 default = nil)
  if valid_596959 != nil:
    section.add "slot", valid_596959
  var valid_596960 = path.getOrDefault("subscriptionId")
  valid_596960 = validateParameter(valid_596960, JString, required = true,
                                 default = nil)
  if valid_596960 != nil:
    section.add "subscriptionId", valid_596960
  var valid_596961 = path.getOrDefault("instanceId")
  valid_596961 = validateParameter(valid_596961, JString, required = true,
                                 default = nil)
  if valid_596961 != nil:
    section.add "instanceId", valid_596961
  var valid_596962 = path.getOrDefault("threadId")
  valid_596962 = validateParameter(valid_596962, JString, required = true,
                                 default = nil)
  if valid_596962 != nil:
    section.add "threadId", valid_596962
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596963 = query.getOrDefault("api-version")
  valid_596963 = validateParameter(valid_596963, JString, required = true,
                                 default = nil)
  if valid_596963 != nil:
    section.add "api-version", valid_596963
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596964: Call_WebAppsGetInstanceProcessThreadSlot_596953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_596964.validator(path, query, header, formData, body)
  let scheme = call_596964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596964.url(scheme.get, call_596964.host, call_596964.base,
                         call_596964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596964, url, valid)

proc call*(call_596965: Call_WebAppsGetInstanceProcessThreadSlot_596953;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_596966 = newJObject()
  var query_596967 = newJObject()
  add(path_596966, "resourceGroupName", newJString(resourceGroupName))
  add(query_596967, "api-version", newJString(apiVersion))
  add(path_596966, "name", newJString(name))
  add(path_596966, "processId", newJString(processId))
  add(path_596966, "slot", newJString(slot))
  add(path_596966, "subscriptionId", newJString(subscriptionId))
  add(path_596966, "instanceId", newJString(instanceId))
  add(path_596966, "threadId", newJString(threadId))
  result = call_596965.call(path_596966, query_596967, nil, nil, nil)

var webAppsGetInstanceProcessThreadSlot* = Call_WebAppsGetInstanceProcessThreadSlot_596953(
    name: "webAppsGetInstanceProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThreadSlot_596954, base: "",
    url: url_WebAppsGetInstanceProcessThreadSlot_596955, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneableSlot_596968 = ref object of OpenApiRestCall_593437
proc url_WebAppsIsCloneableSlot_596970(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneableSlot_596969(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596971 = path.getOrDefault("resourceGroupName")
  valid_596971 = validateParameter(valid_596971, JString, required = true,
                                 default = nil)
  if valid_596971 != nil:
    section.add "resourceGroupName", valid_596971
  var valid_596972 = path.getOrDefault("name")
  valid_596972 = validateParameter(valid_596972, JString, required = true,
                                 default = nil)
  if valid_596972 != nil:
    section.add "name", valid_596972
  var valid_596973 = path.getOrDefault("slot")
  valid_596973 = validateParameter(valid_596973, JString, required = true,
                                 default = nil)
  if valid_596973 != nil:
    section.add "slot", valid_596973
  var valid_596974 = path.getOrDefault("subscriptionId")
  valid_596974 = validateParameter(valid_596974, JString, required = true,
                                 default = nil)
  if valid_596974 != nil:
    section.add "subscriptionId", valid_596974
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596975 = query.getOrDefault("api-version")
  valid_596975 = validateParameter(valid_596975, JString, required = true,
                                 default = nil)
  if valid_596975 != nil:
    section.add "api-version", valid_596975
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596976: Call_WebAppsIsCloneableSlot_596968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_596976.validator(path, query, header, formData, body)
  let scheme = call_596976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596976.url(scheme.get, call_596976.host, call_596976.base,
                         call_596976.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596976, url, valid)

proc call*(call_596977: Call_WebAppsIsCloneableSlot_596968;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsIsCloneableSlot
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596978 = newJObject()
  var query_596979 = newJObject()
  add(path_596978, "resourceGroupName", newJString(resourceGroupName))
  add(query_596979, "api-version", newJString(apiVersion))
  add(path_596978, "name", newJString(name))
  add(path_596978, "slot", newJString(slot))
  add(path_596978, "subscriptionId", newJString(subscriptionId))
  result = call_596977.call(path_596978, query_596979, nil, nil, nil)

var webAppsIsCloneableSlot* = Call_WebAppsIsCloneableSlot_596968(
    name: "webAppsIsCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_WebAppsIsCloneableSlot_596969, base: "",
    url: url_WebAppsIsCloneableSlot_596970, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggersSlot_596980 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSyncFunctionTriggersSlot_596982(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggersSlot_596981(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596983 = path.getOrDefault("resourceGroupName")
  valid_596983 = validateParameter(valid_596983, JString, required = true,
                                 default = nil)
  if valid_596983 != nil:
    section.add "resourceGroupName", valid_596983
  var valid_596984 = path.getOrDefault("name")
  valid_596984 = validateParameter(valid_596984, JString, required = true,
                                 default = nil)
  if valid_596984 != nil:
    section.add "name", valid_596984
  var valid_596985 = path.getOrDefault("slot")
  valid_596985 = validateParameter(valid_596985, JString, required = true,
                                 default = nil)
  if valid_596985 != nil:
    section.add "slot", valid_596985
  var valid_596986 = path.getOrDefault("subscriptionId")
  valid_596986 = validateParameter(valid_596986, JString, required = true,
                                 default = nil)
  if valid_596986 != nil:
    section.add "subscriptionId", valid_596986
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596987 = query.getOrDefault("api-version")
  valid_596987 = validateParameter(valid_596987, JString, required = true,
                                 default = nil)
  if valid_596987 != nil:
    section.add "api-version", valid_596987
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596988: Call_WebAppsListSyncFunctionTriggersSlot_596980;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_596988.validator(path, query, header, formData, body)
  let scheme = call_596988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596988.url(scheme.get, call_596988.host, call_596988.base,
                         call_596988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596988, url, valid)

proc call*(call_596989: Call_WebAppsListSyncFunctionTriggersSlot_596980;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggersSlot
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596990 = newJObject()
  var query_596991 = newJObject()
  add(path_596990, "resourceGroupName", newJString(resourceGroupName))
  add(query_596991, "api-version", newJString(apiVersion))
  add(path_596990, "name", newJString(name))
  add(path_596990, "slot", newJString(slot))
  add(path_596990, "subscriptionId", newJString(subscriptionId))
  result = call_596989.call(path_596990, query_596991, nil, nil, nil)

var webAppsListSyncFunctionTriggersSlot* = Call_WebAppsListSyncFunctionTriggersSlot_596980(
    name: "webAppsListSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggersSlot_596981, base: "",
    url: url_WebAppsListSyncFunctionTriggersSlot_596982, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitionsSlot_596992 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetricDefinitionsSlot_596994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitionsSlot_596993(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596995 = path.getOrDefault("resourceGroupName")
  valid_596995 = validateParameter(valid_596995, JString, required = true,
                                 default = nil)
  if valid_596995 != nil:
    section.add "resourceGroupName", valid_596995
  var valid_596996 = path.getOrDefault("name")
  valid_596996 = validateParameter(valid_596996, JString, required = true,
                                 default = nil)
  if valid_596996 != nil:
    section.add "name", valid_596996
  var valid_596997 = path.getOrDefault("slot")
  valid_596997 = validateParameter(valid_596997, JString, required = true,
                                 default = nil)
  if valid_596997 != nil:
    section.add "slot", valid_596997
  var valid_596998 = path.getOrDefault("subscriptionId")
  valid_596998 = validateParameter(valid_596998, JString, required = true,
                                 default = nil)
  if valid_596998 != nil:
    section.add "subscriptionId", valid_596998
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596999 = query.getOrDefault("api-version")
  valid_596999 = validateParameter(valid_596999, JString, required = true,
                                 default = nil)
  if valid_596999 != nil:
    section.add "api-version", valid_596999
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597000: Call_WebAppsListMetricDefinitionsSlot_596992;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_597000.validator(path, query, header, formData, body)
  let scheme = call_597000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597000.url(scheme.get, call_597000.host, call_597000.base,
                         call_597000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597000, url, valid)

proc call*(call_597001: Call_WebAppsListMetricDefinitionsSlot_596992;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitionsSlot
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597002 = newJObject()
  var query_597003 = newJObject()
  add(path_597002, "resourceGroupName", newJString(resourceGroupName))
  add(query_597003, "api-version", newJString(apiVersion))
  add(path_597002, "name", newJString(name))
  add(path_597002, "slot", newJString(slot))
  add(path_597002, "subscriptionId", newJString(subscriptionId))
  result = call_597001.call(path_597002, query_597003, nil, nil, nil)

var webAppsListMetricDefinitionsSlot* = Call_WebAppsListMetricDefinitionsSlot_596992(
    name: "webAppsListMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitionsSlot_596993, base: "",
    url: url_WebAppsListMetricDefinitionsSlot_596994, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricsSlot_597004 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetricsSlot_597006(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricsSlot_597005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597007 = path.getOrDefault("resourceGroupName")
  valid_597007 = validateParameter(valid_597007, JString, required = true,
                                 default = nil)
  if valid_597007 != nil:
    section.add "resourceGroupName", valid_597007
  var valid_597008 = path.getOrDefault("name")
  valid_597008 = validateParameter(valid_597008, JString, required = true,
                                 default = nil)
  if valid_597008 != nil:
    section.add "name", valid_597008
  var valid_597009 = path.getOrDefault("slot")
  valid_597009 = validateParameter(valid_597009, JString, required = true,
                                 default = nil)
  if valid_597009 != nil:
    section.add "slot", valid_597009
  var valid_597010 = path.getOrDefault("subscriptionId")
  valid_597010 = validateParameter(valid_597010, JString, required = true,
                                 default = nil)
  if valid_597010 != nil:
    section.add "subscriptionId", valid_597010
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597011 = query.getOrDefault("api-version")
  valid_597011 = validateParameter(valid_597011, JString, required = true,
                                 default = nil)
  if valid_597011 != nil:
    section.add "api-version", valid_597011
  var valid_597012 = query.getOrDefault("details")
  valid_597012 = validateParameter(valid_597012, JBool, required = false, default = nil)
  if valid_597012 != nil:
    section.add "details", valid_597012
  var valid_597013 = query.getOrDefault("$filter")
  valid_597013 = validateParameter(valid_597013, JString, required = false,
                                 default = nil)
  if valid_597013 != nil:
    section.add "$filter", valid_597013
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597014: Call_WebAppsListMetricsSlot_597004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_597014.validator(path, query, header, formData, body)
  let scheme = call_597014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597014.url(scheme.get, call_597014.host, call_597014.base,
                         call_597014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597014, url, valid)

proc call*(call_597015: Call_WebAppsListMetricsSlot_597004;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetricsSlot
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597016 = newJObject()
  var query_597017 = newJObject()
  add(path_597016, "resourceGroupName", newJString(resourceGroupName))
  add(query_597017, "api-version", newJString(apiVersion))
  add(path_597016, "name", newJString(name))
  add(query_597017, "details", newJBool(details))
  add(path_597016, "slot", newJString(slot))
  add(path_597016, "subscriptionId", newJString(subscriptionId))
  add(query_597017, "$filter", newJString(Filter))
  result = call_597015.call(path_597016, query_597017, nil, nil, nil)

var webAppsListMetricsSlot* = Call_WebAppsListMetricsSlot_597004(
    name: "webAppsListMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_WebAppsListMetricsSlot_597005, base: "",
    url: url_WebAppsListMetricsSlot_597006, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatusSlot_597018 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMigrateMySqlStatusSlot_597020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatusSlot_597019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597021 = path.getOrDefault("resourceGroupName")
  valid_597021 = validateParameter(valid_597021, JString, required = true,
                                 default = nil)
  if valid_597021 != nil:
    section.add "resourceGroupName", valid_597021
  var valid_597022 = path.getOrDefault("name")
  valid_597022 = validateParameter(valid_597022, JString, required = true,
                                 default = nil)
  if valid_597022 != nil:
    section.add "name", valid_597022
  var valid_597023 = path.getOrDefault("slot")
  valid_597023 = validateParameter(valid_597023, JString, required = true,
                                 default = nil)
  if valid_597023 != nil:
    section.add "slot", valid_597023
  var valid_597024 = path.getOrDefault("subscriptionId")
  valid_597024 = validateParameter(valid_597024, JString, required = true,
                                 default = nil)
  if valid_597024 != nil:
    section.add "subscriptionId", valid_597024
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597025 = query.getOrDefault("api-version")
  valid_597025 = validateParameter(valid_597025, JString, required = true,
                                 default = nil)
  if valid_597025 != nil:
    section.add "api-version", valid_597025
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597026: Call_WebAppsGetMigrateMySqlStatusSlot_597018;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_597026.validator(path, query, header, formData, body)
  let scheme = call_597026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597026.url(scheme.get, call_597026.host, call_597026.base,
                         call_597026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597026, url, valid)

proc call*(call_597027: Call_WebAppsGetMigrateMySqlStatusSlot_597018;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatusSlot
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597028 = newJObject()
  var query_597029 = newJObject()
  add(path_597028, "resourceGroupName", newJString(resourceGroupName))
  add(query_597029, "api-version", newJString(apiVersion))
  add(path_597028, "name", newJString(name))
  add(path_597028, "slot", newJString(slot))
  add(path_597028, "subscriptionId", newJString(subscriptionId))
  result = call_597027.call(path_597028, query_597029, nil, nil, nil)

var webAppsGetMigrateMySqlStatusSlot* = Call_WebAppsGetMigrateMySqlStatusSlot_597018(
    name: "webAppsGetMigrateMySqlStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatusSlot_597019, base: "",
    url: url_WebAppsGetMigrateMySqlStatusSlot_597020, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597042 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597044(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597043(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597045 = path.getOrDefault("resourceGroupName")
  valid_597045 = validateParameter(valid_597045, JString, required = true,
                                 default = nil)
  if valid_597045 != nil:
    section.add "resourceGroupName", valid_597045
  var valid_597046 = path.getOrDefault("name")
  valid_597046 = validateParameter(valid_597046, JString, required = true,
                                 default = nil)
  if valid_597046 != nil:
    section.add "name", valid_597046
  var valid_597047 = path.getOrDefault("slot")
  valid_597047 = validateParameter(valid_597047, JString, required = true,
                                 default = nil)
  if valid_597047 != nil:
    section.add "slot", valid_597047
  var valid_597048 = path.getOrDefault("subscriptionId")
  valid_597048 = validateParameter(valid_597048, JString, required = true,
                                 default = nil)
  if valid_597048 != nil:
    section.add "subscriptionId", valid_597048
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597049 = query.getOrDefault("api-version")
  valid_597049 = validateParameter(valid_597049, JString, required = true,
                                 default = nil)
  if valid_597049 != nil:
    section.add "api-version", valid_597049
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597051: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597042;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_597051.validator(path, query, header, formData, body)
  let scheme = call_597051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597051.url(scheme.get, call_597051.host, call_597051.base,
                         call_597051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597051, url, valid)

proc call*(call_597052: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597042;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597053 = newJObject()
  var query_597054 = newJObject()
  var body_597055 = newJObject()
  add(path_597053, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597055 = connectionEnvelope
  add(path_597053, "name", newJString(name))
  add(query_597054, "api-version", newJString(apiVersion))
  add(path_597053, "slot", newJString(slot))
  add(path_597053, "subscriptionId", newJString(subscriptionId))
  result = call_597052.call(path_597053, query_597054, nil, nil, body_597055)

var webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot* = Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597042(
    name: "webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597043,
    base: "", url: url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_597044,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_597030 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSwiftVirtualNetworkConnectionSlot_597032(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSwiftVirtualNetworkConnectionSlot_597031(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a Swift Virtual Network connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597033 = path.getOrDefault("resourceGroupName")
  valid_597033 = validateParameter(valid_597033, JString, required = true,
                                 default = nil)
  if valid_597033 != nil:
    section.add "resourceGroupName", valid_597033
  var valid_597034 = path.getOrDefault("name")
  valid_597034 = validateParameter(valid_597034, JString, required = true,
                                 default = nil)
  if valid_597034 != nil:
    section.add "name", valid_597034
  var valid_597035 = path.getOrDefault("slot")
  valid_597035 = validateParameter(valid_597035, JString, required = true,
                                 default = nil)
  if valid_597035 != nil:
    section.add "slot", valid_597035
  var valid_597036 = path.getOrDefault("subscriptionId")
  valid_597036 = validateParameter(valid_597036, JString, required = true,
                                 default = nil)
  if valid_597036 != nil:
    section.add "subscriptionId", valid_597036
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597037 = query.getOrDefault("api-version")
  valid_597037 = validateParameter(valid_597037, JString, required = true,
                                 default = nil)
  if valid_597037 != nil:
    section.add "api-version", valid_597037
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597038: Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_597030;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a Swift Virtual Network connection.
  ## 
  let valid = call_597038.validator(path, query, header, formData, body)
  let scheme = call_597038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597038.url(scheme.get, call_597038.host, call_597038.base,
                         call_597038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597038, url, valid)

proc call*(call_597039: Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_597030;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSwiftVirtualNetworkConnectionSlot
  ## Gets a Swift Virtual Network connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597040 = newJObject()
  var query_597041 = newJObject()
  add(path_597040, "resourceGroupName", newJString(resourceGroupName))
  add(query_597041, "api-version", newJString(apiVersion))
  add(path_597040, "name", newJString(name))
  add(path_597040, "slot", newJString(slot))
  add(path_597040, "subscriptionId", newJString(subscriptionId))
  result = call_597039.call(path_597040, query_597041, nil, nil, nil)

var webAppsGetSwiftVirtualNetworkConnectionSlot* = Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_597030(
    name: "webAppsGetSwiftVirtualNetworkConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsGetSwiftVirtualNetworkConnectionSlot_597031,
    base: "", url: url_WebAppsGetSwiftVirtualNetworkConnectionSlot_597032,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597068 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597069(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597071 = path.getOrDefault("resourceGroupName")
  valid_597071 = validateParameter(valid_597071, JString, required = true,
                                 default = nil)
  if valid_597071 != nil:
    section.add "resourceGroupName", valid_597071
  var valid_597072 = path.getOrDefault("name")
  valid_597072 = validateParameter(valid_597072, JString, required = true,
                                 default = nil)
  if valid_597072 != nil:
    section.add "name", valid_597072
  var valid_597073 = path.getOrDefault("slot")
  valid_597073 = validateParameter(valid_597073, JString, required = true,
                                 default = nil)
  if valid_597073 != nil:
    section.add "slot", valid_597073
  var valid_597074 = path.getOrDefault("subscriptionId")
  valid_597074 = validateParameter(valid_597074, JString, required = true,
                                 default = nil)
  if valid_597074 != nil:
    section.add "subscriptionId", valid_597074
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597075 = query.getOrDefault("api-version")
  valid_597075 = validateParameter(valid_597075, JString, required = true,
                                 default = nil)
  if valid_597075 != nil:
    section.add "api-version", valid_597075
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597077: Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_597077.validator(path, query, header, formData, body)
  let scheme = call_597077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597077.url(scheme.get, call_597077.host, call_597077.base,
                         call_597077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597077, url, valid)

proc call*(call_597078: Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597068;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateSwiftVirtualNetworkConnectionSlot
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597079 = newJObject()
  var query_597080 = newJObject()
  var body_597081 = newJObject()
  add(path_597079, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597081 = connectionEnvelope
  add(path_597079, "name", newJString(name))
  add(query_597080, "api-version", newJString(apiVersion))
  add(path_597079, "slot", newJString(slot))
  add(path_597079, "subscriptionId", newJString(subscriptionId))
  result = call_597078.call(path_597079, query_597080, nil, nil, body_597081)

var webAppsUpdateSwiftVirtualNetworkConnectionSlot* = Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597068(
    name: "webAppsUpdateSwiftVirtualNetworkConnectionSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597069,
    base: "", url: url_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_597070,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSwiftVirtualNetworkSlot_597056 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSwiftVirtualNetworkSlot_597058(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSwiftVirtualNetworkSlot_597057(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597059 = path.getOrDefault("resourceGroupName")
  valid_597059 = validateParameter(valid_597059, JString, required = true,
                                 default = nil)
  if valid_597059 != nil:
    section.add "resourceGroupName", valid_597059
  var valid_597060 = path.getOrDefault("name")
  valid_597060 = validateParameter(valid_597060, JString, required = true,
                                 default = nil)
  if valid_597060 != nil:
    section.add "name", valid_597060
  var valid_597061 = path.getOrDefault("slot")
  valid_597061 = validateParameter(valid_597061, JString, required = true,
                                 default = nil)
  if valid_597061 != nil:
    section.add "slot", valid_597061
  var valid_597062 = path.getOrDefault("subscriptionId")
  valid_597062 = validateParameter(valid_597062, JString, required = true,
                                 default = nil)
  if valid_597062 != nil:
    section.add "subscriptionId", valid_597062
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597063 = query.getOrDefault("api-version")
  valid_597063 = validateParameter(valid_597063, JString, required = true,
                                 default = nil)
  if valid_597063 != nil:
    section.add "api-version", valid_597063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597064: Call_WebAppsDeleteSwiftVirtualNetworkSlot_597056;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  let valid = call_597064.validator(path, query, header, formData, body)
  let scheme = call_597064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597064.url(scheme.get, call_597064.host, call_597064.base,
                         call_597064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597064, url, valid)

proc call*(call_597065: Call_WebAppsDeleteSwiftVirtualNetworkSlot_597056;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSwiftVirtualNetworkSlot
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597066 = newJObject()
  var query_597067 = newJObject()
  add(path_597066, "resourceGroupName", newJString(resourceGroupName))
  add(query_597067, "api-version", newJString(apiVersion))
  add(path_597066, "name", newJString(name))
  add(path_597066, "slot", newJString(slot))
  add(path_597066, "subscriptionId", newJString(subscriptionId))
  result = call_597065.call(path_597066, query_597067, nil, nil, nil)

var webAppsDeleteSwiftVirtualNetworkSlot* = Call_WebAppsDeleteSwiftVirtualNetworkSlot_597056(
    name: "webAppsDeleteSwiftVirtualNetworkSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsDeleteSwiftVirtualNetworkSlot_597057, base: "",
    url: url_WebAppsDeleteSwiftVirtualNetworkSlot_597058, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeaturesSlot_597082 = ref object of OpenApiRestCall_593437
proc url_WebAppsListNetworkFeaturesSlot_597084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeaturesSlot_597083(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597085 = path.getOrDefault("resourceGroupName")
  valid_597085 = validateParameter(valid_597085, JString, required = true,
                                 default = nil)
  if valid_597085 != nil:
    section.add "resourceGroupName", valid_597085
  var valid_597086 = path.getOrDefault("name")
  valid_597086 = validateParameter(valid_597086, JString, required = true,
                                 default = nil)
  if valid_597086 != nil:
    section.add "name", valid_597086
  var valid_597087 = path.getOrDefault("slot")
  valid_597087 = validateParameter(valid_597087, JString, required = true,
                                 default = nil)
  if valid_597087 != nil:
    section.add "slot", valid_597087
  var valid_597088 = path.getOrDefault("subscriptionId")
  valid_597088 = validateParameter(valid_597088, JString, required = true,
                                 default = nil)
  if valid_597088 != nil:
    section.add "subscriptionId", valid_597088
  var valid_597089 = path.getOrDefault("view")
  valid_597089 = validateParameter(valid_597089, JString, required = true,
                                 default = nil)
  if valid_597089 != nil:
    section.add "view", valid_597089
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597090 = query.getOrDefault("api-version")
  valid_597090 = validateParameter(valid_597090, JString, required = true,
                                 default = nil)
  if valid_597090 != nil:
    section.add "api-version", valid_597090
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597091: Call_WebAppsListNetworkFeaturesSlot_597082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_597091.validator(path, query, header, formData, body)
  let scheme = call_597091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597091.url(scheme.get, call_597091.host, call_597091.base,
                         call_597091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597091, url, valid)

proc call*(call_597092: Call_WebAppsListNetworkFeaturesSlot_597082;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeaturesSlot
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_597093 = newJObject()
  var query_597094 = newJObject()
  add(path_597093, "resourceGroupName", newJString(resourceGroupName))
  add(query_597094, "api-version", newJString(apiVersion))
  add(path_597093, "name", newJString(name))
  add(path_597093, "slot", newJString(slot))
  add(path_597093, "subscriptionId", newJString(subscriptionId))
  add(path_597093, "view", newJString(view))
  result = call_597092.call(path_597093, query_597094, nil, nil, nil)

var webAppsListNetworkFeaturesSlot* = Call_WebAppsListNetworkFeaturesSlot_597082(
    name: "webAppsListNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeaturesSlot_597083, base: "",
    url: url_WebAppsListNetworkFeaturesSlot_597084, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationSlot_597095 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTraceOperationSlot_597097(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/networkTrace/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationSlot_597096(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597098 = path.getOrDefault("resourceGroupName")
  valid_597098 = validateParameter(valid_597098, JString, required = true,
                                 default = nil)
  if valid_597098 != nil:
    section.add "resourceGroupName", valid_597098
  var valid_597099 = path.getOrDefault("name")
  valid_597099 = validateParameter(valid_597099, JString, required = true,
                                 default = nil)
  if valid_597099 != nil:
    section.add "name", valid_597099
  var valid_597100 = path.getOrDefault("slot")
  valid_597100 = validateParameter(valid_597100, JString, required = true,
                                 default = nil)
  if valid_597100 != nil:
    section.add "slot", valid_597100
  var valid_597101 = path.getOrDefault("subscriptionId")
  valid_597101 = validateParameter(valid_597101, JString, required = true,
                                 default = nil)
  if valid_597101 != nil:
    section.add "subscriptionId", valid_597101
  var valid_597102 = path.getOrDefault("operationId")
  valid_597102 = validateParameter(valid_597102, JString, required = true,
                                 default = nil)
  if valid_597102 != nil:
    section.add "operationId", valid_597102
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597103 = query.getOrDefault("api-version")
  valid_597103 = validateParameter(valid_597103, JString, required = true,
                                 default = nil)
  if valid_597103 != nil:
    section.add "api-version", valid_597103
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597104: Call_WebAppsGetNetworkTraceOperationSlot_597095;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_597104.validator(path, query, header, formData, body)
  let scheme = call_597104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597104.url(scheme.get, call_597104.host, call_597104.base,
                         call_597104.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597104, url, valid)

proc call*(call_597105: Call_WebAppsGetNetworkTraceOperationSlot_597095;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperationSlot
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_597106 = newJObject()
  var query_597107 = newJObject()
  add(path_597106, "resourceGroupName", newJString(resourceGroupName))
  add(query_597107, "api-version", newJString(apiVersion))
  add(path_597106, "name", newJString(name))
  add(path_597106, "slot", newJString(slot))
  add(path_597106, "subscriptionId", newJString(subscriptionId))
  add(path_597106, "operationId", newJString(operationId))
  result = call_597105.call(path_597106, query_597107, nil, nil, nil)

var webAppsGetNetworkTraceOperationSlot* = Call_WebAppsGetNetworkTraceOperationSlot_597095(
    name: "webAppsGetNetworkTraceOperationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationSlot_597096, base: "",
    url: url_WebAppsGetNetworkTraceOperationSlot_597097, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceSlot_597108 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartWebSiteNetworkTraceSlot_597110(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceSlot_597109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597111 = path.getOrDefault("resourceGroupName")
  valid_597111 = validateParameter(valid_597111, JString, required = true,
                                 default = nil)
  if valid_597111 != nil:
    section.add "resourceGroupName", valid_597111
  var valid_597112 = path.getOrDefault("name")
  valid_597112 = validateParameter(valid_597112, JString, required = true,
                                 default = nil)
  if valid_597112 != nil:
    section.add "name", valid_597112
  var valid_597113 = path.getOrDefault("slot")
  valid_597113 = validateParameter(valid_597113, JString, required = true,
                                 default = nil)
  if valid_597113 != nil:
    section.add "slot", valid_597113
  var valid_597114 = path.getOrDefault("subscriptionId")
  valid_597114 = validateParameter(valid_597114, JString, required = true,
                                 default = nil)
  if valid_597114 != nil:
    section.add "subscriptionId", valid_597114
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597115 = query.getOrDefault("api-version")
  valid_597115 = validateParameter(valid_597115, JString, required = true,
                                 default = nil)
  if valid_597115 != nil:
    section.add "api-version", valid_597115
  var valid_597116 = query.getOrDefault("durationInSeconds")
  valid_597116 = validateParameter(valid_597116, JInt, required = false, default = nil)
  if valid_597116 != nil:
    section.add "durationInSeconds", valid_597116
  var valid_597117 = query.getOrDefault("maxFrameLength")
  valid_597117 = validateParameter(valid_597117, JInt, required = false, default = nil)
  if valid_597117 != nil:
    section.add "maxFrameLength", valid_597117
  var valid_597118 = query.getOrDefault("sasUrl")
  valid_597118 = validateParameter(valid_597118, JString, required = false,
                                 default = nil)
  if valid_597118 != nil:
    section.add "sasUrl", valid_597118
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597119: Call_WebAppsStartWebSiteNetworkTraceSlot_597108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  let valid = call_597119.validator(path, query, header, formData, body)
  let scheme = call_597119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597119.url(scheme.get, call_597119.host, call_597119.base,
                         call_597119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597119, url, valid)

proc call*(call_597120: Call_WebAppsStartWebSiteNetworkTraceSlot_597108;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceSlot
  ## Start capturing network packets for the site (To be deprecated).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_597121 = newJObject()
  var query_597122 = newJObject()
  add(path_597121, "resourceGroupName", newJString(resourceGroupName))
  add(query_597122, "api-version", newJString(apiVersion))
  add(path_597121, "name", newJString(name))
  add(path_597121, "slot", newJString(slot))
  add(path_597121, "subscriptionId", newJString(subscriptionId))
  add(query_597122, "durationInSeconds", newJInt(durationInSeconds))
  add(query_597122, "maxFrameLength", newJInt(maxFrameLength))
  add(query_597122, "sasUrl", newJString(sasUrl))
  result = call_597120.call(path_597121, query_597122, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceSlot* = Call_WebAppsStartWebSiteNetworkTraceSlot_597108(
    name: "webAppsStartWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTraceSlot_597109, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceSlot_597110, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceOperationSlot_597123 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartWebSiteNetworkTraceOperationSlot_597125(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/startOperation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceOperationSlot_597124(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597126 = path.getOrDefault("resourceGroupName")
  valid_597126 = validateParameter(valid_597126, JString, required = true,
                                 default = nil)
  if valid_597126 != nil:
    section.add "resourceGroupName", valid_597126
  var valid_597127 = path.getOrDefault("name")
  valid_597127 = validateParameter(valid_597127, JString, required = true,
                                 default = nil)
  if valid_597127 != nil:
    section.add "name", valid_597127
  var valid_597128 = path.getOrDefault("slot")
  valid_597128 = validateParameter(valid_597128, JString, required = true,
                                 default = nil)
  if valid_597128 != nil:
    section.add "slot", valid_597128
  var valid_597129 = path.getOrDefault("subscriptionId")
  valid_597129 = validateParameter(valid_597129, JString, required = true,
                                 default = nil)
  if valid_597129 != nil:
    section.add "subscriptionId", valid_597129
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597130 = query.getOrDefault("api-version")
  valid_597130 = validateParameter(valid_597130, JString, required = true,
                                 default = nil)
  if valid_597130 != nil:
    section.add "api-version", valid_597130
  var valid_597131 = query.getOrDefault("durationInSeconds")
  valid_597131 = validateParameter(valid_597131, JInt, required = false, default = nil)
  if valid_597131 != nil:
    section.add "durationInSeconds", valid_597131
  var valid_597132 = query.getOrDefault("maxFrameLength")
  valid_597132 = validateParameter(valid_597132, JInt, required = false, default = nil)
  if valid_597132 != nil:
    section.add "maxFrameLength", valid_597132
  var valid_597133 = query.getOrDefault("sasUrl")
  valid_597133 = validateParameter(valid_597133, JString, required = false,
                                 default = nil)
  if valid_597133 != nil:
    section.add "sasUrl", valid_597133
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597134: Call_WebAppsStartWebSiteNetworkTraceOperationSlot_597123;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_597134.validator(path, query, header, formData, body)
  let scheme = call_597134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597134.url(scheme.get, call_597134.host, call_597134.base,
                         call_597134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597134, url, valid)

proc call*(call_597135: Call_WebAppsStartWebSiteNetworkTraceOperationSlot_597123;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceOperationSlot
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_597136 = newJObject()
  var query_597137 = newJObject()
  add(path_597136, "resourceGroupName", newJString(resourceGroupName))
  add(query_597137, "api-version", newJString(apiVersion))
  add(path_597136, "name", newJString(name))
  add(path_597136, "slot", newJString(slot))
  add(path_597136, "subscriptionId", newJString(subscriptionId))
  add(query_597137, "durationInSeconds", newJInt(durationInSeconds))
  add(query_597137, "maxFrameLength", newJInt(maxFrameLength))
  add(query_597137, "sasUrl", newJString(sasUrl))
  result = call_597135.call(path_597136, query_597137, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceOperationSlot* = Call_WebAppsStartWebSiteNetworkTraceOperationSlot_597123(
    name: "webAppsStartWebSiteNetworkTraceOperationSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
    validator: validate_WebAppsStartWebSiteNetworkTraceOperationSlot_597124,
    base: "", url: url_WebAppsStartWebSiteNetworkTraceOperationSlot_597125,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTraceSlot_597138 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopWebSiteNetworkTraceSlot_597140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTraceSlot_597139(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597141 = path.getOrDefault("resourceGroupName")
  valid_597141 = validateParameter(valid_597141, JString, required = true,
                                 default = nil)
  if valid_597141 != nil:
    section.add "resourceGroupName", valid_597141
  var valid_597142 = path.getOrDefault("name")
  valid_597142 = validateParameter(valid_597142, JString, required = true,
                                 default = nil)
  if valid_597142 != nil:
    section.add "name", valid_597142
  var valid_597143 = path.getOrDefault("slot")
  valid_597143 = validateParameter(valid_597143, JString, required = true,
                                 default = nil)
  if valid_597143 != nil:
    section.add "slot", valid_597143
  var valid_597144 = path.getOrDefault("subscriptionId")
  valid_597144 = validateParameter(valid_597144, JString, required = true,
                                 default = nil)
  if valid_597144 != nil:
    section.add "subscriptionId", valid_597144
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597145 = query.getOrDefault("api-version")
  valid_597145 = validateParameter(valid_597145, JString, required = true,
                                 default = nil)
  if valid_597145 != nil:
    section.add "api-version", valid_597145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597146: Call_WebAppsStopWebSiteNetworkTraceSlot_597138;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_597146.validator(path, query, header, formData, body)
  let scheme = call_597146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597146.url(scheme.get, call_597146.host, call_597146.base,
                         call_597146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597146, url, valid)

proc call*(call_597147: Call_WebAppsStopWebSiteNetworkTraceSlot_597138;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597148 = newJObject()
  var query_597149 = newJObject()
  add(path_597148, "resourceGroupName", newJString(resourceGroupName))
  add(query_597149, "api-version", newJString(apiVersion))
  add(path_597148, "name", newJString(name))
  add(path_597148, "slot", newJString(slot))
  add(path_597148, "subscriptionId", newJString(subscriptionId))
  result = call_597147.call(path_597148, query_597149, nil, nil, nil)

var webAppsStopWebSiteNetworkTraceSlot* = Call_WebAppsStopWebSiteNetworkTraceSlot_597138(
    name: "webAppsStopWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTraceSlot_597139, base: "",
    url: url_WebAppsStopWebSiteNetworkTraceSlot_597140, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesSlot_597150 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTracesSlot_597152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesSlot_597151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597153 = path.getOrDefault("resourceGroupName")
  valid_597153 = validateParameter(valid_597153, JString, required = true,
                                 default = nil)
  if valid_597153 != nil:
    section.add "resourceGroupName", valid_597153
  var valid_597154 = path.getOrDefault("name")
  valid_597154 = validateParameter(valid_597154, JString, required = true,
                                 default = nil)
  if valid_597154 != nil:
    section.add "name", valid_597154
  var valid_597155 = path.getOrDefault("slot")
  valid_597155 = validateParameter(valid_597155, JString, required = true,
                                 default = nil)
  if valid_597155 != nil:
    section.add "slot", valid_597155
  var valid_597156 = path.getOrDefault("subscriptionId")
  valid_597156 = validateParameter(valid_597156, JString, required = true,
                                 default = nil)
  if valid_597156 != nil:
    section.add "subscriptionId", valid_597156
  var valid_597157 = path.getOrDefault("operationId")
  valid_597157 = validateParameter(valid_597157, JString, required = true,
                                 default = nil)
  if valid_597157 != nil:
    section.add "operationId", valid_597157
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597158 = query.getOrDefault("api-version")
  valid_597158 = validateParameter(valid_597158, JString, required = true,
                                 default = nil)
  if valid_597158 != nil:
    section.add "api-version", valid_597158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597159: Call_WebAppsGetNetworkTracesSlot_597150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_597159.validator(path, query, header, formData, body)
  let scheme = call_597159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597159.url(scheme.get, call_597159.host, call_597159.base,
                         call_597159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597159, url, valid)

proc call*(call_597160: Call_WebAppsGetNetworkTracesSlot_597150;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTracesSlot
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_597161 = newJObject()
  var query_597162 = newJObject()
  add(path_597161, "resourceGroupName", newJString(resourceGroupName))
  add(query_597162, "api-version", newJString(apiVersion))
  add(path_597161, "name", newJString(name))
  add(path_597161, "slot", newJString(slot))
  add(path_597161, "subscriptionId", newJString(subscriptionId))
  add(path_597161, "operationId", newJString(operationId))
  result = call_597160.call(path_597161, query_597162, nil, nil, nil)

var webAppsGetNetworkTracesSlot* = Call_WebAppsGetNetworkTracesSlot_597150(
    name: "webAppsGetNetworkTracesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
    validator: validate_WebAppsGetNetworkTracesSlot_597151, base: "",
    url: url_WebAppsGetNetworkTracesSlot_597152, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationSlotV2_597163 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTraceOperationSlotV2_597165(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/networkTraces/current/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationSlotV2_597164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597166 = path.getOrDefault("resourceGroupName")
  valid_597166 = validateParameter(valid_597166, JString, required = true,
                                 default = nil)
  if valid_597166 != nil:
    section.add "resourceGroupName", valid_597166
  var valid_597167 = path.getOrDefault("name")
  valid_597167 = validateParameter(valid_597167, JString, required = true,
                                 default = nil)
  if valid_597167 != nil:
    section.add "name", valid_597167
  var valid_597168 = path.getOrDefault("slot")
  valid_597168 = validateParameter(valid_597168, JString, required = true,
                                 default = nil)
  if valid_597168 != nil:
    section.add "slot", valid_597168
  var valid_597169 = path.getOrDefault("subscriptionId")
  valid_597169 = validateParameter(valid_597169, JString, required = true,
                                 default = nil)
  if valid_597169 != nil:
    section.add "subscriptionId", valid_597169
  var valid_597170 = path.getOrDefault("operationId")
  valid_597170 = validateParameter(valid_597170, JString, required = true,
                                 default = nil)
  if valid_597170 != nil:
    section.add "operationId", valid_597170
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597171 = query.getOrDefault("api-version")
  valid_597171 = validateParameter(valid_597171, JString, required = true,
                                 default = nil)
  if valid_597171 != nil:
    section.add "api-version", valid_597171
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597172: Call_WebAppsGetNetworkTraceOperationSlotV2_597163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_597172.validator(path, query, header, formData, body)
  let scheme = call_597172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597172.url(scheme.get, call_597172.host, call_597172.base,
                         call_597172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597172, url, valid)

proc call*(call_597173: Call_WebAppsGetNetworkTraceOperationSlotV2_597163;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperationSlotV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_597174 = newJObject()
  var query_597175 = newJObject()
  add(path_597174, "resourceGroupName", newJString(resourceGroupName))
  add(query_597175, "api-version", newJString(apiVersion))
  add(path_597174, "name", newJString(name))
  add(path_597174, "slot", newJString(slot))
  add(path_597174, "subscriptionId", newJString(subscriptionId))
  add(path_597174, "operationId", newJString(operationId))
  result = call_597173.call(path_597174, query_597175, nil, nil, nil)

var webAppsGetNetworkTraceOperationSlotV2* = Call_WebAppsGetNetworkTraceOperationSlotV2_597163(
    name: "webAppsGetNetworkTraceOperationSlotV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationSlotV2_597164, base: "",
    url: url_WebAppsGetNetworkTraceOperationSlotV2_597165, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesSlotV2_597176 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetNetworkTracesSlotV2_597178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTraces/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesSlotV2_597177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597179 = path.getOrDefault("resourceGroupName")
  valid_597179 = validateParameter(valid_597179, JString, required = true,
                                 default = nil)
  if valid_597179 != nil:
    section.add "resourceGroupName", valid_597179
  var valid_597180 = path.getOrDefault("name")
  valid_597180 = validateParameter(valid_597180, JString, required = true,
                                 default = nil)
  if valid_597180 != nil:
    section.add "name", valid_597180
  var valid_597181 = path.getOrDefault("slot")
  valid_597181 = validateParameter(valid_597181, JString, required = true,
                                 default = nil)
  if valid_597181 != nil:
    section.add "slot", valid_597181
  var valid_597182 = path.getOrDefault("subscriptionId")
  valid_597182 = validateParameter(valid_597182, JString, required = true,
                                 default = nil)
  if valid_597182 != nil:
    section.add "subscriptionId", valid_597182
  var valid_597183 = path.getOrDefault("operationId")
  valid_597183 = validateParameter(valid_597183, JString, required = true,
                                 default = nil)
  if valid_597183 != nil:
    section.add "operationId", valid_597183
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597184 = query.getOrDefault("api-version")
  valid_597184 = validateParameter(valid_597184, JString, required = true,
                                 default = nil)
  if valid_597184 != nil:
    section.add "api-version", valid_597184
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597185: Call_WebAppsGetNetworkTracesSlotV2_597176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_597185.validator(path, query, header, formData, body)
  let scheme = call_597185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597185.url(scheme.get, call_597185.host, call_597185.base,
                         call_597185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597185, url, valid)

proc call*(call_597186: Call_WebAppsGetNetworkTracesSlotV2_597176;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTracesSlotV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_597187 = newJObject()
  var query_597188 = newJObject()
  add(path_597187, "resourceGroupName", newJString(resourceGroupName))
  add(query_597188, "api-version", newJString(apiVersion))
  add(path_597187, "name", newJString(name))
  add(path_597187, "slot", newJString(slot))
  add(path_597187, "subscriptionId", newJString(subscriptionId))
  add(path_597187, "operationId", newJString(operationId))
  result = call_597186.call(path_597187, query_597188, nil, nil, nil)

var webAppsGetNetworkTracesSlotV2* = Call_WebAppsGetNetworkTracesSlotV2_597176(
    name: "webAppsGetNetworkTracesSlotV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
    validator: validate_WebAppsGetNetworkTracesSlotV2_597177, base: "",
    url: url_WebAppsGetNetworkTracesSlotV2_597178, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPasswordSlot_597189 = ref object of OpenApiRestCall_593437
proc url_WebAppsGenerateNewSitePublishingPasswordSlot_597191(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPasswordSlot_597190(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597192 = path.getOrDefault("resourceGroupName")
  valid_597192 = validateParameter(valid_597192, JString, required = true,
                                 default = nil)
  if valid_597192 != nil:
    section.add "resourceGroupName", valid_597192
  var valid_597193 = path.getOrDefault("name")
  valid_597193 = validateParameter(valid_597193, JString, required = true,
                                 default = nil)
  if valid_597193 != nil:
    section.add "name", valid_597193
  var valid_597194 = path.getOrDefault("slot")
  valid_597194 = validateParameter(valid_597194, JString, required = true,
                                 default = nil)
  if valid_597194 != nil:
    section.add "slot", valid_597194
  var valid_597195 = path.getOrDefault("subscriptionId")
  valid_597195 = validateParameter(valid_597195, JString, required = true,
                                 default = nil)
  if valid_597195 != nil:
    section.add "subscriptionId", valid_597195
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597196 = query.getOrDefault("api-version")
  valid_597196 = validateParameter(valid_597196, JString, required = true,
                                 default = nil)
  if valid_597196 != nil:
    section.add "api-version", valid_597196
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597197: Call_WebAppsGenerateNewSitePublishingPasswordSlot_597189;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_597197.validator(path, query, header, formData, body)
  let scheme = call_597197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597197.url(scheme.get, call_597197.host, call_597197.base,
                         call_597197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597197, url, valid)

proc call*(call_597198: Call_WebAppsGenerateNewSitePublishingPasswordSlot_597189;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPasswordSlot
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597199 = newJObject()
  var query_597200 = newJObject()
  add(path_597199, "resourceGroupName", newJString(resourceGroupName))
  add(query_597200, "api-version", newJString(apiVersion))
  add(path_597199, "name", newJString(name))
  add(path_597199, "slot", newJString(slot))
  add(path_597199, "subscriptionId", newJString(subscriptionId))
  result = call_597198.call(path_597199, query_597200, nil, nil, nil)

var webAppsGenerateNewSitePublishingPasswordSlot* = Call_WebAppsGenerateNewSitePublishingPasswordSlot_597189(
    name: "webAppsGenerateNewSitePublishingPasswordSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPasswordSlot_597190,
    base: "", url: url_WebAppsGenerateNewSitePublishingPasswordSlot_597191,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCountersSlot_597201 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPerfMonCountersSlot_597203(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCountersSlot_597202(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597204 = path.getOrDefault("resourceGroupName")
  valid_597204 = validateParameter(valid_597204, JString, required = true,
                                 default = nil)
  if valid_597204 != nil:
    section.add "resourceGroupName", valid_597204
  var valid_597205 = path.getOrDefault("name")
  valid_597205 = validateParameter(valid_597205, JString, required = true,
                                 default = nil)
  if valid_597205 != nil:
    section.add "name", valid_597205
  var valid_597206 = path.getOrDefault("slot")
  valid_597206 = validateParameter(valid_597206, JString, required = true,
                                 default = nil)
  if valid_597206 != nil:
    section.add "slot", valid_597206
  var valid_597207 = path.getOrDefault("subscriptionId")
  valid_597207 = validateParameter(valid_597207, JString, required = true,
                                 default = nil)
  if valid_597207 != nil:
    section.add "subscriptionId", valid_597207
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597208 = query.getOrDefault("api-version")
  valid_597208 = validateParameter(valid_597208, JString, required = true,
                                 default = nil)
  if valid_597208 != nil:
    section.add "api-version", valid_597208
  var valid_597209 = query.getOrDefault("$filter")
  valid_597209 = validateParameter(valid_597209, JString, required = false,
                                 default = nil)
  if valid_597209 != nil:
    section.add "$filter", valid_597209
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597210: Call_WebAppsListPerfMonCountersSlot_597201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_597210.validator(path, query, header, formData, body)
  let scheme = call_597210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597210.url(scheme.get, call_597210.host, call_597210.base,
                         call_597210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597210, url, valid)

proc call*(call_597211: Call_WebAppsListPerfMonCountersSlot_597201;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCountersSlot
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597212 = newJObject()
  var query_597213 = newJObject()
  add(path_597212, "resourceGroupName", newJString(resourceGroupName))
  add(query_597213, "api-version", newJString(apiVersion))
  add(path_597212, "name", newJString(name))
  add(path_597212, "slot", newJString(slot))
  add(path_597212, "subscriptionId", newJString(subscriptionId))
  add(query_597213, "$filter", newJString(Filter))
  result = call_597211.call(path_597212, query_597213, nil, nil, nil)

var webAppsListPerfMonCountersSlot* = Call_WebAppsListPerfMonCountersSlot_597201(
    name: "webAppsListPerfMonCountersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    validator: validate_WebAppsListPerfMonCountersSlot_597202, base: "",
    url: url_WebAppsListPerfMonCountersSlot_597203, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlagSlot_597214 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSitePhpErrorLogFlagSlot_597216(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlagSlot_597215(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597217 = path.getOrDefault("resourceGroupName")
  valid_597217 = validateParameter(valid_597217, JString, required = true,
                                 default = nil)
  if valid_597217 != nil:
    section.add "resourceGroupName", valid_597217
  var valid_597218 = path.getOrDefault("name")
  valid_597218 = validateParameter(valid_597218, JString, required = true,
                                 default = nil)
  if valid_597218 != nil:
    section.add "name", valid_597218
  var valid_597219 = path.getOrDefault("slot")
  valid_597219 = validateParameter(valid_597219, JString, required = true,
                                 default = nil)
  if valid_597219 != nil:
    section.add "slot", valid_597219
  var valid_597220 = path.getOrDefault("subscriptionId")
  valid_597220 = validateParameter(valid_597220, JString, required = true,
                                 default = nil)
  if valid_597220 != nil:
    section.add "subscriptionId", valid_597220
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597221 = query.getOrDefault("api-version")
  valid_597221 = validateParameter(valid_597221, JString, required = true,
                                 default = nil)
  if valid_597221 != nil:
    section.add "api-version", valid_597221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597222: Call_WebAppsGetSitePhpErrorLogFlagSlot_597214;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_597222.validator(path, query, header, formData, body)
  let scheme = call_597222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597222.url(scheme.get, call_597222.host, call_597222.base,
                         call_597222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597222, url, valid)

proc call*(call_597223: Call_WebAppsGetSitePhpErrorLogFlagSlot_597214;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlagSlot
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597224 = newJObject()
  var query_597225 = newJObject()
  add(path_597224, "resourceGroupName", newJString(resourceGroupName))
  add(query_597225, "api-version", newJString(apiVersion))
  add(path_597224, "name", newJString(name))
  add(path_597224, "slot", newJString(slot))
  add(path_597224, "subscriptionId", newJString(subscriptionId))
  result = call_597223.call(path_597224, query_597225, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlagSlot* = Call_WebAppsGetSitePhpErrorLogFlagSlot_597214(
    name: "webAppsGetSitePhpErrorLogFlagSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlagSlot_597215, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlagSlot_597216, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOnsSlot_597226 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPremierAddOnsSlot_597228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOnsSlot_597227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597229 = path.getOrDefault("resourceGroupName")
  valid_597229 = validateParameter(valid_597229, JString, required = true,
                                 default = nil)
  if valid_597229 != nil:
    section.add "resourceGroupName", valid_597229
  var valid_597230 = path.getOrDefault("name")
  valid_597230 = validateParameter(valid_597230, JString, required = true,
                                 default = nil)
  if valid_597230 != nil:
    section.add "name", valid_597230
  var valid_597231 = path.getOrDefault("slot")
  valid_597231 = validateParameter(valid_597231, JString, required = true,
                                 default = nil)
  if valid_597231 != nil:
    section.add "slot", valid_597231
  var valid_597232 = path.getOrDefault("subscriptionId")
  valid_597232 = validateParameter(valid_597232, JString, required = true,
                                 default = nil)
  if valid_597232 != nil:
    section.add "subscriptionId", valid_597232
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597233 = query.getOrDefault("api-version")
  valid_597233 = validateParameter(valid_597233, JString, required = true,
                                 default = nil)
  if valid_597233 != nil:
    section.add "api-version", valid_597233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597234: Call_WebAppsListPremierAddOnsSlot_597226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_597234.validator(path, query, header, formData, body)
  let scheme = call_597234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597234.url(scheme.get, call_597234.host, call_597234.base,
                         call_597234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597234, url, valid)

proc call*(call_597235: Call_WebAppsListPremierAddOnsSlot_597226;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOnsSlot
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597236 = newJObject()
  var query_597237 = newJObject()
  add(path_597236, "resourceGroupName", newJString(resourceGroupName))
  add(query_597237, "api-version", newJString(apiVersion))
  add(path_597236, "name", newJString(name))
  add(path_597236, "slot", newJString(slot))
  add(path_597236, "subscriptionId", newJString(subscriptionId))
  result = call_597235.call(path_597236, query_597237, nil, nil, nil)

var webAppsListPremierAddOnsSlot* = Call_WebAppsListPremierAddOnsSlot_597226(
    name: "webAppsListPremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_WebAppsListPremierAddOnsSlot_597227, base: "",
    url: url_WebAppsListPremierAddOnsSlot_597228, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOnSlot_597251 = ref object of OpenApiRestCall_593437
proc url_WebAppsAddPremierAddOnSlot_597253(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOnSlot_597252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597254 = path.getOrDefault("resourceGroupName")
  valid_597254 = validateParameter(valid_597254, JString, required = true,
                                 default = nil)
  if valid_597254 != nil:
    section.add "resourceGroupName", valid_597254
  var valid_597255 = path.getOrDefault("name")
  valid_597255 = validateParameter(valid_597255, JString, required = true,
                                 default = nil)
  if valid_597255 != nil:
    section.add "name", valid_597255
  var valid_597256 = path.getOrDefault("slot")
  valid_597256 = validateParameter(valid_597256, JString, required = true,
                                 default = nil)
  if valid_597256 != nil:
    section.add "slot", valid_597256
  var valid_597257 = path.getOrDefault("subscriptionId")
  valid_597257 = validateParameter(valid_597257, JString, required = true,
                                 default = nil)
  if valid_597257 != nil:
    section.add "subscriptionId", valid_597257
  var valid_597258 = path.getOrDefault("premierAddOnName")
  valid_597258 = validateParameter(valid_597258, JString, required = true,
                                 default = nil)
  if valid_597258 != nil:
    section.add "premierAddOnName", valid_597258
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597259 = query.getOrDefault("api-version")
  valid_597259 = validateParameter(valid_597259, JString, required = true,
                                 default = nil)
  if valid_597259 != nil:
    section.add "api-version", valid_597259
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597261: Call_WebAppsAddPremierAddOnSlot_597251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_597261.validator(path, query, header, formData, body)
  let scheme = call_597261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597261.url(scheme.get, call_597261.host, call_597261.base,
                         call_597261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597261, url, valid)

proc call*(call_597262: Call_WebAppsAddPremierAddOnSlot_597251;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_597263 = newJObject()
  var query_597264 = newJObject()
  var body_597265 = newJObject()
  add(path_597263, "resourceGroupName", newJString(resourceGroupName))
  add(query_597264, "api-version", newJString(apiVersion))
  add(path_597263, "name", newJString(name))
  if premierAddOn != nil:
    body_597265 = premierAddOn
  add(path_597263, "slot", newJString(slot))
  add(path_597263, "subscriptionId", newJString(subscriptionId))
  add(path_597263, "premierAddOnName", newJString(premierAddOnName))
  result = call_597262.call(path_597263, query_597264, nil, nil, body_597265)

var webAppsAddPremierAddOnSlot* = Call_WebAppsAddPremierAddOnSlot_597251(
    name: "webAppsAddPremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOnSlot_597252, base: "",
    url: url_WebAppsAddPremierAddOnSlot_597253, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOnSlot_597238 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPremierAddOnSlot_597240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOnSlot_597239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597241 = path.getOrDefault("resourceGroupName")
  valid_597241 = validateParameter(valid_597241, JString, required = true,
                                 default = nil)
  if valid_597241 != nil:
    section.add "resourceGroupName", valid_597241
  var valid_597242 = path.getOrDefault("name")
  valid_597242 = validateParameter(valid_597242, JString, required = true,
                                 default = nil)
  if valid_597242 != nil:
    section.add "name", valid_597242
  var valid_597243 = path.getOrDefault("slot")
  valid_597243 = validateParameter(valid_597243, JString, required = true,
                                 default = nil)
  if valid_597243 != nil:
    section.add "slot", valid_597243
  var valid_597244 = path.getOrDefault("subscriptionId")
  valid_597244 = validateParameter(valid_597244, JString, required = true,
                                 default = nil)
  if valid_597244 != nil:
    section.add "subscriptionId", valid_597244
  var valid_597245 = path.getOrDefault("premierAddOnName")
  valid_597245 = validateParameter(valid_597245, JString, required = true,
                                 default = nil)
  if valid_597245 != nil:
    section.add "premierAddOnName", valid_597245
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597246 = query.getOrDefault("api-version")
  valid_597246 = validateParameter(valid_597246, JString, required = true,
                                 default = nil)
  if valid_597246 != nil:
    section.add "api-version", valid_597246
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597247: Call_WebAppsGetPremierAddOnSlot_597238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_597247.validator(path, query, header, formData, body)
  let scheme = call_597247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597247.url(scheme.get, call_597247.host, call_597247.base,
                         call_597247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597247, url, valid)

proc call*(call_597248: Call_WebAppsGetPremierAddOnSlot_597238;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOnSlot
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_597249 = newJObject()
  var query_597250 = newJObject()
  add(path_597249, "resourceGroupName", newJString(resourceGroupName))
  add(query_597250, "api-version", newJString(apiVersion))
  add(path_597249, "name", newJString(name))
  add(path_597249, "slot", newJString(slot))
  add(path_597249, "subscriptionId", newJString(subscriptionId))
  add(path_597249, "premierAddOnName", newJString(premierAddOnName))
  result = call_597248.call(path_597249, query_597250, nil, nil, nil)

var webAppsGetPremierAddOnSlot* = Call_WebAppsGetPremierAddOnSlot_597238(
    name: "webAppsGetPremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOnSlot_597239, base: "",
    url: url_WebAppsGetPremierAddOnSlot_597240, schemes: {Scheme.Https})
type
  Call_WebAppsUpdatePremierAddOnSlot_597279 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdatePremierAddOnSlot_597281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdatePremierAddOnSlot_597280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597282 = path.getOrDefault("resourceGroupName")
  valid_597282 = validateParameter(valid_597282, JString, required = true,
                                 default = nil)
  if valid_597282 != nil:
    section.add "resourceGroupName", valid_597282
  var valid_597283 = path.getOrDefault("name")
  valid_597283 = validateParameter(valid_597283, JString, required = true,
                                 default = nil)
  if valid_597283 != nil:
    section.add "name", valid_597283
  var valid_597284 = path.getOrDefault("slot")
  valid_597284 = validateParameter(valid_597284, JString, required = true,
                                 default = nil)
  if valid_597284 != nil:
    section.add "slot", valid_597284
  var valid_597285 = path.getOrDefault("subscriptionId")
  valid_597285 = validateParameter(valid_597285, JString, required = true,
                                 default = nil)
  if valid_597285 != nil:
    section.add "subscriptionId", valid_597285
  var valid_597286 = path.getOrDefault("premierAddOnName")
  valid_597286 = validateParameter(valid_597286, JString, required = true,
                                 default = nil)
  if valid_597286 != nil:
    section.add "premierAddOnName", valid_597286
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597287 = query.getOrDefault("api-version")
  valid_597287 = validateParameter(valid_597287, JString, required = true,
                                 default = nil)
  if valid_597287 != nil:
    section.add "api-version", valid_597287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597289: Call_WebAppsUpdatePremierAddOnSlot_597279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_597289.validator(path, query, header, formData, body)
  let scheme = call_597289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597289.url(scheme.get, call_597289.host, call_597289.base,
                         call_597289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597289, url, valid)

proc call*(call_597290: Call_WebAppsUpdatePremierAddOnSlot_597279;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## webAppsUpdatePremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_597291 = newJObject()
  var query_597292 = newJObject()
  var body_597293 = newJObject()
  add(path_597291, "resourceGroupName", newJString(resourceGroupName))
  add(query_597292, "api-version", newJString(apiVersion))
  add(path_597291, "name", newJString(name))
  if premierAddOn != nil:
    body_597293 = premierAddOn
  add(path_597291, "slot", newJString(slot))
  add(path_597291, "subscriptionId", newJString(subscriptionId))
  add(path_597291, "premierAddOnName", newJString(premierAddOnName))
  result = call_597290.call(path_597291, query_597292, nil, nil, body_597293)

var webAppsUpdatePremierAddOnSlot* = Call_WebAppsUpdatePremierAddOnSlot_597279(
    name: "webAppsUpdatePremierAddOnSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsUpdatePremierAddOnSlot_597280, base: "",
    url: url_WebAppsUpdatePremierAddOnSlot_597281, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOnSlot_597266 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePremierAddOnSlot_597268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOnSlot_597267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597269 = path.getOrDefault("resourceGroupName")
  valid_597269 = validateParameter(valid_597269, JString, required = true,
                                 default = nil)
  if valid_597269 != nil:
    section.add "resourceGroupName", valid_597269
  var valid_597270 = path.getOrDefault("name")
  valid_597270 = validateParameter(valid_597270, JString, required = true,
                                 default = nil)
  if valid_597270 != nil:
    section.add "name", valid_597270
  var valid_597271 = path.getOrDefault("slot")
  valid_597271 = validateParameter(valid_597271, JString, required = true,
                                 default = nil)
  if valid_597271 != nil:
    section.add "slot", valid_597271
  var valid_597272 = path.getOrDefault("subscriptionId")
  valid_597272 = validateParameter(valid_597272, JString, required = true,
                                 default = nil)
  if valid_597272 != nil:
    section.add "subscriptionId", valid_597272
  var valid_597273 = path.getOrDefault("premierAddOnName")
  valid_597273 = validateParameter(valid_597273, JString, required = true,
                                 default = nil)
  if valid_597273 != nil:
    section.add "premierAddOnName", valid_597273
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597274 = query.getOrDefault("api-version")
  valid_597274 = validateParameter(valid_597274, JString, required = true,
                                 default = nil)
  if valid_597274 != nil:
    section.add "api-version", valid_597274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597275: Call_WebAppsDeletePremierAddOnSlot_597266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_597275.validator(path, query, header, formData, body)
  let scheme = call_597275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597275.url(scheme.get, call_597275.host, call_597275.base,
                         call_597275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597275, url, valid)

proc call*(call_597276: Call_WebAppsDeletePremierAddOnSlot_597266;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOnSlot
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_597277 = newJObject()
  var query_597278 = newJObject()
  add(path_597277, "resourceGroupName", newJString(resourceGroupName))
  add(query_597278, "api-version", newJString(apiVersion))
  add(path_597277, "name", newJString(name))
  add(path_597277, "slot", newJString(slot))
  add(path_597277, "subscriptionId", newJString(subscriptionId))
  add(path_597277, "premierAddOnName", newJString(premierAddOnName))
  result = call_597276.call(path_597277, query_597278, nil, nil, nil)

var webAppsDeletePremierAddOnSlot* = Call_WebAppsDeletePremierAddOnSlot_597266(
    name: "webAppsDeletePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOnSlot_597267, base: "",
    url: url_WebAppsDeletePremierAddOnSlot_597268, schemes: {Scheme.Https})
type
  Call_WebAppsPutPrivateAccessVnetSlot_597306 = ref object of OpenApiRestCall_593437
proc url_WebAppsPutPrivateAccessVnetSlot_597308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsPutPrivateAccessVnetSlot_597307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597309 = path.getOrDefault("resourceGroupName")
  valid_597309 = validateParameter(valid_597309, JString, required = true,
                                 default = nil)
  if valid_597309 != nil:
    section.add "resourceGroupName", valid_597309
  var valid_597310 = path.getOrDefault("name")
  valid_597310 = validateParameter(valid_597310, JString, required = true,
                                 default = nil)
  if valid_597310 != nil:
    section.add "name", valid_597310
  var valid_597311 = path.getOrDefault("slot")
  valid_597311 = validateParameter(valid_597311, JString, required = true,
                                 default = nil)
  if valid_597311 != nil:
    section.add "slot", valid_597311
  var valid_597312 = path.getOrDefault("subscriptionId")
  valid_597312 = validateParameter(valid_597312, JString, required = true,
                                 default = nil)
  if valid_597312 != nil:
    section.add "subscriptionId", valid_597312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597313 = query.getOrDefault("api-version")
  valid_597313 = validateParameter(valid_597313, JString, required = true,
                                 default = nil)
  if valid_597313 != nil:
    section.add "api-version", valid_597313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   access: JObject (required)
  ##         : The information for the private access
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597315: Call_WebAppsPutPrivateAccessVnetSlot_597306;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_597315.validator(path, query, header, formData, body)
  let scheme = call_597315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597315.url(scheme.get, call_597315.host, call_597315.base,
                         call_597315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597315, url, valid)

proc call*(call_597316: Call_WebAppsPutPrivateAccessVnetSlot_597306;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; access: JsonNode): Recallable =
  ## webAppsPutPrivateAccessVnetSlot
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   access: JObject (required)
  ##         : The information for the private access
  var path_597317 = newJObject()
  var query_597318 = newJObject()
  var body_597319 = newJObject()
  add(path_597317, "resourceGroupName", newJString(resourceGroupName))
  add(query_597318, "api-version", newJString(apiVersion))
  add(path_597317, "name", newJString(name))
  add(path_597317, "slot", newJString(slot))
  add(path_597317, "subscriptionId", newJString(subscriptionId))
  if access != nil:
    body_597319 = access
  result = call_597316.call(path_597317, query_597318, nil, nil, body_597319)

var webAppsPutPrivateAccessVnetSlot* = Call_WebAppsPutPrivateAccessVnetSlot_597306(
    name: "webAppsPutPrivateAccessVnetSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    validator: validate_WebAppsPutPrivateAccessVnetSlot_597307, base: "",
    url: url_WebAppsPutPrivateAccessVnetSlot_597308, schemes: {Scheme.Https})
type
  Call_WebAppsGetPrivateAccessSlot_597294 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPrivateAccessSlot_597296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPrivateAccessSlot_597295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597297 = path.getOrDefault("resourceGroupName")
  valid_597297 = validateParameter(valid_597297, JString, required = true,
                                 default = nil)
  if valid_597297 != nil:
    section.add "resourceGroupName", valid_597297
  var valid_597298 = path.getOrDefault("name")
  valid_597298 = validateParameter(valid_597298, JString, required = true,
                                 default = nil)
  if valid_597298 != nil:
    section.add "name", valid_597298
  var valid_597299 = path.getOrDefault("slot")
  valid_597299 = validateParameter(valid_597299, JString, required = true,
                                 default = nil)
  if valid_597299 != nil:
    section.add "slot", valid_597299
  var valid_597300 = path.getOrDefault("subscriptionId")
  valid_597300 = validateParameter(valid_597300, JString, required = true,
                                 default = nil)
  if valid_597300 != nil:
    section.add "subscriptionId", valid_597300
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597301 = query.getOrDefault("api-version")
  valid_597301 = validateParameter(valid_597301, JString, required = true,
                                 default = nil)
  if valid_597301 != nil:
    section.add "api-version", valid_597301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597302: Call_WebAppsGetPrivateAccessSlot_597294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_597302.validator(path, query, header, formData, body)
  let scheme = call_597302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597302.url(scheme.get, call_597302.host, call_597302.base,
                         call_597302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597302, url, valid)

proc call*(call_597303: Call_WebAppsGetPrivateAccessSlot_597294;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetPrivateAccessSlot
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597304 = newJObject()
  var query_597305 = newJObject()
  add(path_597304, "resourceGroupName", newJString(resourceGroupName))
  add(query_597305, "api-version", newJString(apiVersion))
  add(path_597304, "name", newJString(name))
  add(path_597304, "slot", newJString(slot))
  add(path_597304, "subscriptionId", newJString(subscriptionId))
  result = call_597303.call(path_597304, query_597305, nil, nil, nil)

var webAppsGetPrivateAccessSlot* = Call_WebAppsGetPrivateAccessSlot_597294(
    name: "webAppsGetPrivateAccessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    validator: validate_WebAppsGetPrivateAccessSlot_597295, base: "",
    url: url_WebAppsGetPrivateAccessSlot_597296, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessesSlot_597320 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessesSlot_597322(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessesSlot_597321(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597323 = path.getOrDefault("resourceGroupName")
  valid_597323 = validateParameter(valid_597323, JString, required = true,
                                 default = nil)
  if valid_597323 != nil:
    section.add "resourceGroupName", valid_597323
  var valid_597324 = path.getOrDefault("name")
  valid_597324 = validateParameter(valid_597324, JString, required = true,
                                 default = nil)
  if valid_597324 != nil:
    section.add "name", valid_597324
  var valid_597325 = path.getOrDefault("slot")
  valid_597325 = validateParameter(valid_597325, JString, required = true,
                                 default = nil)
  if valid_597325 != nil:
    section.add "slot", valid_597325
  var valid_597326 = path.getOrDefault("subscriptionId")
  valid_597326 = validateParameter(valid_597326, JString, required = true,
                                 default = nil)
  if valid_597326 != nil:
    section.add "subscriptionId", valid_597326
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597327 = query.getOrDefault("api-version")
  valid_597327 = validateParameter(valid_597327, JString, required = true,
                                 default = nil)
  if valid_597327 != nil:
    section.add "api-version", valid_597327
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597328: Call_WebAppsListProcessesSlot_597320; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597328.validator(path, query, header, formData, body)
  let scheme = call_597328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597328.url(scheme.get, call_597328.host, call_597328.base,
                         call_597328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597328, url, valid)

proc call*(call_597329: Call_WebAppsListProcessesSlot_597320;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597330 = newJObject()
  var query_597331 = newJObject()
  add(path_597330, "resourceGroupName", newJString(resourceGroupName))
  add(query_597331, "api-version", newJString(apiVersion))
  add(path_597330, "name", newJString(name))
  add(path_597330, "slot", newJString(slot))
  add(path_597330, "subscriptionId", newJString(subscriptionId))
  result = call_597329.call(path_597330, query_597331, nil, nil, nil)

var webAppsListProcessesSlot* = Call_WebAppsListProcessesSlot_597320(
    name: "webAppsListProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    validator: validate_WebAppsListProcessesSlot_597321, base: "",
    url: url_WebAppsListProcessesSlot_597322, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessSlot_597332 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessSlot_597334(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessSlot_597333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597335 = path.getOrDefault("resourceGroupName")
  valid_597335 = validateParameter(valid_597335, JString, required = true,
                                 default = nil)
  if valid_597335 != nil:
    section.add "resourceGroupName", valid_597335
  var valid_597336 = path.getOrDefault("name")
  valid_597336 = validateParameter(valid_597336, JString, required = true,
                                 default = nil)
  if valid_597336 != nil:
    section.add "name", valid_597336
  var valid_597337 = path.getOrDefault("processId")
  valid_597337 = validateParameter(valid_597337, JString, required = true,
                                 default = nil)
  if valid_597337 != nil:
    section.add "processId", valid_597337
  var valid_597338 = path.getOrDefault("slot")
  valid_597338 = validateParameter(valid_597338, JString, required = true,
                                 default = nil)
  if valid_597338 != nil:
    section.add "slot", valid_597338
  var valid_597339 = path.getOrDefault("subscriptionId")
  valid_597339 = validateParameter(valid_597339, JString, required = true,
                                 default = nil)
  if valid_597339 != nil:
    section.add "subscriptionId", valid_597339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597340 = query.getOrDefault("api-version")
  valid_597340 = validateParameter(valid_597340, JString, required = true,
                                 default = nil)
  if valid_597340 != nil:
    section.add "api-version", valid_597340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597341: Call_WebAppsGetProcessSlot_597332; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597341.validator(path, query, header, formData, body)
  let scheme = call_597341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597341.url(scheme.get, call_597341.host, call_597341.base,
                         call_597341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597341, url, valid)

proc call*(call_597342: Call_WebAppsGetProcessSlot_597332;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597343 = newJObject()
  var query_597344 = newJObject()
  add(path_597343, "resourceGroupName", newJString(resourceGroupName))
  add(query_597344, "api-version", newJString(apiVersion))
  add(path_597343, "name", newJString(name))
  add(path_597343, "processId", newJString(processId))
  add(path_597343, "slot", newJString(slot))
  add(path_597343, "subscriptionId", newJString(subscriptionId))
  result = call_597342.call(path_597343, query_597344, nil, nil, nil)

var webAppsGetProcessSlot* = Call_WebAppsGetProcessSlot_597332(
    name: "webAppsGetProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsGetProcessSlot_597333, base: "",
    url: url_WebAppsGetProcessSlot_597334, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcessSlot_597345 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteProcessSlot_597347(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcessSlot_597346(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597348 = path.getOrDefault("resourceGroupName")
  valid_597348 = validateParameter(valid_597348, JString, required = true,
                                 default = nil)
  if valid_597348 != nil:
    section.add "resourceGroupName", valid_597348
  var valid_597349 = path.getOrDefault("name")
  valid_597349 = validateParameter(valid_597349, JString, required = true,
                                 default = nil)
  if valid_597349 != nil:
    section.add "name", valid_597349
  var valid_597350 = path.getOrDefault("processId")
  valid_597350 = validateParameter(valid_597350, JString, required = true,
                                 default = nil)
  if valid_597350 != nil:
    section.add "processId", valid_597350
  var valid_597351 = path.getOrDefault("slot")
  valid_597351 = validateParameter(valid_597351, JString, required = true,
                                 default = nil)
  if valid_597351 != nil:
    section.add "slot", valid_597351
  var valid_597352 = path.getOrDefault("subscriptionId")
  valid_597352 = validateParameter(valid_597352, JString, required = true,
                                 default = nil)
  if valid_597352 != nil:
    section.add "subscriptionId", valid_597352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597353 = query.getOrDefault("api-version")
  valid_597353 = validateParameter(valid_597353, JString, required = true,
                                 default = nil)
  if valid_597353 != nil:
    section.add "api-version", valid_597353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597354: Call_WebAppsDeleteProcessSlot_597345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_597354.validator(path, query, header, formData, body)
  let scheme = call_597354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597354.url(scheme.get, call_597354.host, call_597354.base,
                         call_597354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597354, url, valid)

proc call*(call_597355: Call_WebAppsDeleteProcessSlot_597345;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597356 = newJObject()
  var query_597357 = newJObject()
  add(path_597356, "resourceGroupName", newJString(resourceGroupName))
  add(query_597357, "api-version", newJString(apiVersion))
  add(path_597356, "name", newJString(name))
  add(path_597356, "processId", newJString(processId))
  add(path_597356, "slot", newJString(slot))
  add(path_597356, "subscriptionId", newJString(subscriptionId))
  result = call_597355.call(path_597356, query_597357, nil, nil, nil)

var webAppsDeleteProcessSlot* = Call_WebAppsDeleteProcessSlot_597345(
    name: "webAppsDeleteProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsDeleteProcessSlot_597346, base: "",
    url: url_WebAppsDeleteProcessSlot_597347, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDumpSlot_597358 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessDumpSlot_597360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDumpSlot_597359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597361 = path.getOrDefault("resourceGroupName")
  valid_597361 = validateParameter(valid_597361, JString, required = true,
                                 default = nil)
  if valid_597361 != nil:
    section.add "resourceGroupName", valid_597361
  var valid_597362 = path.getOrDefault("name")
  valid_597362 = validateParameter(valid_597362, JString, required = true,
                                 default = nil)
  if valid_597362 != nil:
    section.add "name", valid_597362
  var valid_597363 = path.getOrDefault("processId")
  valid_597363 = validateParameter(valid_597363, JString, required = true,
                                 default = nil)
  if valid_597363 != nil:
    section.add "processId", valid_597363
  var valid_597364 = path.getOrDefault("slot")
  valid_597364 = validateParameter(valid_597364, JString, required = true,
                                 default = nil)
  if valid_597364 != nil:
    section.add "slot", valid_597364
  var valid_597365 = path.getOrDefault("subscriptionId")
  valid_597365 = validateParameter(valid_597365, JString, required = true,
                                 default = nil)
  if valid_597365 != nil:
    section.add "subscriptionId", valid_597365
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597366 = query.getOrDefault("api-version")
  valid_597366 = validateParameter(valid_597366, JString, required = true,
                                 default = nil)
  if valid_597366 != nil:
    section.add "api-version", valid_597366
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597367: Call_WebAppsGetProcessDumpSlot_597358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597367.validator(path, query, header, formData, body)
  let scheme = call_597367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597367.url(scheme.get, call_597367.host, call_597367.base,
                         call_597367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597367, url, valid)

proc call*(call_597368: Call_WebAppsGetProcessDumpSlot_597358;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597369 = newJObject()
  var query_597370 = newJObject()
  add(path_597369, "resourceGroupName", newJString(resourceGroupName))
  add(query_597370, "api-version", newJString(apiVersion))
  add(path_597369, "name", newJString(name))
  add(path_597369, "processId", newJString(processId))
  add(path_597369, "slot", newJString(slot))
  add(path_597369, "subscriptionId", newJString(subscriptionId))
  result = call_597368.call(path_597369, query_597370, nil, nil, nil)

var webAppsGetProcessDumpSlot* = Call_WebAppsGetProcessDumpSlot_597358(
    name: "webAppsGetProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDumpSlot_597359, base: "",
    url: url_WebAppsGetProcessDumpSlot_597360, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModulesSlot_597371 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessModulesSlot_597373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModulesSlot_597372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597374 = path.getOrDefault("resourceGroupName")
  valid_597374 = validateParameter(valid_597374, JString, required = true,
                                 default = nil)
  if valid_597374 != nil:
    section.add "resourceGroupName", valid_597374
  var valid_597375 = path.getOrDefault("name")
  valid_597375 = validateParameter(valid_597375, JString, required = true,
                                 default = nil)
  if valid_597375 != nil:
    section.add "name", valid_597375
  var valid_597376 = path.getOrDefault("processId")
  valid_597376 = validateParameter(valid_597376, JString, required = true,
                                 default = nil)
  if valid_597376 != nil:
    section.add "processId", valid_597376
  var valid_597377 = path.getOrDefault("slot")
  valid_597377 = validateParameter(valid_597377, JString, required = true,
                                 default = nil)
  if valid_597377 != nil:
    section.add "slot", valid_597377
  var valid_597378 = path.getOrDefault("subscriptionId")
  valid_597378 = validateParameter(valid_597378, JString, required = true,
                                 default = nil)
  if valid_597378 != nil:
    section.add "subscriptionId", valid_597378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597379 = query.getOrDefault("api-version")
  valid_597379 = validateParameter(valid_597379, JString, required = true,
                                 default = nil)
  if valid_597379 != nil:
    section.add "api-version", valid_597379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597380: Call_WebAppsListProcessModulesSlot_597371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597380.validator(path, query, header, formData, body)
  let scheme = call_597380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597380.url(scheme.get, call_597380.host, call_597380.base,
                         call_597380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597380, url, valid)

proc call*(call_597381: Call_WebAppsListProcessModulesSlot_597371;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597382 = newJObject()
  var query_597383 = newJObject()
  add(path_597382, "resourceGroupName", newJString(resourceGroupName))
  add(query_597383, "api-version", newJString(apiVersion))
  add(path_597382, "name", newJString(name))
  add(path_597382, "processId", newJString(processId))
  add(path_597382, "slot", newJString(slot))
  add(path_597382, "subscriptionId", newJString(subscriptionId))
  result = call_597381.call(path_597382, query_597383, nil, nil, nil)

var webAppsListProcessModulesSlot* = Call_WebAppsListProcessModulesSlot_597371(
    name: "webAppsListProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModulesSlot_597372, base: "",
    url: url_WebAppsListProcessModulesSlot_597373, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModuleSlot_597384 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessModuleSlot_597386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModuleSlot_597385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597387 = path.getOrDefault("resourceGroupName")
  valid_597387 = validateParameter(valid_597387, JString, required = true,
                                 default = nil)
  if valid_597387 != nil:
    section.add "resourceGroupName", valid_597387
  var valid_597388 = path.getOrDefault("name")
  valid_597388 = validateParameter(valid_597388, JString, required = true,
                                 default = nil)
  if valid_597388 != nil:
    section.add "name", valid_597388
  var valid_597389 = path.getOrDefault("processId")
  valid_597389 = validateParameter(valid_597389, JString, required = true,
                                 default = nil)
  if valid_597389 != nil:
    section.add "processId", valid_597389
  var valid_597390 = path.getOrDefault("slot")
  valid_597390 = validateParameter(valid_597390, JString, required = true,
                                 default = nil)
  if valid_597390 != nil:
    section.add "slot", valid_597390
  var valid_597391 = path.getOrDefault("subscriptionId")
  valid_597391 = validateParameter(valid_597391, JString, required = true,
                                 default = nil)
  if valid_597391 != nil:
    section.add "subscriptionId", valid_597391
  var valid_597392 = path.getOrDefault("baseAddress")
  valid_597392 = validateParameter(valid_597392, JString, required = true,
                                 default = nil)
  if valid_597392 != nil:
    section.add "baseAddress", valid_597392
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597393 = query.getOrDefault("api-version")
  valid_597393 = validateParameter(valid_597393, JString, required = true,
                                 default = nil)
  if valid_597393 != nil:
    section.add "api-version", valid_597393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597394: Call_WebAppsGetProcessModuleSlot_597384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597394.validator(path, query, header, formData, body)
  let scheme = call_597394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597394.url(scheme.get, call_597394.host, call_597394.base,
                         call_597394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597394, url, valid)

proc call*(call_597395: Call_WebAppsGetProcessModuleSlot_597384;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_597396 = newJObject()
  var query_597397 = newJObject()
  add(path_597396, "resourceGroupName", newJString(resourceGroupName))
  add(query_597397, "api-version", newJString(apiVersion))
  add(path_597396, "name", newJString(name))
  add(path_597396, "processId", newJString(processId))
  add(path_597396, "slot", newJString(slot))
  add(path_597396, "subscriptionId", newJString(subscriptionId))
  add(path_597396, "baseAddress", newJString(baseAddress))
  result = call_597395.call(path_597396, query_597397, nil, nil, nil)

var webAppsGetProcessModuleSlot* = Call_WebAppsGetProcessModuleSlot_597384(
    name: "webAppsGetProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModuleSlot_597385, base: "",
    url: url_WebAppsGetProcessModuleSlot_597386, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreadsSlot_597398 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessThreadsSlot_597400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreadsSlot_597399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597401 = path.getOrDefault("resourceGroupName")
  valid_597401 = validateParameter(valid_597401, JString, required = true,
                                 default = nil)
  if valid_597401 != nil:
    section.add "resourceGroupName", valid_597401
  var valid_597402 = path.getOrDefault("name")
  valid_597402 = validateParameter(valid_597402, JString, required = true,
                                 default = nil)
  if valid_597402 != nil:
    section.add "name", valid_597402
  var valid_597403 = path.getOrDefault("processId")
  valid_597403 = validateParameter(valid_597403, JString, required = true,
                                 default = nil)
  if valid_597403 != nil:
    section.add "processId", valid_597403
  var valid_597404 = path.getOrDefault("slot")
  valid_597404 = validateParameter(valid_597404, JString, required = true,
                                 default = nil)
  if valid_597404 != nil:
    section.add "slot", valid_597404
  var valid_597405 = path.getOrDefault("subscriptionId")
  valid_597405 = validateParameter(valid_597405, JString, required = true,
                                 default = nil)
  if valid_597405 != nil:
    section.add "subscriptionId", valid_597405
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597406 = query.getOrDefault("api-version")
  valid_597406 = validateParameter(valid_597406, JString, required = true,
                                 default = nil)
  if valid_597406 != nil:
    section.add "api-version", valid_597406
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597407: Call_WebAppsListProcessThreadsSlot_597398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597407.validator(path, query, header, formData, body)
  let scheme = call_597407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597407.url(scheme.get, call_597407.host, call_597407.base,
                         call_597407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597407, url, valid)

proc call*(call_597408: Call_WebAppsListProcessThreadsSlot_597398;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597409 = newJObject()
  var query_597410 = newJObject()
  add(path_597409, "resourceGroupName", newJString(resourceGroupName))
  add(query_597410, "api-version", newJString(apiVersion))
  add(path_597409, "name", newJString(name))
  add(path_597409, "processId", newJString(processId))
  add(path_597409, "slot", newJString(slot))
  add(path_597409, "subscriptionId", newJString(subscriptionId))
  result = call_597408.call(path_597409, query_597410, nil, nil, nil)

var webAppsListProcessThreadsSlot* = Call_WebAppsListProcessThreadsSlot_597398(
    name: "webAppsListProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreadsSlot_597399, base: "",
    url: url_WebAppsListProcessThreadsSlot_597400, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThreadSlot_597411 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessThreadSlot_597413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThreadSlot_597412(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597414 = path.getOrDefault("resourceGroupName")
  valid_597414 = validateParameter(valid_597414, JString, required = true,
                                 default = nil)
  if valid_597414 != nil:
    section.add "resourceGroupName", valid_597414
  var valid_597415 = path.getOrDefault("name")
  valid_597415 = validateParameter(valid_597415, JString, required = true,
                                 default = nil)
  if valid_597415 != nil:
    section.add "name", valid_597415
  var valid_597416 = path.getOrDefault("processId")
  valid_597416 = validateParameter(valid_597416, JString, required = true,
                                 default = nil)
  if valid_597416 != nil:
    section.add "processId", valid_597416
  var valid_597417 = path.getOrDefault("slot")
  valid_597417 = validateParameter(valid_597417, JString, required = true,
                                 default = nil)
  if valid_597417 != nil:
    section.add "slot", valid_597417
  var valid_597418 = path.getOrDefault("subscriptionId")
  valid_597418 = validateParameter(valid_597418, JString, required = true,
                                 default = nil)
  if valid_597418 != nil:
    section.add "subscriptionId", valid_597418
  var valid_597419 = path.getOrDefault("threadId")
  valid_597419 = validateParameter(valid_597419, JString, required = true,
                                 default = nil)
  if valid_597419 != nil:
    section.add "threadId", valid_597419
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597420 = query.getOrDefault("api-version")
  valid_597420 = validateParameter(valid_597420, JString, required = true,
                                 default = nil)
  if valid_597420 != nil:
    section.add "api-version", valid_597420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597421: Call_WebAppsGetProcessThreadSlot_597411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_597421.validator(path, query, header, formData, body)
  let scheme = call_597421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597421.url(scheme.get, call_597421.host, call_597421.base,
                         call_597421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597421, url, valid)

proc call*(call_597422: Call_WebAppsGetProcessThreadSlot_597411;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_597423 = newJObject()
  var query_597424 = newJObject()
  add(path_597423, "resourceGroupName", newJString(resourceGroupName))
  add(query_597424, "api-version", newJString(apiVersion))
  add(path_597423, "name", newJString(name))
  add(path_597423, "processId", newJString(processId))
  add(path_597423, "slot", newJString(slot))
  add(path_597423, "subscriptionId", newJString(subscriptionId))
  add(path_597423, "threadId", newJString(threadId))
  result = call_597422.call(path_597423, query_597424, nil, nil, nil)

var webAppsGetProcessThreadSlot* = Call_WebAppsGetProcessThreadSlot_597411(
    name: "webAppsGetProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThreadSlot_597412, base: "",
    url: url_WebAppsGetProcessThreadSlot_597413, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificatesSlot_597425 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublicCertificatesSlot_597427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificatesSlot_597426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597428 = path.getOrDefault("resourceGroupName")
  valid_597428 = validateParameter(valid_597428, JString, required = true,
                                 default = nil)
  if valid_597428 != nil:
    section.add "resourceGroupName", valid_597428
  var valid_597429 = path.getOrDefault("name")
  valid_597429 = validateParameter(valid_597429, JString, required = true,
                                 default = nil)
  if valid_597429 != nil:
    section.add "name", valid_597429
  var valid_597430 = path.getOrDefault("slot")
  valid_597430 = validateParameter(valid_597430, JString, required = true,
                                 default = nil)
  if valid_597430 != nil:
    section.add "slot", valid_597430
  var valid_597431 = path.getOrDefault("subscriptionId")
  valid_597431 = validateParameter(valid_597431, JString, required = true,
                                 default = nil)
  if valid_597431 != nil:
    section.add "subscriptionId", valid_597431
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597432 = query.getOrDefault("api-version")
  valid_597432 = validateParameter(valid_597432, JString, required = true,
                                 default = nil)
  if valid_597432 != nil:
    section.add "api-version", valid_597432
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597433: Call_WebAppsListPublicCertificatesSlot_597425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_597433.validator(path, query, header, formData, body)
  let scheme = call_597433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597433.url(scheme.get, call_597433.host, call_597433.base,
                         call_597433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597433, url, valid)

proc call*(call_597434: Call_WebAppsListPublicCertificatesSlot_597425;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificatesSlot
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597435 = newJObject()
  var query_597436 = newJObject()
  add(path_597435, "resourceGroupName", newJString(resourceGroupName))
  add(query_597436, "api-version", newJString(apiVersion))
  add(path_597435, "name", newJString(name))
  add(path_597435, "slot", newJString(slot))
  add(path_597435, "subscriptionId", newJString(subscriptionId))
  result = call_597434.call(path_597435, query_597436, nil, nil, nil)

var webAppsListPublicCertificatesSlot* = Call_WebAppsListPublicCertificatesSlot_597425(
    name: "webAppsListPublicCertificatesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    validator: validate_WebAppsListPublicCertificatesSlot_597426, base: "",
    url: url_WebAppsListPublicCertificatesSlot_597427, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificateSlot_597450 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdatePublicCertificateSlot_597452(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificateSlot_597451(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597453 = path.getOrDefault("resourceGroupName")
  valid_597453 = validateParameter(valid_597453, JString, required = true,
                                 default = nil)
  if valid_597453 != nil:
    section.add "resourceGroupName", valid_597453
  var valid_597454 = path.getOrDefault("name")
  valid_597454 = validateParameter(valid_597454, JString, required = true,
                                 default = nil)
  if valid_597454 != nil:
    section.add "name", valid_597454
  var valid_597455 = path.getOrDefault("slot")
  valid_597455 = validateParameter(valid_597455, JString, required = true,
                                 default = nil)
  if valid_597455 != nil:
    section.add "slot", valid_597455
  var valid_597456 = path.getOrDefault("subscriptionId")
  valid_597456 = validateParameter(valid_597456, JString, required = true,
                                 default = nil)
  if valid_597456 != nil:
    section.add "subscriptionId", valid_597456
  var valid_597457 = path.getOrDefault("publicCertificateName")
  valid_597457 = validateParameter(valid_597457, JString, required = true,
                                 default = nil)
  if valid_597457 != nil:
    section.add "publicCertificateName", valid_597457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597458 = query.getOrDefault("api-version")
  valid_597458 = validateParameter(valid_597458, JString, required = true,
                                 default = nil)
  if valid_597458 != nil:
    section.add "api-version", valid_597458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597460: Call_WebAppsCreateOrUpdatePublicCertificateSlot_597450;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_597460.validator(path, query, header, formData, body)
  let scheme = call_597460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597460.url(scheme.get, call_597460.host, call_597460.base,
                         call_597460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597460, url, valid)

proc call*(call_597461: Call_WebAppsCreateOrUpdatePublicCertificateSlot_597450;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificateSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_597462 = newJObject()
  var query_597463 = newJObject()
  var body_597464 = newJObject()
  add(path_597462, "resourceGroupName", newJString(resourceGroupName))
  add(query_597463, "api-version", newJString(apiVersion))
  add(path_597462, "name", newJString(name))
  add(path_597462, "slot", newJString(slot))
  add(path_597462, "subscriptionId", newJString(subscriptionId))
  add(path_597462, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_597464 = publicCertificate
  result = call_597461.call(path_597462, query_597463, nil, nil, body_597464)

var webAppsCreateOrUpdatePublicCertificateSlot* = Call_WebAppsCreateOrUpdatePublicCertificateSlot_597450(
    name: "webAppsCreateOrUpdatePublicCertificateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificateSlot_597451,
    base: "", url: url_WebAppsCreateOrUpdatePublicCertificateSlot_597452,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificateSlot_597437 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPublicCertificateSlot_597439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificateSlot_597438(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597440 = path.getOrDefault("resourceGroupName")
  valid_597440 = validateParameter(valid_597440, JString, required = true,
                                 default = nil)
  if valid_597440 != nil:
    section.add "resourceGroupName", valid_597440
  var valid_597441 = path.getOrDefault("name")
  valid_597441 = validateParameter(valid_597441, JString, required = true,
                                 default = nil)
  if valid_597441 != nil:
    section.add "name", valid_597441
  var valid_597442 = path.getOrDefault("slot")
  valid_597442 = validateParameter(valid_597442, JString, required = true,
                                 default = nil)
  if valid_597442 != nil:
    section.add "slot", valid_597442
  var valid_597443 = path.getOrDefault("subscriptionId")
  valid_597443 = validateParameter(valid_597443, JString, required = true,
                                 default = nil)
  if valid_597443 != nil:
    section.add "subscriptionId", valid_597443
  var valid_597444 = path.getOrDefault("publicCertificateName")
  valid_597444 = validateParameter(valid_597444, JString, required = true,
                                 default = nil)
  if valid_597444 != nil:
    section.add "publicCertificateName", valid_597444
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597445 = query.getOrDefault("api-version")
  valid_597445 = validateParameter(valid_597445, JString, required = true,
                                 default = nil)
  if valid_597445 != nil:
    section.add "api-version", valid_597445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597446: Call_WebAppsGetPublicCertificateSlot_597437;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_597446.validator(path, query, header, formData, body)
  let scheme = call_597446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597446.url(scheme.get, call_597446.host, call_597446.base,
                         call_597446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597446, url, valid)

proc call*(call_597447: Call_WebAppsGetPublicCertificateSlot_597437;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificateSlot
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_597448 = newJObject()
  var query_597449 = newJObject()
  add(path_597448, "resourceGroupName", newJString(resourceGroupName))
  add(query_597449, "api-version", newJString(apiVersion))
  add(path_597448, "name", newJString(name))
  add(path_597448, "slot", newJString(slot))
  add(path_597448, "subscriptionId", newJString(subscriptionId))
  add(path_597448, "publicCertificateName", newJString(publicCertificateName))
  result = call_597447.call(path_597448, query_597449, nil, nil, nil)

var webAppsGetPublicCertificateSlot* = Call_WebAppsGetPublicCertificateSlot_597437(
    name: "webAppsGetPublicCertificateSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificateSlot_597438, base: "",
    url: url_WebAppsGetPublicCertificateSlot_597439, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificateSlot_597465 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePublicCertificateSlot_597467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificateSlot_597466(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597468 = path.getOrDefault("resourceGroupName")
  valid_597468 = validateParameter(valid_597468, JString, required = true,
                                 default = nil)
  if valid_597468 != nil:
    section.add "resourceGroupName", valid_597468
  var valid_597469 = path.getOrDefault("name")
  valid_597469 = validateParameter(valid_597469, JString, required = true,
                                 default = nil)
  if valid_597469 != nil:
    section.add "name", valid_597469
  var valid_597470 = path.getOrDefault("slot")
  valid_597470 = validateParameter(valid_597470, JString, required = true,
                                 default = nil)
  if valid_597470 != nil:
    section.add "slot", valid_597470
  var valid_597471 = path.getOrDefault("subscriptionId")
  valid_597471 = validateParameter(valid_597471, JString, required = true,
                                 default = nil)
  if valid_597471 != nil:
    section.add "subscriptionId", valid_597471
  var valid_597472 = path.getOrDefault("publicCertificateName")
  valid_597472 = validateParameter(valid_597472, JString, required = true,
                                 default = nil)
  if valid_597472 != nil:
    section.add "publicCertificateName", valid_597472
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597473 = query.getOrDefault("api-version")
  valid_597473 = validateParameter(valid_597473, JString, required = true,
                                 default = nil)
  if valid_597473 != nil:
    section.add "api-version", valid_597473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597474: Call_WebAppsDeletePublicCertificateSlot_597465;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_597474.validator(path, query, header, formData, body)
  let scheme = call_597474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597474.url(scheme.get, call_597474.host, call_597474.base,
                         call_597474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597474, url, valid)

proc call*(call_597475: Call_WebAppsDeletePublicCertificateSlot_597465;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificateSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_597476 = newJObject()
  var query_597477 = newJObject()
  add(path_597476, "resourceGroupName", newJString(resourceGroupName))
  add(query_597477, "api-version", newJString(apiVersion))
  add(path_597476, "name", newJString(name))
  add(path_597476, "slot", newJString(slot))
  add(path_597476, "subscriptionId", newJString(subscriptionId))
  add(path_597476, "publicCertificateName", newJString(publicCertificateName))
  result = call_597475.call(path_597476, query_597477, nil, nil, nil)

var webAppsDeletePublicCertificateSlot* = Call_WebAppsDeletePublicCertificateSlot_597465(
    name: "webAppsDeletePublicCertificateSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificateSlot_597466, base: "",
    url: url_WebAppsDeletePublicCertificateSlot_597467, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597478 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingProfileXmlWithSecretsSlot_597480(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecretsSlot_597479(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597481 = path.getOrDefault("resourceGroupName")
  valid_597481 = validateParameter(valid_597481, JString, required = true,
                                 default = nil)
  if valid_597481 != nil:
    section.add "resourceGroupName", valid_597481
  var valid_597482 = path.getOrDefault("name")
  valid_597482 = validateParameter(valid_597482, JString, required = true,
                                 default = nil)
  if valid_597482 != nil:
    section.add "name", valid_597482
  var valid_597483 = path.getOrDefault("slot")
  valid_597483 = validateParameter(valid_597483, JString, required = true,
                                 default = nil)
  if valid_597483 != nil:
    section.add "slot", valid_597483
  var valid_597484 = path.getOrDefault("subscriptionId")
  valid_597484 = validateParameter(valid_597484, JString, required = true,
                                 default = nil)
  if valid_597484 != nil:
    section.add "subscriptionId", valid_597484
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597485 = query.getOrDefault("api-version")
  valid_597485 = validateParameter(valid_597485, JString, required = true,
                                 default = nil)
  if valid_597485 != nil:
    section.add "api-version", valid_597485
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597487: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597478;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_597487.validator(path, query, header, formData, body)
  let scheme = call_597487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597487.url(scheme.get, call_597487.host, call_597487.base,
                         call_597487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597487, url, valid)

proc call*(call_597488: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597478;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecretsSlot
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_597489 = newJObject()
  var query_597490 = newJObject()
  var body_597491 = newJObject()
  add(path_597489, "resourceGroupName", newJString(resourceGroupName))
  add(query_597490, "api-version", newJString(apiVersion))
  add(path_597489, "name", newJString(name))
  add(path_597489, "slot", newJString(slot))
  add(path_597489, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_597491 = publishingProfileOptions
  result = call_597488.call(path_597489, query_597490, nil, nil, body_597491)

var webAppsListPublishingProfileXmlWithSecretsSlot* = Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597478(
    name: "webAppsListPublishingProfileXmlWithSecretsSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecretsSlot_597479,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecretsSlot_597480,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetSlotConfigurationSlot_597492 = ref object of OpenApiRestCall_593437
proc url_WebAppsResetSlotConfigurationSlot_597494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetSlotConfigurationSlot_597493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597495 = path.getOrDefault("resourceGroupName")
  valid_597495 = validateParameter(valid_597495, JString, required = true,
                                 default = nil)
  if valid_597495 != nil:
    section.add "resourceGroupName", valid_597495
  var valid_597496 = path.getOrDefault("name")
  valid_597496 = validateParameter(valid_597496, JString, required = true,
                                 default = nil)
  if valid_597496 != nil:
    section.add "name", valid_597496
  var valid_597497 = path.getOrDefault("slot")
  valid_597497 = validateParameter(valid_597497, JString, required = true,
                                 default = nil)
  if valid_597497 != nil:
    section.add "slot", valid_597497
  var valid_597498 = path.getOrDefault("subscriptionId")
  valid_597498 = validateParameter(valid_597498, JString, required = true,
                                 default = nil)
  if valid_597498 != nil:
    section.add "subscriptionId", valid_597498
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597499 = query.getOrDefault("api-version")
  valid_597499 = validateParameter(valid_597499, JString, required = true,
                                 default = nil)
  if valid_597499 != nil:
    section.add "api-version", valid_597499
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597500: Call_WebAppsResetSlotConfigurationSlot_597492;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_597500.validator(path, query, header, formData, body)
  let scheme = call_597500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597500.url(scheme.get, call_597500.host, call_597500.base,
                         call_597500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597500, url, valid)

proc call*(call_597501: Call_WebAppsResetSlotConfigurationSlot_597492;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsResetSlotConfigurationSlot
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597502 = newJObject()
  var query_597503 = newJObject()
  add(path_597502, "resourceGroupName", newJString(resourceGroupName))
  add(query_597503, "api-version", newJString(apiVersion))
  add(path_597502, "name", newJString(name))
  add(path_597502, "slot", newJString(slot))
  add(path_597502, "subscriptionId", newJString(subscriptionId))
  result = call_597501.call(path_597502, query_597503, nil, nil, nil)

var webAppsResetSlotConfigurationSlot* = Call_WebAppsResetSlotConfigurationSlot_597492(
    name: "webAppsResetSlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_WebAppsResetSlotConfigurationSlot_597493, base: "",
    url: url_WebAppsResetSlotConfigurationSlot_597494, schemes: {Scheme.Https})
type
  Call_WebAppsRestartSlot_597504 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestartSlot_597506(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestartSlot_597505(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597507 = path.getOrDefault("resourceGroupName")
  valid_597507 = validateParameter(valid_597507, JString, required = true,
                                 default = nil)
  if valid_597507 != nil:
    section.add "resourceGroupName", valid_597507
  var valid_597508 = path.getOrDefault("name")
  valid_597508 = validateParameter(valid_597508, JString, required = true,
                                 default = nil)
  if valid_597508 != nil:
    section.add "name", valid_597508
  var valid_597509 = path.getOrDefault("slot")
  valid_597509 = validateParameter(valid_597509, JString, required = true,
                                 default = nil)
  if valid_597509 != nil:
    section.add "slot", valid_597509
  var valid_597510 = path.getOrDefault("subscriptionId")
  valid_597510 = validateParameter(valid_597510, JString, required = true,
                                 default = nil)
  if valid_597510 != nil:
    section.add "subscriptionId", valid_597510
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597511 = query.getOrDefault("api-version")
  valid_597511 = validateParameter(valid_597511, JString, required = true,
                                 default = nil)
  if valid_597511 != nil:
    section.add "api-version", valid_597511
  var valid_597512 = query.getOrDefault("synchronous")
  valid_597512 = validateParameter(valid_597512, JBool, required = false, default = nil)
  if valid_597512 != nil:
    section.add "synchronous", valid_597512
  var valid_597513 = query.getOrDefault("softRestart")
  valid_597513 = validateParameter(valid_597513, JBool, required = false, default = nil)
  if valid_597513 != nil:
    section.add "softRestart", valid_597513
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597514: Call_WebAppsRestartSlot_597504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_597514.validator(path, query, header, formData, body)
  let scheme = call_597514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597514.url(scheme.get, call_597514.host, call_597514.base,
                         call_597514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597514, url, valid)

proc call*(call_597515: Call_WebAppsRestartSlot_597504; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestartSlot
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_597516 = newJObject()
  var query_597517 = newJObject()
  add(path_597516, "resourceGroupName", newJString(resourceGroupName))
  add(query_597517, "api-version", newJString(apiVersion))
  add(path_597516, "name", newJString(name))
  add(path_597516, "slot", newJString(slot))
  add(path_597516, "subscriptionId", newJString(subscriptionId))
  add(query_597517, "synchronous", newJBool(synchronous))
  add(query_597517, "softRestart", newJBool(softRestart))
  result = call_597515.call(path_597516, query_597517, nil, nil, nil)

var webAppsRestartSlot* = Call_WebAppsRestartSlot_597504(
    name: "webAppsRestartSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_WebAppsRestartSlot_597505, base: "",
    url: url_WebAppsRestartSlot_597506, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromBackupBlobSlot_597518 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreFromBackupBlobSlot_597520(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreFromBackupBlob")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromBackupBlobSlot_597519(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597521 = path.getOrDefault("resourceGroupName")
  valid_597521 = validateParameter(valid_597521, JString, required = true,
                                 default = nil)
  if valid_597521 != nil:
    section.add "resourceGroupName", valid_597521
  var valid_597522 = path.getOrDefault("name")
  valid_597522 = validateParameter(valid_597522, JString, required = true,
                                 default = nil)
  if valid_597522 != nil:
    section.add "name", valid_597522
  var valid_597523 = path.getOrDefault("slot")
  valid_597523 = validateParameter(valid_597523, JString, required = true,
                                 default = nil)
  if valid_597523 != nil:
    section.add "slot", valid_597523
  var valid_597524 = path.getOrDefault("subscriptionId")
  valid_597524 = validateParameter(valid_597524, JString, required = true,
                                 default = nil)
  if valid_597524 != nil:
    section.add "subscriptionId", valid_597524
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597525 = query.getOrDefault("api-version")
  valid_597525 = validateParameter(valid_597525, JString, required = true,
                                 default = nil)
  if valid_597525 != nil:
    section.add "api-version", valid_597525
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597527: Call_WebAppsRestoreFromBackupBlobSlot_597518;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  let valid = call_597527.validator(path, query, header, formData, body)
  let scheme = call_597527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597527.url(scheme.get, call_597527.host, call_597527.base,
                         call_597527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597527, url, valid)

proc call*(call_597528: Call_WebAppsRestoreFromBackupBlobSlot_597518;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsRestoreFromBackupBlobSlot
  ## Restores an app from a backup blob in Azure Storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_597529 = newJObject()
  var query_597530 = newJObject()
  var body_597531 = newJObject()
  add(path_597529, "resourceGroupName", newJString(resourceGroupName))
  add(query_597530, "api-version", newJString(apiVersion))
  add(path_597529, "name", newJString(name))
  add(path_597529, "slot", newJString(slot))
  add(path_597529, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_597531 = request
  result = call_597528.call(path_597529, query_597530, nil, nil, body_597531)

var webAppsRestoreFromBackupBlobSlot* = Call_WebAppsRestoreFromBackupBlobSlot_597518(
    name: "webAppsRestoreFromBackupBlobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
    validator: validate_WebAppsRestoreFromBackupBlobSlot_597519, base: "",
    url: url_WebAppsRestoreFromBackupBlobSlot_597520, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromDeletedAppSlot_597532 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreFromDeletedAppSlot_597534(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreFromDeletedApp")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromDeletedAppSlot_597533(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a deleted web app to this web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597535 = path.getOrDefault("resourceGroupName")
  valid_597535 = validateParameter(valid_597535, JString, required = true,
                                 default = nil)
  if valid_597535 != nil:
    section.add "resourceGroupName", valid_597535
  var valid_597536 = path.getOrDefault("name")
  valid_597536 = validateParameter(valid_597536, JString, required = true,
                                 default = nil)
  if valid_597536 != nil:
    section.add "name", valid_597536
  var valid_597537 = path.getOrDefault("slot")
  valid_597537 = validateParameter(valid_597537, JString, required = true,
                                 default = nil)
  if valid_597537 != nil:
    section.add "slot", valid_597537
  var valid_597538 = path.getOrDefault("subscriptionId")
  valid_597538 = validateParameter(valid_597538, JString, required = true,
                                 default = nil)
  if valid_597538 != nil:
    section.add "subscriptionId", valid_597538
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597539 = query.getOrDefault("api-version")
  valid_597539 = validateParameter(valid_597539, JString, required = true,
                                 default = nil)
  if valid_597539 != nil:
    section.add "api-version", valid_597539
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597541: Call_WebAppsRestoreFromDeletedAppSlot_597532;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Restores a deleted web app to this web app.
  ## 
  let valid = call_597541.validator(path, query, header, formData, body)
  let scheme = call_597541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597541.url(scheme.get, call_597541.host, call_597541.base,
                         call_597541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597541, url, valid)

proc call*(call_597542: Call_WebAppsRestoreFromDeletedAppSlot_597532;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreFromDeletedAppSlot
  ## Restores a deleted web app to this web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  var path_597543 = newJObject()
  var query_597544 = newJObject()
  var body_597545 = newJObject()
  add(path_597543, "resourceGroupName", newJString(resourceGroupName))
  add(query_597544, "api-version", newJString(apiVersion))
  add(path_597543, "name", newJString(name))
  add(path_597543, "slot", newJString(slot))
  add(path_597543, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_597545 = restoreRequest
  result = call_597542.call(path_597543, query_597544, nil, nil, body_597545)

var webAppsRestoreFromDeletedAppSlot* = Call_WebAppsRestoreFromDeletedAppSlot_597532(
    name: "webAppsRestoreFromDeletedAppSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
    validator: validate_WebAppsRestoreFromDeletedAppSlot_597533, base: "",
    url: url_WebAppsRestoreFromDeletedAppSlot_597534, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSnapshotSlot_597546 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreSnapshotSlot_597548(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreSnapshot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSnapshotSlot_597547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app from a snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597549 = path.getOrDefault("resourceGroupName")
  valid_597549 = validateParameter(valid_597549, JString, required = true,
                                 default = nil)
  if valid_597549 != nil:
    section.add "resourceGroupName", valid_597549
  var valid_597550 = path.getOrDefault("name")
  valid_597550 = validateParameter(valid_597550, JString, required = true,
                                 default = nil)
  if valid_597550 != nil:
    section.add "name", valid_597550
  var valid_597551 = path.getOrDefault("slot")
  valid_597551 = validateParameter(valid_597551, JString, required = true,
                                 default = nil)
  if valid_597551 != nil:
    section.add "slot", valid_597551
  var valid_597552 = path.getOrDefault("subscriptionId")
  valid_597552 = validateParameter(valid_597552, JString, required = true,
                                 default = nil)
  if valid_597552 != nil:
    section.add "subscriptionId", valid_597552
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597553 = query.getOrDefault("api-version")
  valid_597553 = validateParameter(valid_597553, JString, required = true,
                                 default = nil)
  if valid_597553 != nil:
    section.add "api-version", valid_597553
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597555: Call_WebAppsRestoreSnapshotSlot_597546; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app from a snapshot.
  ## 
  let valid = call_597555.validator(path, query, header, formData, body)
  let scheme = call_597555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597555.url(scheme.get, call_597555.host, call_597555.base,
                         call_597555.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597555, url, valid)

proc call*(call_597556: Call_WebAppsRestoreSnapshotSlot_597546;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreSnapshotSlot
  ## Restores a web app from a snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_597557 = newJObject()
  var query_597558 = newJObject()
  var body_597559 = newJObject()
  add(path_597557, "resourceGroupName", newJString(resourceGroupName))
  add(query_597558, "api-version", newJString(apiVersion))
  add(path_597557, "name", newJString(name))
  add(path_597557, "slot", newJString(slot))
  add(path_597557, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_597559 = restoreRequest
  result = call_597556.call(path_597557, query_597558, nil, nil, body_597559)

var webAppsRestoreSnapshotSlot* = Call_WebAppsRestoreSnapshotSlot_597546(
    name: "webAppsRestoreSnapshotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
    validator: validate_WebAppsRestoreSnapshotSlot_597547, base: "",
    url: url_WebAppsRestoreSnapshotSlot_597548, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensionsSlot_597560 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSiteExtensionsSlot_597562(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensionsSlot_597561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597563 = path.getOrDefault("resourceGroupName")
  valid_597563 = validateParameter(valid_597563, JString, required = true,
                                 default = nil)
  if valid_597563 != nil:
    section.add "resourceGroupName", valid_597563
  var valid_597564 = path.getOrDefault("name")
  valid_597564 = validateParameter(valid_597564, JString, required = true,
                                 default = nil)
  if valid_597564 != nil:
    section.add "name", valid_597564
  var valid_597565 = path.getOrDefault("slot")
  valid_597565 = validateParameter(valid_597565, JString, required = true,
                                 default = nil)
  if valid_597565 != nil:
    section.add "slot", valid_597565
  var valid_597566 = path.getOrDefault("subscriptionId")
  valid_597566 = validateParameter(valid_597566, JString, required = true,
                                 default = nil)
  if valid_597566 != nil:
    section.add "subscriptionId", valid_597566
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597567 = query.getOrDefault("api-version")
  valid_597567 = validateParameter(valid_597567, JString, required = true,
                                 default = nil)
  if valid_597567 != nil:
    section.add "api-version", valid_597567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597568: Call_WebAppsListSiteExtensionsSlot_597560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  let valid = call_597568.validator(path, query, header, formData, body)
  let scheme = call_597568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597568.url(scheme.get, call_597568.host, call_597568.base,
                         call_597568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597568, url, valid)

proc call*(call_597569: Call_WebAppsListSiteExtensionsSlot_597560;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensionsSlot
  ## Get list of siteextensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597570 = newJObject()
  var query_597571 = newJObject()
  add(path_597570, "resourceGroupName", newJString(resourceGroupName))
  add(query_597571, "api-version", newJString(apiVersion))
  add(path_597570, "name", newJString(name))
  add(path_597570, "slot", newJString(slot))
  add(path_597570, "subscriptionId", newJString(subscriptionId))
  result = call_597569.call(path_597570, query_597571, nil, nil, nil)

var webAppsListSiteExtensionsSlot* = Call_WebAppsListSiteExtensionsSlot_597560(
    name: "webAppsListSiteExtensionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    validator: validate_WebAppsListSiteExtensionsSlot_597561, base: "",
    url: url_WebAppsListSiteExtensionsSlot_597562, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtensionSlot_597585 = ref object of OpenApiRestCall_593437
proc url_WebAppsInstallSiteExtensionSlot_597587(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtensionSlot_597586(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597588 = path.getOrDefault("resourceGroupName")
  valid_597588 = validateParameter(valid_597588, JString, required = true,
                                 default = nil)
  if valid_597588 != nil:
    section.add "resourceGroupName", valid_597588
  var valid_597589 = path.getOrDefault("name")
  valid_597589 = validateParameter(valid_597589, JString, required = true,
                                 default = nil)
  if valid_597589 != nil:
    section.add "name", valid_597589
  var valid_597590 = path.getOrDefault("slot")
  valid_597590 = validateParameter(valid_597590, JString, required = true,
                                 default = nil)
  if valid_597590 != nil:
    section.add "slot", valid_597590
  var valid_597591 = path.getOrDefault("subscriptionId")
  valid_597591 = validateParameter(valid_597591, JString, required = true,
                                 default = nil)
  if valid_597591 != nil:
    section.add "subscriptionId", valid_597591
  var valid_597592 = path.getOrDefault("siteExtensionId")
  valid_597592 = validateParameter(valid_597592, JString, required = true,
                                 default = nil)
  if valid_597592 != nil:
    section.add "siteExtensionId", valid_597592
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597593 = query.getOrDefault("api-version")
  valid_597593 = validateParameter(valid_597593, JString, required = true,
                                 default = nil)
  if valid_597593 != nil:
    section.add "api-version", valid_597593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597594: Call_WebAppsInstallSiteExtensionSlot_597585;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_597594.validator(path, query, header, formData, body)
  let scheme = call_597594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597594.url(scheme.get, call_597594.host, call_597594.base,
                         call_597594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597594, url, valid)

proc call*(call_597595: Call_WebAppsInstallSiteExtensionSlot_597585;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtensionSlot
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_597596 = newJObject()
  var query_597597 = newJObject()
  add(path_597596, "resourceGroupName", newJString(resourceGroupName))
  add(query_597597, "api-version", newJString(apiVersion))
  add(path_597596, "name", newJString(name))
  add(path_597596, "slot", newJString(slot))
  add(path_597596, "subscriptionId", newJString(subscriptionId))
  add(path_597596, "siteExtensionId", newJString(siteExtensionId))
  result = call_597595.call(path_597596, query_597597, nil, nil, nil)

var webAppsInstallSiteExtensionSlot* = Call_WebAppsInstallSiteExtensionSlot_597585(
    name: "webAppsInstallSiteExtensionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtensionSlot_597586, base: "",
    url: url_WebAppsInstallSiteExtensionSlot_597587, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtensionSlot_597572 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSiteExtensionSlot_597574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtensionSlot_597573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597575 = path.getOrDefault("resourceGroupName")
  valid_597575 = validateParameter(valid_597575, JString, required = true,
                                 default = nil)
  if valid_597575 != nil:
    section.add "resourceGroupName", valid_597575
  var valid_597576 = path.getOrDefault("name")
  valid_597576 = validateParameter(valid_597576, JString, required = true,
                                 default = nil)
  if valid_597576 != nil:
    section.add "name", valid_597576
  var valid_597577 = path.getOrDefault("slot")
  valid_597577 = validateParameter(valid_597577, JString, required = true,
                                 default = nil)
  if valid_597577 != nil:
    section.add "slot", valid_597577
  var valid_597578 = path.getOrDefault("subscriptionId")
  valid_597578 = validateParameter(valid_597578, JString, required = true,
                                 default = nil)
  if valid_597578 != nil:
    section.add "subscriptionId", valid_597578
  var valid_597579 = path.getOrDefault("siteExtensionId")
  valid_597579 = validateParameter(valid_597579, JString, required = true,
                                 default = nil)
  if valid_597579 != nil:
    section.add "siteExtensionId", valid_597579
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597580 = query.getOrDefault("api-version")
  valid_597580 = validateParameter(valid_597580, JString, required = true,
                                 default = nil)
  if valid_597580 != nil:
    section.add "api-version", valid_597580
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597581: Call_WebAppsGetSiteExtensionSlot_597572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_597581.validator(path, query, header, formData, body)
  let scheme = call_597581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597581.url(scheme.get, call_597581.host, call_597581.base,
                         call_597581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597581, url, valid)

proc call*(call_597582: Call_WebAppsGetSiteExtensionSlot_597572;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtensionSlot
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_597583 = newJObject()
  var query_597584 = newJObject()
  add(path_597583, "resourceGroupName", newJString(resourceGroupName))
  add(query_597584, "api-version", newJString(apiVersion))
  add(path_597583, "name", newJString(name))
  add(path_597583, "slot", newJString(slot))
  add(path_597583, "subscriptionId", newJString(subscriptionId))
  add(path_597583, "siteExtensionId", newJString(siteExtensionId))
  result = call_597582.call(path_597583, query_597584, nil, nil, nil)

var webAppsGetSiteExtensionSlot* = Call_WebAppsGetSiteExtensionSlot_597572(
    name: "webAppsGetSiteExtensionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtensionSlot_597573, base: "",
    url: url_WebAppsGetSiteExtensionSlot_597574, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtensionSlot_597598 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSiteExtensionSlot_597600(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtensionSlot_597599(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597601 = path.getOrDefault("resourceGroupName")
  valid_597601 = validateParameter(valid_597601, JString, required = true,
                                 default = nil)
  if valid_597601 != nil:
    section.add "resourceGroupName", valid_597601
  var valid_597602 = path.getOrDefault("name")
  valid_597602 = validateParameter(valid_597602, JString, required = true,
                                 default = nil)
  if valid_597602 != nil:
    section.add "name", valid_597602
  var valid_597603 = path.getOrDefault("slot")
  valid_597603 = validateParameter(valid_597603, JString, required = true,
                                 default = nil)
  if valid_597603 != nil:
    section.add "slot", valid_597603
  var valid_597604 = path.getOrDefault("subscriptionId")
  valid_597604 = validateParameter(valid_597604, JString, required = true,
                                 default = nil)
  if valid_597604 != nil:
    section.add "subscriptionId", valid_597604
  var valid_597605 = path.getOrDefault("siteExtensionId")
  valid_597605 = validateParameter(valid_597605, JString, required = true,
                                 default = nil)
  if valid_597605 != nil:
    section.add "siteExtensionId", valid_597605
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597606 = query.getOrDefault("api-version")
  valid_597606 = validateParameter(valid_597606, JString, required = true,
                                 default = nil)
  if valid_597606 != nil:
    section.add "api-version", valid_597606
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597607: Call_WebAppsDeleteSiteExtensionSlot_597598; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_597607.validator(path, query, header, formData, body)
  let scheme = call_597607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597607.url(scheme.get, call_597607.host, call_597607.base,
                         call_597607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597607, url, valid)

proc call*(call_597608: Call_WebAppsDeleteSiteExtensionSlot_597598;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtensionSlot
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_597609 = newJObject()
  var query_597610 = newJObject()
  add(path_597609, "resourceGroupName", newJString(resourceGroupName))
  add(query_597610, "api-version", newJString(apiVersion))
  add(path_597609, "name", newJString(name))
  add(path_597609, "slot", newJString(slot))
  add(path_597609, "subscriptionId", newJString(subscriptionId))
  add(path_597609, "siteExtensionId", newJString(siteExtensionId))
  result = call_597608.call(path_597609, query_597610, nil, nil, nil)

var webAppsDeleteSiteExtensionSlot* = Call_WebAppsDeleteSiteExtensionSlot_597598(
    name: "webAppsDeleteSiteExtensionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtensionSlot_597599, base: "",
    url: url_WebAppsDeleteSiteExtensionSlot_597600, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesSlot_597611 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlotDifferencesSlot_597613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesSlot_597612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597614 = path.getOrDefault("resourceGroupName")
  valid_597614 = validateParameter(valid_597614, JString, required = true,
                                 default = nil)
  if valid_597614 != nil:
    section.add "resourceGroupName", valid_597614
  var valid_597615 = path.getOrDefault("name")
  valid_597615 = validateParameter(valid_597615, JString, required = true,
                                 default = nil)
  if valid_597615 != nil:
    section.add "name", valid_597615
  var valid_597616 = path.getOrDefault("slot")
  valid_597616 = validateParameter(valid_597616, JString, required = true,
                                 default = nil)
  if valid_597616 != nil:
    section.add "slot", valid_597616
  var valid_597617 = path.getOrDefault("subscriptionId")
  valid_597617 = validateParameter(valid_597617, JString, required = true,
                                 default = nil)
  if valid_597617 != nil:
    section.add "subscriptionId", valid_597617
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597618 = query.getOrDefault("api-version")
  valid_597618 = validateParameter(valid_597618, JString, required = true,
                                 default = nil)
  if valid_597618 != nil:
    section.add "api-version", valid_597618
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597620: Call_WebAppsListSlotDifferencesSlot_597611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_597620.validator(path, query, header, formData, body)
  let scheme = call_597620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597620.url(scheme.get, call_597620.host, call_597620.base,
                         call_597620.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597620, url, valid)

proc call*(call_597621: Call_WebAppsListSlotDifferencesSlot_597611;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesSlot
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_597622 = newJObject()
  var query_597623 = newJObject()
  var body_597624 = newJObject()
  add(path_597622, "resourceGroupName", newJString(resourceGroupName))
  add(query_597623, "api-version", newJString(apiVersion))
  add(path_597622, "name", newJString(name))
  add(path_597622, "slot", newJString(slot))
  add(path_597622, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597624 = slotSwapEntity
  result = call_597621.call(path_597622, query_597623, nil, nil, body_597624)

var webAppsListSlotDifferencesSlot* = Call_WebAppsListSlotDifferencesSlot_597611(
    name: "webAppsListSlotDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesSlot_597612, base: "",
    url: url_WebAppsListSlotDifferencesSlot_597613, schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotSlot_597625 = ref object of OpenApiRestCall_593437
proc url_WebAppsSwapSlotSlot_597627(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotSlot_597626(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597628 = path.getOrDefault("resourceGroupName")
  valid_597628 = validateParameter(valid_597628, JString, required = true,
                                 default = nil)
  if valid_597628 != nil:
    section.add "resourceGroupName", valid_597628
  var valid_597629 = path.getOrDefault("name")
  valid_597629 = validateParameter(valid_597629, JString, required = true,
                                 default = nil)
  if valid_597629 != nil:
    section.add "name", valid_597629
  var valid_597630 = path.getOrDefault("slot")
  valid_597630 = validateParameter(valid_597630, JString, required = true,
                                 default = nil)
  if valid_597630 != nil:
    section.add "slot", valid_597630
  var valid_597631 = path.getOrDefault("subscriptionId")
  valid_597631 = validateParameter(valid_597631, JString, required = true,
                                 default = nil)
  if valid_597631 != nil:
    section.add "subscriptionId", valid_597631
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597632 = query.getOrDefault("api-version")
  valid_597632 = validateParameter(valid_597632, JString, required = true,
                                 default = nil)
  if valid_597632 != nil:
    section.add "api-version", valid_597632
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597634: Call_WebAppsSwapSlotSlot_597625; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_597634.validator(path, query, header, formData, body)
  let scheme = call_597634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597634.url(scheme.get, call_597634.host, call_597634.base,
                         call_597634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597634, url, valid)

proc call*(call_597635: Call_WebAppsSwapSlotSlot_597625; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotSlot
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_597636 = newJObject()
  var query_597637 = newJObject()
  var body_597638 = newJObject()
  add(path_597636, "resourceGroupName", newJString(resourceGroupName))
  add(query_597637, "api-version", newJString(apiVersion))
  add(path_597636, "name", newJString(name))
  add(path_597636, "slot", newJString(slot))
  add(path_597636, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597638 = slotSwapEntity
  result = call_597635.call(path_597636, query_597637, nil, nil, body_597638)

var webAppsSwapSlotSlot* = Call_WebAppsSwapSlotSlot_597625(
    name: "webAppsSwapSlotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_WebAppsSwapSlotSlot_597626, base: "",
    url: url_WebAppsSwapSlotSlot_597627, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsSlot_597639 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSnapshotsSlot_597641(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsSlot_597640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597642 = path.getOrDefault("resourceGroupName")
  valid_597642 = validateParameter(valid_597642, JString, required = true,
                                 default = nil)
  if valid_597642 != nil:
    section.add "resourceGroupName", valid_597642
  var valid_597643 = path.getOrDefault("name")
  valid_597643 = validateParameter(valid_597643, JString, required = true,
                                 default = nil)
  if valid_597643 != nil:
    section.add "name", valid_597643
  var valid_597644 = path.getOrDefault("slot")
  valid_597644 = validateParameter(valid_597644, JString, required = true,
                                 default = nil)
  if valid_597644 != nil:
    section.add "slot", valid_597644
  var valid_597645 = path.getOrDefault("subscriptionId")
  valid_597645 = validateParameter(valid_597645, JString, required = true,
                                 default = nil)
  if valid_597645 != nil:
    section.add "subscriptionId", valid_597645
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597646 = query.getOrDefault("api-version")
  valid_597646 = validateParameter(valid_597646, JString, required = true,
                                 default = nil)
  if valid_597646 != nil:
    section.add "api-version", valid_597646
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597647: Call_WebAppsListSnapshotsSlot_597639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_597647.validator(path, query, header, formData, body)
  let scheme = call_597647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597647.url(scheme.get, call_597647.host, call_597647.base,
                         call_597647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597647, url, valid)

proc call*(call_597648: Call_WebAppsListSnapshotsSlot_597639;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsSlot
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597649 = newJObject()
  var query_597650 = newJObject()
  add(path_597649, "resourceGroupName", newJString(resourceGroupName))
  add(query_597650, "api-version", newJString(apiVersion))
  add(path_597649, "name", newJString(name))
  add(path_597649, "slot", newJString(slot))
  add(path_597649, "subscriptionId", newJString(subscriptionId))
  result = call_597648.call(path_597649, query_597650, nil, nil, nil)

var webAppsListSnapshotsSlot* = Call_WebAppsListSnapshotsSlot_597639(
    name: "webAppsListSnapshotsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_WebAppsListSnapshotsSlot_597640, base: "",
    url: url_WebAppsListSnapshotsSlot_597641, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsFromDRSecondarySlot_597651 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSnapshotsFromDRSecondarySlot_597653(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshotsdr")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsFromDRSecondarySlot_597652(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597654 = path.getOrDefault("resourceGroupName")
  valid_597654 = validateParameter(valid_597654, JString, required = true,
                                 default = nil)
  if valid_597654 != nil:
    section.add "resourceGroupName", valid_597654
  var valid_597655 = path.getOrDefault("name")
  valid_597655 = validateParameter(valid_597655, JString, required = true,
                                 default = nil)
  if valid_597655 != nil:
    section.add "name", valid_597655
  var valid_597656 = path.getOrDefault("slot")
  valid_597656 = validateParameter(valid_597656, JString, required = true,
                                 default = nil)
  if valid_597656 != nil:
    section.add "slot", valid_597656
  var valid_597657 = path.getOrDefault("subscriptionId")
  valid_597657 = validateParameter(valid_597657, JString, required = true,
                                 default = nil)
  if valid_597657 != nil:
    section.add "subscriptionId", valid_597657
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597658 = query.getOrDefault("api-version")
  valid_597658 = validateParameter(valid_597658, JString, required = true,
                                 default = nil)
  if valid_597658 != nil:
    section.add "api-version", valid_597658
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597659: Call_WebAppsListSnapshotsFromDRSecondarySlot_597651;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  let valid = call_597659.validator(path, query, header, formData, body)
  let scheme = call_597659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597659.url(scheme.get, call_597659.host, call_597659.base,
                         call_597659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597659, url, valid)

proc call*(call_597660: Call_WebAppsListSnapshotsFromDRSecondarySlot_597651;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsFromDRSecondarySlot
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597661 = newJObject()
  var query_597662 = newJObject()
  add(path_597661, "resourceGroupName", newJString(resourceGroupName))
  add(query_597662, "api-version", newJString(apiVersion))
  add(path_597661, "name", newJString(name))
  add(path_597661, "slot", newJString(slot))
  add(path_597661, "subscriptionId", newJString(subscriptionId))
  result = call_597660.call(path_597661, query_597662, nil, nil, nil)

var webAppsListSnapshotsFromDRSecondarySlot* = Call_WebAppsListSnapshotsFromDRSecondarySlot_597651(
    name: "webAppsListSnapshotsFromDRSecondarySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
    validator: validate_WebAppsListSnapshotsFromDRSecondarySlot_597652, base: "",
    url: url_WebAppsListSnapshotsFromDRSecondarySlot_597653,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControlSlot_597675 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSourceControlSlot_597677(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControlSlot_597676(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597678 = path.getOrDefault("resourceGroupName")
  valid_597678 = validateParameter(valid_597678, JString, required = true,
                                 default = nil)
  if valid_597678 != nil:
    section.add "resourceGroupName", valid_597678
  var valid_597679 = path.getOrDefault("name")
  valid_597679 = validateParameter(valid_597679, JString, required = true,
                                 default = nil)
  if valid_597679 != nil:
    section.add "name", valid_597679
  var valid_597680 = path.getOrDefault("slot")
  valid_597680 = validateParameter(valid_597680, JString, required = true,
                                 default = nil)
  if valid_597680 != nil:
    section.add "slot", valid_597680
  var valid_597681 = path.getOrDefault("subscriptionId")
  valid_597681 = validateParameter(valid_597681, JString, required = true,
                                 default = nil)
  if valid_597681 != nil:
    section.add "subscriptionId", valid_597681
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597682 = query.getOrDefault("api-version")
  valid_597682 = validateParameter(valid_597682, JString, required = true,
                                 default = nil)
  if valid_597682 != nil:
    section.add "api-version", valid_597682
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597684: Call_WebAppsCreateOrUpdateSourceControlSlot_597675;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_597684.validator(path, query, header, formData, body)
  let scheme = call_597684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597684.url(scheme.get, call_597684.host, call_597684.base,
                         call_597684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597684, url, valid)

proc call*(call_597685: Call_WebAppsCreateOrUpdateSourceControlSlot_597675;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_597686 = newJObject()
  var query_597687 = newJObject()
  var body_597688 = newJObject()
  add(path_597686, "resourceGroupName", newJString(resourceGroupName))
  add(query_597687, "api-version", newJString(apiVersion))
  add(path_597686, "name", newJString(name))
  add(path_597686, "slot", newJString(slot))
  add(path_597686, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597688 = siteSourceControl
  result = call_597685.call(path_597686, query_597687, nil, nil, body_597688)

var webAppsCreateOrUpdateSourceControlSlot* = Call_WebAppsCreateOrUpdateSourceControlSlot_597675(
    name: "webAppsCreateOrUpdateSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControlSlot_597676, base: "",
    url: url_WebAppsCreateOrUpdateSourceControlSlot_597677,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControlSlot_597663 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSourceControlSlot_597665(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControlSlot_597664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597666 = path.getOrDefault("resourceGroupName")
  valid_597666 = validateParameter(valid_597666, JString, required = true,
                                 default = nil)
  if valid_597666 != nil:
    section.add "resourceGroupName", valid_597666
  var valid_597667 = path.getOrDefault("name")
  valid_597667 = validateParameter(valid_597667, JString, required = true,
                                 default = nil)
  if valid_597667 != nil:
    section.add "name", valid_597667
  var valid_597668 = path.getOrDefault("slot")
  valid_597668 = validateParameter(valid_597668, JString, required = true,
                                 default = nil)
  if valid_597668 != nil:
    section.add "slot", valid_597668
  var valid_597669 = path.getOrDefault("subscriptionId")
  valid_597669 = validateParameter(valid_597669, JString, required = true,
                                 default = nil)
  if valid_597669 != nil:
    section.add "subscriptionId", valid_597669
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597670 = query.getOrDefault("api-version")
  valid_597670 = validateParameter(valid_597670, JString, required = true,
                                 default = nil)
  if valid_597670 != nil:
    section.add "api-version", valid_597670
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597671: Call_WebAppsGetSourceControlSlot_597663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_597671.validator(path, query, header, formData, body)
  let scheme = call_597671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597671.url(scheme.get, call_597671.host, call_597671.base,
                         call_597671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597671, url, valid)

proc call*(call_597672: Call_WebAppsGetSourceControlSlot_597663;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControlSlot
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597673 = newJObject()
  var query_597674 = newJObject()
  add(path_597673, "resourceGroupName", newJString(resourceGroupName))
  add(query_597674, "api-version", newJString(apiVersion))
  add(path_597673, "name", newJString(name))
  add(path_597673, "slot", newJString(slot))
  add(path_597673, "subscriptionId", newJString(subscriptionId))
  result = call_597672.call(path_597673, query_597674, nil, nil, nil)

var webAppsGetSourceControlSlot* = Call_WebAppsGetSourceControlSlot_597663(
    name: "webAppsGetSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControlSlot_597664, base: "",
    url: url_WebAppsGetSourceControlSlot_597665, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControlSlot_597701 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSourceControlSlot_597703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControlSlot_597702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597704 = path.getOrDefault("resourceGroupName")
  valid_597704 = validateParameter(valid_597704, JString, required = true,
                                 default = nil)
  if valid_597704 != nil:
    section.add "resourceGroupName", valid_597704
  var valid_597705 = path.getOrDefault("name")
  valid_597705 = validateParameter(valid_597705, JString, required = true,
                                 default = nil)
  if valid_597705 != nil:
    section.add "name", valid_597705
  var valid_597706 = path.getOrDefault("slot")
  valid_597706 = validateParameter(valid_597706, JString, required = true,
                                 default = nil)
  if valid_597706 != nil:
    section.add "slot", valid_597706
  var valid_597707 = path.getOrDefault("subscriptionId")
  valid_597707 = validateParameter(valid_597707, JString, required = true,
                                 default = nil)
  if valid_597707 != nil:
    section.add "subscriptionId", valid_597707
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597708 = query.getOrDefault("api-version")
  valid_597708 = validateParameter(valid_597708, JString, required = true,
                                 default = nil)
  if valid_597708 != nil:
    section.add "api-version", valid_597708
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597710: Call_WebAppsUpdateSourceControlSlot_597701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_597710.validator(path, query, header, formData, body)
  let scheme = call_597710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597710.url(scheme.get, call_597710.host, call_597710.base,
                         call_597710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597710, url, valid)

proc call*(call_597711: Call_WebAppsUpdateSourceControlSlot_597701;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_597712 = newJObject()
  var query_597713 = newJObject()
  var body_597714 = newJObject()
  add(path_597712, "resourceGroupName", newJString(resourceGroupName))
  add(query_597713, "api-version", newJString(apiVersion))
  add(path_597712, "name", newJString(name))
  add(path_597712, "slot", newJString(slot))
  add(path_597712, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597714 = siteSourceControl
  result = call_597711.call(path_597712, query_597713, nil, nil, body_597714)

var webAppsUpdateSourceControlSlot* = Call_WebAppsUpdateSourceControlSlot_597701(
    name: "webAppsUpdateSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControlSlot_597702, base: "",
    url: url_WebAppsUpdateSourceControlSlot_597703, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControlSlot_597689 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSourceControlSlot_597691(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControlSlot_597690(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597692 = path.getOrDefault("resourceGroupName")
  valid_597692 = validateParameter(valid_597692, JString, required = true,
                                 default = nil)
  if valid_597692 != nil:
    section.add "resourceGroupName", valid_597692
  var valid_597693 = path.getOrDefault("name")
  valid_597693 = validateParameter(valid_597693, JString, required = true,
                                 default = nil)
  if valid_597693 != nil:
    section.add "name", valid_597693
  var valid_597694 = path.getOrDefault("slot")
  valid_597694 = validateParameter(valid_597694, JString, required = true,
                                 default = nil)
  if valid_597694 != nil:
    section.add "slot", valid_597694
  var valid_597695 = path.getOrDefault("subscriptionId")
  valid_597695 = validateParameter(valid_597695, JString, required = true,
                                 default = nil)
  if valid_597695 != nil:
    section.add "subscriptionId", valid_597695
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597696 = query.getOrDefault("api-version")
  valid_597696 = validateParameter(valid_597696, JString, required = true,
                                 default = nil)
  if valid_597696 != nil:
    section.add "api-version", valid_597696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597697: Call_WebAppsDeleteSourceControlSlot_597689; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_597697.validator(path, query, header, formData, body)
  let scheme = call_597697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597697.url(scheme.get, call_597697.host, call_597697.base,
                         call_597697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597697, url, valid)

proc call*(call_597698: Call_WebAppsDeleteSourceControlSlot_597689;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControlSlot
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597699 = newJObject()
  var query_597700 = newJObject()
  add(path_597699, "resourceGroupName", newJString(resourceGroupName))
  add(query_597700, "api-version", newJString(apiVersion))
  add(path_597699, "name", newJString(name))
  add(path_597699, "slot", newJString(slot))
  add(path_597699, "subscriptionId", newJString(subscriptionId))
  result = call_597698.call(path_597699, query_597700, nil, nil, nil)

var webAppsDeleteSourceControlSlot* = Call_WebAppsDeleteSourceControlSlot_597689(
    name: "webAppsDeleteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControlSlot_597690, base: "",
    url: url_WebAppsDeleteSourceControlSlot_597691, schemes: {Scheme.Https})
type
  Call_WebAppsStartSlot_597715 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartSlot_597717(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartSlot_597716(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597718 = path.getOrDefault("resourceGroupName")
  valid_597718 = validateParameter(valid_597718, JString, required = true,
                                 default = nil)
  if valid_597718 != nil:
    section.add "resourceGroupName", valid_597718
  var valid_597719 = path.getOrDefault("name")
  valid_597719 = validateParameter(valid_597719, JString, required = true,
                                 default = nil)
  if valid_597719 != nil:
    section.add "name", valid_597719
  var valid_597720 = path.getOrDefault("slot")
  valid_597720 = validateParameter(valid_597720, JString, required = true,
                                 default = nil)
  if valid_597720 != nil:
    section.add "slot", valid_597720
  var valid_597721 = path.getOrDefault("subscriptionId")
  valid_597721 = validateParameter(valid_597721, JString, required = true,
                                 default = nil)
  if valid_597721 != nil:
    section.add "subscriptionId", valid_597721
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597722 = query.getOrDefault("api-version")
  valid_597722 = validateParameter(valid_597722, JString, required = true,
                                 default = nil)
  if valid_597722 != nil:
    section.add "api-version", valid_597722
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597723: Call_WebAppsStartSlot_597715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_597723.validator(path, query, header, formData, body)
  let scheme = call_597723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597723.url(scheme.get, call_597723.host, call_597723.base,
                         call_597723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597723, url, valid)

proc call*(call_597724: Call_WebAppsStartSlot_597715; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStartSlot
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597725 = newJObject()
  var query_597726 = newJObject()
  add(path_597725, "resourceGroupName", newJString(resourceGroupName))
  add(query_597726, "api-version", newJString(apiVersion))
  add(path_597725, "name", newJString(name))
  add(path_597725, "slot", newJString(slot))
  add(path_597725, "subscriptionId", newJString(subscriptionId))
  result = call_597724.call(path_597725, query_597726, nil, nil, nil)

var webAppsStartSlot* = Call_WebAppsStartSlot_597715(name: "webAppsStartSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_WebAppsStartSlot_597716, base: "",
    url: url_WebAppsStartSlot_597717, schemes: {Scheme.Https})
type
  Call_WebAppsStartNetworkTraceSlot_597727 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartNetworkTraceSlot_597729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/startNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartNetworkTraceSlot_597728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597730 = path.getOrDefault("resourceGroupName")
  valid_597730 = validateParameter(valid_597730, JString, required = true,
                                 default = nil)
  if valid_597730 != nil:
    section.add "resourceGroupName", valid_597730
  var valid_597731 = path.getOrDefault("name")
  valid_597731 = validateParameter(valid_597731, JString, required = true,
                                 default = nil)
  if valid_597731 != nil:
    section.add "name", valid_597731
  var valid_597732 = path.getOrDefault("slot")
  valid_597732 = validateParameter(valid_597732, JString, required = true,
                                 default = nil)
  if valid_597732 != nil:
    section.add "slot", valid_597732
  var valid_597733 = path.getOrDefault("subscriptionId")
  valid_597733 = validateParameter(valid_597733, JString, required = true,
                                 default = nil)
  if valid_597733 != nil:
    section.add "subscriptionId", valid_597733
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597734 = query.getOrDefault("api-version")
  valid_597734 = validateParameter(valid_597734, JString, required = true,
                                 default = nil)
  if valid_597734 != nil:
    section.add "api-version", valid_597734
  var valid_597735 = query.getOrDefault("durationInSeconds")
  valid_597735 = validateParameter(valid_597735, JInt, required = false, default = nil)
  if valid_597735 != nil:
    section.add "durationInSeconds", valid_597735
  var valid_597736 = query.getOrDefault("maxFrameLength")
  valid_597736 = validateParameter(valid_597736, JInt, required = false, default = nil)
  if valid_597736 != nil:
    section.add "maxFrameLength", valid_597736
  var valid_597737 = query.getOrDefault("sasUrl")
  valid_597737 = validateParameter(valid_597737, JString, required = false,
                                 default = nil)
  if valid_597737 != nil:
    section.add "sasUrl", valid_597737
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597738: Call_WebAppsStartNetworkTraceSlot_597727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_597738.validator(path, query, header, formData, body)
  let scheme = call_597738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597738.url(scheme.get, call_597738.host, call_597738.base,
                         call_597738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597738, url, valid)

proc call*(call_597739: Call_WebAppsStartNetworkTraceSlot_597727;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartNetworkTraceSlot
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_597740 = newJObject()
  var query_597741 = newJObject()
  add(path_597740, "resourceGroupName", newJString(resourceGroupName))
  add(query_597741, "api-version", newJString(apiVersion))
  add(path_597740, "name", newJString(name))
  add(path_597740, "slot", newJString(slot))
  add(path_597740, "subscriptionId", newJString(subscriptionId))
  add(query_597741, "durationInSeconds", newJInt(durationInSeconds))
  add(query_597741, "maxFrameLength", newJInt(maxFrameLength))
  add(query_597741, "sasUrl", newJString(sasUrl))
  result = call_597739.call(path_597740, query_597741, nil, nil, nil)

var webAppsStartNetworkTraceSlot* = Call_WebAppsStartNetworkTraceSlot_597727(
    name: "webAppsStartNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
    validator: validate_WebAppsStartNetworkTraceSlot_597728, base: "",
    url: url_WebAppsStartNetworkTraceSlot_597729, schemes: {Scheme.Https})
type
  Call_WebAppsStopSlot_597742 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopSlot_597744(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopSlot_597743(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597745 = path.getOrDefault("resourceGroupName")
  valid_597745 = validateParameter(valid_597745, JString, required = true,
                                 default = nil)
  if valid_597745 != nil:
    section.add "resourceGroupName", valid_597745
  var valid_597746 = path.getOrDefault("name")
  valid_597746 = validateParameter(valid_597746, JString, required = true,
                                 default = nil)
  if valid_597746 != nil:
    section.add "name", valid_597746
  var valid_597747 = path.getOrDefault("slot")
  valid_597747 = validateParameter(valid_597747, JString, required = true,
                                 default = nil)
  if valid_597747 != nil:
    section.add "slot", valid_597747
  var valid_597748 = path.getOrDefault("subscriptionId")
  valid_597748 = validateParameter(valid_597748, JString, required = true,
                                 default = nil)
  if valid_597748 != nil:
    section.add "subscriptionId", valid_597748
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597749 = query.getOrDefault("api-version")
  valid_597749 = validateParameter(valid_597749, JString, required = true,
                                 default = nil)
  if valid_597749 != nil:
    section.add "api-version", valid_597749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597750: Call_WebAppsStopSlot_597742; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_597750.validator(path, query, header, formData, body)
  let scheme = call_597750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597750.url(scheme.get, call_597750.host, call_597750.base,
                         call_597750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597750, url, valid)

proc call*(call_597751: Call_WebAppsStopSlot_597742; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStopSlot
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597752 = newJObject()
  var query_597753 = newJObject()
  add(path_597752, "resourceGroupName", newJString(resourceGroupName))
  add(query_597753, "api-version", newJString(apiVersion))
  add(path_597752, "name", newJString(name))
  add(path_597752, "slot", newJString(slot))
  add(path_597752, "subscriptionId", newJString(subscriptionId))
  result = call_597751.call(path_597752, query_597753, nil, nil, nil)

var webAppsStopSlot* = Call_WebAppsStopSlot_597742(name: "webAppsStopSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_WebAppsStopSlot_597743, base: "", url: url_WebAppsStopSlot_597744,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopNetworkTraceSlot_597754 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopNetworkTraceSlot_597756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stopNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopNetworkTraceSlot_597755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597757 = path.getOrDefault("resourceGroupName")
  valid_597757 = validateParameter(valid_597757, JString, required = true,
                                 default = nil)
  if valid_597757 != nil:
    section.add "resourceGroupName", valid_597757
  var valid_597758 = path.getOrDefault("name")
  valid_597758 = validateParameter(valid_597758, JString, required = true,
                                 default = nil)
  if valid_597758 != nil:
    section.add "name", valid_597758
  var valid_597759 = path.getOrDefault("slot")
  valid_597759 = validateParameter(valid_597759, JString, required = true,
                                 default = nil)
  if valid_597759 != nil:
    section.add "slot", valid_597759
  var valid_597760 = path.getOrDefault("subscriptionId")
  valid_597760 = validateParameter(valid_597760, JString, required = true,
                                 default = nil)
  if valid_597760 != nil:
    section.add "subscriptionId", valid_597760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597761 = query.getOrDefault("api-version")
  valid_597761 = validateParameter(valid_597761, JString, required = true,
                                 default = nil)
  if valid_597761 != nil:
    section.add "api-version", valid_597761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597762: Call_WebAppsStopNetworkTraceSlot_597754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_597762.validator(path, query, header, formData, body)
  let scheme = call_597762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597762.url(scheme.get, call_597762.host, call_597762.base,
                         call_597762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597762, url, valid)

proc call*(call_597763: Call_WebAppsStopNetworkTraceSlot_597754;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsStopNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597764 = newJObject()
  var query_597765 = newJObject()
  add(path_597764, "resourceGroupName", newJString(resourceGroupName))
  add(query_597765, "api-version", newJString(apiVersion))
  add(path_597764, "name", newJString(name))
  add(path_597764, "slot", newJString(slot))
  add(path_597764, "subscriptionId", newJString(subscriptionId))
  result = call_597763.call(path_597764, query_597765, nil, nil, nil)

var webAppsStopNetworkTraceSlot* = Call_WebAppsStopNetworkTraceSlot_597754(
    name: "webAppsStopNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
    validator: validate_WebAppsStopNetworkTraceSlot_597755, base: "",
    url: url_WebAppsStopNetworkTraceSlot_597756, schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepositorySlot_597766 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncRepositorySlot_597768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepositorySlot_597767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597769 = path.getOrDefault("resourceGroupName")
  valid_597769 = validateParameter(valid_597769, JString, required = true,
                                 default = nil)
  if valid_597769 != nil:
    section.add "resourceGroupName", valid_597769
  var valid_597770 = path.getOrDefault("name")
  valid_597770 = validateParameter(valid_597770, JString, required = true,
                                 default = nil)
  if valid_597770 != nil:
    section.add "name", valid_597770
  var valid_597771 = path.getOrDefault("slot")
  valid_597771 = validateParameter(valid_597771, JString, required = true,
                                 default = nil)
  if valid_597771 != nil:
    section.add "slot", valid_597771
  var valid_597772 = path.getOrDefault("subscriptionId")
  valid_597772 = validateParameter(valid_597772, JString, required = true,
                                 default = nil)
  if valid_597772 != nil:
    section.add "subscriptionId", valid_597772
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597773 = query.getOrDefault("api-version")
  valid_597773 = validateParameter(valid_597773, JString, required = true,
                                 default = nil)
  if valid_597773 != nil:
    section.add "api-version", valid_597773
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597774: Call_WebAppsSyncRepositorySlot_597766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_597774.validator(path, query, header, formData, body)
  let scheme = call_597774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597774.url(scheme.get, call_597774.host, call_597774.base,
                         call_597774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597774, url, valid)

proc call*(call_597775: Call_WebAppsSyncRepositorySlot_597766;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepositorySlot
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597776 = newJObject()
  var query_597777 = newJObject()
  add(path_597776, "resourceGroupName", newJString(resourceGroupName))
  add(query_597777, "api-version", newJString(apiVersion))
  add(path_597776, "name", newJString(name))
  add(path_597776, "slot", newJString(slot))
  add(path_597776, "subscriptionId", newJString(subscriptionId))
  result = call_597775.call(path_597776, query_597777, nil, nil, nil)

var webAppsSyncRepositorySlot* = Call_WebAppsSyncRepositorySlot_597766(
    name: "webAppsSyncRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_WebAppsSyncRepositorySlot_597767, base: "",
    url: url_WebAppsSyncRepositorySlot_597768, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggersSlot_597778 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncFunctionTriggersSlot_597780(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggersSlot_597779(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597781 = path.getOrDefault("resourceGroupName")
  valid_597781 = validateParameter(valid_597781, JString, required = true,
                                 default = nil)
  if valid_597781 != nil:
    section.add "resourceGroupName", valid_597781
  var valid_597782 = path.getOrDefault("name")
  valid_597782 = validateParameter(valid_597782, JString, required = true,
                                 default = nil)
  if valid_597782 != nil:
    section.add "name", valid_597782
  var valid_597783 = path.getOrDefault("slot")
  valid_597783 = validateParameter(valid_597783, JString, required = true,
                                 default = nil)
  if valid_597783 != nil:
    section.add "slot", valid_597783
  var valid_597784 = path.getOrDefault("subscriptionId")
  valid_597784 = validateParameter(valid_597784, JString, required = true,
                                 default = nil)
  if valid_597784 != nil:
    section.add "subscriptionId", valid_597784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597785 = query.getOrDefault("api-version")
  valid_597785 = validateParameter(valid_597785, JString, required = true,
                                 default = nil)
  if valid_597785 != nil:
    section.add "api-version", valid_597785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597786: Call_WebAppsSyncFunctionTriggersSlot_597778;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_597786.validator(path, query, header, formData, body)
  let scheme = call_597786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597786.url(scheme.get, call_597786.host, call_597786.base,
                         call_597786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597786, url, valid)

proc call*(call_597787: Call_WebAppsSyncFunctionTriggersSlot_597778;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggersSlot
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597788 = newJObject()
  var query_597789 = newJObject()
  add(path_597788, "resourceGroupName", newJString(resourceGroupName))
  add(query_597789, "api-version", newJString(apiVersion))
  add(path_597788, "name", newJString(name))
  add(path_597788, "slot", newJString(slot))
  add(path_597788, "subscriptionId", newJString(subscriptionId))
  result = call_597787.call(path_597788, query_597789, nil, nil, nil)

var webAppsSyncFunctionTriggersSlot* = Call_WebAppsSyncFunctionTriggersSlot_597778(
    name: "webAppsSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggersSlot_597779, base: "",
    url: url_WebAppsSyncFunctionTriggersSlot_597780, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobsSlot_597790 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobsSlot_597792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobsSlot_597791(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597793 = path.getOrDefault("resourceGroupName")
  valid_597793 = validateParameter(valid_597793, JString, required = true,
                                 default = nil)
  if valid_597793 != nil:
    section.add "resourceGroupName", valid_597793
  var valid_597794 = path.getOrDefault("name")
  valid_597794 = validateParameter(valid_597794, JString, required = true,
                                 default = nil)
  if valid_597794 != nil:
    section.add "name", valid_597794
  var valid_597795 = path.getOrDefault("slot")
  valid_597795 = validateParameter(valid_597795, JString, required = true,
                                 default = nil)
  if valid_597795 != nil:
    section.add "slot", valid_597795
  var valid_597796 = path.getOrDefault("subscriptionId")
  valid_597796 = validateParameter(valid_597796, JString, required = true,
                                 default = nil)
  if valid_597796 != nil:
    section.add "subscriptionId", valid_597796
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597797 = query.getOrDefault("api-version")
  valid_597797 = validateParameter(valid_597797, JString, required = true,
                                 default = nil)
  if valid_597797 != nil:
    section.add "api-version", valid_597797
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597798: Call_WebAppsListTriggeredWebJobsSlot_597790;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_597798.validator(path, query, header, formData, body)
  let scheme = call_597798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597798.url(scheme.get, call_597798.host, call_597798.base,
                         call_597798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597798, url, valid)

proc call*(call_597799: Call_WebAppsListTriggeredWebJobsSlot_597790;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobsSlot
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597800 = newJObject()
  var query_597801 = newJObject()
  add(path_597800, "resourceGroupName", newJString(resourceGroupName))
  add(query_597801, "api-version", newJString(apiVersion))
  add(path_597800, "name", newJString(name))
  add(path_597800, "slot", newJString(slot))
  add(path_597800, "subscriptionId", newJString(subscriptionId))
  result = call_597799.call(path_597800, query_597801, nil, nil, nil)

var webAppsListTriggeredWebJobsSlot* = Call_WebAppsListTriggeredWebJobsSlot_597790(
    name: "webAppsListTriggeredWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobsSlot_597791, base: "",
    url: url_WebAppsListTriggeredWebJobsSlot_597792, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobSlot_597802 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJobSlot_597804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobSlot_597803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597805 = path.getOrDefault("resourceGroupName")
  valid_597805 = validateParameter(valid_597805, JString, required = true,
                                 default = nil)
  if valid_597805 != nil:
    section.add "resourceGroupName", valid_597805
  var valid_597806 = path.getOrDefault("name")
  valid_597806 = validateParameter(valid_597806, JString, required = true,
                                 default = nil)
  if valid_597806 != nil:
    section.add "name", valid_597806
  var valid_597807 = path.getOrDefault("slot")
  valid_597807 = validateParameter(valid_597807, JString, required = true,
                                 default = nil)
  if valid_597807 != nil:
    section.add "slot", valid_597807
  var valid_597808 = path.getOrDefault("subscriptionId")
  valid_597808 = validateParameter(valid_597808, JString, required = true,
                                 default = nil)
  if valid_597808 != nil:
    section.add "subscriptionId", valid_597808
  var valid_597809 = path.getOrDefault("webJobName")
  valid_597809 = validateParameter(valid_597809, JString, required = true,
                                 default = nil)
  if valid_597809 != nil:
    section.add "webJobName", valid_597809
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597810 = query.getOrDefault("api-version")
  valid_597810 = validateParameter(valid_597810, JString, required = true,
                                 default = nil)
  if valid_597810 != nil:
    section.add "api-version", valid_597810
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597811: Call_WebAppsGetTriggeredWebJobSlot_597802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_597811.validator(path, query, header, formData, body)
  let scheme = call_597811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597811.url(scheme.get, call_597811.host, call_597811.base,
                         call_597811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597811, url, valid)

proc call*(call_597812: Call_WebAppsGetTriggeredWebJobSlot_597802;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobSlot
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597813 = newJObject()
  var query_597814 = newJObject()
  add(path_597813, "resourceGroupName", newJString(resourceGroupName))
  add(query_597814, "api-version", newJString(apiVersion))
  add(path_597813, "name", newJString(name))
  add(path_597813, "slot", newJString(slot))
  add(path_597813, "subscriptionId", newJString(subscriptionId))
  add(path_597813, "webJobName", newJString(webJobName))
  result = call_597812.call(path_597813, query_597814, nil, nil, nil)

var webAppsGetTriggeredWebJobSlot* = Call_WebAppsGetTriggeredWebJobSlot_597802(
    name: "webAppsGetTriggeredWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJobSlot_597803, base: "",
    url: url_WebAppsGetTriggeredWebJobSlot_597804, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJobSlot_597815 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteTriggeredWebJobSlot_597817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJobSlot_597816(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597818 = path.getOrDefault("resourceGroupName")
  valid_597818 = validateParameter(valid_597818, JString, required = true,
                                 default = nil)
  if valid_597818 != nil:
    section.add "resourceGroupName", valid_597818
  var valid_597819 = path.getOrDefault("name")
  valid_597819 = validateParameter(valid_597819, JString, required = true,
                                 default = nil)
  if valid_597819 != nil:
    section.add "name", valid_597819
  var valid_597820 = path.getOrDefault("slot")
  valid_597820 = validateParameter(valid_597820, JString, required = true,
                                 default = nil)
  if valid_597820 != nil:
    section.add "slot", valid_597820
  var valid_597821 = path.getOrDefault("subscriptionId")
  valid_597821 = validateParameter(valid_597821, JString, required = true,
                                 default = nil)
  if valid_597821 != nil:
    section.add "subscriptionId", valid_597821
  var valid_597822 = path.getOrDefault("webJobName")
  valid_597822 = validateParameter(valid_597822, JString, required = true,
                                 default = nil)
  if valid_597822 != nil:
    section.add "webJobName", valid_597822
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597823 = query.getOrDefault("api-version")
  valid_597823 = validateParameter(valid_597823, JString, required = true,
                                 default = nil)
  if valid_597823 != nil:
    section.add "api-version", valid_597823
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597824: Call_WebAppsDeleteTriggeredWebJobSlot_597815;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_597824.validator(path, query, header, formData, body)
  let scheme = call_597824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597824.url(scheme.get, call_597824.host, call_597824.base,
                         call_597824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597824, url, valid)

proc call*(call_597825: Call_WebAppsDeleteTriggeredWebJobSlot_597815;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJobSlot
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597826 = newJObject()
  var query_597827 = newJObject()
  add(path_597826, "resourceGroupName", newJString(resourceGroupName))
  add(query_597827, "api-version", newJString(apiVersion))
  add(path_597826, "name", newJString(name))
  add(path_597826, "slot", newJString(slot))
  add(path_597826, "subscriptionId", newJString(subscriptionId))
  add(path_597826, "webJobName", newJString(webJobName))
  result = call_597825.call(path_597826, query_597827, nil, nil, nil)

var webAppsDeleteTriggeredWebJobSlot* = Call_WebAppsDeleteTriggeredWebJobSlot_597815(
    name: "webAppsDeleteTriggeredWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJobSlot_597816, base: "",
    url: url_WebAppsDeleteTriggeredWebJobSlot_597817, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistorySlot_597828 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobHistorySlot_597830(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistorySlot_597829(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597831 = path.getOrDefault("resourceGroupName")
  valid_597831 = validateParameter(valid_597831, JString, required = true,
                                 default = nil)
  if valid_597831 != nil:
    section.add "resourceGroupName", valid_597831
  var valid_597832 = path.getOrDefault("name")
  valid_597832 = validateParameter(valid_597832, JString, required = true,
                                 default = nil)
  if valid_597832 != nil:
    section.add "name", valid_597832
  var valid_597833 = path.getOrDefault("slot")
  valid_597833 = validateParameter(valid_597833, JString, required = true,
                                 default = nil)
  if valid_597833 != nil:
    section.add "slot", valid_597833
  var valid_597834 = path.getOrDefault("subscriptionId")
  valid_597834 = validateParameter(valid_597834, JString, required = true,
                                 default = nil)
  if valid_597834 != nil:
    section.add "subscriptionId", valid_597834
  var valid_597835 = path.getOrDefault("webJobName")
  valid_597835 = validateParameter(valid_597835, JString, required = true,
                                 default = nil)
  if valid_597835 != nil:
    section.add "webJobName", valid_597835
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597836 = query.getOrDefault("api-version")
  valid_597836 = validateParameter(valid_597836, JString, required = true,
                                 default = nil)
  if valid_597836 != nil:
    section.add "api-version", valid_597836
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597837: Call_WebAppsListTriggeredWebJobHistorySlot_597828;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_597837.validator(path, query, header, formData, body)
  let scheme = call_597837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597837.url(scheme.get, call_597837.host, call_597837.base,
                         call_597837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597837, url, valid)

proc call*(call_597838: Call_WebAppsListTriggeredWebJobHistorySlot_597828;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistorySlot
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597839 = newJObject()
  var query_597840 = newJObject()
  add(path_597839, "resourceGroupName", newJString(resourceGroupName))
  add(query_597840, "api-version", newJString(apiVersion))
  add(path_597839, "name", newJString(name))
  add(path_597839, "slot", newJString(slot))
  add(path_597839, "subscriptionId", newJString(subscriptionId))
  add(path_597839, "webJobName", newJString(webJobName))
  result = call_597838.call(path_597839, query_597840, nil, nil, nil)

var webAppsListTriggeredWebJobHistorySlot* = Call_WebAppsListTriggeredWebJobHistorySlot_597828(
    name: "webAppsListTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistorySlot_597829, base: "",
    url: url_WebAppsListTriggeredWebJobHistorySlot_597830, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistorySlot_597841 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJobHistorySlot_597843(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistorySlot_597842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597844 = path.getOrDefault("resourceGroupName")
  valid_597844 = validateParameter(valid_597844, JString, required = true,
                                 default = nil)
  if valid_597844 != nil:
    section.add "resourceGroupName", valid_597844
  var valid_597845 = path.getOrDefault("name")
  valid_597845 = validateParameter(valid_597845, JString, required = true,
                                 default = nil)
  if valid_597845 != nil:
    section.add "name", valid_597845
  var valid_597846 = path.getOrDefault("slot")
  valid_597846 = validateParameter(valid_597846, JString, required = true,
                                 default = nil)
  if valid_597846 != nil:
    section.add "slot", valid_597846
  var valid_597847 = path.getOrDefault("subscriptionId")
  valid_597847 = validateParameter(valid_597847, JString, required = true,
                                 default = nil)
  if valid_597847 != nil:
    section.add "subscriptionId", valid_597847
  var valid_597848 = path.getOrDefault("id")
  valid_597848 = validateParameter(valid_597848, JString, required = true,
                                 default = nil)
  if valid_597848 != nil:
    section.add "id", valid_597848
  var valid_597849 = path.getOrDefault("webJobName")
  valid_597849 = validateParameter(valid_597849, JString, required = true,
                                 default = nil)
  if valid_597849 != nil:
    section.add "webJobName", valid_597849
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597850 = query.getOrDefault("api-version")
  valid_597850 = validateParameter(valid_597850, JString, required = true,
                                 default = nil)
  if valid_597850 != nil:
    section.add "api-version", valid_597850
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597851: Call_WebAppsGetTriggeredWebJobHistorySlot_597841;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_597851.validator(path, query, header, formData, body)
  let scheme = call_597851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597851.url(scheme.get, call_597851.host, call_597851.base,
                         call_597851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597851, url, valid)

proc call*(call_597852: Call_WebAppsGetTriggeredWebJobHistorySlot_597841;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistorySlot
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597853 = newJObject()
  var query_597854 = newJObject()
  add(path_597853, "resourceGroupName", newJString(resourceGroupName))
  add(query_597854, "api-version", newJString(apiVersion))
  add(path_597853, "name", newJString(name))
  add(path_597853, "slot", newJString(slot))
  add(path_597853, "subscriptionId", newJString(subscriptionId))
  add(path_597853, "id", newJString(id))
  add(path_597853, "webJobName", newJString(webJobName))
  result = call_597852.call(path_597853, query_597854, nil, nil, nil)

var webAppsGetTriggeredWebJobHistorySlot* = Call_WebAppsGetTriggeredWebJobHistorySlot_597841(
    name: "webAppsGetTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistorySlot_597842, base: "",
    url: url_WebAppsGetTriggeredWebJobHistorySlot_597843, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJobSlot_597855 = ref object of OpenApiRestCall_593437
proc url_WebAppsRunTriggeredWebJobSlot_597857(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJobSlot_597856(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597858 = path.getOrDefault("resourceGroupName")
  valid_597858 = validateParameter(valid_597858, JString, required = true,
                                 default = nil)
  if valid_597858 != nil:
    section.add "resourceGroupName", valid_597858
  var valid_597859 = path.getOrDefault("name")
  valid_597859 = validateParameter(valid_597859, JString, required = true,
                                 default = nil)
  if valid_597859 != nil:
    section.add "name", valid_597859
  var valid_597860 = path.getOrDefault("slot")
  valid_597860 = validateParameter(valid_597860, JString, required = true,
                                 default = nil)
  if valid_597860 != nil:
    section.add "slot", valid_597860
  var valid_597861 = path.getOrDefault("subscriptionId")
  valid_597861 = validateParameter(valid_597861, JString, required = true,
                                 default = nil)
  if valid_597861 != nil:
    section.add "subscriptionId", valid_597861
  var valid_597862 = path.getOrDefault("webJobName")
  valid_597862 = validateParameter(valid_597862, JString, required = true,
                                 default = nil)
  if valid_597862 != nil:
    section.add "webJobName", valid_597862
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597863 = query.getOrDefault("api-version")
  valid_597863 = validateParameter(valid_597863, JString, required = true,
                                 default = nil)
  if valid_597863 != nil:
    section.add "api-version", valid_597863
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597864: Call_WebAppsRunTriggeredWebJobSlot_597855; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_597864.validator(path, query, header, formData, body)
  let scheme = call_597864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597864.url(scheme.get, call_597864.host, call_597864.base,
                         call_597864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597864, url, valid)

proc call*(call_597865: Call_WebAppsRunTriggeredWebJobSlot_597855;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJobSlot
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597866 = newJObject()
  var query_597867 = newJObject()
  add(path_597866, "resourceGroupName", newJString(resourceGroupName))
  add(query_597867, "api-version", newJString(apiVersion))
  add(path_597866, "name", newJString(name))
  add(path_597866, "slot", newJString(slot))
  add(path_597866, "subscriptionId", newJString(subscriptionId))
  add(path_597866, "webJobName", newJString(webJobName))
  result = call_597865.call(path_597866, query_597867, nil, nil, nil)

var webAppsRunTriggeredWebJobSlot* = Call_WebAppsRunTriggeredWebJobSlot_597855(
    name: "webAppsRunTriggeredWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJobSlot_597856, base: "",
    url: url_WebAppsRunTriggeredWebJobSlot_597857, schemes: {Scheme.Https})
type
  Call_WebAppsListUsagesSlot_597868 = ref object of OpenApiRestCall_593437
proc url_WebAppsListUsagesSlot_597870(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsagesSlot_597869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597871 = path.getOrDefault("resourceGroupName")
  valid_597871 = validateParameter(valid_597871, JString, required = true,
                                 default = nil)
  if valid_597871 != nil:
    section.add "resourceGroupName", valid_597871
  var valid_597872 = path.getOrDefault("name")
  valid_597872 = validateParameter(valid_597872, JString, required = true,
                                 default = nil)
  if valid_597872 != nil:
    section.add "name", valid_597872
  var valid_597873 = path.getOrDefault("slot")
  valid_597873 = validateParameter(valid_597873, JString, required = true,
                                 default = nil)
  if valid_597873 != nil:
    section.add "slot", valid_597873
  var valid_597874 = path.getOrDefault("subscriptionId")
  valid_597874 = validateParameter(valid_597874, JString, required = true,
                                 default = nil)
  if valid_597874 != nil:
    section.add "subscriptionId", valid_597874
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597875 = query.getOrDefault("api-version")
  valid_597875 = validateParameter(valid_597875, JString, required = true,
                                 default = nil)
  if valid_597875 != nil:
    section.add "api-version", valid_597875
  var valid_597876 = query.getOrDefault("$filter")
  valid_597876 = validateParameter(valid_597876, JString, required = false,
                                 default = nil)
  if valid_597876 != nil:
    section.add "$filter", valid_597876
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597877: Call_WebAppsListUsagesSlot_597868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_597877.validator(path, query, header, formData, body)
  let scheme = call_597877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597877.url(scheme.get, call_597877.host, call_597877.base,
                         call_597877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597877, url, valid)

proc call*(call_597878: Call_WebAppsListUsagesSlot_597868;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListUsagesSlot
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597879 = newJObject()
  var query_597880 = newJObject()
  add(path_597879, "resourceGroupName", newJString(resourceGroupName))
  add(query_597880, "api-version", newJString(apiVersion))
  add(path_597879, "name", newJString(name))
  add(path_597879, "slot", newJString(slot))
  add(path_597879, "subscriptionId", newJString(subscriptionId))
  add(query_597880, "$filter", newJString(Filter))
  result = call_597878.call(path_597879, query_597880, nil, nil, nil)

var webAppsListUsagesSlot* = Call_WebAppsListUsagesSlot_597868(
    name: "webAppsListUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_WebAppsListUsagesSlot_597869, base: "",
    url: url_WebAppsListUsagesSlot_597870, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnectionsSlot_597881 = ref object of OpenApiRestCall_593437
proc url_WebAppsListVnetConnectionsSlot_597883(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnectionsSlot_597882(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597884 = path.getOrDefault("resourceGroupName")
  valid_597884 = validateParameter(valid_597884, JString, required = true,
                                 default = nil)
  if valid_597884 != nil:
    section.add "resourceGroupName", valid_597884
  var valid_597885 = path.getOrDefault("name")
  valid_597885 = validateParameter(valid_597885, JString, required = true,
                                 default = nil)
  if valid_597885 != nil:
    section.add "name", valid_597885
  var valid_597886 = path.getOrDefault("slot")
  valid_597886 = validateParameter(valid_597886, JString, required = true,
                                 default = nil)
  if valid_597886 != nil:
    section.add "slot", valid_597886
  var valid_597887 = path.getOrDefault("subscriptionId")
  valid_597887 = validateParameter(valid_597887, JString, required = true,
                                 default = nil)
  if valid_597887 != nil:
    section.add "subscriptionId", valid_597887
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597888 = query.getOrDefault("api-version")
  valid_597888 = validateParameter(valid_597888, JString, required = true,
                                 default = nil)
  if valid_597888 != nil:
    section.add "api-version", valid_597888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597889: Call_WebAppsListVnetConnectionsSlot_597881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_597889.validator(path, query, header, formData, body)
  let scheme = call_597889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597889.url(scheme.get, call_597889.host, call_597889.base,
                         call_597889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597889, url, valid)

proc call*(call_597890: Call_WebAppsListVnetConnectionsSlot_597881;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnectionsSlot
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597891 = newJObject()
  var query_597892 = newJObject()
  add(path_597891, "resourceGroupName", newJString(resourceGroupName))
  add(query_597892, "api-version", newJString(apiVersion))
  add(path_597891, "name", newJString(name))
  add(path_597891, "slot", newJString(slot))
  add(path_597891, "subscriptionId", newJString(subscriptionId))
  result = call_597890.call(path_597891, query_597892, nil, nil, nil)

var webAppsListVnetConnectionsSlot* = Call_WebAppsListVnetConnectionsSlot_597881(
    name: "webAppsListVnetConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnectionsSlot_597882, base: "",
    url: url_WebAppsListVnetConnectionsSlot_597883, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionSlot_597906 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnectionSlot_597908(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionSlot_597907(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597909 = path.getOrDefault("resourceGroupName")
  valid_597909 = validateParameter(valid_597909, JString, required = true,
                                 default = nil)
  if valid_597909 != nil:
    section.add "resourceGroupName", valid_597909
  var valid_597910 = path.getOrDefault("name")
  valid_597910 = validateParameter(valid_597910, JString, required = true,
                                 default = nil)
  if valid_597910 != nil:
    section.add "name", valid_597910
  var valid_597911 = path.getOrDefault("vnetName")
  valid_597911 = validateParameter(valid_597911, JString, required = true,
                                 default = nil)
  if valid_597911 != nil:
    section.add "vnetName", valid_597911
  var valid_597912 = path.getOrDefault("slot")
  valid_597912 = validateParameter(valid_597912, JString, required = true,
                                 default = nil)
  if valid_597912 != nil:
    section.add "slot", valid_597912
  var valid_597913 = path.getOrDefault("subscriptionId")
  valid_597913 = validateParameter(valid_597913, JString, required = true,
                                 default = nil)
  if valid_597913 != nil:
    section.add "subscriptionId", valid_597913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597914 = query.getOrDefault("api-version")
  valid_597914 = validateParameter(valid_597914, JString, required = true,
                                 default = nil)
  if valid_597914 != nil:
    section.add "api-version", valid_597914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597916: Call_WebAppsCreateOrUpdateVnetConnectionSlot_597906;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_597916.validator(path, query, header, formData, body)
  let scheme = call_597916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597916.url(scheme.get, call_597916.host, call_597916.base,
                         call_597916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597916, url, valid)

proc call*(call_597917: Call_WebAppsCreateOrUpdateVnetConnectionSlot_597906;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597918 = newJObject()
  var query_597919 = newJObject()
  var body_597920 = newJObject()
  add(path_597918, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597920 = connectionEnvelope
  add(path_597918, "name", newJString(name))
  add(path_597918, "vnetName", newJString(vnetName))
  add(query_597919, "api-version", newJString(apiVersion))
  add(path_597918, "slot", newJString(slot))
  add(path_597918, "subscriptionId", newJString(subscriptionId))
  result = call_597917.call(path_597918, query_597919, nil, nil, body_597920)

var webAppsCreateOrUpdateVnetConnectionSlot* = Call_WebAppsCreateOrUpdateVnetConnectionSlot_597906(
    name: "webAppsCreateOrUpdateVnetConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionSlot_597907, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnectionSlot_597908,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionSlot_597893 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnectionSlot_597895(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionSlot_597894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597896 = path.getOrDefault("resourceGroupName")
  valid_597896 = validateParameter(valid_597896, JString, required = true,
                                 default = nil)
  if valid_597896 != nil:
    section.add "resourceGroupName", valid_597896
  var valid_597897 = path.getOrDefault("name")
  valid_597897 = validateParameter(valid_597897, JString, required = true,
                                 default = nil)
  if valid_597897 != nil:
    section.add "name", valid_597897
  var valid_597898 = path.getOrDefault("vnetName")
  valid_597898 = validateParameter(valid_597898, JString, required = true,
                                 default = nil)
  if valid_597898 != nil:
    section.add "vnetName", valid_597898
  var valid_597899 = path.getOrDefault("slot")
  valid_597899 = validateParameter(valid_597899, JString, required = true,
                                 default = nil)
  if valid_597899 != nil:
    section.add "slot", valid_597899
  var valid_597900 = path.getOrDefault("subscriptionId")
  valid_597900 = validateParameter(valid_597900, JString, required = true,
                                 default = nil)
  if valid_597900 != nil:
    section.add "subscriptionId", valid_597900
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597901 = query.getOrDefault("api-version")
  valid_597901 = validateParameter(valid_597901, JString, required = true,
                                 default = nil)
  if valid_597901 != nil:
    section.add "api-version", valid_597901
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597902: Call_WebAppsGetVnetConnectionSlot_597893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_597902.validator(path, query, header, formData, body)
  let scheme = call_597902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597902.url(scheme.get, call_597902.host, call_597902.base,
                         call_597902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597902, url, valid)

proc call*(call_597903: Call_WebAppsGetVnetConnectionSlot_597893;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionSlot
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597904 = newJObject()
  var query_597905 = newJObject()
  add(path_597904, "resourceGroupName", newJString(resourceGroupName))
  add(query_597905, "api-version", newJString(apiVersion))
  add(path_597904, "name", newJString(name))
  add(path_597904, "vnetName", newJString(vnetName))
  add(path_597904, "slot", newJString(slot))
  add(path_597904, "subscriptionId", newJString(subscriptionId))
  result = call_597903.call(path_597904, query_597905, nil, nil, nil)

var webAppsGetVnetConnectionSlot* = Call_WebAppsGetVnetConnectionSlot_597893(
    name: "webAppsGetVnetConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnectionSlot_597894, base: "",
    url: url_WebAppsGetVnetConnectionSlot_597895, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionSlot_597934 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnectionSlot_597936(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionSlot_597935(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597937 = path.getOrDefault("resourceGroupName")
  valid_597937 = validateParameter(valid_597937, JString, required = true,
                                 default = nil)
  if valid_597937 != nil:
    section.add "resourceGroupName", valid_597937
  var valid_597938 = path.getOrDefault("name")
  valid_597938 = validateParameter(valid_597938, JString, required = true,
                                 default = nil)
  if valid_597938 != nil:
    section.add "name", valid_597938
  var valid_597939 = path.getOrDefault("vnetName")
  valid_597939 = validateParameter(valid_597939, JString, required = true,
                                 default = nil)
  if valid_597939 != nil:
    section.add "vnetName", valid_597939
  var valid_597940 = path.getOrDefault("slot")
  valid_597940 = validateParameter(valid_597940, JString, required = true,
                                 default = nil)
  if valid_597940 != nil:
    section.add "slot", valid_597940
  var valid_597941 = path.getOrDefault("subscriptionId")
  valid_597941 = validateParameter(valid_597941, JString, required = true,
                                 default = nil)
  if valid_597941 != nil:
    section.add "subscriptionId", valid_597941
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597942 = query.getOrDefault("api-version")
  valid_597942 = validateParameter(valid_597942, JString, required = true,
                                 default = nil)
  if valid_597942 != nil:
    section.add "api-version", valid_597942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597944: Call_WebAppsUpdateVnetConnectionSlot_597934;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_597944.validator(path, query, header, formData, body)
  let scheme = call_597944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597944.url(scheme.get, call_597944.host, call_597944.base,
                         call_597944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597944, url, valid)

proc call*(call_597945: Call_WebAppsUpdateVnetConnectionSlot_597934;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597946 = newJObject()
  var query_597947 = newJObject()
  var body_597948 = newJObject()
  add(path_597946, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597948 = connectionEnvelope
  add(path_597946, "name", newJString(name))
  add(path_597946, "vnetName", newJString(vnetName))
  add(query_597947, "api-version", newJString(apiVersion))
  add(path_597946, "slot", newJString(slot))
  add(path_597946, "subscriptionId", newJString(subscriptionId))
  result = call_597945.call(path_597946, query_597947, nil, nil, body_597948)

var webAppsUpdateVnetConnectionSlot* = Call_WebAppsUpdateVnetConnectionSlot_597934(
    name: "webAppsUpdateVnetConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnectionSlot_597935, base: "",
    url: url_WebAppsUpdateVnetConnectionSlot_597936, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnectionSlot_597921 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteVnetConnectionSlot_597923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnectionSlot_597922(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597924 = path.getOrDefault("resourceGroupName")
  valid_597924 = validateParameter(valid_597924, JString, required = true,
                                 default = nil)
  if valid_597924 != nil:
    section.add "resourceGroupName", valid_597924
  var valid_597925 = path.getOrDefault("name")
  valid_597925 = validateParameter(valid_597925, JString, required = true,
                                 default = nil)
  if valid_597925 != nil:
    section.add "name", valid_597925
  var valid_597926 = path.getOrDefault("vnetName")
  valid_597926 = validateParameter(valid_597926, JString, required = true,
                                 default = nil)
  if valid_597926 != nil:
    section.add "vnetName", valid_597926
  var valid_597927 = path.getOrDefault("slot")
  valid_597927 = validateParameter(valid_597927, JString, required = true,
                                 default = nil)
  if valid_597927 != nil:
    section.add "slot", valid_597927
  var valid_597928 = path.getOrDefault("subscriptionId")
  valid_597928 = validateParameter(valid_597928, JString, required = true,
                                 default = nil)
  if valid_597928 != nil:
    section.add "subscriptionId", valid_597928
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597929 = query.getOrDefault("api-version")
  valid_597929 = validateParameter(valid_597929, JString, required = true,
                                 default = nil)
  if valid_597929 != nil:
    section.add "api-version", valid_597929
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597930: Call_WebAppsDeleteVnetConnectionSlot_597921;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_597930.validator(path, query, header, formData, body)
  let scheme = call_597930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597930.url(scheme.get, call_597930.host, call_597930.base,
                         call_597930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597930, url, valid)

proc call*(call_597931: Call_WebAppsDeleteVnetConnectionSlot_597921;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnectionSlot
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597932 = newJObject()
  var query_597933 = newJObject()
  add(path_597932, "resourceGroupName", newJString(resourceGroupName))
  add(query_597933, "api-version", newJString(apiVersion))
  add(path_597932, "name", newJString(name))
  add(path_597932, "vnetName", newJString(vnetName))
  add(path_597932, "slot", newJString(slot))
  add(path_597932, "subscriptionId", newJString(subscriptionId))
  result = call_597931.call(path_597932, query_597933, nil, nil, nil)

var webAppsDeleteVnetConnectionSlot* = Call_WebAppsDeleteVnetConnectionSlot_597921(
    name: "webAppsDeleteVnetConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnectionSlot_597922, base: "",
    url: url_WebAppsDeleteVnetConnectionSlot_597923, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597963 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597965(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597964(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597966 = path.getOrDefault("resourceGroupName")
  valid_597966 = validateParameter(valid_597966, JString, required = true,
                                 default = nil)
  if valid_597966 != nil:
    section.add "resourceGroupName", valid_597966
  var valid_597967 = path.getOrDefault("name")
  valid_597967 = validateParameter(valid_597967, JString, required = true,
                                 default = nil)
  if valid_597967 != nil:
    section.add "name", valid_597967
  var valid_597968 = path.getOrDefault("vnetName")
  valid_597968 = validateParameter(valid_597968, JString, required = true,
                                 default = nil)
  if valid_597968 != nil:
    section.add "vnetName", valid_597968
  var valid_597969 = path.getOrDefault("slot")
  valid_597969 = validateParameter(valid_597969, JString, required = true,
                                 default = nil)
  if valid_597969 != nil:
    section.add "slot", valid_597969
  var valid_597970 = path.getOrDefault("gatewayName")
  valid_597970 = validateParameter(valid_597970, JString, required = true,
                                 default = nil)
  if valid_597970 != nil:
    section.add "gatewayName", valid_597970
  var valid_597971 = path.getOrDefault("subscriptionId")
  valid_597971 = validateParameter(valid_597971, JString, required = true,
                                 default = nil)
  if valid_597971 != nil:
    section.add "subscriptionId", valid_597971
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597972 = query.getOrDefault("api-version")
  valid_597972 = validateParameter(valid_597972, JString, required = true,
                                 default = nil)
  if valid_597972 != nil:
    section.add "api-version", valid_597972
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597974: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597963;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_597974.validator(path, query, header, formData, body)
  let scheme = call_597974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597974.url(scheme.get, call_597974.host, call_597974.base,
                         call_597974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597974, url, valid)

proc call*(call_597975: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597963;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597976 = newJObject()
  var query_597977 = newJObject()
  var body_597978 = newJObject()
  add(path_597976, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597978 = connectionEnvelope
  add(path_597976, "name", newJString(name))
  add(path_597976, "vnetName", newJString(vnetName))
  add(query_597977, "api-version", newJString(apiVersion))
  add(path_597976, "slot", newJString(slot))
  add(path_597976, "gatewayName", newJString(gatewayName))
  add(path_597976, "subscriptionId", newJString(subscriptionId))
  result = call_597975.call(path_597976, query_597977, nil, nil, body_597978)

var webAppsCreateOrUpdateVnetConnectionGatewaySlot* = Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597963(
    name: "webAppsCreateOrUpdateVnetConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597964,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597965,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGatewaySlot_597949 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnectionGatewaySlot_597951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGatewaySlot_597950(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597952 = path.getOrDefault("resourceGroupName")
  valid_597952 = validateParameter(valid_597952, JString, required = true,
                                 default = nil)
  if valid_597952 != nil:
    section.add "resourceGroupName", valid_597952
  var valid_597953 = path.getOrDefault("name")
  valid_597953 = validateParameter(valid_597953, JString, required = true,
                                 default = nil)
  if valid_597953 != nil:
    section.add "name", valid_597953
  var valid_597954 = path.getOrDefault("vnetName")
  valid_597954 = validateParameter(valid_597954, JString, required = true,
                                 default = nil)
  if valid_597954 != nil:
    section.add "vnetName", valid_597954
  var valid_597955 = path.getOrDefault("slot")
  valid_597955 = validateParameter(valid_597955, JString, required = true,
                                 default = nil)
  if valid_597955 != nil:
    section.add "slot", valid_597955
  var valid_597956 = path.getOrDefault("gatewayName")
  valid_597956 = validateParameter(valid_597956, JString, required = true,
                                 default = nil)
  if valid_597956 != nil:
    section.add "gatewayName", valid_597956
  var valid_597957 = path.getOrDefault("subscriptionId")
  valid_597957 = validateParameter(valid_597957, JString, required = true,
                                 default = nil)
  if valid_597957 != nil:
    section.add "subscriptionId", valid_597957
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597958 = query.getOrDefault("api-version")
  valid_597958 = validateParameter(valid_597958, JString, required = true,
                                 default = nil)
  if valid_597958 != nil:
    section.add "api-version", valid_597958
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597959: Call_WebAppsGetVnetConnectionGatewaySlot_597949;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_597959.validator(path, query, header, formData, body)
  let scheme = call_597959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597959.url(scheme.get, call_597959.host, call_597959.base,
                         call_597959.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597959, url, valid)

proc call*(call_597960: Call_WebAppsGetVnetConnectionGatewaySlot_597949;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGatewaySlot
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597961 = newJObject()
  var query_597962 = newJObject()
  add(path_597961, "resourceGroupName", newJString(resourceGroupName))
  add(query_597962, "api-version", newJString(apiVersion))
  add(path_597961, "name", newJString(name))
  add(path_597961, "vnetName", newJString(vnetName))
  add(path_597961, "slot", newJString(slot))
  add(path_597961, "gatewayName", newJString(gatewayName))
  add(path_597961, "subscriptionId", newJString(subscriptionId))
  result = call_597960.call(path_597961, query_597962, nil, nil, nil)

var webAppsGetVnetConnectionGatewaySlot* = Call_WebAppsGetVnetConnectionGatewaySlot_597949(
    name: "webAppsGetVnetConnectionGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGatewaySlot_597950, base: "",
    url: url_WebAppsGetVnetConnectionGatewaySlot_597951, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGatewaySlot_597979 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnectionGatewaySlot_597981(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGatewaySlot_597980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597982 = path.getOrDefault("resourceGroupName")
  valid_597982 = validateParameter(valid_597982, JString, required = true,
                                 default = nil)
  if valid_597982 != nil:
    section.add "resourceGroupName", valid_597982
  var valid_597983 = path.getOrDefault("name")
  valid_597983 = validateParameter(valid_597983, JString, required = true,
                                 default = nil)
  if valid_597983 != nil:
    section.add "name", valid_597983
  var valid_597984 = path.getOrDefault("vnetName")
  valid_597984 = validateParameter(valid_597984, JString, required = true,
                                 default = nil)
  if valid_597984 != nil:
    section.add "vnetName", valid_597984
  var valid_597985 = path.getOrDefault("slot")
  valid_597985 = validateParameter(valid_597985, JString, required = true,
                                 default = nil)
  if valid_597985 != nil:
    section.add "slot", valid_597985
  var valid_597986 = path.getOrDefault("gatewayName")
  valid_597986 = validateParameter(valid_597986, JString, required = true,
                                 default = nil)
  if valid_597986 != nil:
    section.add "gatewayName", valid_597986
  var valid_597987 = path.getOrDefault("subscriptionId")
  valid_597987 = validateParameter(valid_597987, JString, required = true,
                                 default = nil)
  if valid_597987 != nil:
    section.add "subscriptionId", valid_597987
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597988 = query.getOrDefault("api-version")
  valid_597988 = validateParameter(valid_597988, JString, required = true,
                                 default = nil)
  if valid_597988 != nil:
    section.add "api-version", valid_597988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597990: Call_WebAppsUpdateVnetConnectionGatewaySlot_597979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_597990.validator(path, query, header, formData, body)
  let scheme = call_597990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597990.url(scheme.get, call_597990.host, call_597990.base,
                         call_597990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597990, url, valid)

proc call*(call_597991: Call_WebAppsUpdateVnetConnectionGatewaySlot_597979;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597992 = newJObject()
  var query_597993 = newJObject()
  var body_597994 = newJObject()
  add(path_597992, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597994 = connectionEnvelope
  add(path_597992, "name", newJString(name))
  add(path_597992, "vnetName", newJString(vnetName))
  add(query_597993, "api-version", newJString(apiVersion))
  add(path_597992, "slot", newJString(slot))
  add(path_597992, "gatewayName", newJString(gatewayName))
  add(path_597992, "subscriptionId", newJString(subscriptionId))
  result = call_597991.call(path_597992, query_597993, nil, nil, body_597994)

var webAppsUpdateVnetConnectionGatewaySlot* = Call_WebAppsUpdateVnetConnectionGatewaySlot_597979(
    name: "webAppsUpdateVnetConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGatewaySlot_597980, base: "",
    url: url_WebAppsUpdateVnetConnectionGatewaySlot_597981,
    schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobsSlot_597995 = ref object of OpenApiRestCall_593437
proc url_WebAppsListWebJobsSlot_597997(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobsSlot_597996(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597998 = path.getOrDefault("resourceGroupName")
  valid_597998 = validateParameter(valid_597998, JString, required = true,
                                 default = nil)
  if valid_597998 != nil:
    section.add "resourceGroupName", valid_597998
  var valid_597999 = path.getOrDefault("name")
  valid_597999 = validateParameter(valid_597999, JString, required = true,
                                 default = nil)
  if valid_597999 != nil:
    section.add "name", valid_597999
  var valid_598000 = path.getOrDefault("slot")
  valid_598000 = validateParameter(valid_598000, JString, required = true,
                                 default = nil)
  if valid_598000 != nil:
    section.add "slot", valid_598000
  var valid_598001 = path.getOrDefault("subscriptionId")
  valid_598001 = validateParameter(valid_598001, JString, required = true,
                                 default = nil)
  if valid_598001 != nil:
    section.add "subscriptionId", valid_598001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598002 = query.getOrDefault("api-version")
  valid_598002 = validateParameter(valid_598002, JString, required = true,
                                 default = nil)
  if valid_598002 != nil:
    section.add "api-version", valid_598002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598003: Call_WebAppsListWebJobsSlot_597995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_598003.validator(path, query, header, formData, body)
  let scheme = call_598003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598003.url(scheme.get, call_598003.host, call_598003.base,
                         call_598003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598003, url, valid)

proc call*(call_598004: Call_WebAppsListWebJobsSlot_597995;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListWebJobsSlot
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598005 = newJObject()
  var query_598006 = newJObject()
  add(path_598005, "resourceGroupName", newJString(resourceGroupName))
  add(query_598006, "api-version", newJString(apiVersion))
  add(path_598005, "name", newJString(name))
  add(path_598005, "slot", newJString(slot))
  add(path_598005, "subscriptionId", newJString(subscriptionId))
  result = call_598004.call(path_598005, query_598006, nil, nil, nil)

var webAppsListWebJobsSlot* = Call_WebAppsListWebJobsSlot_597995(
    name: "webAppsListWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    validator: validate_WebAppsListWebJobsSlot_597996, base: "",
    url: url_WebAppsListWebJobsSlot_597997, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJobSlot_598007 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebJobSlot_598009(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJobSlot_598008(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598010 = path.getOrDefault("resourceGroupName")
  valid_598010 = validateParameter(valid_598010, JString, required = true,
                                 default = nil)
  if valid_598010 != nil:
    section.add "resourceGroupName", valid_598010
  var valid_598011 = path.getOrDefault("name")
  valid_598011 = validateParameter(valid_598011, JString, required = true,
                                 default = nil)
  if valid_598011 != nil:
    section.add "name", valid_598011
  var valid_598012 = path.getOrDefault("slot")
  valid_598012 = validateParameter(valid_598012, JString, required = true,
                                 default = nil)
  if valid_598012 != nil:
    section.add "slot", valid_598012
  var valid_598013 = path.getOrDefault("subscriptionId")
  valid_598013 = validateParameter(valid_598013, JString, required = true,
                                 default = nil)
  if valid_598013 != nil:
    section.add "subscriptionId", valid_598013
  var valid_598014 = path.getOrDefault("webJobName")
  valid_598014 = validateParameter(valid_598014, JString, required = true,
                                 default = nil)
  if valid_598014 != nil:
    section.add "webJobName", valid_598014
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598015 = query.getOrDefault("api-version")
  valid_598015 = validateParameter(valid_598015, JString, required = true,
                                 default = nil)
  if valid_598015 != nil:
    section.add "api-version", valid_598015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598016: Call_WebAppsGetWebJobSlot_598007; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_598016.validator(path, query, header, formData, body)
  let scheme = call_598016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598016.url(scheme.get, call_598016.host, call_598016.base,
                         call_598016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598016, url, valid)

proc call*(call_598017: Call_WebAppsGetWebJobSlot_598007;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJobSlot
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_598018 = newJObject()
  var query_598019 = newJObject()
  add(path_598018, "resourceGroupName", newJString(resourceGroupName))
  add(query_598019, "api-version", newJString(apiVersion))
  add(path_598018, "name", newJString(name))
  add(path_598018, "slot", newJString(slot))
  add(path_598018, "subscriptionId", newJString(subscriptionId))
  add(path_598018, "webJobName", newJString(webJobName))
  result = call_598017.call(path_598018, query_598019, nil, nil, nil)

var webAppsGetWebJobSlot* = Call_WebAppsGetWebJobSlot_598007(
    name: "webAppsGetWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJobSlot_598008, base: "",
    url: url_WebAppsGetWebJobSlot_598009, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesFromProduction_598020 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlotDifferencesFromProduction_598022(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesFromProduction_598021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598023 = path.getOrDefault("resourceGroupName")
  valid_598023 = validateParameter(valid_598023, JString, required = true,
                                 default = nil)
  if valid_598023 != nil:
    section.add "resourceGroupName", valid_598023
  var valid_598024 = path.getOrDefault("name")
  valid_598024 = validateParameter(valid_598024, JString, required = true,
                                 default = nil)
  if valid_598024 != nil:
    section.add "name", valid_598024
  var valid_598025 = path.getOrDefault("subscriptionId")
  valid_598025 = validateParameter(valid_598025, JString, required = true,
                                 default = nil)
  if valid_598025 != nil:
    section.add "subscriptionId", valid_598025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598026 = query.getOrDefault("api-version")
  valid_598026 = validateParameter(valid_598026, JString, required = true,
                                 default = nil)
  if valid_598026 != nil:
    section.add "api-version", valid_598026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598028: Call_WebAppsListSlotDifferencesFromProduction_598020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_598028.validator(path, query, header, formData, body)
  let scheme = call_598028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598028.url(scheme.get, call_598028.host, call_598028.base,
                         call_598028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598028, url, valid)

proc call*(call_598029: Call_WebAppsListSlotDifferencesFromProduction_598020;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesFromProduction
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_598030 = newJObject()
  var query_598031 = newJObject()
  var body_598032 = newJObject()
  add(path_598030, "resourceGroupName", newJString(resourceGroupName))
  add(query_598031, "api-version", newJString(apiVersion))
  add(path_598030, "name", newJString(name))
  add(path_598030, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_598032 = slotSwapEntity
  result = call_598029.call(path_598030, query_598031, nil, nil, body_598032)

var webAppsListSlotDifferencesFromProduction* = Call_WebAppsListSlotDifferencesFromProduction_598020(
    name: "webAppsListSlotDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesFromProduction_598021, base: "",
    url: url_WebAppsListSlotDifferencesFromProduction_598022,
    schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotWithProduction_598033 = ref object of OpenApiRestCall_593437
proc url_WebAppsSwapSlotWithProduction_598035(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotWithProduction_598034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598036 = path.getOrDefault("resourceGroupName")
  valid_598036 = validateParameter(valid_598036, JString, required = true,
                                 default = nil)
  if valid_598036 != nil:
    section.add "resourceGroupName", valid_598036
  var valid_598037 = path.getOrDefault("name")
  valid_598037 = validateParameter(valid_598037, JString, required = true,
                                 default = nil)
  if valid_598037 != nil:
    section.add "name", valid_598037
  var valid_598038 = path.getOrDefault("subscriptionId")
  valid_598038 = validateParameter(valid_598038, JString, required = true,
                                 default = nil)
  if valid_598038 != nil:
    section.add "subscriptionId", valid_598038
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598039 = query.getOrDefault("api-version")
  valid_598039 = validateParameter(valid_598039, JString, required = true,
                                 default = nil)
  if valid_598039 != nil:
    section.add "api-version", valid_598039
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598041: Call_WebAppsSwapSlotWithProduction_598033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_598041.validator(path, query, header, formData, body)
  let scheme = call_598041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598041.url(scheme.get, call_598041.host, call_598041.base,
                         call_598041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598041, url, valid)

proc call*(call_598042: Call_WebAppsSwapSlotWithProduction_598033;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotWithProduction
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_598043 = newJObject()
  var query_598044 = newJObject()
  var body_598045 = newJObject()
  add(path_598043, "resourceGroupName", newJString(resourceGroupName))
  add(query_598044, "api-version", newJString(apiVersion))
  add(path_598043, "name", newJString(name))
  add(path_598043, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_598045 = slotSwapEntity
  result = call_598042.call(path_598043, query_598044, nil, nil, body_598045)

var webAppsSwapSlotWithProduction* = Call_WebAppsSwapSlotWithProduction_598033(
    name: "webAppsSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_WebAppsSwapSlotWithProduction_598034, base: "",
    url: url_WebAppsSwapSlotWithProduction_598035, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshots_598046 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSnapshots_598048(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshots_598047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598049 = path.getOrDefault("resourceGroupName")
  valid_598049 = validateParameter(valid_598049, JString, required = true,
                                 default = nil)
  if valid_598049 != nil:
    section.add "resourceGroupName", valid_598049
  var valid_598050 = path.getOrDefault("name")
  valid_598050 = validateParameter(valid_598050, JString, required = true,
                                 default = nil)
  if valid_598050 != nil:
    section.add "name", valid_598050
  var valid_598051 = path.getOrDefault("subscriptionId")
  valid_598051 = validateParameter(valid_598051, JString, required = true,
                                 default = nil)
  if valid_598051 != nil:
    section.add "subscriptionId", valid_598051
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598052 = query.getOrDefault("api-version")
  valid_598052 = validateParameter(valid_598052, JString, required = true,
                                 default = nil)
  if valid_598052 != nil:
    section.add "api-version", valid_598052
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598053: Call_WebAppsListSnapshots_598046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_598053.validator(path, query, header, formData, body)
  let scheme = call_598053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598053.url(scheme.get, call_598053.host, call_598053.base,
                         call_598053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598053, url, valid)

proc call*(call_598054: Call_WebAppsListSnapshots_598046;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshots
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598055 = newJObject()
  var query_598056 = newJObject()
  add(path_598055, "resourceGroupName", newJString(resourceGroupName))
  add(query_598056, "api-version", newJString(apiVersion))
  add(path_598055, "name", newJString(name))
  add(path_598055, "subscriptionId", newJString(subscriptionId))
  result = call_598054.call(path_598055, query_598056, nil, nil, nil)

var webAppsListSnapshots* = Call_WebAppsListSnapshots_598046(
    name: "webAppsListSnapshots", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_WebAppsListSnapshots_598047, base: "",
    url: url_WebAppsListSnapshots_598048, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsFromDRSecondary_598057 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSnapshotsFromDRSecondary_598059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshotsdr")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsFromDRSecondary_598058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598060 = path.getOrDefault("resourceGroupName")
  valid_598060 = validateParameter(valid_598060, JString, required = true,
                                 default = nil)
  if valid_598060 != nil:
    section.add "resourceGroupName", valid_598060
  var valid_598061 = path.getOrDefault("name")
  valid_598061 = validateParameter(valid_598061, JString, required = true,
                                 default = nil)
  if valid_598061 != nil:
    section.add "name", valid_598061
  var valid_598062 = path.getOrDefault("subscriptionId")
  valid_598062 = validateParameter(valid_598062, JString, required = true,
                                 default = nil)
  if valid_598062 != nil:
    section.add "subscriptionId", valid_598062
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598063 = query.getOrDefault("api-version")
  valid_598063 = validateParameter(valid_598063, JString, required = true,
                                 default = nil)
  if valid_598063 != nil:
    section.add "api-version", valid_598063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598064: Call_WebAppsListSnapshotsFromDRSecondary_598057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  let valid = call_598064.validator(path, query, header, formData, body)
  let scheme = call_598064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598064.url(scheme.get, call_598064.host, call_598064.base,
                         call_598064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598064, url, valid)

proc call*(call_598065: Call_WebAppsListSnapshotsFromDRSecondary_598057;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsFromDRSecondary
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598066 = newJObject()
  var query_598067 = newJObject()
  add(path_598066, "resourceGroupName", newJString(resourceGroupName))
  add(query_598067, "api-version", newJString(apiVersion))
  add(path_598066, "name", newJString(name))
  add(path_598066, "subscriptionId", newJString(subscriptionId))
  result = call_598065.call(path_598066, query_598067, nil, nil, nil)

var webAppsListSnapshotsFromDRSecondary* = Call_WebAppsListSnapshotsFromDRSecondary_598057(
    name: "webAppsListSnapshotsFromDRSecondary", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
    validator: validate_WebAppsListSnapshotsFromDRSecondary_598058, base: "",
    url: url_WebAppsListSnapshotsFromDRSecondary_598059, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControl_598079 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSourceControl_598081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControl_598080(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598082 = path.getOrDefault("resourceGroupName")
  valid_598082 = validateParameter(valid_598082, JString, required = true,
                                 default = nil)
  if valid_598082 != nil:
    section.add "resourceGroupName", valid_598082
  var valid_598083 = path.getOrDefault("name")
  valid_598083 = validateParameter(valid_598083, JString, required = true,
                                 default = nil)
  if valid_598083 != nil:
    section.add "name", valid_598083
  var valid_598084 = path.getOrDefault("subscriptionId")
  valid_598084 = validateParameter(valid_598084, JString, required = true,
                                 default = nil)
  if valid_598084 != nil:
    section.add "subscriptionId", valid_598084
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598085 = query.getOrDefault("api-version")
  valid_598085 = validateParameter(valid_598085, JString, required = true,
                                 default = nil)
  if valid_598085 != nil:
    section.add "api-version", valid_598085
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598087: Call_WebAppsCreateOrUpdateSourceControl_598079;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_598087.validator(path, query, header, formData, body)
  let scheme = call_598087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598087.url(scheme.get, call_598087.host, call_598087.base,
                         call_598087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598087, url, valid)

proc call*(call_598088: Call_WebAppsCreateOrUpdateSourceControl_598079;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_598089 = newJObject()
  var query_598090 = newJObject()
  var body_598091 = newJObject()
  add(path_598089, "resourceGroupName", newJString(resourceGroupName))
  add(query_598090, "api-version", newJString(apiVersion))
  add(path_598089, "name", newJString(name))
  add(path_598089, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_598091 = siteSourceControl
  result = call_598088.call(path_598089, query_598090, nil, nil, body_598091)

var webAppsCreateOrUpdateSourceControl* = Call_WebAppsCreateOrUpdateSourceControl_598079(
    name: "webAppsCreateOrUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControl_598080, base: "",
    url: url_WebAppsCreateOrUpdateSourceControl_598081, schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControl_598068 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSourceControl_598070(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControl_598069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598071 = path.getOrDefault("resourceGroupName")
  valid_598071 = validateParameter(valid_598071, JString, required = true,
                                 default = nil)
  if valid_598071 != nil:
    section.add "resourceGroupName", valid_598071
  var valid_598072 = path.getOrDefault("name")
  valid_598072 = validateParameter(valid_598072, JString, required = true,
                                 default = nil)
  if valid_598072 != nil:
    section.add "name", valid_598072
  var valid_598073 = path.getOrDefault("subscriptionId")
  valid_598073 = validateParameter(valid_598073, JString, required = true,
                                 default = nil)
  if valid_598073 != nil:
    section.add "subscriptionId", valid_598073
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598074 = query.getOrDefault("api-version")
  valid_598074 = validateParameter(valid_598074, JString, required = true,
                                 default = nil)
  if valid_598074 != nil:
    section.add "api-version", valid_598074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598075: Call_WebAppsGetSourceControl_598068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_598075.validator(path, query, header, formData, body)
  let scheme = call_598075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598075.url(scheme.get, call_598075.host, call_598075.base,
                         call_598075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598075, url, valid)

proc call*(call_598076: Call_WebAppsGetSourceControl_598068;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControl
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598077 = newJObject()
  var query_598078 = newJObject()
  add(path_598077, "resourceGroupName", newJString(resourceGroupName))
  add(query_598078, "api-version", newJString(apiVersion))
  add(path_598077, "name", newJString(name))
  add(path_598077, "subscriptionId", newJString(subscriptionId))
  result = call_598076.call(path_598077, query_598078, nil, nil, nil)

var webAppsGetSourceControl* = Call_WebAppsGetSourceControl_598068(
    name: "webAppsGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControl_598069, base: "",
    url: url_WebAppsGetSourceControl_598070, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControl_598103 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSourceControl_598105(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControl_598104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598106 = path.getOrDefault("resourceGroupName")
  valid_598106 = validateParameter(valid_598106, JString, required = true,
                                 default = nil)
  if valid_598106 != nil:
    section.add "resourceGroupName", valid_598106
  var valid_598107 = path.getOrDefault("name")
  valid_598107 = validateParameter(valid_598107, JString, required = true,
                                 default = nil)
  if valid_598107 != nil:
    section.add "name", valid_598107
  var valid_598108 = path.getOrDefault("subscriptionId")
  valid_598108 = validateParameter(valid_598108, JString, required = true,
                                 default = nil)
  if valid_598108 != nil:
    section.add "subscriptionId", valid_598108
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598109 = query.getOrDefault("api-version")
  valid_598109 = validateParameter(valid_598109, JString, required = true,
                                 default = nil)
  if valid_598109 != nil:
    section.add "api-version", valid_598109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598111: Call_WebAppsUpdateSourceControl_598103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_598111.validator(path, query, header, formData, body)
  let scheme = call_598111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598111.url(scheme.get, call_598111.host, call_598111.base,
                         call_598111.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598111, url, valid)

proc call*(call_598112: Call_WebAppsUpdateSourceControl_598103;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_598113 = newJObject()
  var query_598114 = newJObject()
  var body_598115 = newJObject()
  add(path_598113, "resourceGroupName", newJString(resourceGroupName))
  add(query_598114, "api-version", newJString(apiVersion))
  add(path_598113, "name", newJString(name))
  add(path_598113, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_598115 = siteSourceControl
  result = call_598112.call(path_598113, query_598114, nil, nil, body_598115)

var webAppsUpdateSourceControl* = Call_WebAppsUpdateSourceControl_598103(
    name: "webAppsUpdateSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControl_598104, base: "",
    url: url_WebAppsUpdateSourceControl_598105, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControl_598092 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSourceControl_598094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControl_598093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598095 = path.getOrDefault("resourceGroupName")
  valid_598095 = validateParameter(valid_598095, JString, required = true,
                                 default = nil)
  if valid_598095 != nil:
    section.add "resourceGroupName", valid_598095
  var valid_598096 = path.getOrDefault("name")
  valid_598096 = validateParameter(valid_598096, JString, required = true,
                                 default = nil)
  if valid_598096 != nil:
    section.add "name", valid_598096
  var valid_598097 = path.getOrDefault("subscriptionId")
  valid_598097 = validateParameter(valid_598097, JString, required = true,
                                 default = nil)
  if valid_598097 != nil:
    section.add "subscriptionId", valid_598097
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598098 = query.getOrDefault("api-version")
  valid_598098 = validateParameter(valid_598098, JString, required = true,
                                 default = nil)
  if valid_598098 != nil:
    section.add "api-version", valid_598098
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598099: Call_WebAppsDeleteSourceControl_598092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_598099.validator(path, query, header, formData, body)
  let scheme = call_598099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598099.url(scheme.get, call_598099.host, call_598099.base,
                         call_598099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598099, url, valid)

proc call*(call_598100: Call_WebAppsDeleteSourceControl_598092;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControl
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598101 = newJObject()
  var query_598102 = newJObject()
  add(path_598101, "resourceGroupName", newJString(resourceGroupName))
  add(query_598102, "api-version", newJString(apiVersion))
  add(path_598101, "name", newJString(name))
  add(path_598101, "subscriptionId", newJString(subscriptionId))
  result = call_598100.call(path_598101, query_598102, nil, nil, nil)

var webAppsDeleteSourceControl* = Call_WebAppsDeleteSourceControl_598092(
    name: "webAppsDeleteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControl_598093, base: "",
    url: url_WebAppsDeleteSourceControl_598094, schemes: {Scheme.Https})
type
  Call_WebAppsStart_598116 = ref object of OpenApiRestCall_593437
proc url_WebAppsStart_598118(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStart_598117(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598119 = path.getOrDefault("resourceGroupName")
  valid_598119 = validateParameter(valid_598119, JString, required = true,
                                 default = nil)
  if valid_598119 != nil:
    section.add "resourceGroupName", valid_598119
  var valid_598120 = path.getOrDefault("name")
  valid_598120 = validateParameter(valid_598120, JString, required = true,
                                 default = nil)
  if valid_598120 != nil:
    section.add "name", valid_598120
  var valid_598121 = path.getOrDefault("subscriptionId")
  valid_598121 = validateParameter(valid_598121, JString, required = true,
                                 default = nil)
  if valid_598121 != nil:
    section.add "subscriptionId", valid_598121
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598122 = query.getOrDefault("api-version")
  valid_598122 = validateParameter(valid_598122, JString, required = true,
                                 default = nil)
  if valid_598122 != nil:
    section.add "api-version", valid_598122
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598123: Call_WebAppsStart_598116; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_598123.validator(path, query, header, formData, body)
  let scheme = call_598123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598123.url(scheme.get, call_598123.host, call_598123.base,
                         call_598123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598123, url, valid)

proc call*(call_598124: Call_WebAppsStart_598116; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStart
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598125 = newJObject()
  var query_598126 = newJObject()
  add(path_598125, "resourceGroupName", newJString(resourceGroupName))
  add(query_598126, "api-version", newJString(apiVersion))
  add(path_598125, "name", newJString(name))
  add(path_598125, "subscriptionId", newJString(subscriptionId))
  result = call_598124.call(path_598125, query_598126, nil, nil, nil)

var webAppsStart* = Call_WebAppsStart_598116(name: "webAppsStart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_WebAppsStart_598117, base: "", url: url_WebAppsStart_598118,
    schemes: {Scheme.Https})
type
  Call_WebAppsStartNetworkTrace_598127 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartNetworkTrace_598129(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/startNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartNetworkTrace_598128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598130 = path.getOrDefault("resourceGroupName")
  valid_598130 = validateParameter(valid_598130, JString, required = true,
                                 default = nil)
  if valid_598130 != nil:
    section.add "resourceGroupName", valid_598130
  var valid_598131 = path.getOrDefault("name")
  valid_598131 = validateParameter(valid_598131, JString, required = true,
                                 default = nil)
  if valid_598131 != nil:
    section.add "name", valid_598131
  var valid_598132 = path.getOrDefault("subscriptionId")
  valid_598132 = validateParameter(valid_598132, JString, required = true,
                                 default = nil)
  if valid_598132 != nil:
    section.add "subscriptionId", valid_598132
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598133 = query.getOrDefault("api-version")
  valid_598133 = validateParameter(valid_598133, JString, required = true,
                                 default = nil)
  if valid_598133 != nil:
    section.add "api-version", valid_598133
  var valid_598134 = query.getOrDefault("durationInSeconds")
  valid_598134 = validateParameter(valid_598134, JInt, required = false, default = nil)
  if valid_598134 != nil:
    section.add "durationInSeconds", valid_598134
  var valid_598135 = query.getOrDefault("maxFrameLength")
  valid_598135 = validateParameter(valid_598135, JInt, required = false, default = nil)
  if valid_598135 != nil:
    section.add "maxFrameLength", valid_598135
  var valid_598136 = query.getOrDefault("sasUrl")
  valid_598136 = validateParameter(valid_598136, JString, required = false,
                                 default = nil)
  if valid_598136 != nil:
    section.add "sasUrl", valid_598136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598137: Call_WebAppsStartNetworkTrace_598127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_598137.validator(path, query, header, formData, body)
  let scheme = call_598137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598137.url(scheme.get, call_598137.host, call_598137.base,
                         call_598137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598137, url, valid)

proc call*(call_598138: Call_WebAppsStartNetworkTrace_598127;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartNetworkTrace
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_598139 = newJObject()
  var query_598140 = newJObject()
  add(path_598139, "resourceGroupName", newJString(resourceGroupName))
  add(query_598140, "api-version", newJString(apiVersion))
  add(path_598139, "name", newJString(name))
  add(path_598139, "subscriptionId", newJString(subscriptionId))
  add(query_598140, "durationInSeconds", newJInt(durationInSeconds))
  add(query_598140, "maxFrameLength", newJInt(maxFrameLength))
  add(query_598140, "sasUrl", newJString(sasUrl))
  result = call_598138.call(path_598139, query_598140, nil, nil, nil)

var webAppsStartNetworkTrace* = Call_WebAppsStartNetworkTrace_598127(
    name: "webAppsStartNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
    validator: validate_WebAppsStartNetworkTrace_598128, base: "",
    url: url_WebAppsStartNetworkTrace_598129, schemes: {Scheme.Https})
type
  Call_WebAppsStop_598141 = ref object of OpenApiRestCall_593437
proc url_WebAppsStop_598143(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStop_598142(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598144 = path.getOrDefault("resourceGroupName")
  valid_598144 = validateParameter(valid_598144, JString, required = true,
                                 default = nil)
  if valid_598144 != nil:
    section.add "resourceGroupName", valid_598144
  var valid_598145 = path.getOrDefault("name")
  valid_598145 = validateParameter(valid_598145, JString, required = true,
                                 default = nil)
  if valid_598145 != nil:
    section.add "name", valid_598145
  var valid_598146 = path.getOrDefault("subscriptionId")
  valid_598146 = validateParameter(valid_598146, JString, required = true,
                                 default = nil)
  if valid_598146 != nil:
    section.add "subscriptionId", valid_598146
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598147 = query.getOrDefault("api-version")
  valid_598147 = validateParameter(valid_598147, JString, required = true,
                                 default = nil)
  if valid_598147 != nil:
    section.add "api-version", valid_598147
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598148: Call_WebAppsStop_598141; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_598148.validator(path, query, header, formData, body)
  let scheme = call_598148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598148.url(scheme.get, call_598148.host, call_598148.base,
                         call_598148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598148, url, valid)

proc call*(call_598149: Call_WebAppsStop_598141; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStop
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598150 = newJObject()
  var query_598151 = newJObject()
  add(path_598150, "resourceGroupName", newJString(resourceGroupName))
  add(query_598151, "api-version", newJString(apiVersion))
  add(path_598150, "name", newJString(name))
  add(path_598150, "subscriptionId", newJString(subscriptionId))
  result = call_598149.call(path_598150, query_598151, nil, nil, nil)

var webAppsStop* = Call_WebAppsStop_598141(name: "webAppsStop",
                                        meth: HttpMethod.HttpPost,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
                                        validator: validate_WebAppsStop_598142,
                                        base: "", url: url_WebAppsStop_598143,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsStopNetworkTrace_598152 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopNetworkTrace_598154(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stopNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopNetworkTrace_598153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598155 = path.getOrDefault("resourceGroupName")
  valid_598155 = validateParameter(valid_598155, JString, required = true,
                                 default = nil)
  if valid_598155 != nil:
    section.add "resourceGroupName", valid_598155
  var valid_598156 = path.getOrDefault("name")
  valid_598156 = validateParameter(valid_598156, JString, required = true,
                                 default = nil)
  if valid_598156 != nil:
    section.add "name", valid_598156
  var valid_598157 = path.getOrDefault("subscriptionId")
  valid_598157 = validateParameter(valid_598157, JString, required = true,
                                 default = nil)
  if valid_598157 != nil:
    section.add "subscriptionId", valid_598157
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598158 = query.getOrDefault("api-version")
  valid_598158 = validateParameter(valid_598158, JString, required = true,
                                 default = nil)
  if valid_598158 != nil:
    section.add "api-version", valid_598158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598159: Call_WebAppsStopNetworkTrace_598152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_598159.validator(path, query, header, formData, body)
  let scheme = call_598159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598159.url(scheme.get, call_598159.host, call_598159.base,
                         call_598159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598159, url, valid)

proc call*(call_598160: Call_WebAppsStopNetworkTrace_598152;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsStopNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598161 = newJObject()
  var query_598162 = newJObject()
  add(path_598161, "resourceGroupName", newJString(resourceGroupName))
  add(query_598162, "api-version", newJString(apiVersion))
  add(path_598161, "name", newJString(name))
  add(path_598161, "subscriptionId", newJString(subscriptionId))
  result = call_598160.call(path_598161, query_598162, nil, nil, nil)

var webAppsStopNetworkTrace* = Call_WebAppsStopNetworkTrace_598152(
    name: "webAppsStopNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
    validator: validate_WebAppsStopNetworkTrace_598153, base: "",
    url: url_WebAppsStopNetworkTrace_598154, schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepository_598163 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncRepository_598165(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepository_598164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598166 = path.getOrDefault("resourceGroupName")
  valid_598166 = validateParameter(valid_598166, JString, required = true,
                                 default = nil)
  if valid_598166 != nil:
    section.add "resourceGroupName", valid_598166
  var valid_598167 = path.getOrDefault("name")
  valid_598167 = validateParameter(valid_598167, JString, required = true,
                                 default = nil)
  if valid_598167 != nil:
    section.add "name", valid_598167
  var valid_598168 = path.getOrDefault("subscriptionId")
  valid_598168 = validateParameter(valid_598168, JString, required = true,
                                 default = nil)
  if valid_598168 != nil:
    section.add "subscriptionId", valid_598168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598169 = query.getOrDefault("api-version")
  valid_598169 = validateParameter(valid_598169, JString, required = true,
                                 default = nil)
  if valid_598169 != nil:
    section.add "api-version", valid_598169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598170: Call_WebAppsSyncRepository_598163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_598170.validator(path, query, header, formData, body)
  let scheme = call_598170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598170.url(scheme.get, call_598170.host, call_598170.base,
                         call_598170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598170, url, valid)

proc call*(call_598171: Call_WebAppsSyncRepository_598163;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepository
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598172 = newJObject()
  var query_598173 = newJObject()
  add(path_598172, "resourceGroupName", newJString(resourceGroupName))
  add(query_598173, "api-version", newJString(apiVersion))
  add(path_598172, "name", newJString(name))
  add(path_598172, "subscriptionId", newJString(subscriptionId))
  result = call_598171.call(path_598172, query_598173, nil, nil, nil)

var webAppsSyncRepository* = Call_WebAppsSyncRepository_598163(
    name: "webAppsSyncRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_WebAppsSyncRepository_598164, base: "",
    url: url_WebAppsSyncRepository_598165, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggers_598174 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncFunctionTriggers_598176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggers_598175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598177 = path.getOrDefault("resourceGroupName")
  valid_598177 = validateParameter(valid_598177, JString, required = true,
                                 default = nil)
  if valid_598177 != nil:
    section.add "resourceGroupName", valid_598177
  var valid_598178 = path.getOrDefault("name")
  valid_598178 = validateParameter(valid_598178, JString, required = true,
                                 default = nil)
  if valid_598178 != nil:
    section.add "name", valid_598178
  var valid_598179 = path.getOrDefault("subscriptionId")
  valid_598179 = validateParameter(valid_598179, JString, required = true,
                                 default = nil)
  if valid_598179 != nil:
    section.add "subscriptionId", valid_598179
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598180 = query.getOrDefault("api-version")
  valid_598180 = validateParameter(valid_598180, JString, required = true,
                                 default = nil)
  if valid_598180 != nil:
    section.add "api-version", valid_598180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598181: Call_WebAppsSyncFunctionTriggers_598174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_598181.validator(path, query, header, formData, body)
  let scheme = call_598181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598181.url(scheme.get, call_598181.host, call_598181.base,
                         call_598181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598181, url, valid)

proc call*(call_598182: Call_WebAppsSyncFunctionTriggers_598174;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggers
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598183 = newJObject()
  var query_598184 = newJObject()
  add(path_598183, "resourceGroupName", newJString(resourceGroupName))
  add(query_598184, "api-version", newJString(apiVersion))
  add(path_598183, "name", newJString(name))
  add(path_598183, "subscriptionId", newJString(subscriptionId))
  result = call_598182.call(path_598183, query_598184, nil, nil, nil)

var webAppsSyncFunctionTriggers* = Call_WebAppsSyncFunctionTriggers_598174(
    name: "webAppsSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggers_598175, base: "",
    url: url_WebAppsSyncFunctionTriggers_598176, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobs_598185 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobs_598187(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobs_598186(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598188 = path.getOrDefault("resourceGroupName")
  valid_598188 = validateParameter(valid_598188, JString, required = true,
                                 default = nil)
  if valid_598188 != nil:
    section.add "resourceGroupName", valid_598188
  var valid_598189 = path.getOrDefault("name")
  valid_598189 = validateParameter(valid_598189, JString, required = true,
                                 default = nil)
  if valid_598189 != nil:
    section.add "name", valid_598189
  var valid_598190 = path.getOrDefault("subscriptionId")
  valid_598190 = validateParameter(valid_598190, JString, required = true,
                                 default = nil)
  if valid_598190 != nil:
    section.add "subscriptionId", valid_598190
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598191 = query.getOrDefault("api-version")
  valid_598191 = validateParameter(valid_598191, JString, required = true,
                                 default = nil)
  if valid_598191 != nil:
    section.add "api-version", valid_598191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598192: Call_WebAppsListTriggeredWebJobs_598185; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_598192.validator(path, query, header, formData, body)
  let scheme = call_598192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598192.url(scheme.get, call_598192.host, call_598192.base,
                         call_598192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598192, url, valid)

proc call*(call_598193: Call_WebAppsListTriggeredWebJobs_598185;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobs
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598194 = newJObject()
  var query_598195 = newJObject()
  add(path_598194, "resourceGroupName", newJString(resourceGroupName))
  add(query_598195, "api-version", newJString(apiVersion))
  add(path_598194, "name", newJString(name))
  add(path_598194, "subscriptionId", newJString(subscriptionId))
  result = call_598193.call(path_598194, query_598195, nil, nil, nil)

var webAppsListTriggeredWebJobs* = Call_WebAppsListTriggeredWebJobs_598185(
    name: "webAppsListTriggeredWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobs_598186, base: "",
    url: url_WebAppsListTriggeredWebJobs_598187, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJob_598196 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJob_598198(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJob_598197(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598199 = path.getOrDefault("resourceGroupName")
  valid_598199 = validateParameter(valid_598199, JString, required = true,
                                 default = nil)
  if valid_598199 != nil:
    section.add "resourceGroupName", valid_598199
  var valid_598200 = path.getOrDefault("name")
  valid_598200 = validateParameter(valid_598200, JString, required = true,
                                 default = nil)
  if valid_598200 != nil:
    section.add "name", valid_598200
  var valid_598201 = path.getOrDefault("subscriptionId")
  valid_598201 = validateParameter(valid_598201, JString, required = true,
                                 default = nil)
  if valid_598201 != nil:
    section.add "subscriptionId", valid_598201
  var valid_598202 = path.getOrDefault("webJobName")
  valid_598202 = validateParameter(valid_598202, JString, required = true,
                                 default = nil)
  if valid_598202 != nil:
    section.add "webJobName", valid_598202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598203 = query.getOrDefault("api-version")
  valid_598203 = validateParameter(valid_598203, JString, required = true,
                                 default = nil)
  if valid_598203 != nil:
    section.add "api-version", valid_598203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598204: Call_WebAppsGetTriggeredWebJob_598196; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_598204.validator(path, query, header, formData, body)
  let scheme = call_598204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598204.url(scheme.get, call_598204.host, call_598204.base,
                         call_598204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598204, url, valid)

proc call*(call_598205: Call_WebAppsGetTriggeredWebJob_598196;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJob
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_598206 = newJObject()
  var query_598207 = newJObject()
  add(path_598206, "resourceGroupName", newJString(resourceGroupName))
  add(query_598207, "api-version", newJString(apiVersion))
  add(path_598206, "name", newJString(name))
  add(path_598206, "subscriptionId", newJString(subscriptionId))
  add(path_598206, "webJobName", newJString(webJobName))
  result = call_598205.call(path_598206, query_598207, nil, nil, nil)

var webAppsGetTriggeredWebJob* = Call_WebAppsGetTriggeredWebJob_598196(
    name: "webAppsGetTriggeredWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJob_598197, base: "",
    url: url_WebAppsGetTriggeredWebJob_598198, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJob_598208 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteTriggeredWebJob_598210(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJob_598209(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598211 = path.getOrDefault("resourceGroupName")
  valid_598211 = validateParameter(valid_598211, JString, required = true,
                                 default = nil)
  if valid_598211 != nil:
    section.add "resourceGroupName", valid_598211
  var valid_598212 = path.getOrDefault("name")
  valid_598212 = validateParameter(valid_598212, JString, required = true,
                                 default = nil)
  if valid_598212 != nil:
    section.add "name", valid_598212
  var valid_598213 = path.getOrDefault("subscriptionId")
  valid_598213 = validateParameter(valid_598213, JString, required = true,
                                 default = nil)
  if valid_598213 != nil:
    section.add "subscriptionId", valid_598213
  var valid_598214 = path.getOrDefault("webJobName")
  valid_598214 = validateParameter(valid_598214, JString, required = true,
                                 default = nil)
  if valid_598214 != nil:
    section.add "webJobName", valid_598214
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598215 = query.getOrDefault("api-version")
  valid_598215 = validateParameter(valid_598215, JString, required = true,
                                 default = nil)
  if valid_598215 != nil:
    section.add "api-version", valid_598215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598216: Call_WebAppsDeleteTriggeredWebJob_598208; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_598216.validator(path, query, header, formData, body)
  let scheme = call_598216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598216.url(scheme.get, call_598216.host, call_598216.base,
                         call_598216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598216, url, valid)

proc call*(call_598217: Call_WebAppsDeleteTriggeredWebJob_598208;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJob
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_598218 = newJObject()
  var query_598219 = newJObject()
  add(path_598218, "resourceGroupName", newJString(resourceGroupName))
  add(query_598219, "api-version", newJString(apiVersion))
  add(path_598218, "name", newJString(name))
  add(path_598218, "subscriptionId", newJString(subscriptionId))
  add(path_598218, "webJobName", newJString(webJobName))
  result = call_598217.call(path_598218, query_598219, nil, nil, nil)

var webAppsDeleteTriggeredWebJob* = Call_WebAppsDeleteTriggeredWebJob_598208(
    name: "webAppsDeleteTriggeredWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJob_598209, base: "",
    url: url_WebAppsDeleteTriggeredWebJob_598210, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistory_598220 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobHistory_598222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistory_598221(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598223 = path.getOrDefault("resourceGroupName")
  valid_598223 = validateParameter(valid_598223, JString, required = true,
                                 default = nil)
  if valid_598223 != nil:
    section.add "resourceGroupName", valid_598223
  var valid_598224 = path.getOrDefault("name")
  valid_598224 = validateParameter(valid_598224, JString, required = true,
                                 default = nil)
  if valid_598224 != nil:
    section.add "name", valid_598224
  var valid_598225 = path.getOrDefault("subscriptionId")
  valid_598225 = validateParameter(valid_598225, JString, required = true,
                                 default = nil)
  if valid_598225 != nil:
    section.add "subscriptionId", valid_598225
  var valid_598226 = path.getOrDefault("webJobName")
  valid_598226 = validateParameter(valid_598226, JString, required = true,
                                 default = nil)
  if valid_598226 != nil:
    section.add "webJobName", valid_598226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598227 = query.getOrDefault("api-version")
  valid_598227 = validateParameter(valid_598227, JString, required = true,
                                 default = nil)
  if valid_598227 != nil:
    section.add "api-version", valid_598227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598228: Call_WebAppsListTriggeredWebJobHistory_598220;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_598228.validator(path, query, header, formData, body)
  let scheme = call_598228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598228.url(scheme.get, call_598228.host, call_598228.base,
                         call_598228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598228, url, valid)

proc call*(call_598229: Call_WebAppsListTriggeredWebJobHistory_598220;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistory
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_598230 = newJObject()
  var query_598231 = newJObject()
  add(path_598230, "resourceGroupName", newJString(resourceGroupName))
  add(query_598231, "api-version", newJString(apiVersion))
  add(path_598230, "name", newJString(name))
  add(path_598230, "subscriptionId", newJString(subscriptionId))
  add(path_598230, "webJobName", newJString(webJobName))
  result = call_598229.call(path_598230, query_598231, nil, nil, nil)

var webAppsListTriggeredWebJobHistory* = Call_WebAppsListTriggeredWebJobHistory_598220(
    name: "webAppsListTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistory_598221, base: "",
    url: url_WebAppsListTriggeredWebJobHistory_598222, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistory_598232 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJobHistory_598234(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistory_598233(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598235 = path.getOrDefault("resourceGroupName")
  valid_598235 = validateParameter(valid_598235, JString, required = true,
                                 default = nil)
  if valid_598235 != nil:
    section.add "resourceGroupName", valid_598235
  var valid_598236 = path.getOrDefault("name")
  valid_598236 = validateParameter(valid_598236, JString, required = true,
                                 default = nil)
  if valid_598236 != nil:
    section.add "name", valid_598236
  var valid_598237 = path.getOrDefault("subscriptionId")
  valid_598237 = validateParameter(valid_598237, JString, required = true,
                                 default = nil)
  if valid_598237 != nil:
    section.add "subscriptionId", valid_598237
  var valid_598238 = path.getOrDefault("id")
  valid_598238 = validateParameter(valid_598238, JString, required = true,
                                 default = nil)
  if valid_598238 != nil:
    section.add "id", valid_598238
  var valid_598239 = path.getOrDefault("webJobName")
  valid_598239 = validateParameter(valid_598239, JString, required = true,
                                 default = nil)
  if valid_598239 != nil:
    section.add "webJobName", valid_598239
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598240 = query.getOrDefault("api-version")
  valid_598240 = validateParameter(valid_598240, JString, required = true,
                                 default = nil)
  if valid_598240 != nil:
    section.add "api-version", valid_598240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598241: Call_WebAppsGetTriggeredWebJobHistory_598232;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_598241.validator(path, query, header, formData, body)
  let scheme = call_598241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598241.url(scheme.get, call_598241.host, call_598241.base,
                         call_598241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598241, url, valid)

proc call*(call_598242: Call_WebAppsGetTriggeredWebJobHistory_598232;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistory
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_598243 = newJObject()
  var query_598244 = newJObject()
  add(path_598243, "resourceGroupName", newJString(resourceGroupName))
  add(query_598244, "api-version", newJString(apiVersion))
  add(path_598243, "name", newJString(name))
  add(path_598243, "subscriptionId", newJString(subscriptionId))
  add(path_598243, "id", newJString(id))
  add(path_598243, "webJobName", newJString(webJobName))
  result = call_598242.call(path_598243, query_598244, nil, nil, nil)

var webAppsGetTriggeredWebJobHistory* = Call_WebAppsGetTriggeredWebJobHistory_598232(
    name: "webAppsGetTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistory_598233, base: "",
    url: url_WebAppsGetTriggeredWebJobHistory_598234, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJob_598245 = ref object of OpenApiRestCall_593437
proc url_WebAppsRunTriggeredWebJob_598247(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJob_598246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598248 = path.getOrDefault("resourceGroupName")
  valid_598248 = validateParameter(valid_598248, JString, required = true,
                                 default = nil)
  if valid_598248 != nil:
    section.add "resourceGroupName", valid_598248
  var valid_598249 = path.getOrDefault("name")
  valid_598249 = validateParameter(valid_598249, JString, required = true,
                                 default = nil)
  if valid_598249 != nil:
    section.add "name", valid_598249
  var valid_598250 = path.getOrDefault("subscriptionId")
  valid_598250 = validateParameter(valid_598250, JString, required = true,
                                 default = nil)
  if valid_598250 != nil:
    section.add "subscriptionId", valid_598250
  var valid_598251 = path.getOrDefault("webJobName")
  valid_598251 = validateParameter(valid_598251, JString, required = true,
                                 default = nil)
  if valid_598251 != nil:
    section.add "webJobName", valid_598251
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598252 = query.getOrDefault("api-version")
  valid_598252 = validateParameter(valid_598252, JString, required = true,
                                 default = nil)
  if valid_598252 != nil:
    section.add "api-version", valid_598252
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598253: Call_WebAppsRunTriggeredWebJob_598245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_598253.validator(path, query, header, formData, body)
  let scheme = call_598253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598253.url(scheme.get, call_598253.host, call_598253.base,
                         call_598253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598253, url, valid)

proc call*(call_598254: Call_WebAppsRunTriggeredWebJob_598245;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJob
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_598255 = newJObject()
  var query_598256 = newJObject()
  add(path_598255, "resourceGroupName", newJString(resourceGroupName))
  add(query_598256, "api-version", newJString(apiVersion))
  add(path_598255, "name", newJString(name))
  add(path_598255, "subscriptionId", newJString(subscriptionId))
  add(path_598255, "webJobName", newJString(webJobName))
  result = call_598254.call(path_598255, query_598256, nil, nil, nil)

var webAppsRunTriggeredWebJob* = Call_WebAppsRunTriggeredWebJob_598245(
    name: "webAppsRunTriggeredWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJob_598246, base: "",
    url: url_WebAppsRunTriggeredWebJob_598247, schemes: {Scheme.Https})
type
  Call_WebAppsListUsages_598257 = ref object of OpenApiRestCall_593437
proc url_WebAppsListUsages_598259(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsages_598258(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598260 = path.getOrDefault("resourceGroupName")
  valid_598260 = validateParameter(valid_598260, JString, required = true,
                                 default = nil)
  if valid_598260 != nil:
    section.add "resourceGroupName", valid_598260
  var valid_598261 = path.getOrDefault("name")
  valid_598261 = validateParameter(valid_598261, JString, required = true,
                                 default = nil)
  if valid_598261 != nil:
    section.add "name", valid_598261
  var valid_598262 = path.getOrDefault("subscriptionId")
  valid_598262 = validateParameter(valid_598262, JString, required = true,
                                 default = nil)
  if valid_598262 != nil:
    section.add "subscriptionId", valid_598262
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598263 = query.getOrDefault("api-version")
  valid_598263 = validateParameter(valid_598263, JString, required = true,
                                 default = nil)
  if valid_598263 != nil:
    section.add "api-version", valid_598263
  var valid_598264 = query.getOrDefault("$filter")
  valid_598264 = validateParameter(valid_598264, JString, required = false,
                                 default = nil)
  if valid_598264 != nil:
    section.add "$filter", valid_598264
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598265: Call_WebAppsListUsages_598257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_598265.validator(path, query, header, formData, body)
  let scheme = call_598265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598265.url(scheme.get, call_598265.host, call_598265.base,
                         call_598265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598265, url, valid)

proc call*(call_598266: Call_WebAppsListUsages_598257; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          Filter: string = ""): Recallable =
  ## webAppsListUsages
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_598267 = newJObject()
  var query_598268 = newJObject()
  add(path_598267, "resourceGroupName", newJString(resourceGroupName))
  add(query_598268, "api-version", newJString(apiVersion))
  add(path_598267, "name", newJString(name))
  add(path_598267, "subscriptionId", newJString(subscriptionId))
  add(query_598268, "$filter", newJString(Filter))
  result = call_598266.call(path_598267, query_598268, nil, nil, nil)

var webAppsListUsages* = Call_WebAppsListUsages_598257(name: "webAppsListUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_WebAppsListUsages_598258, base: "",
    url: url_WebAppsListUsages_598259, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnections_598269 = ref object of OpenApiRestCall_593437
proc url_WebAppsListVnetConnections_598271(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnections_598270(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598272 = path.getOrDefault("resourceGroupName")
  valid_598272 = validateParameter(valid_598272, JString, required = true,
                                 default = nil)
  if valid_598272 != nil:
    section.add "resourceGroupName", valid_598272
  var valid_598273 = path.getOrDefault("name")
  valid_598273 = validateParameter(valid_598273, JString, required = true,
                                 default = nil)
  if valid_598273 != nil:
    section.add "name", valid_598273
  var valid_598274 = path.getOrDefault("subscriptionId")
  valid_598274 = validateParameter(valid_598274, JString, required = true,
                                 default = nil)
  if valid_598274 != nil:
    section.add "subscriptionId", valid_598274
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598275 = query.getOrDefault("api-version")
  valid_598275 = validateParameter(valid_598275, JString, required = true,
                                 default = nil)
  if valid_598275 != nil:
    section.add "api-version", valid_598275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598276: Call_WebAppsListVnetConnections_598269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_598276.validator(path, query, header, formData, body)
  let scheme = call_598276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598276.url(scheme.get, call_598276.host, call_598276.base,
                         call_598276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598276, url, valid)

proc call*(call_598277: Call_WebAppsListVnetConnections_598269;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnections
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598278 = newJObject()
  var query_598279 = newJObject()
  add(path_598278, "resourceGroupName", newJString(resourceGroupName))
  add(query_598279, "api-version", newJString(apiVersion))
  add(path_598278, "name", newJString(name))
  add(path_598278, "subscriptionId", newJString(subscriptionId))
  result = call_598277.call(path_598278, query_598279, nil, nil, nil)

var webAppsListVnetConnections* = Call_WebAppsListVnetConnections_598269(
    name: "webAppsListVnetConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnections_598270, base: "",
    url: url_WebAppsListVnetConnections_598271, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnection_598292 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnection_598294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnection_598293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598295 = path.getOrDefault("resourceGroupName")
  valid_598295 = validateParameter(valid_598295, JString, required = true,
                                 default = nil)
  if valid_598295 != nil:
    section.add "resourceGroupName", valid_598295
  var valid_598296 = path.getOrDefault("name")
  valid_598296 = validateParameter(valid_598296, JString, required = true,
                                 default = nil)
  if valid_598296 != nil:
    section.add "name", valid_598296
  var valid_598297 = path.getOrDefault("vnetName")
  valid_598297 = validateParameter(valid_598297, JString, required = true,
                                 default = nil)
  if valid_598297 != nil:
    section.add "vnetName", valid_598297
  var valid_598298 = path.getOrDefault("subscriptionId")
  valid_598298 = validateParameter(valid_598298, JString, required = true,
                                 default = nil)
  if valid_598298 != nil:
    section.add "subscriptionId", valid_598298
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598299 = query.getOrDefault("api-version")
  valid_598299 = validateParameter(valid_598299, JString, required = true,
                                 default = nil)
  if valid_598299 != nil:
    section.add "api-version", valid_598299
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598301: Call_WebAppsCreateOrUpdateVnetConnection_598292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_598301.validator(path, query, header, formData, body)
  let scheme = call_598301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598301.url(scheme.get, call_598301.host, call_598301.base,
                         call_598301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598301, url, valid)

proc call*(call_598302: Call_WebAppsCreateOrUpdateVnetConnection_598292;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598303 = newJObject()
  var query_598304 = newJObject()
  var body_598305 = newJObject()
  add(path_598303, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_598305 = connectionEnvelope
  add(path_598303, "name", newJString(name))
  add(path_598303, "vnetName", newJString(vnetName))
  add(query_598304, "api-version", newJString(apiVersion))
  add(path_598303, "subscriptionId", newJString(subscriptionId))
  result = call_598302.call(path_598303, query_598304, nil, nil, body_598305)

var webAppsCreateOrUpdateVnetConnection* = Call_WebAppsCreateOrUpdateVnetConnection_598292(
    name: "webAppsCreateOrUpdateVnetConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnection_598293, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnection_598294, schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnection_598280 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnection_598282(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnection_598281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598283 = path.getOrDefault("resourceGroupName")
  valid_598283 = validateParameter(valid_598283, JString, required = true,
                                 default = nil)
  if valid_598283 != nil:
    section.add "resourceGroupName", valid_598283
  var valid_598284 = path.getOrDefault("name")
  valid_598284 = validateParameter(valid_598284, JString, required = true,
                                 default = nil)
  if valid_598284 != nil:
    section.add "name", valid_598284
  var valid_598285 = path.getOrDefault("vnetName")
  valid_598285 = validateParameter(valid_598285, JString, required = true,
                                 default = nil)
  if valid_598285 != nil:
    section.add "vnetName", valid_598285
  var valid_598286 = path.getOrDefault("subscriptionId")
  valid_598286 = validateParameter(valid_598286, JString, required = true,
                                 default = nil)
  if valid_598286 != nil:
    section.add "subscriptionId", valid_598286
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598287 = query.getOrDefault("api-version")
  valid_598287 = validateParameter(valid_598287, JString, required = true,
                                 default = nil)
  if valid_598287 != nil:
    section.add "api-version", valid_598287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598288: Call_WebAppsGetVnetConnection_598280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_598288.validator(path, query, header, formData, body)
  let scheme = call_598288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598288.url(scheme.get, call_598288.host, call_598288.base,
                         call_598288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598288, url, valid)

proc call*(call_598289: Call_WebAppsGetVnetConnection_598280;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnection
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598290 = newJObject()
  var query_598291 = newJObject()
  add(path_598290, "resourceGroupName", newJString(resourceGroupName))
  add(query_598291, "api-version", newJString(apiVersion))
  add(path_598290, "name", newJString(name))
  add(path_598290, "vnetName", newJString(vnetName))
  add(path_598290, "subscriptionId", newJString(subscriptionId))
  result = call_598289.call(path_598290, query_598291, nil, nil, nil)

var webAppsGetVnetConnection* = Call_WebAppsGetVnetConnection_598280(
    name: "webAppsGetVnetConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnection_598281, base: "",
    url: url_WebAppsGetVnetConnection_598282, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnection_598318 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnection_598320(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnection_598319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598321 = path.getOrDefault("resourceGroupName")
  valid_598321 = validateParameter(valid_598321, JString, required = true,
                                 default = nil)
  if valid_598321 != nil:
    section.add "resourceGroupName", valid_598321
  var valid_598322 = path.getOrDefault("name")
  valid_598322 = validateParameter(valid_598322, JString, required = true,
                                 default = nil)
  if valid_598322 != nil:
    section.add "name", valid_598322
  var valid_598323 = path.getOrDefault("vnetName")
  valid_598323 = validateParameter(valid_598323, JString, required = true,
                                 default = nil)
  if valid_598323 != nil:
    section.add "vnetName", valid_598323
  var valid_598324 = path.getOrDefault("subscriptionId")
  valid_598324 = validateParameter(valid_598324, JString, required = true,
                                 default = nil)
  if valid_598324 != nil:
    section.add "subscriptionId", valid_598324
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598325 = query.getOrDefault("api-version")
  valid_598325 = validateParameter(valid_598325, JString, required = true,
                                 default = nil)
  if valid_598325 != nil:
    section.add "api-version", valid_598325
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598327: Call_WebAppsUpdateVnetConnection_598318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_598327.validator(path, query, header, formData, body)
  let scheme = call_598327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598327.url(scheme.get, call_598327.host, call_598327.base,
                         call_598327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598327, url, valid)

proc call*(call_598328: Call_WebAppsUpdateVnetConnection_598318;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598329 = newJObject()
  var query_598330 = newJObject()
  var body_598331 = newJObject()
  add(path_598329, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_598331 = connectionEnvelope
  add(path_598329, "name", newJString(name))
  add(path_598329, "vnetName", newJString(vnetName))
  add(query_598330, "api-version", newJString(apiVersion))
  add(path_598329, "subscriptionId", newJString(subscriptionId))
  result = call_598328.call(path_598329, query_598330, nil, nil, body_598331)

var webAppsUpdateVnetConnection* = Call_WebAppsUpdateVnetConnection_598318(
    name: "webAppsUpdateVnetConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnection_598319, base: "",
    url: url_WebAppsUpdateVnetConnection_598320, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnection_598306 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteVnetConnection_598308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnection_598307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598309 = path.getOrDefault("resourceGroupName")
  valid_598309 = validateParameter(valid_598309, JString, required = true,
                                 default = nil)
  if valid_598309 != nil:
    section.add "resourceGroupName", valid_598309
  var valid_598310 = path.getOrDefault("name")
  valid_598310 = validateParameter(valid_598310, JString, required = true,
                                 default = nil)
  if valid_598310 != nil:
    section.add "name", valid_598310
  var valid_598311 = path.getOrDefault("vnetName")
  valid_598311 = validateParameter(valid_598311, JString, required = true,
                                 default = nil)
  if valid_598311 != nil:
    section.add "vnetName", valid_598311
  var valid_598312 = path.getOrDefault("subscriptionId")
  valid_598312 = validateParameter(valid_598312, JString, required = true,
                                 default = nil)
  if valid_598312 != nil:
    section.add "subscriptionId", valid_598312
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598313 = query.getOrDefault("api-version")
  valid_598313 = validateParameter(valid_598313, JString, required = true,
                                 default = nil)
  if valid_598313 != nil:
    section.add "api-version", valid_598313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598314: Call_WebAppsDeleteVnetConnection_598306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_598314.validator(path, query, header, formData, body)
  let scheme = call_598314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598314.url(scheme.get, call_598314.host, call_598314.base,
                         call_598314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598314, url, valid)

proc call*(call_598315: Call_WebAppsDeleteVnetConnection_598306;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnection
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598316 = newJObject()
  var query_598317 = newJObject()
  add(path_598316, "resourceGroupName", newJString(resourceGroupName))
  add(query_598317, "api-version", newJString(apiVersion))
  add(path_598316, "name", newJString(name))
  add(path_598316, "vnetName", newJString(vnetName))
  add(path_598316, "subscriptionId", newJString(subscriptionId))
  result = call_598315.call(path_598316, query_598317, nil, nil, nil)

var webAppsDeleteVnetConnection* = Call_WebAppsDeleteVnetConnection_598306(
    name: "webAppsDeleteVnetConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnection_598307, base: "",
    url: url_WebAppsDeleteVnetConnection_598308, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGateway_598345 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnectionGateway_598347(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGateway_598346(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598348 = path.getOrDefault("resourceGroupName")
  valid_598348 = validateParameter(valid_598348, JString, required = true,
                                 default = nil)
  if valid_598348 != nil:
    section.add "resourceGroupName", valid_598348
  var valid_598349 = path.getOrDefault("name")
  valid_598349 = validateParameter(valid_598349, JString, required = true,
                                 default = nil)
  if valid_598349 != nil:
    section.add "name", valid_598349
  var valid_598350 = path.getOrDefault("vnetName")
  valid_598350 = validateParameter(valid_598350, JString, required = true,
                                 default = nil)
  if valid_598350 != nil:
    section.add "vnetName", valid_598350
  var valid_598351 = path.getOrDefault("gatewayName")
  valid_598351 = validateParameter(valid_598351, JString, required = true,
                                 default = nil)
  if valid_598351 != nil:
    section.add "gatewayName", valid_598351
  var valid_598352 = path.getOrDefault("subscriptionId")
  valid_598352 = validateParameter(valid_598352, JString, required = true,
                                 default = nil)
  if valid_598352 != nil:
    section.add "subscriptionId", valid_598352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598353 = query.getOrDefault("api-version")
  valid_598353 = validateParameter(valid_598353, JString, required = true,
                                 default = nil)
  if valid_598353 != nil:
    section.add "api-version", valid_598353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598355: Call_WebAppsCreateOrUpdateVnetConnectionGateway_598345;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_598355.validator(path, query, header, formData, body)
  let scheme = call_598355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598355.url(scheme.get, call_598355.host, call_598355.base,
                         call_598355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598355, url, valid)

proc call*(call_598356: Call_WebAppsCreateOrUpdateVnetConnectionGateway_598345;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598357 = newJObject()
  var query_598358 = newJObject()
  var body_598359 = newJObject()
  add(path_598357, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_598359 = connectionEnvelope
  add(path_598357, "name", newJString(name))
  add(path_598357, "vnetName", newJString(vnetName))
  add(query_598358, "api-version", newJString(apiVersion))
  add(path_598357, "gatewayName", newJString(gatewayName))
  add(path_598357, "subscriptionId", newJString(subscriptionId))
  result = call_598356.call(path_598357, query_598358, nil, nil, body_598359)

var webAppsCreateOrUpdateVnetConnectionGateway* = Call_WebAppsCreateOrUpdateVnetConnectionGateway_598345(
    name: "webAppsCreateOrUpdateVnetConnectionGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGateway_598346,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGateway_598347,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGateway_598332 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnectionGateway_598334(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGateway_598333(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598335 = path.getOrDefault("resourceGroupName")
  valid_598335 = validateParameter(valid_598335, JString, required = true,
                                 default = nil)
  if valid_598335 != nil:
    section.add "resourceGroupName", valid_598335
  var valid_598336 = path.getOrDefault("name")
  valid_598336 = validateParameter(valid_598336, JString, required = true,
                                 default = nil)
  if valid_598336 != nil:
    section.add "name", valid_598336
  var valid_598337 = path.getOrDefault("vnetName")
  valid_598337 = validateParameter(valid_598337, JString, required = true,
                                 default = nil)
  if valid_598337 != nil:
    section.add "vnetName", valid_598337
  var valid_598338 = path.getOrDefault("gatewayName")
  valid_598338 = validateParameter(valid_598338, JString, required = true,
                                 default = nil)
  if valid_598338 != nil:
    section.add "gatewayName", valid_598338
  var valid_598339 = path.getOrDefault("subscriptionId")
  valid_598339 = validateParameter(valid_598339, JString, required = true,
                                 default = nil)
  if valid_598339 != nil:
    section.add "subscriptionId", valid_598339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598340 = query.getOrDefault("api-version")
  valid_598340 = validateParameter(valid_598340, JString, required = true,
                                 default = nil)
  if valid_598340 != nil:
    section.add "api-version", valid_598340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598341: Call_WebAppsGetVnetConnectionGateway_598332;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_598341.validator(path, query, header, formData, body)
  let scheme = call_598341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598341.url(scheme.get, call_598341.host, call_598341.base,
                         call_598341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598341, url, valid)

proc call*(call_598342: Call_WebAppsGetVnetConnectionGateway_598332;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGateway
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598343 = newJObject()
  var query_598344 = newJObject()
  add(path_598343, "resourceGroupName", newJString(resourceGroupName))
  add(query_598344, "api-version", newJString(apiVersion))
  add(path_598343, "name", newJString(name))
  add(path_598343, "vnetName", newJString(vnetName))
  add(path_598343, "gatewayName", newJString(gatewayName))
  add(path_598343, "subscriptionId", newJString(subscriptionId))
  result = call_598342.call(path_598343, query_598344, nil, nil, nil)

var webAppsGetVnetConnectionGateway* = Call_WebAppsGetVnetConnectionGateway_598332(
    name: "webAppsGetVnetConnectionGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGateway_598333, base: "",
    url: url_WebAppsGetVnetConnectionGateway_598334, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGateway_598360 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnectionGateway_598362(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGateway_598361(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598363 = path.getOrDefault("resourceGroupName")
  valid_598363 = validateParameter(valid_598363, JString, required = true,
                                 default = nil)
  if valid_598363 != nil:
    section.add "resourceGroupName", valid_598363
  var valid_598364 = path.getOrDefault("name")
  valid_598364 = validateParameter(valid_598364, JString, required = true,
                                 default = nil)
  if valid_598364 != nil:
    section.add "name", valid_598364
  var valid_598365 = path.getOrDefault("vnetName")
  valid_598365 = validateParameter(valid_598365, JString, required = true,
                                 default = nil)
  if valid_598365 != nil:
    section.add "vnetName", valid_598365
  var valid_598366 = path.getOrDefault("gatewayName")
  valid_598366 = validateParameter(valid_598366, JString, required = true,
                                 default = nil)
  if valid_598366 != nil:
    section.add "gatewayName", valid_598366
  var valid_598367 = path.getOrDefault("subscriptionId")
  valid_598367 = validateParameter(valid_598367, JString, required = true,
                                 default = nil)
  if valid_598367 != nil:
    section.add "subscriptionId", valid_598367
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598368 = query.getOrDefault("api-version")
  valid_598368 = validateParameter(valid_598368, JString, required = true,
                                 default = nil)
  if valid_598368 != nil:
    section.add "api-version", valid_598368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_598370: Call_WebAppsUpdateVnetConnectionGateway_598360;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_598370.validator(path, query, header, formData, body)
  let scheme = call_598370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598370.url(scheme.get, call_598370.host, call_598370.base,
                         call_598370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598370, url, valid)

proc call*(call_598371: Call_WebAppsUpdateVnetConnectionGateway_598360;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598372 = newJObject()
  var query_598373 = newJObject()
  var body_598374 = newJObject()
  add(path_598372, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_598374 = connectionEnvelope
  add(path_598372, "name", newJString(name))
  add(path_598372, "vnetName", newJString(vnetName))
  add(query_598373, "api-version", newJString(apiVersion))
  add(path_598372, "gatewayName", newJString(gatewayName))
  add(path_598372, "subscriptionId", newJString(subscriptionId))
  result = call_598371.call(path_598372, query_598373, nil, nil, body_598374)

var webAppsUpdateVnetConnectionGateway* = Call_WebAppsUpdateVnetConnectionGateway_598360(
    name: "webAppsUpdateVnetConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGateway_598361, base: "",
    url: url_WebAppsUpdateVnetConnectionGateway_598362, schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobs_598375 = ref object of OpenApiRestCall_593437
proc url_WebAppsListWebJobs_598377(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobs_598376(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598378 = path.getOrDefault("resourceGroupName")
  valid_598378 = validateParameter(valid_598378, JString, required = true,
                                 default = nil)
  if valid_598378 != nil:
    section.add "resourceGroupName", valid_598378
  var valid_598379 = path.getOrDefault("name")
  valid_598379 = validateParameter(valid_598379, JString, required = true,
                                 default = nil)
  if valid_598379 != nil:
    section.add "name", valid_598379
  var valid_598380 = path.getOrDefault("subscriptionId")
  valid_598380 = validateParameter(valid_598380, JString, required = true,
                                 default = nil)
  if valid_598380 != nil:
    section.add "subscriptionId", valid_598380
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598381 = query.getOrDefault("api-version")
  valid_598381 = validateParameter(valid_598381, JString, required = true,
                                 default = nil)
  if valid_598381 != nil:
    section.add "api-version", valid_598381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598382: Call_WebAppsListWebJobs_598375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_598382.validator(path, query, header, formData, body)
  let scheme = call_598382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598382.url(scheme.get, call_598382.host, call_598382.base,
                         call_598382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598382, url, valid)

proc call*(call_598383: Call_WebAppsListWebJobs_598375; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListWebJobs
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_598384 = newJObject()
  var query_598385 = newJObject()
  add(path_598384, "resourceGroupName", newJString(resourceGroupName))
  add(query_598385, "api-version", newJString(apiVersion))
  add(path_598384, "name", newJString(name))
  add(path_598384, "subscriptionId", newJString(subscriptionId))
  result = call_598383.call(path_598384, query_598385, nil, nil, nil)

var webAppsListWebJobs* = Call_WebAppsListWebJobs_598375(
    name: "webAppsListWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    validator: validate_WebAppsListWebJobs_598376, base: "",
    url: url_WebAppsListWebJobs_598377, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJob_598386 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebJob_598388(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJob_598387(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_598389 = path.getOrDefault("resourceGroupName")
  valid_598389 = validateParameter(valid_598389, JString, required = true,
                                 default = nil)
  if valid_598389 != nil:
    section.add "resourceGroupName", valid_598389
  var valid_598390 = path.getOrDefault("name")
  valid_598390 = validateParameter(valid_598390, JString, required = true,
                                 default = nil)
  if valid_598390 != nil:
    section.add "name", valid_598390
  var valid_598391 = path.getOrDefault("subscriptionId")
  valid_598391 = validateParameter(valid_598391, JString, required = true,
                                 default = nil)
  if valid_598391 != nil:
    section.add "subscriptionId", valid_598391
  var valid_598392 = path.getOrDefault("webJobName")
  valid_598392 = validateParameter(valid_598392, JString, required = true,
                                 default = nil)
  if valid_598392 != nil:
    section.add "webJobName", valid_598392
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_598393 = query.getOrDefault("api-version")
  valid_598393 = validateParameter(valid_598393, JString, required = true,
                                 default = nil)
  if valid_598393 != nil:
    section.add "api-version", valid_598393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598394: Call_WebAppsGetWebJob_598386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_598394.validator(path, query, header, formData, body)
  let scheme = call_598394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598394.url(scheme.get, call_598394.host, call_598394.base,
                         call_598394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598394, url, valid)

proc call*(call_598395: Call_WebAppsGetWebJob_598386; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJob
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_598396 = newJObject()
  var query_598397 = newJObject()
  add(path_598396, "resourceGroupName", newJString(resourceGroupName))
  add(query_598397, "api-version", newJString(apiVersion))
  add(path_598396, "name", newJString(name))
  add(path_598396, "subscriptionId", newJString(subscriptionId))
  add(path_598396, "webJobName", newJString(webJobName))
  result = call_598395.call(path_598396, query_598397, nil, nil, nil)

var webAppsGetWebJob* = Call_WebAppsGetWebJob_598386(name: "webAppsGetWebJob",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJob_598387, base: "",
    url: url_WebAppsGetWebJob_598388, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
