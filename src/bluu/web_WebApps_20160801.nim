
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: WebApps API Client
## version: 2016-08-01
## termsOfService: (not provided)
## license: (not provided)
## 
## 
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567666 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567666](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567666): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-WebApps"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_WebAppsList_567888 = ref object of OpenApiRestCall_567666
proc url_WebAppsList_567890(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsList_567889(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Get all apps for a subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568063 = path.getOrDefault("subscriptionId")
  valid_568063 = validateParameter(valid_568063, JString, required = true,
                                 default = nil)
  if valid_568063 != nil:
    section.add "subscriptionId", valid_568063
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568064 = query.getOrDefault("api-version")
  valid_568064 = validateParameter(valid_568064, JString, required = true,
                                 default = nil)
  if valid_568064 != nil:
    section.add "api-version", valid_568064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568087: Call_WebAppsList_567888; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get all apps for a subscription.
  ## 
  let valid = call_568087.validator(path, query, header, formData, body)
  let scheme = call_568087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568087.url(scheme.get, call_568087.host, call_568087.base,
                         call_568087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568087, url, valid)

proc call*(call_568158: Call_WebAppsList_567888; apiVersion: string;
          subscriptionId: string): Recallable =
  ## webAppsList
  ## Get all apps for a subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568159 = newJObject()
  var query_568161 = newJObject()
  add(query_568161, "api-version", newJString(apiVersion))
  add(path_568159, "subscriptionId", newJString(subscriptionId))
  result = call_568158.call(path_568159, query_568161, nil, nil, nil)

var webAppsList* = Call_WebAppsList_567888(name: "webAppsList",
                                        meth: HttpMethod.HttpGet,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
                                        validator: validate_WebAppsList_567889,
                                        base: "", url: url_WebAppsList_567890,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsListByResourceGroup_568200 = ref object of OpenApiRestCall_567666
proc url_WebAppsListByResourceGroup_568202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListByResourceGroup_568201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568203 = path.getOrDefault("resourceGroupName")
  valid_568203 = validateParameter(valid_568203, JString, required = true,
                                 default = nil)
  if valid_568203 != nil:
    section.add "resourceGroupName", valid_568203
  var valid_568204 = path.getOrDefault("subscriptionId")
  valid_568204 = validateParameter(valid_568204, JString, required = true,
                                 default = nil)
  if valid_568204 != nil:
    section.add "subscriptionId", valid_568204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568205 = query.getOrDefault("api-version")
  valid_568205 = validateParameter(valid_568205, JString, required = true,
                                 default = nil)
  if valid_568205 != nil:
    section.add "api-version", valid_568205
  var valid_568206 = query.getOrDefault("includeSlots")
  valid_568206 = validateParameter(valid_568206, JBool, required = false, default = nil)
  if valid_568206 != nil:
    section.add "includeSlots", valid_568206
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568207: Call_WebAppsListByResourceGroup_568200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  let valid = call_568207.validator(path, query, header, formData, body)
  let scheme = call_568207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568207.url(scheme.get, call_568207.host, call_568207.base,
                         call_568207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568207, url, valid)

proc call*(call_568208: Call_WebAppsListByResourceGroup_568200;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          includeSlots: bool = false): Recallable =
  ## webAppsListByResourceGroup
  ## Gets all web, mobile, and API apps in the specified resource group.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   includeSlots: bool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  var path_568209 = newJObject()
  var query_568210 = newJObject()
  add(path_568209, "resourceGroupName", newJString(resourceGroupName))
  add(query_568210, "api-version", newJString(apiVersion))
  add(path_568209, "subscriptionId", newJString(subscriptionId))
  add(query_568210, "includeSlots", newJBool(includeSlots))
  result = call_568208.call(path_568209, query_568210, nil, nil, nil)

var webAppsListByResourceGroup* = Call_WebAppsListByResourceGroup_568200(
    name: "webAppsListByResourceGroup", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_WebAppsListByResourceGroup_568201, base: "",
    url: url_WebAppsListByResourceGroup_568202, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdate_568222 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdate_568224(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdate_568223(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568225 = path.getOrDefault("resourceGroupName")
  valid_568225 = validateParameter(valid_568225, JString, required = true,
                                 default = nil)
  if valid_568225 != nil:
    section.add "resourceGroupName", valid_568225
  var valid_568226 = path.getOrDefault("name")
  valid_568226 = validateParameter(valid_568226, JString, required = true,
                                 default = nil)
  if valid_568226 != nil:
    section.add "name", valid_568226
  var valid_568227 = path.getOrDefault("subscriptionId")
  valid_568227 = validateParameter(valid_568227, JString, required = true,
                                 default = nil)
  if valid_568227 != nil:
    section.add "subscriptionId", valid_568227
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568228 = query.getOrDefault("api-version")
  valid_568228 = validateParameter(valid_568228, JString, required = true,
                                 default = nil)
  if valid_568228 != nil:
    section.add "api-version", valid_568228
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568230: Call_WebAppsCreateOrUpdate_568222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_568230.validator(path, query, header, formData, body)
  let scheme = call_568230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568230.url(scheme.get, call_568230.host, call_568230.base,
                         call_568230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568230, url, valid)

proc call*(call_568231: Call_WebAppsCreateOrUpdate_568222; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568232 = newJObject()
  var query_568233 = newJObject()
  var body_568234 = newJObject()
  if siteEnvelope != nil:
    body_568234 = siteEnvelope
  add(path_568232, "resourceGroupName", newJString(resourceGroupName))
  add(query_568233, "api-version", newJString(apiVersion))
  add(path_568232, "name", newJString(name))
  add(path_568232, "subscriptionId", newJString(subscriptionId))
  result = call_568231.call(path_568232, query_568233, nil, nil, body_568234)

var webAppsCreateOrUpdate* = Call_WebAppsCreateOrUpdate_568222(
    name: "webAppsCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsCreateOrUpdate_568223, base: "",
    url: url_WebAppsCreateOrUpdate_568224, schemes: {Scheme.Https})
type
  Call_WebAppsGet_568211 = ref object of OpenApiRestCall_567666
proc url_WebAppsGet_568213(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGet_568212(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568214 = path.getOrDefault("resourceGroupName")
  valid_568214 = validateParameter(valid_568214, JString, required = true,
                                 default = nil)
  if valid_568214 != nil:
    section.add "resourceGroupName", valid_568214
  var valid_568215 = path.getOrDefault("name")
  valid_568215 = validateParameter(valid_568215, JString, required = true,
                                 default = nil)
  if valid_568215 != nil:
    section.add "name", valid_568215
  var valid_568216 = path.getOrDefault("subscriptionId")
  valid_568216 = validateParameter(valid_568216, JString, required = true,
                                 default = nil)
  if valid_568216 != nil:
    section.add "subscriptionId", valid_568216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568217 = query.getOrDefault("api-version")
  valid_568217 = validateParameter(valid_568217, JString, required = true,
                                 default = nil)
  if valid_568217 != nil:
    section.add "api-version", valid_568217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568218: Call_WebAppsGet_568211; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_568218.validator(path, query, header, formData, body)
  let scheme = call_568218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568218.url(scheme.get, call_568218.host, call_568218.base,
                         call_568218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568218, url, valid)

proc call*(call_568219: Call_WebAppsGet_568211; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsGet
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568220 = newJObject()
  var query_568221 = newJObject()
  add(path_568220, "resourceGroupName", newJString(resourceGroupName))
  add(query_568221, "api-version", newJString(apiVersion))
  add(path_568220, "name", newJString(name))
  add(path_568220, "subscriptionId", newJString(subscriptionId))
  result = call_568219.call(path_568220, query_568221, nil, nil, nil)

var webAppsGet* = Call_WebAppsGet_568211(name: "webAppsGet",
                                      meth: HttpMethod.HttpGet,
                                      host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
                                      validator: validate_WebAppsGet_568212,
                                      base: "", url: url_WebAppsGet_568213,
                                      schemes: {Scheme.Https})
type
  Call_WebAppsUpdate_568248 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdate_568250(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdate_568249(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568251 = path.getOrDefault("resourceGroupName")
  valid_568251 = validateParameter(valid_568251, JString, required = true,
                                 default = nil)
  if valid_568251 != nil:
    section.add "resourceGroupName", valid_568251
  var valid_568252 = path.getOrDefault("name")
  valid_568252 = validateParameter(valid_568252, JString, required = true,
                                 default = nil)
  if valid_568252 != nil:
    section.add "name", valid_568252
  var valid_568253 = path.getOrDefault("subscriptionId")
  valid_568253 = validateParameter(valid_568253, JString, required = true,
                                 default = nil)
  if valid_568253 != nil:
    section.add "subscriptionId", valid_568253
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568254 = query.getOrDefault("api-version")
  valid_568254 = validateParameter(valid_568254, JString, required = true,
                                 default = nil)
  if valid_568254 != nil:
    section.add "api-version", valid_568254
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568256: Call_WebAppsUpdate_568248; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_568256.validator(path, query, header, formData, body)
  let scheme = call_568256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568256.url(scheme.get, call_568256.host, call_568256.base,
                         call_568256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568256, url, valid)

proc call*(call_568257: Call_WebAppsUpdate_568248; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568258 = newJObject()
  var query_568259 = newJObject()
  var body_568260 = newJObject()
  if siteEnvelope != nil:
    body_568260 = siteEnvelope
  add(path_568258, "resourceGroupName", newJString(resourceGroupName))
  add(query_568259, "api-version", newJString(apiVersion))
  add(path_568258, "name", newJString(name))
  add(path_568258, "subscriptionId", newJString(subscriptionId))
  result = call_568257.call(path_568258, query_568259, nil, nil, body_568260)

var webAppsUpdate* = Call_WebAppsUpdate_568248(name: "webAppsUpdate",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsUpdate_568249, base: "", url: url_WebAppsUpdate_568250,
    schemes: {Scheme.Https})
type
  Call_WebAppsDelete_568235 = ref object of OpenApiRestCall_567666
proc url_WebAppsDelete_568237(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDelete_568236(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568238 = path.getOrDefault("resourceGroupName")
  valid_568238 = validateParameter(valid_568238, JString, required = true,
                                 default = nil)
  if valid_568238 != nil:
    section.add "resourceGroupName", valid_568238
  var valid_568239 = path.getOrDefault("name")
  valid_568239 = validateParameter(valid_568239, JString, required = true,
                                 default = nil)
  if valid_568239 != nil:
    section.add "name", valid_568239
  var valid_568240 = path.getOrDefault("subscriptionId")
  valid_568240 = validateParameter(valid_568240, JString, required = true,
                                 default = nil)
  if valid_568240 != nil:
    section.add "subscriptionId", valid_568240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568241 = query.getOrDefault("api-version")
  valid_568241 = validateParameter(valid_568241, JString, required = true,
                                 default = nil)
  if valid_568241 != nil:
    section.add "api-version", valid_568241
  var valid_568242 = query.getOrDefault("deleteMetrics")
  valid_568242 = validateParameter(valid_568242, JBool, required = false, default = nil)
  if valid_568242 != nil:
    section.add "deleteMetrics", valid_568242
  var valid_568243 = query.getOrDefault("deleteEmptyServerFarm")
  valid_568243 = validateParameter(valid_568243, JBool, required = false, default = nil)
  if valid_568243 != nil:
    section.add "deleteEmptyServerFarm", valid_568243
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568244: Call_WebAppsDelete_568235; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_568244.validator(path, query, header, formData, body)
  let scheme = call_568244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568244.url(scheme.get, call_568244.host, call_568244.base,
                         call_568244.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568244, url, valid)

proc call*(call_568245: Call_WebAppsDelete_568235; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          deleteMetrics: bool = false; deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDelete
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_568246 = newJObject()
  var query_568247 = newJObject()
  add(path_568246, "resourceGroupName", newJString(resourceGroupName))
  add(query_568247, "api-version", newJString(apiVersion))
  add(path_568246, "name", newJString(name))
  add(path_568246, "subscriptionId", newJString(subscriptionId))
  add(query_568247, "deleteMetrics", newJBool(deleteMetrics))
  add(query_568247, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_568245.call(path_568246, query_568247, nil, nil, nil)

var webAppsDelete* = Call_WebAppsDelete_568235(name: "webAppsDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsDelete_568236, base: "", url: url_WebAppsDelete_568237,
    schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostname_568261 = ref object of OpenApiRestCall_567666
proc url_WebAppsAnalyzeCustomHostname_568263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostname_568262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568264 = path.getOrDefault("resourceGroupName")
  valid_568264 = validateParameter(valid_568264, JString, required = true,
                                 default = nil)
  if valid_568264 != nil:
    section.add "resourceGroupName", valid_568264
  var valid_568265 = path.getOrDefault("name")
  valid_568265 = validateParameter(valid_568265, JString, required = true,
                                 default = nil)
  if valid_568265 != nil:
    section.add "name", valid_568265
  var valid_568266 = path.getOrDefault("subscriptionId")
  valid_568266 = validateParameter(valid_568266, JString, required = true,
                                 default = nil)
  if valid_568266 != nil:
    section.add "subscriptionId", valid_568266
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568267 = query.getOrDefault("api-version")
  valid_568267 = validateParameter(valid_568267, JString, required = true,
                                 default = nil)
  if valid_568267 != nil:
    section.add "api-version", valid_568267
  var valid_568268 = query.getOrDefault("hostName")
  valid_568268 = validateParameter(valid_568268, JString, required = false,
                                 default = nil)
  if valid_568268 != nil:
    section.add "hostName", valid_568268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568269: Call_WebAppsAnalyzeCustomHostname_568261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_568269.validator(path, query, header, formData, body)
  let scheme = call_568269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568269.url(scheme.get, call_568269.host, call_568269.base,
                         call_568269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568269, url, valid)

proc call*(call_568270: Call_WebAppsAnalyzeCustomHostname_568261;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostname
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568271 = newJObject()
  var query_568272 = newJObject()
  add(path_568271, "resourceGroupName", newJString(resourceGroupName))
  add(query_568272, "api-version", newJString(apiVersion))
  add(path_568271, "name", newJString(name))
  add(query_568272, "hostName", newJString(hostName))
  add(path_568271, "subscriptionId", newJString(subscriptionId))
  result = call_568270.call(path_568271, query_568272, nil, nil, nil)

var webAppsAnalyzeCustomHostname* = Call_WebAppsAnalyzeCustomHostname_568261(
    name: "webAppsAnalyzeCustomHostname", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostname_568262, base: "",
    url: url_WebAppsAnalyzeCustomHostname_568263, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigToProduction_568273 = ref object of OpenApiRestCall_567666
proc url_WebAppsApplySlotConfigToProduction_568275(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigToProduction_568274(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568276 = path.getOrDefault("resourceGroupName")
  valid_568276 = validateParameter(valid_568276, JString, required = true,
                                 default = nil)
  if valid_568276 != nil:
    section.add "resourceGroupName", valid_568276
  var valid_568277 = path.getOrDefault("name")
  valid_568277 = validateParameter(valid_568277, JString, required = true,
                                 default = nil)
  if valid_568277 != nil:
    section.add "name", valid_568277
  var valid_568278 = path.getOrDefault("subscriptionId")
  valid_568278 = validateParameter(valid_568278, JString, required = true,
                                 default = nil)
  if valid_568278 != nil:
    section.add "subscriptionId", valid_568278
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568279 = query.getOrDefault("api-version")
  valid_568279 = validateParameter(valid_568279, JString, required = true,
                                 default = nil)
  if valid_568279 != nil:
    section.add "api-version", valid_568279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568281: Call_WebAppsApplySlotConfigToProduction_568273;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_568281.validator(path, query, header, formData, body)
  let scheme = call_568281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568281.url(scheme.get, call_568281.host, call_568281.base,
                         call_568281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568281, url, valid)

proc call*(call_568282: Call_WebAppsApplySlotConfigToProduction_568273;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigToProduction
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_568283 = newJObject()
  var query_568284 = newJObject()
  var body_568285 = newJObject()
  add(path_568283, "resourceGroupName", newJString(resourceGroupName))
  add(query_568284, "api-version", newJString(apiVersion))
  add(path_568283, "name", newJString(name))
  add(path_568283, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_568285 = slotSwapEntity
  result = call_568282.call(path_568283, query_568284, nil, nil, body_568285)

var webAppsApplySlotConfigToProduction* = Call_WebAppsApplySlotConfigToProduction_568273(
    name: "webAppsApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigToProduction_568274, base: "",
    url: url_WebAppsApplySlotConfigToProduction_568275, schemes: {Scheme.Https})
type
  Call_WebAppsBackup_568286 = ref object of OpenApiRestCall_567666
proc url_WebAppsBackup_568288(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackup_568287(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568289 = path.getOrDefault("resourceGroupName")
  valid_568289 = validateParameter(valid_568289, JString, required = true,
                                 default = nil)
  if valid_568289 != nil:
    section.add "resourceGroupName", valid_568289
  var valid_568290 = path.getOrDefault("name")
  valid_568290 = validateParameter(valid_568290, JString, required = true,
                                 default = nil)
  if valid_568290 != nil:
    section.add "name", valid_568290
  var valid_568291 = path.getOrDefault("subscriptionId")
  valid_568291 = validateParameter(valid_568291, JString, required = true,
                                 default = nil)
  if valid_568291 != nil:
    section.add "subscriptionId", valid_568291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568292 = query.getOrDefault("api-version")
  valid_568292 = validateParameter(valid_568292, JString, required = true,
                                 default = nil)
  if valid_568292 != nil:
    section.add "api-version", valid_568292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568294: Call_WebAppsBackup_568286; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_568294.validator(path, query, header, formData, body)
  let scheme = call_568294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568294.url(scheme.get, call_568294.host, call_568294.base,
                         call_568294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568294, url, valid)

proc call*(call_568295: Call_WebAppsBackup_568286; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsBackup
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_568296 = newJObject()
  var query_568297 = newJObject()
  var body_568298 = newJObject()
  add(path_568296, "resourceGroupName", newJString(resourceGroupName))
  add(query_568297, "api-version", newJString(apiVersion))
  add(path_568296, "name", newJString(name))
  add(path_568296, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568298 = request
  result = call_568295.call(path_568296, query_568297, nil, nil, body_568298)

var webAppsBackup* = Call_WebAppsBackup_568286(name: "webAppsBackup",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_WebAppsBackup_568287, base: "", url: url_WebAppsBackup_568288,
    schemes: {Scheme.Https})
type
  Call_WebAppsListBackups_568299 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackups_568301(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackups_568300(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568302 = path.getOrDefault("resourceGroupName")
  valid_568302 = validateParameter(valid_568302, JString, required = true,
                                 default = nil)
  if valid_568302 != nil:
    section.add "resourceGroupName", valid_568302
  var valid_568303 = path.getOrDefault("name")
  valid_568303 = validateParameter(valid_568303, JString, required = true,
                                 default = nil)
  if valid_568303 != nil:
    section.add "name", valid_568303
  var valid_568304 = path.getOrDefault("subscriptionId")
  valid_568304 = validateParameter(valid_568304, JString, required = true,
                                 default = nil)
  if valid_568304 != nil:
    section.add "subscriptionId", valid_568304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568305 = query.getOrDefault("api-version")
  valid_568305 = validateParameter(valid_568305, JString, required = true,
                                 default = nil)
  if valid_568305 != nil:
    section.add "api-version", valid_568305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568306: Call_WebAppsListBackups_568299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_568306.validator(path, query, header, formData, body)
  let scheme = call_568306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568306.url(scheme.get, call_568306.host, call_568306.base,
                         call_568306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568306, url, valid)

proc call*(call_568307: Call_WebAppsListBackups_568299; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListBackups
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568308 = newJObject()
  var query_568309 = newJObject()
  add(path_568308, "resourceGroupName", newJString(resourceGroupName))
  add(query_568309, "api-version", newJString(apiVersion))
  add(path_568308, "name", newJString(name))
  add(path_568308, "subscriptionId", newJString(subscriptionId))
  result = call_568307.call(path_568308, query_568309, nil, nil, nil)

var webAppsListBackups* = Call_WebAppsListBackups_568299(
    name: "webAppsListBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_WebAppsListBackups_568300, base: "",
    url: url_WebAppsListBackups_568301, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverRestore_568310 = ref object of OpenApiRestCall_567666
proc url_WebAppsDiscoverRestore_568312(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverRestore_568311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568313 = path.getOrDefault("resourceGroupName")
  valid_568313 = validateParameter(valid_568313, JString, required = true,
                                 default = nil)
  if valid_568313 != nil:
    section.add "resourceGroupName", valid_568313
  var valid_568314 = path.getOrDefault("name")
  valid_568314 = validateParameter(valid_568314, JString, required = true,
                                 default = nil)
  if valid_568314 != nil:
    section.add "name", valid_568314
  var valid_568315 = path.getOrDefault("subscriptionId")
  valid_568315 = validateParameter(valid_568315, JString, required = true,
                                 default = nil)
  if valid_568315 != nil:
    section.add "subscriptionId", valid_568315
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568316 = query.getOrDefault("api-version")
  valid_568316 = validateParameter(valid_568316, JString, required = true,
                                 default = nil)
  if valid_568316 != nil:
    section.add "api-version", valid_568316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568318: Call_WebAppsDiscoverRestore_568310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  let valid = call_568318.validator(path, query, header, formData, body)
  let scheme = call_568318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568318.url(scheme.get, call_568318.host, call_568318.base,
                         call_568318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568318, url, valid)

proc call*(call_568319: Call_WebAppsDiscoverRestore_568310;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverRestore
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_568320 = newJObject()
  var query_568321 = newJObject()
  var body_568322 = newJObject()
  add(path_568320, "resourceGroupName", newJString(resourceGroupName))
  add(query_568321, "api-version", newJString(apiVersion))
  add(path_568320, "name", newJString(name))
  add(path_568320, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568322 = request
  result = call_568319.call(path_568320, query_568321, nil, nil, body_568322)

var webAppsDiscoverRestore* = Call_WebAppsDiscoverRestore_568310(
    name: "webAppsDiscoverRestore", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
    validator: validate_WebAppsDiscoverRestore_568311, base: "",
    url: url_WebAppsDiscoverRestore_568312, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatus_568323 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupStatus_568325(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatus_568324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568326 = path.getOrDefault("resourceGroupName")
  valid_568326 = validateParameter(valid_568326, JString, required = true,
                                 default = nil)
  if valid_568326 != nil:
    section.add "resourceGroupName", valid_568326
  var valid_568327 = path.getOrDefault("name")
  valid_568327 = validateParameter(valid_568327, JString, required = true,
                                 default = nil)
  if valid_568327 != nil:
    section.add "name", valid_568327
  var valid_568328 = path.getOrDefault("subscriptionId")
  valid_568328 = validateParameter(valid_568328, JString, required = true,
                                 default = nil)
  if valid_568328 != nil:
    section.add "subscriptionId", valid_568328
  var valid_568329 = path.getOrDefault("backupId")
  valid_568329 = validateParameter(valid_568329, JString, required = true,
                                 default = nil)
  if valid_568329 != nil:
    section.add "backupId", valid_568329
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568330 = query.getOrDefault("api-version")
  valid_568330 = validateParameter(valid_568330, JString, required = true,
                                 default = nil)
  if valid_568330 != nil:
    section.add "api-version", valid_568330
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568331: Call_WebAppsGetBackupStatus_568323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_568331.validator(path, query, header, formData, body)
  let scheme = call_568331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568331.url(scheme.get, call_568331.host, call_568331.base,
                         call_568331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568331, url, valid)

proc call*(call_568332: Call_WebAppsGetBackupStatus_568323;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatus
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_568333 = newJObject()
  var query_568334 = newJObject()
  add(path_568333, "resourceGroupName", newJString(resourceGroupName))
  add(query_568334, "api-version", newJString(apiVersion))
  add(path_568333, "name", newJString(name))
  add(path_568333, "subscriptionId", newJString(subscriptionId))
  add(path_568333, "backupId", newJString(backupId))
  result = call_568332.call(path_568333, query_568334, nil, nil, nil)

var webAppsGetBackupStatus* = Call_WebAppsGetBackupStatus_568323(
    name: "webAppsGetBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatus_568324, base: "",
    url: url_WebAppsGetBackupStatus_568325, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackup_568335 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackup_568337(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackup_568336(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568338 = path.getOrDefault("resourceGroupName")
  valid_568338 = validateParameter(valid_568338, JString, required = true,
                                 default = nil)
  if valid_568338 != nil:
    section.add "resourceGroupName", valid_568338
  var valid_568339 = path.getOrDefault("name")
  valid_568339 = validateParameter(valid_568339, JString, required = true,
                                 default = nil)
  if valid_568339 != nil:
    section.add "name", valid_568339
  var valid_568340 = path.getOrDefault("subscriptionId")
  valid_568340 = validateParameter(valid_568340, JString, required = true,
                                 default = nil)
  if valid_568340 != nil:
    section.add "subscriptionId", valid_568340
  var valid_568341 = path.getOrDefault("backupId")
  valid_568341 = validateParameter(valid_568341, JString, required = true,
                                 default = nil)
  if valid_568341 != nil:
    section.add "backupId", valid_568341
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568342 = query.getOrDefault("api-version")
  valid_568342 = validateParameter(valid_568342, JString, required = true,
                                 default = nil)
  if valid_568342 != nil:
    section.add "api-version", valid_568342
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568343: Call_WebAppsDeleteBackup_568335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_568343.validator(path, query, header, formData, body)
  let scheme = call_568343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568343.url(scheme.get, call_568343.host, call_568343.base,
                         call_568343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568343, url, valid)

proc call*(call_568344: Call_WebAppsDeleteBackup_568335; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackup
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_568345 = newJObject()
  var query_568346 = newJObject()
  add(path_568345, "resourceGroupName", newJString(resourceGroupName))
  add(query_568346, "api-version", newJString(apiVersion))
  add(path_568345, "name", newJString(name))
  add(path_568345, "subscriptionId", newJString(subscriptionId))
  add(path_568345, "backupId", newJString(backupId))
  result = call_568344.call(path_568345, query_568346, nil, nil, nil)

var webAppsDeleteBackup* = Call_WebAppsDeleteBackup_568335(
    name: "webAppsDeleteBackup", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackup_568336, base: "",
    url: url_WebAppsDeleteBackup_568337, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecrets_568347 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackupStatusSecrets_568349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecrets_568348(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568350 = path.getOrDefault("resourceGroupName")
  valid_568350 = validateParameter(valid_568350, JString, required = true,
                                 default = nil)
  if valid_568350 != nil:
    section.add "resourceGroupName", valid_568350
  var valid_568351 = path.getOrDefault("name")
  valid_568351 = validateParameter(valid_568351, JString, required = true,
                                 default = nil)
  if valid_568351 != nil:
    section.add "name", valid_568351
  var valid_568352 = path.getOrDefault("subscriptionId")
  valid_568352 = validateParameter(valid_568352, JString, required = true,
                                 default = nil)
  if valid_568352 != nil:
    section.add "subscriptionId", valid_568352
  var valid_568353 = path.getOrDefault("backupId")
  valid_568353 = validateParameter(valid_568353, JString, required = true,
                                 default = nil)
  if valid_568353 != nil:
    section.add "backupId", valid_568353
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568354 = query.getOrDefault("api-version")
  valid_568354 = validateParameter(valid_568354, JString, required = true,
                                 default = nil)
  if valid_568354 != nil:
    section.add "api-version", valid_568354
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568356: Call_WebAppsListBackupStatusSecrets_568347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_568356.validator(path, query, header, formData, body)
  let scheme = call_568356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568356.url(scheme.get, call_568356.host, call_568356.base,
                         call_568356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568356, url, valid)

proc call*(call_568357: Call_WebAppsListBackupStatusSecrets_568347;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecrets
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_568358 = newJObject()
  var query_568359 = newJObject()
  var body_568360 = newJObject()
  add(path_568358, "resourceGroupName", newJString(resourceGroupName))
  add(query_568359, "api-version", newJString(apiVersion))
  add(path_568358, "name", newJString(name))
  add(path_568358, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568360 = request
  add(path_568358, "backupId", newJString(backupId))
  result = call_568357.call(path_568358, query_568359, nil, nil, body_568360)

var webAppsListBackupStatusSecrets* = Call_WebAppsListBackupStatusSecrets_568347(
    name: "webAppsListBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecrets_568348, base: "",
    url: url_WebAppsListBackupStatusSecrets_568349, schemes: {Scheme.Https})
type
  Call_WebAppsRestore_568361 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestore_568363(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestore_568362(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568364 = path.getOrDefault("resourceGroupName")
  valid_568364 = validateParameter(valid_568364, JString, required = true,
                                 default = nil)
  if valid_568364 != nil:
    section.add "resourceGroupName", valid_568364
  var valid_568365 = path.getOrDefault("name")
  valid_568365 = validateParameter(valid_568365, JString, required = true,
                                 default = nil)
  if valid_568365 != nil:
    section.add "name", valid_568365
  var valid_568366 = path.getOrDefault("subscriptionId")
  valid_568366 = validateParameter(valid_568366, JString, required = true,
                                 default = nil)
  if valid_568366 != nil:
    section.add "subscriptionId", valid_568366
  var valid_568367 = path.getOrDefault("backupId")
  valid_568367 = validateParameter(valid_568367, JString, required = true,
                                 default = nil)
  if valid_568367 != nil:
    section.add "backupId", valid_568367
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568368 = query.getOrDefault("api-version")
  valid_568368 = validateParameter(valid_568368, JString, required = true,
                                 default = nil)
  if valid_568368 != nil:
    section.add "api-version", valid_568368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568370: Call_WebAppsRestore_568361; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_568370.validator(path, query, header, formData, body)
  let scheme = call_568370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568370.url(scheme.get, call_568370.host, call_568370.base,
                         call_568370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568370, url, valid)

proc call*(call_568371: Call_WebAppsRestore_568361; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode;
          backupId: string): Recallable =
  ## webAppsRestore
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_568372 = newJObject()
  var query_568373 = newJObject()
  var body_568374 = newJObject()
  add(path_568372, "resourceGroupName", newJString(resourceGroupName))
  add(query_568373, "api-version", newJString(apiVersion))
  add(path_568372, "name", newJString(name))
  add(path_568372, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568374 = request
  add(path_568372, "backupId", newJString(backupId))
  result = call_568371.call(path_568372, query_568373, nil, nil, body_568374)

var webAppsRestore* = Call_WebAppsRestore_568361(name: "webAppsRestore",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_WebAppsRestore_568362, base: "", url: url_WebAppsRestore_568363,
    schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurations_568375 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurations_568377(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurations_568376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568378 = path.getOrDefault("resourceGroupName")
  valid_568378 = validateParameter(valid_568378, JString, required = true,
                                 default = nil)
  if valid_568378 != nil:
    section.add "resourceGroupName", valid_568378
  var valid_568379 = path.getOrDefault("name")
  valid_568379 = validateParameter(valid_568379, JString, required = true,
                                 default = nil)
  if valid_568379 != nil:
    section.add "name", valid_568379
  var valid_568380 = path.getOrDefault("subscriptionId")
  valid_568380 = validateParameter(valid_568380, JString, required = true,
                                 default = nil)
  if valid_568380 != nil:
    section.add "subscriptionId", valid_568380
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568381 = query.getOrDefault("api-version")
  valid_568381 = validateParameter(valid_568381, JString, required = true,
                                 default = nil)
  if valid_568381 != nil:
    section.add "api-version", valid_568381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568382: Call_WebAppsListConfigurations_568375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_568382.validator(path, query, header, formData, body)
  let scheme = call_568382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568382.url(scheme.get, call_568382.host, call_568382.base,
                         call_568382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568382, url, valid)

proc call*(call_568383: Call_WebAppsListConfigurations_568375;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurations
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568384 = newJObject()
  var query_568385 = newJObject()
  add(path_568384, "resourceGroupName", newJString(resourceGroupName))
  add(query_568385, "api-version", newJString(apiVersion))
  add(path_568384, "name", newJString(name))
  add(path_568384, "subscriptionId", newJString(subscriptionId))
  result = call_568383.call(path_568384, query_568385, nil, nil, nil)

var webAppsListConfigurations* = Call_WebAppsListConfigurations_568375(
    name: "webAppsListConfigurations", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    validator: validate_WebAppsListConfigurations_568376, base: "",
    url: url_WebAppsListConfigurations_568377, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettings_568386 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateApplicationSettings_568388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettings_568387(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568389 = path.getOrDefault("resourceGroupName")
  valid_568389 = validateParameter(valid_568389, JString, required = true,
                                 default = nil)
  if valid_568389 != nil:
    section.add "resourceGroupName", valid_568389
  var valid_568390 = path.getOrDefault("name")
  valid_568390 = validateParameter(valid_568390, JString, required = true,
                                 default = nil)
  if valid_568390 != nil:
    section.add "name", valid_568390
  var valid_568391 = path.getOrDefault("subscriptionId")
  valid_568391 = validateParameter(valid_568391, JString, required = true,
                                 default = nil)
  if valid_568391 != nil:
    section.add "subscriptionId", valid_568391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568392 = query.getOrDefault("api-version")
  valid_568392 = validateParameter(valid_568392, JString, required = true,
                                 default = nil)
  if valid_568392 != nil:
    section.add "api-version", valid_568392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568394: Call_WebAppsUpdateApplicationSettings_568386;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_568394.validator(path, query, header, formData, body)
  let scheme = call_568394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568394.url(scheme.get, call_568394.host, call_568394.base,
                         call_568394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568394, url, valid)

proc call*(call_568395: Call_WebAppsUpdateApplicationSettings_568386;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettings
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568396 = newJObject()
  var query_568397 = newJObject()
  var body_568398 = newJObject()
  add(path_568396, "resourceGroupName", newJString(resourceGroupName))
  add(query_568397, "api-version", newJString(apiVersion))
  add(path_568396, "name", newJString(name))
  if appSettings != nil:
    body_568398 = appSettings
  add(path_568396, "subscriptionId", newJString(subscriptionId))
  result = call_568395.call(path_568396, query_568397, nil, nil, body_568398)

var webAppsUpdateApplicationSettings* = Call_WebAppsUpdateApplicationSettings_568386(
    name: "webAppsUpdateApplicationSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettings_568387, base: "",
    url: url_WebAppsUpdateApplicationSettings_568388, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettings_568399 = ref object of OpenApiRestCall_567666
proc url_WebAppsListApplicationSettings_568401(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettings_568400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568402 = path.getOrDefault("resourceGroupName")
  valid_568402 = validateParameter(valid_568402, JString, required = true,
                                 default = nil)
  if valid_568402 != nil:
    section.add "resourceGroupName", valid_568402
  var valid_568403 = path.getOrDefault("name")
  valid_568403 = validateParameter(valid_568403, JString, required = true,
                                 default = nil)
  if valid_568403 != nil:
    section.add "name", valid_568403
  var valid_568404 = path.getOrDefault("subscriptionId")
  valid_568404 = validateParameter(valid_568404, JString, required = true,
                                 default = nil)
  if valid_568404 != nil:
    section.add "subscriptionId", valid_568404
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568405 = query.getOrDefault("api-version")
  valid_568405 = validateParameter(valid_568405, JString, required = true,
                                 default = nil)
  if valid_568405 != nil:
    section.add "api-version", valid_568405
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568406: Call_WebAppsListApplicationSettings_568399; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_568406.validator(path, query, header, formData, body)
  let scheme = call_568406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568406.url(scheme.get, call_568406.host, call_568406.base,
                         call_568406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568406, url, valid)

proc call*(call_568407: Call_WebAppsListApplicationSettings_568399;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettings
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568408 = newJObject()
  var query_568409 = newJObject()
  add(path_568408, "resourceGroupName", newJString(resourceGroupName))
  add(query_568409, "api-version", newJString(apiVersion))
  add(path_568408, "name", newJString(name))
  add(path_568408, "subscriptionId", newJString(subscriptionId))
  result = call_568407.call(path_568408, query_568409, nil, nil, nil)

var webAppsListApplicationSettings* = Call_WebAppsListApplicationSettings_568399(
    name: "webAppsListApplicationSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettings_568400, base: "",
    url: url_WebAppsListApplicationSettings_568401, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettings_568410 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateAuthSettings_568412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettings_568411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568413 = path.getOrDefault("resourceGroupName")
  valid_568413 = validateParameter(valid_568413, JString, required = true,
                                 default = nil)
  if valid_568413 != nil:
    section.add "resourceGroupName", valid_568413
  var valid_568414 = path.getOrDefault("name")
  valid_568414 = validateParameter(valid_568414, JString, required = true,
                                 default = nil)
  if valid_568414 != nil:
    section.add "name", valid_568414
  var valid_568415 = path.getOrDefault("subscriptionId")
  valid_568415 = validateParameter(valid_568415, JString, required = true,
                                 default = nil)
  if valid_568415 != nil:
    section.add "subscriptionId", valid_568415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568416 = query.getOrDefault("api-version")
  valid_568416 = validateParameter(valid_568416, JString, required = true,
                                 default = nil)
  if valid_568416 != nil:
    section.add "api-version", valid_568416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568418: Call_WebAppsUpdateAuthSettings_568410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_568418.validator(path, query, header, formData, body)
  let scheme = call_568418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568418.url(scheme.get, call_568418.host, call_568418.base,
                         call_568418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568418, url, valid)

proc call*(call_568419: Call_WebAppsUpdateAuthSettings_568410;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettings
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_568420 = newJObject()
  var query_568421 = newJObject()
  var body_568422 = newJObject()
  add(path_568420, "resourceGroupName", newJString(resourceGroupName))
  add(query_568421, "api-version", newJString(apiVersion))
  add(path_568420, "name", newJString(name))
  add(path_568420, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_568422 = siteAuthSettings
  result = call_568419.call(path_568420, query_568421, nil, nil, body_568422)

var webAppsUpdateAuthSettings* = Call_WebAppsUpdateAuthSettings_568410(
    name: "webAppsUpdateAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettings_568411, base: "",
    url: url_WebAppsUpdateAuthSettings_568412, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettings_568423 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetAuthSettings_568425(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettings_568424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568426 = path.getOrDefault("resourceGroupName")
  valid_568426 = validateParameter(valid_568426, JString, required = true,
                                 default = nil)
  if valid_568426 != nil:
    section.add "resourceGroupName", valid_568426
  var valid_568427 = path.getOrDefault("name")
  valid_568427 = validateParameter(valid_568427, JString, required = true,
                                 default = nil)
  if valid_568427 != nil:
    section.add "name", valid_568427
  var valid_568428 = path.getOrDefault("subscriptionId")
  valid_568428 = validateParameter(valid_568428, JString, required = true,
                                 default = nil)
  if valid_568428 != nil:
    section.add "subscriptionId", valid_568428
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568429 = query.getOrDefault("api-version")
  valid_568429 = validateParameter(valid_568429, JString, required = true,
                                 default = nil)
  if valid_568429 != nil:
    section.add "api-version", valid_568429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568430: Call_WebAppsGetAuthSettings_568423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_568430.validator(path, query, header, formData, body)
  let scheme = call_568430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568430.url(scheme.get, call_568430.host, call_568430.base,
                         call_568430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568430, url, valid)

proc call*(call_568431: Call_WebAppsGetAuthSettings_568423;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettings
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568432 = newJObject()
  var query_568433 = newJObject()
  add(path_568432, "resourceGroupName", newJString(resourceGroupName))
  add(query_568433, "api-version", newJString(apiVersion))
  add(path_568432, "name", newJString(name))
  add(path_568432, "subscriptionId", newJString(subscriptionId))
  result = call_568431.call(path_568432, query_568433, nil, nil, nil)

var webAppsGetAuthSettings* = Call_WebAppsGetAuthSettings_568423(
    name: "webAppsGetAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettings_568424, base: "",
    url: url_WebAppsGetAuthSettings_568425, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfiguration_568434 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateBackupConfiguration_568436(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfiguration_568435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568437 = path.getOrDefault("resourceGroupName")
  valid_568437 = validateParameter(valid_568437, JString, required = true,
                                 default = nil)
  if valid_568437 != nil:
    section.add "resourceGroupName", valid_568437
  var valid_568438 = path.getOrDefault("name")
  valid_568438 = validateParameter(valid_568438, JString, required = true,
                                 default = nil)
  if valid_568438 != nil:
    section.add "name", valid_568438
  var valid_568439 = path.getOrDefault("subscriptionId")
  valid_568439 = validateParameter(valid_568439, JString, required = true,
                                 default = nil)
  if valid_568439 != nil:
    section.add "subscriptionId", valid_568439
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568440 = query.getOrDefault("api-version")
  valid_568440 = validateParameter(valid_568440, JString, required = true,
                                 default = nil)
  if valid_568440 != nil:
    section.add "api-version", valid_568440
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568442: Call_WebAppsUpdateBackupConfiguration_568434;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_568442.validator(path, query, header, formData, body)
  let scheme = call_568442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568442.url(scheme.get, call_568442.host, call_568442.base,
                         call_568442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568442, url, valid)

proc call*(call_568443: Call_WebAppsUpdateBackupConfiguration_568434;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfiguration
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_568444 = newJObject()
  var query_568445 = newJObject()
  var body_568446 = newJObject()
  add(path_568444, "resourceGroupName", newJString(resourceGroupName))
  add(query_568445, "api-version", newJString(apiVersion))
  add(path_568444, "name", newJString(name))
  add(path_568444, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568446 = request
  result = call_568443.call(path_568444, query_568445, nil, nil, body_568446)

var webAppsUpdateBackupConfiguration* = Call_WebAppsUpdateBackupConfiguration_568434(
    name: "webAppsUpdateBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsUpdateBackupConfiguration_568435, base: "",
    url: url_WebAppsUpdateBackupConfiguration_568436, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfiguration_568447 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackupConfiguration_568449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfiguration_568448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568450 = path.getOrDefault("resourceGroupName")
  valid_568450 = validateParameter(valid_568450, JString, required = true,
                                 default = nil)
  if valid_568450 != nil:
    section.add "resourceGroupName", valid_568450
  var valid_568451 = path.getOrDefault("name")
  valid_568451 = validateParameter(valid_568451, JString, required = true,
                                 default = nil)
  if valid_568451 != nil:
    section.add "name", valid_568451
  var valid_568452 = path.getOrDefault("subscriptionId")
  valid_568452 = validateParameter(valid_568452, JString, required = true,
                                 default = nil)
  if valid_568452 != nil:
    section.add "subscriptionId", valid_568452
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568453 = query.getOrDefault("api-version")
  valid_568453 = validateParameter(valid_568453, JString, required = true,
                                 default = nil)
  if valid_568453 != nil:
    section.add "api-version", valid_568453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568454: Call_WebAppsDeleteBackupConfiguration_568447;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_568454.validator(path, query, header, formData, body)
  let scheme = call_568454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568454.url(scheme.get, call_568454.host, call_568454.base,
                         call_568454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568454, url, valid)

proc call*(call_568455: Call_WebAppsDeleteBackupConfiguration_568447;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfiguration
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568456 = newJObject()
  var query_568457 = newJObject()
  add(path_568456, "resourceGroupName", newJString(resourceGroupName))
  add(query_568457, "api-version", newJString(apiVersion))
  add(path_568456, "name", newJString(name))
  add(path_568456, "subscriptionId", newJString(subscriptionId))
  result = call_568455.call(path_568456, query_568457, nil, nil, nil)

var webAppsDeleteBackupConfiguration* = Call_WebAppsDeleteBackupConfiguration_568447(
    name: "webAppsDeleteBackupConfiguration", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsDeleteBackupConfiguration_568448, base: "",
    url: url_WebAppsDeleteBackupConfiguration_568449, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfiguration_568458 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupConfiguration_568460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfiguration_568459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568461 = path.getOrDefault("resourceGroupName")
  valid_568461 = validateParameter(valid_568461, JString, required = true,
                                 default = nil)
  if valid_568461 != nil:
    section.add "resourceGroupName", valid_568461
  var valid_568462 = path.getOrDefault("name")
  valid_568462 = validateParameter(valid_568462, JString, required = true,
                                 default = nil)
  if valid_568462 != nil:
    section.add "name", valid_568462
  var valid_568463 = path.getOrDefault("subscriptionId")
  valid_568463 = validateParameter(valid_568463, JString, required = true,
                                 default = nil)
  if valid_568463 != nil:
    section.add "subscriptionId", valid_568463
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568464 = query.getOrDefault("api-version")
  valid_568464 = validateParameter(valid_568464, JString, required = true,
                                 default = nil)
  if valid_568464 != nil:
    section.add "api-version", valid_568464
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568465: Call_WebAppsGetBackupConfiguration_568458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_568465.validator(path, query, header, formData, body)
  let scheme = call_568465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568465.url(scheme.get, call_568465.host, call_568465.base,
                         call_568465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568465, url, valid)

proc call*(call_568466: Call_WebAppsGetBackupConfiguration_568458;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfiguration
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568467 = newJObject()
  var query_568468 = newJObject()
  add(path_568467, "resourceGroupName", newJString(resourceGroupName))
  add(query_568468, "api-version", newJString(apiVersion))
  add(path_568467, "name", newJString(name))
  add(path_568467, "subscriptionId", newJString(subscriptionId))
  result = call_568466.call(path_568467, query_568468, nil, nil, nil)

var webAppsGetBackupConfiguration* = Call_WebAppsGetBackupConfiguration_568458(
    name: "webAppsGetBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_WebAppsGetBackupConfiguration_568459, base: "",
    url: url_WebAppsGetBackupConfiguration_568460, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStrings_568469 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConnectionStrings_568471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStrings_568470(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568472 = path.getOrDefault("resourceGroupName")
  valid_568472 = validateParameter(valid_568472, JString, required = true,
                                 default = nil)
  if valid_568472 != nil:
    section.add "resourceGroupName", valid_568472
  var valid_568473 = path.getOrDefault("name")
  valid_568473 = validateParameter(valid_568473, JString, required = true,
                                 default = nil)
  if valid_568473 != nil:
    section.add "name", valid_568473
  var valid_568474 = path.getOrDefault("subscriptionId")
  valid_568474 = validateParameter(valid_568474, JString, required = true,
                                 default = nil)
  if valid_568474 != nil:
    section.add "subscriptionId", valid_568474
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568475 = query.getOrDefault("api-version")
  valid_568475 = validateParameter(valid_568475, JString, required = true,
                                 default = nil)
  if valid_568475 != nil:
    section.add "api-version", valid_568475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568477: Call_WebAppsUpdateConnectionStrings_568469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_568477.validator(path, query, header, formData, body)
  let scheme = call_568477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568477.url(scheme.get, call_568477.host, call_568477.base,
                         call_568477.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568477, url, valid)

proc call*(call_568478: Call_WebAppsUpdateConnectionStrings_568469;
          resourceGroupName: string; apiVersion: string; name: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStrings
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568479 = newJObject()
  var query_568480 = newJObject()
  var body_568481 = newJObject()
  add(path_568479, "resourceGroupName", newJString(resourceGroupName))
  add(query_568480, "api-version", newJString(apiVersion))
  add(path_568479, "name", newJString(name))
  if connectionStrings != nil:
    body_568481 = connectionStrings
  add(path_568479, "subscriptionId", newJString(subscriptionId))
  result = call_568478.call(path_568479, query_568480, nil, nil, body_568481)

var webAppsUpdateConnectionStrings* = Call_WebAppsUpdateConnectionStrings_568469(
    name: "webAppsUpdateConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStrings_568470, base: "",
    url: url_WebAppsUpdateConnectionStrings_568471, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStrings_568482 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConnectionStrings_568484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStrings_568483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568485 = path.getOrDefault("resourceGroupName")
  valid_568485 = validateParameter(valid_568485, JString, required = true,
                                 default = nil)
  if valid_568485 != nil:
    section.add "resourceGroupName", valid_568485
  var valid_568486 = path.getOrDefault("name")
  valid_568486 = validateParameter(valid_568486, JString, required = true,
                                 default = nil)
  if valid_568486 != nil:
    section.add "name", valid_568486
  var valid_568487 = path.getOrDefault("subscriptionId")
  valid_568487 = validateParameter(valid_568487, JString, required = true,
                                 default = nil)
  if valid_568487 != nil:
    section.add "subscriptionId", valid_568487
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568488 = query.getOrDefault("api-version")
  valid_568488 = validateParameter(valid_568488, JString, required = true,
                                 default = nil)
  if valid_568488 != nil:
    section.add "api-version", valid_568488
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568489: Call_WebAppsListConnectionStrings_568482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_568489.validator(path, query, header, formData, body)
  let scheme = call_568489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568489.url(scheme.get, call_568489.host, call_568489.base,
                         call_568489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568489, url, valid)

proc call*(call_568490: Call_WebAppsListConnectionStrings_568482;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStrings
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568491 = newJObject()
  var query_568492 = newJObject()
  add(path_568491, "resourceGroupName", newJString(resourceGroupName))
  add(query_568492, "api-version", newJString(apiVersion))
  add(path_568491, "name", newJString(name))
  add(path_568491, "subscriptionId", newJString(subscriptionId))
  result = call_568490.call(path_568491, query_568492, nil, nil, nil)

var webAppsListConnectionStrings* = Call_WebAppsListConnectionStrings_568482(
    name: "webAppsListConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStrings_568483, base: "",
    url: url_WebAppsListConnectionStrings_568484, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfig_568504 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDiagnosticLogsConfig_568506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfig_568505(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568507 = path.getOrDefault("resourceGroupName")
  valid_568507 = validateParameter(valid_568507, JString, required = true,
                                 default = nil)
  if valid_568507 != nil:
    section.add "resourceGroupName", valid_568507
  var valid_568508 = path.getOrDefault("name")
  valid_568508 = validateParameter(valid_568508, JString, required = true,
                                 default = nil)
  if valid_568508 != nil:
    section.add "name", valid_568508
  var valid_568509 = path.getOrDefault("subscriptionId")
  valid_568509 = validateParameter(valid_568509, JString, required = true,
                                 default = nil)
  if valid_568509 != nil:
    section.add "subscriptionId", valid_568509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568510 = query.getOrDefault("api-version")
  valid_568510 = validateParameter(valid_568510, JString, required = true,
                                 default = nil)
  if valid_568510 != nil:
    section.add "api-version", valid_568510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568512: Call_WebAppsUpdateDiagnosticLogsConfig_568504;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_568512.validator(path, query, header, formData, body)
  let scheme = call_568512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568512.url(scheme.get, call_568512.host, call_568512.base,
                         call_568512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568512, url, valid)

proc call*(call_568513: Call_WebAppsUpdateDiagnosticLogsConfig_568504;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfig
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568514 = newJObject()
  var query_568515 = newJObject()
  var body_568516 = newJObject()
  add(path_568514, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_568516 = siteLogsConfig
  add(query_568515, "api-version", newJString(apiVersion))
  add(path_568514, "name", newJString(name))
  add(path_568514, "subscriptionId", newJString(subscriptionId))
  result = call_568513.call(path_568514, query_568515, nil, nil, body_568516)

var webAppsUpdateDiagnosticLogsConfig* = Call_WebAppsUpdateDiagnosticLogsConfig_568504(
    name: "webAppsUpdateDiagnosticLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfig_568505, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfig_568506, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfiguration_568493 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDiagnosticLogsConfiguration_568495(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfiguration_568494(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568496 = path.getOrDefault("resourceGroupName")
  valid_568496 = validateParameter(valid_568496, JString, required = true,
                                 default = nil)
  if valid_568496 != nil:
    section.add "resourceGroupName", valid_568496
  var valid_568497 = path.getOrDefault("name")
  valid_568497 = validateParameter(valid_568497, JString, required = true,
                                 default = nil)
  if valid_568497 != nil:
    section.add "name", valid_568497
  var valid_568498 = path.getOrDefault("subscriptionId")
  valid_568498 = validateParameter(valid_568498, JString, required = true,
                                 default = nil)
  if valid_568498 != nil:
    section.add "subscriptionId", valid_568498
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568499 = query.getOrDefault("api-version")
  valid_568499 = validateParameter(valid_568499, JString, required = true,
                                 default = nil)
  if valid_568499 != nil:
    section.add "api-version", valid_568499
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568500: Call_WebAppsGetDiagnosticLogsConfiguration_568493;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_568500.validator(path, query, header, formData, body)
  let scheme = call_568500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568500.url(scheme.get, call_568500.host, call_568500.base,
                         call_568500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568500, url, valid)

proc call*(call_568501: Call_WebAppsGetDiagnosticLogsConfiguration_568493;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfiguration
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568502 = newJObject()
  var query_568503 = newJObject()
  add(path_568502, "resourceGroupName", newJString(resourceGroupName))
  add(query_568503, "api-version", newJString(apiVersion))
  add(path_568502, "name", newJString(name))
  add(path_568502, "subscriptionId", newJString(subscriptionId))
  result = call_568501.call(path_568502, query_568503, nil, nil, nil)

var webAppsGetDiagnosticLogsConfiguration* = Call_WebAppsGetDiagnosticLogsConfiguration_568493(
    name: "webAppsGetDiagnosticLogsConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfiguration_568494, base: "",
    url: url_WebAppsGetDiagnosticLogsConfiguration_568495, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadata_568517 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateMetadata_568519(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadata_568518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568520 = path.getOrDefault("resourceGroupName")
  valid_568520 = validateParameter(valid_568520, JString, required = true,
                                 default = nil)
  if valid_568520 != nil:
    section.add "resourceGroupName", valid_568520
  var valid_568521 = path.getOrDefault("name")
  valid_568521 = validateParameter(valid_568521, JString, required = true,
                                 default = nil)
  if valid_568521 != nil:
    section.add "name", valid_568521
  var valid_568522 = path.getOrDefault("subscriptionId")
  valid_568522 = validateParameter(valid_568522, JString, required = true,
                                 default = nil)
  if valid_568522 != nil:
    section.add "subscriptionId", valid_568522
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568523 = query.getOrDefault("api-version")
  valid_568523 = validateParameter(valid_568523, JString, required = true,
                                 default = nil)
  if valid_568523 != nil:
    section.add "api-version", valid_568523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568525: Call_WebAppsUpdateMetadata_568517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_568525.validator(path, query, header, formData, body)
  let scheme = call_568525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568525.url(scheme.get, call_568525.host, call_568525.base,
                         call_568525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568525, url, valid)

proc call*(call_568526: Call_WebAppsUpdateMetadata_568517;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadata
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_568527 = newJObject()
  var query_568528 = newJObject()
  var body_568529 = newJObject()
  add(path_568527, "resourceGroupName", newJString(resourceGroupName))
  add(query_568528, "api-version", newJString(apiVersion))
  add(path_568527, "name", newJString(name))
  add(path_568527, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_568529 = metadata
  result = call_568526.call(path_568527, query_568528, nil, nil, body_568529)

var webAppsUpdateMetadata* = Call_WebAppsUpdateMetadata_568517(
    name: "webAppsUpdateMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_WebAppsUpdateMetadata_568518, base: "",
    url: url_WebAppsUpdateMetadata_568519, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadata_568530 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetadata_568532(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadata_568531(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568533 = path.getOrDefault("resourceGroupName")
  valid_568533 = validateParameter(valid_568533, JString, required = true,
                                 default = nil)
  if valid_568533 != nil:
    section.add "resourceGroupName", valid_568533
  var valid_568534 = path.getOrDefault("name")
  valid_568534 = validateParameter(valid_568534, JString, required = true,
                                 default = nil)
  if valid_568534 != nil:
    section.add "name", valid_568534
  var valid_568535 = path.getOrDefault("subscriptionId")
  valid_568535 = validateParameter(valid_568535, JString, required = true,
                                 default = nil)
  if valid_568535 != nil:
    section.add "subscriptionId", valid_568535
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568536 = query.getOrDefault("api-version")
  valid_568536 = validateParameter(valid_568536, JString, required = true,
                                 default = nil)
  if valid_568536 != nil:
    section.add "api-version", valid_568536
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568537: Call_WebAppsListMetadata_568530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_568537.validator(path, query, header, formData, body)
  let scheme = call_568537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568537.url(scheme.get, call_568537.host, call_568537.base,
                         call_568537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568537, url, valid)

proc call*(call_568538: Call_WebAppsListMetadata_568530; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListMetadata
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568539 = newJObject()
  var query_568540 = newJObject()
  add(path_568539, "resourceGroupName", newJString(resourceGroupName))
  add(query_568540, "api-version", newJString(apiVersion))
  add(path_568539, "name", newJString(name))
  add(path_568539, "subscriptionId", newJString(subscriptionId))
  result = call_568538.call(path_568539, query_568540, nil, nil, nil)

var webAppsListMetadata* = Call_WebAppsListMetadata_568530(
    name: "webAppsListMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_WebAppsListMetadata_568531, base: "",
    url: url_WebAppsListMetadata_568532, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentials_568541 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingCredentials_568543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentials_568542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568544 = path.getOrDefault("resourceGroupName")
  valid_568544 = validateParameter(valid_568544, JString, required = true,
                                 default = nil)
  if valid_568544 != nil:
    section.add "resourceGroupName", valid_568544
  var valid_568545 = path.getOrDefault("name")
  valid_568545 = validateParameter(valid_568545, JString, required = true,
                                 default = nil)
  if valid_568545 != nil:
    section.add "name", valid_568545
  var valid_568546 = path.getOrDefault("subscriptionId")
  valid_568546 = validateParameter(valid_568546, JString, required = true,
                                 default = nil)
  if valid_568546 != nil:
    section.add "subscriptionId", valid_568546
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568547 = query.getOrDefault("api-version")
  valid_568547 = validateParameter(valid_568547, JString, required = true,
                                 default = nil)
  if valid_568547 != nil:
    section.add "api-version", valid_568547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568548: Call_WebAppsListPublishingCredentials_568541;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_568548.validator(path, query, header, formData, body)
  let scheme = call_568548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568548.url(scheme.get, call_568548.host, call_568548.base,
                         call_568548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568548, url, valid)

proc call*(call_568549: Call_WebAppsListPublishingCredentials_568541;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentials
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568550 = newJObject()
  var query_568551 = newJObject()
  add(path_568550, "resourceGroupName", newJString(resourceGroupName))
  add(query_568551, "api-version", newJString(apiVersion))
  add(path_568550, "name", newJString(name))
  add(path_568550, "subscriptionId", newJString(subscriptionId))
  result = call_568549.call(path_568550, query_568551, nil, nil, nil)

var webAppsListPublishingCredentials* = Call_WebAppsListPublishingCredentials_568541(
    name: "webAppsListPublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentials_568542, base: "",
    url: url_WebAppsListPublishingCredentials_568543, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettings_568552 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSitePushSettings_568554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettings_568553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568555 = path.getOrDefault("resourceGroupName")
  valid_568555 = validateParameter(valid_568555, JString, required = true,
                                 default = nil)
  if valid_568555 != nil:
    section.add "resourceGroupName", valid_568555
  var valid_568556 = path.getOrDefault("name")
  valid_568556 = validateParameter(valid_568556, JString, required = true,
                                 default = nil)
  if valid_568556 != nil:
    section.add "name", valid_568556
  var valid_568557 = path.getOrDefault("subscriptionId")
  valid_568557 = validateParameter(valid_568557, JString, required = true,
                                 default = nil)
  if valid_568557 != nil:
    section.add "subscriptionId", valid_568557
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568558 = query.getOrDefault("api-version")
  valid_568558 = validateParameter(valid_568558, JString, required = true,
                                 default = nil)
  if valid_568558 != nil:
    section.add "api-version", valid_568558
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568560: Call_WebAppsUpdateSitePushSettings_568552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_568560.validator(path, query, header, formData, body)
  let scheme = call_568560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568560.url(scheme.get, call_568560.host, call_568560.base,
                         call_568560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568560, url, valid)

proc call*(call_568561: Call_WebAppsUpdateSitePushSettings_568552;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettings
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_568562 = newJObject()
  var query_568563 = newJObject()
  var body_568564 = newJObject()
  add(path_568562, "resourceGroupName", newJString(resourceGroupName))
  add(query_568563, "api-version", newJString(apiVersion))
  add(path_568562, "name", newJString(name))
  add(path_568562, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_568564 = pushSettings
  result = call_568561.call(path_568562, query_568563, nil, nil, body_568564)

var webAppsUpdateSitePushSettings* = Call_WebAppsUpdateSitePushSettings_568552(
    name: "webAppsUpdateSitePushSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettings_568553, base: "",
    url: url_WebAppsUpdateSitePushSettings_568554, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettings_568565 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSitePushSettings_568567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettings_568566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568568 = path.getOrDefault("resourceGroupName")
  valid_568568 = validateParameter(valid_568568, JString, required = true,
                                 default = nil)
  if valid_568568 != nil:
    section.add "resourceGroupName", valid_568568
  var valid_568569 = path.getOrDefault("name")
  valid_568569 = validateParameter(valid_568569, JString, required = true,
                                 default = nil)
  if valid_568569 != nil:
    section.add "name", valid_568569
  var valid_568570 = path.getOrDefault("subscriptionId")
  valid_568570 = validateParameter(valid_568570, JString, required = true,
                                 default = nil)
  if valid_568570 != nil:
    section.add "subscriptionId", valid_568570
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568571 = query.getOrDefault("api-version")
  valid_568571 = validateParameter(valid_568571, JString, required = true,
                                 default = nil)
  if valid_568571 != nil:
    section.add "api-version", valid_568571
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568572: Call_WebAppsListSitePushSettings_568565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_568572.validator(path, query, header, formData, body)
  let scheme = call_568572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568572.url(scheme.get, call_568572.host, call_568572.base,
                         call_568572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568572, url, valid)

proc call*(call_568573: Call_WebAppsListSitePushSettings_568565;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettings
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568574 = newJObject()
  var query_568575 = newJObject()
  add(path_568574, "resourceGroupName", newJString(resourceGroupName))
  add(query_568575, "api-version", newJString(apiVersion))
  add(path_568574, "name", newJString(name))
  add(path_568574, "subscriptionId", newJString(subscriptionId))
  result = call_568573.call(path_568574, query_568575, nil, nil, nil)

var webAppsListSitePushSettings* = Call_WebAppsListSitePushSettings_568565(
    name: "webAppsListSitePushSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettings_568566, base: "",
    url: url_WebAppsListSitePushSettings_568567, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlotConfigurationNames_568587 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSlotConfigurationNames_568589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlotConfigurationNames_568588(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568590 = path.getOrDefault("resourceGroupName")
  valid_568590 = validateParameter(valid_568590, JString, required = true,
                                 default = nil)
  if valid_568590 != nil:
    section.add "resourceGroupName", valid_568590
  var valid_568591 = path.getOrDefault("name")
  valid_568591 = validateParameter(valid_568591, JString, required = true,
                                 default = nil)
  if valid_568591 != nil:
    section.add "name", valid_568591
  var valid_568592 = path.getOrDefault("subscriptionId")
  valid_568592 = validateParameter(valid_568592, JString, required = true,
                                 default = nil)
  if valid_568592 != nil:
    section.add "subscriptionId", valid_568592
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568593 = query.getOrDefault("api-version")
  valid_568593 = validateParameter(valid_568593, JString, required = true,
                                 default = nil)
  if valid_568593 != nil:
    section.add "api-version", valid_568593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568595: Call_WebAppsUpdateSlotConfigurationNames_568587;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  let valid = call_568595.validator(path, query, header, formData, body)
  let scheme = call_568595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568595.url(scheme.get, call_568595.host, call_568595.base,
                         call_568595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568595, url, valid)

proc call*(call_568596: Call_WebAppsUpdateSlotConfigurationNames_568587;
          resourceGroupName: string; apiVersion: string; name: string;
          slotConfigNames: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateSlotConfigurationNames
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568597 = newJObject()
  var query_568598 = newJObject()
  var body_568599 = newJObject()
  add(path_568597, "resourceGroupName", newJString(resourceGroupName))
  add(query_568598, "api-version", newJString(apiVersion))
  add(path_568597, "name", newJString(name))
  if slotConfigNames != nil:
    body_568599 = slotConfigNames
  add(path_568597, "subscriptionId", newJString(subscriptionId))
  result = call_568596.call(path_568597, query_568598, nil, nil, body_568599)

var webAppsUpdateSlotConfigurationNames* = Call_WebAppsUpdateSlotConfigurationNames_568587(
    name: "webAppsUpdateSlotConfigurationNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsUpdateSlotConfigurationNames_568588, base: "",
    url: url_WebAppsUpdateSlotConfigurationNames_568589, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotConfigurationNames_568576 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlotConfigurationNames_568578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotConfigurationNames_568577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568579 = path.getOrDefault("resourceGroupName")
  valid_568579 = validateParameter(valid_568579, JString, required = true,
                                 default = nil)
  if valid_568579 != nil:
    section.add "resourceGroupName", valid_568579
  var valid_568580 = path.getOrDefault("name")
  valid_568580 = validateParameter(valid_568580, JString, required = true,
                                 default = nil)
  if valid_568580 != nil:
    section.add "name", valid_568580
  var valid_568581 = path.getOrDefault("subscriptionId")
  valid_568581 = validateParameter(valid_568581, JString, required = true,
                                 default = nil)
  if valid_568581 != nil:
    section.add "subscriptionId", valid_568581
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568582 = query.getOrDefault("api-version")
  valid_568582 = validateParameter(valid_568582, JString, required = true,
                                 default = nil)
  if valid_568582 != nil:
    section.add "api-version", valid_568582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568583: Call_WebAppsListSlotConfigurationNames_568576;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  let valid = call_568583.validator(path, query, header, formData, body)
  let scheme = call_568583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568583.url(scheme.get, call_568583.host, call_568583.base,
                         call_568583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568583, url, valid)

proc call*(call_568584: Call_WebAppsListSlotConfigurationNames_568576;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSlotConfigurationNames
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568585 = newJObject()
  var query_568586 = newJObject()
  add(path_568585, "resourceGroupName", newJString(resourceGroupName))
  add(query_568586, "api-version", newJString(apiVersion))
  add(path_568585, "name", newJString(name))
  add(path_568585, "subscriptionId", newJString(subscriptionId))
  result = call_568584.call(path_568585, query_568586, nil, nil, nil)

var webAppsListSlotConfigurationNames* = Call_WebAppsListSlotConfigurationNames_568576(
    name: "webAppsListSlotConfigurationNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsListSlotConfigurationNames_568577, base: "",
    url: url_WebAppsListSlotConfigurationNames_568578, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfiguration_568611 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateConfiguration_568613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfiguration_568612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568614 = path.getOrDefault("resourceGroupName")
  valid_568614 = validateParameter(valid_568614, JString, required = true,
                                 default = nil)
  if valid_568614 != nil:
    section.add "resourceGroupName", valid_568614
  var valid_568615 = path.getOrDefault("name")
  valid_568615 = validateParameter(valid_568615, JString, required = true,
                                 default = nil)
  if valid_568615 != nil:
    section.add "name", valid_568615
  var valid_568616 = path.getOrDefault("subscriptionId")
  valid_568616 = validateParameter(valid_568616, JString, required = true,
                                 default = nil)
  if valid_568616 != nil:
    section.add "subscriptionId", valid_568616
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568617 = query.getOrDefault("api-version")
  valid_568617 = validateParameter(valid_568617, JString, required = true,
                                 default = nil)
  if valid_568617 != nil:
    section.add "api-version", valid_568617
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568619: Call_WebAppsCreateOrUpdateConfiguration_568611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_568619.validator(path, query, header, formData, body)
  let scheme = call_568619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568619.url(scheme.get, call_568619.host, call_568619.base,
                         call_568619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568619, url, valid)

proc call*(call_568620: Call_WebAppsCreateOrUpdateConfiguration_568611;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568621 = newJObject()
  var query_568622 = newJObject()
  var body_568623 = newJObject()
  add(path_568621, "resourceGroupName", newJString(resourceGroupName))
  add(query_568622, "api-version", newJString(apiVersion))
  add(path_568621, "name", newJString(name))
  if siteConfig != nil:
    body_568623 = siteConfig
  add(path_568621, "subscriptionId", newJString(subscriptionId))
  result = call_568620.call(path_568621, query_568622, nil, nil, body_568623)

var webAppsCreateOrUpdateConfiguration* = Call_WebAppsCreateOrUpdateConfiguration_568611(
    name: "webAppsCreateOrUpdateConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfiguration_568612, base: "",
    url: url_WebAppsCreateOrUpdateConfiguration_568613, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfiguration_568600 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfiguration_568602(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfiguration_568601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568603 = path.getOrDefault("resourceGroupName")
  valid_568603 = validateParameter(valid_568603, JString, required = true,
                                 default = nil)
  if valid_568603 != nil:
    section.add "resourceGroupName", valid_568603
  var valid_568604 = path.getOrDefault("name")
  valid_568604 = validateParameter(valid_568604, JString, required = true,
                                 default = nil)
  if valid_568604 != nil:
    section.add "name", valid_568604
  var valid_568605 = path.getOrDefault("subscriptionId")
  valid_568605 = validateParameter(valid_568605, JString, required = true,
                                 default = nil)
  if valid_568605 != nil:
    section.add "subscriptionId", valid_568605
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568606 = query.getOrDefault("api-version")
  valid_568606 = validateParameter(valid_568606, JString, required = true,
                                 default = nil)
  if valid_568606 != nil:
    section.add "api-version", valid_568606
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568607: Call_WebAppsGetConfiguration_568600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_568607.validator(path, query, header, formData, body)
  let scheme = call_568607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568607.url(scheme.get, call_568607.host, call_568607.base,
                         call_568607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568607, url, valid)

proc call*(call_568608: Call_WebAppsGetConfiguration_568600;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfiguration
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568609 = newJObject()
  var query_568610 = newJObject()
  add(path_568609, "resourceGroupName", newJString(resourceGroupName))
  add(query_568610, "api-version", newJString(apiVersion))
  add(path_568609, "name", newJString(name))
  add(path_568609, "subscriptionId", newJString(subscriptionId))
  result = call_568608.call(path_568609, query_568610, nil, nil, nil)

var webAppsGetConfiguration* = Call_WebAppsGetConfiguration_568600(
    name: "webAppsGetConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsGetConfiguration_568601, base: "",
    url: url_WebAppsGetConfiguration_568602, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfiguration_568624 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConfiguration_568626(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfiguration_568625(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568627 = path.getOrDefault("resourceGroupName")
  valid_568627 = validateParameter(valid_568627, JString, required = true,
                                 default = nil)
  if valid_568627 != nil:
    section.add "resourceGroupName", valid_568627
  var valid_568628 = path.getOrDefault("name")
  valid_568628 = validateParameter(valid_568628, JString, required = true,
                                 default = nil)
  if valid_568628 != nil:
    section.add "name", valid_568628
  var valid_568629 = path.getOrDefault("subscriptionId")
  valid_568629 = validateParameter(valid_568629, JString, required = true,
                                 default = nil)
  if valid_568629 != nil:
    section.add "subscriptionId", valid_568629
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568630 = query.getOrDefault("api-version")
  valid_568630 = validateParameter(valid_568630, JString, required = true,
                                 default = nil)
  if valid_568630 != nil:
    section.add "api-version", valid_568630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568632: Call_WebAppsUpdateConfiguration_568624; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_568632.validator(path, query, header, formData, body)
  let scheme = call_568632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568632.url(scheme.get, call_568632.host, call_568632.base,
                         call_568632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568632, url, valid)

proc call*(call_568633: Call_WebAppsUpdateConfiguration_568624;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568634 = newJObject()
  var query_568635 = newJObject()
  var body_568636 = newJObject()
  add(path_568634, "resourceGroupName", newJString(resourceGroupName))
  add(query_568635, "api-version", newJString(apiVersion))
  add(path_568634, "name", newJString(name))
  if siteConfig != nil:
    body_568636 = siteConfig
  add(path_568634, "subscriptionId", newJString(subscriptionId))
  result = call_568633.call(path_568634, query_568635, nil, nil, body_568636)

var webAppsUpdateConfiguration* = Call_WebAppsUpdateConfiguration_568624(
    name: "webAppsUpdateConfiguration", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsUpdateConfiguration_568625, base: "",
    url: url_WebAppsUpdateConfiguration_568626, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfo_568637 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurationSnapshotInfo_568639(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfo_568638(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568640 = path.getOrDefault("resourceGroupName")
  valid_568640 = validateParameter(valid_568640, JString, required = true,
                                 default = nil)
  if valid_568640 != nil:
    section.add "resourceGroupName", valid_568640
  var valid_568641 = path.getOrDefault("name")
  valid_568641 = validateParameter(valid_568641, JString, required = true,
                                 default = nil)
  if valid_568641 != nil:
    section.add "name", valid_568641
  var valid_568642 = path.getOrDefault("subscriptionId")
  valid_568642 = validateParameter(valid_568642, JString, required = true,
                                 default = nil)
  if valid_568642 != nil:
    section.add "subscriptionId", valid_568642
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568643 = query.getOrDefault("api-version")
  valid_568643 = validateParameter(valid_568643, JString, required = true,
                                 default = nil)
  if valid_568643 != nil:
    section.add "api-version", valid_568643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568644: Call_WebAppsListConfigurationSnapshotInfo_568637;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_568644.validator(path, query, header, formData, body)
  let scheme = call_568644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568644.url(scheme.get, call_568644.host, call_568644.base,
                         call_568644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568644, url, valid)

proc call*(call_568645: Call_WebAppsListConfigurationSnapshotInfo_568637;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfo
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568646 = newJObject()
  var query_568647 = newJObject()
  add(path_568646, "resourceGroupName", newJString(resourceGroupName))
  add(query_568647, "api-version", newJString(apiVersion))
  add(path_568646, "name", newJString(name))
  add(path_568646, "subscriptionId", newJString(subscriptionId))
  result = call_568645.call(path_568646, query_568647, nil, nil, nil)

var webAppsListConfigurationSnapshotInfo* = Call_WebAppsListConfigurationSnapshotInfo_568637(
    name: "webAppsListConfigurationSnapshotInfo", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfo_568638, base: "",
    url: url_WebAppsListConfigurationSnapshotInfo_568639, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshot_568648 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfigurationSnapshot_568650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshot_568649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568651 = path.getOrDefault("resourceGroupName")
  valid_568651 = validateParameter(valid_568651, JString, required = true,
                                 default = nil)
  if valid_568651 != nil:
    section.add "resourceGroupName", valid_568651
  var valid_568652 = path.getOrDefault("name")
  valid_568652 = validateParameter(valid_568652, JString, required = true,
                                 default = nil)
  if valid_568652 != nil:
    section.add "name", valid_568652
  var valid_568653 = path.getOrDefault("snapshotId")
  valid_568653 = validateParameter(valid_568653, JString, required = true,
                                 default = nil)
  if valid_568653 != nil:
    section.add "snapshotId", valid_568653
  var valid_568654 = path.getOrDefault("subscriptionId")
  valid_568654 = validateParameter(valid_568654, JString, required = true,
                                 default = nil)
  if valid_568654 != nil:
    section.add "subscriptionId", valid_568654
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568655 = query.getOrDefault("api-version")
  valid_568655 = validateParameter(valid_568655, JString, required = true,
                                 default = nil)
  if valid_568655 != nil:
    section.add "api-version", valid_568655
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568656: Call_WebAppsGetConfigurationSnapshot_568648;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_568656.validator(path, query, header, formData, body)
  let scheme = call_568656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568656.url(scheme.get, call_568656.host, call_568656.base,
                         call_568656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568656, url, valid)

proc call*(call_568657: Call_WebAppsGetConfigurationSnapshot_568648;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568658 = newJObject()
  var query_568659 = newJObject()
  add(path_568658, "resourceGroupName", newJString(resourceGroupName))
  add(query_568659, "api-version", newJString(apiVersion))
  add(path_568658, "name", newJString(name))
  add(path_568658, "snapshotId", newJString(snapshotId))
  add(path_568658, "subscriptionId", newJString(subscriptionId))
  result = call_568657.call(path_568658, query_568659, nil, nil, nil)

var webAppsGetConfigurationSnapshot* = Call_WebAppsGetConfigurationSnapshot_568648(
    name: "webAppsGetConfigurationSnapshot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshot_568649, base: "",
    url: url_WebAppsGetConfigurationSnapshot_568650, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshot_568660 = ref object of OpenApiRestCall_567666
proc url_WebAppsRecoverSiteConfigurationSnapshot_568662(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshot_568661(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568663 = path.getOrDefault("resourceGroupName")
  valid_568663 = validateParameter(valid_568663, JString, required = true,
                                 default = nil)
  if valid_568663 != nil:
    section.add "resourceGroupName", valid_568663
  var valid_568664 = path.getOrDefault("name")
  valid_568664 = validateParameter(valid_568664, JString, required = true,
                                 default = nil)
  if valid_568664 != nil:
    section.add "name", valid_568664
  var valid_568665 = path.getOrDefault("snapshotId")
  valid_568665 = validateParameter(valid_568665, JString, required = true,
                                 default = nil)
  if valid_568665 != nil:
    section.add "snapshotId", valid_568665
  var valid_568666 = path.getOrDefault("subscriptionId")
  valid_568666 = validateParameter(valid_568666, JString, required = true,
                                 default = nil)
  if valid_568666 != nil:
    section.add "subscriptionId", valid_568666
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568667 = query.getOrDefault("api-version")
  valid_568667 = validateParameter(valid_568667, JString, required = true,
                                 default = nil)
  if valid_568667 != nil:
    section.add "api-version", valid_568667
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568668: Call_WebAppsRecoverSiteConfigurationSnapshot_568660;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_568668.validator(path, query, header, formData, body)
  let scheme = call_568668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568668.url(scheme.get, call_568668.host, call_568668.base,
                         call_568668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568668, url, valid)

proc call*(call_568669: Call_WebAppsRecoverSiteConfigurationSnapshot_568660;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568670 = newJObject()
  var query_568671 = newJObject()
  add(path_568670, "resourceGroupName", newJString(resourceGroupName))
  add(query_568671, "api-version", newJString(apiVersion))
  add(path_568670, "name", newJString(name))
  add(path_568670, "snapshotId", newJString(snapshotId))
  add(path_568670, "subscriptionId", newJString(subscriptionId))
  result = call_568669.call(path_568670, query_568671, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshot* = Call_WebAppsRecoverSiteConfigurationSnapshot_568660(
    name: "webAppsRecoverSiteConfigurationSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshot_568661, base: "",
    url: url_WebAppsRecoverSiteConfigurationSnapshot_568662,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogs_568672 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebSiteContainerLogs_568674(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogs_568673(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568675 = path.getOrDefault("resourceGroupName")
  valid_568675 = validateParameter(valid_568675, JString, required = true,
                                 default = nil)
  if valid_568675 != nil:
    section.add "resourceGroupName", valid_568675
  var valid_568676 = path.getOrDefault("name")
  valid_568676 = validateParameter(valid_568676, JString, required = true,
                                 default = nil)
  if valid_568676 != nil:
    section.add "name", valid_568676
  var valid_568677 = path.getOrDefault("subscriptionId")
  valid_568677 = validateParameter(valid_568677, JString, required = true,
                                 default = nil)
  if valid_568677 != nil:
    section.add "subscriptionId", valid_568677
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568678 = query.getOrDefault("api-version")
  valid_568678 = validateParameter(valid_568678, JString, required = true,
                                 default = nil)
  if valid_568678 != nil:
    section.add "api-version", valid_568678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568679: Call_WebAppsGetWebSiteContainerLogs_568672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_568679.validator(path, query, header, formData, body)
  let scheme = call_568679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568679.url(scheme.get, call_568679.host, call_568679.base,
                         call_568679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568679, url, valid)

proc call*(call_568680: Call_WebAppsGetWebSiteContainerLogs_568672;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogs
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568681 = newJObject()
  var query_568682 = newJObject()
  add(path_568681, "resourceGroupName", newJString(resourceGroupName))
  add(query_568682, "api-version", newJString(apiVersion))
  add(path_568681, "name", newJString(name))
  add(path_568681, "subscriptionId", newJString(subscriptionId))
  result = call_568680.call(path_568681, query_568682, nil, nil, nil)

var webAppsGetWebSiteContainerLogs* = Call_WebAppsGetWebSiteContainerLogs_568672(
    name: "webAppsGetWebSiteContainerLogs", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogs_568673, base: "",
    url: url_WebAppsGetWebSiteContainerLogs_568674, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsZip_568683 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebSiteContainerLogsZip_568685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsZip_568684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568686 = path.getOrDefault("resourceGroupName")
  valid_568686 = validateParameter(valid_568686, JString, required = true,
                                 default = nil)
  if valid_568686 != nil:
    section.add "resourceGroupName", valid_568686
  var valid_568687 = path.getOrDefault("name")
  valid_568687 = validateParameter(valid_568687, JString, required = true,
                                 default = nil)
  if valid_568687 != nil:
    section.add "name", valid_568687
  var valid_568688 = path.getOrDefault("subscriptionId")
  valid_568688 = validateParameter(valid_568688, JString, required = true,
                                 default = nil)
  if valid_568688 != nil:
    section.add "subscriptionId", valid_568688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568689 = query.getOrDefault("api-version")
  valid_568689 = validateParameter(valid_568689, JString, required = true,
                                 default = nil)
  if valid_568689 != nil:
    section.add "api-version", valid_568689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568690: Call_WebAppsGetWebSiteContainerLogsZip_568683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_568690.validator(path, query, header, formData, body)
  let scheme = call_568690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568690.url(scheme.get, call_568690.host, call_568690.base,
                         call_568690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568690, url, valid)

proc call*(call_568691: Call_WebAppsGetWebSiteContainerLogsZip_568683;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsZip
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568692 = newJObject()
  var query_568693 = newJObject()
  add(path_568692, "resourceGroupName", newJString(resourceGroupName))
  add(query_568693, "api-version", newJString(apiVersion))
  add(path_568692, "name", newJString(name))
  add(path_568692, "subscriptionId", newJString(subscriptionId))
  result = call_568691.call(path_568692, query_568693, nil, nil, nil)

var webAppsGetWebSiteContainerLogsZip* = Call_WebAppsGetWebSiteContainerLogsZip_568683(
    name: "webAppsGetWebSiteContainerLogsZip", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    validator: validate_WebAppsGetWebSiteContainerLogsZip_568684, base: "",
    url: url_WebAppsGetWebSiteContainerLogsZip_568685, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobs_568694 = ref object of OpenApiRestCall_567666
proc url_WebAppsListContinuousWebJobs_568696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobs_568695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568697 = path.getOrDefault("resourceGroupName")
  valid_568697 = validateParameter(valid_568697, JString, required = true,
                                 default = nil)
  if valid_568697 != nil:
    section.add "resourceGroupName", valid_568697
  var valid_568698 = path.getOrDefault("name")
  valid_568698 = validateParameter(valid_568698, JString, required = true,
                                 default = nil)
  if valid_568698 != nil:
    section.add "name", valid_568698
  var valid_568699 = path.getOrDefault("subscriptionId")
  valid_568699 = validateParameter(valid_568699, JString, required = true,
                                 default = nil)
  if valid_568699 != nil:
    section.add "subscriptionId", valid_568699
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568700 = query.getOrDefault("api-version")
  valid_568700 = validateParameter(valid_568700, JString, required = true,
                                 default = nil)
  if valid_568700 != nil:
    section.add "api-version", valid_568700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568701: Call_WebAppsListContinuousWebJobs_568694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_568701.validator(path, query, header, formData, body)
  let scheme = call_568701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568701.url(scheme.get, call_568701.host, call_568701.base,
                         call_568701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568701, url, valid)

proc call*(call_568702: Call_WebAppsListContinuousWebJobs_568694;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobs
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568703 = newJObject()
  var query_568704 = newJObject()
  add(path_568703, "resourceGroupName", newJString(resourceGroupName))
  add(query_568704, "api-version", newJString(apiVersion))
  add(path_568703, "name", newJString(name))
  add(path_568703, "subscriptionId", newJString(subscriptionId))
  result = call_568702.call(path_568703, query_568704, nil, nil, nil)

var webAppsListContinuousWebJobs* = Call_WebAppsListContinuousWebJobs_568694(
    name: "webAppsListContinuousWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobs_568695, base: "",
    url: url_WebAppsListContinuousWebJobs_568696, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJob_568705 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetContinuousWebJob_568707(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJob_568706(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568708 = path.getOrDefault("resourceGroupName")
  valid_568708 = validateParameter(valid_568708, JString, required = true,
                                 default = nil)
  if valid_568708 != nil:
    section.add "resourceGroupName", valid_568708
  var valid_568709 = path.getOrDefault("name")
  valid_568709 = validateParameter(valid_568709, JString, required = true,
                                 default = nil)
  if valid_568709 != nil:
    section.add "name", valid_568709
  var valid_568710 = path.getOrDefault("subscriptionId")
  valid_568710 = validateParameter(valid_568710, JString, required = true,
                                 default = nil)
  if valid_568710 != nil:
    section.add "subscriptionId", valid_568710
  var valid_568711 = path.getOrDefault("webJobName")
  valid_568711 = validateParameter(valid_568711, JString, required = true,
                                 default = nil)
  if valid_568711 != nil:
    section.add "webJobName", valid_568711
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568712 = query.getOrDefault("api-version")
  valid_568712 = validateParameter(valid_568712, JString, required = true,
                                 default = nil)
  if valid_568712 != nil:
    section.add "api-version", valid_568712
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568713: Call_WebAppsGetContinuousWebJob_568705; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568713.validator(path, query, header, formData, body)
  let scheme = call_568713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568713.url(scheme.get, call_568713.host, call_568713.base,
                         call_568713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568713, url, valid)

proc call*(call_568714: Call_WebAppsGetContinuousWebJob_568705;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJob
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568715 = newJObject()
  var query_568716 = newJObject()
  add(path_568715, "resourceGroupName", newJString(resourceGroupName))
  add(query_568716, "api-version", newJString(apiVersion))
  add(path_568715, "name", newJString(name))
  add(path_568715, "subscriptionId", newJString(subscriptionId))
  add(path_568715, "webJobName", newJString(webJobName))
  result = call_568714.call(path_568715, query_568716, nil, nil, nil)

var webAppsGetContinuousWebJob* = Call_WebAppsGetContinuousWebJob_568705(
    name: "webAppsGetContinuousWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJob_568706, base: "",
    url: url_WebAppsGetContinuousWebJob_568707, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJob_568717 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteContinuousWebJob_568719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJob_568718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568720 = path.getOrDefault("resourceGroupName")
  valid_568720 = validateParameter(valid_568720, JString, required = true,
                                 default = nil)
  if valid_568720 != nil:
    section.add "resourceGroupName", valid_568720
  var valid_568721 = path.getOrDefault("name")
  valid_568721 = validateParameter(valid_568721, JString, required = true,
                                 default = nil)
  if valid_568721 != nil:
    section.add "name", valid_568721
  var valid_568722 = path.getOrDefault("subscriptionId")
  valid_568722 = validateParameter(valid_568722, JString, required = true,
                                 default = nil)
  if valid_568722 != nil:
    section.add "subscriptionId", valid_568722
  var valid_568723 = path.getOrDefault("webJobName")
  valid_568723 = validateParameter(valid_568723, JString, required = true,
                                 default = nil)
  if valid_568723 != nil:
    section.add "webJobName", valid_568723
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568724 = query.getOrDefault("api-version")
  valid_568724 = validateParameter(valid_568724, JString, required = true,
                                 default = nil)
  if valid_568724 != nil:
    section.add "api-version", valid_568724
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568725: Call_WebAppsDeleteContinuousWebJob_568717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568725.validator(path, query, header, formData, body)
  let scheme = call_568725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568725.url(scheme.get, call_568725.host, call_568725.base,
                         call_568725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568725, url, valid)

proc call*(call_568726: Call_WebAppsDeleteContinuousWebJob_568717;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJob
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568727 = newJObject()
  var query_568728 = newJObject()
  add(path_568727, "resourceGroupName", newJString(resourceGroupName))
  add(query_568728, "api-version", newJString(apiVersion))
  add(path_568727, "name", newJString(name))
  add(path_568727, "subscriptionId", newJString(subscriptionId))
  add(path_568727, "webJobName", newJString(webJobName))
  result = call_568726.call(path_568727, query_568728, nil, nil, nil)

var webAppsDeleteContinuousWebJob* = Call_WebAppsDeleteContinuousWebJob_568717(
    name: "webAppsDeleteContinuousWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJob_568718, base: "",
    url: url_WebAppsDeleteContinuousWebJob_568719, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJob_568729 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartContinuousWebJob_568731(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJob_568730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568732 = path.getOrDefault("resourceGroupName")
  valid_568732 = validateParameter(valid_568732, JString, required = true,
                                 default = nil)
  if valid_568732 != nil:
    section.add "resourceGroupName", valid_568732
  var valid_568733 = path.getOrDefault("name")
  valid_568733 = validateParameter(valid_568733, JString, required = true,
                                 default = nil)
  if valid_568733 != nil:
    section.add "name", valid_568733
  var valid_568734 = path.getOrDefault("subscriptionId")
  valid_568734 = validateParameter(valid_568734, JString, required = true,
                                 default = nil)
  if valid_568734 != nil:
    section.add "subscriptionId", valid_568734
  var valid_568735 = path.getOrDefault("webJobName")
  valid_568735 = validateParameter(valid_568735, JString, required = true,
                                 default = nil)
  if valid_568735 != nil:
    section.add "webJobName", valid_568735
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568736 = query.getOrDefault("api-version")
  valid_568736 = validateParameter(valid_568736, JString, required = true,
                                 default = nil)
  if valid_568736 != nil:
    section.add "api-version", valid_568736
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568737: Call_WebAppsStartContinuousWebJob_568729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_568737.validator(path, query, header, formData, body)
  let scheme = call_568737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568737.url(scheme.get, call_568737.host, call_568737.base,
                         call_568737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568737, url, valid)

proc call*(call_568738: Call_WebAppsStartContinuousWebJob_568729;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJob
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568739 = newJObject()
  var query_568740 = newJObject()
  add(path_568739, "resourceGroupName", newJString(resourceGroupName))
  add(query_568740, "api-version", newJString(apiVersion))
  add(path_568739, "name", newJString(name))
  add(path_568739, "subscriptionId", newJString(subscriptionId))
  add(path_568739, "webJobName", newJString(webJobName))
  result = call_568738.call(path_568739, query_568740, nil, nil, nil)

var webAppsStartContinuousWebJob* = Call_WebAppsStartContinuousWebJob_568729(
    name: "webAppsStartContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJob_568730, base: "",
    url: url_WebAppsStartContinuousWebJob_568731, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJob_568741 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopContinuousWebJob_568743(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJob_568742(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568744 = path.getOrDefault("resourceGroupName")
  valid_568744 = validateParameter(valid_568744, JString, required = true,
                                 default = nil)
  if valid_568744 != nil:
    section.add "resourceGroupName", valid_568744
  var valid_568745 = path.getOrDefault("name")
  valid_568745 = validateParameter(valid_568745, JString, required = true,
                                 default = nil)
  if valid_568745 != nil:
    section.add "name", valid_568745
  var valid_568746 = path.getOrDefault("subscriptionId")
  valid_568746 = validateParameter(valid_568746, JString, required = true,
                                 default = nil)
  if valid_568746 != nil:
    section.add "subscriptionId", valid_568746
  var valid_568747 = path.getOrDefault("webJobName")
  valid_568747 = validateParameter(valid_568747, JString, required = true,
                                 default = nil)
  if valid_568747 != nil:
    section.add "webJobName", valid_568747
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568748 = query.getOrDefault("api-version")
  valid_568748 = validateParameter(valid_568748, JString, required = true,
                                 default = nil)
  if valid_568748 != nil:
    section.add "api-version", valid_568748
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568749: Call_WebAppsStopContinuousWebJob_568741; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_568749.validator(path, query, header, formData, body)
  let scheme = call_568749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568749.url(scheme.get, call_568749.host, call_568749.base,
                         call_568749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568749, url, valid)

proc call*(call_568750: Call_WebAppsStopContinuousWebJob_568741;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJob
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568751 = newJObject()
  var query_568752 = newJObject()
  add(path_568751, "resourceGroupName", newJString(resourceGroupName))
  add(query_568752, "api-version", newJString(apiVersion))
  add(path_568751, "name", newJString(name))
  add(path_568751, "subscriptionId", newJString(subscriptionId))
  add(path_568751, "webJobName", newJString(webJobName))
  result = call_568750.call(path_568751, query_568752, nil, nil, nil)

var webAppsStopContinuousWebJob* = Call_WebAppsStopContinuousWebJob_568741(
    name: "webAppsStopContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJob_568742, base: "",
    url: url_WebAppsStopContinuousWebJob_568743, schemes: {Scheme.Https})
type
  Call_WebAppsListDeployments_568753 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeployments_568755(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeployments_568754(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568756 = path.getOrDefault("resourceGroupName")
  valid_568756 = validateParameter(valid_568756, JString, required = true,
                                 default = nil)
  if valid_568756 != nil:
    section.add "resourceGroupName", valid_568756
  var valid_568757 = path.getOrDefault("name")
  valid_568757 = validateParameter(valid_568757, JString, required = true,
                                 default = nil)
  if valid_568757 != nil:
    section.add "name", valid_568757
  var valid_568758 = path.getOrDefault("subscriptionId")
  valid_568758 = validateParameter(valid_568758, JString, required = true,
                                 default = nil)
  if valid_568758 != nil:
    section.add "subscriptionId", valid_568758
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568759 = query.getOrDefault("api-version")
  valid_568759 = validateParameter(valid_568759, JString, required = true,
                                 default = nil)
  if valid_568759 != nil:
    section.add "api-version", valid_568759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568760: Call_WebAppsListDeployments_568753; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_568760.validator(path, query, header, formData, body)
  let scheme = call_568760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568760.url(scheme.get, call_568760.host, call_568760.base,
                         call_568760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568760, url, valid)

proc call*(call_568761: Call_WebAppsListDeployments_568753;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeployments
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568762 = newJObject()
  var query_568763 = newJObject()
  add(path_568762, "resourceGroupName", newJString(resourceGroupName))
  add(query_568763, "api-version", newJString(apiVersion))
  add(path_568762, "name", newJString(name))
  add(path_568762, "subscriptionId", newJString(subscriptionId))
  result = call_568761.call(path_568762, query_568763, nil, nil, nil)

var webAppsListDeployments* = Call_WebAppsListDeployments_568753(
    name: "webAppsListDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_WebAppsListDeployments_568754, base: "",
    url: url_WebAppsListDeployments_568755, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeployment_568776 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateDeployment_568778(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeployment_568777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568779 = path.getOrDefault("resourceGroupName")
  valid_568779 = validateParameter(valid_568779, JString, required = true,
                                 default = nil)
  if valid_568779 != nil:
    section.add "resourceGroupName", valid_568779
  var valid_568780 = path.getOrDefault("name")
  valid_568780 = validateParameter(valid_568780, JString, required = true,
                                 default = nil)
  if valid_568780 != nil:
    section.add "name", valid_568780
  var valid_568781 = path.getOrDefault("subscriptionId")
  valid_568781 = validateParameter(valid_568781, JString, required = true,
                                 default = nil)
  if valid_568781 != nil:
    section.add "subscriptionId", valid_568781
  var valid_568782 = path.getOrDefault("id")
  valid_568782 = validateParameter(valid_568782, JString, required = true,
                                 default = nil)
  if valid_568782 != nil:
    section.add "id", valid_568782
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568783 = query.getOrDefault("api-version")
  valid_568783 = validateParameter(valid_568783, JString, required = true,
                                 default = nil)
  if valid_568783 != nil:
    section.add "api-version", valid_568783
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568785: Call_WebAppsCreateDeployment_568776; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_568785.validator(path, query, header, formData, body)
  let scheme = call_568785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568785.url(scheme.get, call_568785.host, call_568785.base,
                         call_568785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568785, url, valid)

proc call*(call_568786: Call_WebAppsCreateDeployment_568776;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeployment
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_568787 = newJObject()
  var query_568788 = newJObject()
  var body_568789 = newJObject()
  add(path_568787, "resourceGroupName", newJString(resourceGroupName))
  add(query_568788, "api-version", newJString(apiVersion))
  add(path_568787, "name", newJString(name))
  add(path_568787, "subscriptionId", newJString(subscriptionId))
  add(path_568787, "id", newJString(id))
  if deployment != nil:
    body_568789 = deployment
  result = call_568786.call(path_568787, query_568788, nil, nil, body_568789)

var webAppsCreateDeployment* = Call_WebAppsCreateDeployment_568776(
    name: "webAppsCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsCreateDeployment_568777, base: "",
    url: url_WebAppsCreateDeployment_568778, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeployment_568764 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDeployment_568766(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeployment_568765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568767 = path.getOrDefault("resourceGroupName")
  valid_568767 = validateParameter(valid_568767, JString, required = true,
                                 default = nil)
  if valid_568767 != nil:
    section.add "resourceGroupName", valid_568767
  var valid_568768 = path.getOrDefault("name")
  valid_568768 = validateParameter(valid_568768, JString, required = true,
                                 default = nil)
  if valid_568768 != nil:
    section.add "name", valid_568768
  var valid_568769 = path.getOrDefault("subscriptionId")
  valid_568769 = validateParameter(valid_568769, JString, required = true,
                                 default = nil)
  if valid_568769 != nil:
    section.add "subscriptionId", valid_568769
  var valid_568770 = path.getOrDefault("id")
  valid_568770 = validateParameter(valid_568770, JString, required = true,
                                 default = nil)
  if valid_568770 != nil:
    section.add "id", valid_568770
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568771 = query.getOrDefault("api-version")
  valid_568771 = validateParameter(valid_568771, JString, required = true,
                                 default = nil)
  if valid_568771 != nil:
    section.add "api-version", valid_568771
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568772: Call_WebAppsGetDeployment_568764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568772.validator(path, query, header, formData, body)
  let scheme = call_568772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568772.url(scheme.get, call_568772.host, call_568772.base,
                         call_568772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568772, url, valid)

proc call*(call_568773: Call_WebAppsGetDeployment_568764;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeployment
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_568774 = newJObject()
  var query_568775 = newJObject()
  add(path_568774, "resourceGroupName", newJString(resourceGroupName))
  add(query_568775, "api-version", newJString(apiVersion))
  add(path_568774, "name", newJString(name))
  add(path_568774, "subscriptionId", newJString(subscriptionId))
  add(path_568774, "id", newJString(id))
  result = call_568773.call(path_568774, query_568775, nil, nil, nil)

var webAppsGetDeployment* = Call_WebAppsGetDeployment_568764(
    name: "webAppsGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsGetDeployment_568765, base: "",
    url: url_WebAppsGetDeployment_568766, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeployment_568790 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDeployment_568792(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeployment_568791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568793 = path.getOrDefault("resourceGroupName")
  valid_568793 = validateParameter(valid_568793, JString, required = true,
                                 default = nil)
  if valid_568793 != nil:
    section.add "resourceGroupName", valid_568793
  var valid_568794 = path.getOrDefault("name")
  valid_568794 = validateParameter(valid_568794, JString, required = true,
                                 default = nil)
  if valid_568794 != nil:
    section.add "name", valid_568794
  var valid_568795 = path.getOrDefault("subscriptionId")
  valid_568795 = validateParameter(valid_568795, JString, required = true,
                                 default = nil)
  if valid_568795 != nil:
    section.add "subscriptionId", valid_568795
  var valid_568796 = path.getOrDefault("id")
  valid_568796 = validateParameter(valid_568796, JString, required = true,
                                 default = nil)
  if valid_568796 != nil:
    section.add "id", valid_568796
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568797 = query.getOrDefault("api-version")
  valid_568797 = validateParameter(valid_568797, JString, required = true,
                                 default = nil)
  if valid_568797 != nil:
    section.add "api-version", valid_568797
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568798: Call_WebAppsDeleteDeployment_568790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568798.validator(path, query, header, formData, body)
  let scheme = call_568798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568798.url(scheme.get, call_568798.host, call_568798.base,
                         call_568798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568798, url, valid)

proc call*(call_568799: Call_WebAppsDeleteDeployment_568790;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeployment
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_568800 = newJObject()
  var query_568801 = newJObject()
  add(path_568800, "resourceGroupName", newJString(resourceGroupName))
  add(query_568801, "api-version", newJString(apiVersion))
  add(path_568800, "name", newJString(name))
  add(path_568800, "subscriptionId", newJString(subscriptionId))
  add(path_568800, "id", newJString(id))
  result = call_568799.call(path_568800, query_568801, nil, nil, nil)

var webAppsDeleteDeployment* = Call_WebAppsDeleteDeployment_568790(
    name: "webAppsDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsDeleteDeployment_568791, base: "",
    url: url_WebAppsDeleteDeployment_568792, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLog_568802 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeploymentLog_568804(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLog_568803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568805 = path.getOrDefault("resourceGroupName")
  valid_568805 = validateParameter(valid_568805, JString, required = true,
                                 default = nil)
  if valid_568805 != nil:
    section.add "resourceGroupName", valid_568805
  var valid_568806 = path.getOrDefault("name")
  valid_568806 = validateParameter(valid_568806, JString, required = true,
                                 default = nil)
  if valid_568806 != nil:
    section.add "name", valid_568806
  var valid_568807 = path.getOrDefault("subscriptionId")
  valid_568807 = validateParameter(valid_568807, JString, required = true,
                                 default = nil)
  if valid_568807 != nil:
    section.add "subscriptionId", valid_568807
  var valid_568808 = path.getOrDefault("id")
  valid_568808 = validateParameter(valid_568808, JString, required = true,
                                 default = nil)
  if valid_568808 != nil:
    section.add "id", valid_568808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568809 = query.getOrDefault("api-version")
  valid_568809 = validateParameter(valid_568809, JString, required = true,
                                 default = nil)
  if valid_568809 != nil:
    section.add "api-version", valid_568809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568810: Call_WebAppsListDeploymentLog_568802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_568810.validator(path, query, header, formData, body)
  let scheme = call_568810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568810.url(scheme.get, call_568810.host, call_568810.base,
                         call_568810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568810, url, valid)

proc call*(call_568811: Call_WebAppsListDeploymentLog_568802;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLog
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_568812 = newJObject()
  var query_568813 = newJObject()
  add(path_568812, "resourceGroupName", newJString(resourceGroupName))
  add(query_568813, "api-version", newJString(apiVersion))
  add(path_568812, "name", newJString(name))
  add(path_568812, "subscriptionId", newJString(subscriptionId))
  add(path_568812, "id", newJString(id))
  result = call_568811.call(path_568812, query_568813, nil, nil, nil)

var webAppsListDeploymentLog* = Call_WebAppsListDeploymentLog_568802(
    name: "webAppsListDeploymentLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLog_568803, base: "",
    url: url_WebAppsListDeploymentLog_568804, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiers_568814 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDomainOwnershipIdentifiers_568816(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiers_568815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568817 = path.getOrDefault("resourceGroupName")
  valid_568817 = validateParameter(valid_568817, JString, required = true,
                                 default = nil)
  if valid_568817 != nil:
    section.add "resourceGroupName", valid_568817
  var valid_568818 = path.getOrDefault("name")
  valid_568818 = validateParameter(valid_568818, JString, required = true,
                                 default = nil)
  if valid_568818 != nil:
    section.add "name", valid_568818
  var valid_568819 = path.getOrDefault("subscriptionId")
  valid_568819 = validateParameter(valid_568819, JString, required = true,
                                 default = nil)
  if valid_568819 != nil:
    section.add "subscriptionId", valid_568819
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568820 = query.getOrDefault("api-version")
  valid_568820 = validateParameter(valid_568820, JString, required = true,
                                 default = nil)
  if valid_568820 != nil:
    section.add "api-version", valid_568820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568821: Call_WebAppsListDomainOwnershipIdentifiers_568814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_568821.validator(path, query, header, formData, body)
  let scheme = call_568821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568821.url(scheme.get, call_568821.host, call_568821.base,
                         call_568821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568821, url, valid)

proc call*(call_568822: Call_WebAppsListDomainOwnershipIdentifiers_568814;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiers
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568823 = newJObject()
  var query_568824 = newJObject()
  add(path_568823, "resourceGroupName", newJString(resourceGroupName))
  add(query_568824, "api-version", newJString(apiVersion))
  add(path_568823, "name", newJString(name))
  add(path_568823, "subscriptionId", newJString(subscriptionId))
  result = call_568822.call(path_568823, query_568824, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiers* = Call_WebAppsListDomainOwnershipIdentifiers_568814(
    name: "webAppsListDomainOwnershipIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiers_568815, base: "",
    url: url_WebAppsListDomainOwnershipIdentifiers_568816, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568837 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568839(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568838(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568840 = path.getOrDefault("resourceGroupName")
  valid_568840 = validateParameter(valid_568840, JString, required = true,
                                 default = nil)
  if valid_568840 != nil:
    section.add "resourceGroupName", valid_568840
  var valid_568841 = path.getOrDefault("name")
  valid_568841 = validateParameter(valid_568841, JString, required = true,
                                 default = nil)
  if valid_568841 != nil:
    section.add "name", valid_568841
  var valid_568842 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568842 = validateParameter(valid_568842, JString, required = true,
                                 default = nil)
  if valid_568842 != nil:
    section.add "domainOwnershipIdentifierName", valid_568842
  var valid_568843 = path.getOrDefault("subscriptionId")
  valid_568843 = validateParameter(valid_568843, JString, required = true,
                                 default = nil)
  if valid_568843 != nil:
    section.add "subscriptionId", valid_568843
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568844 = query.getOrDefault("api-version")
  valid_568844 = validateParameter(valid_568844, JString, required = true,
                                 default = nil)
  if valid_568844 != nil:
    section.add "api-version", valid_568844
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568846: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568837;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_568846.validator(path, query, header, formData, body)
  let scheme = call_568846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568846.url(scheme.get, call_568846.host, call_568846.base,
                         call_568846.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568846, url, valid)

proc call*(call_568847: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568837;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568848 = newJObject()
  var query_568849 = newJObject()
  var body_568850 = newJObject()
  add(path_568848, "resourceGroupName", newJString(resourceGroupName))
  add(query_568849, "api-version", newJString(apiVersion))
  add(path_568848, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_568850 = domainOwnershipIdentifier
  add(path_568848, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568848, "subscriptionId", newJString(subscriptionId))
  result = call_568847.call(path_568848, query_568849, nil, nil, body_568850)

var webAppsCreateOrUpdateDomainOwnershipIdentifier* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568837(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifier",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568838,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568839,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifier_568825 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDomainOwnershipIdentifier_568827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifier_568826(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568828 = path.getOrDefault("resourceGroupName")
  valid_568828 = validateParameter(valid_568828, JString, required = true,
                                 default = nil)
  if valid_568828 != nil:
    section.add "resourceGroupName", valid_568828
  var valid_568829 = path.getOrDefault("name")
  valid_568829 = validateParameter(valid_568829, JString, required = true,
                                 default = nil)
  if valid_568829 != nil:
    section.add "name", valid_568829
  var valid_568830 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568830 = validateParameter(valid_568830, JString, required = true,
                                 default = nil)
  if valid_568830 != nil:
    section.add "domainOwnershipIdentifierName", valid_568830
  var valid_568831 = path.getOrDefault("subscriptionId")
  valid_568831 = validateParameter(valid_568831, JString, required = true,
                                 default = nil)
  if valid_568831 != nil:
    section.add "subscriptionId", valid_568831
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568832 = query.getOrDefault("api-version")
  valid_568832 = validateParameter(valid_568832, JString, required = true,
                                 default = nil)
  if valid_568832 != nil:
    section.add "api-version", valid_568832
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568833: Call_WebAppsGetDomainOwnershipIdentifier_568825;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_568833.validator(path, query, header, formData, body)
  let scheme = call_568833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568833.url(scheme.get, call_568833.host, call_568833.base,
                         call_568833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568833, url, valid)

proc call*(call_568834: Call_WebAppsGetDomainOwnershipIdentifier_568825;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifier
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568835 = newJObject()
  var query_568836 = newJObject()
  add(path_568835, "resourceGroupName", newJString(resourceGroupName))
  add(query_568836, "api-version", newJString(apiVersion))
  add(path_568835, "name", newJString(name))
  add(path_568835, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568835, "subscriptionId", newJString(subscriptionId))
  result = call_568834.call(path_568835, query_568836, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifier* = Call_WebAppsGetDomainOwnershipIdentifier_568825(
    name: "webAppsGetDomainOwnershipIdentifier", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifier_568826, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifier_568827, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifier_568863 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDomainOwnershipIdentifier_568865(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifier_568864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568866 = path.getOrDefault("resourceGroupName")
  valid_568866 = validateParameter(valid_568866, JString, required = true,
                                 default = nil)
  if valid_568866 != nil:
    section.add "resourceGroupName", valid_568866
  var valid_568867 = path.getOrDefault("name")
  valid_568867 = validateParameter(valid_568867, JString, required = true,
                                 default = nil)
  if valid_568867 != nil:
    section.add "name", valid_568867
  var valid_568868 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568868 = validateParameter(valid_568868, JString, required = true,
                                 default = nil)
  if valid_568868 != nil:
    section.add "domainOwnershipIdentifierName", valid_568868
  var valid_568869 = path.getOrDefault("subscriptionId")
  valid_568869 = validateParameter(valid_568869, JString, required = true,
                                 default = nil)
  if valid_568869 != nil:
    section.add "subscriptionId", valid_568869
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568870 = query.getOrDefault("api-version")
  valid_568870 = validateParameter(valid_568870, JString, required = true,
                                 default = nil)
  if valid_568870 != nil:
    section.add "api-version", valid_568870
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568872: Call_WebAppsUpdateDomainOwnershipIdentifier_568863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_568872.validator(path, query, header, formData, body)
  let scheme = call_568872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568872.url(scheme.get, call_568872.host, call_568872.base,
                         call_568872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568872, url, valid)

proc call*(call_568873: Call_WebAppsUpdateDomainOwnershipIdentifier_568863;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568874 = newJObject()
  var query_568875 = newJObject()
  var body_568876 = newJObject()
  add(path_568874, "resourceGroupName", newJString(resourceGroupName))
  add(query_568875, "api-version", newJString(apiVersion))
  add(path_568874, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_568876 = domainOwnershipIdentifier
  add(path_568874, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568874, "subscriptionId", newJString(subscriptionId))
  result = call_568873.call(path_568874, query_568875, nil, nil, body_568876)

var webAppsUpdateDomainOwnershipIdentifier* = Call_WebAppsUpdateDomainOwnershipIdentifier_568863(
    name: "webAppsUpdateDomainOwnershipIdentifier", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifier_568864, base: "",
    url: url_WebAppsUpdateDomainOwnershipIdentifier_568865,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifier_568851 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDomainOwnershipIdentifier_568853(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifier_568852(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568854 = path.getOrDefault("resourceGroupName")
  valid_568854 = validateParameter(valid_568854, JString, required = true,
                                 default = nil)
  if valid_568854 != nil:
    section.add "resourceGroupName", valid_568854
  var valid_568855 = path.getOrDefault("name")
  valid_568855 = validateParameter(valid_568855, JString, required = true,
                                 default = nil)
  if valid_568855 != nil:
    section.add "name", valid_568855
  var valid_568856 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568856 = validateParameter(valid_568856, JString, required = true,
                                 default = nil)
  if valid_568856 != nil:
    section.add "domainOwnershipIdentifierName", valid_568856
  var valid_568857 = path.getOrDefault("subscriptionId")
  valid_568857 = validateParameter(valid_568857, JString, required = true,
                                 default = nil)
  if valid_568857 != nil:
    section.add "subscriptionId", valid_568857
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568858 = query.getOrDefault("api-version")
  valid_568858 = validateParameter(valid_568858, JString, required = true,
                                 default = nil)
  if valid_568858 != nil:
    section.add "api-version", valid_568858
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568859: Call_WebAppsDeleteDomainOwnershipIdentifier_568851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_568859.validator(path, query, header, formData, body)
  let scheme = call_568859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568859.url(scheme.get, call_568859.host, call_568859.base,
                         call_568859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568859, url, valid)

proc call*(call_568860: Call_WebAppsDeleteDomainOwnershipIdentifier_568851;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifier
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568861 = newJObject()
  var query_568862 = newJObject()
  add(path_568861, "resourceGroupName", newJString(resourceGroupName))
  add(query_568862, "api-version", newJString(apiVersion))
  add(path_568861, "name", newJString(name))
  add(path_568861, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568861, "subscriptionId", newJString(subscriptionId))
  result = call_568860.call(path_568861, query_568862, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifier* = Call_WebAppsDeleteDomainOwnershipIdentifier_568851(
    name: "webAppsDeleteDomainOwnershipIdentifier", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifier_568852, base: "",
    url: url_WebAppsDeleteDomainOwnershipIdentifier_568853,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperation_568888 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateMSDeployOperation_568890(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperation_568889(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568891 = path.getOrDefault("resourceGroupName")
  valid_568891 = validateParameter(valid_568891, JString, required = true,
                                 default = nil)
  if valid_568891 != nil:
    section.add "resourceGroupName", valid_568891
  var valid_568892 = path.getOrDefault("name")
  valid_568892 = validateParameter(valid_568892, JString, required = true,
                                 default = nil)
  if valid_568892 != nil:
    section.add "name", valid_568892
  var valid_568893 = path.getOrDefault("subscriptionId")
  valid_568893 = validateParameter(valid_568893, JString, required = true,
                                 default = nil)
  if valid_568893 != nil:
    section.add "subscriptionId", valid_568893
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568894 = query.getOrDefault("api-version")
  valid_568894 = validateParameter(valid_568894, JString, required = true,
                                 default = nil)
  if valid_568894 != nil:
    section.add "api-version", valid_568894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568896: Call_WebAppsCreateMSDeployOperation_568888; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_568896.validator(path, query, header, formData, body)
  let scheme = call_568896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568896.url(scheme.get, call_568896.host, call_568896.base,
                         call_568896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568896, url, valid)

proc call*(call_568897: Call_WebAppsCreateMSDeployOperation_568888;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_568898 = newJObject()
  var query_568899 = newJObject()
  var body_568900 = newJObject()
  add(path_568898, "resourceGroupName", newJString(resourceGroupName))
  add(query_568899, "api-version", newJString(apiVersion))
  add(path_568898, "name", newJString(name))
  add(path_568898, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_568900 = MSDeploy
  result = call_568897.call(path_568898, query_568899, nil, nil, body_568900)

var webAppsCreateMSDeployOperation* = Call_WebAppsCreateMSDeployOperation_568888(
    name: "webAppsCreateMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperation_568889, base: "",
    url: url_WebAppsCreateMSDeployOperation_568890, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatus_568877 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployStatus_568879(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatus_568878(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568880 = path.getOrDefault("resourceGroupName")
  valid_568880 = validateParameter(valid_568880, JString, required = true,
                                 default = nil)
  if valid_568880 != nil:
    section.add "resourceGroupName", valid_568880
  var valid_568881 = path.getOrDefault("name")
  valid_568881 = validateParameter(valid_568881, JString, required = true,
                                 default = nil)
  if valid_568881 != nil:
    section.add "name", valid_568881
  var valid_568882 = path.getOrDefault("subscriptionId")
  valid_568882 = validateParameter(valid_568882, JString, required = true,
                                 default = nil)
  if valid_568882 != nil:
    section.add "subscriptionId", valid_568882
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568883 = query.getOrDefault("api-version")
  valid_568883 = validateParameter(valid_568883, JString, required = true,
                                 default = nil)
  if valid_568883 != nil:
    section.add "api-version", valid_568883
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568884: Call_WebAppsGetMSDeployStatus_568877; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_568884.validator(path, query, header, formData, body)
  let scheme = call_568884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568884.url(scheme.get, call_568884.host, call_568884.base,
                         call_568884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568884, url, valid)

proc call*(call_568885: Call_WebAppsGetMSDeployStatus_568877;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568886 = newJObject()
  var query_568887 = newJObject()
  add(path_568886, "resourceGroupName", newJString(resourceGroupName))
  add(query_568887, "api-version", newJString(apiVersion))
  add(path_568886, "name", newJString(name))
  add(path_568886, "subscriptionId", newJString(subscriptionId))
  result = call_568885.call(path_568886, query_568887, nil, nil, nil)

var webAppsGetMSDeployStatus* = Call_WebAppsGetMSDeployStatus_568877(
    name: "webAppsGetMSDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatus_568878, base: "",
    url: url_WebAppsGetMSDeployStatus_568879, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLog_568901 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployLog_568903(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLog_568902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568904 = path.getOrDefault("resourceGroupName")
  valid_568904 = validateParameter(valid_568904, JString, required = true,
                                 default = nil)
  if valid_568904 != nil:
    section.add "resourceGroupName", valid_568904
  var valid_568905 = path.getOrDefault("name")
  valid_568905 = validateParameter(valid_568905, JString, required = true,
                                 default = nil)
  if valid_568905 != nil:
    section.add "name", valid_568905
  var valid_568906 = path.getOrDefault("subscriptionId")
  valid_568906 = validateParameter(valid_568906, JString, required = true,
                                 default = nil)
  if valid_568906 != nil:
    section.add "subscriptionId", valid_568906
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568907 = query.getOrDefault("api-version")
  valid_568907 = validateParameter(valid_568907, JString, required = true,
                                 default = nil)
  if valid_568907 != nil:
    section.add "api-version", valid_568907
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568908: Call_WebAppsGetMSDeployLog_568901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_568908.validator(path, query, header, formData, body)
  let scheme = call_568908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568908.url(scheme.get, call_568908.host, call_568908.base,
                         call_568908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568908, url, valid)

proc call*(call_568909: Call_WebAppsGetMSDeployLog_568901;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568910 = newJObject()
  var query_568911 = newJObject()
  add(path_568910, "resourceGroupName", newJString(resourceGroupName))
  add(query_568911, "api-version", newJString(apiVersion))
  add(path_568910, "name", newJString(name))
  add(path_568910, "subscriptionId", newJString(subscriptionId))
  result = call_568909.call(path_568910, query_568911, nil, nil, nil)

var webAppsGetMSDeployLog* = Call_WebAppsGetMSDeployLog_568901(
    name: "webAppsGetMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLog_568902, base: "",
    url: url_WebAppsGetMSDeployLog_568903, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctions_568912 = ref object of OpenApiRestCall_567666
proc url_WebAppsListFunctions_568914(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctions_568913(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568915 = path.getOrDefault("resourceGroupName")
  valid_568915 = validateParameter(valid_568915, JString, required = true,
                                 default = nil)
  if valid_568915 != nil:
    section.add "resourceGroupName", valid_568915
  var valid_568916 = path.getOrDefault("name")
  valid_568916 = validateParameter(valid_568916, JString, required = true,
                                 default = nil)
  if valid_568916 != nil:
    section.add "name", valid_568916
  var valid_568917 = path.getOrDefault("subscriptionId")
  valid_568917 = validateParameter(valid_568917, JString, required = true,
                                 default = nil)
  if valid_568917 != nil:
    section.add "subscriptionId", valid_568917
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568918 = query.getOrDefault("api-version")
  valid_568918 = validateParameter(valid_568918, JString, required = true,
                                 default = nil)
  if valid_568918 != nil:
    section.add "api-version", valid_568918
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568919: Call_WebAppsListFunctions_568912; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_568919.validator(path, query, header, formData, body)
  let scheme = call_568919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568919.url(scheme.get, call_568919.host, call_568919.base,
                         call_568919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568919, url, valid)

proc call*(call_568920: Call_WebAppsListFunctions_568912;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListFunctions
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568921 = newJObject()
  var query_568922 = newJObject()
  add(path_568921, "resourceGroupName", newJString(resourceGroupName))
  add(query_568922, "api-version", newJString(apiVersion))
  add(path_568921, "name", newJString(name))
  add(path_568921, "subscriptionId", newJString(subscriptionId))
  result = call_568920.call(path_568921, query_568922, nil, nil, nil)

var webAppsListFunctions* = Call_WebAppsListFunctions_568912(
    name: "webAppsListFunctions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    validator: validate_WebAppsListFunctions_568913, base: "",
    url: url_WebAppsListFunctions_568914, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminToken_568923 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetFunctionsAdminToken_568925(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminToken_568924(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568926 = path.getOrDefault("resourceGroupName")
  valid_568926 = validateParameter(valid_568926, JString, required = true,
                                 default = nil)
  if valid_568926 != nil:
    section.add "resourceGroupName", valid_568926
  var valid_568927 = path.getOrDefault("name")
  valid_568927 = validateParameter(valid_568927, JString, required = true,
                                 default = nil)
  if valid_568927 != nil:
    section.add "name", valid_568927
  var valid_568928 = path.getOrDefault("subscriptionId")
  valid_568928 = validateParameter(valid_568928, JString, required = true,
                                 default = nil)
  if valid_568928 != nil:
    section.add "subscriptionId", valid_568928
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568929 = query.getOrDefault("api-version")
  valid_568929 = validateParameter(valid_568929, JString, required = true,
                                 default = nil)
  if valid_568929 != nil:
    section.add "api-version", valid_568929
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568930: Call_WebAppsGetFunctionsAdminToken_568923; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_568930.validator(path, query, header, formData, body)
  let scheme = call_568930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568930.url(scheme.get, call_568930.host, call_568930.base,
                         call_568930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568930, url, valid)

proc call*(call_568931: Call_WebAppsGetFunctionsAdminToken_568923;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminToken
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568932 = newJObject()
  var query_568933 = newJObject()
  add(path_568932, "resourceGroupName", newJString(resourceGroupName))
  add(query_568933, "api-version", newJString(apiVersion))
  add(path_568932, "name", newJString(name))
  add(path_568932, "subscriptionId", newJString(subscriptionId))
  result = call_568931.call(path_568932, query_568933, nil, nil, nil)

var webAppsGetFunctionsAdminToken* = Call_WebAppsGetFunctionsAdminToken_568923(
    name: "webAppsGetFunctionsAdminToken", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminToken_568924, base: "",
    url: url_WebAppsGetFunctionsAdminToken_568925, schemes: {Scheme.Https})
type
  Call_WebAppsCreateFunction_568946 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateFunction_568948(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateFunction_568947(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568949 = path.getOrDefault("resourceGroupName")
  valid_568949 = validateParameter(valid_568949, JString, required = true,
                                 default = nil)
  if valid_568949 != nil:
    section.add "resourceGroupName", valid_568949
  var valid_568950 = path.getOrDefault("name")
  valid_568950 = validateParameter(valid_568950, JString, required = true,
                                 default = nil)
  if valid_568950 != nil:
    section.add "name", valid_568950
  var valid_568951 = path.getOrDefault("subscriptionId")
  valid_568951 = validateParameter(valid_568951, JString, required = true,
                                 default = nil)
  if valid_568951 != nil:
    section.add "subscriptionId", valid_568951
  var valid_568952 = path.getOrDefault("functionName")
  valid_568952 = validateParameter(valid_568952, JString, required = true,
                                 default = nil)
  if valid_568952 != nil:
    section.add "functionName", valid_568952
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568953 = query.getOrDefault("api-version")
  valid_568953 = validateParameter(valid_568953, JString, required = true,
                                 default = nil)
  if valid_568953 != nil:
    section.add "api-version", valid_568953
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568955: Call_WebAppsCreateFunction_568946; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_568955.validator(path, query, header, formData, body)
  let scheme = call_568955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568955.url(scheme.get, call_568955.host, call_568955.base,
                         call_568955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568955, url, valid)

proc call*(call_568956: Call_WebAppsCreateFunction_568946;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateFunction
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_568957 = newJObject()
  var query_568958 = newJObject()
  var body_568959 = newJObject()
  add(path_568957, "resourceGroupName", newJString(resourceGroupName))
  add(query_568958, "api-version", newJString(apiVersion))
  add(path_568957, "name", newJString(name))
  add(path_568957, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_568959 = functionEnvelope
  add(path_568957, "functionName", newJString(functionName))
  result = call_568956.call(path_568957, query_568958, nil, nil, body_568959)

var webAppsCreateFunction* = Call_WebAppsCreateFunction_568946(
    name: "webAppsCreateFunction", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsCreateFunction_568947, base: "",
    url: url_WebAppsCreateFunction_568948, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunction_568934 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetFunction_568936(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunction_568935(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568937 = path.getOrDefault("resourceGroupName")
  valid_568937 = validateParameter(valid_568937, JString, required = true,
                                 default = nil)
  if valid_568937 != nil:
    section.add "resourceGroupName", valid_568937
  var valid_568938 = path.getOrDefault("name")
  valid_568938 = validateParameter(valid_568938, JString, required = true,
                                 default = nil)
  if valid_568938 != nil:
    section.add "name", valid_568938
  var valid_568939 = path.getOrDefault("subscriptionId")
  valid_568939 = validateParameter(valid_568939, JString, required = true,
                                 default = nil)
  if valid_568939 != nil:
    section.add "subscriptionId", valid_568939
  var valid_568940 = path.getOrDefault("functionName")
  valid_568940 = validateParameter(valid_568940, JString, required = true,
                                 default = nil)
  if valid_568940 != nil:
    section.add "functionName", valid_568940
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568941 = query.getOrDefault("api-version")
  valid_568941 = validateParameter(valid_568941, JString, required = true,
                                 default = nil)
  if valid_568941 != nil:
    section.add "api-version", valid_568941
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568942: Call_WebAppsGetFunction_568934; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_568942.validator(path, query, header, formData, body)
  let scheme = call_568942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568942.url(scheme.get, call_568942.host, call_568942.base,
                         call_568942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568942, url, valid)

proc call*(call_568943: Call_WebAppsGetFunction_568934; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          functionName: string): Recallable =
  ## webAppsGetFunction
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_568944 = newJObject()
  var query_568945 = newJObject()
  add(path_568944, "resourceGroupName", newJString(resourceGroupName))
  add(query_568945, "api-version", newJString(apiVersion))
  add(path_568944, "name", newJString(name))
  add(path_568944, "subscriptionId", newJString(subscriptionId))
  add(path_568944, "functionName", newJString(functionName))
  result = call_568943.call(path_568944, query_568945, nil, nil, nil)

var webAppsGetFunction* = Call_WebAppsGetFunction_568934(
    name: "webAppsGetFunction", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsGetFunction_568935, base: "",
    url: url_WebAppsGetFunction_568936, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteFunction_568960 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteFunction_568962(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteFunction_568961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568963 = path.getOrDefault("resourceGroupName")
  valid_568963 = validateParameter(valid_568963, JString, required = true,
                                 default = nil)
  if valid_568963 != nil:
    section.add "resourceGroupName", valid_568963
  var valid_568964 = path.getOrDefault("name")
  valid_568964 = validateParameter(valid_568964, JString, required = true,
                                 default = nil)
  if valid_568964 != nil:
    section.add "name", valid_568964
  var valid_568965 = path.getOrDefault("subscriptionId")
  valid_568965 = validateParameter(valid_568965, JString, required = true,
                                 default = nil)
  if valid_568965 != nil:
    section.add "subscriptionId", valid_568965
  var valid_568966 = path.getOrDefault("functionName")
  valid_568966 = validateParameter(valid_568966, JString, required = true,
                                 default = nil)
  if valid_568966 != nil:
    section.add "functionName", valid_568966
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568967 = query.getOrDefault("api-version")
  valid_568967 = validateParameter(valid_568967, JString, required = true,
                                 default = nil)
  if valid_568967 != nil:
    section.add "api-version", valid_568967
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568968: Call_WebAppsDeleteFunction_568960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_568968.validator(path, query, header, formData, body)
  let scheme = call_568968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568968.url(scheme.get, call_568968.host, call_568968.base,
                         call_568968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568968, url, valid)

proc call*(call_568969: Call_WebAppsDeleteFunction_568960;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteFunction
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_568970 = newJObject()
  var query_568971 = newJObject()
  add(path_568970, "resourceGroupName", newJString(resourceGroupName))
  add(query_568971, "api-version", newJString(apiVersion))
  add(path_568970, "name", newJString(name))
  add(path_568970, "subscriptionId", newJString(subscriptionId))
  add(path_568970, "functionName", newJString(functionName))
  result = call_568969.call(path_568970, query_568971, nil, nil, nil)

var webAppsDeleteFunction* = Call_WebAppsDeleteFunction_568960(
    name: "webAppsDeleteFunction", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsDeleteFunction_568961, base: "",
    url: url_WebAppsDeleteFunction_568962, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecrets_568972 = ref object of OpenApiRestCall_567666
proc url_WebAppsListFunctionSecrets_568974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecrets_568973(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568975 = path.getOrDefault("resourceGroupName")
  valid_568975 = validateParameter(valid_568975, JString, required = true,
                                 default = nil)
  if valid_568975 != nil:
    section.add "resourceGroupName", valid_568975
  var valid_568976 = path.getOrDefault("name")
  valid_568976 = validateParameter(valid_568976, JString, required = true,
                                 default = nil)
  if valid_568976 != nil:
    section.add "name", valid_568976
  var valid_568977 = path.getOrDefault("subscriptionId")
  valid_568977 = validateParameter(valid_568977, JString, required = true,
                                 default = nil)
  if valid_568977 != nil:
    section.add "subscriptionId", valid_568977
  var valid_568978 = path.getOrDefault("functionName")
  valid_568978 = validateParameter(valid_568978, JString, required = true,
                                 default = nil)
  if valid_568978 != nil:
    section.add "functionName", valid_568978
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568979 = query.getOrDefault("api-version")
  valid_568979 = validateParameter(valid_568979, JString, required = true,
                                 default = nil)
  if valid_568979 != nil:
    section.add "api-version", valid_568979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568980: Call_WebAppsListFunctionSecrets_568972; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_568980.validator(path, query, header, formData, body)
  let scheme = call_568980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568980.url(scheme.get, call_568980.host, call_568980.base,
                         call_568980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568980, url, valid)

proc call*(call_568981: Call_WebAppsListFunctionSecrets_568972;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecrets
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_568982 = newJObject()
  var query_568983 = newJObject()
  add(path_568982, "resourceGroupName", newJString(resourceGroupName))
  add(query_568983, "api-version", newJString(apiVersion))
  add(path_568982, "name", newJString(name))
  add(path_568982, "subscriptionId", newJString(subscriptionId))
  add(path_568982, "functionName", newJString(functionName))
  result = call_568981.call(path_568982, query_568983, nil, nil, nil)

var webAppsListFunctionSecrets* = Call_WebAppsListFunctionSecrets_568972(
    name: "webAppsListFunctionSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecrets_568973, base: "",
    url: url_WebAppsListFunctionSecrets_568974, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindings_568984 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHostNameBindings_568986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindings_568985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568987 = path.getOrDefault("resourceGroupName")
  valid_568987 = validateParameter(valid_568987, JString, required = true,
                                 default = nil)
  if valid_568987 != nil:
    section.add "resourceGroupName", valid_568987
  var valid_568988 = path.getOrDefault("name")
  valid_568988 = validateParameter(valid_568988, JString, required = true,
                                 default = nil)
  if valid_568988 != nil:
    section.add "name", valid_568988
  var valid_568989 = path.getOrDefault("subscriptionId")
  valid_568989 = validateParameter(valid_568989, JString, required = true,
                                 default = nil)
  if valid_568989 != nil:
    section.add "subscriptionId", valid_568989
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568990 = query.getOrDefault("api-version")
  valid_568990 = validateParameter(valid_568990, JString, required = true,
                                 default = nil)
  if valid_568990 != nil:
    section.add "api-version", valid_568990
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568991: Call_WebAppsListHostNameBindings_568984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_568991.validator(path, query, header, formData, body)
  let scheme = call_568991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568991.url(scheme.get, call_568991.host, call_568991.base,
                         call_568991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568991, url, valid)

proc call*(call_568992: Call_WebAppsListHostNameBindings_568984;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindings
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568993 = newJObject()
  var query_568994 = newJObject()
  add(path_568993, "resourceGroupName", newJString(resourceGroupName))
  add(query_568994, "api-version", newJString(apiVersion))
  add(path_568993, "name", newJString(name))
  add(path_568993, "subscriptionId", newJString(subscriptionId))
  result = call_568992.call(path_568993, query_568994, nil, nil, nil)

var webAppsListHostNameBindings* = Call_WebAppsListHostNameBindings_568984(
    name: "webAppsListHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindings_568985, base: "",
    url: url_WebAppsListHostNameBindings_568986, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBinding_569007 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHostNameBinding_569009(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBinding_569008(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569010 = path.getOrDefault("resourceGroupName")
  valid_569010 = validateParameter(valid_569010, JString, required = true,
                                 default = nil)
  if valid_569010 != nil:
    section.add "resourceGroupName", valid_569010
  var valid_569011 = path.getOrDefault("name")
  valid_569011 = validateParameter(valid_569011, JString, required = true,
                                 default = nil)
  if valid_569011 != nil:
    section.add "name", valid_569011
  var valid_569012 = path.getOrDefault("subscriptionId")
  valid_569012 = validateParameter(valid_569012, JString, required = true,
                                 default = nil)
  if valid_569012 != nil:
    section.add "subscriptionId", valid_569012
  var valid_569013 = path.getOrDefault("hostName")
  valid_569013 = validateParameter(valid_569013, JString, required = true,
                                 default = nil)
  if valid_569013 != nil:
    section.add "hostName", valid_569013
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569014 = query.getOrDefault("api-version")
  valid_569014 = validateParameter(valid_569014, JString, required = true,
                                 default = nil)
  if valid_569014 != nil:
    section.add "api-version", valid_569014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569016: Call_WebAppsCreateOrUpdateHostNameBinding_569007;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_569016.validator(path, query, header, formData, body)
  let scheme = call_569016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569016.url(scheme.get, call_569016.host, call_569016.base,
                         call_569016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569016, url, valid)

proc call*(call_569017: Call_WebAppsCreateOrUpdateHostNameBinding_569007;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBinding
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_569018 = newJObject()
  var query_569019 = newJObject()
  var body_569020 = newJObject()
  add(path_569018, "resourceGroupName", newJString(resourceGroupName))
  add(query_569019, "api-version", newJString(apiVersion))
  add(path_569018, "name", newJString(name))
  add(path_569018, "subscriptionId", newJString(subscriptionId))
  add(path_569018, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_569020 = hostNameBinding
  result = call_569017.call(path_569018, query_569019, nil, nil, body_569020)

var webAppsCreateOrUpdateHostNameBinding* = Call_WebAppsCreateOrUpdateHostNameBinding_569007(
    name: "webAppsCreateOrUpdateHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBinding_569008, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBinding_569009, schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBinding_568995 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHostNameBinding_568997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBinding_568996(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568998 = path.getOrDefault("resourceGroupName")
  valid_568998 = validateParameter(valid_568998, JString, required = true,
                                 default = nil)
  if valid_568998 != nil:
    section.add "resourceGroupName", valid_568998
  var valid_568999 = path.getOrDefault("name")
  valid_568999 = validateParameter(valid_568999, JString, required = true,
                                 default = nil)
  if valid_568999 != nil:
    section.add "name", valid_568999
  var valid_569000 = path.getOrDefault("subscriptionId")
  valid_569000 = validateParameter(valid_569000, JString, required = true,
                                 default = nil)
  if valid_569000 != nil:
    section.add "subscriptionId", valid_569000
  var valid_569001 = path.getOrDefault("hostName")
  valid_569001 = validateParameter(valid_569001, JString, required = true,
                                 default = nil)
  if valid_569001 != nil:
    section.add "hostName", valid_569001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569002 = query.getOrDefault("api-version")
  valid_569002 = validateParameter(valid_569002, JString, required = true,
                                 default = nil)
  if valid_569002 != nil:
    section.add "api-version", valid_569002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569003: Call_WebAppsGetHostNameBinding_568995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_569003.validator(path, query, header, formData, body)
  let scheme = call_569003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569003.url(scheme.get, call_569003.host, call_569003.base,
                         call_569003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569003, url, valid)

proc call*(call_569004: Call_WebAppsGetHostNameBinding_568995;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBinding
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_569005 = newJObject()
  var query_569006 = newJObject()
  add(path_569005, "resourceGroupName", newJString(resourceGroupName))
  add(query_569006, "api-version", newJString(apiVersion))
  add(path_569005, "name", newJString(name))
  add(path_569005, "subscriptionId", newJString(subscriptionId))
  add(path_569005, "hostName", newJString(hostName))
  result = call_569004.call(path_569005, query_569006, nil, nil, nil)

var webAppsGetHostNameBinding* = Call_WebAppsGetHostNameBinding_568995(
    name: "webAppsGetHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBinding_568996, base: "",
    url: url_WebAppsGetHostNameBinding_568997, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBinding_569021 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHostNameBinding_569023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBinding_569022(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569024 = path.getOrDefault("resourceGroupName")
  valid_569024 = validateParameter(valid_569024, JString, required = true,
                                 default = nil)
  if valid_569024 != nil:
    section.add "resourceGroupName", valid_569024
  var valid_569025 = path.getOrDefault("name")
  valid_569025 = validateParameter(valid_569025, JString, required = true,
                                 default = nil)
  if valid_569025 != nil:
    section.add "name", valid_569025
  var valid_569026 = path.getOrDefault("subscriptionId")
  valid_569026 = validateParameter(valid_569026, JString, required = true,
                                 default = nil)
  if valid_569026 != nil:
    section.add "subscriptionId", valid_569026
  var valid_569027 = path.getOrDefault("hostName")
  valid_569027 = validateParameter(valid_569027, JString, required = true,
                                 default = nil)
  if valid_569027 != nil:
    section.add "hostName", valid_569027
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569028 = query.getOrDefault("api-version")
  valid_569028 = validateParameter(valid_569028, JString, required = true,
                                 default = nil)
  if valid_569028 != nil:
    section.add "api-version", valid_569028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569029: Call_WebAppsDeleteHostNameBinding_569021; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_569029.validator(path, query, header, formData, body)
  let scheme = call_569029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569029.url(scheme.get, call_569029.host, call_569029.base,
                         call_569029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569029, url, valid)

proc call*(call_569030: Call_WebAppsDeleteHostNameBinding_569021;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBinding
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_569031 = newJObject()
  var query_569032 = newJObject()
  add(path_569031, "resourceGroupName", newJString(resourceGroupName))
  add(query_569032, "api-version", newJString(apiVersion))
  add(path_569031, "name", newJString(name))
  add(path_569031, "subscriptionId", newJString(subscriptionId))
  add(path_569031, "hostName", newJString(hostName))
  result = call_569030.call(path_569031, query_569032, nil, nil, nil)

var webAppsDeleteHostNameBinding* = Call_WebAppsDeleteHostNameBinding_569021(
    name: "webAppsDeleteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBinding_569022, base: "",
    url: url_WebAppsDeleteHostNameBinding_569023, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnection_569046 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHybridConnection_569048(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnection_569047(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569049 = path.getOrDefault("namespaceName")
  valid_569049 = validateParameter(valid_569049, JString, required = true,
                                 default = nil)
  if valid_569049 != nil:
    section.add "namespaceName", valid_569049
  var valid_569050 = path.getOrDefault("resourceGroupName")
  valid_569050 = validateParameter(valid_569050, JString, required = true,
                                 default = nil)
  if valid_569050 != nil:
    section.add "resourceGroupName", valid_569050
  var valid_569051 = path.getOrDefault("name")
  valid_569051 = validateParameter(valid_569051, JString, required = true,
                                 default = nil)
  if valid_569051 != nil:
    section.add "name", valid_569051
  var valid_569052 = path.getOrDefault("subscriptionId")
  valid_569052 = validateParameter(valid_569052, JString, required = true,
                                 default = nil)
  if valid_569052 != nil:
    section.add "subscriptionId", valid_569052
  var valid_569053 = path.getOrDefault("relayName")
  valid_569053 = validateParameter(valid_569053, JString, required = true,
                                 default = nil)
  if valid_569053 != nil:
    section.add "relayName", valid_569053
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569054 = query.getOrDefault("api-version")
  valid_569054 = validateParameter(valid_569054, JString, required = true,
                                 default = nil)
  if valid_569054 != nil:
    section.add "api-version", valid_569054
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569056: Call_WebAppsCreateOrUpdateHybridConnection_569046;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_569056.validator(path, query, header, formData, body)
  let scheme = call_569056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569056.url(scheme.get, call_569056.host, call_569056.base,
                         call_569056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569056, url, valid)

proc call*(call_569057: Call_WebAppsCreateOrUpdateHybridConnection_569046;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569058 = newJObject()
  var query_569059 = newJObject()
  var body_569060 = newJObject()
  add(path_569058, "namespaceName", newJString(namespaceName))
  add(path_569058, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569060 = connectionEnvelope
  add(path_569058, "name", newJString(name))
  add(query_569059, "api-version", newJString(apiVersion))
  add(path_569058, "subscriptionId", newJString(subscriptionId))
  add(path_569058, "relayName", newJString(relayName))
  result = call_569057.call(path_569058, query_569059, nil, nil, body_569060)

var webAppsCreateOrUpdateHybridConnection* = Call_WebAppsCreateOrUpdateHybridConnection_569046(
    name: "webAppsCreateOrUpdateHybridConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnection_569047, base: "",
    url: url_WebAppsCreateOrUpdateHybridConnection_569048, schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnection_569033 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHybridConnection_569035(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnection_569034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569036 = path.getOrDefault("namespaceName")
  valid_569036 = validateParameter(valid_569036, JString, required = true,
                                 default = nil)
  if valid_569036 != nil:
    section.add "namespaceName", valid_569036
  var valid_569037 = path.getOrDefault("resourceGroupName")
  valid_569037 = validateParameter(valid_569037, JString, required = true,
                                 default = nil)
  if valid_569037 != nil:
    section.add "resourceGroupName", valid_569037
  var valid_569038 = path.getOrDefault("name")
  valid_569038 = validateParameter(valid_569038, JString, required = true,
                                 default = nil)
  if valid_569038 != nil:
    section.add "name", valid_569038
  var valid_569039 = path.getOrDefault("subscriptionId")
  valid_569039 = validateParameter(valid_569039, JString, required = true,
                                 default = nil)
  if valid_569039 != nil:
    section.add "subscriptionId", valid_569039
  var valid_569040 = path.getOrDefault("relayName")
  valid_569040 = validateParameter(valid_569040, JString, required = true,
                                 default = nil)
  if valid_569040 != nil:
    section.add "relayName", valid_569040
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569041 = query.getOrDefault("api-version")
  valid_569041 = validateParameter(valid_569041, JString, required = true,
                                 default = nil)
  if valid_569041 != nil:
    section.add "api-version", valid_569041
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569042: Call_WebAppsGetHybridConnection_569033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_569042.validator(path, query, header, formData, body)
  let scheme = call_569042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569042.url(scheme.get, call_569042.host, call_569042.base,
                         call_569042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569042, url, valid)

proc call*(call_569043: Call_WebAppsGetHybridConnection_569033;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnection
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569044 = newJObject()
  var query_569045 = newJObject()
  add(path_569044, "namespaceName", newJString(namespaceName))
  add(path_569044, "resourceGroupName", newJString(resourceGroupName))
  add(query_569045, "api-version", newJString(apiVersion))
  add(path_569044, "name", newJString(name))
  add(path_569044, "subscriptionId", newJString(subscriptionId))
  add(path_569044, "relayName", newJString(relayName))
  result = call_569043.call(path_569044, query_569045, nil, nil, nil)

var webAppsGetHybridConnection* = Call_WebAppsGetHybridConnection_569033(
    name: "webAppsGetHybridConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnection_569034, base: "",
    url: url_WebAppsGetHybridConnection_569035, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnection_569074 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateHybridConnection_569076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnection_569075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569077 = path.getOrDefault("namespaceName")
  valid_569077 = validateParameter(valid_569077, JString, required = true,
                                 default = nil)
  if valid_569077 != nil:
    section.add "namespaceName", valid_569077
  var valid_569078 = path.getOrDefault("resourceGroupName")
  valid_569078 = validateParameter(valid_569078, JString, required = true,
                                 default = nil)
  if valid_569078 != nil:
    section.add "resourceGroupName", valid_569078
  var valid_569079 = path.getOrDefault("name")
  valid_569079 = validateParameter(valid_569079, JString, required = true,
                                 default = nil)
  if valid_569079 != nil:
    section.add "name", valid_569079
  var valid_569080 = path.getOrDefault("subscriptionId")
  valid_569080 = validateParameter(valid_569080, JString, required = true,
                                 default = nil)
  if valid_569080 != nil:
    section.add "subscriptionId", valid_569080
  var valid_569081 = path.getOrDefault("relayName")
  valid_569081 = validateParameter(valid_569081, JString, required = true,
                                 default = nil)
  if valid_569081 != nil:
    section.add "relayName", valid_569081
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569082 = query.getOrDefault("api-version")
  valid_569082 = validateParameter(valid_569082, JString, required = true,
                                 default = nil)
  if valid_569082 != nil:
    section.add "api-version", valid_569082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569084: Call_WebAppsUpdateHybridConnection_569074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_569084.validator(path, query, header, formData, body)
  let scheme = call_569084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569084.url(scheme.get, call_569084.host, call_569084.base,
                         call_569084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569084, url, valid)

proc call*(call_569085: Call_WebAppsUpdateHybridConnection_569074;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569086 = newJObject()
  var query_569087 = newJObject()
  var body_569088 = newJObject()
  add(path_569086, "namespaceName", newJString(namespaceName))
  add(path_569086, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569088 = connectionEnvelope
  add(path_569086, "name", newJString(name))
  add(query_569087, "api-version", newJString(apiVersion))
  add(path_569086, "subscriptionId", newJString(subscriptionId))
  add(path_569086, "relayName", newJString(relayName))
  result = call_569085.call(path_569086, query_569087, nil, nil, body_569088)

var webAppsUpdateHybridConnection* = Call_WebAppsUpdateHybridConnection_569074(
    name: "webAppsUpdateHybridConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnection_569075, base: "",
    url: url_WebAppsUpdateHybridConnection_569076, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnection_569061 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHybridConnection_569063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnection_569062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569064 = path.getOrDefault("namespaceName")
  valid_569064 = validateParameter(valid_569064, JString, required = true,
                                 default = nil)
  if valid_569064 != nil:
    section.add "namespaceName", valid_569064
  var valid_569065 = path.getOrDefault("resourceGroupName")
  valid_569065 = validateParameter(valid_569065, JString, required = true,
                                 default = nil)
  if valid_569065 != nil:
    section.add "resourceGroupName", valid_569065
  var valid_569066 = path.getOrDefault("name")
  valid_569066 = validateParameter(valid_569066, JString, required = true,
                                 default = nil)
  if valid_569066 != nil:
    section.add "name", valid_569066
  var valid_569067 = path.getOrDefault("subscriptionId")
  valid_569067 = validateParameter(valid_569067, JString, required = true,
                                 default = nil)
  if valid_569067 != nil:
    section.add "subscriptionId", valid_569067
  var valid_569068 = path.getOrDefault("relayName")
  valid_569068 = validateParameter(valid_569068, JString, required = true,
                                 default = nil)
  if valid_569068 != nil:
    section.add "relayName", valid_569068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569069 = query.getOrDefault("api-version")
  valid_569069 = validateParameter(valid_569069, JString, required = true,
                                 default = nil)
  if valid_569069 != nil:
    section.add "api-version", valid_569069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569070: Call_WebAppsDeleteHybridConnection_569061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_569070.validator(path, query, header, formData, body)
  let scheme = call_569070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569070.url(scheme.get, call_569070.host, call_569070.base,
                         call_569070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569070, url, valid)

proc call*(call_569071: Call_WebAppsDeleteHybridConnection_569061;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnection
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569072 = newJObject()
  var query_569073 = newJObject()
  add(path_569072, "namespaceName", newJString(namespaceName))
  add(path_569072, "resourceGroupName", newJString(resourceGroupName))
  add(query_569073, "api-version", newJString(apiVersion))
  add(path_569072, "name", newJString(name))
  add(path_569072, "subscriptionId", newJString(subscriptionId))
  add(path_569072, "relayName", newJString(relayName))
  result = call_569071.call(path_569072, query_569073, nil, nil, nil)

var webAppsDeleteHybridConnection* = Call_WebAppsDeleteHybridConnection_569061(
    name: "webAppsDeleteHybridConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnection_569062, base: "",
    url: url_WebAppsDeleteHybridConnection_569063, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeys_569089 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnectionKeys_569091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeys_569090(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569092 = path.getOrDefault("namespaceName")
  valid_569092 = validateParameter(valid_569092, JString, required = true,
                                 default = nil)
  if valid_569092 != nil:
    section.add "namespaceName", valid_569092
  var valid_569093 = path.getOrDefault("resourceGroupName")
  valid_569093 = validateParameter(valid_569093, JString, required = true,
                                 default = nil)
  if valid_569093 != nil:
    section.add "resourceGroupName", valid_569093
  var valid_569094 = path.getOrDefault("name")
  valid_569094 = validateParameter(valid_569094, JString, required = true,
                                 default = nil)
  if valid_569094 != nil:
    section.add "name", valid_569094
  var valid_569095 = path.getOrDefault("subscriptionId")
  valid_569095 = validateParameter(valid_569095, JString, required = true,
                                 default = nil)
  if valid_569095 != nil:
    section.add "subscriptionId", valid_569095
  var valid_569096 = path.getOrDefault("relayName")
  valid_569096 = validateParameter(valid_569096, JString, required = true,
                                 default = nil)
  if valid_569096 != nil:
    section.add "relayName", valid_569096
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569097 = query.getOrDefault("api-version")
  valid_569097 = validateParameter(valid_569097, JString, required = true,
                                 default = nil)
  if valid_569097 != nil:
    section.add "api-version", valid_569097
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569098: Call_WebAppsListHybridConnectionKeys_569089;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_569098.validator(path, query, header, formData, body)
  let scheme = call_569098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569098.url(scheme.get, call_569098.host, call_569098.base,
                         call_569098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569098, url, valid)

proc call*(call_569099: Call_WebAppsListHybridConnectionKeys_569089;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeys
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569100 = newJObject()
  var query_569101 = newJObject()
  add(path_569100, "namespaceName", newJString(namespaceName))
  add(path_569100, "resourceGroupName", newJString(resourceGroupName))
  add(query_569101, "api-version", newJString(apiVersion))
  add(path_569100, "name", newJString(name))
  add(path_569100, "subscriptionId", newJString(subscriptionId))
  add(path_569100, "relayName", newJString(relayName))
  result = call_569099.call(path_569100, query_569101, nil, nil, nil)

var webAppsListHybridConnectionKeys* = Call_WebAppsListHybridConnectionKeys_569089(
    name: "webAppsListHybridConnectionKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeys_569090, base: "",
    url: url_WebAppsListHybridConnectionKeys_569091, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnections_569102 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnections_569104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnections_569103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569105 = path.getOrDefault("resourceGroupName")
  valid_569105 = validateParameter(valid_569105, JString, required = true,
                                 default = nil)
  if valid_569105 != nil:
    section.add "resourceGroupName", valid_569105
  var valid_569106 = path.getOrDefault("name")
  valid_569106 = validateParameter(valid_569106, JString, required = true,
                                 default = nil)
  if valid_569106 != nil:
    section.add "name", valid_569106
  var valid_569107 = path.getOrDefault("subscriptionId")
  valid_569107 = validateParameter(valid_569107, JString, required = true,
                                 default = nil)
  if valid_569107 != nil:
    section.add "subscriptionId", valid_569107
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569108 = query.getOrDefault("api-version")
  valid_569108 = validateParameter(valid_569108, JString, required = true,
                                 default = nil)
  if valid_569108 != nil:
    section.add "api-version", valid_569108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569109: Call_WebAppsListHybridConnections_569102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_569109.validator(path, query, header, formData, body)
  let scheme = call_569109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569109.url(scheme.get, call_569109.host, call_569109.base,
                         call_569109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569109, url, valid)

proc call*(call_569110: Call_WebAppsListHybridConnections_569102;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnections
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569111 = newJObject()
  var query_569112 = newJObject()
  add(path_569111, "resourceGroupName", newJString(resourceGroupName))
  add(query_569112, "api-version", newJString(apiVersion))
  add(path_569111, "name", newJString(name))
  add(path_569111, "subscriptionId", newJString(subscriptionId))
  result = call_569110.call(path_569111, query_569112, nil, nil, nil)

var webAppsListHybridConnections* = Call_WebAppsListHybridConnections_569102(
    name: "webAppsListHybridConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnections_569103, base: "",
    url: url_WebAppsListHybridConnections_569104, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnections_569113 = ref object of OpenApiRestCall_567666
proc url_WebAppsListRelayServiceConnections_569115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnections_569114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569116 = path.getOrDefault("resourceGroupName")
  valid_569116 = validateParameter(valid_569116, JString, required = true,
                                 default = nil)
  if valid_569116 != nil:
    section.add "resourceGroupName", valid_569116
  var valid_569117 = path.getOrDefault("name")
  valid_569117 = validateParameter(valid_569117, JString, required = true,
                                 default = nil)
  if valid_569117 != nil:
    section.add "name", valid_569117
  var valid_569118 = path.getOrDefault("subscriptionId")
  valid_569118 = validateParameter(valid_569118, JString, required = true,
                                 default = nil)
  if valid_569118 != nil:
    section.add "subscriptionId", valid_569118
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569119 = query.getOrDefault("api-version")
  valid_569119 = validateParameter(valid_569119, JString, required = true,
                                 default = nil)
  if valid_569119 != nil:
    section.add "api-version", valid_569119
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569120: Call_WebAppsListRelayServiceConnections_569113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_569120.validator(path, query, header, formData, body)
  let scheme = call_569120.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569120.url(scheme.get, call_569120.host, call_569120.base,
                         call_569120.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569120, url, valid)

proc call*(call_569121: Call_WebAppsListRelayServiceConnections_569113;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnections
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569122 = newJObject()
  var query_569123 = newJObject()
  add(path_569122, "resourceGroupName", newJString(resourceGroupName))
  add(query_569123, "api-version", newJString(apiVersion))
  add(path_569122, "name", newJString(name))
  add(path_569122, "subscriptionId", newJString(subscriptionId))
  result = call_569121.call(path_569122, query_569123, nil, nil, nil)

var webAppsListRelayServiceConnections* = Call_WebAppsListRelayServiceConnections_569113(
    name: "webAppsListRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnections_569114, base: "",
    url: url_WebAppsListRelayServiceConnections_569115, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnection_569136 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateRelayServiceConnection_569138(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnection_569137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569139 = path.getOrDefault("resourceGroupName")
  valid_569139 = validateParameter(valid_569139, JString, required = true,
                                 default = nil)
  if valid_569139 != nil:
    section.add "resourceGroupName", valid_569139
  var valid_569140 = path.getOrDefault("name")
  valid_569140 = validateParameter(valid_569140, JString, required = true,
                                 default = nil)
  if valid_569140 != nil:
    section.add "name", valid_569140
  var valid_569141 = path.getOrDefault("subscriptionId")
  valid_569141 = validateParameter(valid_569141, JString, required = true,
                                 default = nil)
  if valid_569141 != nil:
    section.add "subscriptionId", valid_569141
  var valid_569142 = path.getOrDefault("entityName")
  valid_569142 = validateParameter(valid_569142, JString, required = true,
                                 default = nil)
  if valid_569142 != nil:
    section.add "entityName", valid_569142
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569143 = query.getOrDefault("api-version")
  valid_569143 = validateParameter(valid_569143, JString, required = true,
                                 default = nil)
  if valid_569143 != nil:
    section.add "api-version", valid_569143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569145: Call_WebAppsCreateOrUpdateRelayServiceConnection_569136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_569145.validator(path, query, header, formData, body)
  let scheme = call_569145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569145.url(scheme.get, call_569145.host, call_569145.base,
                         call_569145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569145, url, valid)

proc call*(call_569146: Call_WebAppsCreateOrUpdateRelayServiceConnection_569136;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_569147 = newJObject()
  var query_569148 = newJObject()
  var body_569149 = newJObject()
  add(path_569147, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569149 = connectionEnvelope
  add(path_569147, "name", newJString(name))
  add(query_569148, "api-version", newJString(apiVersion))
  add(path_569147, "subscriptionId", newJString(subscriptionId))
  add(path_569147, "entityName", newJString(entityName))
  result = call_569146.call(path_569147, query_569148, nil, nil, body_569149)

var webAppsCreateOrUpdateRelayServiceConnection* = Call_WebAppsCreateOrUpdateRelayServiceConnection_569136(
    name: "webAppsCreateOrUpdateRelayServiceConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnection_569137,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnection_569138,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnection_569124 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetRelayServiceConnection_569126(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnection_569125(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569127 = path.getOrDefault("resourceGroupName")
  valid_569127 = validateParameter(valid_569127, JString, required = true,
                                 default = nil)
  if valid_569127 != nil:
    section.add "resourceGroupName", valid_569127
  var valid_569128 = path.getOrDefault("name")
  valid_569128 = validateParameter(valid_569128, JString, required = true,
                                 default = nil)
  if valid_569128 != nil:
    section.add "name", valid_569128
  var valid_569129 = path.getOrDefault("subscriptionId")
  valid_569129 = validateParameter(valid_569129, JString, required = true,
                                 default = nil)
  if valid_569129 != nil:
    section.add "subscriptionId", valid_569129
  var valid_569130 = path.getOrDefault("entityName")
  valid_569130 = validateParameter(valid_569130, JString, required = true,
                                 default = nil)
  if valid_569130 != nil:
    section.add "entityName", valid_569130
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569131 = query.getOrDefault("api-version")
  valid_569131 = validateParameter(valid_569131, JString, required = true,
                                 default = nil)
  if valid_569131 != nil:
    section.add "api-version", valid_569131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569132: Call_WebAppsGetRelayServiceConnection_569124;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_569132.validator(path, query, header, formData, body)
  let scheme = call_569132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569132.url(scheme.get, call_569132.host, call_569132.base,
                         call_569132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569132, url, valid)

proc call*(call_569133: Call_WebAppsGetRelayServiceConnection_569124;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnection
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_569134 = newJObject()
  var query_569135 = newJObject()
  add(path_569134, "resourceGroupName", newJString(resourceGroupName))
  add(query_569135, "api-version", newJString(apiVersion))
  add(path_569134, "name", newJString(name))
  add(path_569134, "subscriptionId", newJString(subscriptionId))
  add(path_569134, "entityName", newJString(entityName))
  result = call_569133.call(path_569134, query_569135, nil, nil, nil)

var webAppsGetRelayServiceConnection* = Call_WebAppsGetRelayServiceConnection_569124(
    name: "webAppsGetRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnection_569125, base: "",
    url: url_WebAppsGetRelayServiceConnection_569126, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnection_569162 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateRelayServiceConnection_569164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnection_569163(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569165 = path.getOrDefault("resourceGroupName")
  valid_569165 = validateParameter(valid_569165, JString, required = true,
                                 default = nil)
  if valid_569165 != nil:
    section.add "resourceGroupName", valid_569165
  var valid_569166 = path.getOrDefault("name")
  valid_569166 = validateParameter(valid_569166, JString, required = true,
                                 default = nil)
  if valid_569166 != nil:
    section.add "name", valid_569166
  var valid_569167 = path.getOrDefault("subscriptionId")
  valid_569167 = validateParameter(valid_569167, JString, required = true,
                                 default = nil)
  if valid_569167 != nil:
    section.add "subscriptionId", valid_569167
  var valid_569168 = path.getOrDefault("entityName")
  valid_569168 = validateParameter(valid_569168, JString, required = true,
                                 default = nil)
  if valid_569168 != nil:
    section.add "entityName", valid_569168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569169 = query.getOrDefault("api-version")
  valid_569169 = validateParameter(valid_569169, JString, required = true,
                                 default = nil)
  if valid_569169 != nil:
    section.add "api-version", valid_569169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569171: Call_WebAppsUpdateRelayServiceConnection_569162;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_569171.validator(path, query, header, formData, body)
  let scheme = call_569171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569171.url(scheme.get, call_569171.host, call_569171.base,
                         call_569171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569171, url, valid)

proc call*(call_569172: Call_WebAppsUpdateRelayServiceConnection_569162;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_569173 = newJObject()
  var query_569174 = newJObject()
  var body_569175 = newJObject()
  add(path_569173, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569175 = connectionEnvelope
  add(path_569173, "name", newJString(name))
  add(query_569174, "api-version", newJString(apiVersion))
  add(path_569173, "subscriptionId", newJString(subscriptionId))
  add(path_569173, "entityName", newJString(entityName))
  result = call_569172.call(path_569173, query_569174, nil, nil, body_569175)

var webAppsUpdateRelayServiceConnection* = Call_WebAppsUpdateRelayServiceConnection_569162(
    name: "webAppsUpdateRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnection_569163, base: "",
    url: url_WebAppsUpdateRelayServiceConnection_569164, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnection_569150 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteRelayServiceConnection_569152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnection_569151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569153 = path.getOrDefault("resourceGroupName")
  valid_569153 = validateParameter(valid_569153, JString, required = true,
                                 default = nil)
  if valid_569153 != nil:
    section.add "resourceGroupName", valid_569153
  var valid_569154 = path.getOrDefault("name")
  valid_569154 = validateParameter(valid_569154, JString, required = true,
                                 default = nil)
  if valid_569154 != nil:
    section.add "name", valid_569154
  var valid_569155 = path.getOrDefault("subscriptionId")
  valid_569155 = validateParameter(valid_569155, JString, required = true,
                                 default = nil)
  if valid_569155 != nil:
    section.add "subscriptionId", valid_569155
  var valid_569156 = path.getOrDefault("entityName")
  valid_569156 = validateParameter(valid_569156, JString, required = true,
                                 default = nil)
  if valid_569156 != nil:
    section.add "entityName", valid_569156
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569157 = query.getOrDefault("api-version")
  valid_569157 = validateParameter(valid_569157, JString, required = true,
                                 default = nil)
  if valid_569157 != nil:
    section.add "api-version", valid_569157
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569158: Call_WebAppsDeleteRelayServiceConnection_569150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_569158.validator(path, query, header, formData, body)
  let scheme = call_569158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569158.url(scheme.get, call_569158.host, call_569158.base,
                         call_569158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569158, url, valid)

proc call*(call_569159: Call_WebAppsDeleteRelayServiceConnection_569150;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnection
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_569160 = newJObject()
  var query_569161 = newJObject()
  add(path_569160, "resourceGroupName", newJString(resourceGroupName))
  add(query_569161, "api-version", newJString(apiVersion))
  add(path_569160, "name", newJString(name))
  add(path_569160, "subscriptionId", newJString(subscriptionId))
  add(path_569160, "entityName", newJString(entityName))
  result = call_569159.call(path_569160, query_569161, nil, nil, nil)

var webAppsDeleteRelayServiceConnection* = Call_WebAppsDeleteRelayServiceConnection_569150(
    name: "webAppsDeleteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnection_569151, base: "",
    url: url_WebAppsDeleteRelayServiceConnection_569152, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiers_569176 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceIdentifiers_569178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiers_569177(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569179 = path.getOrDefault("resourceGroupName")
  valid_569179 = validateParameter(valid_569179, JString, required = true,
                                 default = nil)
  if valid_569179 != nil:
    section.add "resourceGroupName", valid_569179
  var valid_569180 = path.getOrDefault("name")
  valid_569180 = validateParameter(valid_569180, JString, required = true,
                                 default = nil)
  if valid_569180 != nil:
    section.add "name", valid_569180
  var valid_569181 = path.getOrDefault("subscriptionId")
  valid_569181 = validateParameter(valid_569181, JString, required = true,
                                 default = nil)
  if valid_569181 != nil:
    section.add "subscriptionId", valid_569181
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569182 = query.getOrDefault("api-version")
  valid_569182 = validateParameter(valid_569182, JString, required = true,
                                 default = nil)
  if valid_569182 != nil:
    section.add "api-version", valid_569182
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569183: Call_WebAppsListInstanceIdentifiers_569176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_569183.validator(path, query, header, formData, body)
  let scheme = call_569183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569183.url(scheme.get, call_569183.host, call_569183.base,
                         call_569183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569183, url, valid)

proc call*(call_569184: Call_WebAppsListInstanceIdentifiers_569176;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiers
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569185 = newJObject()
  var query_569186 = newJObject()
  add(path_569185, "resourceGroupName", newJString(resourceGroupName))
  add(query_569186, "api-version", newJString(apiVersion))
  add(path_569185, "name", newJString(name))
  add(path_569185, "subscriptionId", newJString(subscriptionId))
  result = call_569184.call(path_569185, query_569186, nil, nil, nil)

var webAppsListInstanceIdentifiers* = Call_WebAppsListInstanceIdentifiers_569176(
    name: "webAppsListInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_WebAppsListInstanceIdentifiers_569177, base: "",
    url: url_WebAppsListInstanceIdentifiers_569178, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperation_569199 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateInstanceMSDeployOperation_569201(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperation_569200(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569202 = path.getOrDefault("resourceGroupName")
  valid_569202 = validateParameter(valid_569202, JString, required = true,
                                 default = nil)
  if valid_569202 != nil:
    section.add "resourceGroupName", valid_569202
  var valid_569203 = path.getOrDefault("name")
  valid_569203 = validateParameter(valid_569203, JString, required = true,
                                 default = nil)
  if valid_569203 != nil:
    section.add "name", valid_569203
  var valid_569204 = path.getOrDefault("subscriptionId")
  valid_569204 = validateParameter(valid_569204, JString, required = true,
                                 default = nil)
  if valid_569204 != nil:
    section.add "subscriptionId", valid_569204
  var valid_569205 = path.getOrDefault("instanceId")
  valid_569205 = validateParameter(valid_569205, JString, required = true,
                                 default = nil)
  if valid_569205 != nil:
    section.add "instanceId", valid_569205
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569206 = query.getOrDefault("api-version")
  valid_569206 = validateParameter(valid_569206, JString, required = true,
                                 default = nil)
  if valid_569206 != nil:
    section.add "api-version", valid_569206
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569208: Call_WebAppsCreateInstanceMSDeployOperation_569199;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_569208.validator(path, query, header, formData, body)
  let scheme = call_569208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569208.url(scheme.get, call_569208.host, call_569208.base,
                         call_569208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569208, url, valid)

proc call*(call_569209: Call_WebAppsCreateInstanceMSDeployOperation_569199;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_569210 = newJObject()
  var query_569211 = newJObject()
  var body_569212 = newJObject()
  add(path_569210, "resourceGroupName", newJString(resourceGroupName))
  add(query_569211, "api-version", newJString(apiVersion))
  add(path_569210, "name", newJString(name))
  add(path_569210, "subscriptionId", newJString(subscriptionId))
  add(path_569210, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_569212 = MSDeploy
  result = call_569209.call(path_569210, query_569211, nil, nil, body_569212)

var webAppsCreateInstanceMSDeployOperation* = Call_WebAppsCreateInstanceMSDeployOperation_569199(
    name: "webAppsCreateInstanceMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperation_569200, base: "",
    url: url_WebAppsCreateInstanceMSDeployOperation_569201,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatus_569187 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMsDeployStatus_569189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatus_569188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569190 = path.getOrDefault("resourceGroupName")
  valid_569190 = validateParameter(valid_569190, JString, required = true,
                                 default = nil)
  if valid_569190 != nil:
    section.add "resourceGroupName", valid_569190
  var valid_569191 = path.getOrDefault("name")
  valid_569191 = validateParameter(valid_569191, JString, required = true,
                                 default = nil)
  if valid_569191 != nil:
    section.add "name", valid_569191
  var valid_569192 = path.getOrDefault("subscriptionId")
  valid_569192 = validateParameter(valid_569192, JString, required = true,
                                 default = nil)
  if valid_569192 != nil:
    section.add "subscriptionId", valid_569192
  var valid_569193 = path.getOrDefault("instanceId")
  valid_569193 = validateParameter(valid_569193, JString, required = true,
                                 default = nil)
  if valid_569193 != nil:
    section.add "instanceId", valid_569193
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569194 = query.getOrDefault("api-version")
  valid_569194 = validateParameter(valid_569194, JString, required = true,
                                 default = nil)
  if valid_569194 != nil:
    section.add "api-version", valid_569194
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569195: Call_WebAppsGetInstanceMsDeployStatus_569187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_569195.validator(path, query, header, formData, body)
  let scheme = call_569195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569195.url(scheme.get, call_569195.host, call_569195.base,
                         call_569195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569195, url, valid)

proc call*(call_569196: Call_WebAppsGetInstanceMsDeployStatus_569187;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_569197 = newJObject()
  var query_569198 = newJObject()
  add(path_569197, "resourceGroupName", newJString(resourceGroupName))
  add(query_569198, "api-version", newJString(apiVersion))
  add(path_569197, "name", newJString(name))
  add(path_569197, "subscriptionId", newJString(subscriptionId))
  add(path_569197, "instanceId", newJString(instanceId))
  result = call_569196.call(path_569197, query_569198, nil, nil, nil)

var webAppsGetInstanceMsDeployStatus* = Call_WebAppsGetInstanceMsDeployStatus_569187(
    name: "webAppsGetInstanceMsDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatus_569188, base: "",
    url: url_WebAppsGetInstanceMsDeployStatus_569189, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLog_569213 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMSDeployLog_569215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLog_569214(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569216 = path.getOrDefault("resourceGroupName")
  valid_569216 = validateParameter(valid_569216, JString, required = true,
                                 default = nil)
  if valid_569216 != nil:
    section.add "resourceGroupName", valid_569216
  var valid_569217 = path.getOrDefault("name")
  valid_569217 = validateParameter(valid_569217, JString, required = true,
                                 default = nil)
  if valid_569217 != nil:
    section.add "name", valid_569217
  var valid_569218 = path.getOrDefault("subscriptionId")
  valid_569218 = validateParameter(valid_569218, JString, required = true,
                                 default = nil)
  if valid_569218 != nil:
    section.add "subscriptionId", valid_569218
  var valid_569219 = path.getOrDefault("instanceId")
  valid_569219 = validateParameter(valid_569219, JString, required = true,
                                 default = nil)
  if valid_569219 != nil:
    section.add "instanceId", valid_569219
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569220 = query.getOrDefault("api-version")
  valid_569220 = validateParameter(valid_569220, JString, required = true,
                                 default = nil)
  if valid_569220 != nil:
    section.add "api-version", valid_569220
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569221: Call_WebAppsGetInstanceMSDeployLog_569213; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_569221.validator(path, query, header, formData, body)
  let scheme = call_569221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569221.url(scheme.get, call_569221.host, call_569221.base,
                         call_569221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569221, url, valid)

proc call*(call_569222: Call_WebAppsGetInstanceMSDeployLog_569213;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_569223 = newJObject()
  var query_569224 = newJObject()
  add(path_569223, "resourceGroupName", newJString(resourceGroupName))
  add(query_569224, "api-version", newJString(apiVersion))
  add(path_569223, "name", newJString(name))
  add(path_569223, "subscriptionId", newJString(subscriptionId))
  add(path_569223, "instanceId", newJString(instanceId))
  result = call_569222.call(path_569223, query_569224, nil, nil, nil)

var webAppsGetInstanceMSDeployLog* = Call_WebAppsGetInstanceMSDeployLog_569213(
    name: "webAppsGetInstanceMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLog_569214, base: "",
    url: url_WebAppsGetInstanceMSDeployLog_569215, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcesses_569225 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcesses_569227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcesses_569226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569228 = path.getOrDefault("resourceGroupName")
  valid_569228 = validateParameter(valid_569228, JString, required = true,
                                 default = nil)
  if valid_569228 != nil:
    section.add "resourceGroupName", valid_569228
  var valid_569229 = path.getOrDefault("name")
  valid_569229 = validateParameter(valid_569229, JString, required = true,
                                 default = nil)
  if valid_569229 != nil:
    section.add "name", valid_569229
  var valid_569230 = path.getOrDefault("subscriptionId")
  valid_569230 = validateParameter(valid_569230, JString, required = true,
                                 default = nil)
  if valid_569230 != nil:
    section.add "subscriptionId", valid_569230
  var valid_569231 = path.getOrDefault("instanceId")
  valid_569231 = validateParameter(valid_569231, JString, required = true,
                                 default = nil)
  if valid_569231 != nil:
    section.add "instanceId", valid_569231
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569232 = query.getOrDefault("api-version")
  valid_569232 = validateParameter(valid_569232, JString, required = true,
                                 default = nil)
  if valid_569232 != nil:
    section.add "api-version", valid_569232
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569233: Call_WebAppsListInstanceProcesses_569225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569233.validator(path, query, header, formData, body)
  let scheme = call_569233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569233.url(scheme.get, call_569233.host, call_569233.base,
                         call_569233.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569233, url, valid)

proc call*(call_569234: Call_WebAppsListInstanceProcesses_569225;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569235 = newJObject()
  var query_569236 = newJObject()
  add(path_569235, "resourceGroupName", newJString(resourceGroupName))
  add(query_569236, "api-version", newJString(apiVersion))
  add(path_569235, "name", newJString(name))
  add(path_569235, "subscriptionId", newJString(subscriptionId))
  add(path_569235, "instanceId", newJString(instanceId))
  result = call_569234.call(path_569235, query_569236, nil, nil, nil)

var webAppsListInstanceProcesses* = Call_WebAppsListInstanceProcesses_569225(
    name: "webAppsListInstanceProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcesses_569226, base: "",
    url: url_WebAppsListInstanceProcesses_569227, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcess_569237 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcess_569239(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcess_569238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569240 = path.getOrDefault("resourceGroupName")
  valid_569240 = validateParameter(valid_569240, JString, required = true,
                                 default = nil)
  if valid_569240 != nil:
    section.add "resourceGroupName", valid_569240
  var valid_569241 = path.getOrDefault("name")
  valid_569241 = validateParameter(valid_569241, JString, required = true,
                                 default = nil)
  if valid_569241 != nil:
    section.add "name", valid_569241
  var valid_569242 = path.getOrDefault("processId")
  valid_569242 = validateParameter(valid_569242, JString, required = true,
                                 default = nil)
  if valid_569242 != nil:
    section.add "processId", valid_569242
  var valid_569243 = path.getOrDefault("subscriptionId")
  valid_569243 = validateParameter(valid_569243, JString, required = true,
                                 default = nil)
  if valid_569243 != nil:
    section.add "subscriptionId", valid_569243
  var valid_569244 = path.getOrDefault("instanceId")
  valid_569244 = validateParameter(valid_569244, JString, required = true,
                                 default = nil)
  if valid_569244 != nil:
    section.add "instanceId", valid_569244
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569245 = query.getOrDefault("api-version")
  valid_569245 = validateParameter(valid_569245, JString, required = true,
                                 default = nil)
  if valid_569245 != nil:
    section.add "api-version", valid_569245
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569246: Call_WebAppsGetInstanceProcess_569237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569246.validator(path, query, header, formData, body)
  let scheme = call_569246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569246.url(scheme.get, call_569246.host, call_569246.base,
                         call_569246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569246, url, valid)

proc call*(call_569247: Call_WebAppsGetInstanceProcess_569237;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569248 = newJObject()
  var query_569249 = newJObject()
  add(path_569248, "resourceGroupName", newJString(resourceGroupName))
  add(query_569249, "api-version", newJString(apiVersion))
  add(path_569248, "name", newJString(name))
  add(path_569248, "processId", newJString(processId))
  add(path_569248, "subscriptionId", newJString(subscriptionId))
  add(path_569248, "instanceId", newJString(instanceId))
  result = call_569247.call(path_569248, query_569249, nil, nil, nil)

var webAppsGetInstanceProcess* = Call_WebAppsGetInstanceProcess_569237(
    name: "webAppsGetInstanceProcess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcess_569238, base: "",
    url: url_WebAppsGetInstanceProcess_569239, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcess_569250 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteInstanceProcess_569252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcess_569251(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569253 = path.getOrDefault("resourceGroupName")
  valid_569253 = validateParameter(valid_569253, JString, required = true,
                                 default = nil)
  if valid_569253 != nil:
    section.add "resourceGroupName", valid_569253
  var valid_569254 = path.getOrDefault("name")
  valid_569254 = validateParameter(valid_569254, JString, required = true,
                                 default = nil)
  if valid_569254 != nil:
    section.add "name", valid_569254
  var valid_569255 = path.getOrDefault("processId")
  valid_569255 = validateParameter(valid_569255, JString, required = true,
                                 default = nil)
  if valid_569255 != nil:
    section.add "processId", valid_569255
  var valid_569256 = path.getOrDefault("subscriptionId")
  valid_569256 = validateParameter(valid_569256, JString, required = true,
                                 default = nil)
  if valid_569256 != nil:
    section.add "subscriptionId", valid_569256
  var valid_569257 = path.getOrDefault("instanceId")
  valid_569257 = validateParameter(valid_569257, JString, required = true,
                                 default = nil)
  if valid_569257 != nil:
    section.add "instanceId", valid_569257
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569258 = query.getOrDefault("api-version")
  valid_569258 = validateParameter(valid_569258, JString, required = true,
                                 default = nil)
  if valid_569258 != nil:
    section.add "api-version", valid_569258
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569259: Call_WebAppsDeleteInstanceProcess_569250; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_569259.validator(path, query, header, formData, body)
  let scheme = call_569259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569259.url(scheme.get, call_569259.host, call_569259.base,
                         call_569259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569259, url, valid)

proc call*(call_569260: Call_WebAppsDeleteInstanceProcess_569250;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569261 = newJObject()
  var query_569262 = newJObject()
  add(path_569261, "resourceGroupName", newJString(resourceGroupName))
  add(query_569262, "api-version", newJString(apiVersion))
  add(path_569261, "name", newJString(name))
  add(path_569261, "processId", newJString(processId))
  add(path_569261, "subscriptionId", newJString(subscriptionId))
  add(path_569261, "instanceId", newJString(instanceId))
  result = call_569260.call(path_569261, query_569262, nil, nil, nil)

var webAppsDeleteInstanceProcess* = Call_WebAppsDeleteInstanceProcess_569250(
    name: "webAppsDeleteInstanceProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcess_569251, base: "",
    url: url_WebAppsDeleteInstanceProcess_569252, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDump_569263 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessDump_569265(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDump_569264(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569266 = path.getOrDefault("resourceGroupName")
  valid_569266 = validateParameter(valid_569266, JString, required = true,
                                 default = nil)
  if valid_569266 != nil:
    section.add "resourceGroupName", valid_569266
  var valid_569267 = path.getOrDefault("name")
  valid_569267 = validateParameter(valid_569267, JString, required = true,
                                 default = nil)
  if valid_569267 != nil:
    section.add "name", valid_569267
  var valid_569268 = path.getOrDefault("processId")
  valid_569268 = validateParameter(valid_569268, JString, required = true,
                                 default = nil)
  if valid_569268 != nil:
    section.add "processId", valid_569268
  var valid_569269 = path.getOrDefault("subscriptionId")
  valid_569269 = validateParameter(valid_569269, JString, required = true,
                                 default = nil)
  if valid_569269 != nil:
    section.add "subscriptionId", valid_569269
  var valid_569270 = path.getOrDefault("instanceId")
  valid_569270 = validateParameter(valid_569270, JString, required = true,
                                 default = nil)
  if valid_569270 != nil:
    section.add "instanceId", valid_569270
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569271 = query.getOrDefault("api-version")
  valid_569271 = validateParameter(valid_569271, JString, required = true,
                                 default = nil)
  if valid_569271 != nil:
    section.add "api-version", valid_569271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569272: Call_WebAppsGetInstanceProcessDump_569263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569272.validator(path, query, header, formData, body)
  let scheme = call_569272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569272.url(scheme.get, call_569272.host, call_569272.base,
                         call_569272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569272, url, valid)

proc call*(call_569273: Call_WebAppsGetInstanceProcessDump_569263;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569274 = newJObject()
  var query_569275 = newJObject()
  add(path_569274, "resourceGroupName", newJString(resourceGroupName))
  add(query_569275, "api-version", newJString(apiVersion))
  add(path_569274, "name", newJString(name))
  add(path_569274, "processId", newJString(processId))
  add(path_569274, "subscriptionId", newJString(subscriptionId))
  add(path_569274, "instanceId", newJString(instanceId))
  result = call_569273.call(path_569274, query_569275, nil, nil, nil)

var webAppsGetInstanceProcessDump* = Call_WebAppsGetInstanceProcessDump_569263(
    name: "webAppsGetInstanceProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDump_569264, base: "",
    url: url_WebAppsGetInstanceProcessDump_569265, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModules_569276 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessModules_569278(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModules_569277(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569279 = path.getOrDefault("resourceGroupName")
  valid_569279 = validateParameter(valid_569279, JString, required = true,
                                 default = nil)
  if valid_569279 != nil:
    section.add "resourceGroupName", valid_569279
  var valid_569280 = path.getOrDefault("name")
  valid_569280 = validateParameter(valid_569280, JString, required = true,
                                 default = nil)
  if valid_569280 != nil:
    section.add "name", valid_569280
  var valid_569281 = path.getOrDefault("processId")
  valid_569281 = validateParameter(valid_569281, JString, required = true,
                                 default = nil)
  if valid_569281 != nil:
    section.add "processId", valid_569281
  var valid_569282 = path.getOrDefault("subscriptionId")
  valid_569282 = validateParameter(valid_569282, JString, required = true,
                                 default = nil)
  if valid_569282 != nil:
    section.add "subscriptionId", valid_569282
  var valid_569283 = path.getOrDefault("instanceId")
  valid_569283 = validateParameter(valid_569283, JString, required = true,
                                 default = nil)
  if valid_569283 != nil:
    section.add "instanceId", valid_569283
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569284 = query.getOrDefault("api-version")
  valid_569284 = validateParameter(valid_569284, JString, required = true,
                                 default = nil)
  if valid_569284 != nil:
    section.add "api-version", valid_569284
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569285: Call_WebAppsListInstanceProcessModules_569276;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569285.validator(path, query, header, formData, body)
  let scheme = call_569285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569285.url(scheme.get, call_569285.host, call_569285.base,
                         call_569285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569285, url, valid)

proc call*(call_569286: Call_WebAppsListInstanceProcessModules_569276;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569287 = newJObject()
  var query_569288 = newJObject()
  add(path_569287, "resourceGroupName", newJString(resourceGroupName))
  add(query_569288, "api-version", newJString(apiVersion))
  add(path_569287, "name", newJString(name))
  add(path_569287, "processId", newJString(processId))
  add(path_569287, "subscriptionId", newJString(subscriptionId))
  add(path_569287, "instanceId", newJString(instanceId))
  result = call_569286.call(path_569287, query_569288, nil, nil, nil)

var webAppsListInstanceProcessModules* = Call_WebAppsListInstanceProcessModules_569276(
    name: "webAppsListInstanceProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModules_569277, base: "",
    url: url_WebAppsListInstanceProcessModules_569278, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModule_569289 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessModule_569291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModule_569290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569292 = path.getOrDefault("resourceGroupName")
  valid_569292 = validateParameter(valid_569292, JString, required = true,
                                 default = nil)
  if valid_569292 != nil:
    section.add "resourceGroupName", valid_569292
  var valid_569293 = path.getOrDefault("name")
  valid_569293 = validateParameter(valid_569293, JString, required = true,
                                 default = nil)
  if valid_569293 != nil:
    section.add "name", valid_569293
  var valid_569294 = path.getOrDefault("processId")
  valid_569294 = validateParameter(valid_569294, JString, required = true,
                                 default = nil)
  if valid_569294 != nil:
    section.add "processId", valid_569294
  var valid_569295 = path.getOrDefault("subscriptionId")
  valid_569295 = validateParameter(valid_569295, JString, required = true,
                                 default = nil)
  if valid_569295 != nil:
    section.add "subscriptionId", valid_569295
  var valid_569296 = path.getOrDefault("baseAddress")
  valid_569296 = validateParameter(valid_569296, JString, required = true,
                                 default = nil)
  if valid_569296 != nil:
    section.add "baseAddress", valid_569296
  var valid_569297 = path.getOrDefault("instanceId")
  valid_569297 = validateParameter(valid_569297, JString, required = true,
                                 default = nil)
  if valid_569297 != nil:
    section.add "instanceId", valid_569297
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569298 = query.getOrDefault("api-version")
  valid_569298 = validateParameter(valid_569298, JString, required = true,
                                 default = nil)
  if valid_569298 != nil:
    section.add "api-version", valid_569298
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569299: Call_WebAppsGetInstanceProcessModule_569289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569299.validator(path, query, header, formData, body)
  let scheme = call_569299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569299.url(scheme.get, call_569299.host, call_569299.base,
                         call_569299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569299, url, valid)

proc call*(call_569300: Call_WebAppsGetInstanceProcessModule_569289;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569301 = newJObject()
  var query_569302 = newJObject()
  add(path_569301, "resourceGroupName", newJString(resourceGroupName))
  add(query_569302, "api-version", newJString(apiVersion))
  add(path_569301, "name", newJString(name))
  add(path_569301, "processId", newJString(processId))
  add(path_569301, "subscriptionId", newJString(subscriptionId))
  add(path_569301, "baseAddress", newJString(baseAddress))
  add(path_569301, "instanceId", newJString(instanceId))
  result = call_569300.call(path_569301, query_569302, nil, nil, nil)

var webAppsGetInstanceProcessModule* = Call_WebAppsGetInstanceProcessModule_569289(
    name: "webAppsGetInstanceProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModule_569290, base: "",
    url: url_WebAppsGetInstanceProcessModule_569291, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreads_569303 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessThreads_569305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreads_569304(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569306 = path.getOrDefault("resourceGroupName")
  valid_569306 = validateParameter(valid_569306, JString, required = true,
                                 default = nil)
  if valid_569306 != nil:
    section.add "resourceGroupName", valid_569306
  var valid_569307 = path.getOrDefault("name")
  valid_569307 = validateParameter(valid_569307, JString, required = true,
                                 default = nil)
  if valid_569307 != nil:
    section.add "name", valid_569307
  var valid_569308 = path.getOrDefault("processId")
  valid_569308 = validateParameter(valid_569308, JString, required = true,
                                 default = nil)
  if valid_569308 != nil:
    section.add "processId", valid_569308
  var valid_569309 = path.getOrDefault("subscriptionId")
  valid_569309 = validateParameter(valid_569309, JString, required = true,
                                 default = nil)
  if valid_569309 != nil:
    section.add "subscriptionId", valid_569309
  var valid_569310 = path.getOrDefault("instanceId")
  valid_569310 = validateParameter(valid_569310, JString, required = true,
                                 default = nil)
  if valid_569310 != nil:
    section.add "instanceId", valid_569310
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569311 = query.getOrDefault("api-version")
  valid_569311 = validateParameter(valid_569311, JString, required = true,
                                 default = nil)
  if valid_569311 != nil:
    section.add "api-version", valid_569311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569312: Call_WebAppsListInstanceProcessThreads_569303;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569312.validator(path, query, header, formData, body)
  let scheme = call_569312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569312.url(scheme.get, call_569312.host, call_569312.base,
                         call_569312.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569312, url, valid)

proc call*(call_569313: Call_WebAppsListInstanceProcessThreads_569303;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569314 = newJObject()
  var query_569315 = newJObject()
  add(path_569314, "resourceGroupName", newJString(resourceGroupName))
  add(query_569315, "api-version", newJString(apiVersion))
  add(path_569314, "name", newJString(name))
  add(path_569314, "processId", newJString(processId))
  add(path_569314, "subscriptionId", newJString(subscriptionId))
  add(path_569314, "instanceId", newJString(instanceId))
  result = call_569313.call(path_569314, query_569315, nil, nil, nil)

var webAppsListInstanceProcessThreads* = Call_WebAppsListInstanceProcessThreads_569303(
    name: "webAppsListInstanceProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreads_569304, base: "",
    url: url_WebAppsListInstanceProcessThreads_569305, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThread_569316 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessThread_569318(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThread_569317(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569319 = path.getOrDefault("resourceGroupName")
  valid_569319 = validateParameter(valid_569319, JString, required = true,
                                 default = nil)
  if valid_569319 != nil:
    section.add "resourceGroupName", valid_569319
  var valid_569320 = path.getOrDefault("name")
  valid_569320 = validateParameter(valid_569320, JString, required = true,
                                 default = nil)
  if valid_569320 != nil:
    section.add "name", valid_569320
  var valid_569321 = path.getOrDefault("processId")
  valid_569321 = validateParameter(valid_569321, JString, required = true,
                                 default = nil)
  if valid_569321 != nil:
    section.add "processId", valid_569321
  var valid_569322 = path.getOrDefault("subscriptionId")
  valid_569322 = validateParameter(valid_569322, JString, required = true,
                                 default = nil)
  if valid_569322 != nil:
    section.add "subscriptionId", valid_569322
  var valid_569323 = path.getOrDefault("instanceId")
  valid_569323 = validateParameter(valid_569323, JString, required = true,
                                 default = nil)
  if valid_569323 != nil:
    section.add "instanceId", valid_569323
  var valid_569324 = path.getOrDefault("threadId")
  valid_569324 = validateParameter(valid_569324, JString, required = true,
                                 default = nil)
  if valid_569324 != nil:
    section.add "threadId", valid_569324
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569325 = query.getOrDefault("api-version")
  valid_569325 = validateParameter(valid_569325, JString, required = true,
                                 default = nil)
  if valid_569325 != nil:
    section.add "api-version", valid_569325
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569326: Call_WebAppsGetInstanceProcessThread_569316;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_569326.validator(path, query, header, formData, body)
  let scheme = call_569326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569326.url(scheme.get, call_569326.host, call_569326.base,
                         call_569326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569326, url, valid)

proc call*(call_569327: Call_WebAppsGetInstanceProcessThread_569316;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_569328 = newJObject()
  var query_569329 = newJObject()
  add(path_569328, "resourceGroupName", newJString(resourceGroupName))
  add(query_569329, "api-version", newJString(apiVersion))
  add(path_569328, "name", newJString(name))
  add(path_569328, "processId", newJString(processId))
  add(path_569328, "subscriptionId", newJString(subscriptionId))
  add(path_569328, "instanceId", newJString(instanceId))
  add(path_569328, "threadId", newJString(threadId))
  result = call_569327.call(path_569328, query_569329, nil, nil, nil)

var webAppsGetInstanceProcessThread* = Call_WebAppsGetInstanceProcessThread_569316(
    name: "webAppsGetInstanceProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThread_569317, base: "",
    url: url_WebAppsGetInstanceProcessThread_569318, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneable_569330 = ref object of OpenApiRestCall_567666
proc url_WebAppsIsCloneable_569332(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneable_569331(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569333 = path.getOrDefault("resourceGroupName")
  valid_569333 = validateParameter(valid_569333, JString, required = true,
                                 default = nil)
  if valid_569333 != nil:
    section.add "resourceGroupName", valid_569333
  var valid_569334 = path.getOrDefault("name")
  valid_569334 = validateParameter(valid_569334, JString, required = true,
                                 default = nil)
  if valid_569334 != nil:
    section.add "name", valid_569334
  var valid_569335 = path.getOrDefault("subscriptionId")
  valid_569335 = validateParameter(valid_569335, JString, required = true,
                                 default = nil)
  if valid_569335 != nil:
    section.add "subscriptionId", valid_569335
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569336 = query.getOrDefault("api-version")
  valid_569336 = validateParameter(valid_569336, JString, required = true,
                                 default = nil)
  if valid_569336 != nil:
    section.add "api-version", valid_569336
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569337: Call_WebAppsIsCloneable_569330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_569337.validator(path, query, header, formData, body)
  let scheme = call_569337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569337.url(scheme.get, call_569337.host, call_569337.base,
                         call_569337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569337, url, valid)

proc call*(call_569338: Call_WebAppsIsCloneable_569330; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsIsCloneable
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569339 = newJObject()
  var query_569340 = newJObject()
  add(path_569339, "resourceGroupName", newJString(resourceGroupName))
  add(query_569340, "api-version", newJString(apiVersion))
  add(path_569339, "name", newJString(name))
  add(path_569339, "subscriptionId", newJString(subscriptionId))
  result = call_569338.call(path_569339, query_569340, nil, nil, nil)

var webAppsIsCloneable* = Call_WebAppsIsCloneable_569330(
    name: "webAppsIsCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_WebAppsIsCloneable_569331, base: "",
    url: url_WebAppsIsCloneable_569332, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggers_569341 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSyncFunctionTriggers_569343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggers_569342(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569344 = path.getOrDefault("resourceGroupName")
  valid_569344 = validateParameter(valid_569344, JString, required = true,
                                 default = nil)
  if valid_569344 != nil:
    section.add "resourceGroupName", valid_569344
  var valid_569345 = path.getOrDefault("name")
  valid_569345 = validateParameter(valid_569345, JString, required = true,
                                 default = nil)
  if valid_569345 != nil:
    section.add "name", valid_569345
  var valid_569346 = path.getOrDefault("subscriptionId")
  valid_569346 = validateParameter(valid_569346, JString, required = true,
                                 default = nil)
  if valid_569346 != nil:
    section.add "subscriptionId", valid_569346
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569347 = query.getOrDefault("api-version")
  valid_569347 = validateParameter(valid_569347, JString, required = true,
                                 default = nil)
  if valid_569347 != nil:
    section.add "api-version", valid_569347
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569348: Call_WebAppsListSyncFunctionTriggers_569341;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_569348.validator(path, query, header, formData, body)
  let scheme = call_569348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569348.url(scheme.get, call_569348.host, call_569348.base,
                         call_569348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569348, url, valid)

proc call*(call_569349: Call_WebAppsListSyncFunctionTriggers_569341;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggers
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569350 = newJObject()
  var query_569351 = newJObject()
  add(path_569350, "resourceGroupName", newJString(resourceGroupName))
  add(query_569351, "api-version", newJString(apiVersion))
  add(path_569350, "name", newJString(name))
  add(path_569350, "subscriptionId", newJString(subscriptionId))
  result = call_569349.call(path_569350, query_569351, nil, nil, nil)

var webAppsListSyncFunctionTriggers* = Call_WebAppsListSyncFunctionTriggers_569341(
    name: "webAppsListSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggers_569342, base: "",
    url: url_WebAppsListSyncFunctionTriggers_569343, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitions_569352 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetricDefinitions_569354(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitions_569353(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569355 = path.getOrDefault("resourceGroupName")
  valid_569355 = validateParameter(valid_569355, JString, required = true,
                                 default = nil)
  if valid_569355 != nil:
    section.add "resourceGroupName", valid_569355
  var valid_569356 = path.getOrDefault("name")
  valid_569356 = validateParameter(valid_569356, JString, required = true,
                                 default = nil)
  if valid_569356 != nil:
    section.add "name", valid_569356
  var valid_569357 = path.getOrDefault("subscriptionId")
  valid_569357 = validateParameter(valid_569357, JString, required = true,
                                 default = nil)
  if valid_569357 != nil:
    section.add "subscriptionId", valid_569357
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569358 = query.getOrDefault("api-version")
  valid_569358 = validateParameter(valid_569358, JString, required = true,
                                 default = nil)
  if valid_569358 != nil:
    section.add "api-version", valid_569358
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569359: Call_WebAppsListMetricDefinitions_569352; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_569359.validator(path, query, header, formData, body)
  let scheme = call_569359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569359.url(scheme.get, call_569359.host, call_569359.base,
                         call_569359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569359, url, valid)

proc call*(call_569360: Call_WebAppsListMetricDefinitions_569352;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitions
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569361 = newJObject()
  var query_569362 = newJObject()
  add(path_569361, "resourceGroupName", newJString(resourceGroupName))
  add(query_569362, "api-version", newJString(apiVersion))
  add(path_569361, "name", newJString(name))
  add(path_569361, "subscriptionId", newJString(subscriptionId))
  result = call_569360.call(path_569361, query_569362, nil, nil, nil)

var webAppsListMetricDefinitions* = Call_WebAppsListMetricDefinitions_569352(
    name: "webAppsListMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitions_569353, base: "",
    url: url_WebAppsListMetricDefinitions_569354, schemes: {Scheme.Https})
type
  Call_WebAppsListMetrics_569363 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetrics_569365(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetrics_569364(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569367 = path.getOrDefault("resourceGroupName")
  valid_569367 = validateParameter(valid_569367, JString, required = true,
                                 default = nil)
  if valid_569367 != nil:
    section.add "resourceGroupName", valid_569367
  var valid_569368 = path.getOrDefault("name")
  valid_569368 = validateParameter(valid_569368, JString, required = true,
                                 default = nil)
  if valid_569368 != nil:
    section.add "name", valid_569368
  var valid_569369 = path.getOrDefault("subscriptionId")
  valid_569369 = validateParameter(valid_569369, JString, required = true,
                                 default = nil)
  if valid_569369 != nil:
    section.add "subscriptionId", valid_569369
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569370 = query.getOrDefault("api-version")
  valid_569370 = validateParameter(valid_569370, JString, required = true,
                                 default = nil)
  if valid_569370 != nil:
    section.add "api-version", valid_569370
  var valid_569371 = query.getOrDefault("details")
  valid_569371 = validateParameter(valid_569371, JBool, required = false, default = nil)
  if valid_569371 != nil:
    section.add "details", valid_569371
  var valid_569372 = query.getOrDefault("$filter")
  valid_569372 = validateParameter(valid_569372, JString, required = false,
                                 default = nil)
  if valid_569372 != nil:
    section.add "$filter", valid_569372
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569373: Call_WebAppsListMetrics_569363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_569373.validator(path, query, header, formData, body)
  let scheme = call_569373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569373.url(scheme.get, call_569373.host, call_569373.base,
                         call_569373.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569373, url, valid)

proc call*(call_569374: Call_WebAppsListMetrics_569363; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetrics
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569375 = newJObject()
  var query_569376 = newJObject()
  add(path_569375, "resourceGroupName", newJString(resourceGroupName))
  add(query_569376, "api-version", newJString(apiVersion))
  add(path_569375, "name", newJString(name))
  add(query_569376, "details", newJBool(details))
  add(path_569375, "subscriptionId", newJString(subscriptionId))
  add(query_569376, "$filter", newJString(Filter))
  result = call_569374.call(path_569375, query_569376, nil, nil, nil)

var webAppsListMetrics* = Call_WebAppsListMetrics_569363(
    name: "webAppsListMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_WebAppsListMetrics_569364, base: "",
    url: url_WebAppsListMetrics_569365, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateStorage_569377 = ref object of OpenApiRestCall_567666
proc url_WebAppsMigrateStorage_569379(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migrate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateStorage_569378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569380 = path.getOrDefault("resourceGroupName")
  valid_569380 = validateParameter(valid_569380, JString, required = true,
                                 default = nil)
  if valid_569380 != nil:
    section.add "resourceGroupName", valid_569380
  var valid_569381 = path.getOrDefault("name")
  valid_569381 = validateParameter(valid_569381, JString, required = true,
                                 default = nil)
  if valid_569381 != nil:
    section.add "name", valid_569381
  var valid_569382 = path.getOrDefault("subscriptionId")
  valid_569382 = validateParameter(valid_569382, JString, required = true,
                                 default = nil)
  if valid_569382 != nil:
    section.add "subscriptionId", valid_569382
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   subscriptionName: JString (required)
  ##                   : Azure subscription.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569383 = query.getOrDefault("api-version")
  valid_569383 = validateParameter(valid_569383, JString, required = true,
                                 default = nil)
  if valid_569383 != nil:
    section.add "api-version", valid_569383
  var valid_569384 = query.getOrDefault("subscriptionName")
  valid_569384 = validateParameter(valid_569384, JString, required = true,
                                 default = nil)
  if valid_569384 != nil:
    section.add "subscriptionName", valid_569384
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569386: Call_WebAppsMigrateStorage_569377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app.
  ## 
  let valid = call_569386.validator(path, query, header, formData, body)
  let scheme = call_569386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569386.url(scheme.get, call_569386.host, call_569386.base,
                         call_569386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569386, url, valid)

proc call*(call_569387: Call_WebAppsMigrateStorage_569377;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionName: string; subscriptionId: string;
          migrationOptions: JsonNode): Recallable =
  ## webAppsMigrateStorage
  ## Restores a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionName: string (required)
  ##                   : Azure subscription.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  var path_569388 = newJObject()
  var query_569389 = newJObject()
  var body_569390 = newJObject()
  add(path_569388, "resourceGroupName", newJString(resourceGroupName))
  add(query_569389, "api-version", newJString(apiVersion))
  add(path_569388, "name", newJString(name))
  add(query_569389, "subscriptionName", newJString(subscriptionName))
  add(path_569388, "subscriptionId", newJString(subscriptionId))
  if migrationOptions != nil:
    body_569390 = migrationOptions
  result = call_569387.call(path_569388, query_569389, nil, nil, body_569390)

var webAppsMigrateStorage* = Call_WebAppsMigrateStorage_569377(
    name: "webAppsMigrateStorage", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    validator: validate_WebAppsMigrateStorage_569378, base: "",
    url: url_WebAppsMigrateStorage_569379, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateMySql_569391 = ref object of OpenApiRestCall_567666
proc url_WebAppsMigrateMySql_569393(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateMySql_569392(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569394 = path.getOrDefault("resourceGroupName")
  valid_569394 = validateParameter(valid_569394, JString, required = true,
                                 default = nil)
  if valid_569394 != nil:
    section.add "resourceGroupName", valid_569394
  var valid_569395 = path.getOrDefault("name")
  valid_569395 = validateParameter(valid_569395, JString, required = true,
                                 default = nil)
  if valid_569395 != nil:
    section.add "name", valid_569395
  var valid_569396 = path.getOrDefault("subscriptionId")
  valid_569396 = validateParameter(valid_569396, JString, required = true,
                                 default = nil)
  if valid_569396 != nil:
    section.add "subscriptionId", valid_569396
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569397 = query.getOrDefault("api-version")
  valid_569397 = validateParameter(valid_569397, JString, required = true,
                                 default = nil)
  if valid_569397 != nil:
    section.add "api-version", valid_569397
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569399: Call_WebAppsMigrateMySql_569391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  let valid = call_569399.validator(path, query, header, formData, body)
  let scheme = call_569399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569399.url(scheme.get, call_569399.host, call_569399.base,
                         call_569399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569399, url, valid)

proc call*(call_569400: Call_WebAppsMigrateMySql_569391; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          migrationRequestEnvelope: JsonNode): Recallable =
  ## webAppsMigrateMySql
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  var path_569401 = newJObject()
  var query_569402 = newJObject()
  var body_569403 = newJObject()
  add(path_569401, "resourceGroupName", newJString(resourceGroupName))
  add(query_569402, "api-version", newJString(apiVersion))
  add(path_569401, "name", newJString(name))
  add(path_569401, "subscriptionId", newJString(subscriptionId))
  if migrationRequestEnvelope != nil:
    body_569403 = migrationRequestEnvelope
  result = call_569400.call(path_569401, query_569402, nil, nil, body_569403)

var webAppsMigrateMySql* = Call_WebAppsMigrateMySql_569391(
    name: "webAppsMigrateMySql", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    validator: validate_WebAppsMigrateMySql_569392, base: "",
    url: url_WebAppsMigrateMySql_569393, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatus_569404 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMigrateMySqlStatus_569406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatus_569405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569407 = path.getOrDefault("resourceGroupName")
  valid_569407 = validateParameter(valid_569407, JString, required = true,
                                 default = nil)
  if valid_569407 != nil:
    section.add "resourceGroupName", valid_569407
  var valid_569408 = path.getOrDefault("name")
  valid_569408 = validateParameter(valid_569408, JString, required = true,
                                 default = nil)
  if valid_569408 != nil:
    section.add "name", valid_569408
  var valid_569409 = path.getOrDefault("subscriptionId")
  valid_569409 = validateParameter(valid_569409, JString, required = true,
                                 default = nil)
  if valid_569409 != nil:
    section.add "subscriptionId", valid_569409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569410 = query.getOrDefault("api-version")
  valid_569410 = validateParameter(valid_569410, JString, required = true,
                                 default = nil)
  if valid_569410 != nil:
    section.add "api-version", valid_569410
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569411: Call_WebAppsGetMigrateMySqlStatus_569404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_569411.validator(path, query, header, formData, body)
  let scheme = call_569411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569411.url(scheme.get, call_569411.host, call_569411.base,
                         call_569411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569411, url, valid)

proc call*(call_569412: Call_WebAppsGetMigrateMySqlStatus_569404;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatus
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569413 = newJObject()
  var query_569414 = newJObject()
  add(path_569413, "resourceGroupName", newJString(resourceGroupName))
  add(query_569414, "api-version", newJString(apiVersion))
  add(path_569413, "name", newJString(name))
  add(path_569413, "subscriptionId", newJString(subscriptionId))
  result = call_569412.call(path_569413, query_569414, nil, nil, nil)

var webAppsGetMigrateMySqlStatus* = Call_WebAppsGetMigrateMySqlStatus_569404(
    name: "webAppsGetMigrateMySqlStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatus_569405, base: "",
    url: url_WebAppsGetMigrateMySqlStatus_569406, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeatures_569415 = ref object of OpenApiRestCall_567666
proc url_WebAppsListNetworkFeatures_569417(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeatures_569416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569418 = path.getOrDefault("resourceGroupName")
  valid_569418 = validateParameter(valid_569418, JString, required = true,
                                 default = nil)
  if valid_569418 != nil:
    section.add "resourceGroupName", valid_569418
  var valid_569419 = path.getOrDefault("name")
  valid_569419 = validateParameter(valid_569419, JString, required = true,
                                 default = nil)
  if valid_569419 != nil:
    section.add "name", valid_569419
  var valid_569420 = path.getOrDefault("subscriptionId")
  valid_569420 = validateParameter(valid_569420, JString, required = true,
                                 default = nil)
  if valid_569420 != nil:
    section.add "subscriptionId", valid_569420
  var valid_569421 = path.getOrDefault("view")
  valid_569421 = validateParameter(valid_569421, JString, required = true,
                                 default = nil)
  if valid_569421 != nil:
    section.add "view", valid_569421
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569422 = query.getOrDefault("api-version")
  valid_569422 = validateParameter(valid_569422, JString, required = true,
                                 default = nil)
  if valid_569422 != nil:
    section.add "api-version", valid_569422
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569423: Call_WebAppsListNetworkFeatures_569415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_569423.validator(path, query, header, formData, body)
  let scheme = call_569423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569423.url(scheme.get, call_569423.host, call_569423.base,
                         call_569423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569423, url, valid)

proc call*(call_569424: Call_WebAppsListNetworkFeatures_569415;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeatures
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_569425 = newJObject()
  var query_569426 = newJObject()
  add(path_569425, "resourceGroupName", newJString(resourceGroupName))
  add(query_569426, "api-version", newJString(apiVersion))
  add(path_569425, "name", newJString(name))
  add(path_569425, "subscriptionId", newJString(subscriptionId))
  add(path_569425, "view", newJString(view))
  result = call_569424.call(path_569425, query_569426, nil, nil, nil)

var webAppsListNetworkFeatures* = Call_WebAppsListNetworkFeatures_569415(
    name: "webAppsListNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeatures_569416, base: "",
    url: url_WebAppsListNetworkFeatures_569417, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTrace_569427 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartWebSiteNetworkTrace_569429(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTrace_569428(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569430 = path.getOrDefault("resourceGroupName")
  valid_569430 = validateParameter(valid_569430, JString, required = true,
                                 default = nil)
  if valid_569430 != nil:
    section.add "resourceGroupName", valid_569430
  var valid_569431 = path.getOrDefault("name")
  valid_569431 = validateParameter(valid_569431, JString, required = true,
                                 default = nil)
  if valid_569431 != nil:
    section.add "name", valid_569431
  var valid_569432 = path.getOrDefault("subscriptionId")
  valid_569432 = validateParameter(valid_569432, JString, required = true,
                                 default = nil)
  if valid_569432 != nil:
    section.add "subscriptionId", valid_569432
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569433 = query.getOrDefault("api-version")
  valid_569433 = validateParameter(valid_569433, JString, required = true,
                                 default = nil)
  if valid_569433 != nil:
    section.add "api-version", valid_569433
  var valid_569434 = query.getOrDefault("durationInSeconds")
  valid_569434 = validateParameter(valid_569434, JInt, required = false, default = nil)
  if valid_569434 != nil:
    section.add "durationInSeconds", valid_569434
  var valid_569435 = query.getOrDefault("maxFrameLength")
  valid_569435 = validateParameter(valid_569435, JInt, required = false, default = nil)
  if valid_569435 != nil:
    section.add "maxFrameLength", valid_569435
  var valid_569436 = query.getOrDefault("sasUrl")
  valid_569436 = validateParameter(valid_569436, JString, required = false,
                                 default = nil)
  if valid_569436 != nil:
    section.add "sasUrl", valid_569436
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569437: Call_WebAppsStartWebSiteNetworkTrace_569427;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_569437.validator(path, query, header, formData, body)
  let scheme = call_569437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569437.url(scheme.get, call_569437.host, call_569437.base,
                         call_569437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569437, url, valid)

proc call*(call_569438: Call_WebAppsStartWebSiteNetworkTrace_569427;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTrace
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_569439 = newJObject()
  var query_569440 = newJObject()
  add(path_569439, "resourceGroupName", newJString(resourceGroupName))
  add(query_569440, "api-version", newJString(apiVersion))
  add(path_569439, "name", newJString(name))
  add(path_569439, "subscriptionId", newJString(subscriptionId))
  add(query_569440, "durationInSeconds", newJInt(durationInSeconds))
  add(query_569440, "maxFrameLength", newJInt(maxFrameLength))
  add(query_569440, "sasUrl", newJString(sasUrl))
  result = call_569438.call(path_569439, query_569440, nil, nil, nil)

var webAppsStartWebSiteNetworkTrace* = Call_WebAppsStartWebSiteNetworkTrace_569427(
    name: "webAppsStartWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTrace_569428, base: "",
    url: url_WebAppsStartWebSiteNetworkTrace_569429, schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTrace_569441 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopWebSiteNetworkTrace_569443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTrace_569442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569444 = path.getOrDefault("resourceGroupName")
  valid_569444 = validateParameter(valid_569444, JString, required = true,
                                 default = nil)
  if valid_569444 != nil:
    section.add "resourceGroupName", valid_569444
  var valid_569445 = path.getOrDefault("name")
  valid_569445 = validateParameter(valid_569445, JString, required = true,
                                 default = nil)
  if valid_569445 != nil:
    section.add "name", valid_569445
  var valid_569446 = path.getOrDefault("subscriptionId")
  valid_569446 = validateParameter(valid_569446, JString, required = true,
                                 default = nil)
  if valid_569446 != nil:
    section.add "subscriptionId", valid_569446
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569447 = query.getOrDefault("api-version")
  valid_569447 = validateParameter(valid_569447, JString, required = true,
                                 default = nil)
  if valid_569447 != nil:
    section.add "api-version", valid_569447
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569448: Call_WebAppsStopWebSiteNetworkTrace_569441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_569448.validator(path, query, header, formData, body)
  let scheme = call_569448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569448.url(scheme.get, call_569448.host, call_569448.base,
                         call_569448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569448, url, valid)

proc call*(call_569449: Call_WebAppsStopWebSiteNetworkTrace_569441;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569450 = newJObject()
  var query_569451 = newJObject()
  add(path_569450, "resourceGroupName", newJString(resourceGroupName))
  add(query_569451, "api-version", newJString(apiVersion))
  add(path_569450, "name", newJString(name))
  add(path_569450, "subscriptionId", newJString(subscriptionId))
  result = call_569449.call(path_569450, query_569451, nil, nil, nil)

var webAppsStopWebSiteNetworkTrace* = Call_WebAppsStopWebSiteNetworkTrace_569441(
    name: "webAppsStopWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTrace_569442, base: "",
    url: url_WebAppsStopWebSiteNetworkTrace_569443, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPassword_569452 = ref object of OpenApiRestCall_567666
proc url_WebAppsGenerateNewSitePublishingPassword_569454(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPassword_569453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569455 = path.getOrDefault("resourceGroupName")
  valid_569455 = validateParameter(valid_569455, JString, required = true,
                                 default = nil)
  if valid_569455 != nil:
    section.add "resourceGroupName", valid_569455
  var valid_569456 = path.getOrDefault("name")
  valid_569456 = validateParameter(valid_569456, JString, required = true,
                                 default = nil)
  if valid_569456 != nil:
    section.add "name", valid_569456
  var valid_569457 = path.getOrDefault("subscriptionId")
  valid_569457 = validateParameter(valid_569457, JString, required = true,
                                 default = nil)
  if valid_569457 != nil:
    section.add "subscriptionId", valid_569457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569458 = query.getOrDefault("api-version")
  valid_569458 = validateParameter(valid_569458, JString, required = true,
                                 default = nil)
  if valid_569458 != nil:
    section.add "api-version", valid_569458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569459: Call_WebAppsGenerateNewSitePublishingPassword_569452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_569459.validator(path, query, header, formData, body)
  let scheme = call_569459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569459.url(scheme.get, call_569459.host, call_569459.base,
                         call_569459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569459, url, valid)

proc call*(call_569460: Call_WebAppsGenerateNewSitePublishingPassword_569452;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPassword
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569461 = newJObject()
  var query_569462 = newJObject()
  add(path_569461, "resourceGroupName", newJString(resourceGroupName))
  add(query_569462, "api-version", newJString(apiVersion))
  add(path_569461, "name", newJString(name))
  add(path_569461, "subscriptionId", newJString(subscriptionId))
  result = call_569460.call(path_569461, query_569462, nil, nil, nil)

var webAppsGenerateNewSitePublishingPassword* = Call_WebAppsGenerateNewSitePublishingPassword_569452(
    name: "webAppsGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPassword_569453, base: "",
    url: url_WebAppsGenerateNewSitePublishingPassword_569454,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCounters_569463 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPerfMonCounters_569465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCounters_569464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569466 = path.getOrDefault("resourceGroupName")
  valid_569466 = validateParameter(valid_569466, JString, required = true,
                                 default = nil)
  if valid_569466 != nil:
    section.add "resourceGroupName", valid_569466
  var valid_569467 = path.getOrDefault("name")
  valid_569467 = validateParameter(valid_569467, JString, required = true,
                                 default = nil)
  if valid_569467 != nil:
    section.add "name", valid_569467
  var valid_569468 = path.getOrDefault("subscriptionId")
  valid_569468 = validateParameter(valid_569468, JString, required = true,
                                 default = nil)
  if valid_569468 != nil:
    section.add "subscriptionId", valid_569468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569469 = query.getOrDefault("api-version")
  valid_569469 = validateParameter(valid_569469, JString, required = true,
                                 default = nil)
  if valid_569469 != nil:
    section.add "api-version", valid_569469
  var valid_569470 = query.getOrDefault("$filter")
  valid_569470 = validateParameter(valid_569470, JString, required = false,
                                 default = nil)
  if valid_569470 != nil:
    section.add "$filter", valid_569470
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569471: Call_WebAppsListPerfMonCounters_569463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_569471.validator(path, query, header, formData, body)
  let scheme = call_569471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569471.url(scheme.get, call_569471.host, call_569471.base,
                         call_569471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569471, url, valid)

proc call*(call_569472: Call_WebAppsListPerfMonCounters_569463;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCounters
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569473 = newJObject()
  var query_569474 = newJObject()
  add(path_569473, "resourceGroupName", newJString(resourceGroupName))
  add(query_569474, "api-version", newJString(apiVersion))
  add(path_569473, "name", newJString(name))
  add(path_569473, "subscriptionId", newJString(subscriptionId))
  add(query_569474, "$filter", newJString(Filter))
  result = call_569472.call(path_569473, query_569474, nil, nil, nil)

var webAppsListPerfMonCounters* = Call_WebAppsListPerfMonCounters_569463(
    name: "webAppsListPerfMonCounters", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    validator: validate_WebAppsListPerfMonCounters_569464, base: "",
    url: url_WebAppsListPerfMonCounters_569465, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlag_569475 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSitePhpErrorLogFlag_569477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlag_569476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569478 = path.getOrDefault("resourceGroupName")
  valid_569478 = validateParameter(valid_569478, JString, required = true,
                                 default = nil)
  if valid_569478 != nil:
    section.add "resourceGroupName", valid_569478
  var valid_569479 = path.getOrDefault("name")
  valid_569479 = validateParameter(valid_569479, JString, required = true,
                                 default = nil)
  if valid_569479 != nil:
    section.add "name", valid_569479
  var valid_569480 = path.getOrDefault("subscriptionId")
  valid_569480 = validateParameter(valid_569480, JString, required = true,
                                 default = nil)
  if valid_569480 != nil:
    section.add "subscriptionId", valid_569480
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569481 = query.getOrDefault("api-version")
  valid_569481 = validateParameter(valid_569481, JString, required = true,
                                 default = nil)
  if valid_569481 != nil:
    section.add "api-version", valid_569481
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569482: Call_WebAppsGetSitePhpErrorLogFlag_569475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_569482.validator(path, query, header, formData, body)
  let scheme = call_569482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569482.url(scheme.get, call_569482.host, call_569482.base,
                         call_569482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569482, url, valid)

proc call*(call_569483: Call_WebAppsGetSitePhpErrorLogFlag_569475;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlag
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569484 = newJObject()
  var query_569485 = newJObject()
  add(path_569484, "resourceGroupName", newJString(resourceGroupName))
  add(query_569485, "api-version", newJString(apiVersion))
  add(path_569484, "name", newJString(name))
  add(path_569484, "subscriptionId", newJString(subscriptionId))
  result = call_569483.call(path_569484, query_569485, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlag* = Call_WebAppsGetSitePhpErrorLogFlag_569475(
    name: "webAppsGetSitePhpErrorLogFlag", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlag_569476, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlag_569477, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOns_569486 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPremierAddOns_569488(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOns_569487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569489 = path.getOrDefault("resourceGroupName")
  valid_569489 = validateParameter(valid_569489, JString, required = true,
                                 default = nil)
  if valid_569489 != nil:
    section.add "resourceGroupName", valid_569489
  var valid_569490 = path.getOrDefault("name")
  valid_569490 = validateParameter(valid_569490, JString, required = true,
                                 default = nil)
  if valid_569490 != nil:
    section.add "name", valid_569490
  var valid_569491 = path.getOrDefault("subscriptionId")
  valid_569491 = validateParameter(valid_569491, JString, required = true,
                                 default = nil)
  if valid_569491 != nil:
    section.add "subscriptionId", valid_569491
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569492 = query.getOrDefault("api-version")
  valid_569492 = validateParameter(valid_569492, JString, required = true,
                                 default = nil)
  if valid_569492 != nil:
    section.add "api-version", valid_569492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569493: Call_WebAppsListPremierAddOns_569486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_569493.validator(path, query, header, formData, body)
  let scheme = call_569493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569493.url(scheme.get, call_569493.host, call_569493.base,
                         call_569493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569493, url, valid)

proc call*(call_569494: Call_WebAppsListPremierAddOns_569486;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOns
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569495 = newJObject()
  var query_569496 = newJObject()
  add(path_569495, "resourceGroupName", newJString(resourceGroupName))
  add(query_569496, "api-version", newJString(apiVersion))
  add(path_569495, "name", newJString(name))
  add(path_569495, "subscriptionId", newJString(subscriptionId))
  result = call_569494.call(path_569495, query_569496, nil, nil, nil)

var webAppsListPremierAddOns* = Call_WebAppsListPremierAddOns_569486(
    name: "webAppsListPremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_WebAppsListPremierAddOns_569487, base: "",
    url: url_WebAppsListPremierAddOns_569488, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOn_569509 = ref object of OpenApiRestCall_567666
proc url_WebAppsAddPremierAddOn_569511(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOn_569510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569512 = path.getOrDefault("resourceGroupName")
  valid_569512 = validateParameter(valid_569512, JString, required = true,
                                 default = nil)
  if valid_569512 != nil:
    section.add "resourceGroupName", valid_569512
  var valid_569513 = path.getOrDefault("name")
  valid_569513 = validateParameter(valid_569513, JString, required = true,
                                 default = nil)
  if valid_569513 != nil:
    section.add "name", valid_569513
  var valid_569514 = path.getOrDefault("subscriptionId")
  valid_569514 = validateParameter(valid_569514, JString, required = true,
                                 default = nil)
  if valid_569514 != nil:
    section.add "subscriptionId", valid_569514
  var valid_569515 = path.getOrDefault("premierAddOnName")
  valid_569515 = validateParameter(valid_569515, JString, required = true,
                                 default = nil)
  if valid_569515 != nil:
    section.add "premierAddOnName", valid_569515
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569516 = query.getOrDefault("api-version")
  valid_569516 = validateParameter(valid_569516, JString, required = true,
                                 default = nil)
  if valid_569516 != nil:
    section.add "api-version", valid_569516
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569518: Call_WebAppsAddPremierAddOn_569509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_569518.validator(path, query, header, formData, body)
  let scheme = call_569518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569518.url(scheme.get, call_569518.host, call_569518.base,
                         call_569518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569518, url, valid)

proc call*(call_569519: Call_WebAppsAddPremierAddOn_569509;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOn
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569520 = newJObject()
  var query_569521 = newJObject()
  var body_569522 = newJObject()
  add(path_569520, "resourceGroupName", newJString(resourceGroupName))
  add(query_569521, "api-version", newJString(apiVersion))
  add(path_569520, "name", newJString(name))
  if premierAddOn != nil:
    body_569522 = premierAddOn
  add(path_569520, "subscriptionId", newJString(subscriptionId))
  add(path_569520, "premierAddOnName", newJString(premierAddOnName))
  result = call_569519.call(path_569520, query_569521, nil, nil, body_569522)

var webAppsAddPremierAddOn* = Call_WebAppsAddPremierAddOn_569509(
    name: "webAppsAddPremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOn_569510, base: "",
    url: url_WebAppsAddPremierAddOn_569511, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOn_569497 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPremierAddOn_569499(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOn_569498(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569500 = path.getOrDefault("resourceGroupName")
  valid_569500 = validateParameter(valid_569500, JString, required = true,
                                 default = nil)
  if valid_569500 != nil:
    section.add "resourceGroupName", valid_569500
  var valid_569501 = path.getOrDefault("name")
  valid_569501 = validateParameter(valid_569501, JString, required = true,
                                 default = nil)
  if valid_569501 != nil:
    section.add "name", valid_569501
  var valid_569502 = path.getOrDefault("subscriptionId")
  valid_569502 = validateParameter(valid_569502, JString, required = true,
                                 default = nil)
  if valid_569502 != nil:
    section.add "subscriptionId", valid_569502
  var valid_569503 = path.getOrDefault("premierAddOnName")
  valid_569503 = validateParameter(valid_569503, JString, required = true,
                                 default = nil)
  if valid_569503 != nil:
    section.add "premierAddOnName", valid_569503
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569504 = query.getOrDefault("api-version")
  valid_569504 = validateParameter(valid_569504, JString, required = true,
                                 default = nil)
  if valid_569504 != nil:
    section.add "api-version", valid_569504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569505: Call_WebAppsGetPremierAddOn_569497; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_569505.validator(path, query, header, formData, body)
  let scheme = call_569505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569505.url(scheme.get, call_569505.host, call_569505.base,
                         call_569505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569505, url, valid)

proc call*(call_569506: Call_WebAppsGetPremierAddOn_569497;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOn
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569507 = newJObject()
  var query_569508 = newJObject()
  add(path_569507, "resourceGroupName", newJString(resourceGroupName))
  add(query_569508, "api-version", newJString(apiVersion))
  add(path_569507, "name", newJString(name))
  add(path_569507, "subscriptionId", newJString(subscriptionId))
  add(path_569507, "premierAddOnName", newJString(premierAddOnName))
  result = call_569506.call(path_569507, query_569508, nil, nil, nil)

var webAppsGetPremierAddOn* = Call_WebAppsGetPremierAddOn_569497(
    name: "webAppsGetPremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOn_569498, base: "",
    url: url_WebAppsGetPremierAddOn_569499, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOn_569523 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePremierAddOn_569525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOn_569524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569526 = path.getOrDefault("resourceGroupName")
  valid_569526 = validateParameter(valid_569526, JString, required = true,
                                 default = nil)
  if valid_569526 != nil:
    section.add "resourceGroupName", valid_569526
  var valid_569527 = path.getOrDefault("name")
  valid_569527 = validateParameter(valid_569527, JString, required = true,
                                 default = nil)
  if valid_569527 != nil:
    section.add "name", valid_569527
  var valid_569528 = path.getOrDefault("subscriptionId")
  valid_569528 = validateParameter(valid_569528, JString, required = true,
                                 default = nil)
  if valid_569528 != nil:
    section.add "subscriptionId", valid_569528
  var valid_569529 = path.getOrDefault("premierAddOnName")
  valid_569529 = validateParameter(valid_569529, JString, required = true,
                                 default = nil)
  if valid_569529 != nil:
    section.add "premierAddOnName", valid_569529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569530 = query.getOrDefault("api-version")
  valid_569530 = validateParameter(valid_569530, JString, required = true,
                                 default = nil)
  if valid_569530 != nil:
    section.add "api-version", valid_569530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569531: Call_WebAppsDeletePremierAddOn_569523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_569531.validator(path, query, header, formData, body)
  let scheme = call_569531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569531.url(scheme.get, call_569531.host, call_569531.base,
                         call_569531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569531, url, valid)

proc call*(call_569532: Call_WebAppsDeletePremierAddOn_569523;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOn
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569533 = newJObject()
  var query_569534 = newJObject()
  add(path_569533, "resourceGroupName", newJString(resourceGroupName))
  add(query_569534, "api-version", newJString(apiVersion))
  add(path_569533, "name", newJString(name))
  add(path_569533, "subscriptionId", newJString(subscriptionId))
  add(path_569533, "premierAddOnName", newJString(premierAddOnName))
  result = call_569532.call(path_569533, query_569534, nil, nil, nil)

var webAppsDeletePremierAddOn* = Call_WebAppsDeletePremierAddOn_569523(
    name: "webAppsDeletePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOn_569524, base: "",
    url: url_WebAppsDeletePremierAddOn_569525, schemes: {Scheme.Https})
type
  Call_WebAppsListProcesses_569535 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcesses_569537(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcesses_569536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569538 = path.getOrDefault("resourceGroupName")
  valid_569538 = validateParameter(valid_569538, JString, required = true,
                                 default = nil)
  if valid_569538 != nil:
    section.add "resourceGroupName", valid_569538
  var valid_569539 = path.getOrDefault("name")
  valid_569539 = validateParameter(valid_569539, JString, required = true,
                                 default = nil)
  if valid_569539 != nil:
    section.add "name", valid_569539
  var valid_569540 = path.getOrDefault("subscriptionId")
  valid_569540 = validateParameter(valid_569540, JString, required = true,
                                 default = nil)
  if valid_569540 != nil:
    section.add "subscriptionId", valid_569540
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569541 = query.getOrDefault("api-version")
  valid_569541 = validateParameter(valid_569541, JString, required = true,
                                 default = nil)
  if valid_569541 != nil:
    section.add "api-version", valid_569541
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569542: Call_WebAppsListProcesses_569535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569542.validator(path, query, header, formData, body)
  let scheme = call_569542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569542.url(scheme.get, call_569542.host, call_569542.base,
                         call_569542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569542, url, valid)

proc call*(call_569543: Call_WebAppsListProcesses_569535;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569544 = newJObject()
  var query_569545 = newJObject()
  add(path_569544, "resourceGroupName", newJString(resourceGroupName))
  add(query_569545, "api-version", newJString(apiVersion))
  add(path_569544, "name", newJString(name))
  add(path_569544, "subscriptionId", newJString(subscriptionId))
  result = call_569543.call(path_569544, query_569545, nil, nil, nil)

var webAppsListProcesses* = Call_WebAppsListProcesses_569535(
    name: "webAppsListProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    validator: validate_WebAppsListProcesses_569536, base: "",
    url: url_WebAppsListProcesses_569537, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcess_569546 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcess_569548(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcess_569547(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569549 = path.getOrDefault("resourceGroupName")
  valid_569549 = validateParameter(valid_569549, JString, required = true,
                                 default = nil)
  if valid_569549 != nil:
    section.add "resourceGroupName", valid_569549
  var valid_569550 = path.getOrDefault("name")
  valid_569550 = validateParameter(valid_569550, JString, required = true,
                                 default = nil)
  if valid_569550 != nil:
    section.add "name", valid_569550
  var valid_569551 = path.getOrDefault("processId")
  valid_569551 = validateParameter(valid_569551, JString, required = true,
                                 default = nil)
  if valid_569551 != nil:
    section.add "processId", valid_569551
  var valid_569552 = path.getOrDefault("subscriptionId")
  valid_569552 = validateParameter(valid_569552, JString, required = true,
                                 default = nil)
  if valid_569552 != nil:
    section.add "subscriptionId", valid_569552
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569553 = query.getOrDefault("api-version")
  valid_569553 = validateParameter(valid_569553, JString, required = true,
                                 default = nil)
  if valid_569553 != nil:
    section.add "api-version", valid_569553
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569554: Call_WebAppsGetProcess_569546; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569554.validator(path, query, header, formData, body)
  let scheme = call_569554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569554.url(scheme.get, call_569554.host, call_569554.base,
                         call_569554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569554, url, valid)

proc call*(call_569555: Call_WebAppsGetProcess_569546; resourceGroupName: string;
          apiVersion: string; name: string; processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569556 = newJObject()
  var query_569557 = newJObject()
  add(path_569556, "resourceGroupName", newJString(resourceGroupName))
  add(query_569557, "api-version", newJString(apiVersion))
  add(path_569556, "name", newJString(name))
  add(path_569556, "processId", newJString(processId))
  add(path_569556, "subscriptionId", newJString(subscriptionId))
  result = call_569555.call(path_569556, query_569557, nil, nil, nil)

var webAppsGetProcess* = Call_WebAppsGetProcess_569546(name: "webAppsGetProcess",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsGetProcess_569547, base: "",
    url: url_WebAppsGetProcess_569548, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcess_569558 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteProcess_569560(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcess_569559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569561 = path.getOrDefault("resourceGroupName")
  valid_569561 = validateParameter(valid_569561, JString, required = true,
                                 default = nil)
  if valid_569561 != nil:
    section.add "resourceGroupName", valid_569561
  var valid_569562 = path.getOrDefault("name")
  valid_569562 = validateParameter(valid_569562, JString, required = true,
                                 default = nil)
  if valid_569562 != nil:
    section.add "name", valid_569562
  var valid_569563 = path.getOrDefault("processId")
  valid_569563 = validateParameter(valid_569563, JString, required = true,
                                 default = nil)
  if valid_569563 != nil:
    section.add "processId", valid_569563
  var valid_569564 = path.getOrDefault("subscriptionId")
  valid_569564 = validateParameter(valid_569564, JString, required = true,
                                 default = nil)
  if valid_569564 != nil:
    section.add "subscriptionId", valid_569564
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569565 = query.getOrDefault("api-version")
  valid_569565 = validateParameter(valid_569565, JString, required = true,
                                 default = nil)
  if valid_569565 != nil:
    section.add "api-version", valid_569565
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569566: Call_WebAppsDeleteProcess_569558; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_569566.validator(path, query, header, formData, body)
  let scheme = call_569566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569566.url(scheme.get, call_569566.host, call_569566.base,
                         call_569566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569566, url, valid)

proc call*(call_569567: Call_WebAppsDeleteProcess_569558;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569568 = newJObject()
  var query_569569 = newJObject()
  add(path_569568, "resourceGroupName", newJString(resourceGroupName))
  add(query_569569, "api-version", newJString(apiVersion))
  add(path_569568, "name", newJString(name))
  add(path_569568, "processId", newJString(processId))
  add(path_569568, "subscriptionId", newJString(subscriptionId))
  result = call_569567.call(path_569568, query_569569, nil, nil, nil)

var webAppsDeleteProcess* = Call_WebAppsDeleteProcess_569558(
    name: "webAppsDeleteProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsDeleteProcess_569559, base: "",
    url: url_WebAppsDeleteProcess_569560, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDump_569570 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessDump_569572(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDump_569571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569573 = path.getOrDefault("resourceGroupName")
  valid_569573 = validateParameter(valid_569573, JString, required = true,
                                 default = nil)
  if valid_569573 != nil:
    section.add "resourceGroupName", valid_569573
  var valid_569574 = path.getOrDefault("name")
  valid_569574 = validateParameter(valid_569574, JString, required = true,
                                 default = nil)
  if valid_569574 != nil:
    section.add "name", valid_569574
  var valid_569575 = path.getOrDefault("processId")
  valid_569575 = validateParameter(valid_569575, JString, required = true,
                                 default = nil)
  if valid_569575 != nil:
    section.add "processId", valid_569575
  var valid_569576 = path.getOrDefault("subscriptionId")
  valid_569576 = validateParameter(valid_569576, JString, required = true,
                                 default = nil)
  if valid_569576 != nil:
    section.add "subscriptionId", valid_569576
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569577 = query.getOrDefault("api-version")
  valid_569577 = validateParameter(valid_569577, JString, required = true,
                                 default = nil)
  if valid_569577 != nil:
    section.add "api-version", valid_569577
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569578: Call_WebAppsGetProcessDump_569570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569578.validator(path, query, header, formData, body)
  let scheme = call_569578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569578.url(scheme.get, call_569578.host, call_569578.base,
                         call_569578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569578, url, valid)

proc call*(call_569579: Call_WebAppsGetProcessDump_569570;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569580 = newJObject()
  var query_569581 = newJObject()
  add(path_569580, "resourceGroupName", newJString(resourceGroupName))
  add(query_569581, "api-version", newJString(apiVersion))
  add(path_569580, "name", newJString(name))
  add(path_569580, "processId", newJString(processId))
  add(path_569580, "subscriptionId", newJString(subscriptionId))
  result = call_569579.call(path_569580, query_569581, nil, nil, nil)

var webAppsGetProcessDump* = Call_WebAppsGetProcessDump_569570(
    name: "webAppsGetProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDump_569571, base: "",
    url: url_WebAppsGetProcessDump_569572, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModules_569582 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessModules_569584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModules_569583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569585 = path.getOrDefault("resourceGroupName")
  valid_569585 = validateParameter(valid_569585, JString, required = true,
                                 default = nil)
  if valid_569585 != nil:
    section.add "resourceGroupName", valid_569585
  var valid_569586 = path.getOrDefault("name")
  valid_569586 = validateParameter(valid_569586, JString, required = true,
                                 default = nil)
  if valid_569586 != nil:
    section.add "name", valid_569586
  var valid_569587 = path.getOrDefault("processId")
  valid_569587 = validateParameter(valid_569587, JString, required = true,
                                 default = nil)
  if valid_569587 != nil:
    section.add "processId", valid_569587
  var valid_569588 = path.getOrDefault("subscriptionId")
  valid_569588 = validateParameter(valid_569588, JString, required = true,
                                 default = nil)
  if valid_569588 != nil:
    section.add "subscriptionId", valid_569588
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569589 = query.getOrDefault("api-version")
  valid_569589 = validateParameter(valid_569589, JString, required = true,
                                 default = nil)
  if valid_569589 != nil:
    section.add "api-version", valid_569589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569590: Call_WebAppsListProcessModules_569582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569590.validator(path, query, header, formData, body)
  let scheme = call_569590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569590.url(scheme.get, call_569590.host, call_569590.base,
                         call_569590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569590, url, valid)

proc call*(call_569591: Call_WebAppsListProcessModules_569582;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569592 = newJObject()
  var query_569593 = newJObject()
  add(path_569592, "resourceGroupName", newJString(resourceGroupName))
  add(query_569593, "api-version", newJString(apiVersion))
  add(path_569592, "name", newJString(name))
  add(path_569592, "processId", newJString(processId))
  add(path_569592, "subscriptionId", newJString(subscriptionId))
  result = call_569591.call(path_569592, query_569593, nil, nil, nil)

var webAppsListProcessModules* = Call_WebAppsListProcessModules_569582(
    name: "webAppsListProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModules_569583, base: "",
    url: url_WebAppsListProcessModules_569584, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModule_569594 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessModule_569596(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModule_569595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569597 = path.getOrDefault("resourceGroupName")
  valid_569597 = validateParameter(valid_569597, JString, required = true,
                                 default = nil)
  if valid_569597 != nil:
    section.add "resourceGroupName", valid_569597
  var valid_569598 = path.getOrDefault("name")
  valid_569598 = validateParameter(valid_569598, JString, required = true,
                                 default = nil)
  if valid_569598 != nil:
    section.add "name", valid_569598
  var valid_569599 = path.getOrDefault("processId")
  valid_569599 = validateParameter(valid_569599, JString, required = true,
                                 default = nil)
  if valid_569599 != nil:
    section.add "processId", valid_569599
  var valid_569600 = path.getOrDefault("subscriptionId")
  valid_569600 = validateParameter(valid_569600, JString, required = true,
                                 default = nil)
  if valid_569600 != nil:
    section.add "subscriptionId", valid_569600
  var valid_569601 = path.getOrDefault("baseAddress")
  valid_569601 = validateParameter(valid_569601, JString, required = true,
                                 default = nil)
  if valid_569601 != nil:
    section.add "baseAddress", valid_569601
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569602 = query.getOrDefault("api-version")
  valid_569602 = validateParameter(valid_569602, JString, required = true,
                                 default = nil)
  if valid_569602 != nil:
    section.add "api-version", valid_569602
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569603: Call_WebAppsGetProcessModule_569594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569603.validator(path, query, header, formData, body)
  let scheme = call_569603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569603.url(scheme.get, call_569603.host, call_569603.base,
                         call_569603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569603, url, valid)

proc call*(call_569604: Call_WebAppsGetProcessModule_569594;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_569605 = newJObject()
  var query_569606 = newJObject()
  add(path_569605, "resourceGroupName", newJString(resourceGroupName))
  add(query_569606, "api-version", newJString(apiVersion))
  add(path_569605, "name", newJString(name))
  add(path_569605, "processId", newJString(processId))
  add(path_569605, "subscriptionId", newJString(subscriptionId))
  add(path_569605, "baseAddress", newJString(baseAddress))
  result = call_569604.call(path_569605, query_569606, nil, nil, nil)

var webAppsGetProcessModule* = Call_WebAppsGetProcessModule_569594(
    name: "webAppsGetProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModule_569595, base: "",
    url: url_WebAppsGetProcessModule_569596, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreads_569607 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessThreads_569609(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreads_569608(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569610 = path.getOrDefault("resourceGroupName")
  valid_569610 = validateParameter(valid_569610, JString, required = true,
                                 default = nil)
  if valid_569610 != nil:
    section.add "resourceGroupName", valid_569610
  var valid_569611 = path.getOrDefault("name")
  valid_569611 = validateParameter(valid_569611, JString, required = true,
                                 default = nil)
  if valid_569611 != nil:
    section.add "name", valid_569611
  var valid_569612 = path.getOrDefault("processId")
  valid_569612 = validateParameter(valid_569612, JString, required = true,
                                 default = nil)
  if valid_569612 != nil:
    section.add "processId", valid_569612
  var valid_569613 = path.getOrDefault("subscriptionId")
  valid_569613 = validateParameter(valid_569613, JString, required = true,
                                 default = nil)
  if valid_569613 != nil:
    section.add "subscriptionId", valid_569613
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569614 = query.getOrDefault("api-version")
  valid_569614 = validateParameter(valid_569614, JString, required = true,
                                 default = nil)
  if valid_569614 != nil:
    section.add "api-version", valid_569614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569615: Call_WebAppsListProcessThreads_569607; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569615.validator(path, query, header, formData, body)
  let scheme = call_569615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569615.url(scheme.get, call_569615.host, call_569615.base,
                         call_569615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569615, url, valid)

proc call*(call_569616: Call_WebAppsListProcessThreads_569607;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569617 = newJObject()
  var query_569618 = newJObject()
  add(path_569617, "resourceGroupName", newJString(resourceGroupName))
  add(query_569618, "api-version", newJString(apiVersion))
  add(path_569617, "name", newJString(name))
  add(path_569617, "processId", newJString(processId))
  add(path_569617, "subscriptionId", newJString(subscriptionId))
  result = call_569616.call(path_569617, query_569618, nil, nil, nil)

var webAppsListProcessThreads* = Call_WebAppsListProcessThreads_569607(
    name: "webAppsListProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreads_569608, base: "",
    url: url_WebAppsListProcessThreads_569609, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThread_569619 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessThread_569621(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThread_569620(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569622 = path.getOrDefault("resourceGroupName")
  valid_569622 = validateParameter(valid_569622, JString, required = true,
                                 default = nil)
  if valid_569622 != nil:
    section.add "resourceGroupName", valid_569622
  var valid_569623 = path.getOrDefault("name")
  valid_569623 = validateParameter(valid_569623, JString, required = true,
                                 default = nil)
  if valid_569623 != nil:
    section.add "name", valid_569623
  var valid_569624 = path.getOrDefault("processId")
  valid_569624 = validateParameter(valid_569624, JString, required = true,
                                 default = nil)
  if valid_569624 != nil:
    section.add "processId", valid_569624
  var valid_569625 = path.getOrDefault("subscriptionId")
  valid_569625 = validateParameter(valid_569625, JString, required = true,
                                 default = nil)
  if valid_569625 != nil:
    section.add "subscriptionId", valid_569625
  var valid_569626 = path.getOrDefault("threadId")
  valid_569626 = validateParameter(valid_569626, JString, required = true,
                                 default = nil)
  if valid_569626 != nil:
    section.add "threadId", valid_569626
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569627 = query.getOrDefault("api-version")
  valid_569627 = validateParameter(valid_569627, JString, required = true,
                                 default = nil)
  if valid_569627 != nil:
    section.add "api-version", valid_569627
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569628: Call_WebAppsGetProcessThread_569619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_569628.validator(path, query, header, formData, body)
  let scheme = call_569628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569628.url(scheme.get, call_569628.host, call_569628.base,
                         call_569628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569628, url, valid)

proc call*(call_569629: Call_WebAppsGetProcessThread_569619;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_569630 = newJObject()
  var query_569631 = newJObject()
  add(path_569630, "resourceGroupName", newJString(resourceGroupName))
  add(query_569631, "api-version", newJString(apiVersion))
  add(path_569630, "name", newJString(name))
  add(path_569630, "processId", newJString(processId))
  add(path_569630, "subscriptionId", newJString(subscriptionId))
  add(path_569630, "threadId", newJString(threadId))
  result = call_569629.call(path_569630, query_569631, nil, nil, nil)

var webAppsGetProcessThread* = Call_WebAppsGetProcessThread_569619(
    name: "webAppsGetProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThread_569620, base: "",
    url: url_WebAppsGetProcessThread_569621, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificates_569632 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublicCertificates_569634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificates_569633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569635 = path.getOrDefault("resourceGroupName")
  valid_569635 = validateParameter(valid_569635, JString, required = true,
                                 default = nil)
  if valid_569635 != nil:
    section.add "resourceGroupName", valid_569635
  var valid_569636 = path.getOrDefault("name")
  valid_569636 = validateParameter(valid_569636, JString, required = true,
                                 default = nil)
  if valid_569636 != nil:
    section.add "name", valid_569636
  var valid_569637 = path.getOrDefault("subscriptionId")
  valid_569637 = validateParameter(valid_569637, JString, required = true,
                                 default = nil)
  if valid_569637 != nil:
    section.add "subscriptionId", valid_569637
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569638 = query.getOrDefault("api-version")
  valid_569638 = validateParameter(valid_569638, JString, required = true,
                                 default = nil)
  if valid_569638 != nil:
    section.add "api-version", valid_569638
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569639: Call_WebAppsListPublicCertificates_569632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_569639.validator(path, query, header, formData, body)
  let scheme = call_569639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569639.url(scheme.get, call_569639.host, call_569639.base,
                         call_569639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569639, url, valid)

proc call*(call_569640: Call_WebAppsListPublicCertificates_569632;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificates
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569641 = newJObject()
  var query_569642 = newJObject()
  add(path_569641, "resourceGroupName", newJString(resourceGroupName))
  add(query_569642, "api-version", newJString(apiVersion))
  add(path_569641, "name", newJString(name))
  add(path_569641, "subscriptionId", newJString(subscriptionId))
  result = call_569640.call(path_569641, query_569642, nil, nil, nil)

var webAppsListPublicCertificates* = Call_WebAppsListPublicCertificates_569632(
    name: "webAppsListPublicCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    validator: validate_WebAppsListPublicCertificates_569633, base: "",
    url: url_WebAppsListPublicCertificates_569634, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificate_569655 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdatePublicCertificate_569657(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificate_569656(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569658 = path.getOrDefault("resourceGroupName")
  valid_569658 = validateParameter(valid_569658, JString, required = true,
                                 default = nil)
  if valid_569658 != nil:
    section.add "resourceGroupName", valid_569658
  var valid_569659 = path.getOrDefault("name")
  valid_569659 = validateParameter(valid_569659, JString, required = true,
                                 default = nil)
  if valid_569659 != nil:
    section.add "name", valid_569659
  var valid_569660 = path.getOrDefault("subscriptionId")
  valid_569660 = validateParameter(valid_569660, JString, required = true,
                                 default = nil)
  if valid_569660 != nil:
    section.add "subscriptionId", valid_569660
  var valid_569661 = path.getOrDefault("publicCertificateName")
  valid_569661 = validateParameter(valid_569661, JString, required = true,
                                 default = nil)
  if valid_569661 != nil:
    section.add "publicCertificateName", valid_569661
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569662 = query.getOrDefault("api-version")
  valid_569662 = validateParameter(valid_569662, JString, required = true,
                                 default = nil)
  if valid_569662 != nil:
    section.add "api-version", valid_569662
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569664: Call_WebAppsCreateOrUpdatePublicCertificate_569655;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_569664.validator(path, query, header, formData, body)
  let scheme = call_569664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569664.url(scheme.get, call_569664.host, call_569664.base,
                         call_569664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569664, url, valid)

proc call*(call_569665: Call_WebAppsCreateOrUpdatePublicCertificate_569655;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificate
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_569666 = newJObject()
  var query_569667 = newJObject()
  var body_569668 = newJObject()
  add(path_569666, "resourceGroupName", newJString(resourceGroupName))
  add(query_569667, "api-version", newJString(apiVersion))
  add(path_569666, "name", newJString(name))
  add(path_569666, "subscriptionId", newJString(subscriptionId))
  add(path_569666, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_569668 = publicCertificate
  result = call_569665.call(path_569666, query_569667, nil, nil, body_569668)

var webAppsCreateOrUpdatePublicCertificate* = Call_WebAppsCreateOrUpdatePublicCertificate_569655(
    name: "webAppsCreateOrUpdatePublicCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificate_569656, base: "",
    url: url_WebAppsCreateOrUpdatePublicCertificate_569657,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificate_569643 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPublicCertificate_569645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificate_569644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569646 = path.getOrDefault("resourceGroupName")
  valid_569646 = validateParameter(valid_569646, JString, required = true,
                                 default = nil)
  if valid_569646 != nil:
    section.add "resourceGroupName", valid_569646
  var valid_569647 = path.getOrDefault("name")
  valid_569647 = validateParameter(valid_569647, JString, required = true,
                                 default = nil)
  if valid_569647 != nil:
    section.add "name", valid_569647
  var valid_569648 = path.getOrDefault("subscriptionId")
  valid_569648 = validateParameter(valid_569648, JString, required = true,
                                 default = nil)
  if valid_569648 != nil:
    section.add "subscriptionId", valid_569648
  var valid_569649 = path.getOrDefault("publicCertificateName")
  valid_569649 = validateParameter(valid_569649, JString, required = true,
                                 default = nil)
  if valid_569649 != nil:
    section.add "publicCertificateName", valid_569649
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569650 = query.getOrDefault("api-version")
  valid_569650 = validateParameter(valid_569650, JString, required = true,
                                 default = nil)
  if valid_569650 != nil:
    section.add "api-version", valid_569650
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569651: Call_WebAppsGetPublicCertificate_569643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_569651.validator(path, query, header, formData, body)
  let scheme = call_569651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569651.url(scheme.get, call_569651.host, call_569651.base,
                         call_569651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569651, url, valid)

proc call*(call_569652: Call_WebAppsGetPublicCertificate_569643;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificate
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_569653 = newJObject()
  var query_569654 = newJObject()
  add(path_569653, "resourceGroupName", newJString(resourceGroupName))
  add(query_569654, "api-version", newJString(apiVersion))
  add(path_569653, "name", newJString(name))
  add(path_569653, "subscriptionId", newJString(subscriptionId))
  add(path_569653, "publicCertificateName", newJString(publicCertificateName))
  result = call_569652.call(path_569653, query_569654, nil, nil, nil)

var webAppsGetPublicCertificate* = Call_WebAppsGetPublicCertificate_569643(
    name: "webAppsGetPublicCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificate_569644, base: "",
    url: url_WebAppsGetPublicCertificate_569645, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificate_569669 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePublicCertificate_569671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificate_569670(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569672 = path.getOrDefault("resourceGroupName")
  valid_569672 = validateParameter(valid_569672, JString, required = true,
                                 default = nil)
  if valid_569672 != nil:
    section.add "resourceGroupName", valid_569672
  var valid_569673 = path.getOrDefault("name")
  valid_569673 = validateParameter(valid_569673, JString, required = true,
                                 default = nil)
  if valid_569673 != nil:
    section.add "name", valid_569673
  var valid_569674 = path.getOrDefault("subscriptionId")
  valid_569674 = validateParameter(valid_569674, JString, required = true,
                                 default = nil)
  if valid_569674 != nil:
    section.add "subscriptionId", valid_569674
  var valid_569675 = path.getOrDefault("publicCertificateName")
  valid_569675 = validateParameter(valid_569675, JString, required = true,
                                 default = nil)
  if valid_569675 != nil:
    section.add "publicCertificateName", valid_569675
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569676 = query.getOrDefault("api-version")
  valid_569676 = validateParameter(valid_569676, JString, required = true,
                                 default = nil)
  if valid_569676 != nil:
    section.add "api-version", valid_569676
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569677: Call_WebAppsDeletePublicCertificate_569669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_569677.validator(path, query, header, formData, body)
  let scheme = call_569677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569677.url(scheme.get, call_569677.host, call_569677.base,
                         call_569677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569677, url, valid)

proc call*(call_569678: Call_WebAppsDeletePublicCertificate_569669;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificate
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_569679 = newJObject()
  var query_569680 = newJObject()
  add(path_569679, "resourceGroupName", newJString(resourceGroupName))
  add(query_569680, "api-version", newJString(apiVersion))
  add(path_569679, "name", newJString(name))
  add(path_569679, "subscriptionId", newJString(subscriptionId))
  add(path_569679, "publicCertificateName", newJString(publicCertificateName))
  result = call_569678.call(path_569679, query_569680, nil, nil, nil)

var webAppsDeletePublicCertificate* = Call_WebAppsDeletePublicCertificate_569669(
    name: "webAppsDeletePublicCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificate_569670, base: "",
    url: url_WebAppsDeletePublicCertificate_569671, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecrets_569681 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingProfileXmlWithSecrets_569683(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecrets_569682(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569684 = path.getOrDefault("resourceGroupName")
  valid_569684 = validateParameter(valid_569684, JString, required = true,
                                 default = nil)
  if valid_569684 != nil:
    section.add "resourceGroupName", valid_569684
  var valid_569685 = path.getOrDefault("name")
  valid_569685 = validateParameter(valid_569685, JString, required = true,
                                 default = nil)
  if valid_569685 != nil:
    section.add "name", valid_569685
  var valid_569686 = path.getOrDefault("subscriptionId")
  valid_569686 = validateParameter(valid_569686, JString, required = true,
                                 default = nil)
  if valid_569686 != nil:
    section.add "subscriptionId", valid_569686
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569687 = query.getOrDefault("api-version")
  valid_569687 = validateParameter(valid_569687, JString, required = true,
                                 default = nil)
  if valid_569687 != nil:
    section.add "api-version", valid_569687
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569689: Call_WebAppsListPublishingProfileXmlWithSecrets_569681;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_569689.validator(path, query, header, formData, body)
  let scheme = call_569689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569689.url(scheme.get, call_569689.host, call_569689.base,
                         call_569689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569689, url, valid)

proc call*(call_569690: Call_WebAppsListPublishingProfileXmlWithSecrets_569681;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecrets
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_569691 = newJObject()
  var query_569692 = newJObject()
  var body_569693 = newJObject()
  add(path_569691, "resourceGroupName", newJString(resourceGroupName))
  add(query_569692, "api-version", newJString(apiVersion))
  add(path_569691, "name", newJString(name))
  add(path_569691, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_569693 = publishingProfileOptions
  result = call_569690.call(path_569691, query_569692, nil, nil, body_569693)

var webAppsListPublishingProfileXmlWithSecrets* = Call_WebAppsListPublishingProfileXmlWithSecrets_569681(
    name: "webAppsListPublishingProfileXmlWithSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecrets_569682,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecrets_569683,
    schemes: {Scheme.Https})
type
  Call_WebAppsRecover_569694 = ref object of OpenApiRestCall_567666
proc url_WebAppsRecover_569696(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecover_569695(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Recovers a web app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569697 = path.getOrDefault("resourceGroupName")
  valid_569697 = validateParameter(valid_569697, JString, required = true,
                                 default = nil)
  if valid_569697 != nil:
    section.add "resourceGroupName", valid_569697
  var valid_569698 = path.getOrDefault("name")
  valid_569698 = validateParameter(valid_569698, JString, required = true,
                                 default = nil)
  if valid_569698 != nil:
    section.add "name", valid_569698
  var valid_569699 = path.getOrDefault("subscriptionId")
  valid_569699 = validateParameter(valid_569699, JString, required = true,
                                 default = nil)
  if valid_569699 != nil:
    section.add "subscriptionId", valid_569699
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569700 = query.getOrDefault("api-version")
  valid_569700 = validateParameter(valid_569700, JString, required = true,
                                 default = nil)
  if valid_569700 != nil:
    section.add "api-version", valid_569700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569702: Call_WebAppsRecover_569694; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Recovers a web app to a previous snapshot.
  ## 
  let valid = call_569702.validator(path, query, header, formData, body)
  let scheme = call_569702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569702.url(scheme.get, call_569702.host, call_569702.base,
                         call_569702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569702, url, valid)

proc call*(call_569703: Call_WebAppsRecover_569694; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          recoveryEntity: JsonNode): Recallable =
  ## webAppsRecover
  ## Recovers a web app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_569704 = newJObject()
  var query_569705 = newJObject()
  var body_569706 = newJObject()
  add(path_569704, "resourceGroupName", newJString(resourceGroupName))
  add(query_569705, "api-version", newJString(apiVersion))
  add(path_569704, "name", newJString(name))
  add(path_569704, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_569706 = recoveryEntity
  result = call_569703.call(path_569704, query_569705, nil, nil, body_569706)

var webAppsRecover* = Call_WebAppsRecover_569694(name: "webAppsRecover",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
    validator: validate_WebAppsRecover_569695, base: "", url: url_WebAppsRecover_569696,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetProductionSlotConfig_569707 = ref object of OpenApiRestCall_567666
proc url_WebAppsResetProductionSlotConfig_569709(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetProductionSlotConfig_569708(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569710 = path.getOrDefault("resourceGroupName")
  valid_569710 = validateParameter(valid_569710, JString, required = true,
                                 default = nil)
  if valid_569710 != nil:
    section.add "resourceGroupName", valid_569710
  var valid_569711 = path.getOrDefault("name")
  valid_569711 = validateParameter(valid_569711, JString, required = true,
                                 default = nil)
  if valid_569711 != nil:
    section.add "name", valid_569711
  var valid_569712 = path.getOrDefault("subscriptionId")
  valid_569712 = validateParameter(valid_569712, JString, required = true,
                                 default = nil)
  if valid_569712 != nil:
    section.add "subscriptionId", valid_569712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569713 = query.getOrDefault("api-version")
  valid_569713 = validateParameter(valid_569713, JString, required = true,
                                 default = nil)
  if valid_569713 != nil:
    section.add "api-version", valid_569713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569714: Call_WebAppsResetProductionSlotConfig_569707;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_569714.validator(path, query, header, formData, body)
  let scheme = call_569714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569714.url(scheme.get, call_569714.host, call_569714.base,
                         call_569714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569714, url, valid)

proc call*(call_569715: Call_WebAppsResetProductionSlotConfig_569707;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsResetProductionSlotConfig
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569716 = newJObject()
  var query_569717 = newJObject()
  add(path_569716, "resourceGroupName", newJString(resourceGroupName))
  add(query_569717, "api-version", newJString(apiVersion))
  add(path_569716, "name", newJString(name))
  add(path_569716, "subscriptionId", newJString(subscriptionId))
  result = call_569715.call(path_569716, query_569717, nil, nil, nil)

var webAppsResetProductionSlotConfig* = Call_WebAppsResetProductionSlotConfig_569707(
    name: "webAppsResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_WebAppsResetProductionSlotConfig_569708, base: "",
    url: url_WebAppsResetProductionSlotConfig_569709, schemes: {Scheme.Https})
type
  Call_WebAppsRestart_569718 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestart_569720(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestart_569719(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569721 = path.getOrDefault("resourceGroupName")
  valid_569721 = validateParameter(valid_569721, JString, required = true,
                                 default = nil)
  if valid_569721 != nil:
    section.add "resourceGroupName", valid_569721
  var valid_569722 = path.getOrDefault("name")
  valid_569722 = validateParameter(valid_569722, JString, required = true,
                                 default = nil)
  if valid_569722 != nil:
    section.add "name", valid_569722
  var valid_569723 = path.getOrDefault("subscriptionId")
  valid_569723 = validateParameter(valid_569723, JString, required = true,
                                 default = nil)
  if valid_569723 != nil:
    section.add "subscriptionId", valid_569723
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569724 = query.getOrDefault("api-version")
  valid_569724 = validateParameter(valid_569724, JString, required = true,
                                 default = nil)
  if valid_569724 != nil:
    section.add "api-version", valid_569724
  var valid_569725 = query.getOrDefault("synchronous")
  valid_569725 = validateParameter(valid_569725, JBool, required = false, default = nil)
  if valid_569725 != nil:
    section.add "synchronous", valid_569725
  var valid_569726 = query.getOrDefault("softRestart")
  valid_569726 = validateParameter(valid_569726, JBool, required = false, default = nil)
  if valid_569726 != nil:
    section.add "softRestart", valid_569726
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569727: Call_WebAppsRestart_569718; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_569727.validator(path, query, header, formData, body)
  let scheme = call_569727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569727.url(scheme.get, call_569727.host, call_569727.base,
                         call_569727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569727, url, valid)

proc call*(call_569728: Call_WebAppsRestart_569718; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestart
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_569729 = newJObject()
  var query_569730 = newJObject()
  add(path_569729, "resourceGroupName", newJString(resourceGroupName))
  add(query_569730, "api-version", newJString(apiVersion))
  add(path_569729, "name", newJString(name))
  add(path_569729, "subscriptionId", newJString(subscriptionId))
  add(query_569730, "synchronous", newJBool(synchronous))
  add(query_569730, "softRestart", newJBool(softRestart))
  result = call_569728.call(path_569729, query_569730, nil, nil, nil)

var webAppsRestart* = Call_WebAppsRestart_569718(name: "webAppsRestart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_WebAppsRestart_569719, base: "", url: url_WebAppsRestart_569720,
    schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensions_569731 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSiteExtensions_569733(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensions_569732(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569734 = path.getOrDefault("resourceGroupName")
  valid_569734 = validateParameter(valid_569734, JString, required = true,
                                 default = nil)
  if valid_569734 != nil:
    section.add "resourceGroupName", valid_569734
  var valid_569735 = path.getOrDefault("name")
  valid_569735 = validateParameter(valid_569735, JString, required = true,
                                 default = nil)
  if valid_569735 != nil:
    section.add "name", valid_569735
  var valid_569736 = path.getOrDefault("subscriptionId")
  valid_569736 = validateParameter(valid_569736, JString, required = true,
                                 default = nil)
  if valid_569736 != nil:
    section.add "subscriptionId", valid_569736
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569737 = query.getOrDefault("api-version")
  valid_569737 = validateParameter(valid_569737, JString, required = true,
                                 default = nil)
  if valid_569737 != nil:
    section.add "api-version", valid_569737
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569738: Call_WebAppsListSiteExtensions_569731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  let valid = call_569738.validator(path, query, header, formData, body)
  let scheme = call_569738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569738.url(scheme.get, call_569738.host, call_569738.base,
                         call_569738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569738, url, valid)

proc call*(call_569739: Call_WebAppsListSiteExtensions_569731;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensions
  ## Get list of site extensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569740 = newJObject()
  var query_569741 = newJObject()
  add(path_569740, "resourceGroupName", newJString(resourceGroupName))
  add(query_569741, "api-version", newJString(apiVersion))
  add(path_569740, "name", newJString(name))
  add(path_569740, "subscriptionId", newJString(subscriptionId))
  result = call_569739.call(path_569740, query_569741, nil, nil, nil)

var webAppsListSiteExtensions* = Call_WebAppsListSiteExtensions_569731(
    name: "webAppsListSiteExtensions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    validator: validate_WebAppsListSiteExtensions_569732, base: "",
    url: url_WebAppsListSiteExtensions_569733, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtension_569754 = ref object of OpenApiRestCall_567666
proc url_WebAppsInstallSiteExtension_569756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtension_569755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569757 = path.getOrDefault("resourceGroupName")
  valid_569757 = validateParameter(valid_569757, JString, required = true,
                                 default = nil)
  if valid_569757 != nil:
    section.add "resourceGroupName", valid_569757
  var valid_569758 = path.getOrDefault("name")
  valid_569758 = validateParameter(valid_569758, JString, required = true,
                                 default = nil)
  if valid_569758 != nil:
    section.add "name", valid_569758
  var valid_569759 = path.getOrDefault("subscriptionId")
  valid_569759 = validateParameter(valid_569759, JString, required = true,
                                 default = nil)
  if valid_569759 != nil:
    section.add "subscriptionId", valid_569759
  var valid_569760 = path.getOrDefault("siteExtensionId")
  valid_569760 = validateParameter(valid_569760, JString, required = true,
                                 default = nil)
  if valid_569760 != nil:
    section.add "siteExtensionId", valid_569760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569761 = query.getOrDefault("api-version")
  valid_569761 = validateParameter(valid_569761, JString, required = true,
                                 default = nil)
  if valid_569761 != nil:
    section.add "api-version", valid_569761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569762: Call_WebAppsInstallSiteExtension_569754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_569762.validator(path, query, header, formData, body)
  let scheme = call_569762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569762.url(scheme.get, call_569762.host, call_569762.base,
                         call_569762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569762, url, valid)

proc call*(call_569763: Call_WebAppsInstallSiteExtension_569754;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtension
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_569764 = newJObject()
  var query_569765 = newJObject()
  add(path_569764, "resourceGroupName", newJString(resourceGroupName))
  add(query_569765, "api-version", newJString(apiVersion))
  add(path_569764, "name", newJString(name))
  add(path_569764, "subscriptionId", newJString(subscriptionId))
  add(path_569764, "siteExtensionId", newJString(siteExtensionId))
  result = call_569763.call(path_569764, query_569765, nil, nil, nil)

var webAppsInstallSiteExtension* = Call_WebAppsInstallSiteExtension_569754(
    name: "webAppsInstallSiteExtension", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtension_569755, base: "",
    url: url_WebAppsInstallSiteExtension_569756, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtension_569742 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSiteExtension_569744(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtension_569743(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569745 = path.getOrDefault("resourceGroupName")
  valid_569745 = validateParameter(valid_569745, JString, required = true,
                                 default = nil)
  if valid_569745 != nil:
    section.add "resourceGroupName", valid_569745
  var valid_569746 = path.getOrDefault("name")
  valid_569746 = validateParameter(valid_569746, JString, required = true,
                                 default = nil)
  if valid_569746 != nil:
    section.add "name", valid_569746
  var valid_569747 = path.getOrDefault("subscriptionId")
  valid_569747 = validateParameter(valid_569747, JString, required = true,
                                 default = nil)
  if valid_569747 != nil:
    section.add "subscriptionId", valid_569747
  var valid_569748 = path.getOrDefault("siteExtensionId")
  valid_569748 = validateParameter(valid_569748, JString, required = true,
                                 default = nil)
  if valid_569748 != nil:
    section.add "siteExtensionId", valid_569748
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569749 = query.getOrDefault("api-version")
  valid_569749 = validateParameter(valid_569749, JString, required = true,
                                 default = nil)
  if valid_569749 != nil:
    section.add "api-version", valid_569749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569750: Call_WebAppsGetSiteExtension_569742; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_569750.validator(path, query, header, formData, body)
  let scheme = call_569750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569750.url(scheme.get, call_569750.host, call_569750.base,
                         call_569750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569750, url, valid)

proc call*(call_569751: Call_WebAppsGetSiteExtension_569742;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtension
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_569752 = newJObject()
  var query_569753 = newJObject()
  add(path_569752, "resourceGroupName", newJString(resourceGroupName))
  add(query_569753, "api-version", newJString(apiVersion))
  add(path_569752, "name", newJString(name))
  add(path_569752, "subscriptionId", newJString(subscriptionId))
  add(path_569752, "siteExtensionId", newJString(siteExtensionId))
  result = call_569751.call(path_569752, query_569753, nil, nil, nil)

var webAppsGetSiteExtension* = Call_WebAppsGetSiteExtension_569742(
    name: "webAppsGetSiteExtension", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtension_569743, base: "",
    url: url_WebAppsGetSiteExtension_569744, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtension_569766 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSiteExtension_569768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtension_569767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569769 = path.getOrDefault("resourceGroupName")
  valid_569769 = validateParameter(valid_569769, JString, required = true,
                                 default = nil)
  if valid_569769 != nil:
    section.add "resourceGroupName", valid_569769
  var valid_569770 = path.getOrDefault("name")
  valid_569770 = validateParameter(valid_569770, JString, required = true,
                                 default = nil)
  if valid_569770 != nil:
    section.add "name", valid_569770
  var valid_569771 = path.getOrDefault("subscriptionId")
  valid_569771 = validateParameter(valid_569771, JString, required = true,
                                 default = nil)
  if valid_569771 != nil:
    section.add "subscriptionId", valid_569771
  var valid_569772 = path.getOrDefault("siteExtensionId")
  valid_569772 = validateParameter(valid_569772, JString, required = true,
                                 default = nil)
  if valid_569772 != nil:
    section.add "siteExtensionId", valid_569772
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569773 = query.getOrDefault("api-version")
  valid_569773 = validateParameter(valid_569773, JString, required = true,
                                 default = nil)
  if valid_569773 != nil:
    section.add "api-version", valid_569773
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569774: Call_WebAppsDeleteSiteExtension_569766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_569774.validator(path, query, header, formData, body)
  let scheme = call_569774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569774.url(scheme.get, call_569774.host, call_569774.base,
                         call_569774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569774, url, valid)

proc call*(call_569775: Call_WebAppsDeleteSiteExtension_569766;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtension
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_569776 = newJObject()
  var query_569777 = newJObject()
  add(path_569776, "resourceGroupName", newJString(resourceGroupName))
  add(query_569777, "api-version", newJString(apiVersion))
  add(path_569776, "name", newJString(name))
  add(path_569776, "subscriptionId", newJString(subscriptionId))
  add(path_569776, "siteExtensionId", newJString(siteExtensionId))
  result = call_569775.call(path_569776, query_569777, nil, nil, nil)

var webAppsDeleteSiteExtension* = Call_WebAppsDeleteSiteExtension_569766(
    name: "webAppsDeleteSiteExtension", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtension_569767, base: "",
    url: url_WebAppsDeleteSiteExtension_569768, schemes: {Scheme.Https})
type
  Call_WebAppsListSlots_569778 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlots_569780(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlots_569779(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets an app's deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569781 = path.getOrDefault("resourceGroupName")
  valid_569781 = validateParameter(valid_569781, JString, required = true,
                                 default = nil)
  if valid_569781 != nil:
    section.add "resourceGroupName", valid_569781
  var valid_569782 = path.getOrDefault("name")
  valid_569782 = validateParameter(valid_569782, JString, required = true,
                                 default = nil)
  if valid_569782 != nil:
    section.add "name", valid_569782
  var valid_569783 = path.getOrDefault("subscriptionId")
  valid_569783 = validateParameter(valid_569783, JString, required = true,
                                 default = nil)
  if valid_569783 != nil:
    section.add "subscriptionId", valid_569783
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569784 = query.getOrDefault("api-version")
  valid_569784 = validateParameter(valid_569784, JString, required = true,
                                 default = nil)
  if valid_569784 != nil:
    section.add "api-version", valid_569784
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569785: Call_WebAppsListSlots_569778; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets an app's deployment slots.
  ## 
  let valid = call_569785.validator(path, query, header, formData, body)
  let scheme = call_569785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569785.url(scheme.get, call_569785.host, call_569785.base,
                         call_569785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569785, url, valid)

proc call*(call_569786: Call_WebAppsListSlots_569778; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListSlots
  ## Gets an app's deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569787 = newJObject()
  var query_569788 = newJObject()
  add(path_569787, "resourceGroupName", newJString(resourceGroupName))
  add(query_569788, "api-version", newJString(apiVersion))
  add(path_569787, "name", newJString(name))
  add(path_569787, "subscriptionId", newJString(subscriptionId))
  result = call_569786.call(path_569787, query_569788, nil, nil, nil)

var webAppsListSlots* = Call_WebAppsListSlots_569778(name: "webAppsListSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_WebAppsListSlots_569779, base: "",
    url: url_WebAppsListSlots_569780, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSlot_569801 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSlot_569803(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSlot_569802(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569804 = path.getOrDefault("resourceGroupName")
  valid_569804 = validateParameter(valid_569804, JString, required = true,
                                 default = nil)
  if valid_569804 != nil:
    section.add "resourceGroupName", valid_569804
  var valid_569805 = path.getOrDefault("name")
  valid_569805 = validateParameter(valid_569805, JString, required = true,
                                 default = nil)
  if valid_569805 != nil:
    section.add "name", valid_569805
  var valid_569806 = path.getOrDefault("slot")
  valid_569806 = validateParameter(valid_569806, JString, required = true,
                                 default = nil)
  if valid_569806 != nil:
    section.add "slot", valid_569806
  var valid_569807 = path.getOrDefault("subscriptionId")
  valid_569807 = validateParameter(valid_569807, JString, required = true,
                                 default = nil)
  if valid_569807 != nil:
    section.add "subscriptionId", valid_569807
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JBool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JBool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JBool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name.
  section = newJObject()
  var valid_569808 = query.getOrDefault("skipDnsRegistration")
  valid_569808 = validateParameter(valid_569808, JBool, required = false, default = nil)
  if valid_569808 != nil:
    section.add "skipDnsRegistration", valid_569808
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569809 = query.getOrDefault("api-version")
  valid_569809 = validateParameter(valid_569809, JString, required = true,
                                 default = nil)
  if valid_569809 != nil:
    section.add "api-version", valid_569809
  var valid_569810 = query.getOrDefault("skipCustomDomainVerification")
  valid_569810 = validateParameter(valid_569810, JBool, required = false, default = nil)
  if valid_569810 != nil:
    section.add "skipCustomDomainVerification", valid_569810
  var valid_569811 = query.getOrDefault("forceDnsRegistration")
  valid_569811 = validateParameter(valid_569811, JBool, required = false, default = nil)
  if valid_569811 != nil:
    section.add "forceDnsRegistration", valid_569811
  var valid_569812 = query.getOrDefault("ttlInSeconds")
  valid_569812 = validateParameter(valid_569812, JString, required = false,
                                 default = nil)
  if valid_569812 != nil:
    section.add "ttlInSeconds", valid_569812
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569814: Call_WebAppsCreateOrUpdateSlot_569801; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_569814.validator(path, query, header, formData, body)
  let scheme = call_569814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569814.url(scheme.get, call_569814.host, call_569814.base,
                         call_569814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569814, url, valid)

proc call*(call_569815: Call_WebAppsCreateOrUpdateSlot_569801;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: bool = false;
          skipCustomDomainVerification: bool = false;
          forceDnsRegistration: bool = false; ttlInSeconds: string = ""): Recallable =
  ## webAppsCreateOrUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   skipCustomDomainVerification: bool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   forceDnsRegistration: bool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name.
  var path_569816 = newJObject()
  var query_569817 = newJObject()
  var body_569818 = newJObject()
  if siteEnvelope != nil:
    body_569818 = siteEnvelope
  add(path_569816, "resourceGroupName", newJString(resourceGroupName))
  add(query_569817, "skipDnsRegistration", newJBool(skipDnsRegistration))
  add(query_569817, "api-version", newJString(apiVersion))
  add(path_569816, "name", newJString(name))
  add(query_569817, "skipCustomDomainVerification",
      newJBool(skipCustomDomainVerification))
  add(path_569816, "slot", newJString(slot))
  add(path_569816, "subscriptionId", newJString(subscriptionId))
  add(query_569817, "forceDnsRegistration", newJBool(forceDnsRegistration))
  add(query_569817, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_569815.call(path_569816, query_569817, nil, nil, body_569818)

var webAppsCreateOrUpdateSlot* = Call_WebAppsCreateOrUpdateSlot_569801(
    name: "webAppsCreateOrUpdateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsCreateOrUpdateSlot_569802, base: "",
    url: url_WebAppsCreateOrUpdateSlot_569803, schemes: {Scheme.Https})
type
  Call_WebAppsGetSlot_569789 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSlot_569791(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSlot_569790(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569792 = path.getOrDefault("resourceGroupName")
  valid_569792 = validateParameter(valid_569792, JString, required = true,
                                 default = nil)
  if valid_569792 != nil:
    section.add "resourceGroupName", valid_569792
  var valid_569793 = path.getOrDefault("name")
  valid_569793 = validateParameter(valid_569793, JString, required = true,
                                 default = nil)
  if valid_569793 != nil:
    section.add "name", valid_569793
  var valid_569794 = path.getOrDefault("slot")
  valid_569794 = validateParameter(valid_569794, JString, required = true,
                                 default = nil)
  if valid_569794 != nil:
    section.add "slot", valid_569794
  var valid_569795 = path.getOrDefault("subscriptionId")
  valid_569795 = validateParameter(valid_569795, JString, required = true,
                                 default = nil)
  if valid_569795 != nil:
    section.add "subscriptionId", valid_569795
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569796 = query.getOrDefault("api-version")
  valid_569796 = validateParameter(valid_569796, JString, required = true,
                                 default = nil)
  if valid_569796 != nil:
    section.add "api-version", valid_569796
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569797: Call_WebAppsGetSlot_569789; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_569797.validator(path, query, header, formData, body)
  let scheme = call_569797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569797.url(scheme.get, call_569797.host, call_569797.base,
                         call_569797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569797, url, valid)

proc call*(call_569798: Call_WebAppsGetSlot_569789; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetSlot
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569799 = newJObject()
  var query_569800 = newJObject()
  add(path_569799, "resourceGroupName", newJString(resourceGroupName))
  add(query_569800, "api-version", newJString(apiVersion))
  add(path_569799, "name", newJString(name))
  add(path_569799, "slot", newJString(slot))
  add(path_569799, "subscriptionId", newJString(subscriptionId))
  result = call_569798.call(path_569799, query_569800, nil, nil, nil)

var webAppsGetSlot* = Call_WebAppsGetSlot_569789(name: "webAppsGetSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsGetSlot_569790, base: "", url: url_WebAppsGetSlot_569791,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlot_569834 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSlot_569836(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlot_569835(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569837 = path.getOrDefault("resourceGroupName")
  valid_569837 = validateParameter(valid_569837, JString, required = true,
                                 default = nil)
  if valid_569837 != nil:
    section.add "resourceGroupName", valid_569837
  var valid_569838 = path.getOrDefault("name")
  valid_569838 = validateParameter(valid_569838, JString, required = true,
                                 default = nil)
  if valid_569838 != nil:
    section.add "name", valid_569838
  var valid_569839 = path.getOrDefault("slot")
  valid_569839 = validateParameter(valid_569839, JString, required = true,
                                 default = nil)
  if valid_569839 != nil:
    section.add "slot", valid_569839
  var valid_569840 = path.getOrDefault("subscriptionId")
  valid_569840 = validateParameter(valid_569840, JString, required = true,
                                 default = nil)
  if valid_569840 != nil:
    section.add "subscriptionId", valid_569840
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JBool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JBool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JBool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name.
  section = newJObject()
  var valid_569841 = query.getOrDefault("skipDnsRegistration")
  valid_569841 = validateParameter(valid_569841, JBool, required = false, default = nil)
  if valid_569841 != nil:
    section.add "skipDnsRegistration", valid_569841
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569842 = query.getOrDefault("api-version")
  valid_569842 = validateParameter(valid_569842, JString, required = true,
                                 default = nil)
  if valid_569842 != nil:
    section.add "api-version", valid_569842
  var valid_569843 = query.getOrDefault("skipCustomDomainVerification")
  valid_569843 = validateParameter(valid_569843, JBool, required = false, default = nil)
  if valid_569843 != nil:
    section.add "skipCustomDomainVerification", valid_569843
  var valid_569844 = query.getOrDefault("forceDnsRegistration")
  valid_569844 = validateParameter(valid_569844, JBool, required = false, default = nil)
  if valid_569844 != nil:
    section.add "forceDnsRegistration", valid_569844
  var valid_569845 = query.getOrDefault("ttlInSeconds")
  valid_569845 = validateParameter(valid_569845, JString, required = false,
                                 default = nil)
  if valid_569845 != nil:
    section.add "ttlInSeconds", valid_569845
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569847: Call_WebAppsUpdateSlot_569834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_569847.validator(path, query, header, formData, body)
  let scheme = call_569847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569847.url(scheme.get, call_569847.host, call_569847.base,
                         call_569847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569847, url, valid)

proc call*(call_569848: Call_WebAppsUpdateSlot_569834; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; skipDnsRegistration: bool = false;
          skipCustomDomainVerification: bool = false;
          forceDnsRegistration: bool = false; ttlInSeconds: string = ""): Recallable =
  ## webAppsUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   skipCustomDomainVerification: bool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   forceDnsRegistration: bool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name.
  var path_569849 = newJObject()
  var query_569850 = newJObject()
  var body_569851 = newJObject()
  if siteEnvelope != nil:
    body_569851 = siteEnvelope
  add(path_569849, "resourceGroupName", newJString(resourceGroupName))
  add(query_569850, "skipDnsRegistration", newJBool(skipDnsRegistration))
  add(query_569850, "api-version", newJString(apiVersion))
  add(path_569849, "name", newJString(name))
  add(query_569850, "skipCustomDomainVerification",
      newJBool(skipCustomDomainVerification))
  add(path_569849, "slot", newJString(slot))
  add(path_569849, "subscriptionId", newJString(subscriptionId))
  add(query_569850, "forceDnsRegistration", newJBool(forceDnsRegistration))
  add(query_569850, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_569848.call(path_569849, query_569850, nil, nil, body_569851)

var webAppsUpdateSlot* = Call_WebAppsUpdateSlot_569834(name: "webAppsUpdateSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsUpdateSlot_569835, base: "",
    url: url_WebAppsUpdateSlot_569836, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSlot_569819 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSlot_569821(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSlot_569820(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569822 = path.getOrDefault("resourceGroupName")
  valid_569822 = validateParameter(valid_569822, JString, required = true,
                                 default = nil)
  if valid_569822 != nil:
    section.add "resourceGroupName", valid_569822
  var valid_569823 = path.getOrDefault("name")
  valid_569823 = validateParameter(valid_569823, JString, required = true,
                                 default = nil)
  if valid_569823 != nil:
    section.add "name", valid_569823
  var valid_569824 = path.getOrDefault("slot")
  valid_569824 = validateParameter(valid_569824, JString, required = true,
                                 default = nil)
  if valid_569824 != nil:
    section.add "slot", valid_569824
  var valid_569825 = path.getOrDefault("subscriptionId")
  valid_569825 = validateParameter(valid_569825, JString, required = true,
                                 default = nil)
  if valid_569825 != nil:
    section.add "subscriptionId", valid_569825
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JBool
  ##                      : If true, DNS registration is skipped.
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  var valid_569826 = query.getOrDefault("skipDnsRegistration")
  valid_569826 = validateParameter(valid_569826, JBool, required = false, default = nil)
  if valid_569826 != nil:
    section.add "skipDnsRegistration", valid_569826
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569827 = query.getOrDefault("api-version")
  valid_569827 = validateParameter(valid_569827, JString, required = true,
                                 default = nil)
  if valid_569827 != nil:
    section.add "api-version", valid_569827
  var valid_569828 = query.getOrDefault("deleteMetrics")
  valid_569828 = validateParameter(valid_569828, JBool, required = false, default = nil)
  if valid_569828 != nil:
    section.add "deleteMetrics", valid_569828
  var valid_569829 = query.getOrDefault("deleteEmptyServerFarm")
  valid_569829 = validateParameter(valid_569829, JBool, required = false, default = nil)
  if valid_569829 != nil:
    section.add "deleteEmptyServerFarm", valid_569829
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569830: Call_WebAppsDeleteSlot_569819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_569830.validator(path, query, header, formData, body)
  let scheme = call_569830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569830.url(scheme.get, call_569830.host, call_569830.base,
                         call_569830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569830, url, valid)

proc call*(call_569831: Call_WebAppsDeleteSlot_569819; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: bool = false; deleteMetrics: bool = false;
          deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDeleteSlot
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true, DNS registration is skipped.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   slot: string (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_569832 = newJObject()
  var query_569833 = newJObject()
  add(path_569832, "resourceGroupName", newJString(resourceGroupName))
  add(query_569833, "skipDnsRegistration", newJBool(skipDnsRegistration))
  add(query_569833, "api-version", newJString(apiVersion))
  add(path_569832, "name", newJString(name))
  add(path_569832, "slot", newJString(slot))
  add(path_569832, "subscriptionId", newJString(subscriptionId))
  add(query_569833, "deleteMetrics", newJBool(deleteMetrics))
  add(query_569833, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_569831.call(path_569832, query_569833, nil, nil, nil)

var webAppsDeleteSlot* = Call_WebAppsDeleteSlot_569819(name: "webAppsDeleteSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsDeleteSlot_569820, base: "",
    url: url_WebAppsDeleteSlot_569821, schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostnameSlot_569852 = ref object of OpenApiRestCall_567666
proc url_WebAppsAnalyzeCustomHostnameSlot_569854(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostnameSlot_569853(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569855 = path.getOrDefault("resourceGroupName")
  valid_569855 = validateParameter(valid_569855, JString, required = true,
                                 default = nil)
  if valid_569855 != nil:
    section.add "resourceGroupName", valid_569855
  var valid_569856 = path.getOrDefault("name")
  valid_569856 = validateParameter(valid_569856, JString, required = true,
                                 default = nil)
  if valid_569856 != nil:
    section.add "name", valid_569856
  var valid_569857 = path.getOrDefault("slot")
  valid_569857 = validateParameter(valid_569857, JString, required = true,
                                 default = nil)
  if valid_569857 != nil:
    section.add "slot", valid_569857
  var valid_569858 = path.getOrDefault("subscriptionId")
  valid_569858 = validateParameter(valid_569858, JString, required = true,
                                 default = nil)
  if valid_569858 != nil:
    section.add "subscriptionId", valid_569858
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569859 = query.getOrDefault("api-version")
  valid_569859 = validateParameter(valid_569859, JString, required = true,
                                 default = nil)
  if valid_569859 != nil:
    section.add "api-version", valid_569859
  var valid_569860 = query.getOrDefault("hostName")
  valid_569860 = validateParameter(valid_569860, JString, required = false,
                                 default = nil)
  if valid_569860 != nil:
    section.add "hostName", valid_569860
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569861: Call_WebAppsAnalyzeCustomHostnameSlot_569852;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_569861.validator(path, query, header, formData, body)
  let scheme = call_569861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569861.url(scheme.get, call_569861.host, call_569861.base,
                         call_569861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569861, url, valid)

proc call*(call_569862: Call_WebAppsAnalyzeCustomHostnameSlot_569852;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostnameSlot
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569863 = newJObject()
  var query_569864 = newJObject()
  add(path_569863, "resourceGroupName", newJString(resourceGroupName))
  add(query_569864, "api-version", newJString(apiVersion))
  add(path_569863, "name", newJString(name))
  add(query_569864, "hostName", newJString(hostName))
  add(path_569863, "slot", newJString(slot))
  add(path_569863, "subscriptionId", newJString(subscriptionId))
  result = call_569862.call(path_569863, query_569864, nil, nil, nil)

var webAppsAnalyzeCustomHostnameSlot* = Call_WebAppsAnalyzeCustomHostnameSlot_569852(
    name: "webAppsAnalyzeCustomHostnameSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostnameSlot_569853, base: "",
    url: url_WebAppsAnalyzeCustomHostnameSlot_569854, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigurationSlot_569865 = ref object of OpenApiRestCall_567666
proc url_WebAppsApplySlotConfigurationSlot_569867(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigurationSlot_569866(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569868 = path.getOrDefault("resourceGroupName")
  valid_569868 = validateParameter(valid_569868, JString, required = true,
                                 default = nil)
  if valid_569868 != nil:
    section.add "resourceGroupName", valid_569868
  var valid_569869 = path.getOrDefault("name")
  valid_569869 = validateParameter(valid_569869, JString, required = true,
                                 default = nil)
  if valid_569869 != nil:
    section.add "name", valid_569869
  var valid_569870 = path.getOrDefault("slot")
  valid_569870 = validateParameter(valid_569870, JString, required = true,
                                 default = nil)
  if valid_569870 != nil:
    section.add "slot", valid_569870
  var valid_569871 = path.getOrDefault("subscriptionId")
  valid_569871 = validateParameter(valid_569871, JString, required = true,
                                 default = nil)
  if valid_569871 != nil:
    section.add "subscriptionId", valid_569871
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569872 = query.getOrDefault("api-version")
  valid_569872 = validateParameter(valid_569872, JString, required = true,
                                 default = nil)
  if valid_569872 != nil:
    section.add "api-version", valid_569872
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569874: Call_WebAppsApplySlotConfigurationSlot_569865;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_569874.validator(path, query, header, formData, body)
  let scheme = call_569874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569874.url(scheme.get, call_569874.host, call_569874.base,
                         call_569874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569874, url, valid)

proc call*(call_569875: Call_WebAppsApplySlotConfigurationSlot_569865;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigurationSlot
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_569876 = newJObject()
  var query_569877 = newJObject()
  var body_569878 = newJObject()
  add(path_569876, "resourceGroupName", newJString(resourceGroupName))
  add(query_569877, "api-version", newJString(apiVersion))
  add(path_569876, "name", newJString(name))
  add(path_569876, "slot", newJString(slot))
  add(path_569876, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_569878 = slotSwapEntity
  result = call_569875.call(path_569876, query_569877, nil, nil, body_569878)

var webAppsApplySlotConfigurationSlot* = Call_WebAppsApplySlotConfigurationSlot_569865(
    name: "webAppsApplySlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigurationSlot_569866, base: "",
    url: url_WebAppsApplySlotConfigurationSlot_569867, schemes: {Scheme.Https})
type
  Call_WebAppsBackupSlot_569879 = ref object of OpenApiRestCall_567666
proc url_WebAppsBackupSlot_569881(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackupSlot_569880(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569882 = path.getOrDefault("resourceGroupName")
  valid_569882 = validateParameter(valid_569882, JString, required = true,
                                 default = nil)
  if valid_569882 != nil:
    section.add "resourceGroupName", valid_569882
  var valid_569883 = path.getOrDefault("name")
  valid_569883 = validateParameter(valid_569883, JString, required = true,
                                 default = nil)
  if valid_569883 != nil:
    section.add "name", valid_569883
  var valid_569884 = path.getOrDefault("slot")
  valid_569884 = validateParameter(valid_569884, JString, required = true,
                                 default = nil)
  if valid_569884 != nil:
    section.add "slot", valid_569884
  var valid_569885 = path.getOrDefault("subscriptionId")
  valid_569885 = validateParameter(valid_569885, JString, required = true,
                                 default = nil)
  if valid_569885 != nil:
    section.add "subscriptionId", valid_569885
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569886 = query.getOrDefault("api-version")
  valid_569886 = validateParameter(valid_569886, JString, required = true,
                                 default = nil)
  if valid_569886 != nil:
    section.add "api-version", valid_569886
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569888: Call_WebAppsBackupSlot_569879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_569888.validator(path, query, header, formData, body)
  let scheme = call_569888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569888.url(scheme.get, call_569888.host, call_569888.base,
                         call_569888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569888, url, valid)

proc call*(call_569889: Call_WebAppsBackupSlot_569879; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode): Recallable =
  ## webAppsBackupSlot
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_569890 = newJObject()
  var query_569891 = newJObject()
  var body_569892 = newJObject()
  add(path_569890, "resourceGroupName", newJString(resourceGroupName))
  add(query_569891, "api-version", newJString(apiVersion))
  add(path_569890, "name", newJString(name))
  add(path_569890, "slot", newJString(slot))
  add(path_569890, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569892 = request
  result = call_569889.call(path_569890, query_569891, nil, nil, body_569892)

var webAppsBackupSlot* = Call_WebAppsBackupSlot_569879(name: "webAppsBackupSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_WebAppsBackupSlot_569880, base: "",
    url: url_WebAppsBackupSlot_569881, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupsSlot_569893 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackupsSlot_569895(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupsSlot_569894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569896 = path.getOrDefault("resourceGroupName")
  valid_569896 = validateParameter(valid_569896, JString, required = true,
                                 default = nil)
  if valid_569896 != nil:
    section.add "resourceGroupName", valid_569896
  var valid_569897 = path.getOrDefault("name")
  valid_569897 = validateParameter(valid_569897, JString, required = true,
                                 default = nil)
  if valid_569897 != nil:
    section.add "name", valid_569897
  var valid_569898 = path.getOrDefault("slot")
  valid_569898 = validateParameter(valid_569898, JString, required = true,
                                 default = nil)
  if valid_569898 != nil:
    section.add "slot", valid_569898
  var valid_569899 = path.getOrDefault("subscriptionId")
  valid_569899 = validateParameter(valid_569899, JString, required = true,
                                 default = nil)
  if valid_569899 != nil:
    section.add "subscriptionId", valid_569899
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569900 = query.getOrDefault("api-version")
  valid_569900 = validateParameter(valid_569900, JString, required = true,
                                 default = nil)
  if valid_569900 != nil:
    section.add "api-version", valid_569900
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569901: Call_WebAppsListBackupsSlot_569893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_569901.validator(path, query, header, formData, body)
  let scheme = call_569901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569901.url(scheme.get, call_569901.host, call_569901.base,
                         call_569901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569901, url, valid)

proc call*(call_569902: Call_WebAppsListBackupsSlot_569893;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListBackupsSlot
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569903 = newJObject()
  var query_569904 = newJObject()
  add(path_569903, "resourceGroupName", newJString(resourceGroupName))
  add(query_569904, "api-version", newJString(apiVersion))
  add(path_569903, "name", newJString(name))
  add(path_569903, "slot", newJString(slot))
  add(path_569903, "subscriptionId", newJString(subscriptionId))
  result = call_569902.call(path_569903, query_569904, nil, nil, nil)

var webAppsListBackupsSlot* = Call_WebAppsListBackupsSlot_569893(
    name: "webAppsListBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_WebAppsListBackupsSlot_569894, base: "",
    url: url_WebAppsListBackupsSlot_569895, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverRestoreSlot_569905 = ref object of OpenApiRestCall_567666
proc url_WebAppsDiscoverRestoreSlot_569907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverRestoreSlot_569906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569908 = path.getOrDefault("resourceGroupName")
  valid_569908 = validateParameter(valid_569908, JString, required = true,
                                 default = nil)
  if valid_569908 != nil:
    section.add "resourceGroupName", valid_569908
  var valid_569909 = path.getOrDefault("name")
  valid_569909 = validateParameter(valid_569909, JString, required = true,
                                 default = nil)
  if valid_569909 != nil:
    section.add "name", valid_569909
  var valid_569910 = path.getOrDefault("slot")
  valid_569910 = validateParameter(valid_569910, JString, required = true,
                                 default = nil)
  if valid_569910 != nil:
    section.add "slot", valid_569910
  var valid_569911 = path.getOrDefault("subscriptionId")
  valid_569911 = validateParameter(valid_569911, JString, required = true,
                                 default = nil)
  if valid_569911 != nil:
    section.add "subscriptionId", valid_569911
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569912 = query.getOrDefault("api-version")
  valid_569912 = validateParameter(valid_569912, JString, required = true,
                                 default = nil)
  if valid_569912 != nil:
    section.add "api-version", valid_569912
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569914: Call_WebAppsDiscoverRestoreSlot_569905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  let valid = call_569914.validator(path, query, header, formData, body)
  let scheme = call_569914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569914.url(scheme.get, call_569914.host, call_569914.base,
                         call_569914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569914, url, valid)

proc call*(call_569915: Call_WebAppsDiscoverRestoreSlot_569905;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverRestoreSlot
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_569916 = newJObject()
  var query_569917 = newJObject()
  var body_569918 = newJObject()
  add(path_569916, "resourceGroupName", newJString(resourceGroupName))
  add(query_569917, "api-version", newJString(apiVersion))
  add(path_569916, "name", newJString(name))
  add(path_569916, "slot", newJString(slot))
  add(path_569916, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569918 = request
  result = call_569915.call(path_569916, query_569917, nil, nil, body_569918)

var webAppsDiscoverRestoreSlot* = Call_WebAppsDiscoverRestoreSlot_569905(
    name: "webAppsDiscoverRestoreSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
    validator: validate_WebAppsDiscoverRestoreSlot_569906, base: "",
    url: url_WebAppsDiscoverRestoreSlot_569907, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatusSlot_569919 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupStatusSlot_569921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatusSlot_569920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569922 = path.getOrDefault("resourceGroupName")
  valid_569922 = validateParameter(valid_569922, JString, required = true,
                                 default = nil)
  if valid_569922 != nil:
    section.add "resourceGroupName", valid_569922
  var valid_569923 = path.getOrDefault("name")
  valid_569923 = validateParameter(valid_569923, JString, required = true,
                                 default = nil)
  if valid_569923 != nil:
    section.add "name", valid_569923
  var valid_569924 = path.getOrDefault("slot")
  valid_569924 = validateParameter(valid_569924, JString, required = true,
                                 default = nil)
  if valid_569924 != nil:
    section.add "slot", valid_569924
  var valid_569925 = path.getOrDefault("subscriptionId")
  valid_569925 = validateParameter(valid_569925, JString, required = true,
                                 default = nil)
  if valid_569925 != nil:
    section.add "subscriptionId", valid_569925
  var valid_569926 = path.getOrDefault("backupId")
  valid_569926 = validateParameter(valid_569926, JString, required = true,
                                 default = nil)
  if valid_569926 != nil:
    section.add "backupId", valid_569926
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569927 = query.getOrDefault("api-version")
  valid_569927 = validateParameter(valid_569927, JString, required = true,
                                 default = nil)
  if valid_569927 != nil:
    section.add "api-version", valid_569927
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569928: Call_WebAppsGetBackupStatusSlot_569919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_569928.validator(path, query, header, formData, body)
  let scheme = call_569928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569928.url(scheme.get, call_569928.host, call_569928.base,
                         call_569928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569928, url, valid)

proc call*(call_569929: Call_WebAppsGetBackupStatusSlot_569919;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatusSlot
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_569930 = newJObject()
  var query_569931 = newJObject()
  add(path_569930, "resourceGroupName", newJString(resourceGroupName))
  add(query_569931, "api-version", newJString(apiVersion))
  add(path_569930, "name", newJString(name))
  add(path_569930, "slot", newJString(slot))
  add(path_569930, "subscriptionId", newJString(subscriptionId))
  add(path_569930, "backupId", newJString(backupId))
  result = call_569929.call(path_569930, query_569931, nil, nil, nil)

var webAppsGetBackupStatusSlot* = Call_WebAppsGetBackupStatusSlot_569919(
    name: "webAppsGetBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatusSlot_569920, base: "",
    url: url_WebAppsGetBackupStatusSlot_569921, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupSlot_569932 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackupSlot_569934(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupSlot_569933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569935 = path.getOrDefault("resourceGroupName")
  valid_569935 = validateParameter(valid_569935, JString, required = true,
                                 default = nil)
  if valid_569935 != nil:
    section.add "resourceGroupName", valid_569935
  var valid_569936 = path.getOrDefault("name")
  valid_569936 = validateParameter(valid_569936, JString, required = true,
                                 default = nil)
  if valid_569936 != nil:
    section.add "name", valid_569936
  var valid_569937 = path.getOrDefault("slot")
  valid_569937 = validateParameter(valid_569937, JString, required = true,
                                 default = nil)
  if valid_569937 != nil:
    section.add "slot", valid_569937
  var valid_569938 = path.getOrDefault("subscriptionId")
  valid_569938 = validateParameter(valid_569938, JString, required = true,
                                 default = nil)
  if valid_569938 != nil:
    section.add "subscriptionId", valid_569938
  var valid_569939 = path.getOrDefault("backupId")
  valid_569939 = validateParameter(valid_569939, JString, required = true,
                                 default = nil)
  if valid_569939 != nil:
    section.add "backupId", valid_569939
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569940 = query.getOrDefault("api-version")
  valid_569940 = validateParameter(valid_569940, JString, required = true,
                                 default = nil)
  if valid_569940 != nil:
    section.add "api-version", valid_569940
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569941: Call_WebAppsDeleteBackupSlot_569932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_569941.validator(path, query, header, formData, body)
  let scheme = call_569941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569941.url(scheme.get, call_569941.host, call_569941.base,
                         call_569941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569941, url, valid)

proc call*(call_569942: Call_WebAppsDeleteBackupSlot_569932;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackupSlot
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_569943 = newJObject()
  var query_569944 = newJObject()
  add(path_569943, "resourceGroupName", newJString(resourceGroupName))
  add(query_569944, "api-version", newJString(apiVersion))
  add(path_569943, "name", newJString(name))
  add(path_569943, "slot", newJString(slot))
  add(path_569943, "subscriptionId", newJString(subscriptionId))
  add(path_569943, "backupId", newJString(backupId))
  result = call_569942.call(path_569943, query_569944, nil, nil, nil)

var webAppsDeleteBackupSlot* = Call_WebAppsDeleteBackupSlot_569932(
    name: "webAppsDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackupSlot_569933, base: "",
    url: url_WebAppsDeleteBackupSlot_569934, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecretsSlot_569945 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackupStatusSecretsSlot_569947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecretsSlot_569946(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569948 = path.getOrDefault("resourceGroupName")
  valid_569948 = validateParameter(valid_569948, JString, required = true,
                                 default = nil)
  if valid_569948 != nil:
    section.add "resourceGroupName", valid_569948
  var valid_569949 = path.getOrDefault("name")
  valid_569949 = validateParameter(valid_569949, JString, required = true,
                                 default = nil)
  if valid_569949 != nil:
    section.add "name", valid_569949
  var valid_569950 = path.getOrDefault("slot")
  valid_569950 = validateParameter(valid_569950, JString, required = true,
                                 default = nil)
  if valid_569950 != nil:
    section.add "slot", valid_569950
  var valid_569951 = path.getOrDefault("subscriptionId")
  valid_569951 = validateParameter(valid_569951, JString, required = true,
                                 default = nil)
  if valid_569951 != nil:
    section.add "subscriptionId", valid_569951
  var valid_569952 = path.getOrDefault("backupId")
  valid_569952 = validateParameter(valid_569952, JString, required = true,
                                 default = nil)
  if valid_569952 != nil:
    section.add "backupId", valid_569952
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569953 = query.getOrDefault("api-version")
  valid_569953 = validateParameter(valid_569953, JString, required = true,
                                 default = nil)
  if valid_569953 != nil:
    section.add "api-version", valid_569953
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569955: Call_WebAppsListBackupStatusSecretsSlot_569945;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_569955.validator(path, query, header, formData, body)
  let scheme = call_569955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569955.url(scheme.get, call_569955.host, call_569955.base,
                         call_569955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569955, url, valid)

proc call*(call_569956: Call_WebAppsListBackupStatusSecretsSlot_569945;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecretsSlot
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_569957 = newJObject()
  var query_569958 = newJObject()
  var body_569959 = newJObject()
  add(path_569957, "resourceGroupName", newJString(resourceGroupName))
  add(query_569958, "api-version", newJString(apiVersion))
  add(path_569957, "name", newJString(name))
  add(path_569957, "slot", newJString(slot))
  add(path_569957, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569959 = request
  add(path_569957, "backupId", newJString(backupId))
  result = call_569956.call(path_569957, query_569958, nil, nil, body_569959)

var webAppsListBackupStatusSecretsSlot* = Call_WebAppsListBackupStatusSecretsSlot_569945(
    name: "webAppsListBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecretsSlot_569946, base: "",
    url: url_WebAppsListBackupStatusSecretsSlot_569947, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSlot_569960 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreSlot_569962(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSlot_569961(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569963 = path.getOrDefault("resourceGroupName")
  valid_569963 = validateParameter(valid_569963, JString, required = true,
                                 default = nil)
  if valid_569963 != nil:
    section.add "resourceGroupName", valid_569963
  var valid_569964 = path.getOrDefault("name")
  valid_569964 = validateParameter(valid_569964, JString, required = true,
                                 default = nil)
  if valid_569964 != nil:
    section.add "name", valid_569964
  var valid_569965 = path.getOrDefault("slot")
  valid_569965 = validateParameter(valid_569965, JString, required = true,
                                 default = nil)
  if valid_569965 != nil:
    section.add "slot", valid_569965
  var valid_569966 = path.getOrDefault("subscriptionId")
  valid_569966 = validateParameter(valid_569966, JString, required = true,
                                 default = nil)
  if valid_569966 != nil:
    section.add "subscriptionId", valid_569966
  var valid_569967 = path.getOrDefault("backupId")
  valid_569967 = validateParameter(valid_569967, JString, required = true,
                                 default = nil)
  if valid_569967 != nil:
    section.add "backupId", valid_569967
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569968 = query.getOrDefault("api-version")
  valid_569968 = validateParameter(valid_569968, JString, required = true,
                                 default = nil)
  if valid_569968 != nil:
    section.add "api-version", valid_569968
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569970: Call_WebAppsRestoreSlot_569960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_569970.validator(path, query, header, formData, body)
  let scheme = call_569970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569970.url(scheme.get, call_569970.host, call_569970.base,
                         call_569970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569970, url, valid)

proc call*(call_569971: Call_WebAppsRestoreSlot_569960; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode; backupId: string): Recallable =
  ## webAppsRestoreSlot
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_569972 = newJObject()
  var query_569973 = newJObject()
  var body_569974 = newJObject()
  add(path_569972, "resourceGroupName", newJString(resourceGroupName))
  add(query_569973, "api-version", newJString(apiVersion))
  add(path_569972, "name", newJString(name))
  add(path_569972, "slot", newJString(slot))
  add(path_569972, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569974 = request
  add(path_569972, "backupId", newJString(backupId))
  result = call_569971.call(path_569972, query_569973, nil, nil, body_569974)

var webAppsRestoreSlot* = Call_WebAppsRestoreSlot_569960(
    name: "webAppsRestoreSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_WebAppsRestoreSlot_569961, base: "",
    url: url_WebAppsRestoreSlot_569962, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationsSlot_569975 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurationsSlot_569977(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationsSlot_569976(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569978 = path.getOrDefault("resourceGroupName")
  valid_569978 = validateParameter(valid_569978, JString, required = true,
                                 default = nil)
  if valid_569978 != nil:
    section.add "resourceGroupName", valid_569978
  var valid_569979 = path.getOrDefault("name")
  valid_569979 = validateParameter(valid_569979, JString, required = true,
                                 default = nil)
  if valid_569979 != nil:
    section.add "name", valid_569979
  var valid_569980 = path.getOrDefault("slot")
  valid_569980 = validateParameter(valid_569980, JString, required = true,
                                 default = nil)
  if valid_569980 != nil:
    section.add "slot", valid_569980
  var valid_569981 = path.getOrDefault("subscriptionId")
  valid_569981 = validateParameter(valid_569981, JString, required = true,
                                 default = nil)
  if valid_569981 != nil:
    section.add "subscriptionId", valid_569981
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569982 = query.getOrDefault("api-version")
  valid_569982 = validateParameter(valid_569982, JString, required = true,
                                 default = nil)
  if valid_569982 != nil:
    section.add "api-version", valid_569982
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569983: Call_WebAppsListConfigurationsSlot_569975; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_569983.validator(path, query, header, formData, body)
  let scheme = call_569983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569983.url(scheme.get, call_569983.host, call_569983.base,
                         call_569983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569983, url, valid)

proc call*(call_569984: Call_WebAppsListConfigurationsSlot_569975;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationsSlot
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569985 = newJObject()
  var query_569986 = newJObject()
  add(path_569985, "resourceGroupName", newJString(resourceGroupName))
  add(query_569986, "api-version", newJString(apiVersion))
  add(path_569985, "name", newJString(name))
  add(path_569985, "slot", newJString(slot))
  add(path_569985, "subscriptionId", newJString(subscriptionId))
  result = call_569984.call(path_569985, query_569986, nil, nil, nil)

var webAppsListConfigurationsSlot* = Call_WebAppsListConfigurationsSlot_569975(
    name: "webAppsListConfigurationsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    validator: validate_WebAppsListConfigurationsSlot_569976, base: "",
    url: url_WebAppsListConfigurationsSlot_569977, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettingsSlot_569987 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateApplicationSettingsSlot_569989(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettingsSlot_569988(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569990 = path.getOrDefault("resourceGroupName")
  valid_569990 = validateParameter(valid_569990, JString, required = true,
                                 default = nil)
  if valid_569990 != nil:
    section.add "resourceGroupName", valid_569990
  var valid_569991 = path.getOrDefault("name")
  valid_569991 = validateParameter(valid_569991, JString, required = true,
                                 default = nil)
  if valid_569991 != nil:
    section.add "name", valid_569991
  var valid_569992 = path.getOrDefault("slot")
  valid_569992 = validateParameter(valid_569992, JString, required = true,
                                 default = nil)
  if valid_569992 != nil:
    section.add "slot", valid_569992
  var valid_569993 = path.getOrDefault("subscriptionId")
  valid_569993 = validateParameter(valid_569993, JString, required = true,
                                 default = nil)
  if valid_569993 != nil:
    section.add "subscriptionId", valid_569993
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569994 = query.getOrDefault("api-version")
  valid_569994 = validateParameter(valid_569994, JString, required = true,
                                 default = nil)
  if valid_569994 != nil:
    section.add "api-version", valid_569994
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569996: Call_WebAppsUpdateApplicationSettingsSlot_569987;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_569996.validator(path, query, header, formData, body)
  let scheme = call_569996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569996.url(scheme.get, call_569996.host, call_569996.base,
                         call_569996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569996, url, valid)

proc call*(call_569997: Call_WebAppsUpdateApplicationSettingsSlot_569987;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettingsSlot
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569998 = newJObject()
  var query_569999 = newJObject()
  var body_570000 = newJObject()
  add(path_569998, "resourceGroupName", newJString(resourceGroupName))
  add(query_569999, "api-version", newJString(apiVersion))
  add(path_569998, "name", newJString(name))
  if appSettings != nil:
    body_570000 = appSettings
  add(path_569998, "slot", newJString(slot))
  add(path_569998, "subscriptionId", newJString(subscriptionId))
  result = call_569997.call(path_569998, query_569999, nil, nil, body_570000)

var webAppsUpdateApplicationSettingsSlot* = Call_WebAppsUpdateApplicationSettingsSlot_569987(
    name: "webAppsUpdateApplicationSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettingsSlot_569988, base: "",
    url: url_WebAppsUpdateApplicationSettingsSlot_569989, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettingsSlot_570001 = ref object of OpenApiRestCall_567666
proc url_WebAppsListApplicationSettingsSlot_570003(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettingsSlot_570002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570004 = path.getOrDefault("resourceGroupName")
  valid_570004 = validateParameter(valid_570004, JString, required = true,
                                 default = nil)
  if valid_570004 != nil:
    section.add "resourceGroupName", valid_570004
  var valid_570005 = path.getOrDefault("name")
  valid_570005 = validateParameter(valid_570005, JString, required = true,
                                 default = nil)
  if valid_570005 != nil:
    section.add "name", valid_570005
  var valid_570006 = path.getOrDefault("slot")
  valid_570006 = validateParameter(valid_570006, JString, required = true,
                                 default = nil)
  if valid_570006 != nil:
    section.add "slot", valid_570006
  var valid_570007 = path.getOrDefault("subscriptionId")
  valid_570007 = validateParameter(valid_570007, JString, required = true,
                                 default = nil)
  if valid_570007 != nil:
    section.add "subscriptionId", valid_570007
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570008 = query.getOrDefault("api-version")
  valid_570008 = validateParameter(valid_570008, JString, required = true,
                                 default = nil)
  if valid_570008 != nil:
    section.add "api-version", valid_570008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570009: Call_WebAppsListApplicationSettingsSlot_570001;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_570009.validator(path, query, header, formData, body)
  let scheme = call_570009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570009.url(scheme.get, call_570009.host, call_570009.base,
                         call_570009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570009, url, valid)

proc call*(call_570010: Call_WebAppsListApplicationSettingsSlot_570001;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettingsSlot
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570011 = newJObject()
  var query_570012 = newJObject()
  add(path_570011, "resourceGroupName", newJString(resourceGroupName))
  add(query_570012, "api-version", newJString(apiVersion))
  add(path_570011, "name", newJString(name))
  add(path_570011, "slot", newJString(slot))
  add(path_570011, "subscriptionId", newJString(subscriptionId))
  result = call_570010.call(path_570011, query_570012, nil, nil, nil)

var webAppsListApplicationSettingsSlot* = Call_WebAppsListApplicationSettingsSlot_570001(
    name: "webAppsListApplicationSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettingsSlot_570002, base: "",
    url: url_WebAppsListApplicationSettingsSlot_570003, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettingsSlot_570013 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateAuthSettingsSlot_570015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettingsSlot_570014(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570016 = path.getOrDefault("resourceGroupName")
  valid_570016 = validateParameter(valid_570016, JString, required = true,
                                 default = nil)
  if valid_570016 != nil:
    section.add "resourceGroupName", valid_570016
  var valid_570017 = path.getOrDefault("name")
  valid_570017 = validateParameter(valid_570017, JString, required = true,
                                 default = nil)
  if valid_570017 != nil:
    section.add "name", valid_570017
  var valid_570018 = path.getOrDefault("slot")
  valid_570018 = validateParameter(valid_570018, JString, required = true,
                                 default = nil)
  if valid_570018 != nil:
    section.add "slot", valid_570018
  var valid_570019 = path.getOrDefault("subscriptionId")
  valid_570019 = validateParameter(valid_570019, JString, required = true,
                                 default = nil)
  if valid_570019 != nil:
    section.add "subscriptionId", valid_570019
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570020 = query.getOrDefault("api-version")
  valid_570020 = validateParameter(valid_570020, JString, required = true,
                                 default = nil)
  if valid_570020 != nil:
    section.add "api-version", valid_570020
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570022: Call_WebAppsUpdateAuthSettingsSlot_570013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_570022.validator(path, query, header, formData, body)
  let scheme = call_570022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570022.url(scheme.get, call_570022.host, call_570022.base,
                         call_570022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570022, url, valid)

proc call*(call_570023: Call_WebAppsUpdateAuthSettingsSlot_570013;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettingsSlot
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_570024 = newJObject()
  var query_570025 = newJObject()
  var body_570026 = newJObject()
  add(path_570024, "resourceGroupName", newJString(resourceGroupName))
  add(query_570025, "api-version", newJString(apiVersion))
  add(path_570024, "name", newJString(name))
  add(path_570024, "slot", newJString(slot))
  add(path_570024, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_570026 = siteAuthSettings
  result = call_570023.call(path_570024, query_570025, nil, nil, body_570026)

var webAppsUpdateAuthSettingsSlot* = Call_WebAppsUpdateAuthSettingsSlot_570013(
    name: "webAppsUpdateAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettingsSlot_570014, base: "",
    url: url_WebAppsUpdateAuthSettingsSlot_570015, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettingsSlot_570027 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetAuthSettingsSlot_570029(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettingsSlot_570028(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570030 = path.getOrDefault("resourceGroupName")
  valid_570030 = validateParameter(valid_570030, JString, required = true,
                                 default = nil)
  if valid_570030 != nil:
    section.add "resourceGroupName", valid_570030
  var valid_570031 = path.getOrDefault("name")
  valid_570031 = validateParameter(valid_570031, JString, required = true,
                                 default = nil)
  if valid_570031 != nil:
    section.add "name", valid_570031
  var valid_570032 = path.getOrDefault("slot")
  valid_570032 = validateParameter(valid_570032, JString, required = true,
                                 default = nil)
  if valid_570032 != nil:
    section.add "slot", valid_570032
  var valid_570033 = path.getOrDefault("subscriptionId")
  valid_570033 = validateParameter(valid_570033, JString, required = true,
                                 default = nil)
  if valid_570033 != nil:
    section.add "subscriptionId", valid_570033
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570034 = query.getOrDefault("api-version")
  valid_570034 = validateParameter(valid_570034, JString, required = true,
                                 default = nil)
  if valid_570034 != nil:
    section.add "api-version", valid_570034
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570035: Call_WebAppsGetAuthSettingsSlot_570027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_570035.validator(path, query, header, formData, body)
  let scheme = call_570035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570035.url(scheme.get, call_570035.host, call_570035.base,
                         call_570035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570035, url, valid)

proc call*(call_570036: Call_WebAppsGetAuthSettingsSlot_570027;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettingsSlot
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570037 = newJObject()
  var query_570038 = newJObject()
  add(path_570037, "resourceGroupName", newJString(resourceGroupName))
  add(query_570038, "api-version", newJString(apiVersion))
  add(path_570037, "name", newJString(name))
  add(path_570037, "slot", newJString(slot))
  add(path_570037, "subscriptionId", newJString(subscriptionId))
  result = call_570036.call(path_570037, query_570038, nil, nil, nil)

var webAppsGetAuthSettingsSlot* = Call_WebAppsGetAuthSettingsSlot_570027(
    name: "webAppsGetAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettingsSlot_570028, base: "",
    url: url_WebAppsGetAuthSettingsSlot_570029, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfigurationSlot_570039 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateBackupConfigurationSlot_570041(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfigurationSlot_570040(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570042 = path.getOrDefault("resourceGroupName")
  valid_570042 = validateParameter(valid_570042, JString, required = true,
                                 default = nil)
  if valid_570042 != nil:
    section.add "resourceGroupName", valid_570042
  var valid_570043 = path.getOrDefault("name")
  valid_570043 = validateParameter(valid_570043, JString, required = true,
                                 default = nil)
  if valid_570043 != nil:
    section.add "name", valid_570043
  var valid_570044 = path.getOrDefault("slot")
  valid_570044 = validateParameter(valid_570044, JString, required = true,
                                 default = nil)
  if valid_570044 != nil:
    section.add "slot", valid_570044
  var valid_570045 = path.getOrDefault("subscriptionId")
  valid_570045 = validateParameter(valid_570045, JString, required = true,
                                 default = nil)
  if valid_570045 != nil:
    section.add "subscriptionId", valid_570045
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570046 = query.getOrDefault("api-version")
  valid_570046 = validateParameter(valid_570046, JString, required = true,
                                 default = nil)
  if valid_570046 != nil:
    section.add "api-version", valid_570046
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570048: Call_WebAppsUpdateBackupConfigurationSlot_570039;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_570048.validator(path, query, header, formData, body)
  let scheme = call_570048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570048.url(scheme.get, call_570048.host, call_570048.base,
                         call_570048.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570048, url, valid)

proc call*(call_570049: Call_WebAppsUpdateBackupConfigurationSlot_570039;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfigurationSlot
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_570050 = newJObject()
  var query_570051 = newJObject()
  var body_570052 = newJObject()
  add(path_570050, "resourceGroupName", newJString(resourceGroupName))
  add(query_570051, "api-version", newJString(apiVersion))
  add(path_570050, "name", newJString(name))
  add(path_570050, "slot", newJString(slot))
  add(path_570050, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570052 = request
  result = call_570049.call(path_570050, query_570051, nil, nil, body_570052)

var webAppsUpdateBackupConfigurationSlot* = Call_WebAppsUpdateBackupConfigurationSlot_570039(
    name: "webAppsUpdateBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsUpdateBackupConfigurationSlot_570040, base: "",
    url: url_WebAppsUpdateBackupConfigurationSlot_570041, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfigurationSlot_570053 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackupConfigurationSlot_570055(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfigurationSlot_570054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570056 = path.getOrDefault("resourceGroupName")
  valid_570056 = validateParameter(valid_570056, JString, required = true,
                                 default = nil)
  if valid_570056 != nil:
    section.add "resourceGroupName", valid_570056
  var valid_570057 = path.getOrDefault("name")
  valid_570057 = validateParameter(valid_570057, JString, required = true,
                                 default = nil)
  if valid_570057 != nil:
    section.add "name", valid_570057
  var valid_570058 = path.getOrDefault("slot")
  valid_570058 = validateParameter(valid_570058, JString, required = true,
                                 default = nil)
  if valid_570058 != nil:
    section.add "slot", valid_570058
  var valid_570059 = path.getOrDefault("subscriptionId")
  valid_570059 = validateParameter(valid_570059, JString, required = true,
                                 default = nil)
  if valid_570059 != nil:
    section.add "subscriptionId", valid_570059
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570060 = query.getOrDefault("api-version")
  valid_570060 = validateParameter(valid_570060, JString, required = true,
                                 default = nil)
  if valid_570060 != nil:
    section.add "api-version", valid_570060
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570061: Call_WebAppsDeleteBackupConfigurationSlot_570053;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_570061.validator(path, query, header, formData, body)
  let scheme = call_570061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570061.url(scheme.get, call_570061.host, call_570061.base,
                         call_570061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570061, url, valid)

proc call*(call_570062: Call_WebAppsDeleteBackupConfigurationSlot_570053;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfigurationSlot
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570063 = newJObject()
  var query_570064 = newJObject()
  add(path_570063, "resourceGroupName", newJString(resourceGroupName))
  add(query_570064, "api-version", newJString(apiVersion))
  add(path_570063, "name", newJString(name))
  add(path_570063, "slot", newJString(slot))
  add(path_570063, "subscriptionId", newJString(subscriptionId))
  result = call_570062.call(path_570063, query_570064, nil, nil, nil)

var webAppsDeleteBackupConfigurationSlot* = Call_WebAppsDeleteBackupConfigurationSlot_570053(
    name: "webAppsDeleteBackupConfigurationSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsDeleteBackupConfigurationSlot_570054, base: "",
    url: url_WebAppsDeleteBackupConfigurationSlot_570055, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfigurationSlot_570065 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupConfigurationSlot_570067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfigurationSlot_570066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570068 = path.getOrDefault("resourceGroupName")
  valid_570068 = validateParameter(valid_570068, JString, required = true,
                                 default = nil)
  if valid_570068 != nil:
    section.add "resourceGroupName", valid_570068
  var valid_570069 = path.getOrDefault("name")
  valid_570069 = validateParameter(valid_570069, JString, required = true,
                                 default = nil)
  if valid_570069 != nil:
    section.add "name", valid_570069
  var valid_570070 = path.getOrDefault("slot")
  valid_570070 = validateParameter(valid_570070, JString, required = true,
                                 default = nil)
  if valid_570070 != nil:
    section.add "slot", valid_570070
  var valid_570071 = path.getOrDefault("subscriptionId")
  valid_570071 = validateParameter(valid_570071, JString, required = true,
                                 default = nil)
  if valid_570071 != nil:
    section.add "subscriptionId", valid_570071
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570072 = query.getOrDefault("api-version")
  valid_570072 = validateParameter(valid_570072, JString, required = true,
                                 default = nil)
  if valid_570072 != nil:
    section.add "api-version", valid_570072
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570073: Call_WebAppsGetBackupConfigurationSlot_570065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_570073.validator(path, query, header, formData, body)
  let scheme = call_570073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570073.url(scheme.get, call_570073.host, call_570073.base,
                         call_570073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570073, url, valid)

proc call*(call_570074: Call_WebAppsGetBackupConfigurationSlot_570065;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfigurationSlot
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570075 = newJObject()
  var query_570076 = newJObject()
  add(path_570075, "resourceGroupName", newJString(resourceGroupName))
  add(query_570076, "api-version", newJString(apiVersion))
  add(path_570075, "name", newJString(name))
  add(path_570075, "slot", newJString(slot))
  add(path_570075, "subscriptionId", newJString(subscriptionId))
  result = call_570074.call(path_570075, query_570076, nil, nil, nil)

var webAppsGetBackupConfigurationSlot* = Call_WebAppsGetBackupConfigurationSlot_570065(
    name: "webAppsGetBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_WebAppsGetBackupConfigurationSlot_570066, base: "",
    url: url_WebAppsGetBackupConfigurationSlot_570067, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStringsSlot_570077 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConnectionStringsSlot_570079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStringsSlot_570078(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570080 = path.getOrDefault("resourceGroupName")
  valid_570080 = validateParameter(valid_570080, JString, required = true,
                                 default = nil)
  if valid_570080 != nil:
    section.add "resourceGroupName", valid_570080
  var valid_570081 = path.getOrDefault("name")
  valid_570081 = validateParameter(valid_570081, JString, required = true,
                                 default = nil)
  if valid_570081 != nil:
    section.add "name", valid_570081
  var valid_570082 = path.getOrDefault("slot")
  valid_570082 = validateParameter(valid_570082, JString, required = true,
                                 default = nil)
  if valid_570082 != nil:
    section.add "slot", valid_570082
  var valid_570083 = path.getOrDefault("subscriptionId")
  valid_570083 = validateParameter(valid_570083, JString, required = true,
                                 default = nil)
  if valid_570083 != nil:
    section.add "subscriptionId", valid_570083
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570084 = query.getOrDefault("api-version")
  valid_570084 = validateParameter(valid_570084, JString, required = true,
                                 default = nil)
  if valid_570084 != nil:
    section.add "api-version", valid_570084
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570086: Call_WebAppsUpdateConnectionStringsSlot_570077;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_570086.validator(path, query, header, formData, body)
  let scheme = call_570086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570086.url(scheme.get, call_570086.host, call_570086.base,
                         call_570086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570086, url, valid)

proc call*(call_570087: Call_WebAppsUpdateConnectionStringsSlot_570077;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStringsSlot
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570088 = newJObject()
  var query_570089 = newJObject()
  var body_570090 = newJObject()
  add(path_570088, "resourceGroupName", newJString(resourceGroupName))
  add(query_570089, "api-version", newJString(apiVersion))
  add(path_570088, "name", newJString(name))
  add(path_570088, "slot", newJString(slot))
  if connectionStrings != nil:
    body_570090 = connectionStrings
  add(path_570088, "subscriptionId", newJString(subscriptionId))
  result = call_570087.call(path_570088, query_570089, nil, nil, body_570090)

var webAppsUpdateConnectionStringsSlot* = Call_WebAppsUpdateConnectionStringsSlot_570077(
    name: "webAppsUpdateConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStringsSlot_570078, base: "",
    url: url_WebAppsUpdateConnectionStringsSlot_570079, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStringsSlot_570091 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConnectionStringsSlot_570093(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStringsSlot_570092(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570094 = path.getOrDefault("resourceGroupName")
  valid_570094 = validateParameter(valid_570094, JString, required = true,
                                 default = nil)
  if valid_570094 != nil:
    section.add "resourceGroupName", valid_570094
  var valid_570095 = path.getOrDefault("name")
  valid_570095 = validateParameter(valid_570095, JString, required = true,
                                 default = nil)
  if valid_570095 != nil:
    section.add "name", valid_570095
  var valid_570096 = path.getOrDefault("slot")
  valid_570096 = validateParameter(valid_570096, JString, required = true,
                                 default = nil)
  if valid_570096 != nil:
    section.add "slot", valid_570096
  var valid_570097 = path.getOrDefault("subscriptionId")
  valid_570097 = validateParameter(valid_570097, JString, required = true,
                                 default = nil)
  if valid_570097 != nil:
    section.add "subscriptionId", valid_570097
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570098 = query.getOrDefault("api-version")
  valid_570098 = validateParameter(valid_570098, JString, required = true,
                                 default = nil)
  if valid_570098 != nil:
    section.add "api-version", valid_570098
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570099: Call_WebAppsListConnectionStringsSlot_570091;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_570099.validator(path, query, header, formData, body)
  let scheme = call_570099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570099.url(scheme.get, call_570099.host, call_570099.base,
                         call_570099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570099, url, valid)

proc call*(call_570100: Call_WebAppsListConnectionStringsSlot_570091;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStringsSlot
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570101 = newJObject()
  var query_570102 = newJObject()
  add(path_570101, "resourceGroupName", newJString(resourceGroupName))
  add(query_570102, "api-version", newJString(apiVersion))
  add(path_570101, "name", newJString(name))
  add(path_570101, "slot", newJString(slot))
  add(path_570101, "subscriptionId", newJString(subscriptionId))
  result = call_570100.call(path_570101, query_570102, nil, nil, nil)

var webAppsListConnectionStringsSlot* = Call_WebAppsListConnectionStringsSlot_570091(
    name: "webAppsListConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStringsSlot_570092, base: "",
    url: url_WebAppsListConnectionStringsSlot_570093, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfigSlot_570115 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDiagnosticLogsConfigSlot_570117(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfigSlot_570116(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570118 = path.getOrDefault("resourceGroupName")
  valid_570118 = validateParameter(valid_570118, JString, required = true,
                                 default = nil)
  if valid_570118 != nil:
    section.add "resourceGroupName", valid_570118
  var valid_570119 = path.getOrDefault("name")
  valid_570119 = validateParameter(valid_570119, JString, required = true,
                                 default = nil)
  if valid_570119 != nil:
    section.add "name", valid_570119
  var valid_570120 = path.getOrDefault("slot")
  valid_570120 = validateParameter(valid_570120, JString, required = true,
                                 default = nil)
  if valid_570120 != nil:
    section.add "slot", valid_570120
  var valid_570121 = path.getOrDefault("subscriptionId")
  valid_570121 = validateParameter(valid_570121, JString, required = true,
                                 default = nil)
  if valid_570121 != nil:
    section.add "subscriptionId", valid_570121
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570122 = query.getOrDefault("api-version")
  valid_570122 = validateParameter(valid_570122, JString, required = true,
                                 default = nil)
  if valid_570122 != nil:
    section.add "api-version", valid_570122
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570124: Call_WebAppsUpdateDiagnosticLogsConfigSlot_570115;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_570124.validator(path, query, header, formData, body)
  let scheme = call_570124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570124.url(scheme.get, call_570124.host, call_570124.base,
                         call_570124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570124, url, valid)

proc call*(call_570125: Call_WebAppsUpdateDiagnosticLogsConfigSlot_570115;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfigSlot
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570126 = newJObject()
  var query_570127 = newJObject()
  var body_570128 = newJObject()
  add(path_570126, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_570128 = siteLogsConfig
  add(query_570127, "api-version", newJString(apiVersion))
  add(path_570126, "name", newJString(name))
  add(path_570126, "slot", newJString(slot))
  add(path_570126, "subscriptionId", newJString(subscriptionId))
  result = call_570125.call(path_570126, query_570127, nil, nil, body_570128)

var webAppsUpdateDiagnosticLogsConfigSlot* = Call_WebAppsUpdateDiagnosticLogsConfigSlot_570115(
    name: "webAppsUpdateDiagnosticLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfigSlot_570116, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfigSlot_570117, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfigurationSlot_570103 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDiagnosticLogsConfigurationSlot_570105(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfigurationSlot_570104(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570106 = path.getOrDefault("resourceGroupName")
  valid_570106 = validateParameter(valid_570106, JString, required = true,
                                 default = nil)
  if valid_570106 != nil:
    section.add "resourceGroupName", valid_570106
  var valid_570107 = path.getOrDefault("name")
  valid_570107 = validateParameter(valid_570107, JString, required = true,
                                 default = nil)
  if valid_570107 != nil:
    section.add "name", valid_570107
  var valid_570108 = path.getOrDefault("slot")
  valid_570108 = validateParameter(valid_570108, JString, required = true,
                                 default = nil)
  if valid_570108 != nil:
    section.add "slot", valid_570108
  var valid_570109 = path.getOrDefault("subscriptionId")
  valid_570109 = validateParameter(valid_570109, JString, required = true,
                                 default = nil)
  if valid_570109 != nil:
    section.add "subscriptionId", valid_570109
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570110 = query.getOrDefault("api-version")
  valid_570110 = validateParameter(valid_570110, JString, required = true,
                                 default = nil)
  if valid_570110 != nil:
    section.add "api-version", valid_570110
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570111: Call_WebAppsGetDiagnosticLogsConfigurationSlot_570103;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_570111.validator(path, query, header, formData, body)
  let scheme = call_570111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570111.url(scheme.get, call_570111.host, call_570111.base,
                         call_570111.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570111, url, valid)

proc call*(call_570112: Call_WebAppsGetDiagnosticLogsConfigurationSlot_570103;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfigurationSlot
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570113 = newJObject()
  var query_570114 = newJObject()
  add(path_570113, "resourceGroupName", newJString(resourceGroupName))
  add(query_570114, "api-version", newJString(apiVersion))
  add(path_570113, "name", newJString(name))
  add(path_570113, "slot", newJString(slot))
  add(path_570113, "subscriptionId", newJString(subscriptionId))
  result = call_570112.call(path_570113, query_570114, nil, nil, nil)

var webAppsGetDiagnosticLogsConfigurationSlot* = Call_WebAppsGetDiagnosticLogsConfigurationSlot_570103(
    name: "webAppsGetDiagnosticLogsConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfigurationSlot_570104,
    base: "", url: url_WebAppsGetDiagnosticLogsConfigurationSlot_570105,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadataSlot_570129 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateMetadataSlot_570131(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadataSlot_570130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570132 = path.getOrDefault("resourceGroupName")
  valid_570132 = validateParameter(valid_570132, JString, required = true,
                                 default = nil)
  if valid_570132 != nil:
    section.add "resourceGroupName", valid_570132
  var valid_570133 = path.getOrDefault("name")
  valid_570133 = validateParameter(valid_570133, JString, required = true,
                                 default = nil)
  if valid_570133 != nil:
    section.add "name", valid_570133
  var valid_570134 = path.getOrDefault("slot")
  valid_570134 = validateParameter(valid_570134, JString, required = true,
                                 default = nil)
  if valid_570134 != nil:
    section.add "slot", valid_570134
  var valid_570135 = path.getOrDefault("subscriptionId")
  valid_570135 = validateParameter(valid_570135, JString, required = true,
                                 default = nil)
  if valid_570135 != nil:
    section.add "subscriptionId", valid_570135
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570136 = query.getOrDefault("api-version")
  valid_570136 = validateParameter(valid_570136, JString, required = true,
                                 default = nil)
  if valid_570136 != nil:
    section.add "api-version", valid_570136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570138: Call_WebAppsUpdateMetadataSlot_570129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_570138.validator(path, query, header, formData, body)
  let scheme = call_570138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570138.url(scheme.get, call_570138.host, call_570138.base,
                         call_570138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570138, url, valid)

proc call*(call_570139: Call_WebAppsUpdateMetadataSlot_570129;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadataSlot
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_570140 = newJObject()
  var query_570141 = newJObject()
  var body_570142 = newJObject()
  add(path_570140, "resourceGroupName", newJString(resourceGroupName))
  add(query_570141, "api-version", newJString(apiVersion))
  add(path_570140, "name", newJString(name))
  add(path_570140, "slot", newJString(slot))
  add(path_570140, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_570142 = metadata
  result = call_570139.call(path_570140, query_570141, nil, nil, body_570142)

var webAppsUpdateMetadataSlot* = Call_WebAppsUpdateMetadataSlot_570129(
    name: "webAppsUpdateMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_WebAppsUpdateMetadataSlot_570130, base: "",
    url: url_WebAppsUpdateMetadataSlot_570131, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadataSlot_570143 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetadataSlot_570145(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadataSlot_570144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570146 = path.getOrDefault("resourceGroupName")
  valid_570146 = validateParameter(valid_570146, JString, required = true,
                                 default = nil)
  if valid_570146 != nil:
    section.add "resourceGroupName", valid_570146
  var valid_570147 = path.getOrDefault("name")
  valid_570147 = validateParameter(valid_570147, JString, required = true,
                                 default = nil)
  if valid_570147 != nil:
    section.add "name", valid_570147
  var valid_570148 = path.getOrDefault("slot")
  valid_570148 = validateParameter(valid_570148, JString, required = true,
                                 default = nil)
  if valid_570148 != nil:
    section.add "slot", valid_570148
  var valid_570149 = path.getOrDefault("subscriptionId")
  valid_570149 = validateParameter(valid_570149, JString, required = true,
                                 default = nil)
  if valid_570149 != nil:
    section.add "subscriptionId", valid_570149
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570150 = query.getOrDefault("api-version")
  valid_570150 = validateParameter(valid_570150, JString, required = true,
                                 default = nil)
  if valid_570150 != nil:
    section.add "api-version", valid_570150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570151: Call_WebAppsListMetadataSlot_570143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_570151.validator(path, query, header, formData, body)
  let scheme = call_570151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570151.url(scheme.get, call_570151.host, call_570151.base,
                         call_570151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570151, url, valid)

proc call*(call_570152: Call_WebAppsListMetadataSlot_570143;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetadataSlot
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570153 = newJObject()
  var query_570154 = newJObject()
  add(path_570153, "resourceGroupName", newJString(resourceGroupName))
  add(query_570154, "api-version", newJString(apiVersion))
  add(path_570153, "name", newJString(name))
  add(path_570153, "slot", newJString(slot))
  add(path_570153, "subscriptionId", newJString(subscriptionId))
  result = call_570152.call(path_570153, query_570154, nil, nil, nil)

var webAppsListMetadataSlot* = Call_WebAppsListMetadataSlot_570143(
    name: "webAppsListMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_WebAppsListMetadataSlot_570144, base: "",
    url: url_WebAppsListMetadataSlot_570145, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentialsSlot_570155 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingCredentialsSlot_570157(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentialsSlot_570156(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570158 = path.getOrDefault("resourceGroupName")
  valid_570158 = validateParameter(valid_570158, JString, required = true,
                                 default = nil)
  if valid_570158 != nil:
    section.add "resourceGroupName", valid_570158
  var valid_570159 = path.getOrDefault("name")
  valid_570159 = validateParameter(valid_570159, JString, required = true,
                                 default = nil)
  if valid_570159 != nil:
    section.add "name", valid_570159
  var valid_570160 = path.getOrDefault("slot")
  valid_570160 = validateParameter(valid_570160, JString, required = true,
                                 default = nil)
  if valid_570160 != nil:
    section.add "slot", valid_570160
  var valid_570161 = path.getOrDefault("subscriptionId")
  valid_570161 = validateParameter(valid_570161, JString, required = true,
                                 default = nil)
  if valid_570161 != nil:
    section.add "subscriptionId", valid_570161
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570162 = query.getOrDefault("api-version")
  valid_570162 = validateParameter(valid_570162, JString, required = true,
                                 default = nil)
  if valid_570162 != nil:
    section.add "api-version", valid_570162
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570163: Call_WebAppsListPublishingCredentialsSlot_570155;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_570163.validator(path, query, header, formData, body)
  let scheme = call_570163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570163.url(scheme.get, call_570163.host, call_570163.base,
                         call_570163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570163, url, valid)

proc call*(call_570164: Call_WebAppsListPublishingCredentialsSlot_570155;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentialsSlot
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570165 = newJObject()
  var query_570166 = newJObject()
  add(path_570165, "resourceGroupName", newJString(resourceGroupName))
  add(query_570166, "api-version", newJString(apiVersion))
  add(path_570165, "name", newJString(name))
  add(path_570165, "slot", newJString(slot))
  add(path_570165, "subscriptionId", newJString(subscriptionId))
  result = call_570164.call(path_570165, query_570166, nil, nil, nil)

var webAppsListPublishingCredentialsSlot* = Call_WebAppsListPublishingCredentialsSlot_570155(
    name: "webAppsListPublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentialsSlot_570156, base: "",
    url: url_WebAppsListPublishingCredentialsSlot_570157, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettingsSlot_570167 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSitePushSettingsSlot_570169(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettingsSlot_570168(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570170 = path.getOrDefault("resourceGroupName")
  valid_570170 = validateParameter(valid_570170, JString, required = true,
                                 default = nil)
  if valid_570170 != nil:
    section.add "resourceGroupName", valid_570170
  var valid_570171 = path.getOrDefault("name")
  valid_570171 = validateParameter(valid_570171, JString, required = true,
                                 default = nil)
  if valid_570171 != nil:
    section.add "name", valid_570171
  var valid_570172 = path.getOrDefault("slot")
  valid_570172 = validateParameter(valid_570172, JString, required = true,
                                 default = nil)
  if valid_570172 != nil:
    section.add "slot", valid_570172
  var valid_570173 = path.getOrDefault("subscriptionId")
  valid_570173 = validateParameter(valid_570173, JString, required = true,
                                 default = nil)
  if valid_570173 != nil:
    section.add "subscriptionId", valid_570173
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570174 = query.getOrDefault("api-version")
  valid_570174 = validateParameter(valid_570174, JString, required = true,
                                 default = nil)
  if valid_570174 != nil:
    section.add "api-version", valid_570174
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570176: Call_WebAppsUpdateSitePushSettingsSlot_570167;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_570176.validator(path, query, header, formData, body)
  let scheme = call_570176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570176.url(scheme.get, call_570176.host, call_570176.base,
                         call_570176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570176, url, valid)

proc call*(call_570177: Call_WebAppsUpdateSitePushSettingsSlot_570167;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettingsSlot
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_570178 = newJObject()
  var query_570179 = newJObject()
  var body_570180 = newJObject()
  add(path_570178, "resourceGroupName", newJString(resourceGroupName))
  add(query_570179, "api-version", newJString(apiVersion))
  add(path_570178, "name", newJString(name))
  add(path_570178, "slot", newJString(slot))
  add(path_570178, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_570180 = pushSettings
  result = call_570177.call(path_570178, query_570179, nil, nil, body_570180)

var webAppsUpdateSitePushSettingsSlot* = Call_WebAppsUpdateSitePushSettingsSlot_570167(
    name: "webAppsUpdateSitePushSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettingsSlot_570168, base: "",
    url: url_WebAppsUpdateSitePushSettingsSlot_570169, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettingsSlot_570181 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSitePushSettingsSlot_570183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettingsSlot_570182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570184 = path.getOrDefault("resourceGroupName")
  valid_570184 = validateParameter(valid_570184, JString, required = true,
                                 default = nil)
  if valid_570184 != nil:
    section.add "resourceGroupName", valid_570184
  var valid_570185 = path.getOrDefault("name")
  valid_570185 = validateParameter(valid_570185, JString, required = true,
                                 default = nil)
  if valid_570185 != nil:
    section.add "name", valid_570185
  var valid_570186 = path.getOrDefault("slot")
  valid_570186 = validateParameter(valid_570186, JString, required = true,
                                 default = nil)
  if valid_570186 != nil:
    section.add "slot", valid_570186
  var valid_570187 = path.getOrDefault("subscriptionId")
  valid_570187 = validateParameter(valid_570187, JString, required = true,
                                 default = nil)
  if valid_570187 != nil:
    section.add "subscriptionId", valid_570187
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570188 = query.getOrDefault("api-version")
  valid_570188 = validateParameter(valid_570188, JString, required = true,
                                 default = nil)
  if valid_570188 != nil:
    section.add "api-version", valid_570188
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570189: Call_WebAppsListSitePushSettingsSlot_570181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_570189.validator(path, query, header, formData, body)
  let scheme = call_570189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570189.url(scheme.get, call_570189.host, call_570189.base,
                         call_570189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570189, url, valid)

proc call*(call_570190: Call_WebAppsListSitePushSettingsSlot_570181;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettingsSlot
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570191 = newJObject()
  var query_570192 = newJObject()
  add(path_570191, "resourceGroupName", newJString(resourceGroupName))
  add(query_570192, "api-version", newJString(apiVersion))
  add(path_570191, "name", newJString(name))
  add(path_570191, "slot", newJString(slot))
  add(path_570191, "subscriptionId", newJString(subscriptionId))
  result = call_570190.call(path_570191, query_570192, nil, nil, nil)

var webAppsListSitePushSettingsSlot* = Call_WebAppsListSitePushSettingsSlot_570181(
    name: "webAppsListSitePushSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettingsSlot_570182, base: "",
    url: url_WebAppsListSitePushSettingsSlot_570183, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfigurationSlot_570205 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateConfigurationSlot_570207(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfigurationSlot_570206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570208 = path.getOrDefault("resourceGroupName")
  valid_570208 = validateParameter(valid_570208, JString, required = true,
                                 default = nil)
  if valid_570208 != nil:
    section.add "resourceGroupName", valid_570208
  var valid_570209 = path.getOrDefault("name")
  valid_570209 = validateParameter(valid_570209, JString, required = true,
                                 default = nil)
  if valid_570209 != nil:
    section.add "name", valid_570209
  var valid_570210 = path.getOrDefault("slot")
  valid_570210 = validateParameter(valid_570210, JString, required = true,
                                 default = nil)
  if valid_570210 != nil:
    section.add "slot", valid_570210
  var valid_570211 = path.getOrDefault("subscriptionId")
  valid_570211 = validateParameter(valid_570211, JString, required = true,
                                 default = nil)
  if valid_570211 != nil:
    section.add "subscriptionId", valid_570211
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570212 = query.getOrDefault("api-version")
  valid_570212 = validateParameter(valid_570212, JString, required = true,
                                 default = nil)
  if valid_570212 != nil:
    section.add "api-version", valid_570212
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570214: Call_WebAppsCreateOrUpdateConfigurationSlot_570205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_570214.validator(path, query, header, formData, body)
  let scheme = call_570214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570214.url(scheme.get, call_570214.host, call_570214.base,
                         call_570214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570214, url, valid)

proc call*(call_570215: Call_WebAppsCreateOrUpdateConfigurationSlot_570205;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570216 = newJObject()
  var query_570217 = newJObject()
  var body_570218 = newJObject()
  add(path_570216, "resourceGroupName", newJString(resourceGroupName))
  add(query_570217, "api-version", newJString(apiVersion))
  add(path_570216, "name", newJString(name))
  if siteConfig != nil:
    body_570218 = siteConfig
  add(path_570216, "slot", newJString(slot))
  add(path_570216, "subscriptionId", newJString(subscriptionId))
  result = call_570215.call(path_570216, query_570217, nil, nil, body_570218)

var webAppsCreateOrUpdateConfigurationSlot* = Call_WebAppsCreateOrUpdateConfigurationSlot_570205(
    name: "webAppsCreateOrUpdateConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfigurationSlot_570206, base: "",
    url: url_WebAppsCreateOrUpdateConfigurationSlot_570207,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSlot_570193 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfigurationSlot_570195(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSlot_570194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570196 = path.getOrDefault("resourceGroupName")
  valid_570196 = validateParameter(valid_570196, JString, required = true,
                                 default = nil)
  if valid_570196 != nil:
    section.add "resourceGroupName", valid_570196
  var valid_570197 = path.getOrDefault("name")
  valid_570197 = validateParameter(valid_570197, JString, required = true,
                                 default = nil)
  if valid_570197 != nil:
    section.add "name", valid_570197
  var valid_570198 = path.getOrDefault("slot")
  valid_570198 = validateParameter(valid_570198, JString, required = true,
                                 default = nil)
  if valid_570198 != nil:
    section.add "slot", valid_570198
  var valid_570199 = path.getOrDefault("subscriptionId")
  valid_570199 = validateParameter(valid_570199, JString, required = true,
                                 default = nil)
  if valid_570199 != nil:
    section.add "subscriptionId", valid_570199
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570200 = query.getOrDefault("api-version")
  valid_570200 = validateParameter(valid_570200, JString, required = true,
                                 default = nil)
  if valid_570200 != nil:
    section.add "api-version", valid_570200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570201: Call_WebAppsGetConfigurationSlot_570193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_570201.validator(path, query, header, formData, body)
  let scheme = call_570201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570201.url(scheme.get, call_570201.host, call_570201.base,
                         call_570201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570201, url, valid)

proc call*(call_570202: Call_WebAppsGetConfigurationSlot_570193;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSlot
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570203 = newJObject()
  var query_570204 = newJObject()
  add(path_570203, "resourceGroupName", newJString(resourceGroupName))
  add(query_570204, "api-version", newJString(apiVersion))
  add(path_570203, "name", newJString(name))
  add(path_570203, "slot", newJString(slot))
  add(path_570203, "subscriptionId", newJString(subscriptionId))
  result = call_570202.call(path_570203, query_570204, nil, nil, nil)

var webAppsGetConfigurationSlot* = Call_WebAppsGetConfigurationSlot_570193(
    name: "webAppsGetConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsGetConfigurationSlot_570194, base: "",
    url: url_WebAppsGetConfigurationSlot_570195, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfigurationSlot_570219 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConfigurationSlot_570221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfigurationSlot_570220(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570222 = path.getOrDefault("resourceGroupName")
  valid_570222 = validateParameter(valid_570222, JString, required = true,
                                 default = nil)
  if valid_570222 != nil:
    section.add "resourceGroupName", valid_570222
  var valid_570223 = path.getOrDefault("name")
  valid_570223 = validateParameter(valid_570223, JString, required = true,
                                 default = nil)
  if valid_570223 != nil:
    section.add "name", valid_570223
  var valid_570224 = path.getOrDefault("slot")
  valid_570224 = validateParameter(valid_570224, JString, required = true,
                                 default = nil)
  if valid_570224 != nil:
    section.add "slot", valid_570224
  var valid_570225 = path.getOrDefault("subscriptionId")
  valid_570225 = validateParameter(valid_570225, JString, required = true,
                                 default = nil)
  if valid_570225 != nil:
    section.add "subscriptionId", valid_570225
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570226 = query.getOrDefault("api-version")
  valid_570226 = validateParameter(valid_570226, JString, required = true,
                                 default = nil)
  if valid_570226 != nil:
    section.add "api-version", valid_570226
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570228: Call_WebAppsUpdateConfigurationSlot_570219; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_570228.validator(path, query, header, formData, body)
  let scheme = call_570228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570228.url(scheme.get, call_570228.host, call_570228.base,
                         call_570228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570228, url, valid)

proc call*(call_570229: Call_WebAppsUpdateConfigurationSlot_570219;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570230 = newJObject()
  var query_570231 = newJObject()
  var body_570232 = newJObject()
  add(path_570230, "resourceGroupName", newJString(resourceGroupName))
  add(query_570231, "api-version", newJString(apiVersion))
  add(path_570230, "name", newJString(name))
  if siteConfig != nil:
    body_570232 = siteConfig
  add(path_570230, "slot", newJString(slot))
  add(path_570230, "subscriptionId", newJString(subscriptionId))
  result = call_570229.call(path_570230, query_570231, nil, nil, body_570232)

var webAppsUpdateConfigurationSlot* = Call_WebAppsUpdateConfigurationSlot_570219(
    name: "webAppsUpdateConfigurationSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsUpdateConfigurationSlot_570220, base: "",
    url: url_WebAppsUpdateConfigurationSlot_570221, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfoSlot_570233 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurationSnapshotInfoSlot_570235(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfoSlot_570234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570236 = path.getOrDefault("resourceGroupName")
  valid_570236 = validateParameter(valid_570236, JString, required = true,
                                 default = nil)
  if valid_570236 != nil:
    section.add "resourceGroupName", valid_570236
  var valid_570237 = path.getOrDefault("name")
  valid_570237 = validateParameter(valid_570237, JString, required = true,
                                 default = nil)
  if valid_570237 != nil:
    section.add "name", valid_570237
  var valid_570238 = path.getOrDefault("slot")
  valid_570238 = validateParameter(valid_570238, JString, required = true,
                                 default = nil)
  if valid_570238 != nil:
    section.add "slot", valid_570238
  var valid_570239 = path.getOrDefault("subscriptionId")
  valid_570239 = validateParameter(valid_570239, JString, required = true,
                                 default = nil)
  if valid_570239 != nil:
    section.add "subscriptionId", valid_570239
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570240 = query.getOrDefault("api-version")
  valid_570240 = validateParameter(valid_570240, JString, required = true,
                                 default = nil)
  if valid_570240 != nil:
    section.add "api-version", valid_570240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570241: Call_WebAppsListConfigurationSnapshotInfoSlot_570233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_570241.validator(path, query, header, formData, body)
  let scheme = call_570241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570241.url(scheme.get, call_570241.host, call_570241.base,
                         call_570241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570241, url, valid)

proc call*(call_570242: Call_WebAppsListConfigurationSnapshotInfoSlot_570233;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfoSlot
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570243 = newJObject()
  var query_570244 = newJObject()
  add(path_570243, "resourceGroupName", newJString(resourceGroupName))
  add(query_570244, "api-version", newJString(apiVersion))
  add(path_570243, "name", newJString(name))
  add(path_570243, "slot", newJString(slot))
  add(path_570243, "subscriptionId", newJString(subscriptionId))
  result = call_570242.call(path_570243, query_570244, nil, nil, nil)

var webAppsListConfigurationSnapshotInfoSlot* = Call_WebAppsListConfigurationSnapshotInfoSlot_570233(
    name: "webAppsListConfigurationSnapshotInfoSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfoSlot_570234, base: "",
    url: url_WebAppsListConfigurationSnapshotInfoSlot_570235,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshotSlot_570245 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfigurationSnapshotSlot_570247(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshotSlot_570246(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570248 = path.getOrDefault("resourceGroupName")
  valid_570248 = validateParameter(valid_570248, JString, required = true,
                                 default = nil)
  if valid_570248 != nil:
    section.add "resourceGroupName", valid_570248
  var valid_570249 = path.getOrDefault("name")
  valid_570249 = validateParameter(valid_570249, JString, required = true,
                                 default = nil)
  if valid_570249 != nil:
    section.add "name", valid_570249
  var valid_570250 = path.getOrDefault("snapshotId")
  valid_570250 = validateParameter(valid_570250, JString, required = true,
                                 default = nil)
  if valid_570250 != nil:
    section.add "snapshotId", valid_570250
  var valid_570251 = path.getOrDefault("slot")
  valid_570251 = validateParameter(valid_570251, JString, required = true,
                                 default = nil)
  if valid_570251 != nil:
    section.add "slot", valid_570251
  var valid_570252 = path.getOrDefault("subscriptionId")
  valid_570252 = validateParameter(valid_570252, JString, required = true,
                                 default = nil)
  if valid_570252 != nil:
    section.add "subscriptionId", valid_570252
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570253 = query.getOrDefault("api-version")
  valid_570253 = validateParameter(valid_570253, JString, required = true,
                                 default = nil)
  if valid_570253 != nil:
    section.add "api-version", valid_570253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570254: Call_WebAppsGetConfigurationSnapshotSlot_570245;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_570254.validator(path, query, header, formData, body)
  let scheme = call_570254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570254.url(scheme.get, call_570254.host, call_570254.base,
                         call_570254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570254, url, valid)

proc call*(call_570255: Call_WebAppsGetConfigurationSnapshotSlot_570245;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshotSlot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570256 = newJObject()
  var query_570257 = newJObject()
  add(path_570256, "resourceGroupName", newJString(resourceGroupName))
  add(query_570257, "api-version", newJString(apiVersion))
  add(path_570256, "name", newJString(name))
  add(path_570256, "snapshotId", newJString(snapshotId))
  add(path_570256, "slot", newJString(slot))
  add(path_570256, "subscriptionId", newJString(subscriptionId))
  result = call_570255.call(path_570256, query_570257, nil, nil, nil)

var webAppsGetConfigurationSnapshotSlot* = Call_WebAppsGetConfigurationSnapshotSlot_570245(
    name: "webAppsGetConfigurationSnapshotSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshotSlot_570246, base: "",
    url: url_WebAppsGetConfigurationSnapshotSlot_570247, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570258 = ref object of OpenApiRestCall_567666
proc url_WebAppsRecoverSiteConfigurationSnapshotSlot_570260(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshotSlot_570259(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570261 = path.getOrDefault("resourceGroupName")
  valid_570261 = validateParameter(valid_570261, JString, required = true,
                                 default = nil)
  if valid_570261 != nil:
    section.add "resourceGroupName", valid_570261
  var valid_570262 = path.getOrDefault("name")
  valid_570262 = validateParameter(valid_570262, JString, required = true,
                                 default = nil)
  if valid_570262 != nil:
    section.add "name", valid_570262
  var valid_570263 = path.getOrDefault("snapshotId")
  valid_570263 = validateParameter(valid_570263, JString, required = true,
                                 default = nil)
  if valid_570263 != nil:
    section.add "snapshotId", valid_570263
  var valid_570264 = path.getOrDefault("slot")
  valid_570264 = validateParameter(valid_570264, JString, required = true,
                                 default = nil)
  if valid_570264 != nil:
    section.add "slot", valid_570264
  var valid_570265 = path.getOrDefault("subscriptionId")
  valid_570265 = validateParameter(valid_570265, JString, required = true,
                                 default = nil)
  if valid_570265 != nil:
    section.add "subscriptionId", valid_570265
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570266 = query.getOrDefault("api-version")
  valid_570266 = validateParameter(valid_570266, JString, required = true,
                                 default = nil)
  if valid_570266 != nil:
    section.add "api-version", valid_570266
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570267: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570258;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_570267.validator(path, query, header, formData, body)
  let scheme = call_570267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570267.url(scheme.get, call_570267.host, call_570267.base,
                         call_570267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570267, url, valid)

proc call*(call_570268: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570258;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshotSlot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570269 = newJObject()
  var query_570270 = newJObject()
  add(path_570269, "resourceGroupName", newJString(resourceGroupName))
  add(query_570270, "api-version", newJString(apiVersion))
  add(path_570269, "name", newJString(name))
  add(path_570269, "snapshotId", newJString(snapshotId))
  add(path_570269, "slot", newJString(slot))
  add(path_570269, "subscriptionId", newJString(subscriptionId))
  result = call_570268.call(path_570269, query_570270, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshotSlot* = Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570258(
    name: "webAppsRecoverSiteConfigurationSnapshotSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshotSlot_570259,
    base: "", url: url_WebAppsRecoverSiteConfigurationSnapshotSlot_570260,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsSlot_570271 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebSiteContainerLogsSlot_570273(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsSlot_570272(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570274 = path.getOrDefault("resourceGroupName")
  valid_570274 = validateParameter(valid_570274, JString, required = true,
                                 default = nil)
  if valid_570274 != nil:
    section.add "resourceGroupName", valid_570274
  var valid_570275 = path.getOrDefault("name")
  valid_570275 = validateParameter(valid_570275, JString, required = true,
                                 default = nil)
  if valid_570275 != nil:
    section.add "name", valid_570275
  var valid_570276 = path.getOrDefault("slot")
  valid_570276 = validateParameter(valid_570276, JString, required = true,
                                 default = nil)
  if valid_570276 != nil:
    section.add "slot", valid_570276
  var valid_570277 = path.getOrDefault("subscriptionId")
  valid_570277 = validateParameter(valid_570277, JString, required = true,
                                 default = nil)
  if valid_570277 != nil:
    section.add "subscriptionId", valid_570277
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570278 = query.getOrDefault("api-version")
  valid_570278 = validateParameter(valid_570278, JString, required = true,
                                 default = nil)
  if valid_570278 != nil:
    section.add "api-version", valid_570278
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570279: Call_WebAppsGetWebSiteContainerLogsSlot_570271;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_570279.validator(path, query, header, formData, body)
  let scheme = call_570279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570279.url(scheme.get, call_570279.host, call_570279.base,
                         call_570279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570279, url, valid)

proc call*(call_570280: Call_WebAppsGetWebSiteContainerLogsSlot_570271;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsSlot
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570281 = newJObject()
  var query_570282 = newJObject()
  add(path_570281, "resourceGroupName", newJString(resourceGroupName))
  add(query_570282, "api-version", newJString(apiVersion))
  add(path_570281, "name", newJString(name))
  add(path_570281, "slot", newJString(slot))
  add(path_570281, "subscriptionId", newJString(subscriptionId))
  result = call_570280.call(path_570281, query_570282, nil, nil, nil)

var webAppsGetWebSiteContainerLogsSlot* = Call_WebAppsGetWebSiteContainerLogsSlot_570271(
    name: "webAppsGetWebSiteContainerLogsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogsSlot_570272, base: "",
    url: url_WebAppsGetWebSiteContainerLogsSlot_570273, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsZipSlot_570283 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebSiteContainerLogsZipSlot_570285(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsZipSlot_570284(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570286 = path.getOrDefault("resourceGroupName")
  valid_570286 = validateParameter(valid_570286, JString, required = true,
                                 default = nil)
  if valid_570286 != nil:
    section.add "resourceGroupName", valid_570286
  var valid_570287 = path.getOrDefault("name")
  valid_570287 = validateParameter(valid_570287, JString, required = true,
                                 default = nil)
  if valid_570287 != nil:
    section.add "name", valid_570287
  var valid_570288 = path.getOrDefault("slot")
  valid_570288 = validateParameter(valid_570288, JString, required = true,
                                 default = nil)
  if valid_570288 != nil:
    section.add "slot", valid_570288
  var valid_570289 = path.getOrDefault("subscriptionId")
  valid_570289 = validateParameter(valid_570289, JString, required = true,
                                 default = nil)
  if valid_570289 != nil:
    section.add "subscriptionId", valid_570289
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570290 = query.getOrDefault("api-version")
  valid_570290 = validateParameter(valid_570290, JString, required = true,
                                 default = nil)
  if valid_570290 != nil:
    section.add "api-version", valid_570290
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570291: Call_WebAppsGetWebSiteContainerLogsZipSlot_570283;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_570291.validator(path, query, header, formData, body)
  let scheme = call_570291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570291.url(scheme.get, call_570291.host, call_570291.base,
                         call_570291.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570291, url, valid)

proc call*(call_570292: Call_WebAppsGetWebSiteContainerLogsZipSlot_570283;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsZipSlot
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570293 = newJObject()
  var query_570294 = newJObject()
  add(path_570293, "resourceGroupName", newJString(resourceGroupName))
  add(query_570294, "api-version", newJString(apiVersion))
  add(path_570293, "name", newJString(name))
  add(path_570293, "slot", newJString(slot))
  add(path_570293, "subscriptionId", newJString(subscriptionId))
  result = call_570292.call(path_570293, query_570294, nil, nil, nil)

var webAppsGetWebSiteContainerLogsZipSlot* = Call_WebAppsGetWebSiteContainerLogsZipSlot_570283(
    name: "webAppsGetWebSiteContainerLogsZipSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    validator: validate_WebAppsGetWebSiteContainerLogsZipSlot_570284, base: "",
    url: url_WebAppsGetWebSiteContainerLogsZipSlot_570285, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobsSlot_570295 = ref object of OpenApiRestCall_567666
proc url_WebAppsListContinuousWebJobsSlot_570297(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobsSlot_570296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570298 = path.getOrDefault("resourceGroupName")
  valid_570298 = validateParameter(valid_570298, JString, required = true,
                                 default = nil)
  if valid_570298 != nil:
    section.add "resourceGroupName", valid_570298
  var valid_570299 = path.getOrDefault("name")
  valid_570299 = validateParameter(valid_570299, JString, required = true,
                                 default = nil)
  if valid_570299 != nil:
    section.add "name", valid_570299
  var valid_570300 = path.getOrDefault("slot")
  valid_570300 = validateParameter(valid_570300, JString, required = true,
                                 default = nil)
  if valid_570300 != nil:
    section.add "slot", valid_570300
  var valid_570301 = path.getOrDefault("subscriptionId")
  valid_570301 = validateParameter(valid_570301, JString, required = true,
                                 default = nil)
  if valid_570301 != nil:
    section.add "subscriptionId", valid_570301
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570302 = query.getOrDefault("api-version")
  valid_570302 = validateParameter(valid_570302, JString, required = true,
                                 default = nil)
  if valid_570302 != nil:
    section.add "api-version", valid_570302
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570303: Call_WebAppsListContinuousWebJobsSlot_570295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_570303.validator(path, query, header, formData, body)
  let scheme = call_570303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570303.url(scheme.get, call_570303.host, call_570303.base,
                         call_570303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570303, url, valid)

proc call*(call_570304: Call_WebAppsListContinuousWebJobsSlot_570295;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobsSlot
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570305 = newJObject()
  var query_570306 = newJObject()
  add(path_570305, "resourceGroupName", newJString(resourceGroupName))
  add(query_570306, "api-version", newJString(apiVersion))
  add(path_570305, "name", newJString(name))
  add(path_570305, "slot", newJString(slot))
  add(path_570305, "subscriptionId", newJString(subscriptionId))
  result = call_570304.call(path_570305, query_570306, nil, nil, nil)

var webAppsListContinuousWebJobsSlot* = Call_WebAppsListContinuousWebJobsSlot_570295(
    name: "webAppsListContinuousWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobsSlot_570296, base: "",
    url: url_WebAppsListContinuousWebJobsSlot_570297, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJobSlot_570307 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetContinuousWebJobSlot_570309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJobSlot_570308(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570310 = path.getOrDefault("resourceGroupName")
  valid_570310 = validateParameter(valid_570310, JString, required = true,
                                 default = nil)
  if valid_570310 != nil:
    section.add "resourceGroupName", valid_570310
  var valid_570311 = path.getOrDefault("name")
  valid_570311 = validateParameter(valid_570311, JString, required = true,
                                 default = nil)
  if valid_570311 != nil:
    section.add "name", valid_570311
  var valid_570312 = path.getOrDefault("slot")
  valid_570312 = validateParameter(valid_570312, JString, required = true,
                                 default = nil)
  if valid_570312 != nil:
    section.add "slot", valid_570312
  var valid_570313 = path.getOrDefault("subscriptionId")
  valid_570313 = validateParameter(valid_570313, JString, required = true,
                                 default = nil)
  if valid_570313 != nil:
    section.add "subscriptionId", valid_570313
  var valid_570314 = path.getOrDefault("webJobName")
  valid_570314 = validateParameter(valid_570314, JString, required = true,
                                 default = nil)
  if valid_570314 != nil:
    section.add "webJobName", valid_570314
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570315 = query.getOrDefault("api-version")
  valid_570315 = validateParameter(valid_570315, JString, required = true,
                                 default = nil)
  if valid_570315 != nil:
    section.add "api-version", valid_570315
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570316: Call_WebAppsGetContinuousWebJobSlot_570307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570316.validator(path, query, header, formData, body)
  let scheme = call_570316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570316.url(scheme.get, call_570316.host, call_570316.base,
                         call_570316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570316, url, valid)

proc call*(call_570317: Call_WebAppsGetContinuousWebJobSlot_570307;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJobSlot
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570318 = newJObject()
  var query_570319 = newJObject()
  add(path_570318, "resourceGroupName", newJString(resourceGroupName))
  add(query_570319, "api-version", newJString(apiVersion))
  add(path_570318, "name", newJString(name))
  add(path_570318, "slot", newJString(slot))
  add(path_570318, "subscriptionId", newJString(subscriptionId))
  add(path_570318, "webJobName", newJString(webJobName))
  result = call_570317.call(path_570318, query_570319, nil, nil, nil)

var webAppsGetContinuousWebJobSlot* = Call_WebAppsGetContinuousWebJobSlot_570307(
    name: "webAppsGetContinuousWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJobSlot_570308, base: "",
    url: url_WebAppsGetContinuousWebJobSlot_570309, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJobSlot_570320 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteContinuousWebJobSlot_570322(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJobSlot_570321(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570323 = path.getOrDefault("resourceGroupName")
  valid_570323 = validateParameter(valid_570323, JString, required = true,
                                 default = nil)
  if valid_570323 != nil:
    section.add "resourceGroupName", valid_570323
  var valid_570324 = path.getOrDefault("name")
  valid_570324 = validateParameter(valid_570324, JString, required = true,
                                 default = nil)
  if valid_570324 != nil:
    section.add "name", valid_570324
  var valid_570325 = path.getOrDefault("slot")
  valid_570325 = validateParameter(valid_570325, JString, required = true,
                                 default = nil)
  if valid_570325 != nil:
    section.add "slot", valid_570325
  var valid_570326 = path.getOrDefault("subscriptionId")
  valid_570326 = validateParameter(valid_570326, JString, required = true,
                                 default = nil)
  if valid_570326 != nil:
    section.add "subscriptionId", valid_570326
  var valid_570327 = path.getOrDefault("webJobName")
  valid_570327 = validateParameter(valid_570327, JString, required = true,
                                 default = nil)
  if valid_570327 != nil:
    section.add "webJobName", valid_570327
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570328 = query.getOrDefault("api-version")
  valid_570328 = validateParameter(valid_570328, JString, required = true,
                                 default = nil)
  if valid_570328 != nil:
    section.add "api-version", valid_570328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570329: Call_WebAppsDeleteContinuousWebJobSlot_570320;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570329.validator(path, query, header, formData, body)
  let scheme = call_570329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570329.url(scheme.get, call_570329.host, call_570329.base,
                         call_570329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570329, url, valid)

proc call*(call_570330: Call_WebAppsDeleteContinuousWebJobSlot_570320;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJobSlot
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570331 = newJObject()
  var query_570332 = newJObject()
  add(path_570331, "resourceGroupName", newJString(resourceGroupName))
  add(query_570332, "api-version", newJString(apiVersion))
  add(path_570331, "name", newJString(name))
  add(path_570331, "slot", newJString(slot))
  add(path_570331, "subscriptionId", newJString(subscriptionId))
  add(path_570331, "webJobName", newJString(webJobName))
  result = call_570330.call(path_570331, query_570332, nil, nil, nil)

var webAppsDeleteContinuousWebJobSlot* = Call_WebAppsDeleteContinuousWebJobSlot_570320(
    name: "webAppsDeleteContinuousWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJobSlot_570321, base: "",
    url: url_WebAppsDeleteContinuousWebJobSlot_570322, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJobSlot_570333 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartContinuousWebJobSlot_570335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJobSlot_570334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570336 = path.getOrDefault("resourceGroupName")
  valid_570336 = validateParameter(valid_570336, JString, required = true,
                                 default = nil)
  if valid_570336 != nil:
    section.add "resourceGroupName", valid_570336
  var valid_570337 = path.getOrDefault("name")
  valid_570337 = validateParameter(valid_570337, JString, required = true,
                                 default = nil)
  if valid_570337 != nil:
    section.add "name", valid_570337
  var valid_570338 = path.getOrDefault("slot")
  valid_570338 = validateParameter(valid_570338, JString, required = true,
                                 default = nil)
  if valid_570338 != nil:
    section.add "slot", valid_570338
  var valid_570339 = path.getOrDefault("subscriptionId")
  valid_570339 = validateParameter(valid_570339, JString, required = true,
                                 default = nil)
  if valid_570339 != nil:
    section.add "subscriptionId", valid_570339
  var valid_570340 = path.getOrDefault("webJobName")
  valid_570340 = validateParameter(valid_570340, JString, required = true,
                                 default = nil)
  if valid_570340 != nil:
    section.add "webJobName", valid_570340
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570341 = query.getOrDefault("api-version")
  valid_570341 = validateParameter(valid_570341, JString, required = true,
                                 default = nil)
  if valid_570341 != nil:
    section.add "api-version", valid_570341
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570342: Call_WebAppsStartContinuousWebJobSlot_570333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_570342.validator(path, query, header, formData, body)
  let scheme = call_570342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570342.url(scheme.get, call_570342.host, call_570342.base,
                         call_570342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570342, url, valid)

proc call*(call_570343: Call_WebAppsStartContinuousWebJobSlot_570333;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJobSlot
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570344 = newJObject()
  var query_570345 = newJObject()
  add(path_570344, "resourceGroupName", newJString(resourceGroupName))
  add(query_570345, "api-version", newJString(apiVersion))
  add(path_570344, "name", newJString(name))
  add(path_570344, "slot", newJString(slot))
  add(path_570344, "subscriptionId", newJString(subscriptionId))
  add(path_570344, "webJobName", newJString(webJobName))
  result = call_570343.call(path_570344, query_570345, nil, nil, nil)

var webAppsStartContinuousWebJobSlot* = Call_WebAppsStartContinuousWebJobSlot_570333(
    name: "webAppsStartContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJobSlot_570334, base: "",
    url: url_WebAppsStartContinuousWebJobSlot_570335, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJobSlot_570346 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopContinuousWebJobSlot_570348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJobSlot_570347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570349 = path.getOrDefault("resourceGroupName")
  valid_570349 = validateParameter(valid_570349, JString, required = true,
                                 default = nil)
  if valid_570349 != nil:
    section.add "resourceGroupName", valid_570349
  var valid_570350 = path.getOrDefault("name")
  valid_570350 = validateParameter(valid_570350, JString, required = true,
                                 default = nil)
  if valid_570350 != nil:
    section.add "name", valid_570350
  var valid_570351 = path.getOrDefault("slot")
  valid_570351 = validateParameter(valid_570351, JString, required = true,
                                 default = nil)
  if valid_570351 != nil:
    section.add "slot", valid_570351
  var valid_570352 = path.getOrDefault("subscriptionId")
  valid_570352 = validateParameter(valid_570352, JString, required = true,
                                 default = nil)
  if valid_570352 != nil:
    section.add "subscriptionId", valid_570352
  var valid_570353 = path.getOrDefault("webJobName")
  valid_570353 = validateParameter(valid_570353, JString, required = true,
                                 default = nil)
  if valid_570353 != nil:
    section.add "webJobName", valid_570353
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570354 = query.getOrDefault("api-version")
  valid_570354 = validateParameter(valid_570354, JString, required = true,
                                 default = nil)
  if valid_570354 != nil:
    section.add "api-version", valid_570354
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570355: Call_WebAppsStopContinuousWebJobSlot_570346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_570355.validator(path, query, header, formData, body)
  let scheme = call_570355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570355.url(scheme.get, call_570355.host, call_570355.base,
                         call_570355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570355, url, valid)

proc call*(call_570356: Call_WebAppsStopContinuousWebJobSlot_570346;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJobSlot
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570357 = newJObject()
  var query_570358 = newJObject()
  add(path_570357, "resourceGroupName", newJString(resourceGroupName))
  add(query_570358, "api-version", newJString(apiVersion))
  add(path_570357, "name", newJString(name))
  add(path_570357, "slot", newJString(slot))
  add(path_570357, "subscriptionId", newJString(subscriptionId))
  add(path_570357, "webJobName", newJString(webJobName))
  result = call_570356.call(path_570357, query_570358, nil, nil, nil)

var webAppsStopContinuousWebJobSlot* = Call_WebAppsStopContinuousWebJobSlot_570346(
    name: "webAppsStopContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJobSlot_570347, base: "",
    url: url_WebAppsStopContinuousWebJobSlot_570348, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentsSlot_570359 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeploymentsSlot_570361(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentsSlot_570360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570362 = path.getOrDefault("resourceGroupName")
  valid_570362 = validateParameter(valid_570362, JString, required = true,
                                 default = nil)
  if valid_570362 != nil:
    section.add "resourceGroupName", valid_570362
  var valid_570363 = path.getOrDefault("name")
  valid_570363 = validateParameter(valid_570363, JString, required = true,
                                 default = nil)
  if valid_570363 != nil:
    section.add "name", valid_570363
  var valid_570364 = path.getOrDefault("slot")
  valid_570364 = validateParameter(valid_570364, JString, required = true,
                                 default = nil)
  if valid_570364 != nil:
    section.add "slot", valid_570364
  var valid_570365 = path.getOrDefault("subscriptionId")
  valid_570365 = validateParameter(valid_570365, JString, required = true,
                                 default = nil)
  if valid_570365 != nil:
    section.add "subscriptionId", valid_570365
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570366 = query.getOrDefault("api-version")
  valid_570366 = validateParameter(valid_570366, JString, required = true,
                                 default = nil)
  if valid_570366 != nil:
    section.add "api-version", valid_570366
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570367: Call_WebAppsListDeploymentsSlot_570359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_570367.validator(path, query, header, formData, body)
  let scheme = call_570367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570367.url(scheme.get, call_570367.host, call_570367.base,
                         call_570367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570367, url, valid)

proc call*(call_570368: Call_WebAppsListDeploymentsSlot_570359;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeploymentsSlot
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570369 = newJObject()
  var query_570370 = newJObject()
  add(path_570369, "resourceGroupName", newJString(resourceGroupName))
  add(query_570370, "api-version", newJString(apiVersion))
  add(path_570369, "name", newJString(name))
  add(path_570369, "slot", newJString(slot))
  add(path_570369, "subscriptionId", newJString(subscriptionId))
  result = call_570368.call(path_570369, query_570370, nil, nil, nil)

var webAppsListDeploymentsSlot* = Call_WebAppsListDeploymentsSlot_570359(
    name: "webAppsListDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_WebAppsListDeploymentsSlot_570360, base: "",
    url: url_WebAppsListDeploymentsSlot_570361, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeploymentSlot_570384 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateDeploymentSlot_570386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeploymentSlot_570385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570387 = path.getOrDefault("resourceGroupName")
  valid_570387 = validateParameter(valid_570387, JString, required = true,
                                 default = nil)
  if valid_570387 != nil:
    section.add "resourceGroupName", valid_570387
  var valid_570388 = path.getOrDefault("name")
  valid_570388 = validateParameter(valid_570388, JString, required = true,
                                 default = nil)
  if valid_570388 != nil:
    section.add "name", valid_570388
  var valid_570389 = path.getOrDefault("slot")
  valid_570389 = validateParameter(valid_570389, JString, required = true,
                                 default = nil)
  if valid_570389 != nil:
    section.add "slot", valid_570389
  var valid_570390 = path.getOrDefault("subscriptionId")
  valid_570390 = validateParameter(valid_570390, JString, required = true,
                                 default = nil)
  if valid_570390 != nil:
    section.add "subscriptionId", valid_570390
  var valid_570391 = path.getOrDefault("id")
  valid_570391 = validateParameter(valid_570391, JString, required = true,
                                 default = nil)
  if valid_570391 != nil:
    section.add "id", valid_570391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570392 = query.getOrDefault("api-version")
  valid_570392 = validateParameter(valid_570392, JString, required = true,
                                 default = nil)
  if valid_570392 != nil:
    section.add "api-version", valid_570392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570394: Call_WebAppsCreateDeploymentSlot_570384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_570394.validator(path, query, header, formData, body)
  let scheme = call_570394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570394.url(scheme.get, call_570394.host, call_570394.base,
                         call_570394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570394, url, valid)

proc call*(call_570395: Call_WebAppsCreateDeploymentSlot_570384;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeploymentSlot
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_570396 = newJObject()
  var query_570397 = newJObject()
  var body_570398 = newJObject()
  add(path_570396, "resourceGroupName", newJString(resourceGroupName))
  add(query_570397, "api-version", newJString(apiVersion))
  add(path_570396, "name", newJString(name))
  add(path_570396, "slot", newJString(slot))
  add(path_570396, "subscriptionId", newJString(subscriptionId))
  add(path_570396, "id", newJString(id))
  if deployment != nil:
    body_570398 = deployment
  result = call_570395.call(path_570396, query_570397, nil, nil, body_570398)

var webAppsCreateDeploymentSlot* = Call_WebAppsCreateDeploymentSlot_570384(
    name: "webAppsCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsCreateDeploymentSlot_570385, base: "",
    url: url_WebAppsCreateDeploymentSlot_570386, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeploymentSlot_570371 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDeploymentSlot_570373(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeploymentSlot_570372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570374 = path.getOrDefault("resourceGroupName")
  valid_570374 = validateParameter(valid_570374, JString, required = true,
                                 default = nil)
  if valid_570374 != nil:
    section.add "resourceGroupName", valid_570374
  var valid_570375 = path.getOrDefault("name")
  valid_570375 = validateParameter(valid_570375, JString, required = true,
                                 default = nil)
  if valid_570375 != nil:
    section.add "name", valid_570375
  var valid_570376 = path.getOrDefault("slot")
  valid_570376 = validateParameter(valid_570376, JString, required = true,
                                 default = nil)
  if valid_570376 != nil:
    section.add "slot", valid_570376
  var valid_570377 = path.getOrDefault("subscriptionId")
  valid_570377 = validateParameter(valid_570377, JString, required = true,
                                 default = nil)
  if valid_570377 != nil:
    section.add "subscriptionId", valid_570377
  var valid_570378 = path.getOrDefault("id")
  valid_570378 = validateParameter(valid_570378, JString, required = true,
                                 default = nil)
  if valid_570378 != nil:
    section.add "id", valid_570378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570379 = query.getOrDefault("api-version")
  valid_570379 = validateParameter(valid_570379, JString, required = true,
                                 default = nil)
  if valid_570379 != nil:
    section.add "api-version", valid_570379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570380: Call_WebAppsGetDeploymentSlot_570371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570380.validator(path, query, header, formData, body)
  let scheme = call_570380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570380.url(scheme.get, call_570380.host, call_570380.base,
                         call_570380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570380, url, valid)

proc call*(call_570381: Call_WebAppsGetDeploymentSlot_570371;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeploymentSlot
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_570382 = newJObject()
  var query_570383 = newJObject()
  add(path_570382, "resourceGroupName", newJString(resourceGroupName))
  add(query_570383, "api-version", newJString(apiVersion))
  add(path_570382, "name", newJString(name))
  add(path_570382, "slot", newJString(slot))
  add(path_570382, "subscriptionId", newJString(subscriptionId))
  add(path_570382, "id", newJString(id))
  result = call_570381.call(path_570382, query_570383, nil, nil, nil)

var webAppsGetDeploymentSlot* = Call_WebAppsGetDeploymentSlot_570371(
    name: "webAppsGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsGetDeploymentSlot_570372, base: "",
    url: url_WebAppsGetDeploymentSlot_570373, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeploymentSlot_570399 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDeploymentSlot_570401(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeploymentSlot_570400(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570402 = path.getOrDefault("resourceGroupName")
  valid_570402 = validateParameter(valid_570402, JString, required = true,
                                 default = nil)
  if valid_570402 != nil:
    section.add "resourceGroupName", valid_570402
  var valid_570403 = path.getOrDefault("name")
  valid_570403 = validateParameter(valid_570403, JString, required = true,
                                 default = nil)
  if valid_570403 != nil:
    section.add "name", valid_570403
  var valid_570404 = path.getOrDefault("slot")
  valid_570404 = validateParameter(valid_570404, JString, required = true,
                                 default = nil)
  if valid_570404 != nil:
    section.add "slot", valid_570404
  var valid_570405 = path.getOrDefault("subscriptionId")
  valid_570405 = validateParameter(valid_570405, JString, required = true,
                                 default = nil)
  if valid_570405 != nil:
    section.add "subscriptionId", valid_570405
  var valid_570406 = path.getOrDefault("id")
  valid_570406 = validateParameter(valid_570406, JString, required = true,
                                 default = nil)
  if valid_570406 != nil:
    section.add "id", valid_570406
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570407 = query.getOrDefault("api-version")
  valid_570407 = validateParameter(valid_570407, JString, required = true,
                                 default = nil)
  if valid_570407 != nil:
    section.add "api-version", valid_570407
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570408: Call_WebAppsDeleteDeploymentSlot_570399; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570408.validator(path, query, header, formData, body)
  let scheme = call_570408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570408.url(scheme.get, call_570408.host, call_570408.base,
                         call_570408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570408, url, valid)

proc call*(call_570409: Call_WebAppsDeleteDeploymentSlot_570399;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeploymentSlot
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_570410 = newJObject()
  var query_570411 = newJObject()
  add(path_570410, "resourceGroupName", newJString(resourceGroupName))
  add(query_570411, "api-version", newJString(apiVersion))
  add(path_570410, "name", newJString(name))
  add(path_570410, "slot", newJString(slot))
  add(path_570410, "subscriptionId", newJString(subscriptionId))
  add(path_570410, "id", newJString(id))
  result = call_570409.call(path_570410, query_570411, nil, nil, nil)

var webAppsDeleteDeploymentSlot* = Call_WebAppsDeleteDeploymentSlot_570399(
    name: "webAppsDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsDeleteDeploymentSlot_570400, base: "",
    url: url_WebAppsDeleteDeploymentSlot_570401, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLogSlot_570412 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeploymentLogSlot_570414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLogSlot_570413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570415 = path.getOrDefault("resourceGroupName")
  valid_570415 = validateParameter(valid_570415, JString, required = true,
                                 default = nil)
  if valid_570415 != nil:
    section.add "resourceGroupName", valid_570415
  var valid_570416 = path.getOrDefault("name")
  valid_570416 = validateParameter(valid_570416, JString, required = true,
                                 default = nil)
  if valid_570416 != nil:
    section.add "name", valid_570416
  var valid_570417 = path.getOrDefault("slot")
  valid_570417 = validateParameter(valid_570417, JString, required = true,
                                 default = nil)
  if valid_570417 != nil:
    section.add "slot", valid_570417
  var valid_570418 = path.getOrDefault("subscriptionId")
  valid_570418 = validateParameter(valid_570418, JString, required = true,
                                 default = nil)
  if valid_570418 != nil:
    section.add "subscriptionId", valid_570418
  var valid_570419 = path.getOrDefault("id")
  valid_570419 = validateParameter(valid_570419, JString, required = true,
                                 default = nil)
  if valid_570419 != nil:
    section.add "id", valid_570419
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570420 = query.getOrDefault("api-version")
  valid_570420 = validateParameter(valid_570420, JString, required = true,
                                 default = nil)
  if valid_570420 != nil:
    section.add "api-version", valid_570420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570421: Call_WebAppsListDeploymentLogSlot_570412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_570421.validator(path, query, header, formData, body)
  let scheme = call_570421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570421.url(scheme.get, call_570421.host, call_570421.base,
                         call_570421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570421, url, valid)

proc call*(call_570422: Call_WebAppsListDeploymentLogSlot_570412;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLogSlot
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_570423 = newJObject()
  var query_570424 = newJObject()
  add(path_570423, "resourceGroupName", newJString(resourceGroupName))
  add(query_570424, "api-version", newJString(apiVersion))
  add(path_570423, "name", newJString(name))
  add(path_570423, "slot", newJString(slot))
  add(path_570423, "subscriptionId", newJString(subscriptionId))
  add(path_570423, "id", newJString(id))
  result = call_570422.call(path_570423, query_570424, nil, nil, nil)

var webAppsListDeploymentLogSlot* = Call_WebAppsListDeploymentLogSlot_570412(
    name: "webAppsListDeploymentLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLogSlot_570413, base: "",
    url: url_WebAppsListDeploymentLogSlot_570414, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiersSlot_570425 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDomainOwnershipIdentifiersSlot_570427(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiersSlot_570426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570428 = path.getOrDefault("resourceGroupName")
  valid_570428 = validateParameter(valid_570428, JString, required = true,
                                 default = nil)
  if valid_570428 != nil:
    section.add "resourceGroupName", valid_570428
  var valid_570429 = path.getOrDefault("name")
  valid_570429 = validateParameter(valid_570429, JString, required = true,
                                 default = nil)
  if valid_570429 != nil:
    section.add "name", valid_570429
  var valid_570430 = path.getOrDefault("slot")
  valid_570430 = validateParameter(valid_570430, JString, required = true,
                                 default = nil)
  if valid_570430 != nil:
    section.add "slot", valid_570430
  var valid_570431 = path.getOrDefault("subscriptionId")
  valid_570431 = validateParameter(valid_570431, JString, required = true,
                                 default = nil)
  if valid_570431 != nil:
    section.add "subscriptionId", valid_570431
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570432 = query.getOrDefault("api-version")
  valid_570432 = validateParameter(valid_570432, JString, required = true,
                                 default = nil)
  if valid_570432 != nil:
    section.add "api-version", valid_570432
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570433: Call_WebAppsListDomainOwnershipIdentifiersSlot_570425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_570433.validator(path, query, header, formData, body)
  let scheme = call_570433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570433.url(scheme.get, call_570433.host, call_570433.base,
                         call_570433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570433, url, valid)

proc call*(call_570434: Call_WebAppsListDomainOwnershipIdentifiersSlot_570425;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiersSlot
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570435 = newJObject()
  var query_570436 = newJObject()
  add(path_570435, "resourceGroupName", newJString(resourceGroupName))
  add(query_570436, "api-version", newJString(apiVersion))
  add(path_570435, "name", newJString(name))
  add(path_570435, "slot", newJString(slot))
  add(path_570435, "subscriptionId", newJString(subscriptionId))
  result = call_570434.call(path_570435, query_570436, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiersSlot* = Call_WebAppsListDomainOwnershipIdentifiersSlot_570425(
    name: "webAppsListDomainOwnershipIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiersSlot_570426,
    base: "", url: url_WebAppsListDomainOwnershipIdentifiersSlot_570427,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570450 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570452(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570451(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570453 = path.getOrDefault("resourceGroupName")
  valid_570453 = validateParameter(valid_570453, JString, required = true,
                                 default = nil)
  if valid_570453 != nil:
    section.add "resourceGroupName", valid_570453
  var valid_570454 = path.getOrDefault("name")
  valid_570454 = validateParameter(valid_570454, JString, required = true,
                                 default = nil)
  if valid_570454 != nil:
    section.add "name", valid_570454
  var valid_570455 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570455 = validateParameter(valid_570455, JString, required = true,
                                 default = nil)
  if valid_570455 != nil:
    section.add "domainOwnershipIdentifierName", valid_570455
  var valid_570456 = path.getOrDefault("slot")
  valid_570456 = validateParameter(valid_570456, JString, required = true,
                                 default = nil)
  if valid_570456 != nil:
    section.add "slot", valid_570456
  var valid_570457 = path.getOrDefault("subscriptionId")
  valid_570457 = validateParameter(valid_570457, JString, required = true,
                                 default = nil)
  if valid_570457 != nil:
    section.add "subscriptionId", valid_570457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570458 = query.getOrDefault("api-version")
  valid_570458 = validateParameter(valid_570458, JString, required = true,
                                 default = nil)
  if valid_570458 != nil:
    section.add "api-version", valid_570458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570460: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570450;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_570460.validator(path, query, header, formData, body)
  let scheme = call_570460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570460.url(scheme.get, call_570460.host, call_570460.base,
                         call_570460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570460, url, valid)

proc call*(call_570461: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570450;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570462 = newJObject()
  var query_570463 = newJObject()
  var body_570464 = newJObject()
  add(path_570462, "resourceGroupName", newJString(resourceGroupName))
  add(query_570463, "api-version", newJString(apiVersion))
  add(path_570462, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_570464 = domainOwnershipIdentifier
  add(path_570462, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570462, "slot", newJString(slot))
  add(path_570462, "subscriptionId", newJString(subscriptionId))
  result = call_570461.call(path_570462, query_570463, nil, nil, body_570464)

var webAppsCreateOrUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570450(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570451,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570452,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifierSlot_570437 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDomainOwnershipIdentifierSlot_570439(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifierSlot_570438(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570440 = path.getOrDefault("resourceGroupName")
  valid_570440 = validateParameter(valid_570440, JString, required = true,
                                 default = nil)
  if valid_570440 != nil:
    section.add "resourceGroupName", valid_570440
  var valid_570441 = path.getOrDefault("name")
  valid_570441 = validateParameter(valid_570441, JString, required = true,
                                 default = nil)
  if valid_570441 != nil:
    section.add "name", valid_570441
  var valid_570442 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570442 = validateParameter(valid_570442, JString, required = true,
                                 default = nil)
  if valid_570442 != nil:
    section.add "domainOwnershipIdentifierName", valid_570442
  var valid_570443 = path.getOrDefault("slot")
  valid_570443 = validateParameter(valid_570443, JString, required = true,
                                 default = nil)
  if valid_570443 != nil:
    section.add "slot", valid_570443
  var valid_570444 = path.getOrDefault("subscriptionId")
  valid_570444 = validateParameter(valid_570444, JString, required = true,
                                 default = nil)
  if valid_570444 != nil:
    section.add "subscriptionId", valid_570444
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570445 = query.getOrDefault("api-version")
  valid_570445 = validateParameter(valid_570445, JString, required = true,
                                 default = nil)
  if valid_570445 != nil:
    section.add "api-version", valid_570445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570446: Call_WebAppsGetDomainOwnershipIdentifierSlot_570437;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_570446.validator(path, query, header, formData, body)
  let scheme = call_570446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570446.url(scheme.get, call_570446.host, call_570446.base,
                         call_570446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570446, url, valid)

proc call*(call_570447: Call_WebAppsGetDomainOwnershipIdentifierSlot_570437;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifierSlot
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570448 = newJObject()
  var query_570449 = newJObject()
  add(path_570448, "resourceGroupName", newJString(resourceGroupName))
  add(query_570449, "api-version", newJString(apiVersion))
  add(path_570448, "name", newJString(name))
  add(path_570448, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570448, "slot", newJString(slot))
  add(path_570448, "subscriptionId", newJString(subscriptionId))
  result = call_570447.call(path_570448, query_570449, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifierSlot* = Call_WebAppsGetDomainOwnershipIdentifierSlot_570437(
    name: "webAppsGetDomainOwnershipIdentifierSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifierSlot_570438, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifierSlot_570439,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570478 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDomainOwnershipIdentifierSlot_570480(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifierSlot_570479(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570481 = path.getOrDefault("resourceGroupName")
  valid_570481 = validateParameter(valid_570481, JString, required = true,
                                 default = nil)
  if valid_570481 != nil:
    section.add "resourceGroupName", valid_570481
  var valid_570482 = path.getOrDefault("name")
  valid_570482 = validateParameter(valid_570482, JString, required = true,
                                 default = nil)
  if valid_570482 != nil:
    section.add "name", valid_570482
  var valid_570483 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570483 = validateParameter(valid_570483, JString, required = true,
                                 default = nil)
  if valid_570483 != nil:
    section.add "domainOwnershipIdentifierName", valid_570483
  var valid_570484 = path.getOrDefault("slot")
  valid_570484 = validateParameter(valid_570484, JString, required = true,
                                 default = nil)
  if valid_570484 != nil:
    section.add "slot", valid_570484
  var valid_570485 = path.getOrDefault("subscriptionId")
  valid_570485 = validateParameter(valid_570485, JString, required = true,
                                 default = nil)
  if valid_570485 != nil:
    section.add "subscriptionId", valid_570485
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570486 = query.getOrDefault("api-version")
  valid_570486 = validateParameter(valid_570486, JString, required = true,
                                 default = nil)
  if valid_570486 != nil:
    section.add "api-version", valid_570486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570488: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570478;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_570488.validator(path, query, header, formData, body)
  let scheme = call_570488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570488.url(scheme.get, call_570488.host, call_570488.base,
                         call_570488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570488, url, valid)

proc call*(call_570489: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570478;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570490 = newJObject()
  var query_570491 = newJObject()
  var body_570492 = newJObject()
  add(path_570490, "resourceGroupName", newJString(resourceGroupName))
  add(query_570491, "api-version", newJString(apiVersion))
  add(path_570490, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_570492 = domainOwnershipIdentifier
  add(path_570490, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570490, "slot", newJString(slot))
  add(path_570490, "subscriptionId", newJString(subscriptionId))
  result = call_570489.call(path_570490, query_570491, nil, nil, body_570492)

var webAppsUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570478(
    name: "webAppsUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifierSlot_570479,
    base: "", url: url_WebAppsUpdateDomainOwnershipIdentifierSlot_570480,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570465 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDomainOwnershipIdentifierSlot_570467(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifierSlot_570466(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570468 = path.getOrDefault("resourceGroupName")
  valid_570468 = validateParameter(valid_570468, JString, required = true,
                                 default = nil)
  if valid_570468 != nil:
    section.add "resourceGroupName", valid_570468
  var valid_570469 = path.getOrDefault("name")
  valid_570469 = validateParameter(valid_570469, JString, required = true,
                                 default = nil)
  if valid_570469 != nil:
    section.add "name", valid_570469
  var valid_570470 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570470 = validateParameter(valid_570470, JString, required = true,
                                 default = nil)
  if valid_570470 != nil:
    section.add "domainOwnershipIdentifierName", valid_570470
  var valid_570471 = path.getOrDefault("slot")
  valid_570471 = validateParameter(valid_570471, JString, required = true,
                                 default = nil)
  if valid_570471 != nil:
    section.add "slot", valid_570471
  var valid_570472 = path.getOrDefault("subscriptionId")
  valid_570472 = validateParameter(valid_570472, JString, required = true,
                                 default = nil)
  if valid_570472 != nil:
    section.add "subscriptionId", valid_570472
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570473 = query.getOrDefault("api-version")
  valid_570473 = validateParameter(valid_570473, JString, required = true,
                                 default = nil)
  if valid_570473 != nil:
    section.add "api-version", valid_570473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570474: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570465;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_570474.validator(path, query, header, formData, body)
  let scheme = call_570474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570474.url(scheme.get, call_570474.host, call_570474.base,
                         call_570474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570474, url, valid)

proc call*(call_570475: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570465;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifierSlot
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570476 = newJObject()
  var query_570477 = newJObject()
  add(path_570476, "resourceGroupName", newJString(resourceGroupName))
  add(query_570477, "api-version", newJString(apiVersion))
  add(path_570476, "name", newJString(name))
  add(path_570476, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570476, "slot", newJString(slot))
  add(path_570476, "subscriptionId", newJString(subscriptionId))
  result = call_570475.call(path_570476, query_570477, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifierSlot* = Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570465(
    name: "webAppsDeleteDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifierSlot_570466,
    base: "", url: url_WebAppsDeleteDomainOwnershipIdentifierSlot_570467,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperationSlot_570505 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateMSDeployOperationSlot_570507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperationSlot_570506(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570508 = path.getOrDefault("resourceGroupName")
  valid_570508 = validateParameter(valid_570508, JString, required = true,
                                 default = nil)
  if valid_570508 != nil:
    section.add "resourceGroupName", valid_570508
  var valid_570509 = path.getOrDefault("name")
  valid_570509 = validateParameter(valid_570509, JString, required = true,
                                 default = nil)
  if valid_570509 != nil:
    section.add "name", valid_570509
  var valid_570510 = path.getOrDefault("slot")
  valid_570510 = validateParameter(valid_570510, JString, required = true,
                                 default = nil)
  if valid_570510 != nil:
    section.add "slot", valid_570510
  var valid_570511 = path.getOrDefault("subscriptionId")
  valid_570511 = validateParameter(valid_570511, JString, required = true,
                                 default = nil)
  if valid_570511 != nil:
    section.add "subscriptionId", valid_570511
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570512 = query.getOrDefault("api-version")
  valid_570512 = validateParameter(valid_570512, JString, required = true,
                                 default = nil)
  if valid_570512 != nil:
    section.add "api-version", valid_570512
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570514: Call_WebAppsCreateMSDeployOperationSlot_570505;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_570514.validator(path, query, header, formData, body)
  let scheme = call_570514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570514.url(scheme.get, call_570514.host, call_570514.base,
                         call_570514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570514, url, valid)

proc call*(call_570515: Call_WebAppsCreateMSDeployOperationSlot_570505;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_570516 = newJObject()
  var query_570517 = newJObject()
  var body_570518 = newJObject()
  add(path_570516, "resourceGroupName", newJString(resourceGroupName))
  add(query_570517, "api-version", newJString(apiVersion))
  add(path_570516, "name", newJString(name))
  add(path_570516, "slot", newJString(slot))
  add(path_570516, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_570518 = MSDeploy
  result = call_570515.call(path_570516, query_570517, nil, nil, body_570518)

var webAppsCreateMSDeployOperationSlot* = Call_WebAppsCreateMSDeployOperationSlot_570505(
    name: "webAppsCreateMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperationSlot_570506, base: "",
    url: url_WebAppsCreateMSDeployOperationSlot_570507, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatusSlot_570493 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployStatusSlot_570495(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatusSlot_570494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570496 = path.getOrDefault("resourceGroupName")
  valid_570496 = validateParameter(valid_570496, JString, required = true,
                                 default = nil)
  if valid_570496 != nil:
    section.add "resourceGroupName", valid_570496
  var valid_570497 = path.getOrDefault("name")
  valid_570497 = validateParameter(valid_570497, JString, required = true,
                                 default = nil)
  if valid_570497 != nil:
    section.add "name", valid_570497
  var valid_570498 = path.getOrDefault("slot")
  valid_570498 = validateParameter(valid_570498, JString, required = true,
                                 default = nil)
  if valid_570498 != nil:
    section.add "slot", valid_570498
  var valid_570499 = path.getOrDefault("subscriptionId")
  valid_570499 = validateParameter(valid_570499, JString, required = true,
                                 default = nil)
  if valid_570499 != nil:
    section.add "subscriptionId", valid_570499
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570500 = query.getOrDefault("api-version")
  valid_570500 = validateParameter(valid_570500, JString, required = true,
                                 default = nil)
  if valid_570500 != nil:
    section.add "api-version", valid_570500
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570501: Call_WebAppsGetMSDeployStatusSlot_570493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_570501.validator(path, query, header, formData, body)
  let scheme = call_570501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570501.url(scheme.get, call_570501.host, call_570501.base,
                         call_570501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570501, url, valid)

proc call*(call_570502: Call_WebAppsGetMSDeployStatusSlot_570493;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570503 = newJObject()
  var query_570504 = newJObject()
  add(path_570503, "resourceGroupName", newJString(resourceGroupName))
  add(query_570504, "api-version", newJString(apiVersion))
  add(path_570503, "name", newJString(name))
  add(path_570503, "slot", newJString(slot))
  add(path_570503, "subscriptionId", newJString(subscriptionId))
  result = call_570502.call(path_570503, query_570504, nil, nil, nil)

var webAppsGetMSDeployStatusSlot* = Call_WebAppsGetMSDeployStatusSlot_570493(
    name: "webAppsGetMSDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatusSlot_570494, base: "",
    url: url_WebAppsGetMSDeployStatusSlot_570495, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLogSlot_570519 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployLogSlot_570521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLogSlot_570520(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570522 = path.getOrDefault("resourceGroupName")
  valid_570522 = validateParameter(valid_570522, JString, required = true,
                                 default = nil)
  if valid_570522 != nil:
    section.add "resourceGroupName", valid_570522
  var valid_570523 = path.getOrDefault("name")
  valid_570523 = validateParameter(valid_570523, JString, required = true,
                                 default = nil)
  if valid_570523 != nil:
    section.add "name", valid_570523
  var valid_570524 = path.getOrDefault("slot")
  valid_570524 = validateParameter(valid_570524, JString, required = true,
                                 default = nil)
  if valid_570524 != nil:
    section.add "slot", valid_570524
  var valid_570525 = path.getOrDefault("subscriptionId")
  valid_570525 = validateParameter(valid_570525, JString, required = true,
                                 default = nil)
  if valid_570525 != nil:
    section.add "subscriptionId", valid_570525
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570526 = query.getOrDefault("api-version")
  valid_570526 = validateParameter(valid_570526, JString, required = true,
                                 default = nil)
  if valid_570526 != nil:
    section.add "api-version", valid_570526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570527: Call_WebAppsGetMSDeployLogSlot_570519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_570527.validator(path, query, header, formData, body)
  let scheme = call_570527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570527.url(scheme.get, call_570527.host, call_570527.base,
                         call_570527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570527, url, valid)

proc call*(call_570528: Call_WebAppsGetMSDeployLogSlot_570519;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570529 = newJObject()
  var query_570530 = newJObject()
  add(path_570529, "resourceGroupName", newJString(resourceGroupName))
  add(query_570530, "api-version", newJString(apiVersion))
  add(path_570529, "name", newJString(name))
  add(path_570529, "slot", newJString(slot))
  add(path_570529, "subscriptionId", newJString(subscriptionId))
  result = call_570528.call(path_570529, query_570530, nil, nil, nil)

var webAppsGetMSDeployLogSlot* = Call_WebAppsGetMSDeployLogSlot_570519(
    name: "webAppsGetMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLogSlot_570520, base: "",
    url: url_WebAppsGetMSDeployLogSlot_570521, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceFunctionsSlot_570531 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceFunctionsSlot_570533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceFunctionsSlot_570532(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570534 = path.getOrDefault("resourceGroupName")
  valid_570534 = validateParameter(valid_570534, JString, required = true,
                                 default = nil)
  if valid_570534 != nil:
    section.add "resourceGroupName", valid_570534
  var valid_570535 = path.getOrDefault("name")
  valid_570535 = validateParameter(valid_570535, JString, required = true,
                                 default = nil)
  if valid_570535 != nil:
    section.add "name", valid_570535
  var valid_570536 = path.getOrDefault("slot")
  valid_570536 = validateParameter(valid_570536, JString, required = true,
                                 default = nil)
  if valid_570536 != nil:
    section.add "slot", valid_570536
  var valid_570537 = path.getOrDefault("subscriptionId")
  valid_570537 = validateParameter(valid_570537, JString, required = true,
                                 default = nil)
  if valid_570537 != nil:
    section.add "subscriptionId", valid_570537
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570538 = query.getOrDefault("api-version")
  valid_570538 = validateParameter(valid_570538, JString, required = true,
                                 default = nil)
  if valid_570538 != nil:
    section.add "api-version", valid_570538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570539: Call_WebAppsListInstanceFunctionsSlot_570531;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_570539.validator(path, query, header, formData, body)
  let scheme = call_570539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570539.url(scheme.get, call_570539.host, call_570539.base,
                         call_570539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570539, url, valid)

proc call*(call_570540: Call_WebAppsListInstanceFunctionsSlot_570531;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceFunctionsSlot
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570541 = newJObject()
  var query_570542 = newJObject()
  add(path_570541, "resourceGroupName", newJString(resourceGroupName))
  add(query_570542, "api-version", newJString(apiVersion))
  add(path_570541, "name", newJString(name))
  add(path_570541, "slot", newJString(slot))
  add(path_570541, "subscriptionId", newJString(subscriptionId))
  result = call_570540.call(path_570541, query_570542, nil, nil, nil)

var webAppsListInstanceFunctionsSlot* = Call_WebAppsListInstanceFunctionsSlot_570531(
    name: "webAppsListInstanceFunctionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    validator: validate_WebAppsListInstanceFunctionsSlot_570532, base: "",
    url: url_WebAppsListInstanceFunctionsSlot_570533, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminTokenSlot_570543 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetFunctionsAdminTokenSlot_570545(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminTokenSlot_570544(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570546 = path.getOrDefault("resourceGroupName")
  valid_570546 = validateParameter(valid_570546, JString, required = true,
                                 default = nil)
  if valid_570546 != nil:
    section.add "resourceGroupName", valid_570546
  var valid_570547 = path.getOrDefault("name")
  valid_570547 = validateParameter(valid_570547, JString, required = true,
                                 default = nil)
  if valid_570547 != nil:
    section.add "name", valid_570547
  var valid_570548 = path.getOrDefault("slot")
  valid_570548 = validateParameter(valid_570548, JString, required = true,
                                 default = nil)
  if valid_570548 != nil:
    section.add "slot", valid_570548
  var valid_570549 = path.getOrDefault("subscriptionId")
  valid_570549 = validateParameter(valid_570549, JString, required = true,
                                 default = nil)
  if valid_570549 != nil:
    section.add "subscriptionId", valid_570549
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570550 = query.getOrDefault("api-version")
  valid_570550 = validateParameter(valid_570550, JString, required = true,
                                 default = nil)
  if valid_570550 != nil:
    section.add "api-version", valid_570550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570551: Call_WebAppsGetFunctionsAdminTokenSlot_570543;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_570551.validator(path, query, header, formData, body)
  let scheme = call_570551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570551.url(scheme.get, call_570551.host, call_570551.base,
                         call_570551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570551, url, valid)

proc call*(call_570552: Call_WebAppsGetFunctionsAdminTokenSlot_570543;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminTokenSlot
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570553 = newJObject()
  var query_570554 = newJObject()
  add(path_570553, "resourceGroupName", newJString(resourceGroupName))
  add(query_570554, "api-version", newJString(apiVersion))
  add(path_570553, "name", newJString(name))
  add(path_570553, "slot", newJString(slot))
  add(path_570553, "subscriptionId", newJString(subscriptionId))
  result = call_570552.call(path_570553, query_570554, nil, nil, nil)

var webAppsGetFunctionsAdminTokenSlot* = Call_WebAppsGetFunctionsAdminTokenSlot_570543(
    name: "webAppsGetFunctionsAdminTokenSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminTokenSlot_570544, base: "",
    url: url_WebAppsGetFunctionsAdminTokenSlot_570545, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceFunctionSlot_570568 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateInstanceFunctionSlot_570570(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceFunctionSlot_570569(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570571 = path.getOrDefault("resourceGroupName")
  valid_570571 = validateParameter(valid_570571, JString, required = true,
                                 default = nil)
  if valid_570571 != nil:
    section.add "resourceGroupName", valid_570571
  var valid_570572 = path.getOrDefault("name")
  valid_570572 = validateParameter(valid_570572, JString, required = true,
                                 default = nil)
  if valid_570572 != nil:
    section.add "name", valid_570572
  var valid_570573 = path.getOrDefault("slot")
  valid_570573 = validateParameter(valid_570573, JString, required = true,
                                 default = nil)
  if valid_570573 != nil:
    section.add "slot", valid_570573
  var valid_570574 = path.getOrDefault("subscriptionId")
  valid_570574 = validateParameter(valid_570574, JString, required = true,
                                 default = nil)
  if valid_570574 != nil:
    section.add "subscriptionId", valid_570574
  var valid_570575 = path.getOrDefault("functionName")
  valid_570575 = validateParameter(valid_570575, JString, required = true,
                                 default = nil)
  if valid_570575 != nil:
    section.add "functionName", valid_570575
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570576 = query.getOrDefault("api-version")
  valid_570576 = validateParameter(valid_570576, JString, required = true,
                                 default = nil)
  if valid_570576 != nil:
    section.add "api-version", valid_570576
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570578: Call_WebAppsCreateInstanceFunctionSlot_570568;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_570578.validator(path, query, header, formData, body)
  let scheme = call_570578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570578.url(scheme.get, call_570578.host, call_570578.base,
                         call_570578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570578, url, valid)

proc call*(call_570579: Call_WebAppsCreateInstanceFunctionSlot_570568;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateInstanceFunctionSlot
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_570580 = newJObject()
  var query_570581 = newJObject()
  var body_570582 = newJObject()
  add(path_570580, "resourceGroupName", newJString(resourceGroupName))
  add(query_570581, "api-version", newJString(apiVersion))
  add(path_570580, "name", newJString(name))
  add(path_570580, "slot", newJString(slot))
  add(path_570580, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_570582 = functionEnvelope
  add(path_570580, "functionName", newJString(functionName))
  result = call_570579.call(path_570580, query_570581, nil, nil, body_570582)

var webAppsCreateInstanceFunctionSlot* = Call_WebAppsCreateInstanceFunctionSlot_570568(
    name: "webAppsCreateInstanceFunctionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsCreateInstanceFunctionSlot_570569, base: "",
    url: url_WebAppsCreateInstanceFunctionSlot_570570, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceFunctionSlot_570555 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceFunctionSlot_570557(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceFunctionSlot_570556(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570558 = path.getOrDefault("resourceGroupName")
  valid_570558 = validateParameter(valid_570558, JString, required = true,
                                 default = nil)
  if valid_570558 != nil:
    section.add "resourceGroupName", valid_570558
  var valid_570559 = path.getOrDefault("name")
  valid_570559 = validateParameter(valid_570559, JString, required = true,
                                 default = nil)
  if valid_570559 != nil:
    section.add "name", valid_570559
  var valid_570560 = path.getOrDefault("slot")
  valid_570560 = validateParameter(valid_570560, JString, required = true,
                                 default = nil)
  if valid_570560 != nil:
    section.add "slot", valid_570560
  var valid_570561 = path.getOrDefault("subscriptionId")
  valid_570561 = validateParameter(valid_570561, JString, required = true,
                                 default = nil)
  if valid_570561 != nil:
    section.add "subscriptionId", valid_570561
  var valid_570562 = path.getOrDefault("functionName")
  valid_570562 = validateParameter(valid_570562, JString, required = true,
                                 default = nil)
  if valid_570562 != nil:
    section.add "functionName", valid_570562
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570563 = query.getOrDefault("api-version")
  valid_570563 = validateParameter(valid_570563, JString, required = true,
                                 default = nil)
  if valid_570563 != nil:
    section.add "api-version", valid_570563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570564: Call_WebAppsGetInstanceFunctionSlot_570555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_570564.validator(path, query, header, formData, body)
  let scheme = call_570564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570564.url(scheme.get, call_570564.host, call_570564.base,
                         call_570564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570564, url, valid)

proc call*(call_570565: Call_WebAppsGetInstanceFunctionSlot_570555;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsGetInstanceFunctionSlot
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_570566 = newJObject()
  var query_570567 = newJObject()
  add(path_570566, "resourceGroupName", newJString(resourceGroupName))
  add(query_570567, "api-version", newJString(apiVersion))
  add(path_570566, "name", newJString(name))
  add(path_570566, "slot", newJString(slot))
  add(path_570566, "subscriptionId", newJString(subscriptionId))
  add(path_570566, "functionName", newJString(functionName))
  result = call_570565.call(path_570566, query_570567, nil, nil, nil)

var webAppsGetInstanceFunctionSlot* = Call_WebAppsGetInstanceFunctionSlot_570555(
    name: "webAppsGetInstanceFunctionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsGetInstanceFunctionSlot_570556, base: "",
    url: url_WebAppsGetInstanceFunctionSlot_570557, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceFunctionSlot_570583 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteInstanceFunctionSlot_570585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceFunctionSlot_570584(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570586 = path.getOrDefault("resourceGroupName")
  valid_570586 = validateParameter(valid_570586, JString, required = true,
                                 default = nil)
  if valid_570586 != nil:
    section.add "resourceGroupName", valid_570586
  var valid_570587 = path.getOrDefault("name")
  valid_570587 = validateParameter(valid_570587, JString, required = true,
                                 default = nil)
  if valid_570587 != nil:
    section.add "name", valid_570587
  var valid_570588 = path.getOrDefault("slot")
  valid_570588 = validateParameter(valid_570588, JString, required = true,
                                 default = nil)
  if valid_570588 != nil:
    section.add "slot", valid_570588
  var valid_570589 = path.getOrDefault("subscriptionId")
  valid_570589 = validateParameter(valid_570589, JString, required = true,
                                 default = nil)
  if valid_570589 != nil:
    section.add "subscriptionId", valid_570589
  var valid_570590 = path.getOrDefault("functionName")
  valid_570590 = validateParameter(valid_570590, JString, required = true,
                                 default = nil)
  if valid_570590 != nil:
    section.add "functionName", valid_570590
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570591 = query.getOrDefault("api-version")
  valid_570591 = validateParameter(valid_570591, JString, required = true,
                                 default = nil)
  if valid_570591 != nil:
    section.add "api-version", valid_570591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570592: Call_WebAppsDeleteInstanceFunctionSlot_570583;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_570592.validator(path, query, header, formData, body)
  let scheme = call_570592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570592.url(scheme.get, call_570592.host, call_570592.base,
                         call_570592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570592, url, valid)

proc call*(call_570593: Call_WebAppsDeleteInstanceFunctionSlot_570583;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteInstanceFunctionSlot
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_570594 = newJObject()
  var query_570595 = newJObject()
  add(path_570594, "resourceGroupName", newJString(resourceGroupName))
  add(query_570595, "api-version", newJString(apiVersion))
  add(path_570594, "name", newJString(name))
  add(path_570594, "slot", newJString(slot))
  add(path_570594, "subscriptionId", newJString(subscriptionId))
  add(path_570594, "functionName", newJString(functionName))
  result = call_570593.call(path_570594, query_570595, nil, nil, nil)

var webAppsDeleteInstanceFunctionSlot* = Call_WebAppsDeleteInstanceFunctionSlot_570583(
    name: "webAppsDeleteInstanceFunctionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsDeleteInstanceFunctionSlot_570584, base: "",
    url: url_WebAppsDeleteInstanceFunctionSlot_570585, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecretsSlot_570596 = ref object of OpenApiRestCall_567666
proc url_WebAppsListFunctionSecretsSlot_570598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecretsSlot_570597(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570599 = path.getOrDefault("resourceGroupName")
  valid_570599 = validateParameter(valid_570599, JString, required = true,
                                 default = nil)
  if valid_570599 != nil:
    section.add "resourceGroupName", valid_570599
  var valid_570600 = path.getOrDefault("name")
  valid_570600 = validateParameter(valid_570600, JString, required = true,
                                 default = nil)
  if valid_570600 != nil:
    section.add "name", valid_570600
  var valid_570601 = path.getOrDefault("slot")
  valid_570601 = validateParameter(valid_570601, JString, required = true,
                                 default = nil)
  if valid_570601 != nil:
    section.add "slot", valid_570601
  var valid_570602 = path.getOrDefault("subscriptionId")
  valid_570602 = validateParameter(valid_570602, JString, required = true,
                                 default = nil)
  if valid_570602 != nil:
    section.add "subscriptionId", valid_570602
  var valid_570603 = path.getOrDefault("functionName")
  valid_570603 = validateParameter(valid_570603, JString, required = true,
                                 default = nil)
  if valid_570603 != nil:
    section.add "functionName", valid_570603
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570604 = query.getOrDefault("api-version")
  valid_570604 = validateParameter(valid_570604, JString, required = true,
                                 default = nil)
  if valid_570604 != nil:
    section.add "api-version", valid_570604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570605: Call_WebAppsListFunctionSecretsSlot_570596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_570605.validator(path, query, header, formData, body)
  let scheme = call_570605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570605.url(scheme.get, call_570605.host, call_570605.base,
                         call_570605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570605, url, valid)

proc call*(call_570606: Call_WebAppsListFunctionSecretsSlot_570596;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecretsSlot
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_570607 = newJObject()
  var query_570608 = newJObject()
  add(path_570607, "resourceGroupName", newJString(resourceGroupName))
  add(query_570608, "api-version", newJString(apiVersion))
  add(path_570607, "name", newJString(name))
  add(path_570607, "slot", newJString(slot))
  add(path_570607, "subscriptionId", newJString(subscriptionId))
  add(path_570607, "functionName", newJString(functionName))
  result = call_570606.call(path_570607, query_570608, nil, nil, nil)

var webAppsListFunctionSecretsSlot* = Call_WebAppsListFunctionSecretsSlot_570596(
    name: "webAppsListFunctionSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecretsSlot_570597, base: "",
    url: url_WebAppsListFunctionSecretsSlot_570598, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindingsSlot_570609 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHostNameBindingsSlot_570611(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindingsSlot_570610(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570612 = path.getOrDefault("resourceGroupName")
  valid_570612 = validateParameter(valid_570612, JString, required = true,
                                 default = nil)
  if valid_570612 != nil:
    section.add "resourceGroupName", valid_570612
  var valid_570613 = path.getOrDefault("name")
  valid_570613 = validateParameter(valid_570613, JString, required = true,
                                 default = nil)
  if valid_570613 != nil:
    section.add "name", valid_570613
  var valid_570614 = path.getOrDefault("slot")
  valid_570614 = validateParameter(valid_570614, JString, required = true,
                                 default = nil)
  if valid_570614 != nil:
    section.add "slot", valid_570614
  var valid_570615 = path.getOrDefault("subscriptionId")
  valid_570615 = validateParameter(valid_570615, JString, required = true,
                                 default = nil)
  if valid_570615 != nil:
    section.add "subscriptionId", valid_570615
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570616 = query.getOrDefault("api-version")
  valid_570616 = validateParameter(valid_570616, JString, required = true,
                                 default = nil)
  if valid_570616 != nil:
    section.add "api-version", valid_570616
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570617: Call_WebAppsListHostNameBindingsSlot_570609;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_570617.validator(path, query, header, formData, body)
  let scheme = call_570617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570617.url(scheme.get, call_570617.host, call_570617.base,
                         call_570617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570617, url, valid)

proc call*(call_570618: Call_WebAppsListHostNameBindingsSlot_570609;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindingsSlot
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570619 = newJObject()
  var query_570620 = newJObject()
  add(path_570619, "resourceGroupName", newJString(resourceGroupName))
  add(query_570620, "api-version", newJString(apiVersion))
  add(path_570619, "name", newJString(name))
  add(path_570619, "slot", newJString(slot))
  add(path_570619, "subscriptionId", newJString(subscriptionId))
  result = call_570618.call(path_570619, query_570620, nil, nil, nil)

var webAppsListHostNameBindingsSlot* = Call_WebAppsListHostNameBindingsSlot_570609(
    name: "webAppsListHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindingsSlot_570610, base: "",
    url: url_WebAppsListHostNameBindingsSlot_570611, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBindingSlot_570634 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHostNameBindingSlot_570636(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBindingSlot_570635(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570637 = path.getOrDefault("resourceGroupName")
  valid_570637 = validateParameter(valid_570637, JString, required = true,
                                 default = nil)
  if valid_570637 != nil:
    section.add "resourceGroupName", valid_570637
  var valid_570638 = path.getOrDefault("name")
  valid_570638 = validateParameter(valid_570638, JString, required = true,
                                 default = nil)
  if valid_570638 != nil:
    section.add "name", valid_570638
  var valid_570639 = path.getOrDefault("slot")
  valid_570639 = validateParameter(valid_570639, JString, required = true,
                                 default = nil)
  if valid_570639 != nil:
    section.add "slot", valid_570639
  var valid_570640 = path.getOrDefault("subscriptionId")
  valid_570640 = validateParameter(valid_570640, JString, required = true,
                                 default = nil)
  if valid_570640 != nil:
    section.add "subscriptionId", valid_570640
  var valid_570641 = path.getOrDefault("hostName")
  valid_570641 = validateParameter(valid_570641, JString, required = true,
                                 default = nil)
  if valid_570641 != nil:
    section.add "hostName", valid_570641
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570642 = query.getOrDefault("api-version")
  valid_570642 = validateParameter(valid_570642, JString, required = true,
                                 default = nil)
  if valid_570642 != nil:
    section.add "api-version", valid_570642
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570644: Call_WebAppsCreateOrUpdateHostNameBindingSlot_570634;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_570644.validator(path, query, header, formData, body)
  let scheme = call_570644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570644.url(scheme.get, call_570644.host, call_570644.base,
                         call_570644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570644, url, valid)

proc call*(call_570645: Call_WebAppsCreateOrUpdateHostNameBindingSlot_570634;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBindingSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_570646 = newJObject()
  var query_570647 = newJObject()
  var body_570648 = newJObject()
  add(path_570646, "resourceGroupName", newJString(resourceGroupName))
  add(query_570647, "api-version", newJString(apiVersion))
  add(path_570646, "name", newJString(name))
  add(path_570646, "slot", newJString(slot))
  add(path_570646, "subscriptionId", newJString(subscriptionId))
  add(path_570646, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_570648 = hostNameBinding
  result = call_570645.call(path_570646, query_570647, nil, nil, body_570648)

var webAppsCreateOrUpdateHostNameBindingSlot* = Call_WebAppsCreateOrUpdateHostNameBindingSlot_570634(
    name: "webAppsCreateOrUpdateHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBindingSlot_570635, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBindingSlot_570636,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBindingSlot_570621 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHostNameBindingSlot_570623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBindingSlot_570622(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570624 = path.getOrDefault("resourceGroupName")
  valid_570624 = validateParameter(valid_570624, JString, required = true,
                                 default = nil)
  if valid_570624 != nil:
    section.add "resourceGroupName", valid_570624
  var valid_570625 = path.getOrDefault("name")
  valid_570625 = validateParameter(valid_570625, JString, required = true,
                                 default = nil)
  if valid_570625 != nil:
    section.add "name", valid_570625
  var valid_570626 = path.getOrDefault("slot")
  valid_570626 = validateParameter(valid_570626, JString, required = true,
                                 default = nil)
  if valid_570626 != nil:
    section.add "slot", valid_570626
  var valid_570627 = path.getOrDefault("subscriptionId")
  valid_570627 = validateParameter(valid_570627, JString, required = true,
                                 default = nil)
  if valid_570627 != nil:
    section.add "subscriptionId", valid_570627
  var valid_570628 = path.getOrDefault("hostName")
  valid_570628 = validateParameter(valid_570628, JString, required = true,
                                 default = nil)
  if valid_570628 != nil:
    section.add "hostName", valid_570628
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570629 = query.getOrDefault("api-version")
  valid_570629 = validateParameter(valid_570629, JString, required = true,
                                 default = nil)
  if valid_570629 != nil:
    section.add "api-version", valid_570629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570630: Call_WebAppsGetHostNameBindingSlot_570621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_570630.validator(path, query, header, formData, body)
  let scheme = call_570630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570630.url(scheme.get, call_570630.host, call_570630.base,
                         call_570630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570630, url, valid)

proc call*(call_570631: Call_WebAppsGetHostNameBindingSlot_570621;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBindingSlot
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_570632 = newJObject()
  var query_570633 = newJObject()
  add(path_570632, "resourceGroupName", newJString(resourceGroupName))
  add(query_570633, "api-version", newJString(apiVersion))
  add(path_570632, "name", newJString(name))
  add(path_570632, "slot", newJString(slot))
  add(path_570632, "subscriptionId", newJString(subscriptionId))
  add(path_570632, "hostName", newJString(hostName))
  result = call_570631.call(path_570632, query_570633, nil, nil, nil)

var webAppsGetHostNameBindingSlot* = Call_WebAppsGetHostNameBindingSlot_570621(
    name: "webAppsGetHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBindingSlot_570622, base: "",
    url: url_WebAppsGetHostNameBindingSlot_570623, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBindingSlot_570649 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHostNameBindingSlot_570651(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBindingSlot_570650(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570652 = path.getOrDefault("resourceGroupName")
  valid_570652 = validateParameter(valid_570652, JString, required = true,
                                 default = nil)
  if valid_570652 != nil:
    section.add "resourceGroupName", valid_570652
  var valid_570653 = path.getOrDefault("name")
  valid_570653 = validateParameter(valid_570653, JString, required = true,
                                 default = nil)
  if valid_570653 != nil:
    section.add "name", valid_570653
  var valid_570654 = path.getOrDefault("slot")
  valid_570654 = validateParameter(valid_570654, JString, required = true,
                                 default = nil)
  if valid_570654 != nil:
    section.add "slot", valid_570654
  var valid_570655 = path.getOrDefault("subscriptionId")
  valid_570655 = validateParameter(valid_570655, JString, required = true,
                                 default = nil)
  if valid_570655 != nil:
    section.add "subscriptionId", valid_570655
  var valid_570656 = path.getOrDefault("hostName")
  valid_570656 = validateParameter(valid_570656, JString, required = true,
                                 default = nil)
  if valid_570656 != nil:
    section.add "hostName", valid_570656
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570657 = query.getOrDefault("api-version")
  valid_570657 = validateParameter(valid_570657, JString, required = true,
                                 default = nil)
  if valid_570657 != nil:
    section.add "api-version", valid_570657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570658: Call_WebAppsDeleteHostNameBindingSlot_570649;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_570658.validator(path, query, header, formData, body)
  let scheme = call_570658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570658.url(scheme.get, call_570658.host, call_570658.base,
                         call_570658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570658, url, valid)

proc call*(call_570659: Call_WebAppsDeleteHostNameBindingSlot_570649;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBindingSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_570660 = newJObject()
  var query_570661 = newJObject()
  add(path_570660, "resourceGroupName", newJString(resourceGroupName))
  add(query_570661, "api-version", newJString(apiVersion))
  add(path_570660, "name", newJString(name))
  add(path_570660, "slot", newJString(slot))
  add(path_570660, "subscriptionId", newJString(subscriptionId))
  add(path_570660, "hostName", newJString(hostName))
  result = call_570659.call(path_570660, query_570661, nil, nil, nil)

var webAppsDeleteHostNameBindingSlot* = Call_WebAppsDeleteHostNameBindingSlot_570649(
    name: "webAppsDeleteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBindingSlot_570650, base: "",
    url: url_WebAppsDeleteHostNameBindingSlot_570651, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnectionSlot_570676 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHybridConnectionSlot_570678(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnectionSlot_570677(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570679 = path.getOrDefault("namespaceName")
  valid_570679 = validateParameter(valid_570679, JString, required = true,
                                 default = nil)
  if valid_570679 != nil:
    section.add "namespaceName", valid_570679
  var valid_570680 = path.getOrDefault("resourceGroupName")
  valid_570680 = validateParameter(valid_570680, JString, required = true,
                                 default = nil)
  if valid_570680 != nil:
    section.add "resourceGroupName", valid_570680
  var valid_570681 = path.getOrDefault("name")
  valid_570681 = validateParameter(valid_570681, JString, required = true,
                                 default = nil)
  if valid_570681 != nil:
    section.add "name", valid_570681
  var valid_570682 = path.getOrDefault("slot")
  valid_570682 = validateParameter(valid_570682, JString, required = true,
                                 default = nil)
  if valid_570682 != nil:
    section.add "slot", valid_570682
  var valid_570683 = path.getOrDefault("subscriptionId")
  valid_570683 = validateParameter(valid_570683, JString, required = true,
                                 default = nil)
  if valid_570683 != nil:
    section.add "subscriptionId", valid_570683
  var valid_570684 = path.getOrDefault("relayName")
  valid_570684 = validateParameter(valid_570684, JString, required = true,
                                 default = nil)
  if valid_570684 != nil:
    section.add "relayName", valid_570684
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570685 = query.getOrDefault("api-version")
  valid_570685 = validateParameter(valid_570685, JString, required = true,
                                 default = nil)
  if valid_570685 != nil:
    section.add "api-version", valid_570685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570687: Call_WebAppsCreateOrUpdateHybridConnectionSlot_570676;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_570687.validator(path, query, header, formData, body)
  let scheme = call_570687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570687.url(scheme.get, call_570687.host, call_570687.base,
                         call_570687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570687, url, valid)

proc call*(call_570688: Call_WebAppsCreateOrUpdateHybridConnectionSlot_570676;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570689 = newJObject()
  var query_570690 = newJObject()
  var body_570691 = newJObject()
  add(path_570689, "namespaceName", newJString(namespaceName))
  add(path_570689, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570691 = connectionEnvelope
  add(path_570689, "name", newJString(name))
  add(query_570690, "api-version", newJString(apiVersion))
  add(path_570689, "slot", newJString(slot))
  add(path_570689, "subscriptionId", newJString(subscriptionId))
  add(path_570689, "relayName", newJString(relayName))
  result = call_570688.call(path_570689, query_570690, nil, nil, body_570691)

var webAppsCreateOrUpdateHybridConnectionSlot* = Call_WebAppsCreateOrUpdateHybridConnectionSlot_570676(
    name: "webAppsCreateOrUpdateHybridConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnectionSlot_570677,
    base: "", url: url_WebAppsCreateOrUpdateHybridConnectionSlot_570678,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnectionSlot_570662 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHybridConnectionSlot_570664(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnectionSlot_570663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570665 = path.getOrDefault("namespaceName")
  valid_570665 = validateParameter(valid_570665, JString, required = true,
                                 default = nil)
  if valid_570665 != nil:
    section.add "namespaceName", valid_570665
  var valid_570666 = path.getOrDefault("resourceGroupName")
  valid_570666 = validateParameter(valid_570666, JString, required = true,
                                 default = nil)
  if valid_570666 != nil:
    section.add "resourceGroupName", valid_570666
  var valid_570667 = path.getOrDefault("name")
  valid_570667 = validateParameter(valid_570667, JString, required = true,
                                 default = nil)
  if valid_570667 != nil:
    section.add "name", valid_570667
  var valid_570668 = path.getOrDefault("slot")
  valid_570668 = validateParameter(valid_570668, JString, required = true,
                                 default = nil)
  if valid_570668 != nil:
    section.add "slot", valid_570668
  var valid_570669 = path.getOrDefault("subscriptionId")
  valid_570669 = validateParameter(valid_570669, JString, required = true,
                                 default = nil)
  if valid_570669 != nil:
    section.add "subscriptionId", valid_570669
  var valid_570670 = path.getOrDefault("relayName")
  valid_570670 = validateParameter(valid_570670, JString, required = true,
                                 default = nil)
  if valid_570670 != nil:
    section.add "relayName", valid_570670
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570671 = query.getOrDefault("api-version")
  valid_570671 = validateParameter(valid_570671, JString, required = true,
                                 default = nil)
  if valid_570671 != nil:
    section.add "api-version", valid_570671
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570672: Call_WebAppsGetHybridConnectionSlot_570662; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_570672.validator(path, query, header, formData, body)
  let scheme = call_570672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570672.url(scheme.get, call_570672.host, call_570672.base,
                         call_570672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570672, url, valid)

proc call*(call_570673: Call_WebAppsGetHybridConnectionSlot_570662;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnectionSlot
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570674 = newJObject()
  var query_570675 = newJObject()
  add(path_570674, "namespaceName", newJString(namespaceName))
  add(path_570674, "resourceGroupName", newJString(resourceGroupName))
  add(query_570675, "api-version", newJString(apiVersion))
  add(path_570674, "name", newJString(name))
  add(path_570674, "slot", newJString(slot))
  add(path_570674, "subscriptionId", newJString(subscriptionId))
  add(path_570674, "relayName", newJString(relayName))
  result = call_570673.call(path_570674, query_570675, nil, nil, nil)

var webAppsGetHybridConnectionSlot* = Call_WebAppsGetHybridConnectionSlot_570662(
    name: "webAppsGetHybridConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnectionSlot_570663, base: "",
    url: url_WebAppsGetHybridConnectionSlot_570664, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnectionSlot_570706 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateHybridConnectionSlot_570708(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnectionSlot_570707(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570709 = path.getOrDefault("namespaceName")
  valid_570709 = validateParameter(valid_570709, JString, required = true,
                                 default = nil)
  if valid_570709 != nil:
    section.add "namespaceName", valid_570709
  var valid_570710 = path.getOrDefault("resourceGroupName")
  valid_570710 = validateParameter(valid_570710, JString, required = true,
                                 default = nil)
  if valid_570710 != nil:
    section.add "resourceGroupName", valid_570710
  var valid_570711 = path.getOrDefault("name")
  valid_570711 = validateParameter(valid_570711, JString, required = true,
                                 default = nil)
  if valid_570711 != nil:
    section.add "name", valid_570711
  var valid_570712 = path.getOrDefault("slot")
  valid_570712 = validateParameter(valid_570712, JString, required = true,
                                 default = nil)
  if valid_570712 != nil:
    section.add "slot", valid_570712
  var valid_570713 = path.getOrDefault("subscriptionId")
  valid_570713 = validateParameter(valid_570713, JString, required = true,
                                 default = nil)
  if valid_570713 != nil:
    section.add "subscriptionId", valid_570713
  var valid_570714 = path.getOrDefault("relayName")
  valid_570714 = validateParameter(valid_570714, JString, required = true,
                                 default = nil)
  if valid_570714 != nil:
    section.add "relayName", valid_570714
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570715 = query.getOrDefault("api-version")
  valid_570715 = validateParameter(valid_570715, JString, required = true,
                                 default = nil)
  if valid_570715 != nil:
    section.add "api-version", valid_570715
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570717: Call_WebAppsUpdateHybridConnectionSlot_570706;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_570717.validator(path, query, header, formData, body)
  let scheme = call_570717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570717.url(scheme.get, call_570717.host, call_570717.base,
                         call_570717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570717, url, valid)

proc call*(call_570718: Call_WebAppsUpdateHybridConnectionSlot_570706;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570719 = newJObject()
  var query_570720 = newJObject()
  var body_570721 = newJObject()
  add(path_570719, "namespaceName", newJString(namespaceName))
  add(path_570719, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570721 = connectionEnvelope
  add(path_570719, "name", newJString(name))
  add(query_570720, "api-version", newJString(apiVersion))
  add(path_570719, "slot", newJString(slot))
  add(path_570719, "subscriptionId", newJString(subscriptionId))
  add(path_570719, "relayName", newJString(relayName))
  result = call_570718.call(path_570719, query_570720, nil, nil, body_570721)

var webAppsUpdateHybridConnectionSlot* = Call_WebAppsUpdateHybridConnectionSlot_570706(
    name: "webAppsUpdateHybridConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnectionSlot_570707, base: "",
    url: url_WebAppsUpdateHybridConnectionSlot_570708, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnectionSlot_570692 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHybridConnectionSlot_570694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnectionSlot_570693(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570695 = path.getOrDefault("namespaceName")
  valid_570695 = validateParameter(valid_570695, JString, required = true,
                                 default = nil)
  if valid_570695 != nil:
    section.add "namespaceName", valid_570695
  var valid_570696 = path.getOrDefault("resourceGroupName")
  valid_570696 = validateParameter(valid_570696, JString, required = true,
                                 default = nil)
  if valid_570696 != nil:
    section.add "resourceGroupName", valid_570696
  var valid_570697 = path.getOrDefault("name")
  valid_570697 = validateParameter(valid_570697, JString, required = true,
                                 default = nil)
  if valid_570697 != nil:
    section.add "name", valid_570697
  var valid_570698 = path.getOrDefault("slot")
  valid_570698 = validateParameter(valid_570698, JString, required = true,
                                 default = nil)
  if valid_570698 != nil:
    section.add "slot", valid_570698
  var valid_570699 = path.getOrDefault("subscriptionId")
  valid_570699 = validateParameter(valid_570699, JString, required = true,
                                 default = nil)
  if valid_570699 != nil:
    section.add "subscriptionId", valid_570699
  var valid_570700 = path.getOrDefault("relayName")
  valid_570700 = validateParameter(valid_570700, JString, required = true,
                                 default = nil)
  if valid_570700 != nil:
    section.add "relayName", valid_570700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570701 = query.getOrDefault("api-version")
  valid_570701 = validateParameter(valid_570701, JString, required = true,
                                 default = nil)
  if valid_570701 != nil:
    section.add "api-version", valid_570701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570702: Call_WebAppsDeleteHybridConnectionSlot_570692;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_570702.validator(path, query, header, formData, body)
  let scheme = call_570702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570702.url(scheme.get, call_570702.host, call_570702.base,
                         call_570702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570702, url, valid)

proc call*(call_570703: Call_WebAppsDeleteHybridConnectionSlot_570692;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnectionSlot
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570704 = newJObject()
  var query_570705 = newJObject()
  add(path_570704, "namespaceName", newJString(namespaceName))
  add(path_570704, "resourceGroupName", newJString(resourceGroupName))
  add(query_570705, "api-version", newJString(apiVersion))
  add(path_570704, "name", newJString(name))
  add(path_570704, "slot", newJString(slot))
  add(path_570704, "subscriptionId", newJString(subscriptionId))
  add(path_570704, "relayName", newJString(relayName))
  result = call_570703.call(path_570704, query_570705, nil, nil, nil)

var webAppsDeleteHybridConnectionSlot* = Call_WebAppsDeleteHybridConnectionSlot_570692(
    name: "webAppsDeleteHybridConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnectionSlot_570693, base: "",
    url: url_WebAppsDeleteHybridConnectionSlot_570694, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeysSlot_570722 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnectionKeysSlot_570724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeysSlot_570723(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570725 = path.getOrDefault("namespaceName")
  valid_570725 = validateParameter(valid_570725, JString, required = true,
                                 default = nil)
  if valid_570725 != nil:
    section.add "namespaceName", valid_570725
  var valid_570726 = path.getOrDefault("resourceGroupName")
  valid_570726 = validateParameter(valid_570726, JString, required = true,
                                 default = nil)
  if valid_570726 != nil:
    section.add "resourceGroupName", valid_570726
  var valid_570727 = path.getOrDefault("name")
  valid_570727 = validateParameter(valid_570727, JString, required = true,
                                 default = nil)
  if valid_570727 != nil:
    section.add "name", valid_570727
  var valid_570728 = path.getOrDefault("slot")
  valid_570728 = validateParameter(valid_570728, JString, required = true,
                                 default = nil)
  if valid_570728 != nil:
    section.add "slot", valid_570728
  var valid_570729 = path.getOrDefault("subscriptionId")
  valid_570729 = validateParameter(valid_570729, JString, required = true,
                                 default = nil)
  if valid_570729 != nil:
    section.add "subscriptionId", valid_570729
  var valid_570730 = path.getOrDefault("relayName")
  valid_570730 = validateParameter(valid_570730, JString, required = true,
                                 default = nil)
  if valid_570730 != nil:
    section.add "relayName", valid_570730
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570731 = query.getOrDefault("api-version")
  valid_570731 = validateParameter(valid_570731, JString, required = true,
                                 default = nil)
  if valid_570731 != nil:
    section.add "api-version", valid_570731
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570732: Call_WebAppsListHybridConnectionKeysSlot_570722;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_570732.validator(path, query, header, formData, body)
  let scheme = call_570732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570732.url(scheme.get, call_570732.host, call_570732.base,
                         call_570732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570732, url, valid)

proc call*(call_570733: Call_WebAppsListHybridConnectionKeysSlot_570722;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeysSlot
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570734 = newJObject()
  var query_570735 = newJObject()
  add(path_570734, "namespaceName", newJString(namespaceName))
  add(path_570734, "resourceGroupName", newJString(resourceGroupName))
  add(query_570735, "api-version", newJString(apiVersion))
  add(path_570734, "name", newJString(name))
  add(path_570734, "slot", newJString(slot))
  add(path_570734, "subscriptionId", newJString(subscriptionId))
  add(path_570734, "relayName", newJString(relayName))
  result = call_570733.call(path_570734, query_570735, nil, nil, nil)

var webAppsListHybridConnectionKeysSlot* = Call_WebAppsListHybridConnectionKeysSlot_570722(
    name: "webAppsListHybridConnectionKeysSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeysSlot_570723, base: "",
    url: url_WebAppsListHybridConnectionKeysSlot_570724, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionsSlot_570736 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnectionsSlot_570738(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionsSlot_570737(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570739 = path.getOrDefault("resourceGroupName")
  valid_570739 = validateParameter(valid_570739, JString, required = true,
                                 default = nil)
  if valid_570739 != nil:
    section.add "resourceGroupName", valid_570739
  var valid_570740 = path.getOrDefault("name")
  valid_570740 = validateParameter(valid_570740, JString, required = true,
                                 default = nil)
  if valid_570740 != nil:
    section.add "name", valid_570740
  var valid_570741 = path.getOrDefault("slot")
  valid_570741 = validateParameter(valid_570741, JString, required = true,
                                 default = nil)
  if valid_570741 != nil:
    section.add "slot", valid_570741
  var valid_570742 = path.getOrDefault("subscriptionId")
  valid_570742 = validateParameter(valid_570742, JString, required = true,
                                 default = nil)
  if valid_570742 != nil:
    section.add "subscriptionId", valid_570742
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570743 = query.getOrDefault("api-version")
  valid_570743 = validateParameter(valid_570743, JString, required = true,
                                 default = nil)
  if valid_570743 != nil:
    section.add "api-version", valid_570743
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570744: Call_WebAppsListHybridConnectionsSlot_570736;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_570744.validator(path, query, header, formData, body)
  let scheme = call_570744.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570744.url(scheme.get, call_570744.host, call_570744.base,
                         call_570744.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570744, url, valid)

proc call*(call_570745: Call_WebAppsListHybridConnectionsSlot_570736;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnectionsSlot
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570746 = newJObject()
  var query_570747 = newJObject()
  add(path_570746, "resourceGroupName", newJString(resourceGroupName))
  add(query_570747, "api-version", newJString(apiVersion))
  add(path_570746, "name", newJString(name))
  add(path_570746, "slot", newJString(slot))
  add(path_570746, "subscriptionId", newJString(subscriptionId))
  result = call_570745.call(path_570746, query_570747, nil, nil, nil)

var webAppsListHybridConnectionsSlot* = Call_WebAppsListHybridConnectionsSlot_570736(
    name: "webAppsListHybridConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnectionsSlot_570737, base: "",
    url: url_WebAppsListHybridConnectionsSlot_570738, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnectionsSlot_570748 = ref object of OpenApiRestCall_567666
proc url_WebAppsListRelayServiceConnectionsSlot_570750(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnectionsSlot_570749(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570751 = path.getOrDefault("resourceGroupName")
  valid_570751 = validateParameter(valid_570751, JString, required = true,
                                 default = nil)
  if valid_570751 != nil:
    section.add "resourceGroupName", valid_570751
  var valid_570752 = path.getOrDefault("name")
  valid_570752 = validateParameter(valid_570752, JString, required = true,
                                 default = nil)
  if valid_570752 != nil:
    section.add "name", valid_570752
  var valid_570753 = path.getOrDefault("slot")
  valid_570753 = validateParameter(valid_570753, JString, required = true,
                                 default = nil)
  if valid_570753 != nil:
    section.add "slot", valid_570753
  var valid_570754 = path.getOrDefault("subscriptionId")
  valid_570754 = validateParameter(valid_570754, JString, required = true,
                                 default = nil)
  if valid_570754 != nil:
    section.add "subscriptionId", valid_570754
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570755 = query.getOrDefault("api-version")
  valid_570755 = validateParameter(valid_570755, JString, required = true,
                                 default = nil)
  if valid_570755 != nil:
    section.add "api-version", valid_570755
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570756: Call_WebAppsListRelayServiceConnectionsSlot_570748;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_570756.validator(path, query, header, formData, body)
  let scheme = call_570756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570756.url(scheme.get, call_570756.host, call_570756.base,
                         call_570756.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570756, url, valid)

proc call*(call_570757: Call_WebAppsListRelayServiceConnectionsSlot_570748;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnectionsSlot
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570758 = newJObject()
  var query_570759 = newJObject()
  add(path_570758, "resourceGroupName", newJString(resourceGroupName))
  add(query_570759, "api-version", newJString(apiVersion))
  add(path_570758, "name", newJString(name))
  add(path_570758, "slot", newJString(slot))
  add(path_570758, "subscriptionId", newJString(subscriptionId))
  result = call_570757.call(path_570758, query_570759, nil, nil, nil)

var webAppsListRelayServiceConnectionsSlot* = Call_WebAppsListRelayServiceConnectionsSlot_570748(
    name: "webAppsListRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnectionsSlot_570749, base: "",
    url: url_WebAppsListRelayServiceConnectionsSlot_570750,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570773 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570775(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570774(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570776 = path.getOrDefault("resourceGroupName")
  valid_570776 = validateParameter(valid_570776, JString, required = true,
                                 default = nil)
  if valid_570776 != nil:
    section.add "resourceGroupName", valid_570776
  var valid_570777 = path.getOrDefault("name")
  valid_570777 = validateParameter(valid_570777, JString, required = true,
                                 default = nil)
  if valid_570777 != nil:
    section.add "name", valid_570777
  var valid_570778 = path.getOrDefault("slot")
  valid_570778 = validateParameter(valid_570778, JString, required = true,
                                 default = nil)
  if valid_570778 != nil:
    section.add "slot", valid_570778
  var valid_570779 = path.getOrDefault("subscriptionId")
  valid_570779 = validateParameter(valid_570779, JString, required = true,
                                 default = nil)
  if valid_570779 != nil:
    section.add "subscriptionId", valid_570779
  var valid_570780 = path.getOrDefault("entityName")
  valid_570780 = validateParameter(valid_570780, JString, required = true,
                                 default = nil)
  if valid_570780 != nil:
    section.add "entityName", valid_570780
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570781 = query.getOrDefault("api-version")
  valid_570781 = validateParameter(valid_570781, JString, required = true,
                                 default = nil)
  if valid_570781 != nil:
    section.add "api-version", valid_570781
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570783: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570773;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_570783.validator(path, query, header, formData, body)
  let scheme = call_570783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570783.url(scheme.get, call_570783.host, call_570783.base,
                         call_570783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570783, url, valid)

proc call*(call_570784: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570773;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_570785 = newJObject()
  var query_570786 = newJObject()
  var body_570787 = newJObject()
  add(path_570785, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570787 = connectionEnvelope
  add(path_570785, "name", newJString(name))
  add(query_570786, "api-version", newJString(apiVersion))
  add(path_570785, "slot", newJString(slot))
  add(path_570785, "subscriptionId", newJString(subscriptionId))
  add(path_570785, "entityName", newJString(entityName))
  result = call_570784.call(path_570785, query_570786, nil, nil, body_570787)

var webAppsCreateOrUpdateRelayServiceConnectionSlot* = Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570773(
    name: "webAppsCreateOrUpdateRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570774,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570775,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnectionSlot_570760 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetRelayServiceConnectionSlot_570762(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnectionSlot_570761(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570763 = path.getOrDefault("resourceGroupName")
  valid_570763 = validateParameter(valid_570763, JString, required = true,
                                 default = nil)
  if valid_570763 != nil:
    section.add "resourceGroupName", valid_570763
  var valid_570764 = path.getOrDefault("name")
  valid_570764 = validateParameter(valid_570764, JString, required = true,
                                 default = nil)
  if valid_570764 != nil:
    section.add "name", valid_570764
  var valid_570765 = path.getOrDefault("slot")
  valid_570765 = validateParameter(valid_570765, JString, required = true,
                                 default = nil)
  if valid_570765 != nil:
    section.add "slot", valid_570765
  var valid_570766 = path.getOrDefault("subscriptionId")
  valid_570766 = validateParameter(valid_570766, JString, required = true,
                                 default = nil)
  if valid_570766 != nil:
    section.add "subscriptionId", valid_570766
  var valid_570767 = path.getOrDefault("entityName")
  valid_570767 = validateParameter(valid_570767, JString, required = true,
                                 default = nil)
  if valid_570767 != nil:
    section.add "entityName", valid_570767
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570768 = query.getOrDefault("api-version")
  valid_570768 = validateParameter(valid_570768, JString, required = true,
                                 default = nil)
  if valid_570768 != nil:
    section.add "api-version", valid_570768
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570769: Call_WebAppsGetRelayServiceConnectionSlot_570760;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_570769.validator(path, query, header, formData, body)
  let scheme = call_570769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570769.url(scheme.get, call_570769.host, call_570769.base,
                         call_570769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570769, url, valid)

proc call*(call_570770: Call_WebAppsGetRelayServiceConnectionSlot_570760;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnectionSlot
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_570771 = newJObject()
  var query_570772 = newJObject()
  add(path_570771, "resourceGroupName", newJString(resourceGroupName))
  add(query_570772, "api-version", newJString(apiVersion))
  add(path_570771, "name", newJString(name))
  add(path_570771, "slot", newJString(slot))
  add(path_570771, "subscriptionId", newJString(subscriptionId))
  add(path_570771, "entityName", newJString(entityName))
  result = call_570770.call(path_570771, query_570772, nil, nil, nil)

var webAppsGetRelayServiceConnectionSlot* = Call_WebAppsGetRelayServiceConnectionSlot_570760(
    name: "webAppsGetRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnectionSlot_570761, base: "",
    url: url_WebAppsGetRelayServiceConnectionSlot_570762, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnectionSlot_570801 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateRelayServiceConnectionSlot_570803(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnectionSlot_570802(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570804 = path.getOrDefault("resourceGroupName")
  valid_570804 = validateParameter(valid_570804, JString, required = true,
                                 default = nil)
  if valid_570804 != nil:
    section.add "resourceGroupName", valid_570804
  var valid_570805 = path.getOrDefault("name")
  valid_570805 = validateParameter(valid_570805, JString, required = true,
                                 default = nil)
  if valid_570805 != nil:
    section.add "name", valid_570805
  var valid_570806 = path.getOrDefault("slot")
  valid_570806 = validateParameter(valid_570806, JString, required = true,
                                 default = nil)
  if valid_570806 != nil:
    section.add "slot", valid_570806
  var valid_570807 = path.getOrDefault("subscriptionId")
  valid_570807 = validateParameter(valid_570807, JString, required = true,
                                 default = nil)
  if valid_570807 != nil:
    section.add "subscriptionId", valid_570807
  var valid_570808 = path.getOrDefault("entityName")
  valid_570808 = validateParameter(valid_570808, JString, required = true,
                                 default = nil)
  if valid_570808 != nil:
    section.add "entityName", valid_570808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570809 = query.getOrDefault("api-version")
  valid_570809 = validateParameter(valid_570809, JString, required = true,
                                 default = nil)
  if valid_570809 != nil:
    section.add "api-version", valid_570809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570811: Call_WebAppsUpdateRelayServiceConnectionSlot_570801;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_570811.validator(path, query, header, formData, body)
  let scheme = call_570811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570811.url(scheme.get, call_570811.host, call_570811.base,
                         call_570811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570811, url, valid)

proc call*(call_570812: Call_WebAppsUpdateRelayServiceConnectionSlot_570801;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_570813 = newJObject()
  var query_570814 = newJObject()
  var body_570815 = newJObject()
  add(path_570813, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570815 = connectionEnvelope
  add(path_570813, "name", newJString(name))
  add(query_570814, "api-version", newJString(apiVersion))
  add(path_570813, "slot", newJString(slot))
  add(path_570813, "subscriptionId", newJString(subscriptionId))
  add(path_570813, "entityName", newJString(entityName))
  result = call_570812.call(path_570813, query_570814, nil, nil, body_570815)

var webAppsUpdateRelayServiceConnectionSlot* = Call_WebAppsUpdateRelayServiceConnectionSlot_570801(
    name: "webAppsUpdateRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnectionSlot_570802, base: "",
    url: url_WebAppsUpdateRelayServiceConnectionSlot_570803,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnectionSlot_570788 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteRelayServiceConnectionSlot_570790(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnectionSlot_570789(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570791 = path.getOrDefault("resourceGroupName")
  valid_570791 = validateParameter(valid_570791, JString, required = true,
                                 default = nil)
  if valid_570791 != nil:
    section.add "resourceGroupName", valid_570791
  var valid_570792 = path.getOrDefault("name")
  valid_570792 = validateParameter(valid_570792, JString, required = true,
                                 default = nil)
  if valid_570792 != nil:
    section.add "name", valid_570792
  var valid_570793 = path.getOrDefault("slot")
  valid_570793 = validateParameter(valid_570793, JString, required = true,
                                 default = nil)
  if valid_570793 != nil:
    section.add "slot", valid_570793
  var valid_570794 = path.getOrDefault("subscriptionId")
  valid_570794 = validateParameter(valid_570794, JString, required = true,
                                 default = nil)
  if valid_570794 != nil:
    section.add "subscriptionId", valid_570794
  var valid_570795 = path.getOrDefault("entityName")
  valid_570795 = validateParameter(valid_570795, JString, required = true,
                                 default = nil)
  if valid_570795 != nil:
    section.add "entityName", valid_570795
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570796 = query.getOrDefault("api-version")
  valid_570796 = validateParameter(valid_570796, JString, required = true,
                                 default = nil)
  if valid_570796 != nil:
    section.add "api-version", valid_570796
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570797: Call_WebAppsDeleteRelayServiceConnectionSlot_570788;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_570797.validator(path, query, header, formData, body)
  let scheme = call_570797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570797.url(scheme.get, call_570797.host, call_570797.base,
                         call_570797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570797, url, valid)

proc call*(call_570798: Call_WebAppsDeleteRelayServiceConnectionSlot_570788;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnectionSlot
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_570799 = newJObject()
  var query_570800 = newJObject()
  add(path_570799, "resourceGroupName", newJString(resourceGroupName))
  add(query_570800, "api-version", newJString(apiVersion))
  add(path_570799, "name", newJString(name))
  add(path_570799, "slot", newJString(slot))
  add(path_570799, "subscriptionId", newJString(subscriptionId))
  add(path_570799, "entityName", newJString(entityName))
  result = call_570798.call(path_570799, query_570800, nil, nil, nil)

var webAppsDeleteRelayServiceConnectionSlot* = Call_WebAppsDeleteRelayServiceConnectionSlot_570788(
    name: "webAppsDeleteRelayServiceConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnectionSlot_570789, base: "",
    url: url_WebAppsDeleteRelayServiceConnectionSlot_570790,
    schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiersSlot_570816 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceIdentifiersSlot_570818(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiersSlot_570817(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570819 = path.getOrDefault("resourceGroupName")
  valid_570819 = validateParameter(valid_570819, JString, required = true,
                                 default = nil)
  if valid_570819 != nil:
    section.add "resourceGroupName", valid_570819
  var valid_570820 = path.getOrDefault("name")
  valid_570820 = validateParameter(valid_570820, JString, required = true,
                                 default = nil)
  if valid_570820 != nil:
    section.add "name", valid_570820
  var valid_570821 = path.getOrDefault("slot")
  valid_570821 = validateParameter(valid_570821, JString, required = true,
                                 default = nil)
  if valid_570821 != nil:
    section.add "slot", valid_570821
  var valid_570822 = path.getOrDefault("subscriptionId")
  valid_570822 = validateParameter(valid_570822, JString, required = true,
                                 default = nil)
  if valid_570822 != nil:
    section.add "subscriptionId", valid_570822
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570823 = query.getOrDefault("api-version")
  valid_570823 = validateParameter(valid_570823, JString, required = true,
                                 default = nil)
  if valid_570823 != nil:
    section.add "api-version", valid_570823
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570824: Call_WebAppsListInstanceIdentifiersSlot_570816;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_570824.validator(path, query, header, formData, body)
  let scheme = call_570824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570824.url(scheme.get, call_570824.host, call_570824.base,
                         call_570824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570824, url, valid)

proc call*(call_570825: Call_WebAppsListInstanceIdentifiersSlot_570816;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiersSlot
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570826 = newJObject()
  var query_570827 = newJObject()
  add(path_570826, "resourceGroupName", newJString(resourceGroupName))
  add(query_570827, "api-version", newJString(apiVersion))
  add(path_570826, "name", newJString(name))
  add(path_570826, "slot", newJString(slot))
  add(path_570826, "subscriptionId", newJString(subscriptionId))
  result = call_570825.call(path_570826, query_570827, nil, nil, nil)

var webAppsListInstanceIdentifiersSlot* = Call_WebAppsListInstanceIdentifiersSlot_570816(
    name: "webAppsListInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_WebAppsListInstanceIdentifiersSlot_570817, base: "",
    url: url_WebAppsListInstanceIdentifiersSlot_570818, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperationSlot_570841 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateInstanceMSDeployOperationSlot_570843(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperationSlot_570842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570844 = path.getOrDefault("resourceGroupName")
  valid_570844 = validateParameter(valid_570844, JString, required = true,
                                 default = nil)
  if valid_570844 != nil:
    section.add "resourceGroupName", valid_570844
  var valid_570845 = path.getOrDefault("name")
  valid_570845 = validateParameter(valid_570845, JString, required = true,
                                 default = nil)
  if valid_570845 != nil:
    section.add "name", valid_570845
  var valid_570846 = path.getOrDefault("slot")
  valid_570846 = validateParameter(valid_570846, JString, required = true,
                                 default = nil)
  if valid_570846 != nil:
    section.add "slot", valid_570846
  var valid_570847 = path.getOrDefault("subscriptionId")
  valid_570847 = validateParameter(valid_570847, JString, required = true,
                                 default = nil)
  if valid_570847 != nil:
    section.add "subscriptionId", valid_570847
  var valid_570848 = path.getOrDefault("instanceId")
  valid_570848 = validateParameter(valid_570848, JString, required = true,
                                 default = nil)
  if valid_570848 != nil:
    section.add "instanceId", valid_570848
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570849 = query.getOrDefault("api-version")
  valid_570849 = validateParameter(valid_570849, JString, required = true,
                                 default = nil)
  if valid_570849 != nil:
    section.add "api-version", valid_570849
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570851: Call_WebAppsCreateInstanceMSDeployOperationSlot_570841;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_570851.validator(path, query, header, formData, body)
  let scheme = call_570851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570851.url(scheme.get, call_570851.host, call_570851.base,
                         call_570851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570851, url, valid)

proc call*(call_570852: Call_WebAppsCreateInstanceMSDeployOperationSlot_570841;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_570853 = newJObject()
  var query_570854 = newJObject()
  var body_570855 = newJObject()
  add(path_570853, "resourceGroupName", newJString(resourceGroupName))
  add(query_570854, "api-version", newJString(apiVersion))
  add(path_570853, "name", newJString(name))
  add(path_570853, "slot", newJString(slot))
  add(path_570853, "subscriptionId", newJString(subscriptionId))
  add(path_570853, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_570855 = MSDeploy
  result = call_570852.call(path_570853, query_570854, nil, nil, body_570855)

var webAppsCreateInstanceMSDeployOperationSlot* = Call_WebAppsCreateInstanceMSDeployOperationSlot_570841(
    name: "webAppsCreateInstanceMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperationSlot_570842,
    base: "", url: url_WebAppsCreateInstanceMSDeployOperationSlot_570843,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatusSlot_570828 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMsDeployStatusSlot_570830(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatusSlot_570829(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570831 = path.getOrDefault("resourceGroupName")
  valid_570831 = validateParameter(valid_570831, JString, required = true,
                                 default = nil)
  if valid_570831 != nil:
    section.add "resourceGroupName", valid_570831
  var valid_570832 = path.getOrDefault("name")
  valid_570832 = validateParameter(valid_570832, JString, required = true,
                                 default = nil)
  if valid_570832 != nil:
    section.add "name", valid_570832
  var valid_570833 = path.getOrDefault("slot")
  valid_570833 = validateParameter(valid_570833, JString, required = true,
                                 default = nil)
  if valid_570833 != nil:
    section.add "slot", valid_570833
  var valid_570834 = path.getOrDefault("subscriptionId")
  valid_570834 = validateParameter(valid_570834, JString, required = true,
                                 default = nil)
  if valid_570834 != nil:
    section.add "subscriptionId", valid_570834
  var valid_570835 = path.getOrDefault("instanceId")
  valid_570835 = validateParameter(valid_570835, JString, required = true,
                                 default = nil)
  if valid_570835 != nil:
    section.add "instanceId", valid_570835
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570836 = query.getOrDefault("api-version")
  valid_570836 = validateParameter(valid_570836, JString, required = true,
                                 default = nil)
  if valid_570836 != nil:
    section.add "api-version", valid_570836
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570837: Call_WebAppsGetInstanceMsDeployStatusSlot_570828;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_570837.validator(path, query, header, formData, body)
  let scheme = call_570837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570837.url(scheme.get, call_570837.host, call_570837.base,
                         call_570837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570837, url, valid)

proc call*(call_570838: Call_WebAppsGetInstanceMsDeployStatusSlot_570828;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_570839 = newJObject()
  var query_570840 = newJObject()
  add(path_570839, "resourceGroupName", newJString(resourceGroupName))
  add(query_570840, "api-version", newJString(apiVersion))
  add(path_570839, "name", newJString(name))
  add(path_570839, "slot", newJString(slot))
  add(path_570839, "subscriptionId", newJString(subscriptionId))
  add(path_570839, "instanceId", newJString(instanceId))
  result = call_570838.call(path_570839, query_570840, nil, nil, nil)

var webAppsGetInstanceMsDeployStatusSlot* = Call_WebAppsGetInstanceMsDeployStatusSlot_570828(
    name: "webAppsGetInstanceMsDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatusSlot_570829, base: "",
    url: url_WebAppsGetInstanceMsDeployStatusSlot_570830, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLogSlot_570856 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMSDeployLogSlot_570858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLogSlot_570857(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570859 = path.getOrDefault("resourceGroupName")
  valid_570859 = validateParameter(valid_570859, JString, required = true,
                                 default = nil)
  if valid_570859 != nil:
    section.add "resourceGroupName", valid_570859
  var valid_570860 = path.getOrDefault("name")
  valid_570860 = validateParameter(valid_570860, JString, required = true,
                                 default = nil)
  if valid_570860 != nil:
    section.add "name", valid_570860
  var valid_570861 = path.getOrDefault("slot")
  valid_570861 = validateParameter(valid_570861, JString, required = true,
                                 default = nil)
  if valid_570861 != nil:
    section.add "slot", valid_570861
  var valid_570862 = path.getOrDefault("subscriptionId")
  valid_570862 = validateParameter(valid_570862, JString, required = true,
                                 default = nil)
  if valid_570862 != nil:
    section.add "subscriptionId", valid_570862
  var valid_570863 = path.getOrDefault("instanceId")
  valid_570863 = validateParameter(valid_570863, JString, required = true,
                                 default = nil)
  if valid_570863 != nil:
    section.add "instanceId", valid_570863
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570864 = query.getOrDefault("api-version")
  valid_570864 = validateParameter(valid_570864, JString, required = true,
                                 default = nil)
  if valid_570864 != nil:
    section.add "api-version", valid_570864
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570865: Call_WebAppsGetInstanceMSDeployLogSlot_570856;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_570865.validator(path, query, header, formData, body)
  let scheme = call_570865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570865.url(scheme.get, call_570865.host, call_570865.base,
                         call_570865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570865, url, valid)

proc call*(call_570866: Call_WebAppsGetInstanceMSDeployLogSlot_570856;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_570867 = newJObject()
  var query_570868 = newJObject()
  add(path_570867, "resourceGroupName", newJString(resourceGroupName))
  add(query_570868, "api-version", newJString(apiVersion))
  add(path_570867, "name", newJString(name))
  add(path_570867, "slot", newJString(slot))
  add(path_570867, "subscriptionId", newJString(subscriptionId))
  add(path_570867, "instanceId", newJString(instanceId))
  result = call_570866.call(path_570867, query_570868, nil, nil, nil)

var webAppsGetInstanceMSDeployLogSlot* = Call_WebAppsGetInstanceMSDeployLogSlot_570856(
    name: "webAppsGetInstanceMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLogSlot_570857, base: "",
    url: url_WebAppsGetInstanceMSDeployLogSlot_570858, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessesSlot_570869 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessesSlot_570871(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessesSlot_570870(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570872 = path.getOrDefault("resourceGroupName")
  valid_570872 = validateParameter(valid_570872, JString, required = true,
                                 default = nil)
  if valid_570872 != nil:
    section.add "resourceGroupName", valid_570872
  var valid_570873 = path.getOrDefault("name")
  valid_570873 = validateParameter(valid_570873, JString, required = true,
                                 default = nil)
  if valid_570873 != nil:
    section.add "name", valid_570873
  var valid_570874 = path.getOrDefault("slot")
  valid_570874 = validateParameter(valid_570874, JString, required = true,
                                 default = nil)
  if valid_570874 != nil:
    section.add "slot", valid_570874
  var valid_570875 = path.getOrDefault("subscriptionId")
  valid_570875 = validateParameter(valid_570875, JString, required = true,
                                 default = nil)
  if valid_570875 != nil:
    section.add "subscriptionId", valid_570875
  var valid_570876 = path.getOrDefault("instanceId")
  valid_570876 = validateParameter(valid_570876, JString, required = true,
                                 default = nil)
  if valid_570876 != nil:
    section.add "instanceId", valid_570876
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570877 = query.getOrDefault("api-version")
  valid_570877 = validateParameter(valid_570877, JString, required = true,
                                 default = nil)
  if valid_570877 != nil:
    section.add "api-version", valid_570877
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570878: Call_WebAppsListInstanceProcessesSlot_570869;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_570878.validator(path, query, header, formData, body)
  let scheme = call_570878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570878.url(scheme.get, call_570878.host, call_570878.base,
                         call_570878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570878, url, valid)

proc call*(call_570879: Call_WebAppsListInstanceProcessesSlot_570869;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570880 = newJObject()
  var query_570881 = newJObject()
  add(path_570880, "resourceGroupName", newJString(resourceGroupName))
  add(query_570881, "api-version", newJString(apiVersion))
  add(path_570880, "name", newJString(name))
  add(path_570880, "slot", newJString(slot))
  add(path_570880, "subscriptionId", newJString(subscriptionId))
  add(path_570880, "instanceId", newJString(instanceId))
  result = call_570879.call(path_570880, query_570881, nil, nil, nil)

var webAppsListInstanceProcessesSlot* = Call_WebAppsListInstanceProcessesSlot_570869(
    name: "webAppsListInstanceProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcessesSlot_570870, base: "",
    url: url_WebAppsListInstanceProcessesSlot_570871, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessSlot_570882 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessSlot_570884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessSlot_570883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570885 = path.getOrDefault("resourceGroupName")
  valid_570885 = validateParameter(valid_570885, JString, required = true,
                                 default = nil)
  if valid_570885 != nil:
    section.add "resourceGroupName", valid_570885
  var valid_570886 = path.getOrDefault("name")
  valid_570886 = validateParameter(valid_570886, JString, required = true,
                                 default = nil)
  if valid_570886 != nil:
    section.add "name", valid_570886
  var valid_570887 = path.getOrDefault("processId")
  valid_570887 = validateParameter(valid_570887, JString, required = true,
                                 default = nil)
  if valid_570887 != nil:
    section.add "processId", valid_570887
  var valid_570888 = path.getOrDefault("slot")
  valid_570888 = validateParameter(valid_570888, JString, required = true,
                                 default = nil)
  if valid_570888 != nil:
    section.add "slot", valid_570888
  var valid_570889 = path.getOrDefault("subscriptionId")
  valid_570889 = validateParameter(valid_570889, JString, required = true,
                                 default = nil)
  if valid_570889 != nil:
    section.add "subscriptionId", valid_570889
  var valid_570890 = path.getOrDefault("instanceId")
  valid_570890 = validateParameter(valid_570890, JString, required = true,
                                 default = nil)
  if valid_570890 != nil:
    section.add "instanceId", valid_570890
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570891 = query.getOrDefault("api-version")
  valid_570891 = validateParameter(valid_570891, JString, required = true,
                                 default = nil)
  if valid_570891 != nil:
    section.add "api-version", valid_570891
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570892: Call_WebAppsGetInstanceProcessSlot_570882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_570892.validator(path, query, header, formData, body)
  let scheme = call_570892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570892.url(scheme.get, call_570892.host, call_570892.base,
                         call_570892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570892, url, valid)

proc call*(call_570893: Call_WebAppsGetInstanceProcessSlot_570882;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570894 = newJObject()
  var query_570895 = newJObject()
  add(path_570894, "resourceGroupName", newJString(resourceGroupName))
  add(query_570895, "api-version", newJString(apiVersion))
  add(path_570894, "name", newJString(name))
  add(path_570894, "processId", newJString(processId))
  add(path_570894, "slot", newJString(slot))
  add(path_570894, "subscriptionId", newJString(subscriptionId))
  add(path_570894, "instanceId", newJString(instanceId))
  result = call_570893.call(path_570894, query_570895, nil, nil, nil)

var webAppsGetInstanceProcessSlot* = Call_WebAppsGetInstanceProcessSlot_570882(
    name: "webAppsGetInstanceProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcessSlot_570883, base: "",
    url: url_WebAppsGetInstanceProcessSlot_570884, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcessSlot_570896 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteInstanceProcessSlot_570898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcessSlot_570897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570899 = path.getOrDefault("resourceGroupName")
  valid_570899 = validateParameter(valid_570899, JString, required = true,
                                 default = nil)
  if valid_570899 != nil:
    section.add "resourceGroupName", valid_570899
  var valid_570900 = path.getOrDefault("name")
  valid_570900 = validateParameter(valid_570900, JString, required = true,
                                 default = nil)
  if valid_570900 != nil:
    section.add "name", valid_570900
  var valid_570901 = path.getOrDefault("processId")
  valid_570901 = validateParameter(valid_570901, JString, required = true,
                                 default = nil)
  if valid_570901 != nil:
    section.add "processId", valid_570901
  var valid_570902 = path.getOrDefault("slot")
  valid_570902 = validateParameter(valid_570902, JString, required = true,
                                 default = nil)
  if valid_570902 != nil:
    section.add "slot", valid_570902
  var valid_570903 = path.getOrDefault("subscriptionId")
  valid_570903 = validateParameter(valid_570903, JString, required = true,
                                 default = nil)
  if valid_570903 != nil:
    section.add "subscriptionId", valid_570903
  var valid_570904 = path.getOrDefault("instanceId")
  valid_570904 = validateParameter(valid_570904, JString, required = true,
                                 default = nil)
  if valid_570904 != nil:
    section.add "instanceId", valid_570904
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570905 = query.getOrDefault("api-version")
  valid_570905 = validateParameter(valid_570905, JString, required = true,
                                 default = nil)
  if valid_570905 != nil:
    section.add "api-version", valid_570905
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570906: Call_WebAppsDeleteInstanceProcessSlot_570896;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_570906.validator(path, query, header, formData, body)
  let scheme = call_570906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570906.url(scheme.get, call_570906.host, call_570906.base,
                         call_570906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570906, url, valid)

proc call*(call_570907: Call_WebAppsDeleteInstanceProcessSlot_570896;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570908 = newJObject()
  var query_570909 = newJObject()
  add(path_570908, "resourceGroupName", newJString(resourceGroupName))
  add(query_570909, "api-version", newJString(apiVersion))
  add(path_570908, "name", newJString(name))
  add(path_570908, "processId", newJString(processId))
  add(path_570908, "slot", newJString(slot))
  add(path_570908, "subscriptionId", newJString(subscriptionId))
  add(path_570908, "instanceId", newJString(instanceId))
  result = call_570907.call(path_570908, query_570909, nil, nil, nil)

var webAppsDeleteInstanceProcessSlot* = Call_WebAppsDeleteInstanceProcessSlot_570896(
    name: "webAppsDeleteInstanceProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcessSlot_570897, base: "",
    url: url_WebAppsDeleteInstanceProcessSlot_570898, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDumpSlot_570910 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessDumpSlot_570912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDumpSlot_570911(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570913 = path.getOrDefault("resourceGroupName")
  valid_570913 = validateParameter(valid_570913, JString, required = true,
                                 default = nil)
  if valid_570913 != nil:
    section.add "resourceGroupName", valid_570913
  var valid_570914 = path.getOrDefault("name")
  valid_570914 = validateParameter(valid_570914, JString, required = true,
                                 default = nil)
  if valid_570914 != nil:
    section.add "name", valid_570914
  var valid_570915 = path.getOrDefault("processId")
  valid_570915 = validateParameter(valid_570915, JString, required = true,
                                 default = nil)
  if valid_570915 != nil:
    section.add "processId", valid_570915
  var valid_570916 = path.getOrDefault("slot")
  valid_570916 = validateParameter(valid_570916, JString, required = true,
                                 default = nil)
  if valid_570916 != nil:
    section.add "slot", valid_570916
  var valid_570917 = path.getOrDefault("subscriptionId")
  valid_570917 = validateParameter(valid_570917, JString, required = true,
                                 default = nil)
  if valid_570917 != nil:
    section.add "subscriptionId", valid_570917
  var valid_570918 = path.getOrDefault("instanceId")
  valid_570918 = validateParameter(valid_570918, JString, required = true,
                                 default = nil)
  if valid_570918 != nil:
    section.add "instanceId", valid_570918
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570919 = query.getOrDefault("api-version")
  valid_570919 = validateParameter(valid_570919, JString, required = true,
                                 default = nil)
  if valid_570919 != nil:
    section.add "api-version", valid_570919
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570920: Call_WebAppsGetInstanceProcessDumpSlot_570910;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_570920.validator(path, query, header, formData, body)
  let scheme = call_570920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570920.url(scheme.get, call_570920.host, call_570920.base,
                         call_570920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570920, url, valid)

proc call*(call_570921: Call_WebAppsGetInstanceProcessDumpSlot_570910;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570922 = newJObject()
  var query_570923 = newJObject()
  add(path_570922, "resourceGroupName", newJString(resourceGroupName))
  add(query_570923, "api-version", newJString(apiVersion))
  add(path_570922, "name", newJString(name))
  add(path_570922, "processId", newJString(processId))
  add(path_570922, "slot", newJString(slot))
  add(path_570922, "subscriptionId", newJString(subscriptionId))
  add(path_570922, "instanceId", newJString(instanceId))
  result = call_570921.call(path_570922, query_570923, nil, nil, nil)

var webAppsGetInstanceProcessDumpSlot* = Call_WebAppsGetInstanceProcessDumpSlot_570910(
    name: "webAppsGetInstanceProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDumpSlot_570911, base: "",
    url: url_WebAppsGetInstanceProcessDumpSlot_570912, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModulesSlot_570924 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessModulesSlot_570926(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModulesSlot_570925(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570927 = path.getOrDefault("resourceGroupName")
  valid_570927 = validateParameter(valid_570927, JString, required = true,
                                 default = nil)
  if valid_570927 != nil:
    section.add "resourceGroupName", valid_570927
  var valid_570928 = path.getOrDefault("name")
  valid_570928 = validateParameter(valid_570928, JString, required = true,
                                 default = nil)
  if valid_570928 != nil:
    section.add "name", valid_570928
  var valid_570929 = path.getOrDefault("processId")
  valid_570929 = validateParameter(valid_570929, JString, required = true,
                                 default = nil)
  if valid_570929 != nil:
    section.add "processId", valid_570929
  var valid_570930 = path.getOrDefault("slot")
  valid_570930 = validateParameter(valid_570930, JString, required = true,
                                 default = nil)
  if valid_570930 != nil:
    section.add "slot", valid_570930
  var valid_570931 = path.getOrDefault("subscriptionId")
  valid_570931 = validateParameter(valid_570931, JString, required = true,
                                 default = nil)
  if valid_570931 != nil:
    section.add "subscriptionId", valid_570931
  var valid_570932 = path.getOrDefault("instanceId")
  valid_570932 = validateParameter(valid_570932, JString, required = true,
                                 default = nil)
  if valid_570932 != nil:
    section.add "instanceId", valid_570932
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570933 = query.getOrDefault("api-version")
  valid_570933 = validateParameter(valid_570933, JString, required = true,
                                 default = nil)
  if valid_570933 != nil:
    section.add "api-version", valid_570933
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570934: Call_WebAppsListInstanceProcessModulesSlot_570924;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_570934.validator(path, query, header, formData, body)
  let scheme = call_570934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570934.url(scheme.get, call_570934.host, call_570934.base,
                         call_570934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570934, url, valid)

proc call*(call_570935: Call_WebAppsListInstanceProcessModulesSlot_570924;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570936 = newJObject()
  var query_570937 = newJObject()
  add(path_570936, "resourceGroupName", newJString(resourceGroupName))
  add(query_570937, "api-version", newJString(apiVersion))
  add(path_570936, "name", newJString(name))
  add(path_570936, "processId", newJString(processId))
  add(path_570936, "slot", newJString(slot))
  add(path_570936, "subscriptionId", newJString(subscriptionId))
  add(path_570936, "instanceId", newJString(instanceId))
  result = call_570935.call(path_570936, query_570937, nil, nil, nil)

var webAppsListInstanceProcessModulesSlot* = Call_WebAppsListInstanceProcessModulesSlot_570924(
    name: "webAppsListInstanceProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModulesSlot_570925, base: "",
    url: url_WebAppsListInstanceProcessModulesSlot_570926, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModuleSlot_570938 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessModuleSlot_570940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModuleSlot_570939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570941 = path.getOrDefault("resourceGroupName")
  valid_570941 = validateParameter(valid_570941, JString, required = true,
                                 default = nil)
  if valid_570941 != nil:
    section.add "resourceGroupName", valid_570941
  var valid_570942 = path.getOrDefault("name")
  valid_570942 = validateParameter(valid_570942, JString, required = true,
                                 default = nil)
  if valid_570942 != nil:
    section.add "name", valid_570942
  var valid_570943 = path.getOrDefault("processId")
  valid_570943 = validateParameter(valid_570943, JString, required = true,
                                 default = nil)
  if valid_570943 != nil:
    section.add "processId", valid_570943
  var valid_570944 = path.getOrDefault("slot")
  valid_570944 = validateParameter(valid_570944, JString, required = true,
                                 default = nil)
  if valid_570944 != nil:
    section.add "slot", valid_570944
  var valid_570945 = path.getOrDefault("subscriptionId")
  valid_570945 = validateParameter(valid_570945, JString, required = true,
                                 default = nil)
  if valid_570945 != nil:
    section.add "subscriptionId", valid_570945
  var valid_570946 = path.getOrDefault("baseAddress")
  valid_570946 = validateParameter(valid_570946, JString, required = true,
                                 default = nil)
  if valid_570946 != nil:
    section.add "baseAddress", valid_570946
  var valid_570947 = path.getOrDefault("instanceId")
  valid_570947 = validateParameter(valid_570947, JString, required = true,
                                 default = nil)
  if valid_570947 != nil:
    section.add "instanceId", valid_570947
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570948 = query.getOrDefault("api-version")
  valid_570948 = validateParameter(valid_570948, JString, required = true,
                                 default = nil)
  if valid_570948 != nil:
    section.add "api-version", valid_570948
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570949: Call_WebAppsGetInstanceProcessModuleSlot_570938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_570949.validator(path, query, header, formData, body)
  let scheme = call_570949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570949.url(scheme.get, call_570949.host, call_570949.base,
                         call_570949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570949, url, valid)

proc call*(call_570950: Call_WebAppsGetInstanceProcessModuleSlot_570938;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string;
          baseAddress: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570951 = newJObject()
  var query_570952 = newJObject()
  add(path_570951, "resourceGroupName", newJString(resourceGroupName))
  add(query_570952, "api-version", newJString(apiVersion))
  add(path_570951, "name", newJString(name))
  add(path_570951, "processId", newJString(processId))
  add(path_570951, "slot", newJString(slot))
  add(path_570951, "subscriptionId", newJString(subscriptionId))
  add(path_570951, "baseAddress", newJString(baseAddress))
  add(path_570951, "instanceId", newJString(instanceId))
  result = call_570950.call(path_570951, query_570952, nil, nil, nil)

var webAppsGetInstanceProcessModuleSlot* = Call_WebAppsGetInstanceProcessModuleSlot_570938(
    name: "webAppsGetInstanceProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModuleSlot_570939, base: "",
    url: url_WebAppsGetInstanceProcessModuleSlot_570940, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreadsSlot_570953 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessThreadsSlot_570955(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreadsSlot_570954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570956 = path.getOrDefault("resourceGroupName")
  valid_570956 = validateParameter(valid_570956, JString, required = true,
                                 default = nil)
  if valid_570956 != nil:
    section.add "resourceGroupName", valid_570956
  var valid_570957 = path.getOrDefault("name")
  valid_570957 = validateParameter(valid_570957, JString, required = true,
                                 default = nil)
  if valid_570957 != nil:
    section.add "name", valid_570957
  var valid_570958 = path.getOrDefault("processId")
  valid_570958 = validateParameter(valid_570958, JString, required = true,
                                 default = nil)
  if valid_570958 != nil:
    section.add "processId", valid_570958
  var valid_570959 = path.getOrDefault("slot")
  valid_570959 = validateParameter(valid_570959, JString, required = true,
                                 default = nil)
  if valid_570959 != nil:
    section.add "slot", valid_570959
  var valid_570960 = path.getOrDefault("subscriptionId")
  valid_570960 = validateParameter(valid_570960, JString, required = true,
                                 default = nil)
  if valid_570960 != nil:
    section.add "subscriptionId", valid_570960
  var valid_570961 = path.getOrDefault("instanceId")
  valid_570961 = validateParameter(valid_570961, JString, required = true,
                                 default = nil)
  if valid_570961 != nil:
    section.add "instanceId", valid_570961
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570962 = query.getOrDefault("api-version")
  valid_570962 = validateParameter(valid_570962, JString, required = true,
                                 default = nil)
  if valid_570962 != nil:
    section.add "api-version", valid_570962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570963: Call_WebAppsListInstanceProcessThreadsSlot_570953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_570963.validator(path, query, header, formData, body)
  let scheme = call_570963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570963.url(scheme.get, call_570963.host, call_570963.base,
                         call_570963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570963, url, valid)

proc call*(call_570964: Call_WebAppsListInstanceProcessThreadsSlot_570953;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_570965 = newJObject()
  var query_570966 = newJObject()
  add(path_570965, "resourceGroupName", newJString(resourceGroupName))
  add(query_570966, "api-version", newJString(apiVersion))
  add(path_570965, "name", newJString(name))
  add(path_570965, "processId", newJString(processId))
  add(path_570965, "slot", newJString(slot))
  add(path_570965, "subscriptionId", newJString(subscriptionId))
  add(path_570965, "instanceId", newJString(instanceId))
  result = call_570964.call(path_570965, query_570966, nil, nil, nil)

var webAppsListInstanceProcessThreadsSlot* = Call_WebAppsListInstanceProcessThreadsSlot_570953(
    name: "webAppsListInstanceProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreadsSlot_570954, base: "",
    url: url_WebAppsListInstanceProcessThreadsSlot_570955, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThreadSlot_570967 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessThreadSlot_570969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThreadSlot_570968(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570970 = path.getOrDefault("resourceGroupName")
  valid_570970 = validateParameter(valid_570970, JString, required = true,
                                 default = nil)
  if valid_570970 != nil:
    section.add "resourceGroupName", valid_570970
  var valid_570971 = path.getOrDefault("name")
  valid_570971 = validateParameter(valid_570971, JString, required = true,
                                 default = nil)
  if valid_570971 != nil:
    section.add "name", valid_570971
  var valid_570972 = path.getOrDefault("processId")
  valid_570972 = validateParameter(valid_570972, JString, required = true,
                                 default = nil)
  if valid_570972 != nil:
    section.add "processId", valid_570972
  var valid_570973 = path.getOrDefault("slot")
  valid_570973 = validateParameter(valid_570973, JString, required = true,
                                 default = nil)
  if valid_570973 != nil:
    section.add "slot", valid_570973
  var valid_570974 = path.getOrDefault("subscriptionId")
  valid_570974 = validateParameter(valid_570974, JString, required = true,
                                 default = nil)
  if valid_570974 != nil:
    section.add "subscriptionId", valid_570974
  var valid_570975 = path.getOrDefault("instanceId")
  valid_570975 = validateParameter(valid_570975, JString, required = true,
                                 default = nil)
  if valid_570975 != nil:
    section.add "instanceId", valid_570975
  var valid_570976 = path.getOrDefault("threadId")
  valid_570976 = validateParameter(valid_570976, JString, required = true,
                                 default = nil)
  if valid_570976 != nil:
    section.add "threadId", valid_570976
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570977 = query.getOrDefault("api-version")
  valid_570977 = validateParameter(valid_570977, JString, required = true,
                                 default = nil)
  if valid_570977 != nil:
    section.add "api-version", valid_570977
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570978: Call_WebAppsGetInstanceProcessThreadSlot_570967;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_570978.validator(path, query, header, formData, body)
  let scheme = call_570978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570978.url(scheme.get, call_570978.host, call_570978.base,
                         call_570978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570978, url, valid)

proc call*(call_570979: Call_WebAppsGetInstanceProcessThreadSlot_570967;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_570980 = newJObject()
  var query_570981 = newJObject()
  add(path_570980, "resourceGroupName", newJString(resourceGroupName))
  add(query_570981, "api-version", newJString(apiVersion))
  add(path_570980, "name", newJString(name))
  add(path_570980, "processId", newJString(processId))
  add(path_570980, "slot", newJString(slot))
  add(path_570980, "subscriptionId", newJString(subscriptionId))
  add(path_570980, "instanceId", newJString(instanceId))
  add(path_570980, "threadId", newJString(threadId))
  result = call_570979.call(path_570980, query_570981, nil, nil, nil)

var webAppsGetInstanceProcessThreadSlot* = Call_WebAppsGetInstanceProcessThreadSlot_570967(
    name: "webAppsGetInstanceProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThreadSlot_570968, base: "",
    url: url_WebAppsGetInstanceProcessThreadSlot_570969, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneableSlot_570982 = ref object of OpenApiRestCall_567666
proc url_WebAppsIsCloneableSlot_570984(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneableSlot_570983(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570985 = path.getOrDefault("resourceGroupName")
  valid_570985 = validateParameter(valid_570985, JString, required = true,
                                 default = nil)
  if valid_570985 != nil:
    section.add "resourceGroupName", valid_570985
  var valid_570986 = path.getOrDefault("name")
  valid_570986 = validateParameter(valid_570986, JString, required = true,
                                 default = nil)
  if valid_570986 != nil:
    section.add "name", valid_570986
  var valid_570987 = path.getOrDefault("slot")
  valid_570987 = validateParameter(valid_570987, JString, required = true,
                                 default = nil)
  if valid_570987 != nil:
    section.add "slot", valid_570987
  var valid_570988 = path.getOrDefault("subscriptionId")
  valid_570988 = validateParameter(valid_570988, JString, required = true,
                                 default = nil)
  if valid_570988 != nil:
    section.add "subscriptionId", valid_570988
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570989 = query.getOrDefault("api-version")
  valid_570989 = validateParameter(valid_570989, JString, required = true,
                                 default = nil)
  if valid_570989 != nil:
    section.add "api-version", valid_570989
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570990: Call_WebAppsIsCloneableSlot_570982; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_570990.validator(path, query, header, formData, body)
  let scheme = call_570990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570990.url(scheme.get, call_570990.host, call_570990.base,
                         call_570990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570990, url, valid)

proc call*(call_570991: Call_WebAppsIsCloneableSlot_570982;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsIsCloneableSlot
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570992 = newJObject()
  var query_570993 = newJObject()
  add(path_570992, "resourceGroupName", newJString(resourceGroupName))
  add(query_570993, "api-version", newJString(apiVersion))
  add(path_570992, "name", newJString(name))
  add(path_570992, "slot", newJString(slot))
  add(path_570992, "subscriptionId", newJString(subscriptionId))
  result = call_570991.call(path_570992, query_570993, nil, nil, nil)

var webAppsIsCloneableSlot* = Call_WebAppsIsCloneableSlot_570982(
    name: "webAppsIsCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_WebAppsIsCloneableSlot_570983, base: "",
    url: url_WebAppsIsCloneableSlot_570984, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggersSlot_570994 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSyncFunctionTriggersSlot_570996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggersSlot_570995(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570997 = path.getOrDefault("resourceGroupName")
  valid_570997 = validateParameter(valid_570997, JString, required = true,
                                 default = nil)
  if valid_570997 != nil:
    section.add "resourceGroupName", valid_570997
  var valid_570998 = path.getOrDefault("name")
  valid_570998 = validateParameter(valid_570998, JString, required = true,
                                 default = nil)
  if valid_570998 != nil:
    section.add "name", valid_570998
  var valid_570999 = path.getOrDefault("slot")
  valid_570999 = validateParameter(valid_570999, JString, required = true,
                                 default = nil)
  if valid_570999 != nil:
    section.add "slot", valid_570999
  var valid_571000 = path.getOrDefault("subscriptionId")
  valid_571000 = validateParameter(valid_571000, JString, required = true,
                                 default = nil)
  if valid_571000 != nil:
    section.add "subscriptionId", valid_571000
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571001 = query.getOrDefault("api-version")
  valid_571001 = validateParameter(valid_571001, JString, required = true,
                                 default = nil)
  if valid_571001 != nil:
    section.add "api-version", valid_571001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571002: Call_WebAppsListSyncFunctionTriggersSlot_570994;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_571002.validator(path, query, header, formData, body)
  let scheme = call_571002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571002.url(scheme.get, call_571002.host, call_571002.base,
                         call_571002.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571002, url, valid)

proc call*(call_571003: Call_WebAppsListSyncFunctionTriggersSlot_570994;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggersSlot
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571004 = newJObject()
  var query_571005 = newJObject()
  add(path_571004, "resourceGroupName", newJString(resourceGroupName))
  add(query_571005, "api-version", newJString(apiVersion))
  add(path_571004, "name", newJString(name))
  add(path_571004, "slot", newJString(slot))
  add(path_571004, "subscriptionId", newJString(subscriptionId))
  result = call_571003.call(path_571004, query_571005, nil, nil, nil)

var webAppsListSyncFunctionTriggersSlot* = Call_WebAppsListSyncFunctionTriggersSlot_570994(
    name: "webAppsListSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggersSlot_570995, base: "",
    url: url_WebAppsListSyncFunctionTriggersSlot_570996, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitionsSlot_571006 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetricDefinitionsSlot_571008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitionsSlot_571007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571009 = path.getOrDefault("resourceGroupName")
  valid_571009 = validateParameter(valid_571009, JString, required = true,
                                 default = nil)
  if valid_571009 != nil:
    section.add "resourceGroupName", valid_571009
  var valid_571010 = path.getOrDefault("name")
  valid_571010 = validateParameter(valid_571010, JString, required = true,
                                 default = nil)
  if valid_571010 != nil:
    section.add "name", valid_571010
  var valid_571011 = path.getOrDefault("slot")
  valid_571011 = validateParameter(valid_571011, JString, required = true,
                                 default = nil)
  if valid_571011 != nil:
    section.add "slot", valid_571011
  var valid_571012 = path.getOrDefault("subscriptionId")
  valid_571012 = validateParameter(valid_571012, JString, required = true,
                                 default = nil)
  if valid_571012 != nil:
    section.add "subscriptionId", valid_571012
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571013 = query.getOrDefault("api-version")
  valid_571013 = validateParameter(valid_571013, JString, required = true,
                                 default = nil)
  if valid_571013 != nil:
    section.add "api-version", valid_571013
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571014: Call_WebAppsListMetricDefinitionsSlot_571006;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_571014.validator(path, query, header, formData, body)
  let scheme = call_571014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571014.url(scheme.get, call_571014.host, call_571014.base,
                         call_571014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571014, url, valid)

proc call*(call_571015: Call_WebAppsListMetricDefinitionsSlot_571006;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitionsSlot
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571016 = newJObject()
  var query_571017 = newJObject()
  add(path_571016, "resourceGroupName", newJString(resourceGroupName))
  add(query_571017, "api-version", newJString(apiVersion))
  add(path_571016, "name", newJString(name))
  add(path_571016, "slot", newJString(slot))
  add(path_571016, "subscriptionId", newJString(subscriptionId))
  result = call_571015.call(path_571016, query_571017, nil, nil, nil)

var webAppsListMetricDefinitionsSlot* = Call_WebAppsListMetricDefinitionsSlot_571006(
    name: "webAppsListMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitionsSlot_571007, base: "",
    url: url_WebAppsListMetricDefinitionsSlot_571008, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricsSlot_571018 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetricsSlot_571020(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricsSlot_571019(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571021 = path.getOrDefault("resourceGroupName")
  valid_571021 = validateParameter(valid_571021, JString, required = true,
                                 default = nil)
  if valid_571021 != nil:
    section.add "resourceGroupName", valid_571021
  var valid_571022 = path.getOrDefault("name")
  valid_571022 = validateParameter(valid_571022, JString, required = true,
                                 default = nil)
  if valid_571022 != nil:
    section.add "name", valid_571022
  var valid_571023 = path.getOrDefault("slot")
  valid_571023 = validateParameter(valid_571023, JString, required = true,
                                 default = nil)
  if valid_571023 != nil:
    section.add "slot", valid_571023
  var valid_571024 = path.getOrDefault("subscriptionId")
  valid_571024 = validateParameter(valid_571024, JString, required = true,
                                 default = nil)
  if valid_571024 != nil:
    section.add "subscriptionId", valid_571024
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571025 = query.getOrDefault("api-version")
  valid_571025 = validateParameter(valid_571025, JString, required = true,
                                 default = nil)
  if valid_571025 != nil:
    section.add "api-version", valid_571025
  var valid_571026 = query.getOrDefault("details")
  valid_571026 = validateParameter(valid_571026, JBool, required = false, default = nil)
  if valid_571026 != nil:
    section.add "details", valid_571026
  var valid_571027 = query.getOrDefault("$filter")
  valid_571027 = validateParameter(valid_571027, JString, required = false,
                                 default = nil)
  if valid_571027 != nil:
    section.add "$filter", valid_571027
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571028: Call_WebAppsListMetricsSlot_571018; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_571028.validator(path, query, header, formData, body)
  let scheme = call_571028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571028.url(scheme.get, call_571028.host, call_571028.base,
                         call_571028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571028, url, valid)

proc call*(call_571029: Call_WebAppsListMetricsSlot_571018;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetricsSlot
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571030 = newJObject()
  var query_571031 = newJObject()
  add(path_571030, "resourceGroupName", newJString(resourceGroupName))
  add(query_571031, "api-version", newJString(apiVersion))
  add(path_571030, "name", newJString(name))
  add(query_571031, "details", newJBool(details))
  add(path_571030, "slot", newJString(slot))
  add(path_571030, "subscriptionId", newJString(subscriptionId))
  add(query_571031, "$filter", newJString(Filter))
  result = call_571029.call(path_571030, query_571031, nil, nil, nil)

var webAppsListMetricsSlot* = Call_WebAppsListMetricsSlot_571018(
    name: "webAppsListMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_WebAppsListMetricsSlot_571019, base: "",
    url: url_WebAppsListMetricsSlot_571020, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatusSlot_571032 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMigrateMySqlStatusSlot_571034(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatusSlot_571033(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571035 = path.getOrDefault("resourceGroupName")
  valid_571035 = validateParameter(valid_571035, JString, required = true,
                                 default = nil)
  if valid_571035 != nil:
    section.add "resourceGroupName", valid_571035
  var valid_571036 = path.getOrDefault("name")
  valid_571036 = validateParameter(valid_571036, JString, required = true,
                                 default = nil)
  if valid_571036 != nil:
    section.add "name", valid_571036
  var valid_571037 = path.getOrDefault("slot")
  valid_571037 = validateParameter(valid_571037, JString, required = true,
                                 default = nil)
  if valid_571037 != nil:
    section.add "slot", valid_571037
  var valid_571038 = path.getOrDefault("subscriptionId")
  valid_571038 = validateParameter(valid_571038, JString, required = true,
                                 default = nil)
  if valid_571038 != nil:
    section.add "subscriptionId", valid_571038
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571039 = query.getOrDefault("api-version")
  valid_571039 = validateParameter(valid_571039, JString, required = true,
                                 default = nil)
  if valid_571039 != nil:
    section.add "api-version", valid_571039
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571040: Call_WebAppsGetMigrateMySqlStatusSlot_571032;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_571040.validator(path, query, header, formData, body)
  let scheme = call_571040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571040.url(scheme.get, call_571040.host, call_571040.base,
                         call_571040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571040, url, valid)

proc call*(call_571041: Call_WebAppsGetMigrateMySqlStatusSlot_571032;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatusSlot
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571042 = newJObject()
  var query_571043 = newJObject()
  add(path_571042, "resourceGroupName", newJString(resourceGroupName))
  add(query_571043, "api-version", newJString(apiVersion))
  add(path_571042, "name", newJString(name))
  add(path_571042, "slot", newJString(slot))
  add(path_571042, "subscriptionId", newJString(subscriptionId))
  result = call_571041.call(path_571042, query_571043, nil, nil, nil)

var webAppsGetMigrateMySqlStatusSlot* = Call_WebAppsGetMigrateMySqlStatusSlot_571032(
    name: "webAppsGetMigrateMySqlStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatusSlot_571033, base: "",
    url: url_WebAppsGetMigrateMySqlStatusSlot_571034, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeaturesSlot_571044 = ref object of OpenApiRestCall_567666
proc url_WebAppsListNetworkFeaturesSlot_571046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeaturesSlot_571045(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571047 = path.getOrDefault("resourceGroupName")
  valid_571047 = validateParameter(valid_571047, JString, required = true,
                                 default = nil)
  if valid_571047 != nil:
    section.add "resourceGroupName", valid_571047
  var valid_571048 = path.getOrDefault("name")
  valid_571048 = validateParameter(valid_571048, JString, required = true,
                                 default = nil)
  if valid_571048 != nil:
    section.add "name", valid_571048
  var valid_571049 = path.getOrDefault("slot")
  valid_571049 = validateParameter(valid_571049, JString, required = true,
                                 default = nil)
  if valid_571049 != nil:
    section.add "slot", valid_571049
  var valid_571050 = path.getOrDefault("subscriptionId")
  valid_571050 = validateParameter(valid_571050, JString, required = true,
                                 default = nil)
  if valid_571050 != nil:
    section.add "subscriptionId", valid_571050
  var valid_571051 = path.getOrDefault("view")
  valid_571051 = validateParameter(valid_571051, JString, required = true,
                                 default = nil)
  if valid_571051 != nil:
    section.add "view", valid_571051
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571052 = query.getOrDefault("api-version")
  valid_571052 = validateParameter(valid_571052, JString, required = true,
                                 default = nil)
  if valid_571052 != nil:
    section.add "api-version", valid_571052
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571053: Call_WebAppsListNetworkFeaturesSlot_571044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_571053.validator(path, query, header, formData, body)
  let scheme = call_571053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571053.url(scheme.get, call_571053.host, call_571053.base,
                         call_571053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571053, url, valid)

proc call*(call_571054: Call_WebAppsListNetworkFeaturesSlot_571044;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeaturesSlot
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_571055 = newJObject()
  var query_571056 = newJObject()
  add(path_571055, "resourceGroupName", newJString(resourceGroupName))
  add(query_571056, "api-version", newJString(apiVersion))
  add(path_571055, "name", newJString(name))
  add(path_571055, "slot", newJString(slot))
  add(path_571055, "subscriptionId", newJString(subscriptionId))
  add(path_571055, "view", newJString(view))
  result = call_571054.call(path_571055, query_571056, nil, nil, nil)

var webAppsListNetworkFeaturesSlot* = Call_WebAppsListNetworkFeaturesSlot_571044(
    name: "webAppsListNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeaturesSlot_571045, base: "",
    url: url_WebAppsListNetworkFeaturesSlot_571046, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceSlot_571057 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartWebSiteNetworkTraceSlot_571059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceSlot_571058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571060 = path.getOrDefault("resourceGroupName")
  valid_571060 = validateParameter(valid_571060, JString, required = true,
                                 default = nil)
  if valid_571060 != nil:
    section.add "resourceGroupName", valid_571060
  var valid_571061 = path.getOrDefault("name")
  valid_571061 = validateParameter(valid_571061, JString, required = true,
                                 default = nil)
  if valid_571061 != nil:
    section.add "name", valid_571061
  var valid_571062 = path.getOrDefault("slot")
  valid_571062 = validateParameter(valid_571062, JString, required = true,
                                 default = nil)
  if valid_571062 != nil:
    section.add "slot", valid_571062
  var valid_571063 = path.getOrDefault("subscriptionId")
  valid_571063 = validateParameter(valid_571063, JString, required = true,
                                 default = nil)
  if valid_571063 != nil:
    section.add "subscriptionId", valid_571063
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571064 = query.getOrDefault("api-version")
  valid_571064 = validateParameter(valid_571064, JString, required = true,
                                 default = nil)
  if valid_571064 != nil:
    section.add "api-version", valid_571064
  var valid_571065 = query.getOrDefault("durationInSeconds")
  valid_571065 = validateParameter(valid_571065, JInt, required = false, default = nil)
  if valid_571065 != nil:
    section.add "durationInSeconds", valid_571065
  var valid_571066 = query.getOrDefault("maxFrameLength")
  valid_571066 = validateParameter(valid_571066, JInt, required = false, default = nil)
  if valid_571066 != nil:
    section.add "maxFrameLength", valid_571066
  var valid_571067 = query.getOrDefault("sasUrl")
  valid_571067 = validateParameter(valid_571067, JString, required = false,
                                 default = nil)
  if valid_571067 != nil:
    section.add "sasUrl", valid_571067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571068: Call_WebAppsStartWebSiteNetworkTraceSlot_571057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_571068.validator(path, query, header, formData, body)
  let scheme = call_571068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571068.url(scheme.get, call_571068.host, call_571068.base,
                         call_571068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571068, url, valid)

proc call*(call_571069: Call_WebAppsStartWebSiteNetworkTraceSlot_571057;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceSlot
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_571070 = newJObject()
  var query_571071 = newJObject()
  add(path_571070, "resourceGroupName", newJString(resourceGroupName))
  add(query_571071, "api-version", newJString(apiVersion))
  add(path_571070, "name", newJString(name))
  add(path_571070, "slot", newJString(slot))
  add(path_571070, "subscriptionId", newJString(subscriptionId))
  add(query_571071, "durationInSeconds", newJInt(durationInSeconds))
  add(query_571071, "maxFrameLength", newJInt(maxFrameLength))
  add(query_571071, "sasUrl", newJString(sasUrl))
  result = call_571069.call(path_571070, query_571071, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceSlot* = Call_WebAppsStartWebSiteNetworkTraceSlot_571057(
    name: "webAppsStartWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTraceSlot_571058, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceSlot_571059, schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTraceSlot_571072 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopWebSiteNetworkTraceSlot_571074(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTraceSlot_571073(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571075 = path.getOrDefault("resourceGroupName")
  valid_571075 = validateParameter(valid_571075, JString, required = true,
                                 default = nil)
  if valid_571075 != nil:
    section.add "resourceGroupName", valid_571075
  var valid_571076 = path.getOrDefault("name")
  valid_571076 = validateParameter(valid_571076, JString, required = true,
                                 default = nil)
  if valid_571076 != nil:
    section.add "name", valid_571076
  var valid_571077 = path.getOrDefault("slot")
  valid_571077 = validateParameter(valid_571077, JString, required = true,
                                 default = nil)
  if valid_571077 != nil:
    section.add "slot", valid_571077
  var valid_571078 = path.getOrDefault("subscriptionId")
  valid_571078 = validateParameter(valid_571078, JString, required = true,
                                 default = nil)
  if valid_571078 != nil:
    section.add "subscriptionId", valid_571078
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571079 = query.getOrDefault("api-version")
  valid_571079 = validateParameter(valid_571079, JString, required = true,
                                 default = nil)
  if valid_571079 != nil:
    section.add "api-version", valid_571079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571080: Call_WebAppsStopWebSiteNetworkTraceSlot_571072;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_571080.validator(path, query, header, formData, body)
  let scheme = call_571080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571080.url(scheme.get, call_571080.host, call_571080.base,
                         call_571080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571080, url, valid)

proc call*(call_571081: Call_WebAppsStopWebSiteNetworkTraceSlot_571072;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571082 = newJObject()
  var query_571083 = newJObject()
  add(path_571082, "resourceGroupName", newJString(resourceGroupName))
  add(query_571083, "api-version", newJString(apiVersion))
  add(path_571082, "name", newJString(name))
  add(path_571082, "slot", newJString(slot))
  add(path_571082, "subscriptionId", newJString(subscriptionId))
  result = call_571081.call(path_571082, query_571083, nil, nil, nil)

var webAppsStopWebSiteNetworkTraceSlot* = Call_WebAppsStopWebSiteNetworkTraceSlot_571072(
    name: "webAppsStopWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTraceSlot_571073, base: "",
    url: url_WebAppsStopWebSiteNetworkTraceSlot_571074, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPasswordSlot_571084 = ref object of OpenApiRestCall_567666
proc url_WebAppsGenerateNewSitePublishingPasswordSlot_571086(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPasswordSlot_571085(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571087 = path.getOrDefault("resourceGroupName")
  valid_571087 = validateParameter(valid_571087, JString, required = true,
                                 default = nil)
  if valid_571087 != nil:
    section.add "resourceGroupName", valid_571087
  var valid_571088 = path.getOrDefault("name")
  valid_571088 = validateParameter(valid_571088, JString, required = true,
                                 default = nil)
  if valid_571088 != nil:
    section.add "name", valid_571088
  var valid_571089 = path.getOrDefault("slot")
  valid_571089 = validateParameter(valid_571089, JString, required = true,
                                 default = nil)
  if valid_571089 != nil:
    section.add "slot", valid_571089
  var valid_571090 = path.getOrDefault("subscriptionId")
  valid_571090 = validateParameter(valid_571090, JString, required = true,
                                 default = nil)
  if valid_571090 != nil:
    section.add "subscriptionId", valid_571090
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571091 = query.getOrDefault("api-version")
  valid_571091 = validateParameter(valid_571091, JString, required = true,
                                 default = nil)
  if valid_571091 != nil:
    section.add "api-version", valid_571091
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571092: Call_WebAppsGenerateNewSitePublishingPasswordSlot_571084;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_571092.validator(path, query, header, formData, body)
  let scheme = call_571092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571092.url(scheme.get, call_571092.host, call_571092.base,
                         call_571092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571092, url, valid)

proc call*(call_571093: Call_WebAppsGenerateNewSitePublishingPasswordSlot_571084;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPasswordSlot
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571094 = newJObject()
  var query_571095 = newJObject()
  add(path_571094, "resourceGroupName", newJString(resourceGroupName))
  add(query_571095, "api-version", newJString(apiVersion))
  add(path_571094, "name", newJString(name))
  add(path_571094, "slot", newJString(slot))
  add(path_571094, "subscriptionId", newJString(subscriptionId))
  result = call_571093.call(path_571094, query_571095, nil, nil, nil)

var webAppsGenerateNewSitePublishingPasswordSlot* = Call_WebAppsGenerateNewSitePublishingPasswordSlot_571084(
    name: "webAppsGenerateNewSitePublishingPasswordSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPasswordSlot_571085,
    base: "", url: url_WebAppsGenerateNewSitePublishingPasswordSlot_571086,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCountersSlot_571096 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPerfMonCountersSlot_571098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCountersSlot_571097(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571099 = path.getOrDefault("resourceGroupName")
  valid_571099 = validateParameter(valid_571099, JString, required = true,
                                 default = nil)
  if valid_571099 != nil:
    section.add "resourceGroupName", valid_571099
  var valid_571100 = path.getOrDefault("name")
  valid_571100 = validateParameter(valid_571100, JString, required = true,
                                 default = nil)
  if valid_571100 != nil:
    section.add "name", valid_571100
  var valid_571101 = path.getOrDefault("slot")
  valid_571101 = validateParameter(valid_571101, JString, required = true,
                                 default = nil)
  if valid_571101 != nil:
    section.add "slot", valid_571101
  var valid_571102 = path.getOrDefault("subscriptionId")
  valid_571102 = validateParameter(valid_571102, JString, required = true,
                                 default = nil)
  if valid_571102 != nil:
    section.add "subscriptionId", valid_571102
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571103 = query.getOrDefault("api-version")
  valid_571103 = validateParameter(valid_571103, JString, required = true,
                                 default = nil)
  if valid_571103 != nil:
    section.add "api-version", valid_571103
  var valid_571104 = query.getOrDefault("$filter")
  valid_571104 = validateParameter(valid_571104, JString, required = false,
                                 default = nil)
  if valid_571104 != nil:
    section.add "$filter", valid_571104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571105: Call_WebAppsListPerfMonCountersSlot_571096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_571105.validator(path, query, header, formData, body)
  let scheme = call_571105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571105.url(scheme.get, call_571105.host, call_571105.base,
                         call_571105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571105, url, valid)

proc call*(call_571106: Call_WebAppsListPerfMonCountersSlot_571096;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCountersSlot
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571107 = newJObject()
  var query_571108 = newJObject()
  add(path_571107, "resourceGroupName", newJString(resourceGroupName))
  add(query_571108, "api-version", newJString(apiVersion))
  add(path_571107, "name", newJString(name))
  add(path_571107, "slot", newJString(slot))
  add(path_571107, "subscriptionId", newJString(subscriptionId))
  add(query_571108, "$filter", newJString(Filter))
  result = call_571106.call(path_571107, query_571108, nil, nil, nil)

var webAppsListPerfMonCountersSlot* = Call_WebAppsListPerfMonCountersSlot_571096(
    name: "webAppsListPerfMonCountersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    validator: validate_WebAppsListPerfMonCountersSlot_571097, base: "",
    url: url_WebAppsListPerfMonCountersSlot_571098, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlagSlot_571109 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSitePhpErrorLogFlagSlot_571111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlagSlot_571110(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571112 = path.getOrDefault("resourceGroupName")
  valid_571112 = validateParameter(valid_571112, JString, required = true,
                                 default = nil)
  if valid_571112 != nil:
    section.add "resourceGroupName", valid_571112
  var valid_571113 = path.getOrDefault("name")
  valid_571113 = validateParameter(valid_571113, JString, required = true,
                                 default = nil)
  if valid_571113 != nil:
    section.add "name", valid_571113
  var valid_571114 = path.getOrDefault("slot")
  valid_571114 = validateParameter(valid_571114, JString, required = true,
                                 default = nil)
  if valid_571114 != nil:
    section.add "slot", valid_571114
  var valid_571115 = path.getOrDefault("subscriptionId")
  valid_571115 = validateParameter(valid_571115, JString, required = true,
                                 default = nil)
  if valid_571115 != nil:
    section.add "subscriptionId", valid_571115
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571116 = query.getOrDefault("api-version")
  valid_571116 = validateParameter(valid_571116, JString, required = true,
                                 default = nil)
  if valid_571116 != nil:
    section.add "api-version", valid_571116
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571117: Call_WebAppsGetSitePhpErrorLogFlagSlot_571109;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_571117.validator(path, query, header, formData, body)
  let scheme = call_571117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571117.url(scheme.get, call_571117.host, call_571117.base,
                         call_571117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571117, url, valid)

proc call*(call_571118: Call_WebAppsGetSitePhpErrorLogFlagSlot_571109;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlagSlot
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571119 = newJObject()
  var query_571120 = newJObject()
  add(path_571119, "resourceGroupName", newJString(resourceGroupName))
  add(query_571120, "api-version", newJString(apiVersion))
  add(path_571119, "name", newJString(name))
  add(path_571119, "slot", newJString(slot))
  add(path_571119, "subscriptionId", newJString(subscriptionId))
  result = call_571118.call(path_571119, query_571120, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlagSlot* = Call_WebAppsGetSitePhpErrorLogFlagSlot_571109(
    name: "webAppsGetSitePhpErrorLogFlagSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlagSlot_571110, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlagSlot_571111, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOnsSlot_571121 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPremierAddOnsSlot_571123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOnsSlot_571122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571124 = path.getOrDefault("resourceGroupName")
  valid_571124 = validateParameter(valid_571124, JString, required = true,
                                 default = nil)
  if valid_571124 != nil:
    section.add "resourceGroupName", valid_571124
  var valid_571125 = path.getOrDefault("name")
  valid_571125 = validateParameter(valid_571125, JString, required = true,
                                 default = nil)
  if valid_571125 != nil:
    section.add "name", valid_571125
  var valid_571126 = path.getOrDefault("slot")
  valid_571126 = validateParameter(valid_571126, JString, required = true,
                                 default = nil)
  if valid_571126 != nil:
    section.add "slot", valid_571126
  var valid_571127 = path.getOrDefault("subscriptionId")
  valid_571127 = validateParameter(valid_571127, JString, required = true,
                                 default = nil)
  if valid_571127 != nil:
    section.add "subscriptionId", valid_571127
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571128 = query.getOrDefault("api-version")
  valid_571128 = validateParameter(valid_571128, JString, required = true,
                                 default = nil)
  if valid_571128 != nil:
    section.add "api-version", valid_571128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571129: Call_WebAppsListPremierAddOnsSlot_571121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_571129.validator(path, query, header, formData, body)
  let scheme = call_571129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571129.url(scheme.get, call_571129.host, call_571129.base,
                         call_571129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571129, url, valid)

proc call*(call_571130: Call_WebAppsListPremierAddOnsSlot_571121;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOnsSlot
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571131 = newJObject()
  var query_571132 = newJObject()
  add(path_571131, "resourceGroupName", newJString(resourceGroupName))
  add(query_571132, "api-version", newJString(apiVersion))
  add(path_571131, "name", newJString(name))
  add(path_571131, "slot", newJString(slot))
  add(path_571131, "subscriptionId", newJString(subscriptionId))
  result = call_571130.call(path_571131, query_571132, nil, nil, nil)

var webAppsListPremierAddOnsSlot* = Call_WebAppsListPremierAddOnsSlot_571121(
    name: "webAppsListPremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_WebAppsListPremierAddOnsSlot_571122, base: "",
    url: url_WebAppsListPremierAddOnsSlot_571123, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOnSlot_571146 = ref object of OpenApiRestCall_567666
proc url_WebAppsAddPremierAddOnSlot_571148(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOnSlot_571147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571149 = path.getOrDefault("resourceGroupName")
  valid_571149 = validateParameter(valid_571149, JString, required = true,
                                 default = nil)
  if valid_571149 != nil:
    section.add "resourceGroupName", valid_571149
  var valid_571150 = path.getOrDefault("name")
  valid_571150 = validateParameter(valid_571150, JString, required = true,
                                 default = nil)
  if valid_571150 != nil:
    section.add "name", valid_571150
  var valid_571151 = path.getOrDefault("slot")
  valid_571151 = validateParameter(valid_571151, JString, required = true,
                                 default = nil)
  if valid_571151 != nil:
    section.add "slot", valid_571151
  var valid_571152 = path.getOrDefault("subscriptionId")
  valid_571152 = validateParameter(valid_571152, JString, required = true,
                                 default = nil)
  if valid_571152 != nil:
    section.add "subscriptionId", valid_571152
  var valid_571153 = path.getOrDefault("premierAddOnName")
  valid_571153 = validateParameter(valid_571153, JString, required = true,
                                 default = nil)
  if valid_571153 != nil:
    section.add "premierAddOnName", valid_571153
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571154 = query.getOrDefault("api-version")
  valid_571154 = validateParameter(valid_571154, JString, required = true,
                                 default = nil)
  if valid_571154 != nil:
    section.add "api-version", valid_571154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571156: Call_WebAppsAddPremierAddOnSlot_571146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_571156.validator(path, query, header, formData, body)
  let scheme = call_571156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571156.url(scheme.get, call_571156.host, call_571156.base,
                         call_571156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571156, url, valid)

proc call*(call_571157: Call_WebAppsAddPremierAddOnSlot_571146;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571158 = newJObject()
  var query_571159 = newJObject()
  var body_571160 = newJObject()
  add(path_571158, "resourceGroupName", newJString(resourceGroupName))
  add(query_571159, "api-version", newJString(apiVersion))
  add(path_571158, "name", newJString(name))
  if premierAddOn != nil:
    body_571160 = premierAddOn
  add(path_571158, "slot", newJString(slot))
  add(path_571158, "subscriptionId", newJString(subscriptionId))
  add(path_571158, "premierAddOnName", newJString(premierAddOnName))
  result = call_571157.call(path_571158, query_571159, nil, nil, body_571160)

var webAppsAddPremierAddOnSlot* = Call_WebAppsAddPremierAddOnSlot_571146(
    name: "webAppsAddPremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOnSlot_571147, base: "",
    url: url_WebAppsAddPremierAddOnSlot_571148, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOnSlot_571133 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPremierAddOnSlot_571135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOnSlot_571134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571136 = path.getOrDefault("resourceGroupName")
  valid_571136 = validateParameter(valid_571136, JString, required = true,
                                 default = nil)
  if valid_571136 != nil:
    section.add "resourceGroupName", valid_571136
  var valid_571137 = path.getOrDefault("name")
  valid_571137 = validateParameter(valid_571137, JString, required = true,
                                 default = nil)
  if valid_571137 != nil:
    section.add "name", valid_571137
  var valid_571138 = path.getOrDefault("slot")
  valid_571138 = validateParameter(valid_571138, JString, required = true,
                                 default = nil)
  if valid_571138 != nil:
    section.add "slot", valid_571138
  var valid_571139 = path.getOrDefault("subscriptionId")
  valid_571139 = validateParameter(valid_571139, JString, required = true,
                                 default = nil)
  if valid_571139 != nil:
    section.add "subscriptionId", valid_571139
  var valid_571140 = path.getOrDefault("premierAddOnName")
  valid_571140 = validateParameter(valid_571140, JString, required = true,
                                 default = nil)
  if valid_571140 != nil:
    section.add "premierAddOnName", valid_571140
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571141 = query.getOrDefault("api-version")
  valid_571141 = validateParameter(valid_571141, JString, required = true,
                                 default = nil)
  if valid_571141 != nil:
    section.add "api-version", valid_571141
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571142: Call_WebAppsGetPremierAddOnSlot_571133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_571142.validator(path, query, header, formData, body)
  let scheme = call_571142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571142.url(scheme.get, call_571142.host, call_571142.base,
                         call_571142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571142, url, valid)

proc call*(call_571143: Call_WebAppsGetPremierAddOnSlot_571133;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOnSlot
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571144 = newJObject()
  var query_571145 = newJObject()
  add(path_571144, "resourceGroupName", newJString(resourceGroupName))
  add(query_571145, "api-version", newJString(apiVersion))
  add(path_571144, "name", newJString(name))
  add(path_571144, "slot", newJString(slot))
  add(path_571144, "subscriptionId", newJString(subscriptionId))
  add(path_571144, "premierAddOnName", newJString(premierAddOnName))
  result = call_571143.call(path_571144, query_571145, nil, nil, nil)

var webAppsGetPremierAddOnSlot* = Call_WebAppsGetPremierAddOnSlot_571133(
    name: "webAppsGetPremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOnSlot_571134, base: "",
    url: url_WebAppsGetPremierAddOnSlot_571135, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOnSlot_571161 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePremierAddOnSlot_571163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOnSlot_571162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571164 = path.getOrDefault("resourceGroupName")
  valid_571164 = validateParameter(valid_571164, JString, required = true,
                                 default = nil)
  if valid_571164 != nil:
    section.add "resourceGroupName", valid_571164
  var valid_571165 = path.getOrDefault("name")
  valid_571165 = validateParameter(valid_571165, JString, required = true,
                                 default = nil)
  if valid_571165 != nil:
    section.add "name", valid_571165
  var valid_571166 = path.getOrDefault("slot")
  valid_571166 = validateParameter(valid_571166, JString, required = true,
                                 default = nil)
  if valid_571166 != nil:
    section.add "slot", valid_571166
  var valid_571167 = path.getOrDefault("subscriptionId")
  valid_571167 = validateParameter(valid_571167, JString, required = true,
                                 default = nil)
  if valid_571167 != nil:
    section.add "subscriptionId", valid_571167
  var valid_571168 = path.getOrDefault("premierAddOnName")
  valid_571168 = validateParameter(valid_571168, JString, required = true,
                                 default = nil)
  if valid_571168 != nil:
    section.add "premierAddOnName", valid_571168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571169 = query.getOrDefault("api-version")
  valid_571169 = validateParameter(valid_571169, JString, required = true,
                                 default = nil)
  if valid_571169 != nil:
    section.add "api-version", valid_571169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571170: Call_WebAppsDeletePremierAddOnSlot_571161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_571170.validator(path, query, header, formData, body)
  let scheme = call_571170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571170.url(scheme.get, call_571170.host, call_571170.base,
                         call_571170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571170, url, valid)

proc call*(call_571171: Call_WebAppsDeletePremierAddOnSlot_571161;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOnSlot
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571172 = newJObject()
  var query_571173 = newJObject()
  add(path_571172, "resourceGroupName", newJString(resourceGroupName))
  add(query_571173, "api-version", newJString(apiVersion))
  add(path_571172, "name", newJString(name))
  add(path_571172, "slot", newJString(slot))
  add(path_571172, "subscriptionId", newJString(subscriptionId))
  add(path_571172, "premierAddOnName", newJString(premierAddOnName))
  result = call_571171.call(path_571172, query_571173, nil, nil, nil)

var webAppsDeletePremierAddOnSlot* = Call_WebAppsDeletePremierAddOnSlot_571161(
    name: "webAppsDeletePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOnSlot_571162, base: "",
    url: url_WebAppsDeletePremierAddOnSlot_571163, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessesSlot_571174 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessesSlot_571176(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessesSlot_571175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571177 = path.getOrDefault("resourceGroupName")
  valid_571177 = validateParameter(valid_571177, JString, required = true,
                                 default = nil)
  if valid_571177 != nil:
    section.add "resourceGroupName", valid_571177
  var valid_571178 = path.getOrDefault("name")
  valid_571178 = validateParameter(valid_571178, JString, required = true,
                                 default = nil)
  if valid_571178 != nil:
    section.add "name", valid_571178
  var valid_571179 = path.getOrDefault("slot")
  valid_571179 = validateParameter(valid_571179, JString, required = true,
                                 default = nil)
  if valid_571179 != nil:
    section.add "slot", valid_571179
  var valid_571180 = path.getOrDefault("subscriptionId")
  valid_571180 = validateParameter(valid_571180, JString, required = true,
                                 default = nil)
  if valid_571180 != nil:
    section.add "subscriptionId", valid_571180
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571181 = query.getOrDefault("api-version")
  valid_571181 = validateParameter(valid_571181, JString, required = true,
                                 default = nil)
  if valid_571181 != nil:
    section.add "api-version", valid_571181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571182: Call_WebAppsListProcessesSlot_571174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571182.validator(path, query, header, formData, body)
  let scheme = call_571182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571182.url(scheme.get, call_571182.host, call_571182.base,
                         call_571182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571182, url, valid)

proc call*(call_571183: Call_WebAppsListProcessesSlot_571174;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571184 = newJObject()
  var query_571185 = newJObject()
  add(path_571184, "resourceGroupName", newJString(resourceGroupName))
  add(query_571185, "api-version", newJString(apiVersion))
  add(path_571184, "name", newJString(name))
  add(path_571184, "slot", newJString(slot))
  add(path_571184, "subscriptionId", newJString(subscriptionId))
  result = call_571183.call(path_571184, query_571185, nil, nil, nil)

var webAppsListProcessesSlot* = Call_WebAppsListProcessesSlot_571174(
    name: "webAppsListProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    validator: validate_WebAppsListProcessesSlot_571175, base: "",
    url: url_WebAppsListProcessesSlot_571176, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessSlot_571186 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessSlot_571188(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessSlot_571187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571189 = path.getOrDefault("resourceGroupName")
  valid_571189 = validateParameter(valid_571189, JString, required = true,
                                 default = nil)
  if valid_571189 != nil:
    section.add "resourceGroupName", valid_571189
  var valid_571190 = path.getOrDefault("name")
  valid_571190 = validateParameter(valid_571190, JString, required = true,
                                 default = nil)
  if valid_571190 != nil:
    section.add "name", valid_571190
  var valid_571191 = path.getOrDefault("processId")
  valid_571191 = validateParameter(valid_571191, JString, required = true,
                                 default = nil)
  if valid_571191 != nil:
    section.add "processId", valid_571191
  var valid_571192 = path.getOrDefault("slot")
  valid_571192 = validateParameter(valid_571192, JString, required = true,
                                 default = nil)
  if valid_571192 != nil:
    section.add "slot", valid_571192
  var valid_571193 = path.getOrDefault("subscriptionId")
  valid_571193 = validateParameter(valid_571193, JString, required = true,
                                 default = nil)
  if valid_571193 != nil:
    section.add "subscriptionId", valid_571193
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571194 = query.getOrDefault("api-version")
  valid_571194 = validateParameter(valid_571194, JString, required = true,
                                 default = nil)
  if valid_571194 != nil:
    section.add "api-version", valid_571194
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571195: Call_WebAppsGetProcessSlot_571186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571195.validator(path, query, header, formData, body)
  let scheme = call_571195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571195.url(scheme.get, call_571195.host, call_571195.base,
                         call_571195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571195, url, valid)

proc call*(call_571196: Call_WebAppsGetProcessSlot_571186;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571197 = newJObject()
  var query_571198 = newJObject()
  add(path_571197, "resourceGroupName", newJString(resourceGroupName))
  add(query_571198, "api-version", newJString(apiVersion))
  add(path_571197, "name", newJString(name))
  add(path_571197, "processId", newJString(processId))
  add(path_571197, "slot", newJString(slot))
  add(path_571197, "subscriptionId", newJString(subscriptionId))
  result = call_571196.call(path_571197, query_571198, nil, nil, nil)

var webAppsGetProcessSlot* = Call_WebAppsGetProcessSlot_571186(
    name: "webAppsGetProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsGetProcessSlot_571187, base: "",
    url: url_WebAppsGetProcessSlot_571188, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcessSlot_571199 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteProcessSlot_571201(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcessSlot_571200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571202 = path.getOrDefault("resourceGroupName")
  valid_571202 = validateParameter(valid_571202, JString, required = true,
                                 default = nil)
  if valid_571202 != nil:
    section.add "resourceGroupName", valid_571202
  var valid_571203 = path.getOrDefault("name")
  valid_571203 = validateParameter(valid_571203, JString, required = true,
                                 default = nil)
  if valid_571203 != nil:
    section.add "name", valid_571203
  var valid_571204 = path.getOrDefault("processId")
  valid_571204 = validateParameter(valid_571204, JString, required = true,
                                 default = nil)
  if valid_571204 != nil:
    section.add "processId", valid_571204
  var valid_571205 = path.getOrDefault("slot")
  valid_571205 = validateParameter(valid_571205, JString, required = true,
                                 default = nil)
  if valid_571205 != nil:
    section.add "slot", valid_571205
  var valid_571206 = path.getOrDefault("subscriptionId")
  valid_571206 = validateParameter(valid_571206, JString, required = true,
                                 default = nil)
  if valid_571206 != nil:
    section.add "subscriptionId", valid_571206
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571207 = query.getOrDefault("api-version")
  valid_571207 = validateParameter(valid_571207, JString, required = true,
                                 default = nil)
  if valid_571207 != nil:
    section.add "api-version", valid_571207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571208: Call_WebAppsDeleteProcessSlot_571199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_571208.validator(path, query, header, formData, body)
  let scheme = call_571208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571208.url(scheme.get, call_571208.host, call_571208.base,
                         call_571208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571208, url, valid)

proc call*(call_571209: Call_WebAppsDeleteProcessSlot_571199;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571210 = newJObject()
  var query_571211 = newJObject()
  add(path_571210, "resourceGroupName", newJString(resourceGroupName))
  add(query_571211, "api-version", newJString(apiVersion))
  add(path_571210, "name", newJString(name))
  add(path_571210, "processId", newJString(processId))
  add(path_571210, "slot", newJString(slot))
  add(path_571210, "subscriptionId", newJString(subscriptionId))
  result = call_571209.call(path_571210, query_571211, nil, nil, nil)

var webAppsDeleteProcessSlot* = Call_WebAppsDeleteProcessSlot_571199(
    name: "webAppsDeleteProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsDeleteProcessSlot_571200, base: "",
    url: url_WebAppsDeleteProcessSlot_571201, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDumpSlot_571212 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessDumpSlot_571214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDumpSlot_571213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571215 = path.getOrDefault("resourceGroupName")
  valid_571215 = validateParameter(valid_571215, JString, required = true,
                                 default = nil)
  if valid_571215 != nil:
    section.add "resourceGroupName", valid_571215
  var valid_571216 = path.getOrDefault("name")
  valid_571216 = validateParameter(valid_571216, JString, required = true,
                                 default = nil)
  if valid_571216 != nil:
    section.add "name", valid_571216
  var valid_571217 = path.getOrDefault("processId")
  valid_571217 = validateParameter(valid_571217, JString, required = true,
                                 default = nil)
  if valid_571217 != nil:
    section.add "processId", valid_571217
  var valid_571218 = path.getOrDefault("slot")
  valid_571218 = validateParameter(valid_571218, JString, required = true,
                                 default = nil)
  if valid_571218 != nil:
    section.add "slot", valid_571218
  var valid_571219 = path.getOrDefault("subscriptionId")
  valid_571219 = validateParameter(valid_571219, JString, required = true,
                                 default = nil)
  if valid_571219 != nil:
    section.add "subscriptionId", valid_571219
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571220 = query.getOrDefault("api-version")
  valid_571220 = validateParameter(valid_571220, JString, required = true,
                                 default = nil)
  if valid_571220 != nil:
    section.add "api-version", valid_571220
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571221: Call_WebAppsGetProcessDumpSlot_571212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571221.validator(path, query, header, formData, body)
  let scheme = call_571221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571221.url(scheme.get, call_571221.host, call_571221.base,
                         call_571221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571221, url, valid)

proc call*(call_571222: Call_WebAppsGetProcessDumpSlot_571212;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571223 = newJObject()
  var query_571224 = newJObject()
  add(path_571223, "resourceGroupName", newJString(resourceGroupName))
  add(query_571224, "api-version", newJString(apiVersion))
  add(path_571223, "name", newJString(name))
  add(path_571223, "processId", newJString(processId))
  add(path_571223, "slot", newJString(slot))
  add(path_571223, "subscriptionId", newJString(subscriptionId))
  result = call_571222.call(path_571223, query_571224, nil, nil, nil)

var webAppsGetProcessDumpSlot* = Call_WebAppsGetProcessDumpSlot_571212(
    name: "webAppsGetProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDumpSlot_571213, base: "",
    url: url_WebAppsGetProcessDumpSlot_571214, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModulesSlot_571225 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessModulesSlot_571227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModulesSlot_571226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571228 = path.getOrDefault("resourceGroupName")
  valid_571228 = validateParameter(valid_571228, JString, required = true,
                                 default = nil)
  if valid_571228 != nil:
    section.add "resourceGroupName", valid_571228
  var valid_571229 = path.getOrDefault("name")
  valid_571229 = validateParameter(valid_571229, JString, required = true,
                                 default = nil)
  if valid_571229 != nil:
    section.add "name", valid_571229
  var valid_571230 = path.getOrDefault("processId")
  valid_571230 = validateParameter(valid_571230, JString, required = true,
                                 default = nil)
  if valid_571230 != nil:
    section.add "processId", valid_571230
  var valid_571231 = path.getOrDefault("slot")
  valid_571231 = validateParameter(valid_571231, JString, required = true,
                                 default = nil)
  if valid_571231 != nil:
    section.add "slot", valid_571231
  var valid_571232 = path.getOrDefault("subscriptionId")
  valid_571232 = validateParameter(valid_571232, JString, required = true,
                                 default = nil)
  if valid_571232 != nil:
    section.add "subscriptionId", valid_571232
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571233 = query.getOrDefault("api-version")
  valid_571233 = validateParameter(valid_571233, JString, required = true,
                                 default = nil)
  if valid_571233 != nil:
    section.add "api-version", valid_571233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571234: Call_WebAppsListProcessModulesSlot_571225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571234.validator(path, query, header, formData, body)
  let scheme = call_571234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571234.url(scheme.get, call_571234.host, call_571234.base,
                         call_571234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571234, url, valid)

proc call*(call_571235: Call_WebAppsListProcessModulesSlot_571225;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571236 = newJObject()
  var query_571237 = newJObject()
  add(path_571236, "resourceGroupName", newJString(resourceGroupName))
  add(query_571237, "api-version", newJString(apiVersion))
  add(path_571236, "name", newJString(name))
  add(path_571236, "processId", newJString(processId))
  add(path_571236, "slot", newJString(slot))
  add(path_571236, "subscriptionId", newJString(subscriptionId))
  result = call_571235.call(path_571236, query_571237, nil, nil, nil)

var webAppsListProcessModulesSlot* = Call_WebAppsListProcessModulesSlot_571225(
    name: "webAppsListProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModulesSlot_571226, base: "",
    url: url_WebAppsListProcessModulesSlot_571227, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModuleSlot_571238 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessModuleSlot_571240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModuleSlot_571239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571241 = path.getOrDefault("resourceGroupName")
  valid_571241 = validateParameter(valid_571241, JString, required = true,
                                 default = nil)
  if valid_571241 != nil:
    section.add "resourceGroupName", valid_571241
  var valid_571242 = path.getOrDefault("name")
  valid_571242 = validateParameter(valid_571242, JString, required = true,
                                 default = nil)
  if valid_571242 != nil:
    section.add "name", valid_571242
  var valid_571243 = path.getOrDefault("processId")
  valid_571243 = validateParameter(valid_571243, JString, required = true,
                                 default = nil)
  if valid_571243 != nil:
    section.add "processId", valid_571243
  var valid_571244 = path.getOrDefault("slot")
  valid_571244 = validateParameter(valid_571244, JString, required = true,
                                 default = nil)
  if valid_571244 != nil:
    section.add "slot", valid_571244
  var valid_571245 = path.getOrDefault("subscriptionId")
  valid_571245 = validateParameter(valid_571245, JString, required = true,
                                 default = nil)
  if valid_571245 != nil:
    section.add "subscriptionId", valid_571245
  var valid_571246 = path.getOrDefault("baseAddress")
  valid_571246 = validateParameter(valid_571246, JString, required = true,
                                 default = nil)
  if valid_571246 != nil:
    section.add "baseAddress", valid_571246
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571247 = query.getOrDefault("api-version")
  valid_571247 = validateParameter(valid_571247, JString, required = true,
                                 default = nil)
  if valid_571247 != nil:
    section.add "api-version", valid_571247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571248: Call_WebAppsGetProcessModuleSlot_571238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571248.validator(path, query, header, formData, body)
  let scheme = call_571248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571248.url(scheme.get, call_571248.host, call_571248.base,
                         call_571248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571248, url, valid)

proc call*(call_571249: Call_WebAppsGetProcessModuleSlot_571238;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_571250 = newJObject()
  var query_571251 = newJObject()
  add(path_571250, "resourceGroupName", newJString(resourceGroupName))
  add(query_571251, "api-version", newJString(apiVersion))
  add(path_571250, "name", newJString(name))
  add(path_571250, "processId", newJString(processId))
  add(path_571250, "slot", newJString(slot))
  add(path_571250, "subscriptionId", newJString(subscriptionId))
  add(path_571250, "baseAddress", newJString(baseAddress))
  result = call_571249.call(path_571250, query_571251, nil, nil, nil)

var webAppsGetProcessModuleSlot* = Call_WebAppsGetProcessModuleSlot_571238(
    name: "webAppsGetProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModuleSlot_571239, base: "",
    url: url_WebAppsGetProcessModuleSlot_571240, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreadsSlot_571252 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessThreadsSlot_571254(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreadsSlot_571253(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571255 = path.getOrDefault("resourceGroupName")
  valid_571255 = validateParameter(valid_571255, JString, required = true,
                                 default = nil)
  if valid_571255 != nil:
    section.add "resourceGroupName", valid_571255
  var valid_571256 = path.getOrDefault("name")
  valid_571256 = validateParameter(valid_571256, JString, required = true,
                                 default = nil)
  if valid_571256 != nil:
    section.add "name", valid_571256
  var valid_571257 = path.getOrDefault("processId")
  valid_571257 = validateParameter(valid_571257, JString, required = true,
                                 default = nil)
  if valid_571257 != nil:
    section.add "processId", valid_571257
  var valid_571258 = path.getOrDefault("slot")
  valid_571258 = validateParameter(valid_571258, JString, required = true,
                                 default = nil)
  if valid_571258 != nil:
    section.add "slot", valid_571258
  var valid_571259 = path.getOrDefault("subscriptionId")
  valid_571259 = validateParameter(valid_571259, JString, required = true,
                                 default = nil)
  if valid_571259 != nil:
    section.add "subscriptionId", valid_571259
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571260 = query.getOrDefault("api-version")
  valid_571260 = validateParameter(valid_571260, JString, required = true,
                                 default = nil)
  if valid_571260 != nil:
    section.add "api-version", valid_571260
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571261: Call_WebAppsListProcessThreadsSlot_571252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571261.validator(path, query, header, formData, body)
  let scheme = call_571261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571261.url(scheme.get, call_571261.host, call_571261.base,
                         call_571261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571261, url, valid)

proc call*(call_571262: Call_WebAppsListProcessThreadsSlot_571252;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571263 = newJObject()
  var query_571264 = newJObject()
  add(path_571263, "resourceGroupName", newJString(resourceGroupName))
  add(query_571264, "api-version", newJString(apiVersion))
  add(path_571263, "name", newJString(name))
  add(path_571263, "processId", newJString(processId))
  add(path_571263, "slot", newJString(slot))
  add(path_571263, "subscriptionId", newJString(subscriptionId))
  result = call_571262.call(path_571263, query_571264, nil, nil, nil)

var webAppsListProcessThreadsSlot* = Call_WebAppsListProcessThreadsSlot_571252(
    name: "webAppsListProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreadsSlot_571253, base: "",
    url: url_WebAppsListProcessThreadsSlot_571254, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThreadSlot_571265 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessThreadSlot_571267(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThreadSlot_571266(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571268 = path.getOrDefault("resourceGroupName")
  valid_571268 = validateParameter(valid_571268, JString, required = true,
                                 default = nil)
  if valid_571268 != nil:
    section.add "resourceGroupName", valid_571268
  var valid_571269 = path.getOrDefault("name")
  valid_571269 = validateParameter(valid_571269, JString, required = true,
                                 default = nil)
  if valid_571269 != nil:
    section.add "name", valid_571269
  var valid_571270 = path.getOrDefault("processId")
  valid_571270 = validateParameter(valid_571270, JString, required = true,
                                 default = nil)
  if valid_571270 != nil:
    section.add "processId", valid_571270
  var valid_571271 = path.getOrDefault("slot")
  valid_571271 = validateParameter(valid_571271, JString, required = true,
                                 default = nil)
  if valid_571271 != nil:
    section.add "slot", valid_571271
  var valid_571272 = path.getOrDefault("subscriptionId")
  valid_571272 = validateParameter(valid_571272, JString, required = true,
                                 default = nil)
  if valid_571272 != nil:
    section.add "subscriptionId", valid_571272
  var valid_571273 = path.getOrDefault("threadId")
  valid_571273 = validateParameter(valid_571273, JString, required = true,
                                 default = nil)
  if valid_571273 != nil:
    section.add "threadId", valid_571273
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571274 = query.getOrDefault("api-version")
  valid_571274 = validateParameter(valid_571274, JString, required = true,
                                 default = nil)
  if valid_571274 != nil:
    section.add "api-version", valid_571274
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571275: Call_WebAppsGetProcessThreadSlot_571265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_571275.validator(path, query, header, formData, body)
  let scheme = call_571275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571275.url(scheme.get, call_571275.host, call_571275.base,
                         call_571275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571275, url, valid)

proc call*(call_571276: Call_WebAppsGetProcessThreadSlot_571265;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_571277 = newJObject()
  var query_571278 = newJObject()
  add(path_571277, "resourceGroupName", newJString(resourceGroupName))
  add(query_571278, "api-version", newJString(apiVersion))
  add(path_571277, "name", newJString(name))
  add(path_571277, "processId", newJString(processId))
  add(path_571277, "slot", newJString(slot))
  add(path_571277, "subscriptionId", newJString(subscriptionId))
  add(path_571277, "threadId", newJString(threadId))
  result = call_571276.call(path_571277, query_571278, nil, nil, nil)

var webAppsGetProcessThreadSlot* = Call_WebAppsGetProcessThreadSlot_571265(
    name: "webAppsGetProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThreadSlot_571266, base: "",
    url: url_WebAppsGetProcessThreadSlot_571267, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificatesSlot_571279 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublicCertificatesSlot_571281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificatesSlot_571280(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571282 = path.getOrDefault("resourceGroupName")
  valid_571282 = validateParameter(valid_571282, JString, required = true,
                                 default = nil)
  if valid_571282 != nil:
    section.add "resourceGroupName", valid_571282
  var valid_571283 = path.getOrDefault("name")
  valid_571283 = validateParameter(valid_571283, JString, required = true,
                                 default = nil)
  if valid_571283 != nil:
    section.add "name", valid_571283
  var valid_571284 = path.getOrDefault("slot")
  valid_571284 = validateParameter(valid_571284, JString, required = true,
                                 default = nil)
  if valid_571284 != nil:
    section.add "slot", valid_571284
  var valid_571285 = path.getOrDefault("subscriptionId")
  valid_571285 = validateParameter(valid_571285, JString, required = true,
                                 default = nil)
  if valid_571285 != nil:
    section.add "subscriptionId", valid_571285
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571286 = query.getOrDefault("api-version")
  valid_571286 = validateParameter(valid_571286, JString, required = true,
                                 default = nil)
  if valid_571286 != nil:
    section.add "api-version", valid_571286
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571287: Call_WebAppsListPublicCertificatesSlot_571279;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_571287.validator(path, query, header, formData, body)
  let scheme = call_571287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571287.url(scheme.get, call_571287.host, call_571287.base,
                         call_571287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571287, url, valid)

proc call*(call_571288: Call_WebAppsListPublicCertificatesSlot_571279;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificatesSlot
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571289 = newJObject()
  var query_571290 = newJObject()
  add(path_571289, "resourceGroupName", newJString(resourceGroupName))
  add(query_571290, "api-version", newJString(apiVersion))
  add(path_571289, "name", newJString(name))
  add(path_571289, "slot", newJString(slot))
  add(path_571289, "subscriptionId", newJString(subscriptionId))
  result = call_571288.call(path_571289, query_571290, nil, nil, nil)

var webAppsListPublicCertificatesSlot* = Call_WebAppsListPublicCertificatesSlot_571279(
    name: "webAppsListPublicCertificatesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    validator: validate_WebAppsListPublicCertificatesSlot_571280, base: "",
    url: url_WebAppsListPublicCertificatesSlot_571281, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificateSlot_571304 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdatePublicCertificateSlot_571306(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificateSlot_571305(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571307 = path.getOrDefault("resourceGroupName")
  valid_571307 = validateParameter(valid_571307, JString, required = true,
                                 default = nil)
  if valid_571307 != nil:
    section.add "resourceGroupName", valid_571307
  var valid_571308 = path.getOrDefault("name")
  valid_571308 = validateParameter(valid_571308, JString, required = true,
                                 default = nil)
  if valid_571308 != nil:
    section.add "name", valid_571308
  var valid_571309 = path.getOrDefault("slot")
  valid_571309 = validateParameter(valid_571309, JString, required = true,
                                 default = nil)
  if valid_571309 != nil:
    section.add "slot", valid_571309
  var valid_571310 = path.getOrDefault("subscriptionId")
  valid_571310 = validateParameter(valid_571310, JString, required = true,
                                 default = nil)
  if valid_571310 != nil:
    section.add "subscriptionId", valid_571310
  var valid_571311 = path.getOrDefault("publicCertificateName")
  valid_571311 = validateParameter(valid_571311, JString, required = true,
                                 default = nil)
  if valid_571311 != nil:
    section.add "publicCertificateName", valid_571311
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571312 = query.getOrDefault("api-version")
  valid_571312 = validateParameter(valid_571312, JString, required = true,
                                 default = nil)
  if valid_571312 != nil:
    section.add "api-version", valid_571312
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571314: Call_WebAppsCreateOrUpdatePublicCertificateSlot_571304;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_571314.validator(path, query, header, formData, body)
  let scheme = call_571314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571314.url(scheme.get, call_571314.host, call_571314.base,
                         call_571314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571314, url, valid)

proc call*(call_571315: Call_WebAppsCreateOrUpdatePublicCertificateSlot_571304;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificateSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_571316 = newJObject()
  var query_571317 = newJObject()
  var body_571318 = newJObject()
  add(path_571316, "resourceGroupName", newJString(resourceGroupName))
  add(query_571317, "api-version", newJString(apiVersion))
  add(path_571316, "name", newJString(name))
  add(path_571316, "slot", newJString(slot))
  add(path_571316, "subscriptionId", newJString(subscriptionId))
  add(path_571316, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_571318 = publicCertificate
  result = call_571315.call(path_571316, query_571317, nil, nil, body_571318)

var webAppsCreateOrUpdatePublicCertificateSlot* = Call_WebAppsCreateOrUpdatePublicCertificateSlot_571304(
    name: "webAppsCreateOrUpdatePublicCertificateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificateSlot_571305,
    base: "", url: url_WebAppsCreateOrUpdatePublicCertificateSlot_571306,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificateSlot_571291 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPublicCertificateSlot_571293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificateSlot_571292(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571294 = path.getOrDefault("resourceGroupName")
  valid_571294 = validateParameter(valid_571294, JString, required = true,
                                 default = nil)
  if valid_571294 != nil:
    section.add "resourceGroupName", valid_571294
  var valid_571295 = path.getOrDefault("name")
  valid_571295 = validateParameter(valid_571295, JString, required = true,
                                 default = nil)
  if valid_571295 != nil:
    section.add "name", valid_571295
  var valid_571296 = path.getOrDefault("slot")
  valid_571296 = validateParameter(valid_571296, JString, required = true,
                                 default = nil)
  if valid_571296 != nil:
    section.add "slot", valid_571296
  var valid_571297 = path.getOrDefault("subscriptionId")
  valid_571297 = validateParameter(valid_571297, JString, required = true,
                                 default = nil)
  if valid_571297 != nil:
    section.add "subscriptionId", valid_571297
  var valid_571298 = path.getOrDefault("publicCertificateName")
  valid_571298 = validateParameter(valid_571298, JString, required = true,
                                 default = nil)
  if valid_571298 != nil:
    section.add "publicCertificateName", valid_571298
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571299 = query.getOrDefault("api-version")
  valid_571299 = validateParameter(valid_571299, JString, required = true,
                                 default = nil)
  if valid_571299 != nil:
    section.add "api-version", valid_571299
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571300: Call_WebAppsGetPublicCertificateSlot_571291;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_571300.validator(path, query, header, formData, body)
  let scheme = call_571300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571300.url(scheme.get, call_571300.host, call_571300.base,
                         call_571300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571300, url, valid)

proc call*(call_571301: Call_WebAppsGetPublicCertificateSlot_571291;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificateSlot
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_571302 = newJObject()
  var query_571303 = newJObject()
  add(path_571302, "resourceGroupName", newJString(resourceGroupName))
  add(query_571303, "api-version", newJString(apiVersion))
  add(path_571302, "name", newJString(name))
  add(path_571302, "slot", newJString(slot))
  add(path_571302, "subscriptionId", newJString(subscriptionId))
  add(path_571302, "publicCertificateName", newJString(publicCertificateName))
  result = call_571301.call(path_571302, query_571303, nil, nil, nil)

var webAppsGetPublicCertificateSlot* = Call_WebAppsGetPublicCertificateSlot_571291(
    name: "webAppsGetPublicCertificateSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificateSlot_571292, base: "",
    url: url_WebAppsGetPublicCertificateSlot_571293, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificateSlot_571319 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePublicCertificateSlot_571321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificateSlot_571320(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571322 = path.getOrDefault("resourceGroupName")
  valid_571322 = validateParameter(valid_571322, JString, required = true,
                                 default = nil)
  if valid_571322 != nil:
    section.add "resourceGroupName", valid_571322
  var valid_571323 = path.getOrDefault("name")
  valid_571323 = validateParameter(valid_571323, JString, required = true,
                                 default = nil)
  if valid_571323 != nil:
    section.add "name", valid_571323
  var valid_571324 = path.getOrDefault("slot")
  valid_571324 = validateParameter(valid_571324, JString, required = true,
                                 default = nil)
  if valid_571324 != nil:
    section.add "slot", valid_571324
  var valid_571325 = path.getOrDefault("subscriptionId")
  valid_571325 = validateParameter(valid_571325, JString, required = true,
                                 default = nil)
  if valid_571325 != nil:
    section.add "subscriptionId", valid_571325
  var valid_571326 = path.getOrDefault("publicCertificateName")
  valid_571326 = validateParameter(valid_571326, JString, required = true,
                                 default = nil)
  if valid_571326 != nil:
    section.add "publicCertificateName", valid_571326
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571327 = query.getOrDefault("api-version")
  valid_571327 = validateParameter(valid_571327, JString, required = true,
                                 default = nil)
  if valid_571327 != nil:
    section.add "api-version", valid_571327
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571328: Call_WebAppsDeletePublicCertificateSlot_571319;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_571328.validator(path, query, header, formData, body)
  let scheme = call_571328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571328.url(scheme.get, call_571328.host, call_571328.base,
                         call_571328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571328, url, valid)

proc call*(call_571329: Call_WebAppsDeletePublicCertificateSlot_571319;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificateSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_571330 = newJObject()
  var query_571331 = newJObject()
  add(path_571330, "resourceGroupName", newJString(resourceGroupName))
  add(query_571331, "api-version", newJString(apiVersion))
  add(path_571330, "name", newJString(name))
  add(path_571330, "slot", newJString(slot))
  add(path_571330, "subscriptionId", newJString(subscriptionId))
  add(path_571330, "publicCertificateName", newJString(publicCertificateName))
  result = call_571329.call(path_571330, query_571331, nil, nil, nil)

var webAppsDeletePublicCertificateSlot* = Call_WebAppsDeletePublicCertificateSlot_571319(
    name: "webAppsDeletePublicCertificateSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificateSlot_571320, base: "",
    url: url_WebAppsDeletePublicCertificateSlot_571321, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571332 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingProfileXmlWithSecretsSlot_571334(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecretsSlot_571333(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571335 = path.getOrDefault("resourceGroupName")
  valid_571335 = validateParameter(valid_571335, JString, required = true,
                                 default = nil)
  if valid_571335 != nil:
    section.add "resourceGroupName", valid_571335
  var valid_571336 = path.getOrDefault("name")
  valid_571336 = validateParameter(valid_571336, JString, required = true,
                                 default = nil)
  if valid_571336 != nil:
    section.add "name", valid_571336
  var valid_571337 = path.getOrDefault("slot")
  valid_571337 = validateParameter(valid_571337, JString, required = true,
                                 default = nil)
  if valid_571337 != nil:
    section.add "slot", valid_571337
  var valid_571338 = path.getOrDefault("subscriptionId")
  valid_571338 = validateParameter(valid_571338, JString, required = true,
                                 default = nil)
  if valid_571338 != nil:
    section.add "subscriptionId", valid_571338
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571339 = query.getOrDefault("api-version")
  valid_571339 = validateParameter(valid_571339, JString, required = true,
                                 default = nil)
  if valid_571339 != nil:
    section.add "api-version", valid_571339
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571341: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571332;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_571341.validator(path, query, header, formData, body)
  let scheme = call_571341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571341.url(scheme.get, call_571341.host, call_571341.base,
                         call_571341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571341, url, valid)

proc call*(call_571342: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571332;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecretsSlot
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_571343 = newJObject()
  var query_571344 = newJObject()
  var body_571345 = newJObject()
  add(path_571343, "resourceGroupName", newJString(resourceGroupName))
  add(query_571344, "api-version", newJString(apiVersion))
  add(path_571343, "name", newJString(name))
  add(path_571343, "slot", newJString(slot))
  add(path_571343, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_571345 = publishingProfileOptions
  result = call_571342.call(path_571343, query_571344, nil, nil, body_571345)

var webAppsListPublishingProfileXmlWithSecretsSlot* = Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571332(
    name: "webAppsListPublishingProfileXmlWithSecretsSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecretsSlot_571333,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecretsSlot_571334,
    schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSlot_571346 = ref object of OpenApiRestCall_567666
proc url_WebAppsRecoverSlot_571348(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSlot_571347(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Recovers a web app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571349 = path.getOrDefault("resourceGroupName")
  valid_571349 = validateParameter(valid_571349, JString, required = true,
                                 default = nil)
  if valid_571349 != nil:
    section.add "resourceGroupName", valid_571349
  var valid_571350 = path.getOrDefault("name")
  valid_571350 = validateParameter(valid_571350, JString, required = true,
                                 default = nil)
  if valid_571350 != nil:
    section.add "name", valid_571350
  var valid_571351 = path.getOrDefault("slot")
  valid_571351 = validateParameter(valid_571351, JString, required = true,
                                 default = nil)
  if valid_571351 != nil:
    section.add "slot", valid_571351
  var valid_571352 = path.getOrDefault("subscriptionId")
  valid_571352 = validateParameter(valid_571352, JString, required = true,
                                 default = nil)
  if valid_571352 != nil:
    section.add "subscriptionId", valid_571352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571353 = query.getOrDefault("api-version")
  valid_571353 = validateParameter(valid_571353, JString, required = true,
                                 default = nil)
  if valid_571353 != nil:
    section.add "api-version", valid_571353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571355: Call_WebAppsRecoverSlot_571346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Recovers a web app to a previous snapshot.
  ## 
  let valid = call_571355.validator(path, query, header, formData, body)
  let scheme = call_571355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571355.url(scheme.get, call_571355.host, call_571355.base,
                         call_571355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571355, url, valid)

proc call*(call_571356: Call_WebAppsRecoverSlot_571346; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          recoveryEntity: JsonNode): Recallable =
  ## webAppsRecoverSlot
  ## Recovers a web app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_571357 = newJObject()
  var query_571358 = newJObject()
  var body_571359 = newJObject()
  add(path_571357, "resourceGroupName", newJString(resourceGroupName))
  add(query_571358, "api-version", newJString(apiVersion))
  add(path_571357, "name", newJString(name))
  add(path_571357, "slot", newJString(slot))
  add(path_571357, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_571359 = recoveryEntity
  result = call_571356.call(path_571357, query_571358, nil, nil, body_571359)

var webAppsRecoverSlot* = Call_WebAppsRecoverSlot_571346(
    name: "webAppsRecoverSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
    validator: validate_WebAppsRecoverSlot_571347, base: "",
    url: url_WebAppsRecoverSlot_571348, schemes: {Scheme.Https})
type
  Call_WebAppsResetSlotConfigurationSlot_571360 = ref object of OpenApiRestCall_567666
proc url_WebAppsResetSlotConfigurationSlot_571362(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetSlotConfigurationSlot_571361(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571363 = path.getOrDefault("resourceGroupName")
  valid_571363 = validateParameter(valid_571363, JString, required = true,
                                 default = nil)
  if valid_571363 != nil:
    section.add "resourceGroupName", valid_571363
  var valid_571364 = path.getOrDefault("name")
  valid_571364 = validateParameter(valid_571364, JString, required = true,
                                 default = nil)
  if valid_571364 != nil:
    section.add "name", valid_571364
  var valid_571365 = path.getOrDefault("slot")
  valid_571365 = validateParameter(valid_571365, JString, required = true,
                                 default = nil)
  if valid_571365 != nil:
    section.add "slot", valid_571365
  var valid_571366 = path.getOrDefault("subscriptionId")
  valid_571366 = validateParameter(valid_571366, JString, required = true,
                                 default = nil)
  if valid_571366 != nil:
    section.add "subscriptionId", valid_571366
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571367 = query.getOrDefault("api-version")
  valid_571367 = validateParameter(valid_571367, JString, required = true,
                                 default = nil)
  if valid_571367 != nil:
    section.add "api-version", valid_571367
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571368: Call_WebAppsResetSlotConfigurationSlot_571360;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_571368.validator(path, query, header, formData, body)
  let scheme = call_571368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571368.url(scheme.get, call_571368.host, call_571368.base,
                         call_571368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571368, url, valid)

proc call*(call_571369: Call_WebAppsResetSlotConfigurationSlot_571360;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsResetSlotConfigurationSlot
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571370 = newJObject()
  var query_571371 = newJObject()
  add(path_571370, "resourceGroupName", newJString(resourceGroupName))
  add(query_571371, "api-version", newJString(apiVersion))
  add(path_571370, "name", newJString(name))
  add(path_571370, "slot", newJString(slot))
  add(path_571370, "subscriptionId", newJString(subscriptionId))
  result = call_571369.call(path_571370, query_571371, nil, nil, nil)

var webAppsResetSlotConfigurationSlot* = Call_WebAppsResetSlotConfigurationSlot_571360(
    name: "webAppsResetSlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_WebAppsResetSlotConfigurationSlot_571361, base: "",
    url: url_WebAppsResetSlotConfigurationSlot_571362, schemes: {Scheme.Https})
type
  Call_WebAppsRestartSlot_571372 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestartSlot_571374(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestartSlot_571373(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571375 = path.getOrDefault("resourceGroupName")
  valid_571375 = validateParameter(valid_571375, JString, required = true,
                                 default = nil)
  if valid_571375 != nil:
    section.add "resourceGroupName", valid_571375
  var valid_571376 = path.getOrDefault("name")
  valid_571376 = validateParameter(valid_571376, JString, required = true,
                                 default = nil)
  if valid_571376 != nil:
    section.add "name", valid_571376
  var valid_571377 = path.getOrDefault("slot")
  valid_571377 = validateParameter(valid_571377, JString, required = true,
                                 default = nil)
  if valid_571377 != nil:
    section.add "slot", valid_571377
  var valid_571378 = path.getOrDefault("subscriptionId")
  valid_571378 = validateParameter(valid_571378, JString, required = true,
                                 default = nil)
  if valid_571378 != nil:
    section.add "subscriptionId", valid_571378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571379 = query.getOrDefault("api-version")
  valid_571379 = validateParameter(valid_571379, JString, required = true,
                                 default = nil)
  if valid_571379 != nil:
    section.add "api-version", valid_571379
  var valid_571380 = query.getOrDefault("synchronous")
  valid_571380 = validateParameter(valid_571380, JBool, required = false, default = nil)
  if valid_571380 != nil:
    section.add "synchronous", valid_571380
  var valid_571381 = query.getOrDefault("softRestart")
  valid_571381 = validateParameter(valid_571381, JBool, required = false, default = nil)
  if valid_571381 != nil:
    section.add "softRestart", valid_571381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571382: Call_WebAppsRestartSlot_571372; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_571382.validator(path, query, header, formData, body)
  let scheme = call_571382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571382.url(scheme.get, call_571382.host, call_571382.base,
                         call_571382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571382, url, valid)

proc call*(call_571383: Call_WebAppsRestartSlot_571372; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestartSlot
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_571384 = newJObject()
  var query_571385 = newJObject()
  add(path_571384, "resourceGroupName", newJString(resourceGroupName))
  add(query_571385, "api-version", newJString(apiVersion))
  add(path_571384, "name", newJString(name))
  add(path_571384, "slot", newJString(slot))
  add(path_571384, "subscriptionId", newJString(subscriptionId))
  add(query_571385, "synchronous", newJBool(synchronous))
  add(query_571385, "softRestart", newJBool(softRestart))
  result = call_571383.call(path_571384, query_571385, nil, nil, nil)

var webAppsRestartSlot* = Call_WebAppsRestartSlot_571372(
    name: "webAppsRestartSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_WebAppsRestartSlot_571373, base: "",
    url: url_WebAppsRestartSlot_571374, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensionsSlot_571386 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSiteExtensionsSlot_571388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensionsSlot_571387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571389 = path.getOrDefault("resourceGroupName")
  valid_571389 = validateParameter(valid_571389, JString, required = true,
                                 default = nil)
  if valid_571389 != nil:
    section.add "resourceGroupName", valid_571389
  var valid_571390 = path.getOrDefault("name")
  valid_571390 = validateParameter(valid_571390, JString, required = true,
                                 default = nil)
  if valid_571390 != nil:
    section.add "name", valid_571390
  var valid_571391 = path.getOrDefault("slot")
  valid_571391 = validateParameter(valid_571391, JString, required = true,
                                 default = nil)
  if valid_571391 != nil:
    section.add "slot", valid_571391
  var valid_571392 = path.getOrDefault("subscriptionId")
  valid_571392 = validateParameter(valid_571392, JString, required = true,
                                 default = nil)
  if valid_571392 != nil:
    section.add "subscriptionId", valid_571392
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571393 = query.getOrDefault("api-version")
  valid_571393 = validateParameter(valid_571393, JString, required = true,
                                 default = nil)
  if valid_571393 != nil:
    section.add "api-version", valid_571393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571394: Call_WebAppsListSiteExtensionsSlot_571386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  let valid = call_571394.validator(path, query, header, formData, body)
  let scheme = call_571394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571394.url(scheme.get, call_571394.host, call_571394.base,
                         call_571394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571394, url, valid)

proc call*(call_571395: Call_WebAppsListSiteExtensionsSlot_571386;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensionsSlot
  ## Get list of site extensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571396 = newJObject()
  var query_571397 = newJObject()
  add(path_571396, "resourceGroupName", newJString(resourceGroupName))
  add(query_571397, "api-version", newJString(apiVersion))
  add(path_571396, "name", newJString(name))
  add(path_571396, "slot", newJString(slot))
  add(path_571396, "subscriptionId", newJString(subscriptionId))
  result = call_571395.call(path_571396, query_571397, nil, nil, nil)

var webAppsListSiteExtensionsSlot* = Call_WebAppsListSiteExtensionsSlot_571386(
    name: "webAppsListSiteExtensionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    validator: validate_WebAppsListSiteExtensionsSlot_571387, base: "",
    url: url_WebAppsListSiteExtensionsSlot_571388, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtensionSlot_571411 = ref object of OpenApiRestCall_567666
proc url_WebAppsInstallSiteExtensionSlot_571413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtensionSlot_571412(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571414 = path.getOrDefault("resourceGroupName")
  valid_571414 = validateParameter(valid_571414, JString, required = true,
                                 default = nil)
  if valid_571414 != nil:
    section.add "resourceGroupName", valid_571414
  var valid_571415 = path.getOrDefault("name")
  valid_571415 = validateParameter(valid_571415, JString, required = true,
                                 default = nil)
  if valid_571415 != nil:
    section.add "name", valid_571415
  var valid_571416 = path.getOrDefault("slot")
  valid_571416 = validateParameter(valid_571416, JString, required = true,
                                 default = nil)
  if valid_571416 != nil:
    section.add "slot", valid_571416
  var valid_571417 = path.getOrDefault("subscriptionId")
  valid_571417 = validateParameter(valid_571417, JString, required = true,
                                 default = nil)
  if valid_571417 != nil:
    section.add "subscriptionId", valid_571417
  var valid_571418 = path.getOrDefault("siteExtensionId")
  valid_571418 = validateParameter(valid_571418, JString, required = true,
                                 default = nil)
  if valid_571418 != nil:
    section.add "siteExtensionId", valid_571418
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571419 = query.getOrDefault("api-version")
  valid_571419 = validateParameter(valid_571419, JString, required = true,
                                 default = nil)
  if valid_571419 != nil:
    section.add "api-version", valid_571419
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571420: Call_WebAppsInstallSiteExtensionSlot_571411;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_571420.validator(path, query, header, formData, body)
  let scheme = call_571420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571420.url(scheme.get, call_571420.host, call_571420.base,
                         call_571420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571420, url, valid)

proc call*(call_571421: Call_WebAppsInstallSiteExtensionSlot_571411;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtensionSlot
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_571422 = newJObject()
  var query_571423 = newJObject()
  add(path_571422, "resourceGroupName", newJString(resourceGroupName))
  add(query_571423, "api-version", newJString(apiVersion))
  add(path_571422, "name", newJString(name))
  add(path_571422, "slot", newJString(slot))
  add(path_571422, "subscriptionId", newJString(subscriptionId))
  add(path_571422, "siteExtensionId", newJString(siteExtensionId))
  result = call_571421.call(path_571422, query_571423, nil, nil, nil)

var webAppsInstallSiteExtensionSlot* = Call_WebAppsInstallSiteExtensionSlot_571411(
    name: "webAppsInstallSiteExtensionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtensionSlot_571412, base: "",
    url: url_WebAppsInstallSiteExtensionSlot_571413, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtensionSlot_571398 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSiteExtensionSlot_571400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtensionSlot_571399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571401 = path.getOrDefault("resourceGroupName")
  valid_571401 = validateParameter(valid_571401, JString, required = true,
                                 default = nil)
  if valid_571401 != nil:
    section.add "resourceGroupName", valid_571401
  var valid_571402 = path.getOrDefault("name")
  valid_571402 = validateParameter(valid_571402, JString, required = true,
                                 default = nil)
  if valid_571402 != nil:
    section.add "name", valid_571402
  var valid_571403 = path.getOrDefault("slot")
  valid_571403 = validateParameter(valid_571403, JString, required = true,
                                 default = nil)
  if valid_571403 != nil:
    section.add "slot", valid_571403
  var valid_571404 = path.getOrDefault("subscriptionId")
  valid_571404 = validateParameter(valid_571404, JString, required = true,
                                 default = nil)
  if valid_571404 != nil:
    section.add "subscriptionId", valid_571404
  var valid_571405 = path.getOrDefault("siteExtensionId")
  valid_571405 = validateParameter(valid_571405, JString, required = true,
                                 default = nil)
  if valid_571405 != nil:
    section.add "siteExtensionId", valid_571405
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571406 = query.getOrDefault("api-version")
  valid_571406 = validateParameter(valid_571406, JString, required = true,
                                 default = nil)
  if valid_571406 != nil:
    section.add "api-version", valid_571406
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571407: Call_WebAppsGetSiteExtensionSlot_571398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_571407.validator(path, query, header, formData, body)
  let scheme = call_571407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571407.url(scheme.get, call_571407.host, call_571407.base,
                         call_571407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571407, url, valid)

proc call*(call_571408: Call_WebAppsGetSiteExtensionSlot_571398;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtensionSlot
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_571409 = newJObject()
  var query_571410 = newJObject()
  add(path_571409, "resourceGroupName", newJString(resourceGroupName))
  add(query_571410, "api-version", newJString(apiVersion))
  add(path_571409, "name", newJString(name))
  add(path_571409, "slot", newJString(slot))
  add(path_571409, "subscriptionId", newJString(subscriptionId))
  add(path_571409, "siteExtensionId", newJString(siteExtensionId))
  result = call_571408.call(path_571409, query_571410, nil, nil, nil)

var webAppsGetSiteExtensionSlot* = Call_WebAppsGetSiteExtensionSlot_571398(
    name: "webAppsGetSiteExtensionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtensionSlot_571399, base: "",
    url: url_WebAppsGetSiteExtensionSlot_571400, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtensionSlot_571424 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSiteExtensionSlot_571426(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtensionSlot_571425(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571427 = path.getOrDefault("resourceGroupName")
  valid_571427 = validateParameter(valid_571427, JString, required = true,
                                 default = nil)
  if valid_571427 != nil:
    section.add "resourceGroupName", valid_571427
  var valid_571428 = path.getOrDefault("name")
  valid_571428 = validateParameter(valid_571428, JString, required = true,
                                 default = nil)
  if valid_571428 != nil:
    section.add "name", valid_571428
  var valid_571429 = path.getOrDefault("slot")
  valid_571429 = validateParameter(valid_571429, JString, required = true,
                                 default = nil)
  if valid_571429 != nil:
    section.add "slot", valid_571429
  var valid_571430 = path.getOrDefault("subscriptionId")
  valid_571430 = validateParameter(valid_571430, JString, required = true,
                                 default = nil)
  if valid_571430 != nil:
    section.add "subscriptionId", valid_571430
  var valid_571431 = path.getOrDefault("siteExtensionId")
  valid_571431 = validateParameter(valid_571431, JString, required = true,
                                 default = nil)
  if valid_571431 != nil:
    section.add "siteExtensionId", valid_571431
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571432 = query.getOrDefault("api-version")
  valid_571432 = validateParameter(valid_571432, JString, required = true,
                                 default = nil)
  if valid_571432 != nil:
    section.add "api-version", valid_571432
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571433: Call_WebAppsDeleteSiteExtensionSlot_571424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_571433.validator(path, query, header, formData, body)
  let scheme = call_571433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571433.url(scheme.get, call_571433.host, call_571433.base,
                         call_571433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571433, url, valid)

proc call*(call_571434: Call_WebAppsDeleteSiteExtensionSlot_571424;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtensionSlot
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_571435 = newJObject()
  var query_571436 = newJObject()
  add(path_571435, "resourceGroupName", newJString(resourceGroupName))
  add(query_571436, "api-version", newJString(apiVersion))
  add(path_571435, "name", newJString(name))
  add(path_571435, "slot", newJString(slot))
  add(path_571435, "subscriptionId", newJString(subscriptionId))
  add(path_571435, "siteExtensionId", newJString(siteExtensionId))
  result = call_571434.call(path_571435, query_571436, nil, nil, nil)

var webAppsDeleteSiteExtensionSlot* = Call_WebAppsDeleteSiteExtensionSlot_571424(
    name: "webAppsDeleteSiteExtensionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtensionSlot_571425, base: "",
    url: url_WebAppsDeleteSiteExtensionSlot_571426, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesSlot_571437 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlotDifferencesSlot_571439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesSlot_571438(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571440 = path.getOrDefault("resourceGroupName")
  valid_571440 = validateParameter(valid_571440, JString, required = true,
                                 default = nil)
  if valid_571440 != nil:
    section.add "resourceGroupName", valid_571440
  var valid_571441 = path.getOrDefault("name")
  valid_571441 = validateParameter(valid_571441, JString, required = true,
                                 default = nil)
  if valid_571441 != nil:
    section.add "name", valid_571441
  var valid_571442 = path.getOrDefault("slot")
  valid_571442 = validateParameter(valid_571442, JString, required = true,
                                 default = nil)
  if valid_571442 != nil:
    section.add "slot", valid_571442
  var valid_571443 = path.getOrDefault("subscriptionId")
  valid_571443 = validateParameter(valid_571443, JString, required = true,
                                 default = nil)
  if valid_571443 != nil:
    section.add "subscriptionId", valid_571443
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571444 = query.getOrDefault("api-version")
  valid_571444 = validateParameter(valid_571444, JString, required = true,
                                 default = nil)
  if valid_571444 != nil:
    section.add "api-version", valid_571444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571446: Call_WebAppsListSlotDifferencesSlot_571437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_571446.validator(path, query, header, formData, body)
  let scheme = call_571446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571446.url(scheme.get, call_571446.host, call_571446.base,
                         call_571446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571446, url, valid)

proc call*(call_571447: Call_WebAppsListSlotDifferencesSlot_571437;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesSlot
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_571448 = newJObject()
  var query_571449 = newJObject()
  var body_571450 = newJObject()
  add(path_571448, "resourceGroupName", newJString(resourceGroupName))
  add(query_571449, "api-version", newJString(apiVersion))
  add(path_571448, "name", newJString(name))
  add(path_571448, "slot", newJString(slot))
  add(path_571448, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571450 = slotSwapEntity
  result = call_571447.call(path_571448, query_571449, nil, nil, body_571450)

var webAppsListSlotDifferencesSlot* = Call_WebAppsListSlotDifferencesSlot_571437(
    name: "webAppsListSlotDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesSlot_571438, base: "",
    url: url_WebAppsListSlotDifferencesSlot_571439, schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotSlot_571451 = ref object of OpenApiRestCall_567666
proc url_WebAppsSwapSlotSlot_571453(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotSlot_571452(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571454 = path.getOrDefault("resourceGroupName")
  valid_571454 = validateParameter(valid_571454, JString, required = true,
                                 default = nil)
  if valid_571454 != nil:
    section.add "resourceGroupName", valid_571454
  var valid_571455 = path.getOrDefault("name")
  valid_571455 = validateParameter(valid_571455, JString, required = true,
                                 default = nil)
  if valid_571455 != nil:
    section.add "name", valid_571455
  var valid_571456 = path.getOrDefault("slot")
  valid_571456 = validateParameter(valid_571456, JString, required = true,
                                 default = nil)
  if valid_571456 != nil:
    section.add "slot", valid_571456
  var valid_571457 = path.getOrDefault("subscriptionId")
  valid_571457 = validateParameter(valid_571457, JString, required = true,
                                 default = nil)
  if valid_571457 != nil:
    section.add "subscriptionId", valid_571457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571458 = query.getOrDefault("api-version")
  valid_571458 = validateParameter(valid_571458, JString, required = true,
                                 default = nil)
  if valid_571458 != nil:
    section.add "api-version", valid_571458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571460: Call_WebAppsSwapSlotSlot_571451; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_571460.validator(path, query, header, formData, body)
  let scheme = call_571460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571460.url(scheme.get, call_571460.host, call_571460.base,
                         call_571460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571460, url, valid)

proc call*(call_571461: Call_WebAppsSwapSlotSlot_571451; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotSlot
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_571462 = newJObject()
  var query_571463 = newJObject()
  var body_571464 = newJObject()
  add(path_571462, "resourceGroupName", newJString(resourceGroupName))
  add(query_571463, "api-version", newJString(apiVersion))
  add(path_571462, "name", newJString(name))
  add(path_571462, "slot", newJString(slot))
  add(path_571462, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571464 = slotSwapEntity
  result = call_571461.call(path_571462, query_571463, nil, nil, body_571464)

var webAppsSwapSlotSlot* = Call_WebAppsSwapSlotSlot_571451(
    name: "webAppsSwapSlotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_WebAppsSwapSlotSlot_571452, base: "",
    url: url_WebAppsSwapSlotSlot_571453, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsSlot_571465 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSnapshotsSlot_571467(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsSlot_571466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571468 = path.getOrDefault("resourceGroupName")
  valid_571468 = validateParameter(valid_571468, JString, required = true,
                                 default = nil)
  if valid_571468 != nil:
    section.add "resourceGroupName", valid_571468
  var valid_571469 = path.getOrDefault("name")
  valid_571469 = validateParameter(valid_571469, JString, required = true,
                                 default = nil)
  if valid_571469 != nil:
    section.add "name", valid_571469
  var valid_571470 = path.getOrDefault("slot")
  valid_571470 = validateParameter(valid_571470, JString, required = true,
                                 default = nil)
  if valid_571470 != nil:
    section.add "slot", valid_571470
  var valid_571471 = path.getOrDefault("subscriptionId")
  valid_571471 = validateParameter(valid_571471, JString, required = true,
                                 default = nil)
  if valid_571471 != nil:
    section.add "subscriptionId", valid_571471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571472 = query.getOrDefault("api-version")
  valid_571472 = validateParameter(valid_571472, JString, required = true,
                                 default = nil)
  if valid_571472 != nil:
    section.add "api-version", valid_571472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571473: Call_WebAppsListSnapshotsSlot_571465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_571473.validator(path, query, header, formData, body)
  let scheme = call_571473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571473.url(scheme.get, call_571473.host, call_571473.base,
                         call_571473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571473, url, valid)

proc call*(call_571474: Call_WebAppsListSnapshotsSlot_571465;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsSlot
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571475 = newJObject()
  var query_571476 = newJObject()
  add(path_571475, "resourceGroupName", newJString(resourceGroupName))
  add(query_571476, "api-version", newJString(apiVersion))
  add(path_571475, "name", newJString(name))
  add(path_571475, "slot", newJString(slot))
  add(path_571475, "subscriptionId", newJString(subscriptionId))
  result = call_571474.call(path_571475, query_571476, nil, nil, nil)

var webAppsListSnapshotsSlot* = Call_WebAppsListSnapshotsSlot_571465(
    name: "webAppsListSnapshotsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_WebAppsListSnapshotsSlot_571466, base: "",
    url: url_WebAppsListSnapshotsSlot_571467, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControlSlot_571489 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSourceControlSlot_571491(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControlSlot_571490(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571492 = path.getOrDefault("resourceGroupName")
  valid_571492 = validateParameter(valid_571492, JString, required = true,
                                 default = nil)
  if valid_571492 != nil:
    section.add "resourceGroupName", valid_571492
  var valid_571493 = path.getOrDefault("name")
  valid_571493 = validateParameter(valid_571493, JString, required = true,
                                 default = nil)
  if valid_571493 != nil:
    section.add "name", valid_571493
  var valid_571494 = path.getOrDefault("slot")
  valid_571494 = validateParameter(valid_571494, JString, required = true,
                                 default = nil)
  if valid_571494 != nil:
    section.add "slot", valid_571494
  var valid_571495 = path.getOrDefault("subscriptionId")
  valid_571495 = validateParameter(valid_571495, JString, required = true,
                                 default = nil)
  if valid_571495 != nil:
    section.add "subscriptionId", valid_571495
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571496 = query.getOrDefault("api-version")
  valid_571496 = validateParameter(valid_571496, JString, required = true,
                                 default = nil)
  if valid_571496 != nil:
    section.add "api-version", valid_571496
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571498: Call_WebAppsCreateOrUpdateSourceControlSlot_571489;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_571498.validator(path, query, header, formData, body)
  let scheme = call_571498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571498.url(scheme.get, call_571498.host, call_571498.base,
                         call_571498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571498, url, valid)

proc call*(call_571499: Call_WebAppsCreateOrUpdateSourceControlSlot_571489;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_571500 = newJObject()
  var query_571501 = newJObject()
  var body_571502 = newJObject()
  add(path_571500, "resourceGroupName", newJString(resourceGroupName))
  add(query_571501, "api-version", newJString(apiVersion))
  add(path_571500, "name", newJString(name))
  add(path_571500, "slot", newJString(slot))
  add(path_571500, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571502 = siteSourceControl
  result = call_571499.call(path_571500, query_571501, nil, nil, body_571502)

var webAppsCreateOrUpdateSourceControlSlot* = Call_WebAppsCreateOrUpdateSourceControlSlot_571489(
    name: "webAppsCreateOrUpdateSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControlSlot_571490, base: "",
    url: url_WebAppsCreateOrUpdateSourceControlSlot_571491,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControlSlot_571477 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSourceControlSlot_571479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControlSlot_571478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571480 = path.getOrDefault("resourceGroupName")
  valid_571480 = validateParameter(valid_571480, JString, required = true,
                                 default = nil)
  if valid_571480 != nil:
    section.add "resourceGroupName", valid_571480
  var valid_571481 = path.getOrDefault("name")
  valid_571481 = validateParameter(valid_571481, JString, required = true,
                                 default = nil)
  if valid_571481 != nil:
    section.add "name", valid_571481
  var valid_571482 = path.getOrDefault("slot")
  valid_571482 = validateParameter(valid_571482, JString, required = true,
                                 default = nil)
  if valid_571482 != nil:
    section.add "slot", valid_571482
  var valid_571483 = path.getOrDefault("subscriptionId")
  valid_571483 = validateParameter(valid_571483, JString, required = true,
                                 default = nil)
  if valid_571483 != nil:
    section.add "subscriptionId", valid_571483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571484 = query.getOrDefault("api-version")
  valid_571484 = validateParameter(valid_571484, JString, required = true,
                                 default = nil)
  if valid_571484 != nil:
    section.add "api-version", valid_571484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571485: Call_WebAppsGetSourceControlSlot_571477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_571485.validator(path, query, header, formData, body)
  let scheme = call_571485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571485.url(scheme.get, call_571485.host, call_571485.base,
                         call_571485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571485, url, valid)

proc call*(call_571486: Call_WebAppsGetSourceControlSlot_571477;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControlSlot
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571487 = newJObject()
  var query_571488 = newJObject()
  add(path_571487, "resourceGroupName", newJString(resourceGroupName))
  add(query_571488, "api-version", newJString(apiVersion))
  add(path_571487, "name", newJString(name))
  add(path_571487, "slot", newJString(slot))
  add(path_571487, "subscriptionId", newJString(subscriptionId))
  result = call_571486.call(path_571487, query_571488, nil, nil, nil)

var webAppsGetSourceControlSlot* = Call_WebAppsGetSourceControlSlot_571477(
    name: "webAppsGetSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControlSlot_571478, base: "",
    url: url_WebAppsGetSourceControlSlot_571479, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControlSlot_571515 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSourceControlSlot_571517(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControlSlot_571516(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571518 = path.getOrDefault("resourceGroupName")
  valid_571518 = validateParameter(valid_571518, JString, required = true,
                                 default = nil)
  if valid_571518 != nil:
    section.add "resourceGroupName", valid_571518
  var valid_571519 = path.getOrDefault("name")
  valid_571519 = validateParameter(valid_571519, JString, required = true,
                                 default = nil)
  if valid_571519 != nil:
    section.add "name", valid_571519
  var valid_571520 = path.getOrDefault("slot")
  valid_571520 = validateParameter(valid_571520, JString, required = true,
                                 default = nil)
  if valid_571520 != nil:
    section.add "slot", valid_571520
  var valid_571521 = path.getOrDefault("subscriptionId")
  valid_571521 = validateParameter(valid_571521, JString, required = true,
                                 default = nil)
  if valid_571521 != nil:
    section.add "subscriptionId", valid_571521
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571522 = query.getOrDefault("api-version")
  valid_571522 = validateParameter(valid_571522, JString, required = true,
                                 default = nil)
  if valid_571522 != nil:
    section.add "api-version", valid_571522
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571524: Call_WebAppsUpdateSourceControlSlot_571515; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_571524.validator(path, query, header, formData, body)
  let scheme = call_571524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571524.url(scheme.get, call_571524.host, call_571524.base,
                         call_571524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571524, url, valid)

proc call*(call_571525: Call_WebAppsUpdateSourceControlSlot_571515;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_571526 = newJObject()
  var query_571527 = newJObject()
  var body_571528 = newJObject()
  add(path_571526, "resourceGroupName", newJString(resourceGroupName))
  add(query_571527, "api-version", newJString(apiVersion))
  add(path_571526, "name", newJString(name))
  add(path_571526, "slot", newJString(slot))
  add(path_571526, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571528 = siteSourceControl
  result = call_571525.call(path_571526, query_571527, nil, nil, body_571528)

var webAppsUpdateSourceControlSlot* = Call_WebAppsUpdateSourceControlSlot_571515(
    name: "webAppsUpdateSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControlSlot_571516, base: "",
    url: url_WebAppsUpdateSourceControlSlot_571517, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControlSlot_571503 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSourceControlSlot_571505(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControlSlot_571504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571506 = path.getOrDefault("resourceGroupName")
  valid_571506 = validateParameter(valid_571506, JString, required = true,
                                 default = nil)
  if valid_571506 != nil:
    section.add "resourceGroupName", valid_571506
  var valid_571507 = path.getOrDefault("name")
  valid_571507 = validateParameter(valid_571507, JString, required = true,
                                 default = nil)
  if valid_571507 != nil:
    section.add "name", valid_571507
  var valid_571508 = path.getOrDefault("slot")
  valid_571508 = validateParameter(valid_571508, JString, required = true,
                                 default = nil)
  if valid_571508 != nil:
    section.add "slot", valid_571508
  var valid_571509 = path.getOrDefault("subscriptionId")
  valid_571509 = validateParameter(valid_571509, JString, required = true,
                                 default = nil)
  if valid_571509 != nil:
    section.add "subscriptionId", valid_571509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571510 = query.getOrDefault("api-version")
  valid_571510 = validateParameter(valid_571510, JString, required = true,
                                 default = nil)
  if valid_571510 != nil:
    section.add "api-version", valid_571510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571511: Call_WebAppsDeleteSourceControlSlot_571503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_571511.validator(path, query, header, formData, body)
  let scheme = call_571511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571511.url(scheme.get, call_571511.host, call_571511.base,
                         call_571511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571511, url, valid)

proc call*(call_571512: Call_WebAppsDeleteSourceControlSlot_571503;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControlSlot
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571513 = newJObject()
  var query_571514 = newJObject()
  add(path_571513, "resourceGroupName", newJString(resourceGroupName))
  add(query_571514, "api-version", newJString(apiVersion))
  add(path_571513, "name", newJString(name))
  add(path_571513, "slot", newJString(slot))
  add(path_571513, "subscriptionId", newJString(subscriptionId))
  result = call_571512.call(path_571513, query_571514, nil, nil, nil)

var webAppsDeleteSourceControlSlot* = Call_WebAppsDeleteSourceControlSlot_571503(
    name: "webAppsDeleteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControlSlot_571504, base: "",
    url: url_WebAppsDeleteSourceControlSlot_571505, schemes: {Scheme.Https})
type
  Call_WebAppsStartSlot_571529 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartSlot_571531(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartSlot_571530(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571532 = path.getOrDefault("resourceGroupName")
  valid_571532 = validateParameter(valid_571532, JString, required = true,
                                 default = nil)
  if valid_571532 != nil:
    section.add "resourceGroupName", valid_571532
  var valid_571533 = path.getOrDefault("name")
  valid_571533 = validateParameter(valid_571533, JString, required = true,
                                 default = nil)
  if valid_571533 != nil:
    section.add "name", valid_571533
  var valid_571534 = path.getOrDefault("slot")
  valid_571534 = validateParameter(valid_571534, JString, required = true,
                                 default = nil)
  if valid_571534 != nil:
    section.add "slot", valid_571534
  var valid_571535 = path.getOrDefault("subscriptionId")
  valid_571535 = validateParameter(valid_571535, JString, required = true,
                                 default = nil)
  if valid_571535 != nil:
    section.add "subscriptionId", valid_571535
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571536 = query.getOrDefault("api-version")
  valid_571536 = validateParameter(valid_571536, JString, required = true,
                                 default = nil)
  if valid_571536 != nil:
    section.add "api-version", valid_571536
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571537: Call_WebAppsStartSlot_571529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_571537.validator(path, query, header, formData, body)
  let scheme = call_571537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571537.url(scheme.get, call_571537.host, call_571537.base,
                         call_571537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571537, url, valid)

proc call*(call_571538: Call_WebAppsStartSlot_571529; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStartSlot
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571539 = newJObject()
  var query_571540 = newJObject()
  add(path_571539, "resourceGroupName", newJString(resourceGroupName))
  add(query_571540, "api-version", newJString(apiVersion))
  add(path_571539, "name", newJString(name))
  add(path_571539, "slot", newJString(slot))
  add(path_571539, "subscriptionId", newJString(subscriptionId))
  result = call_571538.call(path_571539, query_571540, nil, nil, nil)

var webAppsStartSlot* = Call_WebAppsStartSlot_571529(name: "webAppsStartSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_WebAppsStartSlot_571530, base: "",
    url: url_WebAppsStartSlot_571531, schemes: {Scheme.Https})
type
  Call_WebAppsStopSlot_571541 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopSlot_571543(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopSlot_571542(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571544 = path.getOrDefault("resourceGroupName")
  valid_571544 = validateParameter(valid_571544, JString, required = true,
                                 default = nil)
  if valid_571544 != nil:
    section.add "resourceGroupName", valid_571544
  var valid_571545 = path.getOrDefault("name")
  valid_571545 = validateParameter(valid_571545, JString, required = true,
                                 default = nil)
  if valid_571545 != nil:
    section.add "name", valid_571545
  var valid_571546 = path.getOrDefault("slot")
  valid_571546 = validateParameter(valid_571546, JString, required = true,
                                 default = nil)
  if valid_571546 != nil:
    section.add "slot", valid_571546
  var valid_571547 = path.getOrDefault("subscriptionId")
  valid_571547 = validateParameter(valid_571547, JString, required = true,
                                 default = nil)
  if valid_571547 != nil:
    section.add "subscriptionId", valid_571547
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571548 = query.getOrDefault("api-version")
  valid_571548 = validateParameter(valid_571548, JString, required = true,
                                 default = nil)
  if valid_571548 != nil:
    section.add "api-version", valid_571548
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571549: Call_WebAppsStopSlot_571541; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_571549.validator(path, query, header, formData, body)
  let scheme = call_571549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571549.url(scheme.get, call_571549.host, call_571549.base,
                         call_571549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571549, url, valid)

proc call*(call_571550: Call_WebAppsStopSlot_571541; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStopSlot
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571551 = newJObject()
  var query_571552 = newJObject()
  add(path_571551, "resourceGroupName", newJString(resourceGroupName))
  add(query_571552, "api-version", newJString(apiVersion))
  add(path_571551, "name", newJString(name))
  add(path_571551, "slot", newJString(slot))
  add(path_571551, "subscriptionId", newJString(subscriptionId))
  result = call_571550.call(path_571551, query_571552, nil, nil, nil)

var webAppsStopSlot* = Call_WebAppsStopSlot_571541(name: "webAppsStopSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_WebAppsStopSlot_571542, base: "", url: url_WebAppsStopSlot_571543,
    schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepositorySlot_571553 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncRepositorySlot_571555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepositorySlot_571554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571556 = path.getOrDefault("resourceGroupName")
  valid_571556 = validateParameter(valid_571556, JString, required = true,
                                 default = nil)
  if valid_571556 != nil:
    section.add "resourceGroupName", valid_571556
  var valid_571557 = path.getOrDefault("name")
  valid_571557 = validateParameter(valid_571557, JString, required = true,
                                 default = nil)
  if valid_571557 != nil:
    section.add "name", valid_571557
  var valid_571558 = path.getOrDefault("slot")
  valid_571558 = validateParameter(valid_571558, JString, required = true,
                                 default = nil)
  if valid_571558 != nil:
    section.add "slot", valid_571558
  var valid_571559 = path.getOrDefault("subscriptionId")
  valid_571559 = validateParameter(valid_571559, JString, required = true,
                                 default = nil)
  if valid_571559 != nil:
    section.add "subscriptionId", valid_571559
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571560 = query.getOrDefault("api-version")
  valid_571560 = validateParameter(valid_571560, JString, required = true,
                                 default = nil)
  if valid_571560 != nil:
    section.add "api-version", valid_571560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571561: Call_WebAppsSyncRepositorySlot_571553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_571561.validator(path, query, header, formData, body)
  let scheme = call_571561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571561.url(scheme.get, call_571561.host, call_571561.base,
                         call_571561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571561, url, valid)

proc call*(call_571562: Call_WebAppsSyncRepositorySlot_571553;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepositorySlot
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571563 = newJObject()
  var query_571564 = newJObject()
  add(path_571563, "resourceGroupName", newJString(resourceGroupName))
  add(query_571564, "api-version", newJString(apiVersion))
  add(path_571563, "name", newJString(name))
  add(path_571563, "slot", newJString(slot))
  add(path_571563, "subscriptionId", newJString(subscriptionId))
  result = call_571562.call(path_571563, query_571564, nil, nil, nil)

var webAppsSyncRepositorySlot* = Call_WebAppsSyncRepositorySlot_571553(
    name: "webAppsSyncRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_WebAppsSyncRepositorySlot_571554, base: "",
    url: url_WebAppsSyncRepositorySlot_571555, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggersSlot_571565 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncFunctionTriggersSlot_571567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggersSlot_571566(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571568 = path.getOrDefault("resourceGroupName")
  valid_571568 = validateParameter(valid_571568, JString, required = true,
                                 default = nil)
  if valid_571568 != nil:
    section.add "resourceGroupName", valid_571568
  var valid_571569 = path.getOrDefault("name")
  valid_571569 = validateParameter(valid_571569, JString, required = true,
                                 default = nil)
  if valid_571569 != nil:
    section.add "name", valid_571569
  var valid_571570 = path.getOrDefault("slot")
  valid_571570 = validateParameter(valid_571570, JString, required = true,
                                 default = nil)
  if valid_571570 != nil:
    section.add "slot", valid_571570
  var valid_571571 = path.getOrDefault("subscriptionId")
  valid_571571 = validateParameter(valid_571571, JString, required = true,
                                 default = nil)
  if valid_571571 != nil:
    section.add "subscriptionId", valid_571571
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571572 = query.getOrDefault("api-version")
  valid_571572 = validateParameter(valid_571572, JString, required = true,
                                 default = nil)
  if valid_571572 != nil:
    section.add "api-version", valid_571572
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571573: Call_WebAppsSyncFunctionTriggersSlot_571565;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_571573.validator(path, query, header, formData, body)
  let scheme = call_571573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571573.url(scheme.get, call_571573.host, call_571573.base,
                         call_571573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571573, url, valid)

proc call*(call_571574: Call_WebAppsSyncFunctionTriggersSlot_571565;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggersSlot
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571575 = newJObject()
  var query_571576 = newJObject()
  add(path_571575, "resourceGroupName", newJString(resourceGroupName))
  add(query_571576, "api-version", newJString(apiVersion))
  add(path_571575, "name", newJString(name))
  add(path_571575, "slot", newJString(slot))
  add(path_571575, "subscriptionId", newJString(subscriptionId))
  result = call_571574.call(path_571575, query_571576, nil, nil, nil)

var webAppsSyncFunctionTriggersSlot* = Call_WebAppsSyncFunctionTriggersSlot_571565(
    name: "webAppsSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggersSlot_571566, base: "",
    url: url_WebAppsSyncFunctionTriggersSlot_571567, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobsSlot_571577 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobsSlot_571579(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobsSlot_571578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571580 = path.getOrDefault("resourceGroupName")
  valid_571580 = validateParameter(valid_571580, JString, required = true,
                                 default = nil)
  if valid_571580 != nil:
    section.add "resourceGroupName", valid_571580
  var valid_571581 = path.getOrDefault("name")
  valid_571581 = validateParameter(valid_571581, JString, required = true,
                                 default = nil)
  if valid_571581 != nil:
    section.add "name", valid_571581
  var valid_571582 = path.getOrDefault("slot")
  valid_571582 = validateParameter(valid_571582, JString, required = true,
                                 default = nil)
  if valid_571582 != nil:
    section.add "slot", valid_571582
  var valid_571583 = path.getOrDefault("subscriptionId")
  valid_571583 = validateParameter(valid_571583, JString, required = true,
                                 default = nil)
  if valid_571583 != nil:
    section.add "subscriptionId", valid_571583
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571584 = query.getOrDefault("api-version")
  valid_571584 = validateParameter(valid_571584, JString, required = true,
                                 default = nil)
  if valid_571584 != nil:
    section.add "api-version", valid_571584
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571585: Call_WebAppsListTriggeredWebJobsSlot_571577;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_571585.validator(path, query, header, formData, body)
  let scheme = call_571585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571585.url(scheme.get, call_571585.host, call_571585.base,
                         call_571585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571585, url, valid)

proc call*(call_571586: Call_WebAppsListTriggeredWebJobsSlot_571577;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobsSlot
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571587 = newJObject()
  var query_571588 = newJObject()
  add(path_571587, "resourceGroupName", newJString(resourceGroupName))
  add(query_571588, "api-version", newJString(apiVersion))
  add(path_571587, "name", newJString(name))
  add(path_571587, "slot", newJString(slot))
  add(path_571587, "subscriptionId", newJString(subscriptionId))
  result = call_571586.call(path_571587, query_571588, nil, nil, nil)

var webAppsListTriggeredWebJobsSlot* = Call_WebAppsListTriggeredWebJobsSlot_571577(
    name: "webAppsListTriggeredWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobsSlot_571578, base: "",
    url: url_WebAppsListTriggeredWebJobsSlot_571579, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobSlot_571589 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJobSlot_571591(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobSlot_571590(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571592 = path.getOrDefault("resourceGroupName")
  valid_571592 = validateParameter(valid_571592, JString, required = true,
                                 default = nil)
  if valid_571592 != nil:
    section.add "resourceGroupName", valid_571592
  var valid_571593 = path.getOrDefault("name")
  valid_571593 = validateParameter(valid_571593, JString, required = true,
                                 default = nil)
  if valid_571593 != nil:
    section.add "name", valid_571593
  var valid_571594 = path.getOrDefault("slot")
  valid_571594 = validateParameter(valid_571594, JString, required = true,
                                 default = nil)
  if valid_571594 != nil:
    section.add "slot", valid_571594
  var valid_571595 = path.getOrDefault("subscriptionId")
  valid_571595 = validateParameter(valid_571595, JString, required = true,
                                 default = nil)
  if valid_571595 != nil:
    section.add "subscriptionId", valid_571595
  var valid_571596 = path.getOrDefault("webJobName")
  valid_571596 = validateParameter(valid_571596, JString, required = true,
                                 default = nil)
  if valid_571596 != nil:
    section.add "webJobName", valid_571596
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571597 = query.getOrDefault("api-version")
  valid_571597 = validateParameter(valid_571597, JString, required = true,
                                 default = nil)
  if valid_571597 != nil:
    section.add "api-version", valid_571597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571598: Call_WebAppsGetTriggeredWebJobSlot_571589; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_571598.validator(path, query, header, formData, body)
  let scheme = call_571598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571598.url(scheme.get, call_571598.host, call_571598.base,
                         call_571598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571598, url, valid)

proc call*(call_571599: Call_WebAppsGetTriggeredWebJobSlot_571589;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobSlot
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571600 = newJObject()
  var query_571601 = newJObject()
  add(path_571600, "resourceGroupName", newJString(resourceGroupName))
  add(query_571601, "api-version", newJString(apiVersion))
  add(path_571600, "name", newJString(name))
  add(path_571600, "slot", newJString(slot))
  add(path_571600, "subscriptionId", newJString(subscriptionId))
  add(path_571600, "webJobName", newJString(webJobName))
  result = call_571599.call(path_571600, query_571601, nil, nil, nil)

var webAppsGetTriggeredWebJobSlot* = Call_WebAppsGetTriggeredWebJobSlot_571589(
    name: "webAppsGetTriggeredWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJobSlot_571590, base: "",
    url: url_WebAppsGetTriggeredWebJobSlot_571591, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJobSlot_571602 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteTriggeredWebJobSlot_571604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJobSlot_571603(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571605 = path.getOrDefault("resourceGroupName")
  valid_571605 = validateParameter(valid_571605, JString, required = true,
                                 default = nil)
  if valid_571605 != nil:
    section.add "resourceGroupName", valid_571605
  var valid_571606 = path.getOrDefault("name")
  valid_571606 = validateParameter(valid_571606, JString, required = true,
                                 default = nil)
  if valid_571606 != nil:
    section.add "name", valid_571606
  var valid_571607 = path.getOrDefault("slot")
  valid_571607 = validateParameter(valid_571607, JString, required = true,
                                 default = nil)
  if valid_571607 != nil:
    section.add "slot", valid_571607
  var valid_571608 = path.getOrDefault("subscriptionId")
  valid_571608 = validateParameter(valid_571608, JString, required = true,
                                 default = nil)
  if valid_571608 != nil:
    section.add "subscriptionId", valid_571608
  var valid_571609 = path.getOrDefault("webJobName")
  valid_571609 = validateParameter(valid_571609, JString, required = true,
                                 default = nil)
  if valid_571609 != nil:
    section.add "webJobName", valid_571609
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571610 = query.getOrDefault("api-version")
  valid_571610 = validateParameter(valid_571610, JString, required = true,
                                 default = nil)
  if valid_571610 != nil:
    section.add "api-version", valid_571610
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571611: Call_WebAppsDeleteTriggeredWebJobSlot_571602;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_571611.validator(path, query, header, formData, body)
  let scheme = call_571611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571611.url(scheme.get, call_571611.host, call_571611.base,
                         call_571611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571611, url, valid)

proc call*(call_571612: Call_WebAppsDeleteTriggeredWebJobSlot_571602;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJobSlot
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571613 = newJObject()
  var query_571614 = newJObject()
  add(path_571613, "resourceGroupName", newJString(resourceGroupName))
  add(query_571614, "api-version", newJString(apiVersion))
  add(path_571613, "name", newJString(name))
  add(path_571613, "slot", newJString(slot))
  add(path_571613, "subscriptionId", newJString(subscriptionId))
  add(path_571613, "webJobName", newJString(webJobName))
  result = call_571612.call(path_571613, query_571614, nil, nil, nil)

var webAppsDeleteTriggeredWebJobSlot* = Call_WebAppsDeleteTriggeredWebJobSlot_571602(
    name: "webAppsDeleteTriggeredWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJobSlot_571603, base: "",
    url: url_WebAppsDeleteTriggeredWebJobSlot_571604, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistorySlot_571615 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobHistorySlot_571617(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistorySlot_571616(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571618 = path.getOrDefault("resourceGroupName")
  valid_571618 = validateParameter(valid_571618, JString, required = true,
                                 default = nil)
  if valid_571618 != nil:
    section.add "resourceGroupName", valid_571618
  var valid_571619 = path.getOrDefault("name")
  valid_571619 = validateParameter(valid_571619, JString, required = true,
                                 default = nil)
  if valid_571619 != nil:
    section.add "name", valid_571619
  var valid_571620 = path.getOrDefault("slot")
  valid_571620 = validateParameter(valid_571620, JString, required = true,
                                 default = nil)
  if valid_571620 != nil:
    section.add "slot", valid_571620
  var valid_571621 = path.getOrDefault("subscriptionId")
  valid_571621 = validateParameter(valid_571621, JString, required = true,
                                 default = nil)
  if valid_571621 != nil:
    section.add "subscriptionId", valid_571621
  var valid_571622 = path.getOrDefault("webJobName")
  valid_571622 = validateParameter(valid_571622, JString, required = true,
                                 default = nil)
  if valid_571622 != nil:
    section.add "webJobName", valid_571622
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571623 = query.getOrDefault("api-version")
  valid_571623 = validateParameter(valid_571623, JString, required = true,
                                 default = nil)
  if valid_571623 != nil:
    section.add "api-version", valid_571623
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571624: Call_WebAppsListTriggeredWebJobHistorySlot_571615;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_571624.validator(path, query, header, formData, body)
  let scheme = call_571624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571624.url(scheme.get, call_571624.host, call_571624.base,
                         call_571624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571624, url, valid)

proc call*(call_571625: Call_WebAppsListTriggeredWebJobHistorySlot_571615;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistorySlot
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571626 = newJObject()
  var query_571627 = newJObject()
  add(path_571626, "resourceGroupName", newJString(resourceGroupName))
  add(query_571627, "api-version", newJString(apiVersion))
  add(path_571626, "name", newJString(name))
  add(path_571626, "slot", newJString(slot))
  add(path_571626, "subscriptionId", newJString(subscriptionId))
  add(path_571626, "webJobName", newJString(webJobName))
  result = call_571625.call(path_571626, query_571627, nil, nil, nil)

var webAppsListTriggeredWebJobHistorySlot* = Call_WebAppsListTriggeredWebJobHistorySlot_571615(
    name: "webAppsListTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistorySlot_571616, base: "",
    url: url_WebAppsListTriggeredWebJobHistorySlot_571617, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistorySlot_571628 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJobHistorySlot_571630(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistorySlot_571629(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571631 = path.getOrDefault("resourceGroupName")
  valid_571631 = validateParameter(valid_571631, JString, required = true,
                                 default = nil)
  if valid_571631 != nil:
    section.add "resourceGroupName", valid_571631
  var valid_571632 = path.getOrDefault("name")
  valid_571632 = validateParameter(valid_571632, JString, required = true,
                                 default = nil)
  if valid_571632 != nil:
    section.add "name", valid_571632
  var valid_571633 = path.getOrDefault("slot")
  valid_571633 = validateParameter(valid_571633, JString, required = true,
                                 default = nil)
  if valid_571633 != nil:
    section.add "slot", valid_571633
  var valid_571634 = path.getOrDefault("subscriptionId")
  valid_571634 = validateParameter(valid_571634, JString, required = true,
                                 default = nil)
  if valid_571634 != nil:
    section.add "subscriptionId", valid_571634
  var valid_571635 = path.getOrDefault("id")
  valid_571635 = validateParameter(valid_571635, JString, required = true,
                                 default = nil)
  if valid_571635 != nil:
    section.add "id", valid_571635
  var valid_571636 = path.getOrDefault("webJobName")
  valid_571636 = validateParameter(valid_571636, JString, required = true,
                                 default = nil)
  if valid_571636 != nil:
    section.add "webJobName", valid_571636
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571637 = query.getOrDefault("api-version")
  valid_571637 = validateParameter(valid_571637, JString, required = true,
                                 default = nil)
  if valid_571637 != nil:
    section.add "api-version", valid_571637
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571638: Call_WebAppsGetTriggeredWebJobHistorySlot_571628;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_571638.validator(path, query, header, formData, body)
  let scheme = call_571638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571638.url(scheme.get, call_571638.host, call_571638.base,
                         call_571638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571638, url, valid)

proc call*(call_571639: Call_WebAppsGetTriggeredWebJobHistorySlot_571628;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistorySlot
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571640 = newJObject()
  var query_571641 = newJObject()
  add(path_571640, "resourceGroupName", newJString(resourceGroupName))
  add(query_571641, "api-version", newJString(apiVersion))
  add(path_571640, "name", newJString(name))
  add(path_571640, "slot", newJString(slot))
  add(path_571640, "subscriptionId", newJString(subscriptionId))
  add(path_571640, "id", newJString(id))
  add(path_571640, "webJobName", newJString(webJobName))
  result = call_571639.call(path_571640, query_571641, nil, nil, nil)

var webAppsGetTriggeredWebJobHistorySlot* = Call_WebAppsGetTriggeredWebJobHistorySlot_571628(
    name: "webAppsGetTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistorySlot_571629, base: "",
    url: url_WebAppsGetTriggeredWebJobHistorySlot_571630, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJobSlot_571642 = ref object of OpenApiRestCall_567666
proc url_WebAppsRunTriggeredWebJobSlot_571644(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJobSlot_571643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571645 = path.getOrDefault("resourceGroupName")
  valid_571645 = validateParameter(valid_571645, JString, required = true,
                                 default = nil)
  if valid_571645 != nil:
    section.add "resourceGroupName", valid_571645
  var valid_571646 = path.getOrDefault("name")
  valid_571646 = validateParameter(valid_571646, JString, required = true,
                                 default = nil)
  if valid_571646 != nil:
    section.add "name", valid_571646
  var valid_571647 = path.getOrDefault("slot")
  valid_571647 = validateParameter(valid_571647, JString, required = true,
                                 default = nil)
  if valid_571647 != nil:
    section.add "slot", valid_571647
  var valid_571648 = path.getOrDefault("subscriptionId")
  valid_571648 = validateParameter(valid_571648, JString, required = true,
                                 default = nil)
  if valid_571648 != nil:
    section.add "subscriptionId", valid_571648
  var valid_571649 = path.getOrDefault("webJobName")
  valid_571649 = validateParameter(valid_571649, JString, required = true,
                                 default = nil)
  if valid_571649 != nil:
    section.add "webJobName", valid_571649
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571650 = query.getOrDefault("api-version")
  valid_571650 = validateParameter(valid_571650, JString, required = true,
                                 default = nil)
  if valid_571650 != nil:
    section.add "api-version", valid_571650
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571651: Call_WebAppsRunTriggeredWebJobSlot_571642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_571651.validator(path, query, header, formData, body)
  let scheme = call_571651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571651.url(scheme.get, call_571651.host, call_571651.base,
                         call_571651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571651, url, valid)

proc call*(call_571652: Call_WebAppsRunTriggeredWebJobSlot_571642;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJobSlot
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571653 = newJObject()
  var query_571654 = newJObject()
  add(path_571653, "resourceGroupName", newJString(resourceGroupName))
  add(query_571654, "api-version", newJString(apiVersion))
  add(path_571653, "name", newJString(name))
  add(path_571653, "slot", newJString(slot))
  add(path_571653, "subscriptionId", newJString(subscriptionId))
  add(path_571653, "webJobName", newJString(webJobName))
  result = call_571652.call(path_571653, query_571654, nil, nil, nil)

var webAppsRunTriggeredWebJobSlot* = Call_WebAppsRunTriggeredWebJobSlot_571642(
    name: "webAppsRunTriggeredWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJobSlot_571643, base: "",
    url: url_WebAppsRunTriggeredWebJobSlot_571644, schemes: {Scheme.Https})
type
  Call_WebAppsListUsagesSlot_571655 = ref object of OpenApiRestCall_567666
proc url_WebAppsListUsagesSlot_571657(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsagesSlot_571656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571658 = path.getOrDefault("resourceGroupName")
  valid_571658 = validateParameter(valid_571658, JString, required = true,
                                 default = nil)
  if valid_571658 != nil:
    section.add "resourceGroupName", valid_571658
  var valid_571659 = path.getOrDefault("name")
  valid_571659 = validateParameter(valid_571659, JString, required = true,
                                 default = nil)
  if valid_571659 != nil:
    section.add "name", valid_571659
  var valid_571660 = path.getOrDefault("slot")
  valid_571660 = validateParameter(valid_571660, JString, required = true,
                                 default = nil)
  if valid_571660 != nil:
    section.add "slot", valid_571660
  var valid_571661 = path.getOrDefault("subscriptionId")
  valid_571661 = validateParameter(valid_571661, JString, required = true,
                                 default = nil)
  if valid_571661 != nil:
    section.add "subscriptionId", valid_571661
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571662 = query.getOrDefault("api-version")
  valid_571662 = validateParameter(valid_571662, JString, required = true,
                                 default = nil)
  if valid_571662 != nil:
    section.add "api-version", valid_571662
  var valid_571663 = query.getOrDefault("$filter")
  valid_571663 = validateParameter(valid_571663, JString, required = false,
                                 default = nil)
  if valid_571663 != nil:
    section.add "$filter", valid_571663
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571664: Call_WebAppsListUsagesSlot_571655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_571664.validator(path, query, header, formData, body)
  let scheme = call_571664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571664.url(scheme.get, call_571664.host, call_571664.base,
                         call_571664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571664, url, valid)

proc call*(call_571665: Call_WebAppsListUsagesSlot_571655;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListUsagesSlot
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571666 = newJObject()
  var query_571667 = newJObject()
  add(path_571666, "resourceGroupName", newJString(resourceGroupName))
  add(query_571667, "api-version", newJString(apiVersion))
  add(path_571666, "name", newJString(name))
  add(path_571666, "slot", newJString(slot))
  add(path_571666, "subscriptionId", newJString(subscriptionId))
  add(query_571667, "$filter", newJString(Filter))
  result = call_571665.call(path_571666, query_571667, nil, nil, nil)

var webAppsListUsagesSlot* = Call_WebAppsListUsagesSlot_571655(
    name: "webAppsListUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_WebAppsListUsagesSlot_571656, base: "",
    url: url_WebAppsListUsagesSlot_571657, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnectionsSlot_571668 = ref object of OpenApiRestCall_567666
proc url_WebAppsListVnetConnectionsSlot_571670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnectionsSlot_571669(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571671 = path.getOrDefault("resourceGroupName")
  valid_571671 = validateParameter(valid_571671, JString, required = true,
                                 default = nil)
  if valid_571671 != nil:
    section.add "resourceGroupName", valid_571671
  var valid_571672 = path.getOrDefault("name")
  valid_571672 = validateParameter(valid_571672, JString, required = true,
                                 default = nil)
  if valid_571672 != nil:
    section.add "name", valid_571672
  var valid_571673 = path.getOrDefault("slot")
  valid_571673 = validateParameter(valid_571673, JString, required = true,
                                 default = nil)
  if valid_571673 != nil:
    section.add "slot", valid_571673
  var valid_571674 = path.getOrDefault("subscriptionId")
  valid_571674 = validateParameter(valid_571674, JString, required = true,
                                 default = nil)
  if valid_571674 != nil:
    section.add "subscriptionId", valid_571674
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571675 = query.getOrDefault("api-version")
  valid_571675 = validateParameter(valid_571675, JString, required = true,
                                 default = nil)
  if valid_571675 != nil:
    section.add "api-version", valid_571675
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571676: Call_WebAppsListVnetConnectionsSlot_571668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_571676.validator(path, query, header, formData, body)
  let scheme = call_571676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571676.url(scheme.get, call_571676.host, call_571676.base,
                         call_571676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571676, url, valid)

proc call*(call_571677: Call_WebAppsListVnetConnectionsSlot_571668;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnectionsSlot
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571678 = newJObject()
  var query_571679 = newJObject()
  add(path_571678, "resourceGroupName", newJString(resourceGroupName))
  add(query_571679, "api-version", newJString(apiVersion))
  add(path_571678, "name", newJString(name))
  add(path_571678, "slot", newJString(slot))
  add(path_571678, "subscriptionId", newJString(subscriptionId))
  result = call_571677.call(path_571678, query_571679, nil, nil, nil)

var webAppsListVnetConnectionsSlot* = Call_WebAppsListVnetConnectionsSlot_571668(
    name: "webAppsListVnetConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnectionsSlot_571669, base: "",
    url: url_WebAppsListVnetConnectionsSlot_571670, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionSlot_571693 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnectionSlot_571695(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionSlot_571694(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571696 = path.getOrDefault("resourceGroupName")
  valid_571696 = validateParameter(valid_571696, JString, required = true,
                                 default = nil)
  if valid_571696 != nil:
    section.add "resourceGroupName", valid_571696
  var valid_571697 = path.getOrDefault("name")
  valid_571697 = validateParameter(valid_571697, JString, required = true,
                                 default = nil)
  if valid_571697 != nil:
    section.add "name", valid_571697
  var valid_571698 = path.getOrDefault("vnetName")
  valid_571698 = validateParameter(valid_571698, JString, required = true,
                                 default = nil)
  if valid_571698 != nil:
    section.add "vnetName", valid_571698
  var valid_571699 = path.getOrDefault("slot")
  valid_571699 = validateParameter(valid_571699, JString, required = true,
                                 default = nil)
  if valid_571699 != nil:
    section.add "slot", valid_571699
  var valid_571700 = path.getOrDefault("subscriptionId")
  valid_571700 = validateParameter(valid_571700, JString, required = true,
                                 default = nil)
  if valid_571700 != nil:
    section.add "subscriptionId", valid_571700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571701 = query.getOrDefault("api-version")
  valid_571701 = validateParameter(valid_571701, JString, required = true,
                                 default = nil)
  if valid_571701 != nil:
    section.add "api-version", valid_571701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571703: Call_WebAppsCreateOrUpdateVnetConnectionSlot_571693;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_571703.validator(path, query, header, formData, body)
  let scheme = call_571703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571703.url(scheme.get, call_571703.host, call_571703.base,
                         call_571703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571703, url, valid)

proc call*(call_571704: Call_WebAppsCreateOrUpdateVnetConnectionSlot_571693;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571705 = newJObject()
  var query_571706 = newJObject()
  var body_571707 = newJObject()
  add(path_571705, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571707 = connectionEnvelope
  add(path_571705, "name", newJString(name))
  add(path_571705, "vnetName", newJString(vnetName))
  add(query_571706, "api-version", newJString(apiVersion))
  add(path_571705, "slot", newJString(slot))
  add(path_571705, "subscriptionId", newJString(subscriptionId))
  result = call_571704.call(path_571705, query_571706, nil, nil, body_571707)

var webAppsCreateOrUpdateVnetConnectionSlot* = Call_WebAppsCreateOrUpdateVnetConnectionSlot_571693(
    name: "webAppsCreateOrUpdateVnetConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionSlot_571694, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnectionSlot_571695,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionSlot_571680 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnectionSlot_571682(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionSlot_571681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571683 = path.getOrDefault("resourceGroupName")
  valid_571683 = validateParameter(valid_571683, JString, required = true,
                                 default = nil)
  if valid_571683 != nil:
    section.add "resourceGroupName", valid_571683
  var valid_571684 = path.getOrDefault("name")
  valid_571684 = validateParameter(valid_571684, JString, required = true,
                                 default = nil)
  if valid_571684 != nil:
    section.add "name", valid_571684
  var valid_571685 = path.getOrDefault("vnetName")
  valid_571685 = validateParameter(valid_571685, JString, required = true,
                                 default = nil)
  if valid_571685 != nil:
    section.add "vnetName", valid_571685
  var valid_571686 = path.getOrDefault("slot")
  valid_571686 = validateParameter(valid_571686, JString, required = true,
                                 default = nil)
  if valid_571686 != nil:
    section.add "slot", valid_571686
  var valid_571687 = path.getOrDefault("subscriptionId")
  valid_571687 = validateParameter(valid_571687, JString, required = true,
                                 default = nil)
  if valid_571687 != nil:
    section.add "subscriptionId", valid_571687
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571688 = query.getOrDefault("api-version")
  valid_571688 = validateParameter(valid_571688, JString, required = true,
                                 default = nil)
  if valid_571688 != nil:
    section.add "api-version", valid_571688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571689: Call_WebAppsGetVnetConnectionSlot_571680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_571689.validator(path, query, header, formData, body)
  let scheme = call_571689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571689.url(scheme.get, call_571689.host, call_571689.base,
                         call_571689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571689, url, valid)

proc call*(call_571690: Call_WebAppsGetVnetConnectionSlot_571680;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionSlot
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571691 = newJObject()
  var query_571692 = newJObject()
  add(path_571691, "resourceGroupName", newJString(resourceGroupName))
  add(query_571692, "api-version", newJString(apiVersion))
  add(path_571691, "name", newJString(name))
  add(path_571691, "vnetName", newJString(vnetName))
  add(path_571691, "slot", newJString(slot))
  add(path_571691, "subscriptionId", newJString(subscriptionId))
  result = call_571690.call(path_571691, query_571692, nil, nil, nil)

var webAppsGetVnetConnectionSlot* = Call_WebAppsGetVnetConnectionSlot_571680(
    name: "webAppsGetVnetConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnectionSlot_571681, base: "",
    url: url_WebAppsGetVnetConnectionSlot_571682, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionSlot_571721 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnectionSlot_571723(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionSlot_571722(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571724 = path.getOrDefault("resourceGroupName")
  valid_571724 = validateParameter(valid_571724, JString, required = true,
                                 default = nil)
  if valid_571724 != nil:
    section.add "resourceGroupName", valid_571724
  var valid_571725 = path.getOrDefault("name")
  valid_571725 = validateParameter(valid_571725, JString, required = true,
                                 default = nil)
  if valid_571725 != nil:
    section.add "name", valid_571725
  var valid_571726 = path.getOrDefault("vnetName")
  valid_571726 = validateParameter(valid_571726, JString, required = true,
                                 default = nil)
  if valid_571726 != nil:
    section.add "vnetName", valid_571726
  var valid_571727 = path.getOrDefault("slot")
  valid_571727 = validateParameter(valid_571727, JString, required = true,
                                 default = nil)
  if valid_571727 != nil:
    section.add "slot", valid_571727
  var valid_571728 = path.getOrDefault("subscriptionId")
  valid_571728 = validateParameter(valid_571728, JString, required = true,
                                 default = nil)
  if valid_571728 != nil:
    section.add "subscriptionId", valid_571728
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571729 = query.getOrDefault("api-version")
  valid_571729 = validateParameter(valid_571729, JString, required = true,
                                 default = nil)
  if valid_571729 != nil:
    section.add "api-version", valid_571729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571731: Call_WebAppsUpdateVnetConnectionSlot_571721;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_571731.validator(path, query, header, formData, body)
  let scheme = call_571731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571731.url(scheme.get, call_571731.host, call_571731.base,
                         call_571731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571731, url, valid)

proc call*(call_571732: Call_WebAppsUpdateVnetConnectionSlot_571721;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571733 = newJObject()
  var query_571734 = newJObject()
  var body_571735 = newJObject()
  add(path_571733, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571735 = connectionEnvelope
  add(path_571733, "name", newJString(name))
  add(path_571733, "vnetName", newJString(vnetName))
  add(query_571734, "api-version", newJString(apiVersion))
  add(path_571733, "slot", newJString(slot))
  add(path_571733, "subscriptionId", newJString(subscriptionId))
  result = call_571732.call(path_571733, query_571734, nil, nil, body_571735)

var webAppsUpdateVnetConnectionSlot* = Call_WebAppsUpdateVnetConnectionSlot_571721(
    name: "webAppsUpdateVnetConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnectionSlot_571722, base: "",
    url: url_WebAppsUpdateVnetConnectionSlot_571723, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnectionSlot_571708 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteVnetConnectionSlot_571710(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnectionSlot_571709(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571711 = path.getOrDefault("resourceGroupName")
  valid_571711 = validateParameter(valid_571711, JString, required = true,
                                 default = nil)
  if valid_571711 != nil:
    section.add "resourceGroupName", valid_571711
  var valid_571712 = path.getOrDefault("name")
  valid_571712 = validateParameter(valid_571712, JString, required = true,
                                 default = nil)
  if valid_571712 != nil:
    section.add "name", valid_571712
  var valid_571713 = path.getOrDefault("vnetName")
  valid_571713 = validateParameter(valid_571713, JString, required = true,
                                 default = nil)
  if valid_571713 != nil:
    section.add "vnetName", valid_571713
  var valid_571714 = path.getOrDefault("slot")
  valid_571714 = validateParameter(valid_571714, JString, required = true,
                                 default = nil)
  if valid_571714 != nil:
    section.add "slot", valid_571714
  var valid_571715 = path.getOrDefault("subscriptionId")
  valid_571715 = validateParameter(valid_571715, JString, required = true,
                                 default = nil)
  if valid_571715 != nil:
    section.add "subscriptionId", valid_571715
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571716 = query.getOrDefault("api-version")
  valid_571716 = validateParameter(valid_571716, JString, required = true,
                                 default = nil)
  if valid_571716 != nil:
    section.add "api-version", valid_571716
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571717: Call_WebAppsDeleteVnetConnectionSlot_571708;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_571717.validator(path, query, header, formData, body)
  let scheme = call_571717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571717.url(scheme.get, call_571717.host, call_571717.base,
                         call_571717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571717, url, valid)

proc call*(call_571718: Call_WebAppsDeleteVnetConnectionSlot_571708;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnectionSlot
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571719 = newJObject()
  var query_571720 = newJObject()
  add(path_571719, "resourceGroupName", newJString(resourceGroupName))
  add(query_571720, "api-version", newJString(apiVersion))
  add(path_571719, "name", newJString(name))
  add(path_571719, "vnetName", newJString(vnetName))
  add(path_571719, "slot", newJString(slot))
  add(path_571719, "subscriptionId", newJString(subscriptionId))
  result = call_571718.call(path_571719, query_571720, nil, nil, nil)

var webAppsDeleteVnetConnectionSlot* = Call_WebAppsDeleteVnetConnectionSlot_571708(
    name: "webAppsDeleteVnetConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnectionSlot_571709, base: "",
    url: url_WebAppsDeleteVnetConnectionSlot_571710, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571750 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571752(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571751(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571753 = path.getOrDefault("resourceGroupName")
  valid_571753 = validateParameter(valid_571753, JString, required = true,
                                 default = nil)
  if valid_571753 != nil:
    section.add "resourceGroupName", valid_571753
  var valid_571754 = path.getOrDefault("name")
  valid_571754 = validateParameter(valid_571754, JString, required = true,
                                 default = nil)
  if valid_571754 != nil:
    section.add "name", valid_571754
  var valid_571755 = path.getOrDefault("vnetName")
  valid_571755 = validateParameter(valid_571755, JString, required = true,
                                 default = nil)
  if valid_571755 != nil:
    section.add "vnetName", valid_571755
  var valid_571756 = path.getOrDefault("slot")
  valid_571756 = validateParameter(valid_571756, JString, required = true,
                                 default = nil)
  if valid_571756 != nil:
    section.add "slot", valid_571756
  var valid_571757 = path.getOrDefault("gatewayName")
  valid_571757 = validateParameter(valid_571757, JString, required = true,
                                 default = nil)
  if valid_571757 != nil:
    section.add "gatewayName", valid_571757
  var valid_571758 = path.getOrDefault("subscriptionId")
  valid_571758 = validateParameter(valid_571758, JString, required = true,
                                 default = nil)
  if valid_571758 != nil:
    section.add "subscriptionId", valid_571758
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571759 = query.getOrDefault("api-version")
  valid_571759 = validateParameter(valid_571759, JString, required = true,
                                 default = nil)
  if valid_571759 != nil:
    section.add "api-version", valid_571759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571761: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571750;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_571761.validator(path, query, header, formData, body)
  let scheme = call_571761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571761.url(scheme.get, call_571761.host, call_571761.base,
                         call_571761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571761, url, valid)

proc call*(call_571762: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571750;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571763 = newJObject()
  var query_571764 = newJObject()
  var body_571765 = newJObject()
  add(path_571763, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571765 = connectionEnvelope
  add(path_571763, "name", newJString(name))
  add(path_571763, "vnetName", newJString(vnetName))
  add(query_571764, "api-version", newJString(apiVersion))
  add(path_571763, "slot", newJString(slot))
  add(path_571763, "gatewayName", newJString(gatewayName))
  add(path_571763, "subscriptionId", newJString(subscriptionId))
  result = call_571762.call(path_571763, query_571764, nil, nil, body_571765)

var webAppsCreateOrUpdateVnetConnectionGatewaySlot* = Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571750(
    name: "webAppsCreateOrUpdateVnetConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571751,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_571752,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGatewaySlot_571736 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnectionGatewaySlot_571738(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGatewaySlot_571737(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571739 = path.getOrDefault("resourceGroupName")
  valid_571739 = validateParameter(valid_571739, JString, required = true,
                                 default = nil)
  if valid_571739 != nil:
    section.add "resourceGroupName", valid_571739
  var valid_571740 = path.getOrDefault("name")
  valid_571740 = validateParameter(valid_571740, JString, required = true,
                                 default = nil)
  if valid_571740 != nil:
    section.add "name", valid_571740
  var valid_571741 = path.getOrDefault("vnetName")
  valid_571741 = validateParameter(valid_571741, JString, required = true,
                                 default = nil)
  if valid_571741 != nil:
    section.add "vnetName", valid_571741
  var valid_571742 = path.getOrDefault("slot")
  valid_571742 = validateParameter(valid_571742, JString, required = true,
                                 default = nil)
  if valid_571742 != nil:
    section.add "slot", valid_571742
  var valid_571743 = path.getOrDefault("gatewayName")
  valid_571743 = validateParameter(valid_571743, JString, required = true,
                                 default = nil)
  if valid_571743 != nil:
    section.add "gatewayName", valid_571743
  var valid_571744 = path.getOrDefault("subscriptionId")
  valid_571744 = validateParameter(valid_571744, JString, required = true,
                                 default = nil)
  if valid_571744 != nil:
    section.add "subscriptionId", valid_571744
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571745 = query.getOrDefault("api-version")
  valid_571745 = validateParameter(valid_571745, JString, required = true,
                                 default = nil)
  if valid_571745 != nil:
    section.add "api-version", valid_571745
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571746: Call_WebAppsGetVnetConnectionGatewaySlot_571736;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_571746.validator(path, query, header, formData, body)
  let scheme = call_571746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571746.url(scheme.get, call_571746.host, call_571746.base,
                         call_571746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571746, url, valid)

proc call*(call_571747: Call_WebAppsGetVnetConnectionGatewaySlot_571736;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGatewaySlot
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571748 = newJObject()
  var query_571749 = newJObject()
  add(path_571748, "resourceGroupName", newJString(resourceGroupName))
  add(query_571749, "api-version", newJString(apiVersion))
  add(path_571748, "name", newJString(name))
  add(path_571748, "vnetName", newJString(vnetName))
  add(path_571748, "slot", newJString(slot))
  add(path_571748, "gatewayName", newJString(gatewayName))
  add(path_571748, "subscriptionId", newJString(subscriptionId))
  result = call_571747.call(path_571748, query_571749, nil, nil, nil)

var webAppsGetVnetConnectionGatewaySlot* = Call_WebAppsGetVnetConnectionGatewaySlot_571736(
    name: "webAppsGetVnetConnectionGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGatewaySlot_571737, base: "",
    url: url_WebAppsGetVnetConnectionGatewaySlot_571738, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGatewaySlot_571766 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnectionGatewaySlot_571768(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGatewaySlot_571767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571769 = path.getOrDefault("resourceGroupName")
  valid_571769 = validateParameter(valid_571769, JString, required = true,
                                 default = nil)
  if valid_571769 != nil:
    section.add "resourceGroupName", valid_571769
  var valid_571770 = path.getOrDefault("name")
  valid_571770 = validateParameter(valid_571770, JString, required = true,
                                 default = nil)
  if valid_571770 != nil:
    section.add "name", valid_571770
  var valid_571771 = path.getOrDefault("vnetName")
  valid_571771 = validateParameter(valid_571771, JString, required = true,
                                 default = nil)
  if valid_571771 != nil:
    section.add "vnetName", valid_571771
  var valid_571772 = path.getOrDefault("slot")
  valid_571772 = validateParameter(valid_571772, JString, required = true,
                                 default = nil)
  if valid_571772 != nil:
    section.add "slot", valid_571772
  var valid_571773 = path.getOrDefault("gatewayName")
  valid_571773 = validateParameter(valid_571773, JString, required = true,
                                 default = nil)
  if valid_571773 != nil:
    section.add "gatewayName", valid_571773
  var valid_571774 = path.getOrDefault("subscriptionId")
  valid_571774 = validateParameter(valid_571774, JString, required = true,
                                 default = nil)
  if valid_571774 != nil:
    section.add "subscriptionId", valid_571774
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571775 = query.getOrDefault("api-version")
  valid_571775 = validateParameter(valid_571775, JString, required = true,
                                 default = nil)
  if valid_571775 != nil:
    section.add "api-version", valid_571775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571777: Call_WebAppsUpdateVnetConnectionGatewaySlot_571766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_571777.validator(path, query, header, formData, body)
  let scheme = call_571777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571777.url(scheme.get, call_571777.host, call_571777.base,
                         call_571777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571777, url, valid)

proc call*(call_571778: Call_WebAppsUpdateVnetConnectionGatewaySlot_571766;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571779 = newJObject()
  var query_571780 = newJObject()
  var body_571781 = newJObject()
  add(path_571779, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571781 = connectionEnvelope
  add(path_571779, "name", newJString(name))
  add(path_571779, "vnetName", newJString(vnetName))
  add(query_571780, "api-version", newJString(apiVersion))
  add(path_571779, "slot", newJString(slot))
  add(path_571779, "gatewayName", newJString(gatewayName))
  add(path_571779, "subscriptionId", newJString(subscriptionId))
  result = call_571778.call(path_571779, query_571780, nil, nil, body_571781)

var webAppsUpdateVnetConnectionGatewaySlot* = Call_WebAppsUpdateVnetConnectionGatewaySlot_571766(
    name: "webAppsUpdateVnetConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGatewaySlot_571767, base: "",
    url: url_WebAppsUpdateVnetConnectionGatewaySlot_571768,
    schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobsSlot_571782 = ref object of OpenApiRestCall_567666
proc url_WebAppsListWebJobsSlot_571784(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobsSlot_571783(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571785 = path.getOrDefault("resourceGroupName")
  valid_571785 = validateParameter(valid_571785, JString, required = true,
                                 default = nil)
  if valid_571785 != nil:
    section.add "resourceGroupName", valid_571785
  var valid_571786 = path.getOrDefault("name")
  valid_571786 = validateParameter(valid_571786, JString, required = true,
                                 default = nil)
  if valid_571786 != nil:
    section.add "name", valid_571786
  var valid_571787 = path.getOrDefault("slot")
  valid_571787 = validateParameter(valid_571787, JString, required = true,
                                 default = nil)
  if valid_571787 != nil:
    section.add "slot", valid_571787
  var valid_571788 = path.getOrDefault("subscriptionId")
  valid_571788 = validateParameter(valid_571788, JString, required = true,
                                 default = nil)
  if valid_571788 != nil:
    section.add "subscriptionId", valid_571788
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571789 = query.getOrDefault("api-version")
  valid_571789 = validateParameter(valid_571789, JString, required = true,
                                 default = nil)
  if valid_571789 != nil:
    section.add "api-version", valid_571789
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571790: Call_WebAppsListWebJobsSlot_571782; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_571790.validator(path, query, header, formData, body)
  let scheme = call_571790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571790.url(scheme.get, call_571790.host, call_571790.base,
                         call_571790.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571790, url, valid)

proc call*(call_571791: Call_WebAppsListWebJobsSlot_571782;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListWebJobsSlot
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571792 = newJObject()
  var query_571793 = newJObject()
  add(path_571792, "resourceGroupName", newJString(resourceGroupName))
  add(query_571793, "api-version", newJString(apiVersion))
  add(path_571792, "name", newJString(name))
  add(path_571792, "slot", newJString(slot))
  add(path_571792, "subscriptionId", newJString(subscriptionId))
  result = call_571791.call(path_571792, query_571793, nil, nil, nil)

var webAppsListWebJobsSlot* = Call_WebAppsListWebJobsSlot_571782(
    name: "webAppsListWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    validator: validate_WebAppsListWebJobsSlot_571783, base: "",
    url: url_WebAppsListWebJobsSlot_571784, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJobSlot_571794 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebJobSlot_571796(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJobSlot_571795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571797 = path.getOrDefault("resourceGroupName")
  valid_571797 = validateParameter(valid_571797, JString, required = true,
                                 default = nil)
  if valid_571797 != nil:
    section.add "resourceGroupName", valid_571797
  var valid_571798 = path.getOrDefault("name")
  valid_571798 = validateParameter(valid_571798, JString, required = true,
                                 default = nil)
  if valid_571798 != nil:
    section.add "name", valid_571798
  var valid_571799 = path.getOrDefault("slot")
  valid_571799 = validateParameter(valid_571799, JString, required = true,
                                 default = nil)
  if valid_571799 != nil:
    section.add "slot", valid_571799
  var valid_571800 = path.getOrDefault("subscriptionId")
  valid_571800 = validateParameter(valid_571800, JString, required = true,
                                 default = nil)
  if valid_571800 != nil:
    section.add "subscriptionId", valid_571800
  var valid_571801 = path.getOrDefault("webJobName")
  valid_571801 = validateParameter(valid_571801, JString, required = true,
                                 default = nil)
  if valid_571801 != nil:
    section.add "webJobName", valid_571801
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571802 = query.getOrDefault("api-version")
  valid_571802 = validateParameter(valid_571802, JString, required = true,
                                 default = nil)
  if valid_571802 != nil:
    section.add "api-version", valid_571802
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571803: Call_WebAppsGetWebJobSlot_571794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_571803.validator(path, query, header, formData, body)
  let scheme = call_571803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571803.url(scheme.get, call_571803.host, call_571803.base,
                         call_571803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571803, url, valid)

proc call*(call_571804: Call_WebAppsGetWebJobSlot_571794;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJobSlot
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_571805 = newJObject()
  var query_571806 = newJObject()
  add(path_571805, "resourceGroupName", newJString(resourceGroupName))
  add(query_571806, "api-version", newJString(apiVersion))
  add(path_571805, "name", newJString(name))
  add(path_571805, "slot", newJString(slot))
  add(path_571805, "subscriptionId", newJString(subscriptionId))
  add(path_571805, "webJobName", newJString(webJobName))
  result = call_571804.call(path_571805, query_571806, nil, nil, nil)

var webAppsGetWebJobSlot* = Call_WebAppsGetWebJobSlot_571794(
    name: "webAppsGetWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJobSlot_571795, base: "",
    url: url_WebAppsGetWebJobSlot_571796, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesFromProduction_571807 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlotDifferencesFromProduction_571809(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesFromProduction_571808(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571810 = path.getOrDefault("resourceGroupName")
  valid_571810 = validateParameter(valid_571810, JString, required = true,
                                 default = nil)
  if valid_571810 != nil:
    section.add "resourceGroupName", valid_571810
  var valid_571811 = path.getOrDefault("name")
  valid_571811 = validateParameter(valid_571811, JString, required = true,
                                 default = nil)
  if valid_571811 != nil:
    section.add "name", valid_571811
  var valid_571812 = path.getOrDefault("subscriptionId")
  valid_571812 = validateParameter(valid_571812, JString, required = true,
                                 default = nil)
  if valid_571812 != nil:
    section.add "subscriptionId", valid_571812
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571813 = query.getOrDefault("api-version")
  valid_571813 = validateParameter(valid_571813, JString, required = true,
                                 default = nil)
  if valid_571813 != nil:
    section.add "api-version", valid_571813
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571815: Call_WebAppsListSlotDifferencesFromProduction_571807;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_571815.validator(path, query, header, formData, body)
  let scheme = call_571815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571815.url(scheme.get, call_571815.host, call_571815.base,
                         call_571815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571815, url, valid)

proc call*(call_571816: Call_WebAppsListSlotDifferencesFromProduction_571807;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesFromProduction
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_571817 = newJObject()
  var query_571818 = newJObject()
  var body_571819 = newJObject()
  add(path_571817, "resourceGroupName", newJString(resourceGroupName))
  add(query_571818, "api-version", newJString(apiVersion))
  add(path_571817, "name", newJString(name))
  add(path_571817, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571819 = slotSwapEntity
  result = call_571816.call(path_571817, query_571818, nil, nil, body_571819)

var webAppsListSlotDifferencesFromProduction* = Call_WebAppsListSlotDifferencesFromProduction_571807(
    name: "webAppsListSlotDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesFromProduction_571808, base: "",
    url: url_WebAppsListSlotDifferencesFromProduction_571809,
    schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotWithProduction_571820 = ref object of OpenApiRestCall_567666
proc url_WebAppsSwapSlotWithProduction_571822(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotWithProduction_571821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571823 = path.getOrDefault("resourceGroupName")
  valid_571823 = validateParameter(valid_571823, JString, required = true,
                                 default = nil)
  if valid_571823 != nil:
    section.add "resourceGroupName", valid_571823
  var valid_571824 = path.getOrDefault("name")
  valid_571824 = validateParameter(valid_571824, JString, required = true,
                                 default = nil)
  if valid_571824 != nil:
    section.add "name", valid_571824
  var valid_571825 = path.getOrDefault("subscriptionId")
  valid_571825 = validateParameter(valid_571825, JString, required = true,
                                 default = nil)
  if valid_571825 != nil:
    section.add "subscriptionId", valid_571825
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571826 = query.getOrDefault("api-version")
  valid_571826 = validateParameter(valid_571826, JString, required = true,
                                 default = nil)
  if valid_571826 != nil:
    section.add "api-version", valid_571826
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571828: Call_WebAppsSwapSlotWithProduction_571820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_571828.validator(path, query, header, formData, body)
  let scheme = call_571828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571828.url(scheme.get, call_571828.host, call_571828.base,
                         call_571828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571828, url, valid)

proc call*(call_571829: Call_WebAppsSwapSlotWithProduction_571820;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotWithProduction
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_571830 = newJObject()
  var query_571831 = newJObject()
  var body_571832 = newJObject()
  add(path_571830, "resourceGroupName", newJString(resourceGroupName))
  add(query_571831, "api-version", newJString(apiVersion))
  add(path_571830, "name", newJString(name))
  add(path_571830, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571832 = slotSwapEntity
  result = call_571829.call(path_571830, query_571831, nil, nil, body_571832)

var webAppsSwapSlotWithProduction* = Call_WebAppsSwapSlotWithProduction_571820(
    name: "webAppsSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_WebAppsSwapSlotWithProduction_571821, base: "",
    url: url_WebAppsSwapSlotWithProduction_571822, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshots_571833 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSnapshots_571835(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshots_571834(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571836 = path.getOrDefault("resourceGroupName")
  valid_571836 = validateParameter(valid_571836, JString, required = true,
                                 default = nil)
  if valid_571836 != nil:
    section.add "resourceGroupName", valid_571836
  var valid_571837 = path.getOrDefault("name")
  valid_571837 = validateParameter(valid_571837, JString, required = true,
                                 default = nil)
  if valid_571837 != nil:
    section.add "name", valid_571837
  var valid_571838 = path.getOrDefault("subscriptionId")
  valid_571838 = validateParameter(valid_571838, JString, required = true,
                                 default = nil)
  if valid_571838 != nil:
    section.add "subscriptionId", valid_571838
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571839 = query.getOrDefault("api-version")
  valid_571839 = validateParameter(valid_571839, JString, required = true,
                                 default = nil)
  if valid_571839 != nil:
    section.add "api-version", valid_571839
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571840: Call_WebAppsListSnapshots_571833; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_571840.validator(path, query, header, formData, body)
  let scheme = call_571840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571840.url(scheme.get, call_571840.host, call_571840.base,
                         call_571840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571840, url, valid)

proc call*(call_571841: Call_WebAppsListSnapshots_571833;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshots
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571842 = newJObject()
  var query_571843 = newJObject()
  add(path_571842, "resourceGroupName", newJString(resourceGroupName))
  add(query_571843, "api-version", newJString(apiVersion))
  add(path_571842, "name", newJString(name))
  add(path_571842, "subscriptionId", newJString(subscriptionId))
  result = call_571841.call(path_571842, query_571843, nil, nil, nil)

var webAppsListSnapshots* = Call_WebAppsListSnapshots_571833(
    name: "webAppsListSnapshots", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_WebAppsListSnapshots_571834, base: "",
    url: url_WebAppsListSnapshots_571835, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControl_571855 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSourceControl_571857(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControl_571856(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571858 = path.getOrDefault("resourceGroupName")
  valid_571858 = validateParameter(valid_571858, JString, required = true,
                                 default = nil)
  if valid_571858 != nil:
    section.add "resourceGroupName", valid_571858
  var valid_571859 = path.getOrDefault("name")
  valid_571859 = validateParameter(valid_571859, JString, required = true,
                                 default = nil)
  if valid_571859 != nil:
    section.add "name", valid_571859
  var valid_571860 = path.getOrDefault("subscriptionId")
  valid_571860 = validateParameter(valid_571860, JString, required = true,
                                 default = nil)
  if valid_571860 != nil:
    section.add "subscriptionId", valid_571860
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571861 = query.getOrDefault("api-version")
  valid_571861 = validateParameter(valid_571861, JString, required = true,
                                 default = nil)
  if valid_571861 != nil:
    section.add "api-version", valid_571861
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571863: Call_WebAppsCreateOrUpdateSourceControl_571855;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_571863.validator(path, query, header, formData, body)
  let scheme = call_571863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571863.url(scheme.get, call_571863.host, call_571863.base,
                         call_571863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571863, url, valid)

proc call*(call_571864: Call_WebAppsCreateOrUpdateSourceControl_571855;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_571865 = newJObject()
  var query_571866 = newJObject()
  var body_571867 = newJObject()
  add(path_571865, "resourceGroupName", newJString(resourceGroupName))
  add(query_571866, "api-version", newJString(apiVersion))
  add(path_571865, "name", newJString(name))
  add(path_571865, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571867 = siteSourceControl
  result = call_571864.call(path_571865, query_571866, nil, nil, body_571867)

var webAppsCreateOrUpdateSourceControl* = Call_WebAppsCreateOrUpdateSourceControl_571855(
    name: "webAppsCreateOrUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControl_571856, base: "",
    url: url_WebAppsCreateOrUpdateSourceControl_571857, schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControl_571844 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSourceControl_571846(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControl_571845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571847 = path.getOrDefault("resourceGroupName")
  valid_571847 = validateParameter(valid_571847, JString, required = true,
                                 default = nil)
  if valid_571847 != nil:
    section.add "resourceGroupName", valid_571847
  var valid_571848 = path.getOrDefault("name")
  valid_571848 = validateParameter(valid_571848, JString, required = true,
                                 default = nil)
  if valid_571848 != nil:
    section.add "name", valid_571848
  var valid_571849 = path.getOrDefault("subscriptionId")
  valid_571849 = validateParameter(valid_571849, JString, required = true,
                                 default = nil)
  if valid_571849 != nil:
    section.add "subscriptionId", valid_571849
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571850 = query.getOrDefault("api-version")
  valid_571850 = validateParameter(valid_571850, JString, required = true,
                                 default = nil)
  if valid_571850 != nil:
    section.add "api-version", valid_571850
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571851: Call_WebAppsGetSourceControl_571844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_571851.validator(path, query, header, formData, body)
  let scheme = call_571851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571851.url(scheme.get, call_571851.host, call_571851.base,
                         call_571851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571851, url, valid)

proc call*(call_571852: Call_WebAppsGetSourceControl_571844;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControl
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571853 = newJObject()
  var query_571854 = newJObject()
  add(path_571853, "resourceGroupName", newJString(resourceGroupName))
  add(query_571854, "api-version", newJString(apiVersion))
  add(path_571853, "name", newJString(name))
  add(path_571853, "subscriptionId", newJString(subscriptionId))
  result = call_571852.call(path_571853, query_571854, nil, nil, nil)

var webAppsGetSourceControl* = Call_WebAppsGetSourceControl_571844(
    name: "webAppsGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControl_571845, base: "",
    url: url_WebAppsGetSourceControl_571846, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControl_571879 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSourceControl_571881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControl_571880(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571882 = path.getOrDefault("resourceGroupName")
  valid_571882 = validateParameter(valid_571882, JString, required = true,
                                 default = nil)
  if valid_571882 != nil:
    section.add "resourceGroupName", valid_571882
  var valid_571883 = path.getOrDefault("name")
  valid_571883 = validateParameter(valid_571883, JString, required = true,
                                 default = nil)
  if valid_571883 != nil:
    section.add "name", valid_571883
  var valid_571884 = path.getOrDefault("subscriptionId")
  valid_571884 = validateParameter(valid_571884, JString, required = true,
                                 default = nil)
  if valid_571884 != nil:
    section.add "subscriptionId", valid_571884
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571885 = query.getOrDefault("api-version")
  valid_571885 = validateParameter(valid_571885, JString, required = true,
                                 default = nil)
  if valid_571885 != nil:
    section.add "api-version", valid_571885
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571887: Call_WebAppsUpdateSourceControl_571879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_571887.validator(path, query, header, formData, body)
  let scheme = call_571887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571887.url(scheme.get, call_571887.host, call_571887.base,
                         call_571887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571887, url, valid)

proc call*(call_571888: Call_WebAppsUpdateSourceControl_571879;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_571889 = newJObject()
  var query_571890 = newJObject()
  var body_571891 = newJObject()
  add(path_571889, "resourceGroupName", newJString(resourceGroupName))
  add(query_571890, "api-version", newJString(apiVersion))
  add(path_571889, "name", newJString(name))
  add(path_571889, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571891 = siteSourceControl
  result = call_571888.call(path_571889, query_571890, nil, nil, body_571891)

var webAppsUpdateSourceControl* = Call_WebAppsUpdateSourceControl_571879(
    name: "webAppsUpdateSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControl_571880, base: "",
    url: url_WebAppsUpdateSourceControl_571881, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControl_571868 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSourceControl_571870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControl_571869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571871 = path.getOrDefault("resourceGroupName")
  valid_571871 = validateParameter(valid_571871, JString, required = true,
                                 default = nil)
  if valid_571871 != nil:
    section.add "resourceGroupName", valid_571871
  var valid_571872 = path.getOrDefault("name")
  valid_571872 = validateParameter(valid_571872, JString, required = true,
                                 default = nil)
  if valid_571872 != nil:
    section.add "name", valid_571872
  var valid_571873 = path.getOrDefault("subscriptionId")
  valid_571873 = validateParameter(valid_571873, JString, required = true,
                                 default = nil)
  if valid_571873 != nil:
    section.add "subscriptionId", valid_571873
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571874 = query.getOrDefault("api-version")
  valid_571874 = validateParameter(valid_571874, JString, required = true,
                                 default = nil)
  if valid_571874 != nil:
    section.add "api-version", valid_571874
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571875: Call_WebAppsDeleteSourceControl_571868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_571875.validator(path, query, header, formData, body)
  let scheme = call_571875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571875.url(scheme.get, call_571875.host, call_571875.base,
                         call_571875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571875, url, valid)

proc call*(call_571876: Call_WebAppsDeleteSourceControl_571868;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControl
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571877 = newJObject()
  var query_571878 = newJObject()
  add(path_571877, "resourceGroupName", newJString(resourceGroupName))
  add(query_571878, "api-version", newJString(apiVersion))
  add(path_571877, "name", newJString(name))
  add(path_571877, "subscriptionId", newJString(subscriptionId))
  result = call_571876.call(path_571877, query_571878, nil, nil, nil)

var webAppsDeleteSourceControl* = Call_WebAppsDeleteSourceControl_571868(
    name: "webAppsDeleteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControl_571869, base: "",
    url: url_WebAppsDeleteSourceControl_571870, schemes: {Scheme.Https})
type
  Call_WebAppsStart_571892 = ref object of OpenApiRestCall_567666
proc url_WebAppsStart_571894(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStart_571893(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571895 = path.getOrDefault("resourceGroupName")
  valid_571895 = validateParameter(valid_571895, JString, required = true,
                                 default = nil)
  if valid_571895 != nil:
    section.add "resourceGroupName", valid_571895
  var valid_571896 = path.getOrDefault("name")
  valid_571896 = validateParameter(valid_571896, JString, required = true,
                                 default = nil)
  if valid_571896 != nil:
    section.add "name", valid_571896
  var valid_571897 = path.getOrDefault("subscriptionId")
  valid_571897 = validateParameter(valid_571897, JString, required = true,
                                 default = nil)
  if valid_571897 != nil:
    section.add "subscriptionId", valid_571897
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571898 = query.getOrDefault("api-version")
  valid_571898 = validateParameter(valid_571898, JString, required = true,
                                 default = nil)
  if valid_571898 != nil:
    section.add "api-version", valid_571898
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571899: Call_WebAppsStart_571892; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_571899.validator(path, query, header, formData, body)
  let scheme = call_571899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571899.url(scheme.get, call_571899.host, call_571899.base,
                         call_571899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571899, url, valid)

proc call*(call_571900: Call_WebAppsStart_571892; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStart
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571901 = newJObject()
  var query_571902 = newJObject()
  add(path_571901, "resourceGroupName", newJString(resourceGroupName))
  add(query_571902, "api-version", newJString(apiVersion))
  add(path_571901, "name", newJString(name))
  add(path_571901, "subscriptionId", newJString(subscriptionId))
  result = call_571900.call(path_571901, query_571902, nil, nil, nil)

var webAppsStart* = Call_WebAppsStart_571892(name: "webAppsStart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_WebAppsStart_571893, base: "", url: url_WebAppsStart_571894,
    schemes: {Scheme.Https})
type
  Call_WebAppsStop_571903 = ref object of OpenApiRestCall_567666
proc url_WebAppsStop_571905(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStop_571904(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571906 = path.getOrDefault("resourceGroupName")
  valid_571906 = validateParameter(valid_571906, JString, required = true,
                                 default = nil)
  if valid_571906 != nil:
    section.add "resourceGroupName", valid_571906
  var valid_571907 = path.getOrDefault("name")
  valid_571907 = validateParameter(valid_571907, JString, required = true,
                                 default = nil)
  if valid_571907 != nil:
    section.add "name", valid_571907
  var valid_571908 = path.getOrDefault("subscriptionId")
  valid_571908 = validateParameter(valid_571908, JString, required = true,
                                 default = nil)
  if valid_571908 != nil:
    section.add "subscriptionId", valid_571908
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571909 = query.getOrDefault("api-version")
  valid_571909 = validateParameter(valid_571909, JString, required = true,
                                 default = nil)
  if valid_571909 != nil:
    section.add "api-version", valid_571909
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571910: Call_WebAppsStop_571903; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_571910.validator(path, query, header, formData, body)
  let scheme = call_571910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571910.url(scheme.get, call_571910.host, call_571910.base,
                         call_571910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571910, url, valid)

proc call*(call_571911: Call_WebAppsStop_571903; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStop
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571912 = newJObject()
  var query_571913 = newJObject()
  add(path_571912, "resourceGroupName", newJString(resourceGroupName))
  add(query_571913, "api-version", newJString(apiVersion))
  add(path_571912, "name", newJString(name))
  add(path_571912, "subscriptionId", newJString(subscriptionId))
  result = call_571911.call(path_571912, query_571913, nil, nil, nil)

var webAppsStop* = Call_WebAppsStop_571903(name: "webAppsStop",
                                        meth: HttpMethod.HttpPost,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
                                        validator: validate_WebAppsStop_571904,
                                        base: "", url: url_WebAppsStop_571905,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepository_571914 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncRepository_571916(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepository_571915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571917 = path.getOrDefault("resourceGroupName")
  valid_571917 = validateParameter(valid_571917, JString, required = true,
                                 default = nil)
  if valid_571917 != nil:
    section.add "resourceGroupName", valid_571917
  var valid_571918 = path.getOrDefault("name")
  valid_571918 = validateParameter(valid_571918, JString, required = true,
                                 default = nil)
  if valid_571918 != nil:
    section.add "name", valid_571918
  var valid_571919 = path.getOrDefault("subscriptionId")
  valid_571919 = validateParameter(valid_571919, JString, required = true,
                                 default = nil)
  if valid_571919 != nil:
    section.add "subscriptionId", valid_571919
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571920 = query.getOrDefault("api-version")
  valid_571920 = validateParameter(valid_571920, JString, required = true,
                                 default = nil)
  if valid_571920 != nil:
    section.add "api-version", valid_571920
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571921: Call_WebAppsSyncRepository_571914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_571921.validator(path, query, header, formData, body)
  let scheme = call_571921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571921.url(scheme.get, call_571921.host, call_571921.base,
                         call_571921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571921, url, valid)

proc call*(call_571922: Call_WebAppsSyncRepository_571914;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepository
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571923 = newJObject()
  var query_571924 = newJObject()
  add(path_571923, "resourceGroupName", newJString(resourceGroupName))
  add(query_571924, "api-version", newJString(apiVersion))
  add(path_571923, "name", newJString(name))
  add(path_571923, "subscriptionId", newJString(subscriptionId))
  result = call_571922.call(path_571923, query_571924, nil, nil, nil)

var webAppsSyncRepository* = Call_WebAppsSyncRepository_571914(
    name: "webAppsSyncRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_WebAppsSyncRepository_571915, base: "",
    url: url_WebAppsSyncRepository_571916, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggers_571925 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncFunctionTriggers_571927(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggers_571926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571928 = path.getOrDefault("resourceGroupName")
  valid_571928 = validateParameter(valid_571928, JString, required = true,
                                 default = nil)
  if valid_571928 != nil:
    section.add "resourceGroupName", valid_571928
  var valid_571929 = path.getOrDefault("name")
  valid_571929 = validateParameter(valid_571929, JString, required = true,
                                 default = nil)
  if valid_571929 != nil:
    section.add "name", valid_571929
  var valid_571930 = path.getOrDefault("subscriptionId")
  valid_571930 = validateParameter(valid_571930, JString, required = true,
                                 default = nil)
  if valid_571930 != nil:
    section.add "subscriptionId", valid_571930
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571931 = query.getOrDefault("api-version")
  valid_571931 = validateParameter(valid_571931, JString, required = true,
                                 default = nil)
  if valid_571931 != nil:
    section.add "api-version", valid_571931
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571932: Call_WebAppsSyncFunctionTriggers_571925; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_571932.validator(path, query, header, formData, body)
  let scheme = call_571932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571932.url(scheme.get, call_571932.host, call_571932.base,
                         call_571932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571932, url, valid)

proc call*(call_571933: Call_WebAppsSyncFunctionTriggers_571925;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggers
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571934 = newJObject()
  var query_571935 = newJObject()
  add(path_571934, "resourceGroupName", newJString(resourceGroupName))
  add(query_571935, "api-version", newJString(apiVersion))
  add(path_571934, "name", newJString(name))
  add(path_571934, "subscriptionId", newJString(subscriptionId))
  result = call_571933.call(path_571934, query_571935, nil, nil, nil)

var webAppsSyncFunctionTriggers* = Call_WebAppsSyncFunctionTriggers_571925(
    name: "webAppsSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggers_571926, base: "",
    url: url_WebAppsSyncFunctionTriggers_571927, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobs_571936 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobs_571938(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobs_571937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571939 = path.getOrDefault("resourceGroupName")
  valid_571939 = validateParameter(valid_571939, JString, required = true,
                                 default = nil)
  if valid_571939 != nil:
    section.add "resourceGroupName", valid_571939
  var valid_571940 = path.getOrDefault("name")
  valid_571940 = validateParameter(valid_571940, JString, required = true,
                                 default = nil)
  if valid_571940 != nil:
    section.add "name", valid_571940
  var valid_571941 = path.getOrDefault("subscriptionId")
  valid_571941 = validateParameter(valid_571941, JString, required = true,
                                 default = nil)
  if valid_571941 != nil:
    section.add "subscriptionId", valid_571941
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571942 = query.getOrDefault("api-version")
  valid_571942 = validateParameter(valid_571942, JString, required = true,
                                 default = nil)
  if valid_571942 != nil:
    section.add "api-version", valid_571942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571943: Call_WebAppsListTriggeredWebJobs_571936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_571943.validator(path, query, header, formData, body)
  let scheme = call_571943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571943.url(scheme.get, call_571943.host, call_571943.base,
                         call_571943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571943, url, valid)

proc call*(call_571944: Call_WebAppsListTriggeredWebJobs_571936;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobs
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571945 = newJObject()
  var query_571946 = newJObject()
  add(path_571945, "resourceGroupName", newJString(resourceGroupName))
  add(query_571946, "api-version", newJString(apiVersion))
  add(path_571945, "name", newJString(name))
  add(path_571945, "subscriptionId", newJString(subscriptionId))
  result = call_571944.call(path_571945, query_571946, nil, nil, nil)

var webAppsListTriggeredWebJobs* = Call_WebAppsListTriggeredWebJobs_571936(
    name: "webAppsListTriggeredWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobs_571937, base: "",
    url: url_WebAppsListTriggeredWebJobs_571938, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJob_571947 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJob_571949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJob_571948(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571950 = path.getOrDefault("resourceGroupName")
  valid_571950 = validateParameter(valid_571950, JString, required = true,
                                 default = nil)
  if valid_571950 != nil:
    section.add "resourceGroupName", valid_571950
  var valid_571951 = path.getOrDefault("name")
  valid_571951 = validateParameter(valid_571951, JString, required = true,
                                 default = nil)
  if valid_571951 != nil:
    section.add "name", valid_571951
  var valid_571952 = path.getOrDefault("subscriptionId")
  valid_571952 = validateParameter(valid_571952, JString, required = true,
                                 default = nil)
  if valid_571952 != nil:
    section.add "subscriptionId", valid_571952
  var valid_571953 = path.getOrDefault("webJobName")
  valid_571953 = validateParameter(valid_571953, JString, required = true,
                                 default = nil)
  if valid_571953 != nil:
    section.add "webJobName", valid_571953
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571954 = query.getOrDefault("api-version")
  valid_571954 = validateParameter(valid_571954, JString, required = true,
                                 default = nil)
  if valid_571954 != nil:
    section.add "api-version", valid_571954
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571955: Call_WebAppsGetTriggeredWebJob_571947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_571955.validator(path, query, header, formData, body)
  let scheme = call_571955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571955.url(scheme.get, call_571955.host, call_571955.base,
                         call_571955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571955, url, valid)

proc call*(call_571956: Call_WebAppsGetTriggeredWebJob_571947;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJob
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571957 = newJObject()
  var query_571958 = newJObject()
  add(path_571957, "resourceGroupName", newJString(resourceGroupName))
  add(query_571958, "api-version", newJString(apiVersion))
  add(path_571957, "name", newJString(name))
  add(path_571957, "subscriptionId", newJString(subscriptionId))
  add(path_571957, "webJobName", newJString(webJobName))
  result = call_571956.call(path_571957, query_571958, nil, nil, nil)

var webAppsGetTriggeredWebJob* = Call_WebAppsGetTriggeredWebJob_571947(
    name: "webAppsGetTriggeredWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJob_571948, base: "",
    url: url_WebAppsGetTriggeredWebJob_571949, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJob_571959 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteTriggeredWebJob_571961(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJob_571960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571962 = path.getOrDefault("resourceGroupName")
  valid_571962 = validateParameter(valid_571962, JString, required = true,
                                 default = nil)
  if valid_571962 != nil:
    section.add "resourceGroupName", valid_571962
  var valid_571963 = path.getOrDefault("name")
  valid_571963 = validateParameter(valid_571963, JString, required = true,
                                 default = nil)
  if valid_571963 != nil:
    section.add "name", valid_571963
  var valid_571964 = path.getOrDefault("subscriptionId")
  valid_571964 = validateParameter(valid_571964, JString, required = true,
                                 default = nil)
  if valid_571964 != nil:
    section.add "subscriptionId", valid_571964
  var valid_571965 = path.getOrDefault("webJobName")
  valid_571965 = validateParameter(valid_571965, JString, required = true,
                                 default = nil)
  if valid_571965 != nil:
    section.add "webJobName", valid_571965
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571966 = query.getOrDefault("api-version")
  valid_571966 = validateParameter(valid_571966, JString, required = true,
                                 default = nil)
  if valid_571966 != nil:
    section.add "api-version", valid_571966
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571967: Call_WebAppsDeleteTriggeredWebJob_571959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_571967.validator(path, query, header, formData, body)
  let scheme = call_571967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571967.url(scheme.get, call_571967.host, call_571967.base,
                         call_571967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571967, url, valid)

proc call*(call_571968: Call_WebAppsDeleteTriggeredWebJob_571959;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJob
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571969 = newJObject()
  var query_571970 = newJObject()
  add(path_571969, "resourceGroupName", newJString(resourceGroupName))
  add(query_571970, "api-version", newJString(apiVersion))
  add(path_571969, "name", newJString(name))
  add(path_571969, "subscriptionId", newJString(subscriptionId))
  add(path_571969, "webJobName", newJString(webJobName))
  result = call_571968.call(path_571969, query_571970, nil, nil, nil)

var webAppsDeleteTriggeredWebJob* = Call_WebAppsDeleteTriggeredWebJob_571959(
    name: "webAppsDeleteTriggeredWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJob_571960, base: "",
    url: url_WebAppsDeleteTriggeredWebJob_571961, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistory_571971 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobHistory_571973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistory_571972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571974 = path.getOrDefault("resourceGroupName")
  valid_571974 = validateParameter(valid_571974, JString, required = true,
                                 default = nil)
  if valid_571974 != nil:
    section.add "resourceGroupName", valid_571974
  var valid_571975 = path.getOrDefault("name")
  valid_571975 = validateParameter(valid_571975, JString, required = true,
                                 default = nil)
  if valid_571975 != nil:
    section.add "name", valid_571975
  var valid_571976 = path.getOrDefault("subscriptionId")
  valid_571976 = validateParameter(valid_571976, JString, required = true,
                                 default = nil)
  if valid_571976 != nil:
    section.add "subscriptionId", valid_571976
  var valid_571977 = path.getOrDefault("webJobName")
  valid_571977 = validateParameter(valid_571977, JString, required = true,
                                 default = nil)
  if valid_571977 != nil:
    section.add "webJobName", valid_571977
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571978 = query.getOrDefault("api-version")
  valid_571978 = validateParameter(valid_571978, JString, required = true,
                                 default = nil)
  if valid_571978 != nil:
    section.add "api-version", valid_571978
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571979: Call_WebAppsListTriggeredWebJobHistory_571971;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_571979.validator(path, query, header, formData, body)
  let scheme = call_571979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571979.url(scheme.get, call_571979.host, call_571979.base,
                         call_571979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571979, url, valid)

proc call*(call_571980: Call_WebAppsListTriggeredWebJobHistory_571971;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistory
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571981 = newJObject()
  var query_571982 = newJObject()
  add(path_571981, "resourceGroupName", newJString(resourceGroupName))
  add(query_571982, "api-version", newJString(apiVersion))
  add(path_571981, "name", newJString(name))
  add(path_571981, "subscriptionId", newJString(subscriptionId))
  add(path_571981, "webJobName", newJString(webJobName))
  result = call_571980.call(path_571981, query_571982, nil, nil, nil)

var webAppsListTriggeredWebJobHistory* = Call_WebAppsListTriggeredWebJobHistory_571971(
    name: "webAppsListTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistory_571972, base: "",
    url: url_WebAppsListTriggeredWebJobHistory_571973, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistory_571983 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJobHistory_571985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistory_571984(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571986 = path.getOrDefault("resourceGroupName")
  valid_571986 = validateParameter(valid_571986, JString, required = true,
                                 default = nil)
  if valid_571986 != nil:
    section.add "resourceGroupName", valid_571986
  var valid_571987 = path.getOrDefault("name")
  valid_571987 = validateParameter(valid_571987, JString, required = true,
                                 default = nil)
  if valid_571987 != nil:
    section.add "name", valid_571987
  var valid_571988 = path.getOrDefault("subscriptionId")
  valid_571988 = validateParameter(valid_571988, JString, required = true,
                                 default = nil)
  if valid_571988 != nil:
    section.add "subscriptionId", valid_571988
  var valid_571989 = path.getOrDefault("id")
  valid_571989 = validateParameter(valid_571989, JString, required = true,
                                 default = nil)
  if valid_571989 != nil:
    section.add "id", valid_571989
  var valid_571990 = path.getOrDefault("webJobName")
  valid_571990 = validateParameter(valid_571990, JString, required = true,
                                 default = nil)
  if valid_571990 != nil:
    section.add "webJobName", valid_571990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571991 = query.getOrDefault("api-version")
  valid_571991 = validateParameter(valid_571991, JString, required = true,
                                 default = nil)
  if valid_571991 != nil:
    section.add "api-version", valid_571991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571992: Call_WebAppsGetTriggeredWebJobHistory_571983;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_571992.validator(path, query, header, formData, body)
  let scheme = call_571992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571992.url(scheme.get, call_571992.host, call_571992.base,
                         call_571992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571992, url, valid)

proc call*(call_571993: Call_WebAppsGetTriggeredWebJobHistory_571983;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistory
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_571994 = newJObject()
  var query_571995 = newJObject()
  add(path_571994, "resourceGroupName", newJString(resourceGroupName))
  add(query_571995, "api-version", newJString(apiVersion))
  add(path_571994, "name", newJString(name))
  add(path_571994, "subscriptionId", newJString(subscriptionId))
  add(path_571994, "id", newJString(id))
  add(path_571994, "webJobName", newJString(webJobName))
  result = call_571993.call(path_571994, query_571995, nil, nil, nil)

var webAppsGetTriggeredWebJobHistory* = Call_WebAppsGetTriggeredWebJobHistory_571983(
    name: "webAppsGetTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistory_571984, base: "",
    url: url_WebAppsGetTriggeredWebJobHistory_571985, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJob_571996 = ref object of OpenApiRestCall_567666
proc url_WebAppsRunTriggeredWebJob_571998(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJob_571997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571999 = path.getOrDefault("resourceGroupName")
  valid_571999 = validateParameter(valid_571999, JString, required = true,
                                 default = nil)
  if valid_571999 != nil:
    section.add "resourceGroupName", valid_571999
  var valid_572000 = path.getOrDefault("name")
  valid_572000 = validateParameter(valid_572000, JString, required = true,
                                 default = nil)
  if valid_572000 != nil:
    section.add "name", valid_572000
  var valid_572001 = path.getOrDefault("subscriptionId")
  valid_572001 = validateParameter(valid_572001, JString, required = true,
                                 default = nil)
  if valid_572001 != nil:
    section.add "subscriptionId", valid_572001
  var valid_572002 = path.getOrDefault("webJobName")
  valid_572002 = validateParameter(valid_572002, JString, required = true,
                                 default = nil)
  if valid_572002 != nil:
    section.add "webJobName", valid_572002
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572003 = query.getOrDefault("api-version")
  valid_572003 = validateParameter(valid_572003, JString, required = true,
                                 default = nil)
  if valid_572003 != nil:
    section.add "api-version", valid_572003
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572004: Call_WebAppsRunTriggeredWebJob_571996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_572004.validator(path, query, header, formData, body)
  let scheme = call_572004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572004.url(scheme.get, call_572004.host, call_572004.base,
                         call_572004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572004, url, valid)

proc call*(call_572005: Call_WebAppsRunTriggeredWebJob_571996;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJob
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572006 = newJObject()
  var query_572007 = newJObject()
  add(path_572006, "resourceGroupName", newJString(resourceGroupName))
  add(query_572007, "api-version", newJString(apiVersion))
  add(path_572006, "name", newJString(name))
  add(path_572006, "subscriptionId", newJString(subscriptionId))
  add(path_572006, "webJobName", newJString(webJobName))
  result = call_572005.call(path_572006, query_572007, nil, nil, nil)

var webAppsRunTriggeredWebJob* = Call_WebAppsRunTriggeredWebJob_571996(
    name: "webAppsRunTriggeredWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJob_571997, base: "",
    url: url_WebAppsRunTriggeredWebJob_571998, schemes: {Scheme.Https})
type
  Call_WebAppsListUsages_572008 = ref object of OpenApiRestCall_567666
proc url_WebAppsListUsages_572010(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsages_572009(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572011 = path.getOrDefault("resourceGroupName")
  valid_572011 = validateParameter(valid_572011, JString, required = true,
                                 default = nil)
  if valid_572011 != nil:
    section.add "resourceGroupName", valid_572011
  var valid_572012 = path.getOrDefault("name")
  valid_572012 = validateParameter(valid_572012, JString, required = true,
                                 default = nil)
  if valid_572012 != nil:
    section.add "name", valid_572012
  var valid_572013 = path.getOrDefault("subscriptionId")
  valid_572013 = validateParameter(valid_572013, JString, required = true,
                                 default = nil)
  if valid_572013 != nil:
    section.add "subscriptionId", valid_572013
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572014 = query.getOrDefault("api-version")
  valid_572014 = validateParameter(valid_572014, JString, required = true,
                                 default = nil)
  if valid_572014 != nil:
    section.add "api-version", valid_572014
  var valid_572015 = query.getOrDefault("$filter")
  valid_572015 = validateParameter(valid_572015, JString, required = false,
                                 default = nil)
  if valid_572015 != nil:
    section.add "$filter", valid_572015
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572016: Call_WebAppsListUsages_572008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_572016.validator(path, query, header, formData, body)
  let scheme = call_572016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572016.url(scheme.get, call_572016.host, call_572016.base,
                         call_572016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572016, url, valid)

proc call*(call_572017: Call_WebAppsListUsages_572008; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          Filter: string = ""): Recallable =
  ## webAppsListUsages
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_572018 = newJObject()
  var query_572019 = newJObject()
  add(path_572018, "resourceGroupName", newJString(resourceGroupName))
  add(query_572019, "api-version", newJString(apiVersion))
  add(path_572018, "name", newJString(name))
  add(path_572018, "subscriptionId", newJString(subscriptionId))
  add(query_572019, "$filter", newJString(Filter))
  result = call_572017.call(path_572018, query_572019, nil, nil, nil)

var webAppsListUsages* = Call_WebAppsListUsages_572008(name: "webAppsListUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_WebAppsListUsages_572009, base: "",
    url: url_WebAppsListUsages_572010, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnections_572020 = ref object of OpenApiRestCall_567666
proc url_WebAppsListVnetConnections_572022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnections_572021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572023 = path.getOrDefault("resourceGroupName")
  valid_572023 = validateParameter(valid_572023, JString, required = true,
                                 default = nil)
  if valid_572023 != nil:
    section.add "resourceGroupName", valid_572023
  var valid_572024 = path.getOrDefault("name")
  valid_572024 = validateParameter(valid_572024, JString, required = true,
                                 default = nil)
  if valid_572024 != nil:
    section.add "name", valid_572024
  var valid_572025 = path.getOrDefault("subscriptionId")
  valid_572025 = validateParameter(valid_572025, JString, required = true,
                                 default = nil)
  if valid_572025 != nil:
    section.add "subscriptionId", valid_572025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572026 = query.getOrDefault("api-version")
  valid_572026 = validateParameter(valid_572026, JString, required = true,
                                 default = nil)
  if valid_572026 != nil:
    section.add "api-version", valid_572026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572027: Call_WebAppsListVnetConnections_572020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_572027.validator(path, query, header, formData, body)
  let scheme = call_572027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572027.url(scheme.get, call_572027.host, call_572027.base,
                         call_572027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572027, url, valid)

proc call*(call_572028: Call_WebAppsListVnetConnections_572020;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnections
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572029 = newJObject()
  var query_572030 = newJObject()
  add(path_572029, "resourceGroupName", newJString(resourceGroupName))
  add(query_572030, "api-version", newJString(apiVersion))
  add(path_572029, "name", newJString(name))
  add(path_572029, "subscriptionId", newJString(subscriptionId))
  result = call_572028.call(path_572029, query_572030, nil, nil, nil)

var webAppsListVnetConnections* = Call_WebAppsListVnetConnections_572020(
    name: "webAppsListVnetConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnections_572021, base: "",
    url: url_WebAppsListVnetConnections_572022, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnection_572043 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnection_572045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnection_572044(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572046 = path.getOrDefault("resourceGroupName")
  valid_572046 = validateParameter(valid_572046, JString, required = true,
                                 default = nil)
  if valid_572046 != nil:
    section.add "resourceGroupName", valid_572046
  var valid_572047 = path.getOrDefault("name")
  valid_572047 = validateParameter(valid_572047, JString, required = true,
                                 default = nil)
  if valid_572047 != nil:
    section.add "name", valid_572047
  var valid_572048 = path.getOrDefault("vnetName")
  valid_572048 = validateParameter(valid_572048, JString, required = true,
                                 default = nil)
  if valid_572048 != nil:
    section.add "vnetName", valid_572048
  var valid_572049 = path.getOrDefault("subscriptionId")
  valid_572049 = validateParameter(valid_572049, JString, required = true,
                                 default = nil)
  if valid_572049 != nil:
    section.add "subscriptionId", valid_572049
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572050 = query.getOrDefault("api-version")
  valid_572050 = validateParameter(valid_572050, JString, required = true,
                                 default = nil)
  if valid_572050 != nil:
    section.add "api-version", valid_572050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572052: Call_WebAppsCreateOrUpdateVnetConnection_572043;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_572052.validator(path, query, header, formData, body)
  let scheme = call_572052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572052.url(scheme.get, call_572052.host, call_572052.base,
                         call_572052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572052, url, valid)

proc call*(call_572053: Call_WebAppsCreateOrUpdateVnetConnection_572043;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572054 = newJObject()
  var query_572055 = newJObject()
  var body_572056 = newJObject()
  add(path_572054, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572056 = connectionEnvelope
  add(path_572054, "name", newJString(name))
  add(path_572054, "vnetName", newJString(vnetName))
  add(query_572055, "api-version", newJString(apiVersion))
  add(path_572054, "subscriptionId", newJString(subscriptionId))
  result = call_572053.call(path_572054, query_572055, nil, nil, body_572056)

var webAppsCreateOrUpdateVnetConnection* = Call_WebAppsCreateOrUpdateVnetConnection_572043(
    name: "webAppsCreateOrUpdateVnetConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnection_572044, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnection_572045, schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnection_572031 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnection_572033(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnection_572032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572034 = path.getOrDefault("resourceGroupName")
  valid_572034 = validateParameter(valid_572034, JString, required = true,
                                 default = nil)
  if valid_572034 != nil:
    section.add "resourceGroupName", valid_572034
  var valid_572035 = path.getOrDefault("name")
  valid_572035 = validateParameter(valid_572035, JString, required = true,
                                 default = nil)
  if valid_572035 != nil:
    section.add "name", valid_572035
  var valid_572036 = path.getOrDefault("vnetName")
  valid_572036 = validateParameter(valid_572036, JString, required = true,
                                 default = nil)
  if valid_572036 != nil:
    section.add "vnetName", valid_572036
  var valid_572037 = path.getOrDefault("subscriptionId")
  valid_572037 = validateParameter(valid_572037, JString, required = true,
                                 default = nil)
  if valid_572037 != nil:
    section.add "subscriptionId", valid_572037
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572038 = query.getOrDefault("api-version")
  valid_572038 = validateParameter(valid_572038, JString, required = true,
                                 default = nil)
  if valid_572038 != nil:
    section.add "api-version", valid_572038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572039: Call_WebAppsGetVnetConnection_572031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_572039.validator(path, query, header, formData, body)
  let scheme = call_572039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572039.url(scheme.get, call_572039.host, call_572039.base,
                         call_572039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572039, url, valid)

proc call*(call_572040: Call_WebAppsGetVnetConnection_572031;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnection
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572041 = newJObject()
  var query_572042 = newJObject()
  add(path_572041, "resourceGroupName", newJString(resourceGroupName))
  add(query_572042, "api-version", newJString(apiVersion))
  add(path_572041, "name", newJString(name))
  add(path_572041, "vnetName", newJString(vnetName))
  add(path_572041, "subscriptionId", newJString(subscriptionId))
  result = call_572040.call(path_572041, query_572042, nil, nil, nil)

var webAppsGetVnetConnection* = Call_WebAppsGetVnetConnection_572031(
    name: "webAppsGetVnetConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnection_572032, base: "",
    url: url_WebAppsGetVnetConnection_572033, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnection_572069 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnection_572071(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnection_572070(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572072 = path.getOrDefault("resourceGroupName")
  valid_572072 = validateParameter(valid_572072, JString, required = true,
                                 default = nil)
  if valid_572072 != nil:
    section.add "resourceGroupName", valid_572072
  var valid_572073 = path.getOrDefault("name")
  valid_572073 = validateParameter(valid_572073, JString, required = true,
                                 default = nil)
  if valid_572073 != nil:
    section.add "name", valid_572073
  var valid_572074 = path.getOrDefault("vnetName")
  valid_572074 = validateParameter(valid_572074, JString, required = true,
                                 default = nil)
  if valid_572074 != nil:
    section.add "vnetName", valid_572074
  var valid_572075 = path.getOrDefault("subscriptionId")
  valid_572075 = validateParameter(valid_572075, JString, required = true,
                                 default = nil)
  if valid_572075 != nil:
    section.add "subscriptionId", valid_572075
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572076 = query.getOrDefault("api-version")
  valid_572076 = validateParameter(valid_572076, JString, required = true,
                                 default = nil)
  if valid_572076 != nil:
    section.add "api-version", valid_572076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572078: Call_WebAppsUpdateVnetConnection_572069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_572078.validator(path, query, header, formData, body)
  let scheme = call_572078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572078.url(scheme.get, call_572078.host, call_572078.base,
                         call_572078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572078, url, valid)

proc call*(call_572079: Call_WebAppsUpdateVnetConnection_572069;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572080 = newJObject()
  var query_572081 = newJObject()
  var body_572082 = newJObject()
  add(path_572080, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572082 = connectionEnvelope
  add(path_572080, "name", newJString(name))
  add(path_572080, "vnetName", newJString(vnetName))
  add(query_572081, "api-version", newJString(apiVersion))
  add(path_572080, "subscriptionId", newJString(subscriptionId))
  result = call_572079.call(path_572080, query_572081, nil, nil, body_572082)

var webAppsUpdateVnetConnection* = Call_WebAppsUpdateVnetConnection_572069(
    name: "webAppsUpdateVnetConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnection_572070, base: "",
    url: url_WebAppsUpdateVnetConnection_572071, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnection_572057 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteVnetConnection_572059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnection_572058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572060 = path.getOrDefault("resourceGroupName")
  valid_572060 = validateParameter(valid_572060, JString, required = true,
                                 default = nil)
  if valid_572060 != nil:
    section.add "resourceGroupName", valid_572060
  var valid_572061 = path.getOrDefault("name")
  valid_572061 = validateParameter(valid_572061, JString, required = true,
                                 default = nil)
  if valid_572061 != nil:
    section.add "name", valid_572061
  var valid_572062 = path.getOrDefault("vnetName")
  valid_572062 = validateParameter(valid_572062, JString, required = true,
                                 default = nil)
  if valid_572062 != nil:
    section.add "vnetName", valid_572062
  var valid_572063 = path.getOrDefault("subscriptionId")
  valid_572063 = validateParameter(valid_572063, JString, required = true,
                                 default = nil)
  if valid_572063 != nil:
    section.add "subscriptionId", valid_572063
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572064 = query.getOrDefault("api-version")
  valid_572064 = validateParameter(valid_572064, JString, required = true,
                                 default = nil)
  if valid_572064 != nil:
    section.add "api-version", valid_572064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572065: Call_WebAppsDeleteVnetConnection_572057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_572065.validator(path, query, header, formData, body)
  let scheme = call_572065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572065.url(scheme.get, call_572065.host, call_572065.base,
                         call_572065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572065, url, valid)

proc call*(call_572066: Call_WebAppsDeleteVnetConnection_572057;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnection
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572067 = newJObject()
  var query_572068 = newJObject()
  add(path_572067, "resourceGroupName", newJString(resourceGroupName))
  add(query_572068, "api-version", newJString(apiVersion))
  add(path_572067, "name", newJString(name))
  add(path_572067, "vnetName", newJString(vnetName))
  add(path_572067, "subscriptionId", newJString(subscriptionId))
  result = call_572066.call(path_572067, query_572068, nil, nil, nil)

var webAppsDeleteVnetConnection* = Call_WebAppsDeleteVnetConnection_572057(
    name: "webAppsDeleteVnetConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnection_572058, base: "",
    url: url_WebAppsDeleteVnetConnection_572059, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGateway_572096 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnectionGateway_572098(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGateway_572097(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572099 = path.getOrDefault("resourceGroupName")
  valid_572099 = validateParameter(valid_572099, JString, required = true,
                                 default = nil)
  if valid_572099 != nil:
    section.add "resourceGroupName", valid_572099
  var valid_572100 = path.getOrDefault("name")
  valid_572100 = validateParameter(valid_572100, JString, required = true,
                                 default = nil)
  if valid_572100 != nil:
    section.add "name", valid_572100
  var valid_572101 = path.getOrDefault("vnetName")
  valid_572101 = validateParameter(valid_572101, JString, required = true,
                                 default = nil)
  if valid_572101 != nil:
    section.add "vnetName", valid_572101
  var valid_572102 = path.getOrDefault("gatewayName")
  valid_572102 = validateParameter(valid_572102, JString, required = true,
                                 default = nil)
  if valid_572102 != nil:
    section.add "gatewayName", valid_572102
  var valid_572103 = path.getOrDefault("subscriptionId")
  valid_572103 = validateParameter(valid_572103, JString, required = true,
                                 default = nil)
  if valid_572103 != nil:
    section.add "subscriptionId", valid_572103
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572104 = query.getOrDefault("api-version")
  valid_572104 = validateParameter(valid_572104, JString, required = true,
                                 default = nil)
  if valid_572104 != nil:
    section.add "api-version", valid_572104
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572106: Call_WebAppsCreateOrUpdateVnetConnectionGateway_572096;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_572106.validator(path, query, header, formData, body)
  let scheme = call_572106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572106.url(scheme.get, call_572106.host, call_572106.base,
                         call_572106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572106, url, valid)

proc call*(call_572107: Call_WebAppsCreateOrUpdateVnetConnectionGateway_572096;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572108 = newJObject()
  var query_572109 = newJObject()
  var body_572110 = newJObject()
  add(path_572108, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572110 = connectionEnvelope
  add(path_572108, "name", newJString(name))
  add(path_572108, "vnetName", newJString(vnetName))
  add(query_572109, "api-version", newJString(apiVersion))
  add(path_572108, "gatewayName", newJString(gatewayName))
  add(path_572108, "subscriptionId", newJString(subscriptionId))
  result = call_572107.call(path_572108, query_572109, nil, nil, body_572110)

var webAppsCreateOrUpdateVnetConnectionGateway* = Call_WebAppsCreateOrUpdateVnetConnectionGateway_572096(
    name: "webAppsCreateOrUpdateVnetConnectionGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGateway_572097,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGateway_572098,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGateway_572083 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnectionGateway_572085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGateway_572084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572086 = path.getOrDefault("resourceGroupName")
  valid_572086 = validateParameter(valid_572086, JString, required = true,
                                 default = nil)
  if valid_572086 != nil:
    section.add "resourceGroupName", valid_572086
  var valid_572087 = path.getOrDefault("name")
  valid_572087 = validateParameter(valid_572087, JString, required = true,
                                 default = nil)
  if valid_572087 != nil:
    section.add "name", valid_572087
  var valid_572088 = path.getOrDefault("vnetName")
  valid_572088 = validateParameter(valid_572088, JString, required = true,
                                 default = nil)
  if valid_572088 != nil:
    section.add "vnetName", valid_572088
  var valid_572089 = path.getOrDefault("gatewayName")
  valid_572089 = validateParameter(valid_572089, JString, required = true,
                                 default = nil)
  if valid_572089 != nil:
    section.add "gatewayName", valid_572089
  var valid_572090 = path.getOrDefault("subscriptionId")
  valid_572090 = validateParameter(valid_572090, JString, required = true,
                                 default = nil)
  if valid_572090 != nil:
    section.add "subscriptionId", valid_572090
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572091 = query.getOrDefault("api-version")
  valid_572091 = validateParameter(valid_572091, JString, required = true,
                                 default = nil)
  if valid_572091 != nil:
    section.add "api-version", valid_572091
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572092: Call_WebAppsGetVnetConnectionGateway_572083;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_572092.validator(path, query, header, formData, body)
  let scheme = call_572092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572092.url(scheme.get, call_572092.host, call_572092.base,
                         call_572092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572092, url, valid)

proc call*(call_572093: Call_WebAppsGetVnetConnectionGateway_572083;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGateway
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572094 = newJObject()
  var query_572095 = newJObject()
  add(path_572094, "resourceGroupName", newJString(resourceGroupName))
  add(query_572095, "api-version", newJString(apiVersion))
  add(path_572094, "name", newJString(name))
  add(path_572094, "vnetName", newJString(vnetName))
  add(path_572094, "gatewayName", newJString(gatewayName))
  add(path_572094, "subscriptionId", newJString(subscriptionId))
  result = call_572093.call(path_572094, query_572095, nil, nil, nil)

var webAppsGetVnetConnectionGateway* = Call_WebAppsGetVnetConnectionGateway_572083(
    name: "webAppsGetVnetConnectionGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGateway_572084, base: "",
    url: url_WebAppsGetVnetConnectionGateway_572085, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGateway_572111 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnectionGateway_572113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGateway_572112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572114 = path.getOrDefault("resourceGroupName")
  valid_572114 = validateParameter(valid_572114, JString, required = true,
                                 default = nil)
  if valid_572114 != nil:
    section.add "resourceGroupName", valid_572114
  var valid_572115 = path.getOrDefault("name")
  valid_572115 = validateParameter(valid_572115, JString, required = true,
                                 default = nil)
  if valid_572115 != nil:
    section.add "name", valid_572115
  var valid_572116 = path.getOrDefault("vnetName")
  valid_572116 = validateParameter(valid_572116, JString, required = true,
                                 default = nil)
  if valid_572116 != nil:
    section.add "vnetName", valid_572116
  var valid_572117 = path.getOrDefault("gatewayName")
  valid_572117 = validateParameter(valid_572117, JString, required = true,
                                 default = nil)
  if valid_572117 != nil:
    section.add "gatewayName", valid_572117
  var valid_572118 = path.getOrDefault("subscriptionId")
  valid_572118 = validateParameter(valid_572118, JString, required = true,
                                 default = nil)
  if valid_572118 != nil:
    section.add "subscriptionId", valid_572118
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572119 = query.getOrDefault("api-version")
  valid_572119 = validateParameter(valid_572119, JString, required = true,
                                 default = nil)
  if valid_572119 != nil:
    section.add "api-version", valid_572119
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572121: Call_WebAppsUpdateVnetConnectionGateway_572111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_572121.validator(path, query, header, formData, body)
  let scheme = call_572121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572121.url(scheme.get, call_572121.host, call_572121.base,
                         call_572121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572121, url, valid)

proc call*(call_572122: Call_WebAppsUpdateVnetConnectionGateway_572111;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572123 = newJObject()
  var query_572124 = newJObject()
  var body_572125 = newJObject()
  add(path_572123, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572125 = connectionEnvelope
  add(path_572123, "name", newJString(name))
  add(path_572123, "vnetName", newJString(vnetName))
  add(query_572124, "api-version", newJString(apiVersion))
  add(path_572123, "gatewayName", newJString(gatewayName))
  add(path_572123, "subscriptionId", newJString(subscriptionId))
  result = call_572122.call(path_572123, query_572124, nil, nil, body_572125)

var webAppsUpdateVnetConnectionGateway* = Call_WebAppsUpdateVnetConnectionGateway_572111(
    name: "webAppsUpdateVnetConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGateway_572112, base: "",
    url: url_WebAppsUpdateVnetConnectionGateway_572113, schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobs_572126 = ref object of OpenApiRestCall_567666
proc url_WebAppsListWebJobs_572128(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobs_572127(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572129 = path.getOrDefault("resourceGroupName")
  valid_572129 = validateParameter(valid_572129, JString, required = true,
                                 default = nil)
  if valid_572129 != nil:
    section.add "resourceGroupName", valid_572129
  var valid_572130 = path.getOrDefault("name")
  valid_572130 = validateParameter(valid_572130, JString, required = true,
                                 default = nil)
  if valid_572130 != nil:
    section.add "name", valid_572130
  var valid_572131 = path.getOrDefault("subscriptionId")
  valid_572131 = validateParameter(valid_572131, JString, required = true,
                                 default = nil)
  if valid_572131 != nil:
    section.add "subscriptionId", valid_572131
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572132 = query.getOrDefault("api-version")
  valid_572132 = validateParameter(valid_572132, JString, required = true,
                                 default = nil)
  if valid_572132 != nil:
    section.add "api-version", valid_572132
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572133: Call_WebAppsListWebJobs_572126; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_572133.validator(path, query, header, formData, body)
  let scheme = call_572133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572133.url(scheme.get, call_572133.host, call_572133.base,
                         call_572133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572133, url, valid)

proc call*(call_572134: Call_WebAppsListWebJobs_572126; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListWebJobs
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572135 = newJObject()
  var query_572136 = newJObject()
  add(path_572135, "resourceGroupName", newJString(resourceGroupName))
  add(query_572136, "api-version", newJString(apiVersion))
  add(path_572135, "name", newJString(name))
  add(path_572135, "subscriptionId", newJString(subscriptionId))
  result = call_572134.call(path_572135, query_572136, nil, nil, nil)

var webAppsListWebJobs* = Call_WebAppsListWebJobs_572126(
    name: "webAppsListWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    validator: validate_WebAppsListWebJobs_572127, base: "",
    url: url_WebAppsListWebJobs_572128, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJob_572137 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebJob_572139(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJob_572138(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572140 = path.getOrDefault("resourceGroupName")
  valid_572140 = validateParameter(valid_572140, JString, required = true,
                                 default = nil)
  if valid_572140 != nil:
    section.add "resourceGroupName", valid_572140
  var valid_572141 = path.getOrDefault("name")
  valid_572141 = validateParameter(valid_572141, JString, required = true,
                                 default = nil)
  if valid_572141 != nil:
    section.add "name", valid_572141
  var valid_572142 = path.getOrDefault("subscriptionId")
  valid_572142 = validateParameter(valid_572142, JString, required = true,
                                 default = nil)
  if valid_572142 != nil:
    section.add "subscriptionId", valid_572142
  var valid_572143 = path.getOrDefault("webJobName")
  valid_572143 = validateParameter(valid_572143, JString, required = true,
                                 default = nil)
  if valid_572143 != nil:
    section.add "webJobName", valid_572143
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572144 = query.getOrDefault("api-version")
  valid_572144 = validateParameter(valid_572144, JString, required = true,
                                 default = nil)
  if valid_572144 != nil:
    section.add "api-version", valid_572144
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572145: Call_WebAppsGetWebJob_572137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_572145.validator(path, query, header, formData, body)
  let scheme = call_572145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572145.url(scheme.get, call_572145.host, call_572145.base,
                         call_572145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572145, url, valid)

proc call*(call_572146: Call_WebAppsGetWebJob_572137; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJob
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_572147 = newJObject()
  var query_572148 = newJObject()
  add(path_572147, "resourceGroupName", newJString(resourceGroupName))
  add(query_572148, "api-version", newJString(apiVersion))
  add(path_572147, "name", newJString(name))
  add(path_572147, "subscriptionId", newJString(subscriptionId))
  add(path_572147, "webJobName", newJString(webJobName))
  result = call_572146.call(path_572147, query_572148, nil, nil, nil)

var webAppsGetWebJob* = Call_WebAppsGetWebJob_572137(name: "webAppsGetWebJob",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJob_572138, base: "",
    url: url_WebAppsGetWebJob_572139, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
