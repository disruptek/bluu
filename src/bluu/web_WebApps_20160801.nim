
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: WebApps API Client
## version: 2016-08-01
## termsOfService: (not provided)
## license: (not provided)
## 
## 
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_563564 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_563564](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_563564): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-WebApps"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_WebAppsList_563786 = ref object of OpenApiRestCall_563564
proc url_WebAppsList_563788(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsList_563787(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Get all apps for a subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_563963 = path.getOrDefault("subscriptionId")
  valid_563963 = validateParameter(valid_563963, JString, required = true,
                                 default = nil)
  if valid_563963 != nil:
    section.add "subscriptionId", valid_563963
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_563964 = query.getOrDefault("api-version")
  valid_563964 = validateParameter(valid_563964, JString, required = true,
                                 default = nil)
  if valid_563964 != nil:
    section.add "api-version", valid_563964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_563987: Call_WebAppsList_563786; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get all apps for a subscription.
  ## 
  let valid = call_563987.validator(path, query, header, formData, body)
  let scheme = call_563987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_563987.url(scheme.get, call_563987.host, call_563987.base,
                         call_563987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_563987, url, valid)

proc call*(call_564058: Call_WebAppsList_563786; apiVersion: string;
          subscriptionId: string): Recallable =
  ## webAppsList
  ## Get all apps for a subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_564059 = newJObject()
  var query_564061 = newJObject()
  add(query_564061, "api-version", newJString(apiVersion))
  add(path_564059, "subscriptionId", newJString(subscriptionId))
  result = call_564058.call(path_564059, query_564061, nil, nil, nil)

var webAppsList* = Call_WebAppsList_563786(name: "webAppsList",
                                        meth: HttpMethod.HttpGet,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
                                        validator: validate_WebAppsList_563787,
                                        base: "", url: url_WebAppsList_563788,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsListByResourceGroup_564100 = ref object of OpenApiRestCall_563564
proc url_WebAppsListByResourceGroup_564102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListByResourceGroup_564101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_564103 = path.getOrDefault("subscriptionId")
  valid_564103 = validateParameter(valid_564103, JString, required = true,
                                 default = nil)
  if valid_564103 != nil:
    section.add "subscriptionId", valid_564103
  var valid_564104 = path.getOrDefault("resourceGroupName")
  valid_564104 = validateParameter(valid_564104, JString, required = true,
                                 default = nil)
  if valid_564104 != nil:
    section.add "resourceGroupName", valid_564104
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564105 = query.getOrDefault("api-version")
  valid_564105 = validateParameter(valid_564105, JString, required = true,
                                 default = nil)
  if valid_564105 != nil:
    section.add "api-version", valid_564105
  var valid_564106 = query.getOrDefault("includeSlots")
  valid_564106 = validateParameter(valid_564106, JBool, required = false, default = nil)
  if valid_564106 != nil:
    section.add "includeSlots", valid_564106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564107: Call_WebAppsListByResourceGroup_564100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  let valid = call_564107.validator(path, query, header, formData, body)
  let scheme = call_564107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564107.url(scheme.get, call_564107.host, call_564107.base,
                         call_564107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564107, url, valid)

proc call*(call_564108: Call_WebAppsListByResourceGroup_564100; apiVersion: string;
          subscriptionId: string; resourceGroupName: string;
          includeSlots: bool = false): Recallable =
  ## webAppsListByResourceGroup
  ## Gets all web, mobile, and API apps in the specified resource group.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   includeSlots: bool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564109 = newJObject()
  var query_564110 = newJObject()
  add(query_564110, "api-version", newJString(apiVersion))
  add(query_564110, "includeSlots", newJBool(includeSlots))
  add(path_564109, "subscriptionId", newJString(subscriptionId))
  add(path_564109, "resourceGroupName", newJString(resourceGroupName))
  result = call_564108.call(path_564109, query_564110, nil, nil, nil)

var webAppsListByResourceGroup* = Call_WebAppsListByResourceGroup_564100(
    name: "webAppsListByResourceGroup", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_WebAppsListByResourceGroup_564101, base: "",
    url: url_WebAppsListByResourceGroup_564102, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdate_564122 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdate_564124(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdate_564123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564125 = path.getOrDefault("name")
  valid_564125 = validateParameter(valid_564125, JString, required = true,
                                 default = nil)
  if valid_564125 != nil:
    section.add "name", valid_564125
  var valid_564126 = path.getOrDefault("subscriptionId")
  valid_564126 = validateParameter(valid_564126, JString, required = true,
                                 default = nil)
  if valid_564126 != nil:
    section.add "subscriptionId", valid_564126
  var valid_564127 = path.getOrDefault("resourceGroupName")
  valid_564127 = validateParameter(valid_564127, JString, required = true,
                                 default = nil)
  if valid_564127 != nil:
    section.add "resourceGroupName", valid_564127
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564128 = query.getOrDefault("api-version")
  valid_564128 = validateParameter(valid_564128, JString, required = true,
                                 default = nil)
  if valid_564128 != nil:
    section.add "api-version", valid_564128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564130: Call_WebAppsCreateOrUpdate_564122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_564130.validator(path, query, header, formData, body)
  let scheme = call_564130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564130.url(scheme.get, call_564130.host, call_564130.base,
                         call_564130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564130, url, valid)

proc call*(call_564131: Call_WebAppsCreateOrUpdate_564122; apiVersion: string;
          siteEnvelope: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564132 = newJObject()
  var query_564133 = newJObject()
  var body_564134 = newJObject()
  add(query_564133, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_564134 = siteEnvelope
  add(path_564132, "name", newJString(name))
  add(path_564132, "subscriptionId", newJString(subscriptionId))
  add(path_564132, "resourceGroupName", newJString(resourceGroupName))
  result = call_564131.call(path_564132, query_564133, nil, nil, body_564134)

var webAppsCreateOrUpdate* = Call_WebAppsCreateOrUpdate_564122(
    name: "webAppsCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsCreateOrUpdate_564123, base: "",
    url: url_WebAppsCreateOrUpdate_564124, schemes: {Scheme.Https})
type
  Call_WebAppsGet_564111 = ref object of OpenApiRestCall_563564
proc url_WebAppsGet_564113(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGet_564112(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564114 = path.getOrDefault("name")
  valid_564114 = validateParameter(valid_564114, JString, required = true,
                                 default = nil)
  if valid_564114 != nil:
    section.add "name", valid_564114
  var valid_564115 = path.getOrDefault("subscriptionId")
  valid_564115 = validateParameter(valid_564115, JString, required = true,
                                 default = nil)
  if valid_564115 != nil:
    section.add "subscriptionId", valid_564115
  var valid_564116 = path.getOrDefault("resourceGroupName")
  valid_564116 = validateParameter(valid_564116, JString, required = true,
                                 default = nil)
  if valid_564116 != nil:
    section.add "resourceGroupName", valid_564116
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564117 = query.getOrDefault("api-version")
  valid_564117 = validateParameter(valid_564117, JString, required = true,
                                 default = nil)
  if valid_564117 != nil:
    section.add "api-version", valid_564117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564118: Call_WebAppsGet_564111; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_564118.validator(path, query, header, formData, body)
  let scheme = call_564118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564118.url(scheme.get, call_564118.host, call_564118.base,
                         call_564118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564118, url, valid)

proc call*(call_564119: Call_WebAppsGet_564111; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGet
  ## Gets the details of a web, mobile, or API app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564120 = newJObject()
  var query_564121 = newJObject()
  add(query_564121, "api-version", newJString(apiVersion))
  add(path_564120, "name", newJString(name))
  add(path_564120, "subscriptionId", newJString(subscriptionId))
  add(path_564120, "resourceGroupName", newJString(resourceGroupName))
  result = call_564119.call(path_564120, query_564121, nil, nil, nil)

var webAppsGet* = Call_WebAppsGet_564111(name: "webAppsGet",
                                      meth: HttpMethod.HttpGet,
                                      host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
                                      validator: validate_WebAppsGet_564112,
                                      base: "", url: url_WebAppsGet_564113,
                                      schemes: {Scheme.Https})
type
  Call_WebAppsUpdate_564148 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdate_564150(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdate_564149(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564151 = path.getOrDefault("name")
  valid_564151 = validateParameter(valid_564151, JString, required = true,
                                 default = nil)
  if valid_564151 != nil:
    section.add "name", valid_564151
  var valid_564152 = path.getOrDefault("subscriptionId")
  valid_564152 = validateParameter(valid_564152, JString, required = true,
                                 default = nil)
  if valid_564152 != nil:
    section.add "subscriptionId", valid_564152
  var valid_564153 = path.getOrDefault("resourceGroupName")
  valid_564153 = validateParameter(valid_564153, JString, required = true,
                                 default = nil)
  if valid_564153 != nil:
    section.add "resourceGroupName", valid_564153
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564154 = query.getOrDefault("api-version")
  valid_564154 = validateParameter(valid_564154, JString, required = true,
                                 default = nil)
  if valid_564154 != nil:
    section.add "api-version", valid_564154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564156: Call_WebAppsUpdate_564148; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_564156.validator(path, query, header, formData, body)
  let scheme = call_564156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564156.url(scheme.get, call_564156.host, call_564156.base,
                         call_564156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564156, url, valid)

proc call*(call_564157: Call_WebAppsUpdate_564148; apiVersion: string;
          siteEnvelope: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564158 = newJObject()
  var query_564159 = newJObject()
  var body_564160 = newJObject()
  add(query_564159, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_564160 = siteEnvelope
  add(path_564158, "name", newJString(name))
  add(path_564158, "subscriptionId", newJString(subscriptionId))
  add(path_564158, "resourceGroupName", newJString(resourceGroupName))
  result = call_564157.call(path_564158, query_564159, nil, nil, body_564160)

var webAppsUpdate* = Call_WebAppsUpdate_564148(name: "webAppsUpdate",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsUpdate_564149, base: "", url: url_WebAppsUpdate_564150,
    schemes: {Scheme.Https})
type
  Call_WebAppsDelete_564135 = ref object of OpenApiRestCall_563564
proc url_WebAppsDelete_564137(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDelete_564136(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564138 = path.getOrDefault("name")
  valid_564138 = validateParameter(valid_564138, JString, required = true,
                                 default = nil)
  if valid_564138 != nil:
    section.add "name", valid_564138
  var valid_564139 = path.getOrDefault("subscriptionId")
  valid_564139 = validateParameter(valid_564139, JString, required = true,
                                 default = nil)
  if valid_564139 != nil:
    section.add "subscriptionId", valid_564139
  var valid_564140 = path.getOrDefault("resourceGroupName")
  valid_564140 = validateParameter(valid_564140, JString, required = true,
                                 default = nil)
  if valid_564140 != nil:
    section.add "resourceGroupName", valid_564140
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564141 = query.getOrDefault("api-version")
  valid_564141 = validateParameter(valid_564141, JString, required = true,
                                 default = nil)
  if valid_564141 != nil:
    section.add "api-version", valid_564141
  var valid_564142 = query.getOrDefault("deleteEmptyServerFarm")
  valid_564142 = validateParameter(valid_564142, JBool, required = false, default = nil)
  if valid_564142 != nil:
    section.add "deleteEmptyServerFarm", valid_564142
  var valid_564143 = query.getOrDefault("deleteMetrics")
  valid_564143 = validateParameter(valid_564143, JBool, required = false, default = nil)
  if valid_564143 != nil:
    section.add "deleteMetrics", valid_564143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564144: Call_WebAppsDelete_564135; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_564144.validator(path, query, header, formData, body)
  let scheme = call_564144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564144.url(scheme.get, call_564144.host, call_564144.base,
                         call_564144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564144, url, valid)

proc call*(call_564145: Call_WebAppsDelete_564135; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string;
          deleteEmptyServerFarm: bool = false; deleteMetrics: bool = false): Recallable =
  ## webAppsDelete
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564146 = newJObject()
  var query_564147 = newJObject()
  add(query_564147, "api-version", newJString(apiVersion))
  add(query_564147, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  add(path_564146, "name", newJString(name))
  add(path_564146, "subscriptionId", newJString(subscriptionId))
  add(query_564147, "deleteMetrics", newJBool(deleteMetrics))
  add(path_564146, "resourceGroupName", newJString(resourceGroupName))
  result = call_564145.call(path_564146, query_564147, nil, nil, nil)

var webAppsDelete* = Call_WebAppsDelete_564135(name: "webAppsDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsDelete_564136, base: "", url: url_WebAppsDelete_564137,
    schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostname_564161 = ref object of OpenApiRestCall_563564
proc url_WebAppsAnalyzeCustomHostname_564163(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostname_564162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564164 = path.getOrDefault("name")
  valid_564164 = validateParameter(valid_564164, JString, required = true,
                                 default = nil)
  if valid_564164 != nil:
    section.add "name", valid_564164
  var valid_564165 = path.getOrDefault("subscriptionId")
  valid_564165 = validateParameter(valid_564165, JString, required = true,
                                 default = nil)
  if valid_564165 != nil:
    section.add "subscriptionId", valid_564165
  var valid_564166 = path.getOrDefault("resourceGroupName")
  valid_564166 = validateParameter(valid_564166, JString, required = true,
                                 default = nil)
  if valid_564166 != nil:
    section.add "resourceGroupName", valid_564166
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564167 = query.getOrDefault("api-version")
  valid_564167 = validateParameter(valid_564167, JString, required = true,
                                 default = nil)
  if valid_564167 != nil:
    section.add "api-version", valid_564167
  var valid_564168 = query.getOrDefault("hostName")
  valid_564168 = validateParameter(valid_564168, JString, required = false,
                                 default = nil)
  if valid_564168 != nil:
    section.add "hostName", valid_564168
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564169: Call_WebAppsAnalyzeCustomHostname_564161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_564169.validator(path, query, header, formData, body)
  let scheme = call_564169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564169.url(scheme.get, call_564169.host, call_564169.base,
                         call_564169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564169, url, valid)

proc call*(call_564170: Call_WebAppsAnalyzeCustomHostname_564161;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostname
  ## Analyze a custom hostname.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string
  ##           : Custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564171 = newJObject()
  var query_564172 = newJObject()
  add(query_564172, "api-version", newJString(apiVersion))
  add(path_564171, "name", newJString(name))
  add(path_564171, "subscriptionId", newJString(subscriptionId))
  add(query_564172, "hostName", newJString(hostName))
  add(path_564171, "resourceGroupName", newJString(resourceGroupName))
  result = call_564170.call(path_564171, query_564172, nil, nil, nil)

var webAppsAnalyzeCustomHostname* = Call_WebAppsAnalyzeCustomHostname_564161(
    name: "webAppsAnalyzeCustomHostname", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostname_564162, base: "",
    url: url_WebAppsAnalyzeCustomHostname_564163, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigToProduction_564173 = ref object of OpenApiRestCall_563564
proc url_WebAppsApplySlotConfigToProduction_564175(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigToProduction_564174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564176 = path.getOrDefault("name")
  valid_564176 = validateParameter(valid_564176, JString, required = true,
                                 default = nil)
  if valid_564176 != nil:
    section.add "name", valid_564176
  var valid_564177 = path.getOrDefault("subscriptionId")
  valid_564177 = validateParameter(valid_564177, JString, required = true,
                                 default = nil)
  if valid_564177 != nil:
    section.add "subscriptionId", valid_564177
  var valid_564178 = path.getOrDefault("resourceGroupName")
  valid_564178 = validateParameter(valid_564178, JString, required = true,
                                 default = nil)
  if valid_564178 != nil:
    section.add "resourceGroupName", valid_564178
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564179 = query.getOrDefault("api-version")
  valid_564179 = validateParameter(valid_564179, JString, required = true,
                                 default = nil)
  if valid_564179 != nil:
    section.add "api-version", valid_564179
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564181: Call_WebAppsApplySlotConfigToProduction_564173;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_564181.validator(path, query, header, formData, body)
  let scheme = call_564181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564181.url(scheme.get, call_564181.host, call_564181.base,
                         call_564181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564181, url, valid)

proc call*(call_564182: Call_WebAppsApplySlotConfigToProduction_564173;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsApplySlotConfigToProduction
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564183 = newJObject()
  var query_564184 = newJObject()
  var body_564185 = newJObject()
  add(query_564184, "api-version", newJString(apiVersion))
  add(path_564183, "name", newJString(name))
  add(path_564183, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_564185 = slotSwapEntity
  add(path_564183, "resourceGroupName", newJString(resourceGroupName))
  result = call_564182.call(path_564183, query_564184, nil, nil, body_564185)

var webAppsApplySlotConfigToProduction* = Call_WebAppsApplySlotConfigToProduction_564173(
    name: "webAppsApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigToProduction_564174, base: "",
    url: url_WebAppsApplySlotConfigToProduction_564175, schemes: {Scheme.Https})
type
  Call_WebAppsBackup_564186 = ref object of OpenApiRestCall_563564
proc url_WebAppsBackup_564188(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackup_564187(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564189 = path.getOrDefault("name")
  valid_564189 = validateParameter(valid_564189, JString, required = true,
                                 default = nil)
  if valid_564189 != nil:
    section.add "name", valid_564189
  var valid_564190 = path.getOrDefault("subscriptionId")
  valid_564190 = validateParameter(valid_564190, JString, required = true,
                                 default = nil)
  if valid_564190 != nil:
    section.add "subscriptionId", valid_564190
  var valid_564191 = path.getOrDefault("resourceGroupName")
  valid_564191 = validateParameter(valid_564191, JString, required = true,
                                 default = nil)
  if valid_564191 != nil:
    section.add "resourceGroupName", valid_564191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564192 = query.getOrDefault("api-version")
  valid_564192 = validateParameter(valid_564192, JString, required = true,
                                 default = nil)
  if valid_564192 != nil:
    section.add "api-version", valid_564192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564194: Call_WebAppsBackup_564186; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_564194.validator(path, query, header, formData, body)
  let scheme = call_564194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564194.url(scheme.get, call_564194.host, call_564194.base,
                         call_564194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564194, url, valid)

proc call*(call_564195: Call_WebAppsBackup_564186; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsBackup
  ## Creates a backup of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_564196 = newJObject()
  var query_564197 = newJObject()
  var body_564198 = newJObject()
  add(query_564197, "api-version", newJString(apiVersion))
  add(path_564196, "name", newJString(name))
  add(path_564196, "subscriptionId", newJString(subscriptionId))
  add(path_564196, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564198 = request
  result = call_564195.call(path_564196, query_564197, nil, nil, body_564198)

var webAppsBackup* = Call_WebAppsBackup_564186(name: "webAppsBackup",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_WebAppsBackup_564187, base: "", url: url_WebAppsBackup_564188,
    schemes: {Scheme.Https})
type
  Call_WebAppsListBackups_564199 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackups_564201(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackups_564200(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564202 = path.getOrDefault("name")
  valid_564202 = validateParameter(valid_564202, JString, required = true,
                                 default = nil)
  if valid_564202 != nil:
    section.add "name", valid_564202
  var valid_564203 = path.getOrDefault("subscriptionId")
  valid_564203 = validateParameter(valid_564203, JString, required = true,
                                 default = nil)
  if valid_564203 != nil:
    section.add "subscriptionId", valid_564203
  var valid_564204 = path.getOrDefault("resourceGroupName")
  valid_564204 = validateParameter(valid_564204, JString, required = true,
                                 default = nil)
  if valid_564204 != nil:
    section.add "resourceGroupName", valid_564204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564205 = query.getOrDefault("api-version")
  valid_564205 = validateParameter(valid_564205, JString, required = true,
                                 default = nil)
  if valid_564205 != nil:
    section.add "api-version", valid_564205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564206: Call_WebAppsListBackups_564199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_564206.validator(path, query, header, formData, body)
  let scheme = call_564206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564206.url(scheme.get, call_564206.host, call_564206.base,
                         call_564206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564206, url, valid)

proc call*(call_564207: Call_WebAppsListBackups_564199; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListBackups
  ## Gets existing backups of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564208 = newJObject()
  var query_564209 = newJObject()
  add(query_564209, "api-version", newJString(apiVersion))
  add(path_564208, "name", newJString(name))
  add(path_564208, "subscriptionId", newJString(subscriptionId))
  add(path_564208, "resourceGroupName", newJString(resourceGroupName))
  result = call_564207.call(path_564208, query_564209, nil, nil, nil)

var webAppsListBackups* = Call_WebAppsListBackups_564199(
    name: "webAppsListBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_WebAppsListBackups_564200, base: "",
    url: url_WebAppsListBackups_564201, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverRestore_564210 = ref object of OpenApiRestCall_563564
proc url_WebAppsDiscoverRestore_564212(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverRestore_564211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564213 = path.getOrDefault("name")
  valid_564213 = validateParameter(valid_564213, JString, required = true,
                                 default = nil)
  if valid_564213 != nil:
    section.add "name", valid_564213
  var valid_564214 = path.getOrDefault("subscriptionId")
  valid_564214 = validateParameter(valid_564214, JString, required = true,
                                 default = nil)
  if valid_564214 != nil:
    section.add "subscriptionId", valid_564214
  var valid_564215 = path.getOrDefault("resourceGroupName")
  valid_564215 = validateParameter(valid_564215, JString, required = true,
                                 default = nil)
  if valid_564215 != nil:
    section.add "resourceGroupName", valid_564215
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564216 = query.getOrDefault("api-version")
  valid_564216 = validateParameter(valid_564216, JString, required = true,
                                 default = nil)
  if valid_564216 != nil:
    section.add "api-version", valid_564216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564218: Call_WebAppsDiscoverRestore_564210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  let valid = call_564218.validator(path, query, header, formData, body)
  let scheme = call_564218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564218.url(scheme.get, call_564218.host, call_564218.base,
                         call_564218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564218, url, valid)

proc call*(call_564219: Call_WebAppsDiscoverRestore_564210; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          request: JsonNode): Recallable =
  ## webAppsDiscoverRestore
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_564220 = newJObject()
  var query_564221 = newJObject()
  var body_564222 = newJObject()
  add(query_564221, "api-version", newJString(apiVersion))
  add(path_564220, "name", newJString(name))
  add(path_564220, "subscriptionId", newJString(subscriptionId))
  add(path_564220, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564222 = request
  result = call_564219.call(path_564220, query_564221, nil, nil, body_564222)

var webAppsDiscoverRestore* = Call_WebAppsDiscoverRestore_564210(
    name: "webAppsDiscoverRestore", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
    validator: validate_WebAppsDiscoverRestore_564211, base: "",
    url: url_WebAppsDiscoverRestore_564212, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatus_564223 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupStatus_564225(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatus_564224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564226 = path.getOrDefault("name")
  valid_564226 = validateParameter(valid_564226, JString, required = true,
                                 default = nil)
  if valid_564226 != nil:
    section.add "name", valid_564226
  var valid_564227 = path.getOrDefault("subscriptionId")
  valid_564227 = validateParameter(valid_564227, JString, required = true,
                                 default = nil)
  if valid_564227 != nil:
    section.add "subscriptionId", valid_564227
  var valid_564228 = path.getOrDefault("backupId")
  valid_564228 = validateParameter(valid_564228, JString, required = true,
                                 default = nil)
  if valid_564228 != nil:
    section.add "backupId", valid_564228
  var valid_564229 = path.getOrDefault("resourceGroupName")
  valid_564229 = validateParameter(valid_564229, JString, required = true,
                                 default = nil)
  if valid_564229 != nil:
    section.add "resourceGroupName", valid_564229
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564230 = query.getOrDefault("api-version")
  valid_564230 = validateParameter(valid_564230, JString, required = true,
                                 default = nil)
  if valid_564230 != nil:
    section.add "api-version", valid_564230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564231: Call_WebAppsGetBackupStatus_564223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_564231.validator(path, query, header, formData, body)
  let scheme = call_564231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564231.url(scheme.get, call_564231.host, call_564231.base,
                         call_564231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564231, url, valid)

proc call*(call_564232: Call_WebAppsGetBackupStatus_564223; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupStatus
  ## Gets a backup of an app by its ID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564233 = newJObject()
  var query_564234 = newJObject()
  add(query_564234, "api-version", newJString(apiVersion))
  add(path_564233, "name", newJString(name))
  add(path_564233, "subscriptionId", newJString(subscriptionId))
  add(path_564233, "backupId", newJString(backupId))
  add(path_564233, "resourceGroupName", newJString(resourceGroupName))
  result = call_564232.call(path_564233, query_564234, nil, nil, nil)

var webAppsGetBackupStatus* = Call_WebAppsGetBackupStatus_564223(
    name: "webAppsGetBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatus_564224, base: "",
    url: url_WebAppsGetBackupStatus_564225, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackup_564235 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackup_564237(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackup_564236(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564238 = path.getOrDefault("name")
  valid_564238 = validateParameter(valid_564238, JString, required = true,
                                 default = nil)
  if valid_564238 != nil:
    section.add "name", valid_564238
  var valid_564239 = path.getOrDefault("subscriptionId")
  valid_564239 = validateParameter(valid_564239, JString, required = true,
                                 default = nil)
  if valid_564239 != nil:
    section.add "subscriptionId", valid_564239
  var valid_564240 = path.getOrDefault("backupId")
  valid_564240 = validateParameter(valid_564240, JString, required = true,
                                 default = nil)
  if valid_564240 != nil:
    section.add "backupId", valid_564240
  var valid_564241 = path.getOrDefault("resourceGroupName")
  valid_564241 = validateParameter(valid_564241, JString, required = true,
                                 default = nil)
  if valid_564241 != nil:
    section.add "resourceGroupName", valid_564241
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564242 = query.getOrDefault("api-version")
  valid_564242 = validateParameter(valid_564242, JString, required = true,
                                 default = nil)
  if valid_564242 != nil:
    section.add "api-version", valid_564242
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564243: Call_WebAppsDeleteBackup_564235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_564243.validator(path, query, header, formData, body)
  let scheme = call_564243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564243.url(scheme.get, call_564243.host, call_564243.base,
                         call_564243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564243, url, valid)

proc call*(call_564244: Call_WebAppsDeleteBackup_564235; apiVersion: string;
          name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackup
  ## Deletes a backup of an app by its ID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564245 = newJObject()
  var query_564246 = newJObject()
  add(query_564246, "api-version", newJString(apiVersion))
  add(path_564245, "name", newJString(name))
  add(path_564245, "subscriptionId", newJString(subscriptionId))
  add(path_564245, "backupId", newJString(backupId))
  add(path_564245, "resourceGroupName", newJString(resourceGroupName))
  result = call_564244.call(path_564245, query_564246, nil, nil, nil)

var webAppsDeleteBackup* = Call_WebAppsDeleteBackup_564235(
    name: "webAppsDeleteBackup", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackup_564236, base: "",
    url: url_WebAppsDeleteBackup_564237, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecrets_564247 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackupStatusSecrets_564249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecrets_564248(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564250 = path.getOrDefault("name")
  valid_564250 = validateParameter(valid_564250, JString, required = true,
                                 default = nil)
  if valid_564250 != nil:
    section.add "name", valid_564250
  var valid_564251 = path.getOrDefault("subscriptionId")
  valid_564251 = validateParameter(valid_564251, JString, required = true,
                                 default = nil)
  if valid_564251 != nil:
    section.add "subscriptionId", valid_564251
  var valid_564252 = path.getOrDefault("backupId")
  valid_564252 = validateParameter(valid_564252, JString, required = true,
                                 default = nil)
  if valid_564252 != nil:
    section.add "backupId", valid_564252
  var valid_564253 = path.getOrDefault("resourceGroupName")
  valid_564253 = validateParameter(valid_564253, JString, required = true,
                                 default = nil)
  if valid_564253 != nil:
    section.add "resourceGroupName", valid_564253
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564254 = query.getOrDefault("api-version")
  valid_564254 = validateParameter(valid_564254, JString, required = true,
                                 default = nil)
  if valid_564254 != nil:
    section.add "api-version", valid_564254
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564256: Call_WebAppsListBackupStatusSecrets_564247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_564256.validator(path, query, header, formData, body)
  let scheme = call_564256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564256.url(scheme.get, call_564256.host, call_564256.base,
                         call_564256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564256, url, valid)

proc call*(call_564257: Call_WebAppsListBackupStatusSecrets_564247;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsListBackupStatusSecrets
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on backup request.
  var path_564258 = newJObject()
  var query_564259 = newJObject()
  var body_564260 = newJObject()
  add(query_564259, "api-version", newJString(apiVersion))
  add(path_564258, "name", newJString(name))
  add(path_564258, "subscriptionId", newJString(subscriptionId))
  add(path_564258, "backupId", newJString(backupId))
  add(path_564258, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564260 = request
  result = call_564257.call(path_564258, query_564259, nil, nil, body_564260)

var webAppsListBackupStatusSecrets* = Call_WebAppsListBackupStatusSecrets_564247(
    name: "webAppsListBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecrets_564248, base: "",
    url: url_WebAppsListBackupStatusSecrets_564249, schemes: {Scheme.Https})
type
  Call_WebAppsRestore_564261 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestore_564263(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestore_564262(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564264 = path.getOrDefault("name")
  valid_564264 = validateParameter(valid_564264, JString, required = true,
                                 default = nil)
  if valid_564264 != nil:
    section.add "name", valid_564264
  var valid_564265 = path.getOrDefault("subscriptionId")
  valid_564265 = validateParameter(valid_564265, JString, required = true,
                                 default = nil)
  if valid_564265 != nil:
    section.add "subscriptionId", valid_564265
  var valid_564266 = path.getOrDefault("backupId")
  valid_564266 = validateParameter(valid_564266, JString, required = true,
                                 default = nil)
  if valid_564266 != nil:
    section.add "backupId", valid_564266
  var valid_564267 = path.getOrDefault("resourceGroupName")
  valid_564267 = validateParameter(valid_564267, JString, required = true,
                                 default = nil)
  if valid_564267 != nil:
    section.add "resourceGroupName", valid_564267
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564268 = query.getOrDefault("api-version")
  valid_564268 = validateParameter(valid_564268, JString, required = true,
                                 default = nil)
  if valid_564268 != nil:
    section.add "api-version", valid_564268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564270: Call_WebAppsRestore_564261; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_564270.validator(path, query, header, formData, body)
  let scheme = call_564270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564270.url(scheme.get, call_564270.host, call_564270.base,
                         call_564270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564270, url, valid)

proc call*(call_564271: Call_WebAppsRestore_564261; apiVersion: string; name: string;
          subscriptionId: string; backupId: string; resourceGroupName: string;
          request: JsonNode): Recallable =
  ## webAppsRestore
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_564272 = newJObject()
  var query_564273 = newJObject()
  var body_564274 = newJObject()
  add(query_564273, "api-version", newJString(apiVersion))
  add(path_564272, "name", newJString(name))
  add(path_564272, "subscriptionId", newJString(subscriptionId))
  add(path_564272, "backupId", newJString(backupId))
  add(path_564272, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564274 = request
  result = call_564271.call(path_564272, query_564273, nil, nil, body_564274)

var webAppsRestore* = Call_WebAppsRestore_564261(name: "webAppsRestore",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_WebAppsRestore_564262, base: "", url: url_WebAppsRestore_564263,
    schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurations_564275 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurations_564277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurations_564276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564278 = path.getOrDefault("name")
  valid_564278 = validateParameter(valid_564278, JString, required = true,
                                 default = nil)
  if valid_564278 != nil:
    section.add "name", valid_564278
  var valid_564279 = path.getOrDefault("subscriptionId")
  valid_564279 = validateParameter(valid_564279, JString, required = true,
                                 default = nil)
  if valid_564279 != nil:
    section.add "subscriptionId", valid_564279
  var valid_564280 = path.getOrDefault("resourceGroupName")
  valid_564280 = validateParameter(valid_564280, JString, required = true,
                                 default = nil)
  if valid_564280 != nil:
    section.add "resourceGroupName", valid_564280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564281 = query.getOrDefault("api-version")
  valid_564281 = validateParameter(valid_564281, JString, required = true,
                                 default = nil)
  if valid_564281 != nil:
    section.add "api-version", valid_564281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564282: Call_WebAppsListConfigurations_564275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_564282.validator(path, query, header, formData, body)
  let scheme = call_564282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564282.url(scheme.get, call_564282.host, call_564282.base,
                         call_564282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564282, url, valid)

proc call*(call_564283: Call_WebAppsListConfigurations_564275; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListConfigurations
  ## List the configurations of an app
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564284 = newJObject()
  var query_564285 = newJObject()
  add(query_564285, "api-version", newJString(apiVersion))
  add(path_564284, "name", newJString(name))
  add(path_564284, "subscriptionId", newJString(subscriptionId))
  add(path_564284, "resourceGroupName", newJString(resourceGroupName))
  result = call_564283.call(path_564284, query_564285, nil, nil, nil)

var webAppsListConfigurations* = Call_WebAppsListConfigurations_564275(
    name: "webAppsListConfigurations", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    validator: validate_WebAppsListConfigurations_564276, base: "",
    url: url_WebAppsListConfigurations_564277, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettings_564286 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateApplicationSettings_564288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettings_564287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564289 = path.getOrDefault("name")
  valid_564289 = validateParameter(valid_564289, JString, required = true,
                                 default = nil)
  if valid_564289 != nil:
    section.add "name", valid_564289
  var valid_564290 = path.getOrDefault("subscriptionId")
  valid_564290 = validateParameter(valid_564290, JString, required = true,
                                 default = nil)
  if valid_564290 != nil:
    section.add "subscriptionId", valid_564290
  var valid_564291 = path.getOrDefault("resourceGroupName")
  valid_564291 = validateParameter(valid_564291, JString, required = true,
                                 default = nil)
  if valid_564291 != nil:
    section.add "resourceGroupName", valid_564291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564292 = query.getOrDefault("api-version")
  valid_564292 = validateParameter(valid_564292, JString, required = true,
                                 default = nil)
  if valid_564292 != nil:
    section.add "api-version", valid_564292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564294: Call_WebAppsUpdateApplicationSettings_564286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_564294.validator(path, query, header, formData, body)
  let scheme = call_564294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564294.url(scheme.get, call_564294.host, call_564294.base,
                         call_564294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564294, url, valid)

proc call*(call_564295: Call_WebAppsUpdateApplicationSettings_564286;
          appSettings: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateApplicationSettings
  ## Replaces the application settings of an app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564296 = newJObject()
  var query_564297 = newJObject()
  var body_564298 = newJObject()
  if appSettings != nil:
    body_564298 = appSettings
  add(query_564297, "api-version", newJString(apiVersion))
  add(path_564296, "name", newJString(name))
  add(path_564296, "subscriptionId", newJString(subscriptionId))
  add(path_564296, "resourceGroupName", newJString(resourceGroupName))
  result = call_564295.call(path_564296, query_564297, nil, nil, body_564298)

var webAppsUpdateApplicationSettings* = Call_WebAppsUpdateApplicationSettings_564286(
    name: "webAppsUpdateApplicationSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettings_564287, base: "",
    url: url_WebAppsUpdateApplicationSettings_564288, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettings_564299 = ref object of OpenApiRestCall_563564
proc url_WebAppsListApplicationSettings_564301(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettings_564300(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564302 = path.getOrDefault("name")
  valid_564302 = validateParameter(valid_564302, JString, required = true,
                                 default = nil)
  if valid_564302 != nil:
    section.add "name", valid_564302
  var valid_564303 = path.getOrDefault("subscriptionId")
  valid_564303 = validateParameter(valid_564303, JString, required = true,
                                 default = nil)
  if valid_564303 != nil:
    section.add "subscriptionId", valid_564303
  var valid_564304 = path.getOrDefault("resourceGroupName")
  valid_564304 = validateParameter(valid_564304, JString, required = true,
                                 default = nil)
  if valid_564304 != nil:
    section.add "resourceGroupName", valid_564304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564305 = query.getOrDefault("api-version")
  valid_564305 = validateParameter(valid_564305, JString, required = true,
                                 default = nil)
  if valid_564305 != nil:
    section.add "api-version", valid_564305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564306: Call_WebAppsListApplicationSettings_564299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_564306.validator(path, query, header, formData, body)
  let scheme = call_564306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564306.url(scheme.get, call_564306.host, call_564306.base,
                         call_564306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564306, url, valid)

proc call*(call_564307: Call_WebAppsListApplicationSettings_564299;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListApplicationSettings
  ## Gets the application settings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564308 = newJObject()
  var query_564309 = newJObject()
  add(query_564309, "api-version", newJString(apiVersion))
  add(path_564308, "name", newJString(name))
  add(path_564308, "subscriptionId", newJString(subscriptionId))
  add(path_564308, "resourceGroupName", newJString(resourceGroupName))
  result = call_564307.call(path_564308, query_564309, nil, nil, nil)

var webAppsListApplicationSettings* = Call_WebAppsListApplicationSettings_564299(
    name: "webAppsListApplicationSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettings_564300, base: "",
    url: url_WebAppsListApplicationSettings_564301, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettings_564310 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateAuthSettings_564312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettings_564311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564313 = path.getOrDefault("name")
  valid_564313 = validateParameter(valid_564313, JString, required = true,
                                 default = nil)
  if valid_564313 != nil:
    section.add "name", valid_564313
  var valid_564314 = path.getOrDefault("subscriptionId")
  valid_564314 = validateParameter(valid_564314, JString, required = true,
                                 default = nil)
  if valid_564314 != nil:
    section.add "subscriptionId", valid_564314
  var valid_564315 = path.getOrDefault("resourceGroupName")
  valid_564315 = validateParameter(valid_564315, JString, required = true,
                                 default = nil)
  if valid_564315 != nil:
    section.add "resourceGroupName", valid_564315
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564316 = query.getOrDefault("api-version")
  valid_564316 = validateParameter(valid_564316, JString, required = true,
                                 default = nil)
  if valid_564316 != nil:
    section.add "api-version", valid_564316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564318: Call_WebAppsUpdateAuthSettings_564310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_564318.validator(path, query, header, formData, body)
  let scheme = call_564318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564318.url(scheme.get, call_564318.host, call_564318.base,
                         call_564318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564318, url, valid)

proc call*(call_564319: Call_WebAppsUpdateAuthSettings_564310; apiVersion: string;
          siteAuthSettings: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateAuthSettings
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564320 = newJObject()
  var query_564321 = newJObject()
  var body_564322 = newJObject()
  add(query_564321, "api-version", newJString(apiVersion))
  if siteAuthSettings != nil:
    body_564322 = siteAuthSettings
  add(path_564320, "name", newJString(name))
  add(path_564320, "subscriptionId", newJString(subscriptionId))
  add(path_564320, "resourceGroupName", newJString(resourceGroupName))
  result = call_564319.call(path_564320, query_564321, nil, nil, body_564322)

var webAppsUpdateAuthSettings* = Call_WebAppsUpdateAuthSettings_564310(
    name: "webAppsUpdateAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettings_564311, base: "",
    url: url_WebAppsUpdateAuthSettings_564312, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettings_564323 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetAuthSettings_564325(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettings_564324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564326 = path.getOrDefault("name")
  valid_564326 = validateParameter(valid_564326, JString, required = true,
                                 default = nil)
  if valid_564326 != nil:
    section.add "name", valid_564326
  var valid_564327 = path.getOrDefault("subscriptionId")
  valid_564327 = validateParameter(valid_564327, JString, required = true,
                                 default = nil)
  if valid_564327 != nil:
    section.add "subscriptionId", valid_564327
  var valid_564328 = path.getOrDefault("resourceGroupName")
  valid_564328 = validateParameter(valid_564328, JString, required = true,
                                 default = nil)
  if valid_564328 != nil:
    section.add "resourceGroupName", valid_564328
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564329 = query.getOrDefault("api-version")
  valid_564329 = validateParameter(valid_564329, JString, required = true,
                                 default = nil)
  if valid_564329 != nil:
    section.add "api-version", valid_564329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564330: Call_WebAppsGetAuthSettings_564323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_564330.validator(path, query, header, formData, body)
  let scheme = call_564330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564330.url(scheme.get, call_564330.host, call_564330.base,
                         call_564330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564330, url, valid)

proc call*(call_564331: Call_WebAppsGetAuthSettings_564323; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetAuthSettings
  ## Gets the Authentication/Authorization settings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564332 = newJObject()
  var query_564333 = newJObject()
  add(query_564333, "api-version", newJString(apiVersion))
  add(path_564332, "name", newJString(name))
  add(path_564332, "subscriptionId", newJString(subscriptionId))
  add(path_564332, "resourceGroupName", newJString(resourceGroupName))
  result = call_564331.call(path_564332, query_564333, nil, nil, nil)

var webAppsGetAuthSettings* = Call_WebAppsGetAuthSettings_564323(
    name: "webAppsGetAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettings_564324, base: "",
    url: url_WebAppsGetAuthSettings_564325, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfiguration_564334 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateBackupConfiguration_564336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfiguration_564335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564337 = path.getOrDefault("name")
  valid_564337 = validateParameter(valid_564337, JString, required = true,
                                 default = nil)
  if valid_564337 != nil:
    section.add "name", valid_564337
  var valid_564338 = path.getOrDefault("subscriptionId")
  valid_564338 = validateParameter(valid_564338, JString, required = true,
                                 default = nil)
  if valid_564338 != nil:
    section.add "subscriptionId", valid_564338
  var valid_564339 = path.getOrDefault("resourceGroupName")
  valid_564339 = validateParameter(valid_564339, JString, required = true,
                                 default = nil)
  if valid_564339 != nil:
    section.add "resourceGroupName", valid_564339
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564340 = query.getOrDefault("api-version")
  valid_564340 = validateParameter(valid_564340, JString, required = true,
                                 default = nil)
  if valid_564340 != nil:
    section.add "api-version", valid_564340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564342: Call_WebAppsUpdateBackupConfiguration_564334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_564342.validator(path, query, header, formData, body)
  let scheme = call_564342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564342.url(scheme.get, call_564342.host, call_564342.base,
                         call_564342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564342, url, valid)

proc call*(call_564343: Call_WebAppsUpdateBackupConfiguration_564334;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfiguration
  ## Updates the backup configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_564344 = newJObject()
  var query_564345 = newJObject()
  var body_564346 = newJObject()
  add(query_564345, "api-version", newJString(apiVersion))
  add(path_564344, "name", newJString(name))
  add(path_564344, "subscriptionId", newJString(subscriptionId))
  add(path_564344, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_564346 = request
  result = call_564343.call(path_564344, query_564345, nil, nil, body_564346)

var webAppsUpdateBackupConfiguration* = Call_WebAppsUpdateBackupConfiguration_564334(
    name: "webAppsUpdateBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsUpdateBackupConfiguration_564335, base: "",
    url: url_WebAppsUpdateBackupConfiguration_564336, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfiguration_564347 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackupConfiguration_564349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfiguration_564348(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564350 = path.getOrDefault("name")
  valid_564350 = validateParameter(valid_564350, JString, required = true,
                                 default = nil)
  if valid_564350 != nil:
    section.add "name", valid_564350
  var valid_564351 = path.getOrDefault("subscriptionId")
  valid_564351 = validateParameter(valid_564351, JString, required = true,
                                 default = nil)
  if valid_564351 != nil:
    section.add "subscriptionId", valid_564351
  var valid_564352 = path.getOrDefault("resourceGroupName")
  valid_564352 = validateParameter(valid_564352, JString, required = true,
                                 default = nil)
  if valid_564352 != nil:
    section.add "resourceGroupName", valid_564352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564353 = query.getOrDefault("api-version")
  valid_564353 = validateParameter(valid_564353, JString, required = true,
                                 default = nil)
  if valid_564353 != nil:
    section.add "api-version", valid_564353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564354: Call_WebAppsDeleteBackupConfiguration_564347;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_564354.validator(path, query, header, formData, body)
  let scheme = call_564354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564354.url(scheme.get, call_564354.host, call_564354.base,
                         call_564354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564354, url, valid)

proc call*(call_564355: Call_WebAppsDeleteBackupConfiguration_564347;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackupConfiguration
  ## Deletes the backup configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564356 = newJObject()
  var query_564357 = newJObject()
  add(query_564357, "api-version", newJString(apiVersion))
  add(path_564356, "name", newJString(name))
  add(path_564356, "subscriptionId", newJString(subscriptionId))
  add(path_564356, "resourceGroupName", newJString(resourceGroupName))
  result = call_564355.call(path_564356, query_564357, nil, nil, nil)

var webAppsDeleteBackupConfiguration* = Call_WebAppsDeleteBackupConfiguration_564347(
    name: "webAppsDeleteBackupConfiguration", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsDeleteBackupConfiguration_564348, base: "",
    url: url_WebAppsDeleteBackupConfiguration_564349, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfiguration_564358 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupConfiguration_564360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfiguration_564359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564361 = path.getOrDefault("name")
  valid_564361 = validateParameter(valid_564361, JString, required = true,
                                 default = nil)
  if valid_564361 != nil:
    section.add "name", valid_564361
  var valid_564362 = path.getOrDefault("subscriptionId")
  valid_564362 = validateParameter(valid_564362, JString, required = true,
                                 default = nil)
  if valid_564362 != nil:
    section.add "subscriptionId", valid_564362
  var valid_564363 = path.getOrDefault("resourceGroupName")
  valid_564363 = validateParameter(valid_564363, JString, required = true,
                                 default = nil)
  if valid_564363 != nil:
    section.add "resourceGroupName", valid_564363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564364 = query.getOrDefault("api-version")
  valid_564364 = validateParameter(valid_564364, JString, required = true,
                                 default = nil)
  if valid_564364 != nil:
    section.add "api-version", valid_564364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564365: Call_WebAppsGetBackupConfiguration_564358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_564365.validator(path, query, header, formData, body)
  let scheme = call_564365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564365.url(scheme.get, call_564365.host, call_564365.base,
                         call_564365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564365, url, valid)

proc call*(call_564366: Call_WebAppsGetBackupConfiguration_564358;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupConfiguration
  ## Gets the backup configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564367 = newJObject()
  var query_564368 = newJObject()
  add(query_564368, "api-version", newJString(apiVersion))
  add(path_564367, "name", newJString(name))
  add(path_564367, "subscriptionId", newJString(subscriptionId))
  add(path_564367, "resourceGroupName", newJString(resourceGroupName))
  result = call_564366.call(path_564367, query_564368, nil, nil, nil)

var webAppsGetBackupConfiguration* = Call_WebAppsGetBackupConfiguration_564358(
    name: "webAppsGetBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_WebAppsGetBackupConfiguration_564359, base: "",
    url: url_WebAppsGetBackupConfiguration_564360, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStrings_564369 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConnectionStrings_564371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStrings_564370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564372 = path.getOrDefault("name")
  valid_564372 = validateParameter(valid_564372, JString, required = true,
                                 default = nil)
  if valid_564372 != nil:
    section.add "name", valid_564372
  var valid_564373 = path.getOrDefault("subscriptionId")
  valid_564373 = validateParameter(valid_564373, JString, required = true,
                                 default = nil)
  if valid_564373 != nil:
    section.add "subscriptionId", valid_564373
  var valid_564374 = path.getOrDefault("resourceGroupName")
  valid_564374 = validateParameter(valid_564374, JString, required = true,
                                 default = nil)
  if valid_564374 != nil:
    section.add "resourceGroupName", valid_564374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564375 = query.getOrDefault("api-version")
  valid_564375 = validateParameter(valid_564375, JString, required = true,
                                 default = nil)
  if valid_564375 != nil:
    section.add "api-version", valid_564375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564377: Call_WebAppsUpdateConnectionStrings_564369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_564377.validator(path, query, header, formData, body)
  let scheme = call_564377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564377.url(scheme.get, call_564377.host, call_564377.base,
                         call_564377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564377, url, valid)

proc call*(call_564378: Call_WebAppsUpdateConnectionStrings_564369;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; connectionStrings: JsonNode): Recallable =
  ## webAppsUpdateConnectionStrings
  ## Replaces the connection strings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  var path_564379 = newJObject()
  var query_564380 = newJObject()
  var body_564381 = newJObject()
  add(query_564380, "api-version", newJString(apiVersion))
  add(path_564379, "name", newJString(name))
  add(path_564379, "subscriptionId", newJString(subscriptionId))
  add(path_564379, "resourceGroupName", newJString(resourceGroupName))
  if connectionStrings != nil:
    body_564381 = connectionStrings
  result = call_564378.call(path_564379, query_564380, nil, nil, body_564381)

var webAppsUpdateConnectionStrings* = Call_WebAppsUpdateConnectionStrings_564369(
    name: "webAppsUpdateConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStrings_564370, base: "",
    url: url_WebAppsUpdateConnectionStrings_564371, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStrings_564382 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConnectionStrings_564384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStrings_564383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564385 = path.getOrDefault("name")
  valid_564385 = validateParameter(valid_564385, JString, required = true,
                                 default = nil)
  if valid_564385 != nil:
    section.add "name", valid_564385
  var valid_564386 = path.getOrDefault("subscriptionId")
  valid_564386 = validateParameter(valid_564386, JString, required = true,
                                 default = nil)
  if valid_564386 != nil:
    section.add "subscriptionId", valid_564386
  var valid_564387 = path.getOrDefault("resourceGroupName")
  valid_564387 = validateParameter(valid_564387, JString, required = true,
                                 default = nil)
  if valid_564387 != nil:
    section.add "resourceGroupName", valid_564387
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564388 = query.getOrDefault("api-version")
  valid_564388 = validateParameter(valid_564388, JString, required = true,
                                 default = nil)
  if valid_564388 != nil:
    section.add "api-version", valid_564388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564389: Call_WebAppsListConnectionStrings_564382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_564389.validator(path, query, header, formData, body)
  let scheme = call_564389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564389.url(scheme.get, call_564389.host, call_564389.base,
                         call_564389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564389, url, valid)

proc call*(call_564390: Call_WebAppsListConnectionStrings_564382;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConnectionStrings
  ## Gets the connection strings of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564391 = newJObject()
  var query_564392 = newJObject()
  add(query_564392, "api-version", newJString(apiVersion))
  add(path_564391, "name", newJString(name))
  add(path_564391, "subscriptionId", newJString(subscriptionId))
  add(path_564391, "resourceGroupName", newJString(resourceGroupName))
  result = call_564390.call(path_564391, query_564392, nil, nil, nil)

var webAppsListConnectionStrings* = Call_WebAppsListConnectionStrings_564382(
    name: "webAppsListConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStrings_564383, base: "",
    url: url_WebAppsListConnectionStrings_564384, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfig_564404 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDiagnosticLogsConfig_564406(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfig_564405(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564407 = path.getOrDefault("name")
  valid_564407 = validateParameter(valid_564407, JString, required = true,
                                 default = nil)
  if valid_564407 != nil:
    section.add "name", valid_564407
  var valid_564408 = path.getOrDefault("subscriptionId")
  valid_564408 = validateParameter(valid_564408, JString, required = true,
                                 default = nil)
  if valid_564408 != nil:
    section.add "subscriptionId", valid_564408
  var valid_564409 = path.getOrDefault("resourceGroupName")
  valid_564409 = validateParameter(valid_564409, JString, required = true,
                                 default = nil)
  if valid_564409 != nil:
    section.add "resourceGroupName", valid_564409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564410 = query.getOrDefault("api-version")
  valid_564410 = validateParameter(valid_564410, JString, required = true,
                                 default = nil)
  if valid_564410 != nil:
    section.add "api-version", valid_564410
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564412: Call_WebAppsUpdateDiagnosticLogsConfig_564404;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_564412.validator(path, query, header, formData, body)
  let scheme = call_564412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564412.url(scheme.get, call_564412.host, call_564412.base,
                         call_564412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564412, url, valid)

proc call*(call_564413: Call_WebAppsUpdateDiagnosticLogsConfig_564404;
          apiVersion: string; siteLogsConfig: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfig
  ## Updates the logging configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564414 = newJObject()
  var query_564415 = newJObject()
  var body_564416 = newJObject()
  add(query_564415, "api-version", newJString(apiVersion))
  if siteLogsConfig != nil:
    body_564416 = siteLogsConfig
  add(path_564414, "name", newJString(name))
  add(path_564414, "subscriptionId", newJString(subscriptionId))
  add(path_564414, "resourceGroupName", newJString(resourceGroupName))
  result = call_564413.call(path_564414, query_564415, nil, nil, body_564416)

var webAppsUpdateDiagnosticLogsConfig* = Call_WebAppsUpdateDiagnosticLogsConfig_564404(
    name: "webAppsUpdateDiagnosticLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfig_564405, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfig_564406, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfiguration_564393 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDiagnosticLogsConfiguration_564395(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfiguration_564394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564396 = path.getOrDefault("name")
  valid_564396 = validateParameter(valid_564396, JString, required = true,
                                 default = nil)
  if valid_564396 != nil:
    section.add "name", valid_564396
  var valid_564397 = path.getOrDefault("subscriptionId")
  valid_564397 = validateParameter(valid_564397, JString, required = true,
                                 default = nil)
  if valid_564397 != nil:
    section.add "subscriptionId", valid_564397
  var valid_564398 = path.getOrDefault("resourceGroupName")
  valid_564398 = validateParameter(valid_564398, JString, required = true,
                                 default = nil)
  if valid_564398 != nil:
    section.add "resourceGroupName", valid_564398
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564399 = query.getOrDefault("api-version")
  valid_564399 = validateParameter(valid_564399, JString, required = true,
                                 default = nil)
  if valid_564399 != nil:
    section.add "api-version", valid_564399
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564400: Call_WebAppsGetDiagnosticLogsConfiguration_564393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_564400.validator(path, query, header, formData, body)
  let scheme = call_564400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564400.url(scheme.get, call_564400.host, call_564400.base,
                         call_564400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564400, url, valid)

proc call*(call_564401: Call_WebAppsGetDiagnosticLogsConfiguration_564393;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetDiagnosticLogsConfiguration
  ## Gets the logging configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564402 = newJObject()
  var query_564403 = newJObject()
  add(query_564403, "api-version", newJString(apiVersion))
  add(path_564402, "name", newJString(name))
  add(path_564402, "subscriptionId", newJString(subscriptionId))
  add(path_564402, "resourceGroupName", newJString(resourceGroupName))
  result = call_564401.call(path_564402, query_564403, nil, nil, nil)

var webAppsGetDiagnosticLogsConfiguration* = Call_WebAppsGetDiagnosticLogsConfiguration_564393(
    name: "webAppsGetDiagnosticLogsConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfiguration_564394, base: "",
    url: url_WebAppsGetDiagnosticLogsConfiguration_564395, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadata_564417 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateMetadata_564419(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadata_564418(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564420 = path.getOrDefault("name")
  valid_564420 = validateParameter(valid_564420, JString, required = true,
                                 default = nil)
  if valid_564420 != nil:
    section.add "name", valid_564420
  var valid_564421 = path.getOrDefault("subscriptionId")
  valid_564421 = validateParameter(valid_564421, JString, required = true,
                                 default = nil)
  if valid_564421 != nil:
    section.add "subscriptionId", valid_564421
  var valid_564422 = path.getOrDefault("resourceGroupName")
  valid_564422 = validateParameter(valid_564422, JString, required = true,
                                 default = nil)
  if valid_564422 != nil:
    section.add "resourceGroupName", valid_564422
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564423 = query.getOrDefault("api-version")
  valid_564423 = validateParameter(valid_564423, JString, required = true,
                                 default = nil)
  if valid_564423 != nil:
    section.add "api-version", valid_564423
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564425: Call_WebAppsUpdateMetadata_564417; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_564425.validator(path, query, header, formData, body)
  let scheme = call_564425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564425.url(scheme.get, call_564425.host, call_564425.base,
                         call_564425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564425, url, valid)

proc call*(call_564426: Call_WebAppsUpdateMetadata_564417; metadata: JsonNode;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateMetadata
  ## Replaces the metadata of an app.
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564427 = newJObject()
  var query_564428 = newJObject()
  var body_564429 = newJObject()
  if metadata != nil:
    body_564429 = metadata
  add(query_564428, "api-version", newJString(apiVersion))
  add(path_564427, "name", newJString(name))
  add(path_564427, "subscriptionId", newJString(subscriptionId))
  add(path_564427, "resourceGroupName", newJString(resourceGroupName))
  result = call_564426.call(path_564427, query_564428, nil, nil, body_564429)

var webAppsUpdateMetadata* = Call_WebAppsUpdateMetadata_564417(
    name: "webAppsUpdateMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_WebAppsUpdateMetadata_564418, base: "",
    url: url_WebAppsUpdateMetadata_564419, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadata_564430 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetadata_564432(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadata_564431(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564433 = path.getOrDefault("name")
  valid_564433 = validateParameter(valid_564433, JString, required = true,
                                 default = nil)
  if valid_564433 != nil:
    section.add "name", valid_564433
  var valid_564434 = path.getOrDefault("subscriptionId")
  valid_564434 = validateParameter(valid_564434, JString, required = true,
                                 default = nil)
  if valid_564434 != nil:
    section.add "subscriptionId", valid_564434
  var valid_564435 = path.getOrDefault("resourceGroupName")
  valid_564435 = validateParameter(valid_564435, JString, required = true,
                                 default = nil)
  if valid_564435 != nil:
    section.add "resourceGroupName", valid_564435
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564436 = query.getOrDefault("api-version")
  valid_564436 = validateParameter(valid_564436, JString, required = true,
                                 default = nil)
  if valid_564436 != nil:
    section.add "api-version", valid_564436
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564437: Call_WebAppsListMetadata_564430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_564437.validator(path, query, header, formData, body)
  let scheme = call_564437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564437.url(scheme.get, call_564437.host, call_564437.base,
                         call_564437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564437, url, valid)

proc call*(call_564438: Call_WebAppsListMetadata_564430; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListMetadata
  ## Gets the metadata of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564439 = newJObject()
  var query_564440 = newJObject()
  add(query_564440, "api-version", newJString(apiVersion))
  add(path_564439, "name", newJString(name))
  add(path_564439, "subscriptionId", newJString(subscriptionId))
  add(path_564439, "resourceGroupName", newJString(resourceGroupName))
  result = call_564438.call(path_564439, query_564440, nil, nil, nil)

var webAppsListMetadata* = Call_WebAppsListMetadata_564430(
    name: "webAppsListMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_WebAppsListMetadata_564431, base: "",
    url: url_WebAppsListMetadata_564432, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentials_564441 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingCredentials_564443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentials_564442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564444 = path.getOrDefault("name")
  valid_564444 = validateParameter(valid_564444, JString, required = true,
                                 default = nil)
  if valid_564444 != nil:
    section.add "name", valid_564444
  var valid_564445 = path.getOrDefault("subscriptionId")
  valid_564445 = validateParameter(valid_564445, JString, required = true,
                                 default = nil)
  if valid_564445 != nil:
    section.add "subscriptionId", valid_564445
  var valid_564446 = path.getOrDefault("resourceGroupName")
  valid_564446 = validateParameter(valid_564446, JString, required = true,
                                 default = nil)
  if valid_564446 != nil:
    section.add "resourceGroupName", valid_564446
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564447 = query.getOrDefault("api-version")
  valid_564447 = validateParameter(valid_564447, JString, required = true,
                                 default = nil)
  if valid_564447 != nil:
    section.add "api-version", valid_564447
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564448: Call_WebAppsListPublishingCredentials_564441;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_564448.validator(path, query, header, formData, body)
  let scheme = call_564448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564448.url(scheme.get, call_564448.host, call_564448.base,
                         call_564448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564448, url, valid)

proc call*(call_564449: Call_WebAppsListPublishingCredentials_564441;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublishingCredentials
  ## Gets the Git/FTP publishing credentials of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564450 = newJObject()
  var query_564451 = newJObject()
  add(query_564451, "api-version", newJString(apiVersion))
  add(path_564450, "name", newJString(name))
  add(path_564450, "subscriptionId", newJString(subscriptionId))
  add(path_564450, "resourceGroupName", newJString(resourceGroupName))
  result = call_564449.call(path_564450, query_564451, nil, nil, nil)

var webAppsListPublishingCredentials* = Call_WebAppsListPublishingCredentials_564441(
    name: "webAppsListPublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentials_564442, base: "",
    url: url_WebAppsListPublishingCredentials_564443, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettings_564452 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSitePushSettings_564454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettings_564453(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564455 = path.getOrDefault("name")
  valid_564455 = validateParameter(valid_564455, JString, required = true,
                                 default = nil)
  if valid_564455 != nil:
    section.add "name", valid_564455
  var valid_564456 = path.getOrDefault("subscriptionId")
  valid_564456 = validateParameter(valid_564456, JString, required = true,
                                 default = nil)
  if valid_564456 != nil:
    section.add "subscriptionId", valid_564456
  var valid_564457 = path.getOrDefault("resourceGroupName")
  valid_564457 = validateParameter(valid_564457, JString, required = true,
                                 default = nil)
  if valid_564457 != nil:
    section.add "resourceGroupName", valid_564457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564458 = query.getOrDefault("api-version")
  valid_564458 = validateParameter(valid_564458, JString, required = true,
                                 default = nil)
  if valid_564458 != nil:
    section.add "api-version", valid_564458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564460: Call_WebAppsUpdateSitePushSettings_564452; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_564460.validator(path, query, header, formData, body)
  let scheme = call_564460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564460.url(scheme.get, call_564460.host, call_564460.base,
                         call_564460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564460, url, valid)

proc call*(call_564461: Call_WebAppsUpdateSitePushSettings_564452;
          apiVersion: string; name: string; subscriptionId: string;
          pushSettings: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdateSitePushSettings
  ## Updates the Push settings associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564462 = newJObject()
  var query_564463 = newJObject()
  var body_564464 = newJObject()
  add(query_564463, "api-version", newJString(apiVersion))
  add(path_564462, "name", newJString(name))
  add(path_564462, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_564464 = pushSettings
  add(path_564462, "resourceGroupName", newJString(resourceGroupName))
  result = call_564461.call(path_564462, query_564463, nil, nil, body_564464)

var webAppsUpdateSitePushSettings* = Call_WebAppsUpdateSitePushSettings_564452(
    name: "webAppsUpdateSitePushSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettings_564453, base: "",
    url: url_WebAppsUpdateSitePushSettings_564454, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettings_564465 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSitePushSettings_564467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettings_564466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564468 = path.getOrDefault("name")
  valid_564468 = validateParameter(valid_564468, JString, required = true,
                                 default = nil)
  if valid_564468 != nil:
    section.add "name", valid_564468
  var valid_564469 = path.getOrDefault("subscriptionId")
  valid_564469 = validateParameter(valid_564469, JString, required = true,
                                 default = nil)
  if valid_564469 != nil:
    section.add "subscriptionId", valid_564469
  var valid_564470 = path.getOrDefault("resourceGroupName")
  valid_564470 = validateParameter(valid_564470, JString, required = true,
                                 default = nil)
  if valid_564470 != nil:
    section.add "resourceGroupName", valid_564470
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564471 = query.getOrDefault("api-version")
  valid_564471 = validateParameter(valid_564471, JString, required = true,
                                 default = nil)
  if valid_564471 != nil:
    section.add "api-version", valid_564471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564472: Call_WebAppsListSitePushSettings_564465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_564472.validator(path, query, header, formData, body)
  let scheme = call_564472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564472.url(scheme.get, call_564472.host, call_564472.base,
                         call_564472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564472, url, valid)

proc call*(call_564473: Call_WebAppsListSitePushSettings_564465;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSitePushSettings
  ## Gets the Push settings associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564474 = newJObject()
  var query_564475 = newJObject()
  add(query_564475, "api-version", newJString(apiVersion))
  add(path_564474, "name", newJString(name))
  add(path_564474, "subscriptionId", newJString(subscriptionId))
  add(path_564474, "resourceGroupName", newJString(resourceGroupName))
  result = call_564473.call(path_564474, query_564475, nil, nil, nil)

var webAppsListSitePushSettings* = Call_WebAppsListSitePushSettings_564465(
    name: "webAppsListSitePushSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettings_564466, base: "",
    url: url_WebAppsListSitePushSettings_564467, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlotConfigurationNames_564487 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSlotConfigurationNames_564489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlotConfigurationNames_564488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564490 = path.getOrDefault("name")
  valid_564490 = validateParameter(valid_564490, JString, required = true,
                                 default = nil)
  if valid_564490 != nil:
    section.add "name", valid_564490
  var valid_564491 = path.getOrDefault("subscriptionId")
  valid_564491 = validateParameter(valid_564491, JString, required = true,
                                 default = nil)
  if valid_564491 != nil:
    section.add "subscriptionId", valid_564491
  var valid_564492 = path.getOrDefault("resourceGroupName")
  valid_564492 = validateParameter(valid_564492, JString, required = true,
                                 default = nil)
  if valid_564492 != nil:
    section.add "resourceGroupName", valid_564492
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564493 = query.getOrDefault("api-version")
  valid_564493 = validateParameter(valid_564493, JString, required = true,
                                 default = nil)
  if valid_564493 != nil:
    section.add "api-version", valid_564493
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564495: Call_WebAppsUpdateSlotConfigurationNames_564487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  let valid = call_564495.validator(path, query, header, formData, body)
  let scheme = call_564495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564495.url(scheme.get, call_564495.host, call_564495.base,
                         call_564495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564495, url, valid)

proc call*(call_564496: Call_WebAppsUpdateSlotConfigurationNames_564487;
          apiVersion: string; slotConfigNames: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSlotConfigurationNames
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564497 = newJObject()
  var query_564498 = newJObject()
  var body_564499 = newJObject()
  add(query_564498, "api-version", newJString(apiVersion))
  if slotConfigNames != nil:
    body_564499 = slotConfigNames
  add(path_564497, "name", newJString(name))
  add(path_564497, "subscriptionId", newJString(subscriptionId))
  add(path_564497, "resourceGroupName", newJString(resourceGroupName))
  result = call_564496.call(path_564497, query_564498, nil, nil, body_564499)

var webAppsUpdateSlotConfigurationNames* = Call_WebAppsUpdateSlotConfigurationNames_564487(
    name: "webAppsUpdateSlotConfigurationNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsUpdateSlotConfigurationNames_564488, base: "",
    url: url_WebAppsUpdateSlotConfigurationNames_564489, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotConfigurationNames_564476 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlotConfigurationNames_564478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotConfigurationNames_564477(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564479 = path.getOrDefault("name")
  valid_564479 = validateParameter(valid_564479, JString, required = true,
                                 default = nil)
  if valid_564479 != nil:
    section.add "name", valid_564479
  var valid_564480 = path.getOrDefault("subscriptionId")
  valid_564480 = validateParameter(valid_564480, JString, required = true,
                                 default = nil)
  if valid_564480 != nil:
    section.add "subscriptionId", valid_564480
  var valid_564481 = path.getOrDefault("resourceGroupName")
  valid_564481 = validateParameter(valid_564481, JString, required = true,
                                 default = nil)
  if valid_564481 != nil:
    section.add "resourceGroupName", valid_564481
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564482 = query.getOrDefault("api-version")
  valid_564482 = validateParameter(valid_564482, JString, required = true,
                                 default = nil)
  if valid_564482 != nil:
    section.add "api-version", valid_564482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564483: Call_WebAppsListSlotConfigurationNames_564476;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  let valid = call_564483.validator(path, query, header, formData, body)
  let scheme = call_564483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564483.url(scheme.get, call_564483.host, call_564483.base,
                         call_564483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564483, url, valid)

proc call*(call_564484: Call_WebAppsListSlotConfigurationNames_564476;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSlotConfigurationNames
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564485 = newJObject()
  var query_564486 = newJObject()
  add(query_564486, "api-version", newJString(apiVersion))
  add(path_564485, "name", newJString(name))
  add(path_564485, "subscriptionId", newJString(subscriptionId))
  add(path_564485, "resourceGroupName", newJString(resourceGroupName))
  result = call_564484.call(path_564485, query_564486, nil, nil, nil)

var webAppsListSlotConfigurationNames* = Call_WebAppsListSlotConfigurationNames_564476(
    name: "webAppsListSlotConfigurationNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsListSlotConfigurationNames_564477, base: "",
    url: url_WebAppsListSlotConfigurationNames_564478, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfiguration_564511 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateConfiguration_564513(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfiguration_564512(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564514 = path.getOrDefault("name")
  valid_564514 = validateParameter(valid_564514, JString, required = true,
                                 default = nil)
  if valid_564514 != nil:
    section.add "name", valid_564514
  var valid_564515 = path.getOrDefault("subscriptionId")
  valid_564515 = validateParameter(valid_564515, JString, required = true,
                                 default = nil)
  if valid_564515 != nil:
    section.add "subscriptionId", valid_564515
  var valid_564516 = path.getOrDefault("resourceGroupName")
  valid_564516 = validateParameter(valid_564516, JString, required = true,
                                 default = nil)
  if valid_564516 != nil:
    section.add "resourceGroupName", valid_564516
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564517 = query.getOrDefault("api-version")
  valid_564517 = validateParameter(valid_564517, JString, required = true,
                                 default = nil)
  if valid_564517 != nil:
    section.add "api-version", valid_564517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564519: Call_WebAppsCreateOrUpdateConfiguration_564511;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_564519.validator(path, query, header, formData, body)
  let scheme = call_564519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564519.url(scheme.get, call_564519.host, call_564519.base,
                         call_564519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564519, url, valid)

proc call*(call_564520: Call_WebAppsCreateOrUpdateConfiguration_564511;
          apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateConfiguration
  ## Updates the configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564521 = newJObject()
  var query_564522 = newJObject()
  var body_564523 = newJObject()
  add(query_564522, "api-version", newJString(apiVersion))
  add(path_564521, "name", newJString(name))
  add(path_564521, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_564523 = siteConfig
  add(path_564521, "resourceGroupName", newJString(resourceGroupName))
  result = call_564520.call(path_564521, query_564522, nil, nil, body_564523)

var webAppsCreateOrUpdateConfiguration* = Call_WebAppsCreateOrUpdateConfiguration_564511(
    name: "webAppsCreateOrUpdateConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfiguration_564512, base: "",
    url: url_WebAppsCreateOrUpdateConfiguration_564513, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfiguration_564500 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfiguration_564502(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfiguration_564501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564503 = path.getOrDefault("name")
  valid_564503 = validateParameter(valid_564503, JString, required = true,
                                 default = nil)
  if valid_564503 != nil:
    section.add "name", valid_564503
  var valid_564504 = path.getOrDefault("subscriptionId")
  valid_564504 = validateParameter(valid_564504, JString, required = true,
                                 default = nil)
  if valid_564504 != nil:
    section.add "subscriptionId", valid_564504
  var valid_564505 = path.getOrDefault("resourceGroupName")
  valid_564505 = validateParameter(valid_564505, JString, required = true,
                                 default = nil)
  if valid_564505 != nil:
    section.add "resourceGroupName", valid_564505
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564506 = query.getOrDefault("api-version")
  valid_564506 = validateParameter(valid_564506, JString, required = true,
                                 default = nil)
  if valid_564506 != nil:
    section.add "api-version", valid_564506
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564507: Call_WebAppsGetConfiguration_564500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_564507.validator(path, query, header, formData, body)
  let scheme = call_564507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564507.url(scheme.get, call_564507.host, call_564507.base,
                         call_564507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564507, url, valid)

proc call*(call_564508: Call_WebAppsGetConfiguration_564500; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetConfiguration
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564509 = newJObject()
  var query_564510 = newJObject()
  add(query_564510, "api-version", newJString(apiVersion))
  add(path_564509, "name", newJString(name))
  add(path_564509, "subscriptionId", newJString(subscriptionId))
  add(path_564509, "resourceGroupName", newJString(resourceGroupName))
  result = call_564508.call(path_564509, query_564510, nil, nil, nil)

var webAppsGetConfiguration* = Call_WebAppsGetConfiguration_564500(
    name: "webAppsGetConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsGetConfiguration_564501, base: "",
    url: url_WebAppsGetConfiguration_564502, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfiguration_564524 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConfiguration_564526(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfiguration_564525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564527 = path.getOrDefault("name")
  valid_564527 = validateParameter(valid_564527, JString, required = true,
                                 default = nil)
  if valid_564527 != nil:
    section.add "name", valid_564527
  var valid_564528 = path.getOrDefault("subscriptionId")
  valid_564528 = validateParameter(valid_564528, JString, required = true,
                                 default = nil)
  if valid_564528 != nil:
    section.add "subscriptionId", valid_564528
  var valid_564529 = path.getOrDefault("resourceGroupName")
  valid_564529 = validateParameter(valid_564529, JString, required = true,
                                 default = nil)
  if valid_564529 != nil:
    section.add "resourceGroupName", valid_564529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564530 = query.getOrDefault("api-version")
  valid_564530 = validateParameter(valid_564530, JString, required = true,
                                 default = nil)
  if valid_564530 != nil:
    section.add "api-version", valid_564530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564532: Call_WebAppsUpdateConfiguration_564524; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_564532.validator(path, query, header, formData, body)
  let scheme = call_564532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564532.url(scheme.get, call_564532.host, call_564532.base,
                         call_564532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564532, url, valid)

proc call*(call_564533: Call_WebAppsUpdateConfiguration_564524; apiVersion: string;
          name: string; subscriptionId: string; siteConfig: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateConfiguration
  ## Updates the configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564534 = newJObject()
  var query_564535 = newJObject()
  var body_564536 = newJObject()
  add(query_564535, "api-version", newJString(apiVersion))
  add(path_564534, "name", newJString(name))
  add(path_564534, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_564536 = siteConfig
  add(path_564534, "resourceGroupName", newJString(resourceGroupName))
  result = call_564533.call(path_564534, query_564535, nil, nil, body_564536)

var webAppsUpdateConfiguration* = Call_WebAppsUpdateConfiguration_564524(
    name: "webAppsUpdateConfiguration", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsUpdateConfiguration_564525, base: "",
    url: url_WebAppsUpdateConfiguration_564526, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfo_564537 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurationSnapshotInfo_564539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfo_564538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564540 = path.getOrDefault("name")
  valid_564540 = validateParameter(valid_564540, JString, required = true,
                                 default = nil)
  if valid_564540 != nil:
    section.add "name", valid_564540
  var valid_564541 = path.getOrDefault("subscriptionId")
  valid_564541 = validateParameter(valid_564541, JString, required = true,
                                 default = nil)
  if valid_564541 != nil:
    section.add "subscriptionId", valid_564541
  var valid_564542 = path.getOrDefault("resourceGroupName")
  valid_564542 = validateParameter(valid_564542, JString, required = true,
                                 default = nil)
  if valid_564542 != nil:
    section.add "resourceGroupName", valid_564542
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564543 = query.getOrDefault("api-version")
  valid_564543 = validateParameter(valid_564543, JString, required = true,
                                 default = nil)
  if valid_564543 != nil:
    section.add "api-version", valid_564543
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564544: Call_WebAppsListConfigurationSnapshotInfo_564537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_564544.validator(path, query, header, formData, body)
  let scheme = call_564544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564544.url(scheme.get, call_564544.host, call_564544.base,
                         call_564544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564544, url, valid)

proc call*(call_564545: Call_WebAppsListConfigurationSnapshotInfo_564537;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConfigurationSnapshotInfo
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564546 = newJObject()
  var query_564547 = newJObject()
  add(query_564547, "api-version", newJString(apiVersion))
  add(path_564546, "name", newJString(name))
  add(path_564546, "subscriptionId", newJString(subscriptionId))
  add(path_564546, "resourceGroupName", newJString(resourceGroupName))
  result = call_564545.call(path_564546, query_564547, nil, nil, nil)

var webAppsListConfigurationSnapshotInfo* = Call_WebAppsListConfigurationSnapshotInfo_564537(
    name: "webAppsListConfigurationSnapshotInfo", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfo_564538, base: "",
    url: url_WebAppsListConfigurationSnapshotInfo_564539, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshot_564548 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfigurationSnapshot_564550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshot_564549(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_564551 = path.getOrDefault("snapshotId")
  valid_564551 = validateParameter(valid_564551, JString, required = true,
                                 default = nil)
  if valid_564551 != nil:
    section.add "snapshotId", valid_564551
  var valid_564552 = path.getOrDefault("name")
  valid_564552 = validateParameter(valid_564552, JString, required = true,
                                 default = nil)
  if valid_564552 != nil:
    section.add "name", valid_564552
  var valid_564553 = path.getOrDefault("subscriptionId")
  valid_564553 = validateParameter(valid_564553, JString, required = true,
                                 default = nil)
  if valid_564553 != nil:
    section.add "subscriptionId", valid_564553
  var valid_564554 = path.getOrDefault("resourceGroupName")
  valid_564554 = validateParameter(valid_564554, JString, required = true,
                                 default = nil)
  if valid_564554 != nil:
    section.add "resourceGroupName", valid_564554
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564555 = query.getOrDefault("api-version")
  valid_564555 = validateParameter(valid_564555, JString, required = true,
                                 default = nil)
  if valid_564555 != nil:
    section.add "api-version", valid_564555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564556: Call_WebAppsGetConfigurationSnapshot_564548;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_564556.validator(path, query, header, formData, body)
  let scheme = call_564556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564556.url(scheme.get, call_564556.host, call_564556.base,
                         call_564556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564556, url, valid)

proc call*(call_564557: Call_WebAppsGetConfigurationSnapshot_564548;
          snapshotId: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetConfigurationSnapshot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564558 = newJObject()
  var query_564559 = newJObject()
  add(path_564558, "snapshotId", newJString(snapshotId))
  add(query_564559, "api-version", newJString(apiVersion))
  add(path_564558, "name", newJString(name))
  add(path_564558, "subscriptionId", newJString(subscriptionId))
  add(path_564558, "resourceGroupName", newJString(resourceGroupName))
  result = call_564557.call(path_564558, query_564559, nil, nil, nil)

var webAppsGetConfigurationSnapshot* = Call_WebAppsGetConfigurationSnapshot_564548(
    name: "webAppsGetConfigurationSnapshot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshot_564549, base: "",
    url: url_WebAppsGetConfigurationSnapshot_564550, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshot_564560 = ref object of OpenApiRestCall_563564
proc url_WebAppsRecoverSiteConfigurationSnapshot_564562(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshot_564561(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_564563 = path.getOrDefault("snapshotId")
  valid_564563 = validateParameter(valid_564563, JString, required = true,
                                 default = nil)
  if valid_564563 != nil:
    section.add "snapshotId", valid_564563
  var valid_564564 = path.getOrDefault("name")
  valid_564564 = validateParameter(valid_564564, JString, required = true,
                                 default = nil)
  if valid_564564 != nil:
    section.add "name", valid_564564
  var valid_564565 = path.getOrDefault("subscriptionId")
  valid_564565 = validateParameter(valid_564565, JString, required = true,
                                 default = nil)
  if valid_564565 != nil:
    section.add "subscriptionId", valid_564565
  var valid_564566 = path.getOrDefault("resourceGroupName")
  valid_564566 = validateParameter(valid_564566, JString, required = true,
                                 default = nil)
  if valid_564566 != nil:
    section.add "resourceGroupName", valid_564566
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564567 = query.getOrDefault("api-version")
  valid_564567 = validateParameter(valid_564567, JString, required = true,
                                 default = nil)
  if valid_564567 != nil:
    section.add "api-version", valid_564567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564568: Call_WebAppsRecoverSiteConfigurationSnapshot_564560;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_564568.validator(path, query, header, formData, body)
  let scheme = call_564568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564568.url(scheme.get, call_564568.host, call_564568.base,
                         call_564568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564568, url, valid)

proc call*(call_564569: Call_WebAppsRecoverSiteConfigurationSnapshot_564560;
          snapshotId: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564570 = newJObject()
  var query_564571 = newJObject()
  add(path_564570, "snapshotId", newJString(snapshotId))
  add(query_564571, "api-version", newJString(apiVersion))
  add(path_564570, "name", newJString(name))
  add(path_564570, "subscriptionId", newJString(subscriptionId))
  add(path_564570, "resourceGroupName", newJString(resourceGroupName))
  result = call_564569.call(path_564570, query_564571, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshot* = Call_WebAppsRecoverSiteConfigurationSnapshot_564560(
    name: "webAppsRecoverSiteConfigurationSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshot_564561, base: "",
    url: url_WebAppsRecoverSiteConfigurationSnapshot_564562,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogs_564572 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebSiteContainerLogs_564574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogs_564573(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564575 = path.getOrDefault("name")
  valid_564575 = validateParameter(valid_564575, JString, required = true,
                                 default = nil)
  if valid_564575 != nil:
    section.add "name", valid_564575
  var valid_564576 = path.getOrDefault("subscriptionId")
  valid_564576 = validateParameter(valid_564576, JString, required = true,
                                 default = nil)
  if valid_564576 != nil:
    section.add "subscriptionId", valid_564576
  var valid_564577 = path.getOrDefault("resourceGroupName")
  valid_564577 = validateParameter(valid_564577, JString, required = true,
                                 default = nil)
  if valid_564577 != nil:
    section.add "resourceGroupName", valid_564577
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564578 = query.getOrDefault("api-version")
  valid_564578 = validateParameter(valid_564578, JString, required = true,
                                 default = nil)
  if valid_564578 != nil:
    section.add "api-version", valid_564578
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564579: Call_WebAppsGetWebSiteContainerLogs_564572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_564579.validator(path, query, header, formData, body)
  let scheme = call_564579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564579.url(scheme.get, call_564579.host, call_564579.base,
                         call_564579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564579, url, valid)

proc call*(call_564580: Call_WebAppsGetWebSiteContainerLogs_564572;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebSiteContainerLogs
  ## Gets the last lines of docker logs for the given site
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564581 = newJObject()
  var query_564582 = newJObject()
  add(query_564582, "api-version", newJString(apiVersion))
  add(path_564581, "name", newJString(name))
  add(path_564581, "subscriptionId", newJString(subscriptionId))
  add(path_564581, "resourceGroupName", newJString(resourceGroupName))
  result = call_564580.call(path_564581, query_564582, nil, nil, nil)

var webAppsGetWebSiteContainerLogs* = Call_WebAppsGetWebSiteContainerLogs_564572(
    name: "webAppsGetWebSiteContainerLogs", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogs_564573, base: "",
    url: url_WebAppsGetWebSiteContainerLogs_564574, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsZip_564583 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebSiteContainerLogsZip_564585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsZip_564584(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564586 = path.getOrDefault("name")
  valid_564586 = validateParameter(valid_564586, JString, required = true,
                                 default = nil)
  if valid_564586 != nil:
    section.add "name", valid_564586
  var valid_564587 = path.getOrDefault("subscriptionId")
  valid_564587 = validateParameter(valid_564587, JString, required = true,
                                 default = nil)
  if valid_564587 != nil:
    section.add "subscriptionId", valid_564587
  var valid_564588 = path.getOrDefault("resourceGroupName")
  valid_564588 = validateParameter(valid_564588, JString, required = true,
                                 default = nil)
  if valid_564588 != nil:
    section.add "resourceGroupName", valid_564588
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564589 = query.getOrDefault("api-version")
  valid_564589 = validateParameter(valid_564589, JString, required = true,
                                 default = nil)
  if valid_564589 != nil:
    section.add "api-version", valid_564589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564590: Call_WebAppsGetWebSiteContainerLogsZip_564583;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_564590.validator(path, query, header, formData, body)
  let scheme = call_564590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564590.url(scheme.get, call_564590.host, call_564590.base,
                         call_564590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564590, url, valid)

proc call*(call_564591: Call_WebAppsGetWebSiteContainerLogsZip_564583;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebSiteContainerLogsZip
  ## Gets the ZIP archived docker log files for the given site
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564592 = newJObject()
  var query_564593 = newJObject()
  add(query_564593, "api-version", newJString(apiVersion))
  add(path_564592, "name", newJString(name))
  add(path_564592, "subscriptionId", newJString(subscriptionId))
  add(path_564592, "resourceGroupName", newJString(resourceGroupName))
  result = call_564591.call(path_564592, query_564593, nil, nil, nil)

var webAppsGetWebSiteContainerLogsZip* = Call_WebAppsGetWebSiteContainerLogsZip_564583(
    name: "webAppsGetWebSiteContainerLogsZip", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    validator: validate_WebAppsGetWebSiteContainerLogsZip_564584, base: "",
    url: url_WebAppsGetWebSiteContainerLogsZip_564585, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobs_564594 = ref object of OpenApiRestCall_563564
proc url_WebAppsListContinuousWebJobs_564596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobs_564595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564597 = path.getOrDefault("name")
  valid_564597 = validateParameter(valid_564597, JString, required = true,
                                 default = nil)
  if valid_564597 != nil:
    section.add "name", valid_564597
  var valid_564598 = path.getOrDefault("subscriptionId")
  valid_564598 = validateParameter(valid_564598, JString, required = true,
                                 default = nil)
  if valid_564598 != nil:
    section.add "subscriptionId", valid_564598
  var valid_564599 = path.getOrDefault("resourceGroupName")
  valid_564599 = validateParameter(valid_564599, JString, required = true,
                                 default = nil)
  if valid_564599 != nil:
    section.add "resourceGroupName", valid_564599
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564600 = query.getOrDefault("api-version")
  valid_564600 = validateParameter(valid_564600, JString, required = true,
                                 default = nil)
  if valid_564600 != nil:
    section.add "api-version", valid_564600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564601: Call_WebAppsListContinuousWebJobs_564594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_564601.validator(path, query, header, formData, body)
  let scheme = call_564601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564601.url(scheme.get, call_564601.host, call_564601.base,
                         call_564601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564601, url, valid)

proc call*(call_564602: Call_WebAppsListContinuousWebJobs_564594;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListContinuousWebJobs
  ## List continuous web jobs for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564603 = newJObject()
  var query_564604 = newJObject()
  add(query_564604, "api-version", newJString(apiVersion))
  add(path_564603, "name", newJString(name))
  add(path_564603, "subscriptionId", newJString(subscriptionId))
  add(path_564603, "resourceGroupName", newJString(resourceGroupName))
  result = call_564602.call(path_564603, query_564604, nil, nil, nil)

var webAppsListContinuousWebJobs* = Call_WebAppsListContinuousWebJobs_564594(
    name: "webAppsListContinuousWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobs_564595, base: "",
    url: url_WebAppsListContinuousWebJobs_564596, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJob_564605 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetContinuousWebJob_564607(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJob_564606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564608 = path.getOrDefault("name")
  valid_564608 = validateParameter(valid_564608, JString, required = true,
                                 default = nil)
  if valid_564608 != nil:
    section.add "name", valid_564608
  var valid_564609 = path.getOrDefault("subscriptionId")
  valid_564609 = validateParameter(valid_564609, JString, required = true,
                                 default = nil)
  if valid_564609 != nil:
    section.add "subscriptionId", valid_564609
  var valid_564610 = path.getOrDefault("webJobName")
  valid_564610 = validateParameter(valid_564610, JString, required = true,
                                 default = nil)
  if valid_564610 != nil:
    section.add "webJobName", valid_564610
  var valid_564611 = path.getOrDefault("resourceGroupName")
  valid_564611 = validateParameter(valid_564611, JString, required = true,
                                 default = nil)
  if valid_564611 != nil:
    section.add "resourceGroupName", valid_564611
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564612 = query.getOrDefault("api-version")
  valid_564612 = validateParameter(valid_564612, JString, required = true,
                                 default = nil)
  if valid_564612 != nil:
    section.add "api-version", valid_564612
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564613: Call_WebAppsGetContinuousWebJob_564605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564613.validator(path, query, header, formData, body)
  let scheme = call_564613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564613.url(scheme.get, call_564613.host, call_564613.base,
                         call_564613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564613, url, valid)

proc call*(call_564614: Call_WebAppsGetContinuousWebJob_564605; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetContinuousWebJob
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564615 = newJObject()
  var query_564616 = newJObject()
  add(query_564616, "api-version", newJString(apiVersion))
  add(path_564615, "name", newJString(name))
  add(path_564615, "subscriptionId", newJString(subscriptionId))
  add(path_564615, "webJobName", newJString(webJobName))
  add(path_564615, "resourceGroupName", newJString(resourceGroupName))
  result = call_564614.call(path_564615, query_564616, nil, nil, nil)

var webAppsGetContinuousWebJob* = Call_WebAppsGetContinuousWebJob_564605(
    name: "webAppsGetContinuousWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJob_564606, base: "",
    url: url_WebAppsGetContinuousWebJob_564607, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJob_564617 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteContinuousWebJob_564619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJob_564618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564620 = path.getOrDefault("name")
  valid_564620 = validateParameter(valid_564620, JString, required = true,
                                 default = nil)
  if valid_564620 != nil:
    section.add "name", valid_564620
  var valid_564621 = path.getOrDefault("subscriptionId")
  valid_564621 = validateParameter(valid_564621, JString, required = true,
                                 default = nil)
  if valid_564621 != nil:
    section.add "subscriptionId", valid_564621
  var valid_564622 = path.getOrDefault("webJobName")
  valid_564622 = validateParameter(valid_564622, JString, required = true,
                                 default = nil)
  if valid_564622 != nil:
    section.add "webJobName", valid_564622
  var valid_564623 = path.getOrDefault("resourceGroupName")
  valid_564623 = validateParameter(valid_564623, JString, required = true,
                                 default = nil)
  if valid_564623 != nil:
    section.add "resourceGroupName", valid_564623
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564624 = query.getOrDefault("api-version")
  valid_564624 = validateParameter(valid_564624, JString, required = true,
                                 default = nil)
  if valid_564624 != nil:
    section.add "api-version", valid_564624
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564625: Call_WebAppsDeleteContinuousWebJob_564617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564625.validator(path, query, header, formData, body)
  let scheme = call_564625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564625.url(scheme.get, call_564625.host, call_564625.base,
                         call_564625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564625, url, valid)

proc call*(call_564626: Call_WebAppsDeleteContinuousWebJob_564617;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteContinuousWebJob
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564627 = newJObject()
  var query_564628 = newJObject()
  add(query_564628, "api-version", newJString(apiVersion))
  add(path_564627, "name", newJString(name))
  add(path_564627, "subscriptionId", newJString(subscriptionId))
  add(path_564627, "webJobName", newJString(webJobName))
  add(path_564627, "resourceGroupName", newJString(resourceGroupName))
  result = call_564626.call(path_564627, query_564628, nil, nil, nil)

var webAppsDeleteContinuousWebJob* = Call_WebAppsDeleteContinuousWebJob_564617(
    name: "webAppsDeleteContinuousWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJob_564618, base: "",
    url: url_WebAppsDeleteContinuousWebJob_564619, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJob_564629 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartContinuousWebJob_564631(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJob_564630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564632 = path.getOrDefault("name")
  valid_564632 = validateParameter(valid_564632, JString, required = true,
                                 default = nil)
  if valid_564632 != nil:
    section.add "name", valid_564632
  var valid_564633 = path.getOrDefault("subscriptionId")
  valid_564633 = validateParameter(valid_564633, JString, required = true,
                                 default = nil)
  if valid_564633 != nil:
    section.add "subscriptionId", valid_564633
  var valid_564634 = path.getOrDefault("webJobName")
  valid_564634 = validateParameter(valid_564634, JString, required = true,
                                 default = nil)
  if valid_564634 != nil:
    section.add "webJobName", valid_564634
  var valid_564635 = path.getOrDefault("resourceGroupName")
  valid_564635 = validateParameter(valid_564635, JString, required = true,
                                 default = nil)
  if valid_564635 != nil:
    section.add "resourceGroupName", valid_564635
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564636 = query.getOrDefault("api-version")
  valid_564636 = validateParameter(valid_564636, JString, required = true,
                                 default = nil)
  if valid_564636 != nil:
    section.add "api-version", valid_564636
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564637: Call_WebAppsStartContinuousWebJob_564629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_564637.validator(path, query, header, formData, body)
  let scheme = call_564637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564637.url(scheme.get, call_564637.host, call_564637.base,
                         call_564637.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564637, url, valid)

proc call*(call_564638: Call_WebAppsStartContinuousWebJob_564629;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStartContinuousWebJob
  ## Start a continuous web job for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564639 = newJObject()
  var query_564640 = newJObject()
  add(query_564640, "api-version", newJString(apiVersion))
  add(path_564639, "name", newJString(name))
  add(path_564639, "subscriptionId", newJString(subscriptionId))
  add(path_564639, "webJobName", newJString(webJobName))
  add(path_564639, "resourceGroupName", newJString(resourceGroupName))
  result = call_564638.call(path_564639, query_564640, nil, nil, nil)

var webAppsStartContinuousWebJob* = Call_WebAppsStartContinuousWebJob_564629(
    name: "webAppsStartContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJob_564630, base: "",
    url: url_WebAppsStartContinuousWebJob_564631, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJob_564641 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopContinuousWebJob_564643(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJob_564642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564644 = path.getOrDefault("name")
  valid_564644 = validateParameter(valid_564644, JString, required = true,
                                 default = nil)
  if valid_564644 != nil:
    section.add "name", valid_564644
  var valid_564645 = path.getOrDefault("subscriptionId")
  valid_564645 = validateParameter(valid_564645, JString, required = true,
                                 default = nil)
  if valid_564645 != nil:
    section.add "subscriptionId", valid_564645
  var valid_564646 = path.getOrDefault("webJobName")
  valid_564646 = validateParameter(valid_564646, JString, required = true,
                                 default = nil)
  if valid_564646 != nil:
    section.add "webJobName", valid_564646
  var valid_564647 = path.getOrDefault("resourceGroupName")
  valid_564647 = validateParameter(valid_564647, JString, required = true,
                                 default = nil)
  if valid_564647 != nil:
    section.add "resourceGroupName", valid_564647
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564648 = query.getOrDefault("api-version")
  valid_564648 = validateParameter(valid_564648, JString, required = true,
                                 default = nil)
  if valid_564648 != nil:
    section.add "api-version", valid_564648
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564649: Call_WebAppsStopContinuousWebJob_564641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_564649.validator(path, query, header, formData, body)
  let scheme = call_564649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564649.url(scheme.get, call_564649.host, call_564649.base,
                         call_564649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564649, url, valid)

proc call*(call_564650: Call_WebAppsStopContinuousWebJob_564641;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStopContinuousWebJob
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564651 = newJObject()
  var query_564652 = newJObject()
  add(query_564652, "api-version", newJString(apiVersion))
  add(path_564651, "name", newJString(name))
  add(path_564651, "subscriptionId", newJString(subscriptionId))
  add(path_564651, "webJobName", newJString(webJobName))
  add(path_564651, "resourceGroupName", newJString(resourceGroupName))
  result = call_564650.call(path_564651, query_564652, nil, nil, nil)

var webAppsStopContinuousWebJob* = Call_WebAppsStopContinuousWebJob_564641(
    name: "webAppsStopContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJob_564642, base: "",
    url: url_WebAppsStopContinuousWebJob_564643, schemes: {Scheme.Https})
type
  Call_WebAppsListDeployments_564653 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeployments_564655(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeployments_564654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564656 = path.getOrDefault("name")
  valid_564656 = validateParameter(valid_564656, JString, required = true,
                                 default = nil)
  if valid_564656 != nil:
    section.add "name", valid_564656
  var valid_564657 = path.getOrDefault("subscriptionId")
  valid_564657 = validateParameter(valid_564657, JString, required = true,
                                 default = nil)
  if valid_564657 != nil:
    section.add "subscriptionId", valid_564657
  var valid_564658 = path.getOrDefault("resourceGroupName")
  valid_564658 = validateParameter(valid_564658, JString, required = true,
                                 default = nil)
  if valid_564658 != nil:
    section.add "resourceGroupName", valid_564658
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564659 = query.getOrDefault("api-version")
  valid_564659 = validateParameter(valid_564659, JString, required = true,
                                 default = nil)
  if valid_564659 != nil:
    section.add "api-version", valid_564659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564660: Call_WebAppsListDeployments_564653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_564660.validator(path, query, header, formData, body)
  let scheme = call_564660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564660.url(scheme.get, call_564660.host, call_564660.base,
                         call_564660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564660, url, valid)

proc call*(call_564661: Call_WebAppsListDeployments_564653; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListDeployments
  ## List deployments for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564662 = newJObject()
  var query_564663 = newJObject()
  add(query_564663, "api-version", newJString(apiVersion))
  add(path_564662, "name", newJString(name))
  add(path_564662, "subscriptionId", newJString(subscriptionId))
  add(path_564662, "resourceGroupName", newJString(resourceGroupName))
  result = call_564661.call(path_564662, query_564663, nil, nil, nil)

var webAppsListDeployments* = Call_WebAppsListDeployments_564653(
    name: "webAppsListDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_WebAppsListDeployments_564654, base: "",
    url: url_WebAppsListDeployments_564655, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeployment_564676 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateDeployment_564678(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeployment_564677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564679 = path.getOrDefault("id")
  valid_564679 = validateParameter(valid_564679, JString, required = true,
                                 default = nil)
  if valid_564679 != nil:
    section.add "id", valid_564679
  var valid_564680 = path.getOrDefault("name")
  valid_564680 = validateParameter(valid_564680, JString, required = true,
                                 default = nil)
  if valid_564680 != nil:
    section.add "name", valid_564680
  var valid_564681 = path.getOrDefault("subscriptionId")
  valid_564681 = validateParameter(valid_564681, JString, required = true,
                                 default = nil)
  if valid_564681 != nil:
    section.add "subscriptionId", valid_564681
  var valid_564682 = path.getOrDefault("resourceGroupName")
  valid_564682 = validateParameter(valid_564682, JString, required = true,
                                 default = nil)
  if valid_564682 != nil:
    section.add "resourceGroupName", valid_564682
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564683 = query.getOrDefault("api-version")
  valid_564683 = validateParameter(valid_564683, JString, required = true,
                                 default = nil)
  if valid_564683 != nil:
    section.add "api-version", valid_564683
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564685: Call_WebAppsCreateDeployment_564676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_564685.validator(path, query, header, formData, body)
  let scheme = call_564685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564685.url(scheme.get, call_564685.host, call_564685.base,
                         call_564685.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564685, url, valid)

proc call*(call_564686: Call_WebAppsCreateDeployment_564676; apiVersion: string;
          id: string; name: string; subscriptionId: string; deployment: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsCreateDeployment
  ## Create a deployment for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deployment: JObject (required)
  ##             : Deployment details.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564687 = newJObject()
  var query_564688 = newJObject()
  var body_564689 = newJObject()
  add(query_564688, "api-version", newJString(apiVersion))
  add(path_564687, "id", newJString(id))
  add(path_564687, "name", newJString(name))
  add(path_564687, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_564689 = deployment
  add(path_564687, "resourceGroupName", newJString(resourceGroupName))
  result = call_564686.call(path_564687, query_564688, nil, nil, body_564689)

var webAppsCreateDeployment* = Call_WebAppsCreateDeployment_564676(
    name: "webAppsCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsCreateDeployment_564677, base: "",
    url: url_WebAppsCreateDeployment_564678, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeployment_564664 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDeployment_564666(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeployment_564665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564667 = path.getOrDefault("id")
  valid_564667 = validateParameter(valid_564667, JString, required = true,
                                 default = nil)
  if valid_564667 != nil:
    section.add "id", valid_564667
  var valid_564668 = path.getOrDefault("name")
  valid_564668 = validateParameter(valid_564668, JString, required = true,
                                 default = nil)
  if valid_564668 != nil:
    section.add "name", valid_564668
  var valid_564669 = path.getOrDefault("subscriptionId")
  valid_564669 = validateParameter(valid_564669, JString, required = true,
                                 default = nil)
  if valid_564669 != nil:
    section.add "subscriptionId", valid_564669
  var valid_564670 = path.getOrDefault("resourceGroupName")
  valid_564670 = validateParameter(valid_564670, JString, required = true,
                                 default = nil)
  if valid_564670 != nil:
    section.add "resourceGroupName", valid_564670
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564671 = query.getOrDefault("api-version")
  valid_564671 = validateParameter(valid_564671, JString, required = true,
                                 default = nil)
  if valid_564671 != nil:
    section.add "api-version", valid_564671
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564672: Call_WebAppsGetDeployment_564664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564672.validator(path, query, header, formData, body)
  let scheme = call_564672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564672.url(scheme.get, call_564672.host, call_564672.base,
                         call_564672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564672, url, valid)

proc call*(call_564673: Call_WebAppsGetDeployment_564664; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetDeployment
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564674 = newJObject()
  var query_564675 = newJObject()
  add(query_564675, "api-version", newJString(apiVersion))
  add(path_564674, "id", newJString(id))
  add(path_564674, "name", newJString(name))
  add(path_564674, "subscriptionId", newJString(subscriptionId))
  add(path_564674, "resourceGroupName", newJString(resourceGroupName))
  result = call_564673.call(path_564674, query_564675, nil, nil, nil)

var webAppsGetDeployment* = Call_WebAppsGetDeployment_564664(
    name: "webAppsGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsGetDeployment_564665, base: "",
    url: url_WebAppsGetDeployment_564666, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeployment_564690 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDeployment_564692(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeployment_564691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564693 = path.getOrDefault("id")
  valid_564693 = validateParameter(valid_564693, JString, required = true,
                                 default = nil)
  if valid_564693 != nil:
    section.add "id", valid_564693
  var valid_564694 = path.getOrDefault("name")
  valid_564694 = validateParameter(valid_564694, JString, required = true,
                                 default = nil)
  if valid_564694 != nil:
    section.add "name", valid_564694
  var valid_564695 = path.getOrDefault("subscriptionId")
  valid_564695 = validateParameter(valid_564695, JString, required = true,
                                 default = nil)
  if valid_564695 != nil:
    section.add "subscriptionId", valid_564695
  var valid_564696 = path.getOrDefault("resourceGroupName")
  valid_564696 = validateParameter(valid_564696, JString, required = true,
                                 default = nil)
  if valid_564696 != nil:
    section.add "resourceGroupName", valid_564696
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564697 = query.getOrDefault("api-version")
  valid_564697 = validateParameter(valid_564697, JString, required = true,
                                 default = nil)
  if valid_564697 != nil:
    section.add "api-version", valid_564697
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564698: Call_WebAppsDeleteDeployment_564690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_564698.validator(path, query, header, formData, body)
  let scheme = call_564698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564698.url(scheme.get, call_564698.host, call_564698.base,
                         call_564698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564698, url, valid)

proc call*(call_564699: Call_WebAppsDeleteDeployment_564690; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteDeployment
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564700 = newJObject()
  var query_564701 = newJObject()
  add(query_564701, "api-version", newJString(apiVersion))
  add(path_564700, "id", newJString(id))
  add(path_564700, "name", newJString(name))
  add(path_564700, "subscriptionId", newJString(subscriptionId))
  add(path_564700, "resourceGroupName", newJString(resourceGroupName))
  result = call_564699.call(path_564700, query_564701, nil, nil, nil)

var webAppsDeleteDeployment* = Call_WebAppsDeleteDeployment_564690(
    name: "webAppsDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsDeleteDeployment_564691, base: "",
    url: url_WebAppsDeleteDeployment_564692, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLog_564702 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeploymentLog_564704(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLog_564703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_564705 = path.getOrDefault("id")
  valid_564705 = validateParameter(valid_564705, JString, required = true,
                                 default = nil)
  if valid_564705 != nil:
    section.add "id", valid_564705
  var valid_564706 = path.getOrDefault("name")
  valid_564706 = validateParameter(valid_564706, JString, required = true,
                                 default = nil)
  if valid_564706 != nil:
    section.add "name", valid_564706
  var valid_564707 = path.getOrDefault("subscriptionId")
  valid_564707 = validateParameter(valid_564707, JString, required = true,
                                 default = nil)
  if valid_564707 != nil:
    section.add "subscriptionId", valid_564707
  var valid_564708 = path.getOrDefault("resourceGroupName")
  valid_564708 = validateParameter(valid_564708, JString, required = true,
                                 default = nil)
  if valid_564708 != nil:
    section.add "resourceGroupName", valid_564708
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564709 = query.getOrDefault("api-version")
  valid_564709 = validateParameter(valid_564709, JString, required = true,
                                 default = nil)
  if valid_564709 != nil:
    section.add "api-version", valid_564709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564710: Call_WebAppsListDeploymentLog_564702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_564710.validator(path, query, header, formData, body)
  let scheme = call_564710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564710.url(scheme.get, call_564710.host, call_564710.base,
                         call_564710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564710, url, valid)

proc call*(call_564711: Call_WebAppsListDeploymentLog_564702; apiVersion: string;
          id: string; name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListDeploymentLog
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564712 = newJObject()
  var query_564713 = newJObject()
  add(query_564713, "api-version", newJString(apiVersion))
  add(path_564712, "id", newJString(id))
  add(path_564712, "name", newJString(name))
  add(path_564712, "subscriptionId", newJString(subscriptionId))
  add(path_564712, "resourceGroupName", newJString(resourceGroupName))
  result = call_564711.call(path_564712, query_564713, nil, nil, nil)

var webAppsListDeploymentLog* = Call_WebAppsListDeploymentLog_564702(
    name: "webAppsListDeploymentLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLog_564703, base: "",
    url: url_WebAppsListDeploymentLog_564704, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiers_564714 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDomainOwnershipIdentifiers_564716(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiers_564715(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564717 = path.getOrDefault("name")
  valid_564717 = validateParameter(valid_564717, JString, required = true,
                                 default = nil)
  if valid_564717 != nil:
    section.add "name", valid_564717
  var valid_564718 = path.getOrDefault("subscriptionId")
  valid_564718 = validateParameter(valid_564718, JString, required = true,
                                 default = nil)
  if valid_564718 != nil:
    section.add "subscriptionId", valid_564718
  var valid_564719 = path.getOrDefault("resourceGroupName")
  valid_564719 = validateParameter(valid_564719, JString, required = true,
                                 default = nil)
  if valid_564719 != nil:
    section.add "resourceGroupName", valid_564719
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564720 = query.getOrDefault("api-version")
  valid_564720 = validateParameter(valid_564720, JString, required = true,
                                 default = nil)
  if valid_564720 != nil:
    section.add "api-version", valid_564720
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564721: Call_WebAppsListDomainOwnershipIdentifiers_564714;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_564721.validator(path, query, header, formData, body)
  let scheme = call_564721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564721.url(scheme.get, call_564721.host, call_564721.base,
                         call_564721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564721, url, valid)

proc call*(call_564722: Call_WebAppsListDomainOwnershipIdentifiers_564714;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiers
  ## Lists ownership identifiers for domain associated with web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564723 = newJObject()
  var query_564724 = newJObject()
  add(query_564724, "api-version", newJString(apiVersion))
  add(path_564723, "name", newJString(name))
  add(path_564723, "subscriptionId", newJString(subscriptionId))
  add(path_564723, "resourceGroupName", newJString(resourceGroupName))
  result = call_564722.call(path_564723, query_564724, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiers* = Call_WebAppsListDomainOwnershipIdentifiers_564714(
    name: "webAppsListDomainOwnershipIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiers_564715, base: "",
    url: url_WebAppsListDomainOwnershipIdentifiers_564716, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564737 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564739(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564738(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564740 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564740 = validateParameter(valid_564740, JString, required = true,
                                 default = nil)
  if valid_564740 != nil:
    section.add "domainOwnershipIdentifierName", valid_564740
  var valid_564741 = path.getOrDefault("name")
  valid_564741 = validateParameter(valid_564741, JString, required = true,
                                 default = nil)
  if valid_564741 != nil:
    section.add "name", valid_564741
  var valid_564742 = path.getOrDefault("subscriptionId")
  valid_564742 = validateParameter(valid_564742, JString, required = true,
                                 default = nil)
  if valid_564742 != nil:
    section.add "subscriptionId", valid_564742
  var valid_564743 = path.getOrDefault("resourceGroupName")
  valid_564743 = validateParameter(valid_564743, JString, required = true,
                                 default = nil)
  if valid_564743 != nil:
    section.add "resourceGroupName", valid_564743
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564744 = query.getOrDefault("api-version")
  valid_564744 = validateParameter(valid_564744, JString, required = true,
                                 default = nil)
  if valid_564744 != nil:
    section.add "api-version", valid_564744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564746: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564737;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_564746.validator(path, query, header, formData, body)
  let scheme = call_564746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564746.url(scheme.get, call_564746.host, call_564746.base,
                         call_564746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564746, url, valid)

proc call*(call_564747: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564737;
          domainOwnershipIdentifierName: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564748 = newJObject()
  var query_564749 = newJObject()
  var body_564750 = newJObject()
  add(path_564748, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564749, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_564750 = domainOwnershipIdentifier
  add(path_564748, "name", newJString(name))
  add(path_564748, "subscriptionId", newJString(subscriptionId))
  add(path_564748, "resourceGroupName", newJString(resourceGroupName))
  result = call_564747.call(path_564748, query_564749, nil, nil, body_564750)

var webAppsCreateOrUpdateDomainOwnershipIdentifier* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564737(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifier",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564738,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_564739,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifier_564725 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDomainOwnershipIdentifier_564727(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifier_564726(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564728 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564728 = validateParameter(valid_564728, JString, required = true,
                                 default = nil)
  if valid_564728 != nil:
    section.add "domainOwnershipIdentifierName", valid_564728
  var valid_564729 = path.getOrDefault("name")
  valid_564729 = validateParameter(valid_564729, JString, required = true,
                                 default = nil)
  if valid_564729 != nil:
    section.add "name", valid_564729
  var valid_564730 = path.getOrDefault("subscriptionId")
  valid_564730 = validateParameter(valid_564730, JString, required = true,
                                 default = nil)
  if valid_564730 != nil:
    section.add "subscriptionId", valid_564730
  var valid_564731 = path.getOrDefault("resourceGroupName")
  valid_564731 = validateParameter(valid_564731, JString, required = true,
                                 default = nil)
  if valid_564731 != nil:
    section.add "resourceGroupName", valid_564731
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564732 = query.getOrDefault("api-version")
  valid_564732 = validateParameter(valid_564732, JString, required = true,
                                 default = nil)
  if valid_564732 != nil:
    section.add "api-version", valid_564732
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564733: Call_WebAppsGetDomainOwnershipIdentifier_564725;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_564733.validator(path, query, header, formData, body)
  let scheme = call_564733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564733.url(scheme.get, call_564733.host, call_564733.base,
                         call_564733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564733, url, valid)

proc call*(call_564734: Call_WebAppsGetDomainOwnershipIdentifier_564725;
          domainOwnershipIdentifierName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifier
  ## Get domain ownership identifier for web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564735 = newJObject()
  var query_564736 = newJObject()
  add(path_564735, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564736, "api-version", newJString(apiVersion))
  add(path_564735, "name", newJString(name))
  add(path_564735, "subscriptionId", newJString(subscriptionId))
  add(path_564735, "resourceGroupName", newJString(resourceGroupName))
  result = call_564734.call(path_564735, query_564736, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifier* = Call_WebAppsGetDomainOwnershipIdentifier_564725(
    name: "webAppsGetDomainOwnershipIdentifier", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifier_564726, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifier_564727, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifier_564763 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDomainOwnershipIdentifier_564765(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifier_564764(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564766 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564766 = validateParameter(valid_564766, JString, required = true,
                                 default = nil)
  if valid_564766 != nil:
    section.add "domainOwnershipIdentifierName", valid_564766
  var valid_564767 = path.getOrDefault("name")
  valid_564767 = validateParameter(valid_564767, JString, required = true,
                                 default = nil)
  if valid_564767 != nil:
    section.add "name", valid_564767
  var valid_564768 = path.getOrDefault("subscriptionId")
  valid_564768 = validateParameter(valid_564768, JString, required = true,
                                 default = nil)
  if valid_564768 != nil:
    section.add "subscriptionId", valid_564768
  var valid_564769 = path.getOrDefault("resourceGroupName")
  valid_564769 = validateParameter(valid_564769, JString, required = true,
                                 default = nil)
  if valid_564769 != nil:
    section.add "resourceGroupName", valid_564769
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564770 = query.getOrDefault("api-version")
  valid_564770 = validateParameter(valid_564770, JString, required = true,
                                 default = nil)
  if valid_564770 != nil:
    section.add "api-version", valid_564770
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564772: Call_WebAppsUpdateDomainOwnershipIdentifier_564763;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_564772.validator(path, query, header, formData, body)
  let scheme = call_564772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564772.url(scheme.get, call_564772.host, call_564772.base,
                         call_564772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564772, url, valid)

proc call*(call_564773: Call_WebAppsUpdateDomainOwnershipIdentifier_564763;
          domainOwnershipIdentifierName: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564774 = newJObject()
  var query_564775 = newJObject()
  var body_564776 = newJObject()
  add(path_564774, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564775, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_564776 = domainOwnershipIdentifier
  add(path_564774, "name", newJString(name))
  add(path_564774, "subscriptionId", newJString(subscriptionId))
  add(path_564774, "resourceGroupName", newJString(resourceGroupName))
  result = call_564773.call(path_564774, query_564775, nil, nil, body_564776)

var webAppsUpdateDomainOwnershipIdentifier* = Call_WebAppsUpdateDomainOwnershipIdentifier_564763(
    name: "webAppsUpdateDomainOwnershipIdentifier", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifier_564764, base: "",
    url: url_WebAppsUpdateDomainOwnershipIdentifier_564765,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifier_564751 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDomainOwnershipIdentifier_564753(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifier_564752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_564754 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_564754 = validateParameter(valid_564754, JString, required = true,
                                 default = nil)
  if valid_564754 != nil:
    section.add "domainOwnershipIdentifierName", valid_564754
  var valid_564755 = path.getOrDefault("name")
  valid_564755 = validateParameter(valid_564755, JString, required = true,
                                 default = nil)
  if valid_564755 != nil:
    section.add "name", valid_564755
  var valid_564756 = path.getOrDefault("subscriptionId")
  valid_564756 = validateParameter(valid_564756, JString, required = true,
                                 default = nil)
  if valid_564756 != nil:
    section.add "subscriptionId", valid_564756
  var valid_564757 = path.getOrDefault("resourceGroupName")
  valid_564757 = validateParameter(valid_564757, JString, required = true,
                                 default = nil)
  if valid_564757 != nil:
    section.add "resourceGroupName", valid_564757
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564758 = query.getOrDefault("api-version")
  valid_564758 = validateParameter(valid_564758, JString, required = true,
                                 default = nil)
  if valid_564758 != nil:
    section.add "api-version", valid_564758
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564759: Call_WebAppsDeleteDomainOwnershipIdentifier_564751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_564759.validator(path, query, header, formData, body)
  let scheme = call_564759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564759.url(scheme.get, call_564759.host, call_564759.base,
                         call_564759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564759, url, valid)

proc call*(call_564760: Call_WebAppsDeleteDomainOwnershipIdentifier_564751;
          domainOwnershipIdentifierName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifier
  ## Deletes a domain ownership identifier for a web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564761 = newJObject()
  var query_564762 = newJObject()
  add(path_564761, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(query_564762, "api-version", newJString(apiVersion))
  add(path_564761, "name", newJString(name))
  add(path_564761, "subscriptionId", newJString(subscriptionId))
  add(path_564761, "resourceGroupName", newJString(resourceGroupName))
  result = call_564760.call(path_564761, query_564762, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifier* = Call_WebAppsDeleteDomainOwnershipIdentifier_564751(
    name: "webAppsDeleteDomainOwnershipIdentifier", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifier_564752, base: "",
    url: url_WebAppsDeleteDomainOwnershipIdentifier_564753,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperation_564788 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateMSDeployOperation_564790(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperation_564789(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564791 = path.getOrDefault("name")
  valid_564791 = validateParameter(valid_564791, JString, required = true,
                                 default = nil)
  if valid_564791 != nil:
    section.add "name", valid_564791
  var valid_564792 = path.getOrDefault("subscriptionId")
  valid_564792 = validateParameter(valid_564792, JString, required = true,
                                 default = nil)
  if valid_564792 != nil:
    section.add "subscriptionId", valid_564792
  var valid_564793 = path.getOrDefault("resourceGroupName")
  valid_564793 = validateParameter(valid_564793, JString, required = true,
                                 default = nil)
  if valid_564793 != nil:
    section.add "resourceGroupName", valid_564793
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564794 = query.getOrDefault("api-version")
  valid_564794 = validateParameter(valid_564794, JString, required = true,
                                 default = nil)
  if valid_564794 != nil:
    section.add "api-version", valid_564794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564796: Call_WebAppsCreateMSDeployOperation_564788; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_564796.validator(path, query, header, formData, body)
  let scheme = call_564796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564796.url(scheme.get, call_564796.host, call_564796.base,
                         call_564796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564796, url, valid)

proc call*(call_564797: Call_WebAppsCreateMSDeployOperation_564788;
          apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564798 = newJObject()
  var query_564799 = newJObject()
  var body_564800 = newJObject()
  add(query_564799, "api-version", newJString(apiVersion))
  add(path_564798, "name", newJString(name))
  add(path_564798, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_564800 = MSDeploy
  add(path_564798, "resourceGroupName", newJString(resourceGroupName))
  result = call_564797.call(path_564798, query_564799, nil, nil, body_564800)

var webAppsCreateMSDeployOperation* = Call_WebAppsCreateMSDeployOperation_564788(
    name: "webAppsCreateMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperation_564789, base: "",
    url: url_WebAppsCreateMSDeployOperation_564790, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatus_564777 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployStatus_564779(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatus_564778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564780 = path.getOrDefault("name")
  valid_564780 = validateParameter(valid_564780, JString, required = true,
                                 default = nil)
  if valid_564780 != nil:
    section.add "name", valid_564780
  var valid_564781 = path.getOrDefault("subscriptionId")
  valid_564781 = validateParameter(valid_564781, JString, required = true,
                                 default = nil)
  if valid_564781 != nil:
    section.add "subscriptionId", valid_564781
  var valid_564782 = path.getOrDefault("resourceGroupName")
  valid_564782 = validateParameter(valid_564782, JString, required = true,
                                 default = nil)
  if valid_564782 != nil:
    section.add "resourceGroupName", valid_564782
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564783 = query.getOrDefault("api-version")
  valid_564783 = validateParameter(valid_564783, JString, required = true,
                                 default = nil)
  if valid_564783 != nil:
    section.add "api-version", valid_564783
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564784: Call_WebAppsGetMSDeployStatus_564777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_564784.validator(path, query, header, formData, body)
  let scheme = call_564784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564784.url(scheme.get, call_564784.host, call_564784.base,
                         call_564784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564784, url, valid)

proc call*(call_564785: Call_WebAppsGetMSDeployStatus_564777; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564786 = newJObject()
  var query_564787 = newJObject()
  add(query_564787, "api-version", newJString(apiVersion))
  add(path_564786, "name", newJString(name))
  add(path_564786, "subscriptionId", newJString(subscriptionId))
  add(path_564786, "resourceGroupName", newJString(resourceGroupName))
  result = call_564785.call(path_564786, query_564787, nil, nil, nil)

var webAppsGetMSDeployStatus* = Call_WebAppsGetMSDeployStatus_564777(
    name: "webAppsGetMSDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatus_564778, base: "",
    url: url_WebAppsGetMSDeployStatus_564779, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLog_564801 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployLog_564803(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLog_564802(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564804 = path.getOrDefault("name")
  valid_564804 = validateParameter(valid_564804, JString, required = true,
                                 default = nil)
  if valid_564804 != nil:
    section.add "name", valid_564804
  var valid_564805 = path.getOrDefault("subscriptionId")
  valid_564805 = validateParameter(valid_564805, JString, required = true,
                                 default = nil)
  if valid_564805 != nil:
    section.add "subscriptionId", valid_564805
  var valid_564806 = path.getOrDefault("resourceGroupName")
  valid_564806 = validateParameter(valid_564806, JString, required = true,
                                 default = nil)
  if valid_564806 != nil:
    section.add "resourceGroupName", valid_564806
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564807 = query.getOrDefault("api-version")
  valid_564807 = validateParameter(valid_564807, JString, required = true,
                                 default = nil)
  if valid_564807 != nil:
    section.add "api-version", valid_564807
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564808: Call_WebAppsGetMSDeployLog_564801; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_564808.validator(path, query, header, formData, body)
  let scheme = call_564808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564808.url(scheme.get, call_564808.host, call_564808.base,
                         call_564808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564808, url, valid)

proc call*(call_564809: Call_WebAppsGetMSDeployLog_564801; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564810 = newJObject()
  var query_564811 = newJObject()
  add(query_564811, "api-version", newJString(apiVersion))
  add(path_564810, "name", newJString(name))
  add(path_564810, "subscriptionId", newJString(subscriptionId))
  add(path_564810, "resourceGroupName", newJString(resourceGroupName))
  result = call_564809.call(path_564810, query_564811, nil, nil, nil)

var webAppsGetMSDeployLog* = Call_WebAppsGetMSDeployLog_564801(
    name: "webAppsGetMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLog_564802, base: "",
    url: url_WebAppsGetMSDeployLog_564803, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctions_564812 = ref object of OpenApiRestCall_563564
proc url_WebAppsListFunctions_564814(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctions_564813(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564815 = path.getOrDefault("name")
  valid_564815 = validateParameter(valid_564815, JString, required = true,
                                 default = nil)
  if valid_564815 != nil:
    section.add "name", valid_564815
  var valid_564816 = path.getOrDefault("subscriptionId")
  valid_564816 = validateParameter(valid_564816, JString, required = true,
                                 default = nil)
  if valid_564816 != nil:
    section.add "subscriptionId", valid_564816
  var valid_564817 = path.getOrDefault("resourceGroupName")
  valid_564817 = validateParameter(valid_564817, JString, required = true,
                                 default = nil)
  if valid_564817 != nil:
    section.add "resourceGroupName", valid_564817
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564818 = query.getOrDefault("api-version")
  valid_564818 = validateParameter(valid_564818, JString, required = true,
                                 default = nil)
  if valid_564818 != nil:
    section.add "api-version", valid_564818
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564819: Call_WebAppsListFunctions_564812; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_564819.validator(path, query, header, formData, body)
  let scheme = call_564819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564819.url(scheme.get, call_564819.host, call_564819.base,
                         call_564819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564819, url, valid)

proc call*(call_564820: Call_WebAppsListFunctions_564812; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListFunctions
  ## List the functions for a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564821 = newJObject()
  var query_564822 = newJObject()
  add(query_564822, "api-version", newJString(apiVersion))
  add(path_564821, "name", newJString(name))
  add(path_564821, "subscriptionId", newJString(subscriptionId))
  add(path_564821, "resourceGroupName", newJString(resourceGroupName))
  result = call_564820.call(path_564821, query_564822, nil, nil, nil)

var webAppsListFunctions* = Call_WebAppsListFunctions_564812(
    name: "webAppsListFunctions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    validator: validate_WebAppsListFunctions_564813, base: "",
    url: url_WebAppsListFunctions_564814, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminToken_564823 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetFunctionsAdminToken_564825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminToken_564824(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564826 = path.getOrDefault("name")
  valid_564826 = validateParameter(valid_564826, JString, required = true,
                                 default = nil)
  if valid_564826 != nil:
    section.add "name", valid_564826
  var valid_564827 = path.getOrDefault("subscriptionId")
  valid_564827 = validateParameter(valid_564827, JString, required = true,
                                 default = nil)
  if valid_564827 != nil:
    section.add "subscriptionId", valid_564827
  var valid_564828 = path.getOrDefault("resourceGroupName")
  valid_564828 = validateParameter(valid_564828, JString, required = true,
                                 default = nil)
  if valid_564828 != nil:
    section.add "resourceGroupName", valid_564828
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564829 = query.getOrDefault("api-version")
  valid_564829 = validateParameter(valid_564829, JString, required = true,
                                 default = nil)
  if valid_564829 != nil:
    section.add "api-version", valid_564829
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564830: Call_WebAppsGetFunctionsAdminToken_564823; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_564830.validator(path, query, header, formData, body)
  let scheme = call_564830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564830.url(scheme.get, call_564830.host, call_564830.base,
                         call_564830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564830, url, valid)

proc call*(call_564831: Call_WebAppsGetFunctionsAdminToken_564823;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetFunctionsAdminToken
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564832 = newJObject()
  var query_564833 = newJObject()
  add(query_564833, "api-version", newJString(apiVersion))
  add(path_564832, "name", newJString(name))
  add(path_564832, "subscriptionId", newJString(subscriptionId))
  add(path_564832, "resourceGroupName", newJString(resourceGroupName))
  result = call_564831.call(path_564832, query_564833, nil, nil, nil)

var webAppsGetFunctionsAdminToken* = Call_WebAppsGetFunctionsAdminToken_564823(
    name: "webAppsGetFunctionsAdminToken", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminToken_564824, base: "",
    url: url_WebAppsGetFunctionsAdminToken_564825, schemes: {Scheme.Https})
type
  Call_WebAppsCreateFunction_564846 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateFunction_564848(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateFunction_564847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564849 = path.getOrDefault("functionName")
  valid_564849 = validateParameter(valid_564849, JString, required = true,
                                 default = nil)
  if valid_564849 != nil:
    section.add "functionName", valid_564849
  var valid_564850 = path.getOrDefault("name")
  valid_564850 = validateParameter(valid_564850, JString, required = true,
                                 default = nil)
  if valid_564850 != nil:
    section.add "name", valid_564850
  var valid_564851 = path.getOrDefault("subscriptionId")
  valid_564851 = validateParameter(valid_564851, JString, required = true,
                                 default = nil)
  if valid_564851 != nil:
    section.add "subscriptionId", valid_564851
  var valid_564852 = path.getOrDefault("resourceGroupName")
  valid_564852 = validateParameter(valid_564852, JString, required = true,
                                 default = nil)
  if valid_564852 != nil:
    section.add "resourceGroupName", valid_564852
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564853 = query.getOrDefault("api-version")
  valid_564853 = validateParameter(valid_564853, JString, required = true,
                                 default = nil)
  if valid_564853 != nil:
    section.add "api-version", valid_564853
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564855: Call_WebAppsCreateFunction_564846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_564855.validator(path, query, header, formData, body)
  let scheme = call_564855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564855.url(scheme.get, call_564855.host, call_564855.base,
                         call_564855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564855, url, valid)

proc call*(call_564856: Call_WebAppsCreateFunction_564846; functionName: string;
          apiVersion: string; name: string; functionEnvelope: JsonNode;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateFunction
  ## Create function for web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564857 = newJObject()
  var query_564858 = newJObject()
  var body_564859 = newJObject()
  add(path_564857, "functionName", newJString(functionName))
  add(query_564858, "api-version", newJString(apiVersion))
  add(path_564857, "name", newJString(name))
  if functionEnvelope != nil:
    body_564859 = functionEnvelope
  add(path_564857, "subscriptionId", newJString(subscriptionId))
  add(path_564857, "resourceGroupName", newJString(resourceGroupName))
  result = call_564856.call(path_564857, query_564858, nil, nil, body_564859)

var webAppsCreateFunction* = Call_WebAppsCreateFunction_564846(
    name: "webAppsCreateFunction", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsCreateFunction_564847, base: "",
    url: url_WebAppsCreateFunction_564848, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunction_564834 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetFunction_564836(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunction_564835(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564837 = path.getOrDefault("functionName")
  valid_564837 = validateParameter(valid_564837, JString, required = true,
                                 default = nil)
  if valid_564837 != nil:
    section.add "functionName", valid_564837
  var valid_564838 = path.getOrDefault("name")
  valid_564838 = validateParameter(valid_564838, JString, required = true,
                                 default = nil)
  if valid_564838 != nil:
    section.add "name", valid_564838
  var valid_564839 = path.getOrDefault("subscriptionId")
  valid_564839 = validateParameter(valid_564839, JString, required = true,
                                 default = nil)
  if valid_564839 != nil:
    section.add "subscriptionId", valid_564839
  var valid_564840 = path.getOrDefault("resourceGroupName")
  valid_564840 = validateParameter(valid_564840, JString, required = true,
                                 default = nil)
  if valid_564840 != nil:
    section.add "resourceGroupName", valid_564840
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564841 = query.getOrDefault("api-version")
  valid_564841 = validateParameter(valid_564841, JString, required = true,
                                 default = nil)
  if valid_564841 != nil:
    section.add "api-version", valid_564841
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564842: Call_WebAppsGetFunction_564834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_564842.validator(path, query, header, formData, body)
  let scheme = call_564842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564842.url(scheme.get, call_564842.host, call_564842.base,
                         call_564842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564842, url, valid)

proc call*(call_564843: Call_WebAppsGetFunction_564834; functionName: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetFunction
  ## Get function information by its ID for web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564844 = newJObject()
  var query_564845 = newJObject()
  add(path_564844, "functionName", newJString(functionName))
  add(query_564845, "api-version", newJString(apiVersion))
  add(path_564844, "name", newJString(name))
  add(path_564844, "subscriptionId", newJString(subscriptionId))
  add(path_564844, "resourceGroupName", newJString(resourceGroupName))
  result = call_564843.call(path_564844, query_564845, nil, nil, nil)

var webAppsGetFunction* = Call_WebAppsGetFunction_564834(
    name: "webAppsGetFunction", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsGetFunction_564835, base: "",
    url: url_WebAppsGetFunction_564836, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteFunction_564860 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteFunction_564862(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteFunction_564861(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564863 = path.getOrDefault("functionName")
  valid_564863 = validateParameter(valid_564863, JString, required = true,
                                 default = nil)
  if valid_564863 != nil:
    section.add "functionName", valid_564863
  var valid_564864 = path.getOrDefault("name")
  valid_564864 = validateParameter(valid_564864, JString, required = true,
                                 default = nil)
  if valid_564864 != nil:
    section.add "name", valid_564864
  var valid_564865 = path.getOrDefault("subscriptionId")
  valid_564865 = validateParameter(valid_564865, JString, required = true,
                                 default = nil)
  if valid_564865 != nil:
    section.add "subscriptionId", valid_564865
  var valid_564866 = path.getOrDefault("resourceGroupName")
  valid_564866 = validateParameter(valid_564866, JString, required = true,
                                 default = nil)
  if valid_564866 != nil:
    section.add "resourceGroupName", valid_564866
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564867 = query.getOrDefault("api-version")
  valid_564867 = validateParameter(valid_564867, JString, required = true,
                                 default = nil)
  if valid_564867 != nil:
    section.add "api-version", valid_564867
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564868: Call_WebAppsDeleteFunction_564860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_564868.validator(path, query, header, formData, body)
  let scheme = call_564868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564868.url(scheme.get, call_564868.host, call_564868.base,
                         call_564868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564868, url, valid)

proc call*(call_564869: Call_WebAppsDeleteFunction_564860; functionName: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteFunction
  ## Delete a function for web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564870 = newJObject()
  var query_564871 = newJObject()
  add(path_564870, "functionName", newJString(functionName))
  add(query_564871, "api-version", newJString(apiVersion))
  add(path_564870, "name", newJString(name))
  add(path_564870, "subscriptionId", newJString(subscriptionId))
  add(path_564870, "resourceGroupName", newJString(resourceGroupName))
  result = call_564869.call(path_564870, query_564871, nil, nil, nil)

var webAppsDeleteFunction* = Call_WebAppsDeleteFunction_564860(
    name: "webAppsDeleteFunction", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsDeleteFunction_564861, base: "",
    url: url_WebAppsDeleteFunction_564862, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecrets_564872 = ref object of OpenApiRestCall_563564
proc url_WebAppsListFunctionSecrets_564874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecrets_564873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `functionName` field"
  var valid_564875 = path.getOrDefault("functionName")
  valid_564875 = validateParameter(valid_564875, JString, required = true,
                                 default = nil)
  if valid_564875 != nil:
    section.add "functionName", valid_564875
  var valid_564876 = path.getOrDefault("name")
  valid_564876 = validateParameter(valid_564876, JString, required = true,
                                 default = nil)
  if valid_564876 != nil:
    section.add "name", valid_564876
  var valid_564877 = path.getOrDefault("subscriptionId")
  valid_564877 = validateParameter(valid_564877, JString, required = true,
                                 default = nil)
  if valid_564877 != nil:
    section.add "subscriptionId", valid_564877
  var valid_564878 = path.getOrDefault("resourceGroupName")
  valid_564878 = validateParameter(valid_564878, JString, required = true,
                                 default = nil)
  if valid_564878 != nil:
    section.add "resourceGroupName", valid_564878
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564879 = query.getOrDefault("api-version")
  valid_564879 = validateParameter(valid_564879, JString, required = true,
                                 default = nil)
  if valid_564879 != nil:
    section.add "api-version", valid_564879
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564880: Call_WebAppsListFunctionSecrets_564872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_564880.validator(path, query, header, formData, body)
  let scheme = call_564880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564880.url(scheme.get, call_564880.host, call_564880.base,
                         call_564880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564880, url, valid)

proc call*(call_564881: Call_WebAppsListFunctionSecrets_564872;
          functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListFunctionSecrets
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564882 = newJObject()
  var query_564883 = newJObject()
  add(path_564882, "functionName", newJString(functionName))
  add(query_564883, "api-version", newJString(apiVersion))
  add(path_564882, "name", newJString(name))
  add(path_564882, "subscriptionId", newJString(subscriptionId))
  add(path_564882, "resourceGroupName", newJString(resourceGroupName))
  result = call_564881.call(path_564882, query_564883, nil, nil, nil)

var webAppsListFunctionSecrets* = Call_WebAppsListFunctionSecrets_564872(
    name: "webAppsListFunctionSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecrets_564873, base: "",
    url: url_WebAppsListFunctionSecrets_564874, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindings_564884 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHostNameBindings_564886(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindings_564885(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564887 = path.getOrDefault("name")
  valid_564887 = validateParameter(valid_564887, JString, required = true,
                                 default = nil)
  if valid_564887 != nil:
    section.add "name", valid_564887
  var valid_564888 = path.getOrDefault("subscriptionId")
  valid_564888 = validateParameter(valid_564888, JString, required = true,
                                 default = nil)
  if valid_564888 != nil:
    section.add "subscriptionId", valid_564888
  var valid_564889 = path.getOrDefault("resourceGroupName")
  valid_564889 = validateParameter(valid_564889, JString, required = true,
                                 default = nil)
  if valid_564889 != nil:
    section.add "resourceGroupName", valid_564889
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564890 = query.getOrDefault("api-version")
  valid_564890 = validateParameter(valid_564890, JString, required = true,
                                 default = nil)
  if valid_564890 != nil:
    section.add "api-version", valid_564890
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564891: Call_WebAppsListHostNameBindings_564884; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_564891.validator(path, query, header, formData, body)
  let scheme = call_564891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564891.url(scheme.get, call_564891.host, call_564891.base,
                         call_564891.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564891, url, valid)

proc call*(call_564892: Call_WebAppsListHostNameBindings_564884;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHostNameBindings
  ## Get hostname bindings for an app or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_564893 = newJObject()
  var query_564894 = newJObject()
  add(query_564894, "api-version", newJString(apiVersion))
  add(path_564893, "name", newJString(name))
  add(path_564893, "subscriptionId", newJString(subscriptionId))
  add(path_564893, "resourceGroupName", newJString(resourceGroupName))
  result = call_564892.call(path_564893, query_564894, nil, nil, nil)

var webAppsListHostNameBindings* = Call_WebAppsListHostNameBindings_564884(
    name: "webAppsListHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindings_564885, base: "",
    url: url_WebAppsListHostNameBindings_564886, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBinding_564907 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHostNameBinding_564909(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBinding_564908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564910 = path.getOrDefault("name")
  valid_564910 = validateParameter(valid_564910, JString, required = true,
                                 default = nil)
  if valid_564910 != nil:
    section.add "name", valid_564910
  var valid_564911 = path.getOrDefault("subscriptionId")
  valid_564911 = validateParameter(valid_564911, JString, required = true,
                                 default = nil)
  if valid_564911 != nil:
    section.add "subscriptionId", valid_564911
  var valid_564912 = path.getOrDefault("resourceGroupName")
  valid_564912 = validateParameter(valid_564912, JString, required = true,
                                 default = nil)
  if valid_564912 != nil:
    section.add "resourceGroupName", valid_564912
  var valid_564913 = path.getOrDefault("hostName")
  valid_564913 = validateParameter(valid_564913, JString, required = true,
                                 default = nil)
  if valid_564913 != nil:
    section.add "hostName", valid_564913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564914 = query.getOrDefault("api-version")
  valid_564914 = validateParameter(valid_564914, JString, required = true,
                                 default = nil)
  if valid_564914 != nil:
    section.add "api-version", valid_564914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564916: Call_WebAppsCreateOrUpdateHostNameBinding_564907;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_564916.validator(path, query, header, formData, body)
  let scheme = call_564916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564916.url(scheme.get, call_564916.host, call_564916.base,
                         call_564916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564916, url, valid)

proc call*(call_564917: Call_WebAppsCreateOrUpdateHostNameBinding_564907;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostNameBinding: JsonNode; hostName: string): Recallable =
  ## webAppsCreateOrUpdateHostNameBinding
  ## Creates a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_564918 = newJObject()
  var query_564919 = newJObject()
  var body_564920 = newJObject()
  add(query_564919, "api-version", newJString(apiVersion))
  add(path_564918, "name", newJString(name))
  add(path_564918, "subscriptionId", newJString(subscriptionId))
  add(path_564918, "resourceGroupName", newJString(resourceGroupName))
  if hostNameBinding != nil:
    body_564920 = hostNameBinding
  add(path_564918, "hostName", newJString(hostName))
  result = call_564917.call(path_564918, query_564919, nil, nil, body_564920)

var webAppsCreateOrUpdateHostNameBinding* = Call_WebAppsCreateOrUpdateHostNameBinding_564907(
    name: "webAppsCreateOrUpdateHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBinding_564908, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBinding_564909, schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBinding_564895 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHostNameBinding_564897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBinding_564896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564898 = path.getOrDefault("name")
  valid_564898 = validateParameter(valid_564898, JString, required = true,
                                 default = nil)
  if valid_564898 != nil:
    section.add "name", valid_564898
  var valid_564899 = path.getOrDefault("subscriptionId")
  valid_564899 = validateParameter(valid_564899, JString, required = true,
                                 default = nil)
  if valid_564899 != nil:
    section.add "subscriptionId", valid_564899
  var valid_564900 = path.getOrDefault("resourceGroupName")
  valid_564900 = validateParameter(valid_564900, JString, required = true,
                                 default = nil)
  if valid_564900 != nil:
    section.add "resourceGroupName", valid_564900
  var valid_564901 = path.getOrDefault("hostName")
  valid_564901 = validateParameter(valid_564901, JString, required = true,
                                 default = nil)
  if valid_564901 != nil:
    section.add "hostName", valid_564901
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564902 = query.getOrDefault("api-version")
  valid_564902 = validateParameter(valid_564902, JString, required = true,
                                 default = nil)
  if valid_564902 != nil:
    section.add "api-version", valid_564902
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564903: Call_WebAppsGetHostNameBinding_564895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_564903.validator(path, query, header, formData, body)
  let scheme = call_564903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564903.url(scheme.get, call_564903.host, call_564903.base,
                         call_564903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564903, url, valid)

proc call*(call_564904: Call_WebAppsGetHostNameBinding_564895; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          hostName: string): Recallable =
  ## webAppsGetHostNameBinding
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_564905 = newJObject()
  var query_564906 = newJObject()
  add(query_564906, "api-version", newJString(apiVersion))
  add(path_564905, "name", newJString(name))
  add(path_564905, "subscriptionId", newJString(subscriptionId))
  add(path_564905, "resourceGroupName", newJString(resourceGroupName))
  add(path_564905, "hostName", newJString(hostName))
  result = call_564904.call(path_564905, query_564906, nil, nil, nil)

var webAppsGetHostNameBinding* = Call_WebAppsGetHostNameBinding_564895(
    name: "webAppsGetHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBinding_564896, base: "",
    url: url_WebAppsGetHostNameBinding_564897, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBinding_564921 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHostNameBinding_564923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBinding_564922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_564924 = path.getOrDefault("name")
  valid_564924 = validateParameter(valid_564924, JString, required = true,
                                 default = nil)
  if valid_564924 != nil:
    section.add "name", valid_564924
  var valid_564925 = path.getOrDefault("subscriptionId")
  valid_564925 = validateParameter(valid_564925, JString, required = true,
                                 default = nil)
  if valid_564925 != nil:
    section.add "subscriptionId", valid_564925
  var valid_564926 = path.getOrDefault("resourceGroupName")
  valid_564926 = validateParameter(valid_564926, JString, required = true,
                                 default = nil)
  if valid_564926 != nil:
    section.add "resourceGroupName", valid_564926
  var valid_564927 = path.getOrDefault("hostName")
  valid_564927 = validateParameter(valid_564927, JString, required = true,
                                 default = nil)
  if valid_564927 != nil:
    section.add "hostName", valid_564927
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564928 = query.getOrDefault("api-version")
  valid_564928 = validateParameter(valid_564928, JString, required = true,
                                 default = nil)
  if valid_564928 != nil:
    section.add "api-version", valid_564928
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564929: Call_WebAppsDeleteHostNameBinding_564921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_564929.validator(path, query, header, formData, body)
  let scheme = call_564929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564929.url(scheme.get, call_564929.host, call_564929.base,
                         call_564929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564929, url, valid)

proc call*(call_564930: Call_WebAppsDeleteHostNameBinding_564921;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBinding
  ## Deletes a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_564931 = newJObject()
  var query_564932 = newJObject()
  add(query_564932, "api-version", newJString(apiVersion))
  add(path_564931, "name", newJString(name))
  add(path_564931, "subscriptionId", newJString(subscriptionId))
  add(path_564931, "resourceGroupName", newJString(resourceGroupName))
  add(path_564931, "hostName", newJString(hostName))
  result = call_564930.call(path_564931, query_564932, nil, nil, nil)

var webAppsDeleteHostNameBinding* = Call_WebAppsDeleteHostNameBinding_564921(
    name: "webAppsDeleteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBinding_564922, base: "",
    url: url_WebAppsDeleteHostNameBinding_564923, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnection_564946 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHybridConnection_564948(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnection_564947(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564949 = path.getOrDefault("namespaceName")
  valid_564949 = validateParameter(valid_564949, JString, required = true,
                                 default = nil)
  if valid_564949 != nil:
    section.add "namespaceName", valid_564949
  var valid_564950 = path.getOrDefault("name")
  valid_564950 = validateParameter(valid_564950, JString, required = true,
                                 default = nil)
  if valid_564950 != nil:
    section.add "name", valid_564950
  var valid_564951 = path.getOrDefault("subscriptionId")
  valid_564951 = validateParameter(valid_564951, JString, required = true,
                                 default = nil)
  if valid_564951 != nil:
    section.add "subscriptionId", valid_564951
  var valid_564952 = path.getOrDefault("resourceGroupName")
  valid_564952 = validateParameter(valid_564952, JString, required = true,
                                 default = nil)
  if valid_564952 != nil:
    section.add "resourceGroupName", valid_564952
  var valid_564953 = path.getOrDefault("relayName")
  valid_564953 = validateParameter(valid_564953, JString, required = true,
                                 default = nil)
  if valid_564953 != nil:
    section.add "relayName", valid_564953
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564954 = query.getOrDefault("api-version")
  valid_564954 = validateParameter(valid_564954, JString, required = true,
                                 default = nil)
  if valid_564954 != nil:
    section.add "api-version", valid_564954
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564956: Call_WebAppsCreateOrUpdateHybridConnection_564946;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_564956.validator(path, query, header, formData, body)
  let scheme = call_564956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564956.url(scheme.get, call_564956.host, call_564956.base,
                         call_564956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564956, url, valid)

proc call*(call_564957: Call_WebAppsCreateOrUpdateHybridConnection_564946;
          connectionEnvelope: JsonNode; apiVersion: string; namespaceName: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564958 = newJObject()
  var query_564959 = newJObject()
  var body_564960 = newJObject()
  if connectionEnvelope != nil:
    body_564960 = connectionEnvelope
  add(query_564959, "api-version", newJString(apiVersion))
  add(path_564958, "namespaceName", newJString(namespaceName))
  add(path_564958, "name", newJString(name))
  add(path_564958, "subscriptionId", newJString(subscriptionId))
  add(path_564958, "resourceGroupName", newJString(resourceGroupName))
  add(path_564958, "relayName", newJString(relayName))
  result = call_564957.call(path_564958, query_564959, nil, nil, body_564960)

var webAppsCreateOrUpdateHybridConnection* = Call_WebAppsCreateOrUpdateHybridConnection_564946(
    name: "webAppsCreateOrUpdateHybridConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnection_564947, base: "",
    url: url_WebAppsCreateOrUpdateHybridConnection_564948, schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnection_564933 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHybridConnection_564935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnection_564934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564936 = path.getOrDefault("namespaceName")
  valid_564936 = validateParameter(valid_564936, JString, required = true,
                                 default = nil)
  if valid_564936 != nil:
    section.add "namespaceName", valid_564936
  var valid_564937 = path.getOrDefault("name")
  valid_564937 = validateParameter(valid_564937, JString, required = true,
                                 default = nil)
  if valid_564937 != nil:
    section.add "name", valid_564937
  var valid_564938 = path.getOrDefault("subscriptionId")
  valid_564938 = validateParameter(valid_564938, JString, required = true,
                                 default = nil)
  if valid_564938 != nil:
    section.add "subscriptionId", valid_564938
  var valid_564939 = path.getOrDefault("resourceGroupName")
  valid_564939 = validateParameter(valid_564939, JString, required = true,
                                 default = nil)
  if valid_564939 != nil:
    section.add "resourceGroupName", valid_564939
  var valid_564940 = path.getOrDefault("relayName")
  valid_564940 = validateParameter(valid_564940, JString, required = true,
                                 default = nil)
  if valid_564940 != nil:
    section.add "relayName", valid_564940
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564941 = query.getOrDefault("api-version")
  valid_564941 = validateParameter(valid_564941, JString, required = true,
                                 default = nil)
  if valid_564941 != nil:
    section.add "api-version", valid_564941
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564942: Call_WebAppsGetHybridConnection_564933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_564942.validator(path, query, header, formData, body)
  let scheme = call_564942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564942.url(scheme.get, call_564942.host, call_564942.base,
                         call_564942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564942, url, valid)

proc call*(call_564943: Call_WebAppsGetHybridConnection_564933; apiVersion: string;
          namespaceName: string; name: string; subscriptionId: string;
          resourceGroupName: string; relayName: string): Recallable =
  ## webAppsGetHybridConnection
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564944 = newJObject()
  var query_564945 = newJObject()
  add(query_564945, "api-version", newJString(apiVersion))
  add(path_564944, "namespaceName", newJString(namespaceName))
  add(path_564944, "name", newJString(name))
  add(path_564944, "subscriptionId", newJString(subscriptionId))
  add(path_564944, "resourceGroupName", newJString(resourceGroupName))
  add(path_564944, "relayName", newJString(relayName))
  result = call_564943.call(path_564944, query_564945, nil, nil, nil)

var webAppsGetHybridConnection* = Call_WebAppsGetHybridConnection_564933(
    name: "webAppsGetHybridConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnection_564934, base: "",
    url: url_WebAppsGetHybridConnection_564935, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnection_564974 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateHybridConnection_564976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnection_564975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564977 = path.getOrDefault("namespaceName")
  valid_564977 = validateParameter(valid_564977, JString, required = true,
                                 default = nil)
  if valid_564977 != nil:
    section.add "namespaceName", valid_564977
  var valid_564978 = path.getOrDefault("name")
  valid_564978 = validateParameter(valid_564978, JString, required = true,
                                 default = nil)
  if valid_564978 != nil:
    section.add "name", valid_564978
  var valid_564979 = path.getOrDefault("subscriptionId")
  valid_564979 = validateParameter(valid_564979, JString, required = true,
                                 default = nil)
  if valid_564979 != nil:
    section.add "subscriptionId", valid_564979
  var valid_564980 = path.getOrDefault("resourceGroupName")
  valid_564980 = validateParameter(valid_564980, JString, required = true,
                                 default = nil)
  if valid_564980 != nil:
    section.add "resourceGroupName", valid_564980
  var valid_564981 = path.getOrDefault("relayName")
  valid_564981 = validateParameter(valid_564981, JString, required = true,
                                 default = nil)
  if valid_564981 != nil:
    section.add "relayName", valid_564981
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564982 = query.getOrDefault("api-version")
  valid_564982 = validateParameter(valid_564982, JString, required = true,
                                 default = nil)
  if valid_564982 != nil:
    section.add "api-version", valid_564982
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_564984: Call_WebAppsUpdateHybridConnection_564974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_564984.validator(path, query, header, formData, body)
  let scheme = call_564984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564984.url(scheme.get, call_564984.host, call_564984.base,
                         call_564984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564984, url, valid)

proc call*(call_564985: Call_WebAppsUpdateHybridConnection_564974;
          connectionEnvelope: JsonNode; apiVersion: string; namespaceName: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          relayName: string): Recallable =
  ## webAppsUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564986 = newJObject()
  var query_564987 = newJObject()
  var body_564988 = newJObject()
  if connectionEnvelope != nil:
    body_564988 = connectionEnvelope
  add(query_564987, "api-version", newJString(apiVersion))
  add(path_564986, "namespaceName", newJString(namespaceName))
  add(path_564986, "name", newJString(name))
  add(path_564986, "subscriptionId", newJString(subscriptionId))
  add(path_564986, "resourceGroupName", newJString(resourceGroupName))
  add(path_564986, "relayName", newJString(relayName))
  result = call_564985.call(path_564986, query_564987, nil, nil, body_564988)

var webAppsUpdateHybridConnection* = Call_WebAppsUpdateHybridConnection_564974(
    name: "webAppsUpdateHybridConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnection_564975, base: "",
    url: url_WebAppsUpdateHybridConnection_564976, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnection_564961 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHybridConnection_564963(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnection_564962(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564964 = path.getOrDefault("namespaceName")
  valid_564964 = validateParameter(valid_564964, JString, required = true,
                                 default = nil)
  if valid_564964 != nil:
    section.add "namespaceName", valid_564964
  var valid_564965 = path.getOrDefault("name")
  valid_564965 = validateParameter(valid_564965, JString, required = true,
                                 default = nil)
  if valid_564965 != nil:
    section.add "name", valid_564965
  var valid_564966 = path.getOrDefault("subscriptionId")
  valid_564966 = validateParameter(valid_564966, JString, required = true,
                                 default = nil)
  if valid_564966 != nil:
    section.add "subscriptionId", valid_564966
  var valid_564967 = path.getOrDefault("resourceGroupName")
  valid_564967 = validateParameter(valid_564967, JString, required = true,
                                 default = nil)
  if valid_564967 != nil:
    section.add "resourceGroupName", valid_564967
  var valid_564968 = path.getOrDefault("relayName")
  valid_564968 = validateParameter(valid_564968, JString, required = true,
                                 default = nil)
  if valid_564968 != nil:
    section.add "relayName", valid_564968
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564969 = query.getOrDefault("api-version")
  valid_564969 = validateParameter(valid_564969, JString, required = true,
                                 default = nil)
  if valid_564969 != nil:
    section.add "api-version", valid_564969
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564970: Call_WebAppsDeleteHybridConnection_564961; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_564970.validator(path, query, header, formData, body)
  let scheme = call_564970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564970.url(scheme.get, call_564970.host, call_564970.base,
                         call_564970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564970, url, valid)

proc call*(call_564971: Call_WebAppsDeleteHybridConnection_564961;
          apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnection
  ## Removes a Hybrid Connection from this site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_564972 = newJObject()
  var query_564973 = newJObject()
  add(query_564973, "api-version", newJString(apiVersion))
  add(path_564972, "namespaceName", newJString(namespaceName))
  add(path_564972, "name", newJString(name))
  add(path_564972, "subscriptionId", newJString(subscriptionId))
  add(path_564972, "resourceGroupName", newJString(resourceGroupName))
  add(path_564972, "relayName", newJString(relayName))
  result = call_564971.call(path_564972, query_564973, nil, nil, nil)

var webAppsDeleteHybridConnection* = Call_WebAppsDeleteHybridConnection_564961(
    name: "webAppsDeleteHybridConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnection_564962, base: "",
    url: url_WebAppsDeleteHybridConnection_564963, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeys_564989 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnectionKeys_564991(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeys_564990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_564992 = path.getOrDefault("namespaceName")
  valid_564992 = validateParameter(valid_564992, JString, required = true,
                                 default = nil)
  if valid_564992 != nil:
    section.add "namespaceName", valid_564992
  var valid_564993 = path.getOrDefault("name")
  valid_564993 = validateParameter(valid_564993, JString, required = true,
                                 default = nil)
  if valid_564993 != nil:
    section.add "name", valid_564993
  var valid_564994 = path.getOrDefault("subscriptionId")
  valid_564994 = validateParameter(valid_564994, JString, required = true,
                                 default = nil)
  if valid_564994 != nil:
    section.add "subscriptionId", valid_564994
  var valid_564995 = path.getOrDefault("resourceGroupName")
  valid_564995 = validateParameter(valid_564995, JString, required = true,
                                 default = nil)
  if valid_564995 != nil:
    section.add "resourceGroupName", valid_564995
  var valid_564996 = path.getOrDefault("relayName")
  valid_564996 = validateParameter(valid_564996, JString, required = true,
                                 default = nil)
  if valid_564996 != nil:
    section.add "relayName", valid_564996
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564997 = query.getOrDefault("api-version")
  valid_564997 = validateParameter(valid_564997, JString, required = true,
                                 default = nil)
  if valid_564997 != nil:
    section.add "api-version", valid_564997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564998: Call_WebAppsListHybridConnectionKeys_564989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_564998.validator(path, query, header, formData, body)
  let scheme = call_564998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564998.url(scheme.get, call_564998.host, call_564998.base,
                         call_564998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564998, url, valid)

proc call*(call_564999: Call_WebAppsListHybridConnectionKeys_564989;
          apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeys
  ## Gets the send key name and value for a Hybrid Connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_565000 = newJObject()
  var query_565001 = newJObject()
  add(query_565001, "api-version", newJString(apiVersion))
  add(path_565000, "namespaceName", newJString(namespaceName))
  add(path_565000, "name", newJString(name))
  add(path_565000, "subscriptionId", newJString(subscriptionId))
  add(path_565000, "resourceGroupName", newJString(resourceGroupName))
  add(path_565000, "relayName", newJString(relayName))
  result = call_564999.call(path_565000, query_565001, nil, nil, nil)

var webAppsListHybridConnectionKeys* = Call_WebAppsListHybridConnectionKeys_564989(
    name: "webAppsListHybridConnectionKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeys_564990, base: "",
    url: url_WebAppsListHybridConnectionKeys_564991, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnections_565002 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnections_565004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnections_565003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565005 = path.getOrDefault("name")
  valid_565005 = validateParameter(valid_565005, JString, required = true,
                                 default = nil)
  if valid_565005 != nil:
    section.add "name", valid_565005
  var valid_565006 = path.getOrDefault("subscriptionId")
  valid_565006 = validateParameter(valid_565006, JString, required = true,
                                 default = nil)
  if valid_565006 != nil:
    section.add "subscriptionId", valid_565006
  var valid_565007 = path.getOrDefault("resourceGroupName")
  valid_565007 = validateParameter(valid_565007, JString, required = true,
                                 default = nil)
  if valid_565007 != nil:
    section.add "resourceGroupName", valid_565007
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565008 = query.getOrDefault("api-version")
  valid_565008 = validateParameter(valid_565008, JString, required = true,
                                 default = nil)
  if valid_565008 != nil:
    section.add "api-version", valid_565008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565009: Call_WebAppsListHybridConnections_565002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_565009.validator(path, query, header, formData, body)
  let scheme = call_565009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565009.url(scheme.get, call_565009.host, call_565009.base,
                         call_565009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565009, url, valid)

proc call*(call_565010: Call_WebAppsListHybridConnections_565002;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHybridConnections
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565011 = newJObject()
  var query_565012 = newJObject()
  add(query_565012, "api-version", newJString(apiVersion))
  add(path_565011, "name", newJString(name))
  add(path_565011, "subscriptionId", newJString(subscriptionId))
  add(path_565011, "resourceGroupName", newJString(resourceGroupName))
  result = call_565010.call(path_565011, query_565012, nil, nil, nil)

var webAppsListHybridConnections* = Call_WebAppsListHybridConnections_565002(
    name: "webAppsListHybridConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnections_565003, base: "",
    url: url_WebAppsListHybridConnections_565004, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnections_565013 = ref object of OpenApiRestCall_563564
proc url_WebAppsListRelayServiceConnections_565015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnections_565014(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565016 = path.getOrDefault("name")
  valid_565016 = validateParameter(valid_565016, JString, required = true,
                                 default = nil)
  if valid_565016 != nil:
    section.add "name", valid_565016
  var valid_565017 = path.getOrDefault("subscriptionId")
  valid_565017 = validateParameter(valid_565017, JString, required = true,
                                 default = nil)
  if valid_565017 != nil:
    section.add "subscriptionId", valid_565017
  var valid_565018 = path.getOrDefault("resourceGroupName")
  valid_565018 = validateParameter(valid_565018, JString, required = true,
                                 default = nil)
  if valid_565018 != nil:
    section.add "resourceGroupName", valid_565018
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565019 = query.getOrDefault("api-version")
  valid_565019 = validateParameter(valid_565019, JString, required = true,
                                 default = nil)
  if valid_565019 != nil:
    section.add "api-version", valid_565019
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565020: Call_WebAppsListRelayServiceConnections_565013;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_565020.validator(path, query, header, formData, body)
  let scheme = call_565020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565020.url(scheme.get, call_565020.host, call_565020.base,
                         call_565020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565020, url, valid)

proc call*(call_565021: Call_WebAppsListRelayServiceConnections_565013;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListRelayServiceConnections
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565022 = newJObject()
  var query_565023 = newJObject()
  add(query_565023, "api-version", newJString(apiVersion))
  add(path_565022, "name", newJString(name))
  add(path_565022, "subscriptionId", newJString(subscriptionId))
  add(path_565022, "resourceGroupName", newJString(resourceGroupName))
  result = call_565021.call(path_565022, query_565023, nil, nil, nil)

var webAppsListRelayServiceConnections* = Call_WebAppsListRelayServiceConnections_565013(
    name: "webAppsListRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnections_565014, base: "",
    url: url_WebAppsListRelayServiceConnections_565015, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnection_565036 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateRelayServiceConnection_565038(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnection_565037(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565039 = path.getOrDefault("name")
  valid_565039 = validateParameter(valid_565039, JString, required = true,
                                 default = nil)
  if valid_565039 != nil:
    section.add "name", valid_565039
  var valid_565040 = path.getOrDefault("subscriptionId")
  valid_565040 = validateParameter(valid_565040, JString, required = true,
                                 default = nil)
  if valid_565040 != nil:
    section.add "subscriptionId", valid_565040
  var valid_565041 = path.getOrDefault("resourceGroupName")
  valid_565041 = validateParameter(valid_565041, JString, required = true,
                                 default = nil)
  if valid_565041 != nil:
    section.add "resourceGroupName", valid_565041
  var valid_565042 = path.getOrDefault("entityName")
  valid_565042 = validateParameter(valid_565042, JString, required = true,
                                 default = nil)
  if valid_565042 != nil:
    section.add "entityName", valid_565042
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565043 = query.getOrDefault("api-version")
  valid_565043 = validateParameter(valid_565043, JString, required = true,
                                 default = nil)
  if valid_565043 != nil:
    section.add "api-version", valid_565043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565045: Call_WebAppsCreateOrUpdateRelayServiceConnection_565036;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_565045.validator(path, query, header, formData, body)
  let scheme = call_565045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565045.url(scheme.get, call_565045.host, call_565045.base,
                         call_565045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565045, url, valid)

proc call*(call_565046: Call_WebAppsCreateOrUpdateRelayServiceConnection_565036;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_565047 = newJObject()
  var query_565048 = newJObject()
  var body_565049 = newJObject()
  if connectionEnvelope != nil:
    body_565049 = connectionEnvelope
  add(query_565048, "api-version", newJString(apiVersion))
  add(path_565047, "name", newJString(name))
  add(path_565047, "subscriptionId", newJString(subscriptionId))
  add(path_565047, "resourceGroupName", newJString(resourceGroupName))
  add(path_565047, "entityName", newJString(entityName))
  result = call_565046.call(path_565047, query_565048, nil, nil, body_565049)

var webAppsCreateOrUpdateRelayServiceConnection* = Call_WebAppsCreateOrUpdateRelayServiceConnection_565036(
    name: "webAppsCreateOrUpdateRelayServiceConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnection_565037,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnection_565038,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnection_565024 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetRelayServiceConnection_565026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnection_565025(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565027 = path.getOrDefault("name")
  valid_565027 = validateParameter(valid_565027, JString, required = true,
                                 default = nil)
  if valid_565027 != nil:
    section.add "name", valid_565027
  var valid_565028 = path.getOrDefault("subscriptionId")
  valid_565028 = validateParameter(valid_565028, JString, required = true,
                                 default = nil)
  if valid_565028 != nil:
    section.add "subscriptionId", valid_565028
  var valid_565029 = path.getOrDefault("resourceGroupName")
  valid_565029 = validateParameter(valid_565029, JString, required = true,
                                 default = nil)
  if valid_565029 != nil:
    section.add "resourceGroupName", valid_565029
  var valid_565030 = path.getOrDefault("entityName")
  valid_565030 = validateParameter(valid_565030, JString, required = true,
                                 default = nil)
  if valid_565030 != nil:
    section.add "entityName", valid_565030
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565031 = query.getOrDefault("api-version")
  valid_565031 = validateParameter(valid_565031, JString, required = true,
                                 default = nil)
  if valid_565031 != nil:
    section.add "api-version", valid_565031
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565032: Call_WebAppsGetRelayServiceConnection_565024;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_565032.validator(path, query, header, formData, body)
  let scheme = call_565032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565032.url(scheme.get, call_565032.host, call_565032.base,
                         call_565032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565032, url, valid)

proc call*(call_565033: Call_WebAppsGetRelayServiceConnection_565024;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnection
  ## Gets a hybrid connection configuration by its name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_565034 = newJObject()
  var query_565035 = newJObject()
  add(query_565035, "api-version", newJString(apiVersion))
  add(path_565034, "name", newJString(name))
  add(path_565034, "subscriptionId", newJString(subscriptionId))
  add(path_565034, "resourceGroupName", newJString(resourceGroupName))
  add(path_565034, "entityName", newJString(entityName))
  result = call_565033.call(path_565034, query_565035, nil, nil, nil)

var webAppsGetRelayServiceConnection* = Call_WebAppsGetRelayServiceConnection_565024(
    name: "webAppsGetRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnection_565025, base: "",
    url: url_WebAppsGetRelayServiceConnection_565026, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnection_565062 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateRelayServiceConnection_565064(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnection_565063(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565065 = path.getOrDefault("name")
  valid_565065 = validateParameter(valid_565065, JString, required = true,
                                 default = nil)
  if valid_565065 != nil:
    section.add "name", valid_565065
  var valid_565066 = path.getOrDefault("subscriptionId")
  valid_565066 = validateParameter(valid_565066, JString, required = true,
                                 default = nil)
  if valid_565066 != nil:
    section.add "subscriptionId", valid_565066
  var valid_565067 = path.getOrDefault("resourceGroupName")
  valid_565067 = validateParameter(valid_565067, JString, required = true,
                                 default = nil)
  if valid_565067 != nil:
    section.add "resourceGroupName", valid_565067
  var valid_565068 = path.getOrDefault("entityName")
  valid_565068 = validateParameter(valid_565068, JString, required = true,
                                 default = nil)
  if valid_565068 != nil:
    section.add "entityName", valid_565068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565069 = query.getOrDefault("api-version")
  valid_565069 = validateParameter(valid_565069, JString, required = true,
                                 default = nil)
  if valid_565069 != nil:
    section.add "api-version", valid_565069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565071: Call_WebAppsUpdateRelayServiceConnection_565062;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_565071.validator(path, query, header, formData, body)
  let scheme = call_565071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565071.url(scheme.get, call_565071.host, call_565071.base,
                         call_565071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565071, url, valid)

proc call*(call_565072: Call_WebAppsUpdateRelayServiceConnection_565062;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_565073 = newJObject()
  var query_565074 = newJObject()
  var body_565075 = newJObject()
  if connectionEnvelope != nil:
    body_565075 = connectionEnvelope
  add(query_565074, "api-version", newJString(apiVersion))
  add(path_565073, "name", newJString(name))
  add(path_565073, "subscriptionId", newJString(subscriptionId))
  add(path_565073, "resourceGroupName", newJString(resourceGroupName))
  add(path_565073, "entityName", newJString(entityName))
  result = call_565072.call(path_565073, query_565074, nil, nil, body_565075)

var webAppsUpdateRelayServiceConnection* = Call_WebAppsUpdateRelayServiceConnection_565062(
    name: "webAppsUpdateRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnection_565063, base: "",
    url: url_WebAppsUpdateRelayServiceConnection_565064, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnection_565050 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteRelayServiceConnection_565052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnection_565051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565053 = path.getOrDefault("name")
  valid_565053 = validateParameter(valid_565053, JString, required = true,
                                 default = nil)
  if valid_565053 != nil:
    section.add "name", valid_565053
  var valid_565054 = path.getOrDefault("subscriptionId")
  valid_565054 = validateParameter(valid_565054, JString, required = true,
                                 default = nil)
  if valid_565054 != nil:
    section.add "subscriptionId", valid_565054
  var valid_565055 = path.getOrDefault("resourceGroupName")
  valid_565055 = validateParameter(valid_565055, JString, required = true,
                                 default = nil)
  if valid_565055 != nil:
    section.add "resourceGroupName", valid_565055
  var valid_565056 = path.getOrDefault("entityName")
  valid_565056 = validateParameter(valid_565056, JString, required = true,
                                 default = nil)
  if valid_565056 != nil:
    section.add "entityName", valid_565056
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565057 = query.getOrDefault("api-version")
  valid_565057 = validateParameter(valid_565057, JString, required = true,
                                 default = nil)
  if valid_565057 != nil:
    section.add "api-version", valid_565057
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565058: Call_WebAppsDeleteRelayServiceConnection_565050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_565058.validator(path, query, header, formData, body)
  let scheme = call_565058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565058.url(scheme.get, call_565058.host, call_565058.base,
                         call_565058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565058, url, valid)

proc call*(call_565059: Call_WebAppsDeleteRelayServiceConnection_565050;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnection
  ## Deletes a relay service connection by its name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_565060 = newJObject()
  var query_565061 = newJObject()
  add(query_565061, "api-version", newJString(apiVersion))
  add(path_565060, "name", newJString(name))
  add(path_565060, "subscriptionId", newJString(subscriptionId))
  add(path_565060, "resourceGroupName", newJString(resourceGroupName))
  add(path_565060, "entityName", newJString(entityName))
  result = call_565059.call(path_565060, query_565061, nil, nil, nil)

var webAppsDeleteRelayServiceConnection* = Call_WebAppsDeleteRelayServiceConnection_565050(
    name: "webAppsDeleteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnection_565051, base: "",
    url: url_WebAppsDeleteRelayServiceConnection_565052, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiers_565076 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceIdentifiers_565078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiers_565077(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565079 = path.getOrDefault("name")
  valid_565079 = validateParameter(valid_565079, JString, required = true,
                                 default = nil)
  if valid_565079 != nil:
    section.add "name", valid_565079
  var valid_565080 = path.getOrDefault("subscriptionId")
  valid_565080 = validateParameter(valid_565080, JString, required = true,
                                 default = nil)
  if valid_565080 != nil:
    section.add "subscriptionId", valid_565080
  var valid_565081 = path.getOrDefault("resourceGroupName")
  valid_565081 = validateParameter(valid_565081, JString, required = true,
                                 default = nil)
  if valid_565081 != nil:
    section.add "resourceGroupName", valid_565081
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565082 = query.getOrDefault("api-version")
  valid_565082 = validateParameter(valid_565082, JString, required = true,
                                 default = nil)
  if valid_565082 != nil:
    section.add "api-version", valid_565082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565083: Call_WebAppsListInstanceIdentifiers_565076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_565083.validator(path, query, header, formData, body)
  let scheme = call_565083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565083.url(scheme.get, call_565083.host, call_565083.base,
                         call_565083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565083, url, valid)

proc call*(call_565084: Call_WebAppsListInstanceIdentifiers_565076;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListInstanceIdentifiers
  ## Gets all scale-out instances of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565085 = newJObject()
  var query_565086 = newJObject()
  add(query_565086, "api-version", newJString(apiVersion))
  add(path_565085, "name", newJString(name))
  add(path_565085, "subscriptionId", newJString(subscriptionId))
  add(path_565085, "resourceGroupName", newJString(resourceGroupName))
  result = call_565084.call(path_565085, query_565086, nil, nil, nil)

var webAppsListInstanceIdentifiers* = Call_WebAppsListInstanceIdentifiers_565076(
    name: "webAppsListInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_WebAppsListInstanceIdentifiers_565077, base: "",
    url: url_WebAppsListInstanceIdentifiers_565078, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperation_565099 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateInstanceMSDeployOperation_565101(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperation_565100(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565102 = path.getOrDefault("name")
  valid_565102 = validateParameter(valid_565102, JString, required = true,
                                 default = nil)
  if valid_565102 != nil:
    section.add "name", valid_565102
  var valid_565103 = path.getOrDefault("subscriptionId")
  valid_565103 = validateParameter(valid_565103, JString, required = true,
                                 default = nil)
  if valid_565103 != nil:
    section.add "subscriptionId", valid_565103
  var valid_565104 = path.getOrDefault("resourceGroupName")
  valid_565104 = validateParameter(valid_565104, JString, required = true,
                                 default = nil)
  if valid_565104 != nil:
    section.add "resourceGroupName", valid_565104
  var valid_565105 = path.getOrDefault("instanceId")
  valid_565105 = validateParameter(valid_565105, JString, required = true,
                                 default = nil)
  if valid_565105 != nil:
    section.add "instanceId", valid_565105
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565106 = query.getOrDefault("api-version")
  valid_565106 = validateParameter(valid_565106, JString, required = true,
                                 default = nil)
  if valid_565106 != nil:
    section.add "api-version", valid_565106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565108: Call_WebAppsCreateInstanceMSDeployOperation_565099;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_565108.validator(path, query, header, formData, body)
  let scheme = call_565108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565108.url(scheme.get, call_565108.host, call_565108.base,
                         call_565108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565108, url, valid)

proc call*(call_565109: Call_WebAppsCreateInstanceMSDeployOperation_565099;
          apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsCreateInstanceMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_565110 = newJObject()
  var query_565111 = newJObject()
  var body_565112 = newJObject()
  add(query_565111, "api-version", newJString(apiVersion))
  add(path_565110, "name", newJString(name))
  add(path_565110, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_565112 = MSDeploy
  add(path_565110, "resourceGroupName", newJString(resourceGroupName))
  add(path_565110, "instanceId", newJString(instanceId))
  result = call_565109.call(path_565110, query_565111, nil, nil, body_565112)

var webAppsCreateInstanceMSDeployOperation* = Call_WebAppsCreateInstanceMSDeployOperation_565099(
    name: "webAppsCreateInstanceMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperation_565100, base: "",
    url: url_WebAppsCreateInstanceMSDeployOperation_565101,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatus_565087 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMsDeployStatus_565089(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatus_565088(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565090 = path.getOrDefault("name")
  valid_565090 = validateParameter(valid_565090, JString, required = true,
                                 default = nil)
  if valid_565090 != nil:
    section.add "name", valid_565090
  var valid_565091 = path.getOrDefault("subscriptionId")
  valid_565091 = validateParameter(valid_565091, JString, required = true,
                                 default = nil)
  if valid_565091 != nil:
    section.add "subscriptionId", valid_565091
  var valid_565092 = path.getOrDefault("resourceGroupName")
  valid_565092 = validateParameter(valid_565092, JString, required = true,
                                 default = nil)
  if valid_565092 != nil:
    section.add "resourceGroupName", valid_565092
  var valid_565093 = path.getOrDefault("instanceId")
  valid_565093 = validateParameter(valid_565093, JString, required = true,
                                 default = nil)
  if valid_565093 != nil:
    section.add "instanceId", valid_565093
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565094 = query.getOrDefault("api-version")
  valid_565094 = validateParameter(valid_565094, JString, required = true,
                                 default = nil)
  if valid_565094 != nil:
    section.add "api-version", valid_565094
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565095: Call_WebAppsGetInstanceMsDeployStatus_565087;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_565095.validator(path, query, header, formData, body)
  let scheme = call_565095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565095.url(scheme.get, call_565095.host, call_565095.base,
                         call_565095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565095, url, valid)

proc call*(call_565096: Call_WebAppsGetInstanceMsDeployStatus_565087;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_565097 = newJObject()
  var query_565098 = newJObject()
  add(query_565098, "api-version", newJString(apiVersion))
  add(path_565097, "name", newJString(name))
  add(path_565097, "subscriptionId", newJString(subscriptionId))
  add(path_565097, "resourceGroupName", newJString(resourceGroupName))
  add(path_565097, "instanceId", newJString(instanceId))
  result = call_565096.call(path_565097, query_565098, nil, nil, nil)

var webAppsGetInstanceMsDeployStatus* = Call_WebAppsGetInstanceMsDeployStatus_565087(
    name: "webAppsGetInstanceMsDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatus_565088, base: "",
    url: url_WebAppsGetInstanceMsDeployStatus_565089, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLog_565113 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMSDeployLog_565115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLog_565114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565116 = path.getOrDefault("name")
  valid_565116 = validateParameter(valid_565116, JString, required = true,
                                 default = nil)
  if valid_565116 != nil:
    section.add "name", valid_565116
  var valid_565117 = path.getOrDefault("subscriptionId")
  valid_565117 = validateParameter(valid_565117, JString, required = true,
                                 default = nil)
  if valid_565117 != nil:
    section.add "subscriptionId", valid_565117
  var valid_565118 = path.getOrDefault("resourceGroupName")
  valid_565118 = validateParameter(valid_565118, JString, required = true,
                                 default = nil)
  if valid_565118 != nil:
    section.add "resourceGroupName", valid_565118
  var valid_565119 = path.getOrDefault("instanceId")
  valid_565119 = validateParameter(valid_565119, JString, required = true,
                                 default = nil)
  if valid_565119 != nil:
    section.add "instanceId", valid_565119
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565120 = query.getOrDefault("api-version")
  valid_565120 = validateParameter(valid_565120, JString, required = true,
                                 default = nil)
  if valid_565120 != nil:
    section.add "api-version", valid_565120
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565121: Call_WebAppsGetInstanceMSDeployLog_565113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_565121.validator(path, query, header, formData, body)
  let scheme = call_565121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565121.url(scheme.get, call_565121.host, call_565121.base,
                         call_565121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565121, url, valid)

proc call*(call_565122: Call_WebAppsGetInstanceMSDeployLog_565113;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_565123 = newJObject()
  var query_565124 = newJObject()
  add(query_565124, "api-version", newJString(apiVersion))
  add(path_565123, "name", newJString(name))
  add(path_565123, "subscriptionId", newJString(subscriptionId))
  add(path_565123, "resourceGroupName", newJString(resourceGroupName))
  add(path_565123, "instanceId", newJString(instanceId))
  result = call_565122.call(path_565123, query_565124, nil, nil, nil)

var webAppsGetInstanceMSDeployLog* = Call_WebAppsGetInstanceMSDeployLog_565113(
    name: "webAppsGetInstanceMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLog_565114, base: "",
    url: url_WebAppsGetInstanceMSDeployLog_565115, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcesses_565125 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcesses_565127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcesses_565126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565128 = path.getOrDefault("name")
  valid_565128 = validateParameter(valid_565128, JString, required = true,
                                 default = nil)
  if valid_565128 != nil:
    section.add "name", valid_565128
  var valid_565129 = path.getOrDefault("subscriptionId")
  valid_565129 = validateParameter(valid_565129, JString, required = true,
                                 default = nil)
  if valid_565129 != nil:
    section.add "subscriptionId", valid_565129
  var valid_565130 = path.getOrDefault("resourceGroupName")
  valid_565130 = validateParameter(valid_565130, JString, required = true,
                                 default = nil)
  if valid_565130 != nil:
    section.add "resourceGroupName", valid_565130
  var valid_565131 = path.getOrDefault("instanceId")
  valid_565131 = validateParameter(valid_565131, JString, required = true,
                                 default = nil)
  if valid_565131 != nil:
    section.add "instanceId", valid_565131
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565132 = query.getOrDefault("api-version")
  valid_565132 = validateParameter(valid_565132, JString, required = true,
                                 default = nil)
  if valid_565132 != nil:
    section.add "api-version", valid_565132
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565133: Call_WebAppsListInstanceProcesses_565125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565133.validator(path, query, header, formData, body)
  let scheme = call_565133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565133.url(scheme.get, call_565133.host, call_565133.base,
                         call_565133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565133, url, valid)

proc call*(call_565134: Call_WebAppsListInstanceProcesses_565125;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565135 = newJObject()
  var query_565136 = newJObject()
  add(query_565136, "api-version", newJString(apiVersion))
  add(path_565135, "name", newJString(name))
  add(path_565135, "subscriptionId", newJString(subscriptionId))
  add(path_565135, "resourceGroupName", newJString(resourceGroupName))
  add(path_565135, "instanceId", newJString(instanceId))
  result = call_565134.call(path_565135, query_565136, nil, nil, nil)

var webAppsListInstanceProcesses* = Call_WebAppsListInstanceProcesses_565125(
    name: "webAppsListInstanceProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcesses_565126, base: "",
    url: url_WebAppsListInstanceProcesses_565127, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcess_565137 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcess_565139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcess_565138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565140 = path.getOrDefault("name")
  valid_565140 = validateParameter(valid_565140, JString, required = true,
                                 default = nil)
  if valid_565140 != nil:
    section.add "name", valid_565140
  var valid_565141 = path.getOrDefault("subscriptionId")
  valid_565141 = validateParameter(valid_565141, JString, required = true,
                                 default = nil)
  if valid_565141 != nil:
    section.add "subscriptionId", valid_565141
  var valid_565142 = path.getOrDefault("resourceGroupName")
  valid_565142 = validateParameter(valid_565142, JString, required = true,
                                 default = nil)
  if valid_565142 != nil:
    section.add "resourceGroupName", valid_565142
  var valid_565143 = path.getOrDefault("processId")
  valid_565143 = validateParameter(valid_565143, JString, required = true,
                                 default = nil)
  if valid_565143 != nil:
    section.add "processId", valid_565143
  var valid_565144 = path.getOrDefault("instanceId")
  valid_565144 = validateParameter(valid_565144, JString, required = true,
                                 default = nil)
  if valid_565144 != nil:
    section.add "instanceId", valid_565144
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565145 = query.getOrDefault("api-version")
  valid_565145 = validateParameter(valid_565145, JString, required = true,
                                 default = nil)
  if valid_565145 != nil:
    section.add "api-version", valid_565145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565146: Call_WebAppsGetInstanceProcess_565137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565146.validator(path, query, header, formData, body)
  let scheme = call_565146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565146.url(scheme.get, call_565146.host, call_565146.base,
                         call_565146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565146, url, valid)

proc call*(call_565147: Call_WebAppsGetInstanceProcess_565137; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565148 = newJObject()
  var query_565149 = newJObject()
  add(query_565149, "api-version", newJString(apiVersion))
  add(path_565148, "name", newJString(name))
  add(path_565148, "subscriptionId", newJString(subscriptionId))
  add(path_565148, "resourceGroupName", newJString(resourceGroupName))
  add(path_565148, "processId", newJString(processId))
  add(path_565148, "instanceId", newJString(instanceId))
  result = call_565147.call(path_565148, query_565149, nil, nil, nil)

var webAppsGetInstanceProcess* = Call_WebAppsGetInstanceProcess_565137(
    name: "webAppsGetInstanceProcess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcess_565138, base: "",
    url: url_WebAppsGetInstanceProcess_565139, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcess_565150 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteInstanceProcess_565152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcess_565151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565153 = path.getOrDefault("name")
  valid_565153 = validateParameter(valid_565153, JString, required = true,
                                 default = nil)
  if valid_565153 != nil:
    section.add "name", valid_565153
  var valid_565154 = path.getOrDefault("subscriptionId")
  valid_565154 = validateParameter(valid_565154, JString, required = true,
                                 default = nil)
  if valid_565154 != nil:
    section.add "subscriptionId", valid_565154
  var valid_565155 = path.getOrDefault("resourceGroupName")
  valid_565155 = validateParameter(valid_565155, JString, required = true,
                                 default = nil)
  if valid_565155 != nil:
    section.add "resourceGroupName", valid_565155
  var valid_565156 = path.getOrDefault("processId")
  valid_565156 = validateParameter(valid_565156, JString, required = true,
                                 default = nil)
  if valid_565156 != nil:
    section.add "processId", valid_565156
  var valid_565157 = path.getOrDefault("instanceId")
  valid_565157 = validateParameter(valid_565157, JString, required = true,
                                 default = nil)
  if valid_565157 != nil:
    section.add "instanceId", valid_565157
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565158 = query.getOrDefault("api-version")
  valid_565158 = validateParameter(valid_565158, JString, required = true,
                                 default = nil)
  if valid_565158 != nil:
    section.add "api-version", valid_565158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565159: Call_WebAppsDeleteInstanceProcess_565150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_565159.validator(path, query, header, formData, body)
  let scheme = call_565159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565159.url(scheme.get, call_565159.host, call_565159.base,
                         call_565159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565159, url, valid)

proc call*(call_565160: Call_WebAppsDeleteInstanceProcess_565150;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565161 = newJObject()
  var query_565162 = newJObject()
  add(query_565162, "api-version", newJString(apiVersion))
  add(path_565161, "name", newJString(name))
  add(path_565161, "subscriptionId", newJString(subscriptionId))
  add(path_565161, "resourceGroupName", newJString(resourceGroupName))
  add(path_565161, "processId", newJString(processId))
  add(path_565161, "instanceId", newJString(instanceId))
  result = call_565160.call(path_565161, query_565162, nil, nil, nil)

var webAppsDeleteInstanceProcess* = Call_WebAppsDeleteInstanceProcess_565150(
    name: "webAppsDeleteInstanceProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcess_565151, base: "",
    url: url_WebAppsDeleteInstanceProcess_565152, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDump_565163 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessDump_565165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDump_565164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565166 = path.getOrDefault("name")
  valid_565166 = validateParameter(valid_565166, JString, required = true,
                                 default = nil)
  if valid_565166 != nil:
    section.add "name", valid_565166
  var valid_565167 = path.getOrDefault("subscriptionId")
  valid_565167 = validateParameter(valid_565167, JString, required = true,
                                 default = nil)
  if valid_565167 != nil:
    section.add "subscriptionId", valid_565167
  var valid_565168 = path.getOrDefault("resourceGroupName")
  valid_565168 = validateParameter(valid_565168, JString, required = true,
                                 default = nil)
  if valid_565168 != nil:
    section.add "resourceGroupName", valid_565168
  var valid_565169 = path.getOrDefault("processId")
  valid_565169 = validateParameter(valid_565169, JString, required = true,
                                 default = nil)
  if valid_565169 != nil:
    section.add "processId", valid_565169
  var valid_565170 = path.getOrDefault("instanceId")
  valid_565170 = validateParameter(valid_565170, JString, required = true,
                                 default = nil)
  if valid_565170 != nil:
    section.add "instanceId", valid_565170
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565171 = query.getOrDefault("api-version")
  valid_565171 = validateParameter(valid_565171, JString, required = true,
                                 default = nil)
  if valid_565171 != nil:
    section.add "api-version", valid_565171
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565172: Call_WebAppsGetInstanceProcessDump_565163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565172.validator(path, query, header, formData, body)
  let scheme = call_565172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565172.url(scheme.get, call_565172.host, call_565172.base,
                         call_565172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565172, url, valid)

proc call*(call_565173: Call_WebAppsGetInstanceProcessDump_565163;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565174 = newJObject()
  var query_565175 = newJObject()
  add(query_565175, "api-version", newJString(apiVersion))
  add(path_565174, "name", newJString(name))
  add(path_565174, "subscriptionId", newJString(subscriptionId))
  add(path_565174, "resourceGroupName", newJString(resourceGroupName))
  add(path_565174, "processId", newJString(processId))
  add(path_565174, "instanceId", newJString(instanceId))
  result = call_565173.call(path_565174, query_565175, nil, nil, nil)

var webAppsGetInstanceProcessDump* = Call_WebAppsGetInstanceProcessDump_565163(
    name: "webAppsGetInstanceProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDump_565164, base: "",
    url: url_WebAppsGetInstanceProcessDump_565165, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModules_565176 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessModules_565178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModules_565177(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565179 = path.getOrDefault("name")
  valid_565179 = validateParameter(valid_565179, JString, required = true,
                                 default = nil)
  if valid_565179 != nil:
    section.add "name", valid_565179
  var valid_565180 = path.getOrDefault("subscriptionId")
  valid_565180 = validateParameter(valid_565180, JString, required = true,
                                 default = nil)
  if valid_565180 != nil:
    section.add "subscriptionId", valid_565180
  var valid_565181 = path.getOrDefault("resourceGroupName")
  valid_565181 = validateParameter(valid_565181, JString, required = true,
                                 default = nil)
  if valid_565181 != nil:
    section.add "resourceGroupName", valid_565181
  var valid_565182 = path.getOrDefault("processId")
  valid_565182 = validateParameter(valid_565182, JString, required = true,
                                 default = nil)
  if valid_565182 != nil:
    section.add "processId", valid_565182
  var valid_565183 = path.getOrDefault("instanceId")
  valid_565183 = validateParameter(valid_565183, JString, required = true,
                                 default = nil)
  if valid_565183 != nil:
    section.add "instanceId", valid_565183
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565184 = query.getOrDefault("api-version")
  valid_565184 = validateParameter(valid_565184, JString, required = true,
                                 default = nil)
  if valid_565184 != nil:
    section.add "api-version", valid_565184
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565185: Call_WebAppsListInstanceProcessModules_565176;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565185.validator(path, query, header, formData, body)
  let scheme = call_565185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565185.url(scheme.get, call_565185.host, call_565185.base,
                         call_565185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565185, url, valid)

proc call*(call_565186: Call_WebAppsListInstanceProcessModules_565176;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565187 = newJObject()
  var query_565188 = newJObject()
  add(query_565188, "api-version", newJString(apiVersion))
  add(path_565187, "name", newJString(name))
  add(path_565187, "subscriptionId", newJString(subscriptionId))
  add(path_565187, "resourceGroupName", newJString(resourceGroupName))
  add(path_565187, "processId", newJString(processId))
  add(path_565187, "instanceId", newJString(instanceId))
  result = call_565186.call(path_565187, query_565188, nil, nil, nil)

var webAppsListInstanceProcessModules* = Call_WebAppsListInstanceProcessModules_565176(
    name: "webAppsListInstanceProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModules_565177, base: "",
    url: url_WebAppsListInstanceProcessModules_565178, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModule_565189 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessModule_565191(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModule_565190(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565192 = path.getOrDefault("name")
  valid_565192 = validateParameter(valid_565192, JString, required = true,
                                 default = nil)
  if valid_565192 != nil:
    section.add "name", valid_565192
  var valid_565193 = path.getOrDefault("subscriptionId")
  valid_565193 = validateParameter(valid_565193, JString, required = true,
                                 default = nil)
  if valid_565193 != nil:
    section.add "subscriptionId", valid_565193
  var valid_565194 = path.getOrDefault("resourceGroupName")
  valid_565194 = validateParameter(valid_565194, JString, required = true,
                                 default = nil)
  if valid_565194 != nil:
    section.add "resourceGroupName", valid_565194
  var valid_565195 = path.getOrDefault("processId")
  valid_565195 = validateParameter(valid_565195, JString, required = true,
                                 default = nil)
  if valid_565195 != nil:
    section.add "processId", valid_565195
  var valid_565196 = path.getOrDefault("baseAddress")
  valid_565196 = validateParameter(valid_565196, JString, required = true,
                                 default = nil)
  if valid_565196 != nil:
    section.add "baseAddress", valid_565196
  var valid_565197 = path.getOrDefault("instanceId")
  valid_565197 = validateParameter(valid_565197, JString, required = true,
                                 default = nil)
  if valid_565197 != nil:
    section.add "instanceId", valid_565197
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565198 = query.getOrDefault("api-version")
  valid_565198 = validateParameter(valid_565198, JString, required = true,
                                 default = nil)
  if valid_565198 != nil:
    section.add "api-version", valid_565198
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565199: Call_WebAppsGetInstanceProcessModule_565189;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565199.validator(path, query, header, formData, body)
  let scheme = call_565199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565199.url(scheme.get, call_565199.host, call_565199.base,
                         call_565199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565199, url, valid)

proc call*(call_565200: Call_WebAppsGetInstanceProcessModule_565189;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565201 = newJObject()
  var query_565202 = newJObject()
  add(query_565202, "api-version", newJString(apiVersion))
  add(path_565201, "name", newJString(name))
  add(path_565201, "subscriptionId", newJString(subscriptionId))
  add(path_565201, "resourceGroupName", newJString(resourceGroupName))
  add(path_565201, "processId", newJString(processId))
  add(path_565201, "baseAddress", newJString(baseAddress))
  add(path_565201, "instanceId", newJString(instanceId))
  result = call_565200.call(path_565201, query_565202, nil, nil, nil)

var webAppsGetInstanceProcessModule* = Call_WebAppsGetInstanceProcessModule_565189(
    name: "webAppsGetInstanceProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModule_565190, base: "",
    url: url_WebAppsGetInstanceProcessModule_565191, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreads_565203 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessThreads_565205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreads_565204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565206 = path.getOrDefault("name")
  valid_565206 = validateParameter(valid_565206, JString, required = true,
                                 default = nil)
  if valid_565206 != nil:
    section.add "name", valid_565206
  var valid_565207 = path.getOrDefault("subscriptionId")
  valid_565207 = validateParameter(valid_565207, JString, required = true,
                                 default = nil)
  if valid_565207 != nil:
    section.add "subscriptionId", valid_565207
  var valid_565208 = path.getOrDefault("resourceGroupName")
  valid_565208 = validateParameter(valid_565208, JString, required = true,
                                 default = nil)
  if valid_565208 != nil:
    section.add "resourceGroupName", valid_565208
  var valid_565209 = path.getOrDefault("processId")
  valid_565209 = validateParameter(valid_565209, JString, required = true,
                                 default = nil)
  if valid_565209 != nil:
    section.add "processId", valid_565209
  var valid_565210 = path.getOrDefault("instanceId")
  valid_565210 = validateParameter(valid_565210, JString, required = true,
                                 default = nil)
  if valid_565210 != nil:
    section.add "instanceId", valid_565210
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565211 = query.getOrDefault("api-version")
  valid_565211 = validateParameter(valid_565211, JString, required = true,
                                 default = nil)
  if valid_565211 != nil:
    section.add "api-version", valid_565211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565212: Call_WebAppsListInstanceProcessThreads_565203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565212.validator(path, query, header, formData, body)
  let scheme = call_565212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565212.url(scheme.get, call_565212.host, call_565212.base,
                         call_565212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565212, url, valid)

proc call*(call_565213: Call_WebAppsListInstanceProcessThreads_565203;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565214 = newJObject()
  var query_565215 = newJObject()
  add(query_565215, "api-version", newJString(apiVersion))
  add(path_565214, "name", newJString(name))
  add(path_565214, "subscriptionId", newJString(subscriptionId))
  add(path_565214, "resourceGroupName", newJString(resourceGroupName))
  add(path_565214, "processId", newJString(processId))
  add(path_565214, "instanceId", newJString(instanceId))
  result = call_565213.call(path_565214, query_565215, nil, nil, nil)

var webAppsListInstanceProcessThreads* = Call_WebAppsListInstanceProcessThreads_565203(
    name: "webAppsListInstanceProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreads_565204, base: "",
    url: url_WebAppsListInstanceProcessThreads_565205, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThread_565216 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessThread_565218(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThread_565217(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_565219 = path.getOrDefault("threadId")
  valid_565219 = validateParameter(valid_565219, JString, required = true,
                                 default = nil)
  if valid_565219 != nil:
    section.add "threadId", valid_565219
  var valid_565220 = path.getOrDefault("name")
  valid_565220 = validateParameter(valid_565220, JString, required = true,
                                 default = nil)
  if valid_565220 != nil:
    section.add "name", valid_565220
  var valid_565221 = path.getOrDefault("subscriptionId")
  valid_565221 = validateParameter(valid_565221, JString, required = true,
                                 default = nil)
  if valid_565221 != nil:
    section.add "subscriptionId", valid_565221
  var valid_565222 = path.getOrDefault("resourceGroupName")
  valid_565222 = validateParameter(valid_565222, JString, required = true,
                                 default = nil)
  if valid_565222 != nil:
    section.add "resourceGroupName", valid_565222
  var valid_565223 = path.getOrDefault("processId")
  valid_565223 = validateParameter(valid_565223, JString, required = true,
                                 default = nil)
  if valid_565223 != nil:
    section.add "processId", valid_565223
  var valid_565224 = path.getOrDefault("instanceId")
  valid_565224 = validateParameter(valid_565224, JString, required = true,
                                 default = nil)
  if valid_565224 != nil:
    section.add "instanceId", valid_565224
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565225 = query.getOrDefault("api-version")
  valid_565225 = validateParameter(valid_565225, JString, required = true,
                                 default = nil)
  if valid_565225 != nil:
    section.add "api-version", valid_565225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565226: Call_WebAppsGetInstanceProcessThread_565216;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_565226.validator(path, query, header, formData, body)
  let scheme = call_565226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565226.url(scheme.get, call_565226.host, call_565226.base,
                         call_565226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565226, url, valid)

proc call*(call_565227: Call_WebAppsGetInstanceProcessThread_565216;
          threadId: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_565228 = newJObject()
  var query_565229 = newJObject()
  add(path_565228, "threadId", newJString(threadId))
  add(query_565229, "api-version", newJString(apiVersion))
  add(path_565228, "name", newJString(name))
  add(path_565228, "subscriptionId", newJString(subscriptionId))
  add(path_565228, "resourceGroupName", newJString(resourceGroupName))
  add(path_565228, "processId", newJString(processId))
  add(path_565228, "instanceId", newJString(instanceId))
  result = call_565227.call(path_565228, query_565229, nil, nil, nil)

var webAppsGetInstanceProcessThread* = Call_WebAppsGetInstanceProcessThread_565216(
    name: "webAppsGetInstanceProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThread_565217, base: "",
    url: url_WebAppsGetInstanceProcessThread_565218, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneable_565230 = ref object of OpenApiRestCall_563564
proc url_WebAppsIsCloneable_565232(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneable_565231(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565233 = path.getOrDefault("name")
  valid_565233 = validateParameter(valid_565233, JString, required = true,
                                 default = nil)
  if valid_565233 != nil:
    section.add "name", valid_565233
  var valid_565234 = path.getOrDefault("subscriptionId")
  valid_565234 = validateParameter(valid_565234, JString, required = true,
                                 default = nil)
  if valid_565234 != nil:
    section.add "subscriptionId", valid_565234
  var valid_565235 = path.getOrDefault("resourceGroupName")
  valid_565235 = validateParameter(valid_565235, JString, required = true,
                                 default = nil)
  if valid_565235 != nil:
    section.add "resourceGroupName", valid_565235
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565236 = query.getOrDefault("api-version")
  valid_565236 = validateParameter(valid_565236, JString, required = true,
                                 default = nil)
  if valid_565236 != nil:
    section.add "api-version", valid_565236
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565237: Call_WebAppsIsCloneable_565230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_565237.validator(path, query, header, formData, body)
  let scheme = call_565237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565237.url(scheme.get, call_565237.host, call_565237.base,
                         call_565237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565237, url, valid)

proc call*(call_565238: Call_WebAppsIsCloneable_565230; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsIsCloneable
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565239 = newJObject()
  var query_565240 = newJObject()
  add(query_565240, "api-version", newJString(apiVersion))
  add(path_565239, "name", newJString(name))
  add(path_565239, "subscriptionId", newJString(subscriptionId))
  add(path_565239, "resourceGroupName", newJString(resourceGroupName))
  result = call_565238.call(path_565239, query_565240, nil, nil, nil)

var webAppsIsCloneable* = Call_WebAppsIsCloneable_565230(
    name: "webAppsIsCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_WebAppsIsCloneable_565231, base: "",
    url: url_WebAppsIsCloneable_565232, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggers_565241 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSyncFunctionTriggers_565243(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggers_565242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565244 = path.getOrDefault("name")
  valid_565244 = validateParameter(valid_565244, JString, required = true,
                                 default = nil)
  if valid_565244 != nil:
    section.add "name", valid_565244
  var valid_565245 = path.getOrDefault("subscriptionId")
  valid_565245 = validateParameter(valid_565245, JString, required = true,
                                 default = nil)
  if valid_565245 != nil:
    section.add "subscriptionId", valid_565245
  var valid_565246 = path.getOrDefault("resourceGroupName")
  valid_565246 = validateParameter(valid_565246, JString, required = true,
                                 default = nil)
  if valid_565246 != nil:
    section.add "resourceGroupName", valid_565246
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565247 = query.getOrDefault("api-version")
  valid_565247 = validateParameter(valid_565247, JString, required = true,
                                 default = nil)
  if valid_565247 != nil:
    section.add "api-version", valid_565247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565248: Call_WebAppsListSyncFunctionTriggers_565241;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_565248.validator(path, query, header, formData, body)
  let scheme = call_565248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565248.url(scheme.get, call_565248.host, call_565248.base,
                         call_565248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565248, url, valid)

proc call*(call_565249: Call_WebAppsListSyncFunctionTriggers_565241;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSyncFunctionTriggers
  ## This is to allow calling via powershell and ARM template.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565250 = newJObject()
  var query_565251 = newJObject()
  add(query_565251, "api-version", newJString(apiVersion))
  add(path_565250, "name", newJString(name))
  add(path_565250, "subscriptionId", newJString(subscriptionId))
  add(path_565250, "resourceGroupName", newJString(resourceGroupName))
  result = call_565249.call(path_565250, query_565251, nil, nil, nil)

var webAppsListSyncFunctionTriggers* = Call_WebAppsListSyncFunctionTriggers_565241(
    name: "webAppsListSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggers_565242, base: "",
    url: url_WebAppsListSyncFunctionTriggers_565243, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitions_565252 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetricDefinitions_565254(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitions_565253(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565255 = path.getOrDefault("name")
  valid_565255 = validateParameter(valid_565255, JString, required = true,
                                 default = nil)
  if valid_565255 != nil:
    section.add "name", valid_565255
  var valid_565256 = path.getOrDefault("subscriptionId")
  valid_565256 = validateParameter(valid_565256, JString, required = true,
                                 default = nil)
  if valid_565256 != nil:
    section.add "subscriptionId", valid_565256
  var valid_565257 = path.getOrDefault("resourceGroupName")
  valid_565257 = validateParameter(valid_565257, JString, required = true,
                                 default = nil)
  if valid_565257 != nil:
    section.add "resourceGroupName", valid_565257
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565258 = query.getOrDefault("api-version")
  valid_565258 = validateParameter(valid_565258, JString, required = true,
                                 default = nil)
  if valid_565258 != nil:
    section.add "api-version", valid_565258
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565259: Call_WebAppsListMetricDefinitions_565252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_565259.validator(path, query, header, formData, body)
  let scheme = call_565259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565259.url(scheme.get, call_565259.host, call_565259.base,
                         call_565259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565259, url, valid)

proc call*(call_565260: Call_WebAppsListMetricDefinitions_565252;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListMetricDefinitions
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565261 = newJObject()
  var query_565262 = newJObject()
  add(query_565262, "api-version", newJString(apiVersion))
  add(path_565261, "name", newJString(name))
  add(path_565261, "subscriptionId", newJString(subscriptionId))
  add(path_565261, "resourceGroupName", newJString(resourceGroupName))
  result = call_565260.call(path_565261, query_565262, nil, nil, nil)

var webAppsListMetricDefinitions* = Call_WebAppsListMetricDefinitions_565252(
    name: "webAppsListMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitions_565253, base: "",
    url: url_WebAppsListMetricDefinitions_565254, schemes: {Scheme.Https})
type
  Call_WebAppsListMetrics_565263 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetrics_565265(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetrics_565264(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565267 = path.getOrDefault("name")
  valid_565267 = validateParameter(valid_565267, JString, required = true,
                                 default = nil)
  if valid_565267 != nil:
    section.add "name", valid_565267
  var valid_565268 = path.getOrDefault("subscriptionId")
  valid_565268 = validateParameter(valid_565268, JString, required = true,
                                 default = nil)
  if valid_565268 != nil:
    section.add "subscriptionId", valid_565268
  var valid_565269 = path.getOrDefault("resourceGroupName")
  valid_565269 = validateParameter(valid_565269, JString, required = true,
                                 default = nil)
  if valid_565269 != nil:
    section.add "resourceGroupName", valid_565269
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_565270 = query.getOrDefault("details")
  valid_565270 = validateParameter(valid_565270, JBool, required = false, default = nil)
  if valid_565270 != nil:
    section.add "details", valid_565270
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565271 = query.getOrDefault("api-version")
  valid_565271 = validateParameter(valid_565271, JString, required = true,
                                 default = nil)
  if valid_565271 != nil:
    section.add "api-version", valid_565271
  var valid_565272 = query.getOrDefault("$filter")
  valid_565272 = validateParameter(valid_565272, JString, required = false,
                                 default = nil)
  if valid_565272 != nil:
    section.add "$filter", valid_565272
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565273: Call_WebAppsListMetrics_565263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_565273.validator(path, query, header, formData, body)
  let scheme = call_565273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565273.url(scheme.get, call_565273.host, call_565273.base,
                         call_565273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565273, url, valid)

proc call*(call_565274: Call_WebAppsListMetrics_565263; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetrics
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_565275 = newJObject()
  var query_565276 = newJObject()
  add(query_565276, "details", newJBool(details))
  add(query_565276, "api-version", newJString(apiVersion))
  add(path_565275, "name", newJString(name))
  add(path_565275, "subscriptionId", newJString(subscriptionId))
  add(path_565275, "resourceGroupName", newJString(resourceGroupName))
  add(query_565276, "$filter", newJString(Filter))
  result = call_565274.call(path_565275, query_565276, nil, nil, nil)

var webAppsListMetrics* = Call_WebAppsListMetrics_565263(
    name: "webAppsListMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_WebAppsListMetrics_565264, base: "",
    url: url_WebAppsListMetrics_565265, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateStorage_565277 = ref object of OpenApiRestCall_563564
proc url_WebAppsMigrateStorage_565279(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migrate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateStorage_565278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565280 = path.getOrDefault("name")
  valid_565280 = validateParameter(valid_565280, JString, required = true,
                                 default = nil)
  if valid_565280 != nil:
    section.add "name", valid_565280
  var valid_565281 = path.getOrDefault("subscriptionId")
  valid_565281 = validateParameter(valid_565281, JString, required = true,
                                 default = nil)
  if valid_565281 != nil:
    section.add "subscriptionId", valid_565281
  var valid_565282 = path.getOrDefault("resourceGroupName")
  valid_565282 = validateParameter(valid_565282, JString, required = true,
                                 default = nil)
  if valid_565282 != nil:
    section.add "resourceGroupName", valid_565282
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   subscriptionName: JString (required)
  ##                   : Azure subscription.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565283 = query.getOrDefault("api-version")
  valid_565283 = validateParameter(valid_565283, JString, required = true,
                                 default = nil)
  if valid_565283 != nil:
    section.add "api-version", valid_565283
  var valid_565284 = query.getOrDefault("subscriptionName")
  valid_565284 = validateParameter(valid_565284, JString, required = true,
                                 default = nil)
  if valid_565284 != nil:
    section.add "subscriptionName", valid_565284
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565286: Call_WebAppsMigrateStorage_565277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app.
  ## 
  let valid = call_565286.validator(path, query, header, formData, body)
  let scheme = call_565286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565286.url(scheme.get, call_565286.host, call_565286.base,
                         call_565286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565286, url, valid)

proc call*(call_565287: Call_WebAppsMigrateStorage_565277; apiVersion: string;
          migrationOptions: JsonNode; name: string; subscriptionId: string;
          subscriptionName: string; resourceGroupName: string): Recallable =
  ## webAppsMigrateStorage
  ## Restores a web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   subscriptionName: string (required)
  ##                   : Azure subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565288 = newJObject()
  var query_565289 = newJObject()
  var body_565290 = newJObject()
  add(query_565289, "api-version", newJString(apiVersion))
  if migrationOptions != nil:
    body_565290 = migrationOptions
  add(path_565288, "name", newJString(name))
  add(path_565288, "subscriptionId", newJString(subscriptionId))
  add(query_565289, "subscriptionName", newJString(subscriptionName))
  add(path_565288, "resourceGroupName", newJString(resourceGroupName))
  result = call_565287.call(path_565288, query_565289, nil, nil, body_565290)

var webAppsMigrateStorage* = Call_WebAppsMigrateStorage_565277(
    name: "webAppsMigrateStorage", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    validator: validate_WebAppsMigrateStorage_565278, base: "",
    url: url_WebAppsMigrateStorage_565279, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateMySql_565291 = ref object of OpenApiRestCall_563564
proc url_WebAppsMigrateMySql_565293(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateMySql_565292(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565294 = path.getOrDefault("name")
  valid_565294 = validateParameter(valid_565294, JString, required = true,
                                 default = nil)
  if valid_565294 != nil:
    section.add "name", valid_565294
  var valid_565295 = path.getOrDefault("subscriptionId")
  valid_565295 = validateParameter(valid_565295, JString, required = true,
                                 default = nil)
  if valid_565295 != nil:
    section.add "subscriptionId", valid_565295
  var valid_565296 = path.getOrDefault("resourceGroupName")
  valid_565296 = validateParameter(valid_565296, JString, required = true,
                                 default = nil)
  if valid_565296 != nil:
    section.add "resourceGroupName", valid_565296
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565297 = query.getOrDefault("api-version")
  valid_565297 = validateParameter(valid_565297, JString, required = true,
                                 default = nil)
  if valid_565297 != nil:
    section.add "api-version", valid_565297
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565299: Call_WebAppsMigrateMySql_565291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  let valid = call_565299.validator(path, query, header, formData, body)
  let scheme = call_565299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565299.url(scheme.get, call_565299.host, call_565299.base,
                         call_565299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565299, url, valid)

proc call*(call_565300: Call_WebAppsMigrateMySql_565291; apiVersion: string;
          name: string; subscriptionId: string; migrationRequestEnvelope: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsMigrateMySql
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565301 = newJObject()
  var query_565302 = newJObject()
  var body_565303 = newJObject()
  add(query_565302, "api-version", newJString(apiVersion))
  add(path_565301, "name", newJString(name))
  add(path_565301, "subscriptionId", newJString(subscriptionId))
  if migrationRequestEnvelope != nil:
    body_565303 = migrationRequestEnvelope
  add(path_565301, "resourceGroupName", newJString(resourceGroupName))
  result = call_565300.call(path_565301, query_565302, nil, nil, body_565303)

var webAppsMigrateMySql* = Call_WebAppsMigrateMySql_565291(
    name: "webAppsMigrateMySql", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    validator: validate_WebAppsMigrateMySql_565292, base: "",
    url: url_WebAppsMigrateMySql_565293, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatus_565304 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMigrateMySqlStatus_565306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatus_565305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565307 = path.getOrDefault("name")
  valid_565307 = validateParameter(valid_565307, JString, required = true,
                                 default = nil)
  if valid_565307 != nil:
    section.add "name", valid_565307
  var valid_565308 = path.getOrDefault("subscriptionId")
  valid_565308 = validateParameter(valid_565308, JString, required = true,
                                 default = nil)
  if valid_565308 != nil:
    section.add "subscriptionId", valid_565308
  var valid_565309 = path.getOrDefault("resourceGroupName")
  valid_565309 = validateParameter(valid_565309, JString, required = true,
                                 default = nil)
  if valid_565309 != nil:
    section.add "resourceGroupName", valid_565309
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565310 = query.getOrDefault("api-version")
  valid_565310 = validateParameter(valid_565310, JString, required = true,
                                 default = nil)
  if valid_565310 != nil:
    section.add "api-version", valid_565310
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565311: Call_WebAppsGetMigrateMySqlStatus_565304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_565311.validator(path, query, header, formData, body)
  let scheme = call_565311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565311.url(scheme.get, call_565311.host, call_565311.base,
                         call_565311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565311, url, valid)

proc call*(call_565312: Call_WebAppsGetMigrateMySqlStatus_565304;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMigrateMySqlStatus
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565313 = newJObject()
  var query_565314 = newJObject()
  add(query_565314, "api-version", newJString(apiVersion))
  add(path_565313, "name", newJString(name))
  add(path_565313, "subscriptionId", newJString(subscriptionId))
  add(path_565313, "resourceGroupName", newJString(resourceGroupName))
  result = call_565312.call(path_565313, query_565314, nil, nil, nil)

var webAppsGetMigrateMySqlStatus* = Call_WebAppsGetMigrateMySqlStatus_565304(
    name: "webAppsGetMigrateMySqlStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatus_565305, base: "",
    url: url_WebAppsGetMigrateMySqlStatus_565306, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeatures_565315 = ref object of OpenApiRestCall_563564
proc url_WebAppsListNetworkFeatures_565317(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeatures_565316(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `view` field"
  var valid_565318 = path.getOrDefault("view")
  valid_565318 = validateParameter(valid_565318, JString, required = true,
                                 default = nil)
  if valid_565318 != nil:
    section.add "view", valid_565318
  var valid_565319 = path.getOrDefault("name")
  valid_565319 = validateParameter(valid_565319, JString, required = true,
                                 default = nil)
  if valid_565319 != nil:
    section.add "name", valid_565319
  var valid_565320 = path.getOrDefault("subscriptionId")
  valid_565320 = validateParameter(valid_565320, JString, required = true,
                                 default = nil)
  if valid_565320 != nil:
    section.add "subscriptionId", valid_565320
  var valid_565321 = path.getOrDefault("resourceGroupName")
  valid_565321 = validateParameter(valid_565321, JString, required = true,
                                 default = nil)
  if valid_565321 != nil:
    section.add "resourceGroupName", valid_565321
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565322 = query.getOrDefault("api-version")
  valid_565322 = validateParameter(valid_565322, JString, required = true,
                                 default = nil)
  if valid_565322 != nil:
    section.add "api-version", valid_565322
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565323: Call_WebAppsListNetworkFeatures_565315; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_565323.validator(path, query, header, formData, body)
  let scheme = call_565323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565323.url(scheme.get, call_565323.host, call_565323.base,
                         call_565323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565323, url, valid)

proc call*(call_565324: Call_WebAppsListNetworkFeatures_565315; apiVersion: string;
          view: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListNetworkFeatures
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565325 = newJObject()
  var query_565326 = newJObject()
  add(query_565326, "api-version", newJString(apiVersion))
  add(path_565325, "view", newJString(view))
  add(path_565325, "name", newJString(name))
  add(path_565325, "subscriptionId", newJString(subscriptionId))
  add(path_565325, "resourceGroupName", newJString(resourceGroupName))
  result = call_565324.call(path_565325, query_565326, nil, nil, nil)

var webAppsListNetworkFeatures* = Call_WebAppsListNetworkFeatures_565315(
    name: "webAppsListNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeatures_565316, base: "",
    url: url_WebAppsListNetworkFeatures_565317, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTrace_565327 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartWebSiteNetworkTrace_565329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTrace_565328(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565330 = path.getOrDefault("name")
  valid_565330 = validateParameter(valid_565330, JString, required = true,
                                 default = nil)
  if valid_565330 != nil:
    section.add "name", valid_565330
  var valid_565331 = path.getOrDefault("subscriptionId")
  valid_565331 = validateParameter(valid_565331, JString, required = true,
                                 default = nil)
  if valid_565331 != nil:
    section.add "subscriptionId", valid_565331
  var valid_565332 = path.getOrDefault("resourceGroupName")
  valid_565332 = validateParameter(valid_565332, JString, required = true,
                                 default = nil)
  if valid_565332 != nil:
    section.add "resourceGroupName", valid_565332
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565333 = query.getOrDefault("api-version")
  valid_565333 = validateParameter(valid_565333, JString, required = true,
                                 default = nil)
  if valid_565333 != nil:
    section.add "api-version", valid_565333
  var valid_565334 = query.getOrDefault("sasUrl")
  valid_565334 = validateParameter(valid_565334, JString, required = false,
                                 default = nil)
  if valid_565334 != nil:
    section.add "sasUrl", valid_565334
  var valid_565335 = query.getOrDefault("durationInSeconds")
  valid_565335 = validateParameter(valid_565335, JInt, required = false, default = nil)
  if valid_565335 != nil:
    section.add "durationInSeconds", valid_565335
  var valid_565336 = query.getOrDefault("maxFrameLength")
  valid_565336 = validateParameter(valid_565336, JInt, required = false, default = nil)
  if valid_565336 != nil:
    section.add "maxFrameLength", valid_565336
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565337: Call_WebAppsStartWebSiteNetworkTrace_565327;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_565337.validator(path, query, header, formData, body)
  let scheme = call_565337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565337.url(scheme.get, call_565337.host, call_565337.base,
                         call_565337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565337, url, valid)

proc call*(call_565338: Call_WebAppsStartWebSiteNetworkTrace_565327;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartWebSiteNetworkTrace
  ## Start capturing network packets for the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_565339 = newJObject()
  var query_565340 = newJObject()
  add(query_565340, "api-version", newJString(apiVersion))
  add(query_565340, "sasUrl", newJString(sasUrl))
  add(path_565339, "name", newJString(name))
  add(path_565339, "subscriptionId", newJString(subscriptionId))
  add(query_565340, "durationInSeconds", newJInt(durationInSeconds))
  add(path_565339, "resourceGroupName", newJString(resourceGroupName))
  add(query_565340, "maxFrameLength", newJInt(maxFrameLength))
  result = call_565338.call(path_565339, query_565340, nil, nil, nil)

var webAppsStartWebSiteNetworkTrace* = Call_WebAppsStartWebSiteNetworkTrace_565327(
    name: "webAppsStartWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTrace_565328, base: "",
    url: url_WebAppsStartWebSiteNetworkTrace_565329, schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTrace_565341 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopWebSiteNetworkTrace_565343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTrace_565342(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565344 = path.getOrDefault("name")
  valid_565344 = validateParameter(valid_565344, JString, required = true,
                                 default = nil)
  if valid_565344 != nil:
    section.add "name", valid_565344
  var valid_565345 = path.getOrDefault("subscriptionId")
  valid_565345 = validateParameter(valid_565345, JString, required = true,
                                 default = nil)
  if valid_565345 != nil:
    section.add "subscriptionId", valid_565345
  var valid_565346 = path.getOrDefault("resourceGroupName")
  valid_565346 = validateParameter(valid_565346, JString, required = true,
                                 default = nil)
  if valid_565346 != nil:
    section.add "resourceGroupName", valid_565346
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565347 = query.getOrDefault("api-version")
  valid_565347 = validateParameter(valid_565347, JString, required = true,
                                 default = nil)
  if valid_565347 != nil:
    section.add "api-version", valid_565347
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565348: Call_WebAppsStopWebSiteNetworkTrace_565341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_565348.validator(path, query, header, formData, body)
  let scheme = call_565348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565348.url(scheme.get, call_565348.host, call_565348.base,
                         call_565348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565348, url, valid)

proc call*(call_565349: Call_WebAppsStopWebSiteNetworkTrace_565341;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopWebSiteNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565350 = newJObject()
  var query_565351 = newJObject()
  add(query_565351, "api-version", newJString(apiVersion))
  add(path_565350, "name", newJString(name))
  add(path_565350, "subscriptionId", newJString(subscriptionId))
  add(path_565350, "resourceGroupName", newJString(resourceGroupName))
  result = call_565349.call(path_565350, query_565351, nil, nil, nil)

var webAppsStopWebSiteNetworkTrace* = Call_WebAppsStopWebSiteNetworkTrace_565341(
    name: "webAppsStopWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTrace_565342, base: "",
    url: url_WebAppsStopWebSiteNetworkTrace_565343, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPassword_565352 = ref object of OpenApiRestCall_563564
proc url_WebAppsGenerateNewSitePublishingPassword_565354(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPassword_565353(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565355 = path.getOrDefault("name")
  valid_565355 = validateParameter(valid_565355, JString, required = true,
                                 default = nil)
  if valid_565355 != nil:
    section.add "name", valid_565355
  var valid_565356 = path.getOrDefault("subscriptionId")
  valid_565356 = validateParameter(valid_565356, JString, required = true,
                                 default = nil)
  if valid_565356 != nil:
    section.add "subscriptionId", valid_565356
  var valid_565357 = path.getOrDefault("resourceGroupName")
  valid_565357 = validateParameter(valid_565357, JString, required = true,
                                 default = nil)
  if valid_565357 != nil:
    section.add "resourceGroupName", valid_565357
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565358 = query.getOrDefault("api-version")
  valid_565358 = validateParameter(valid_565358, JString, required = true,
                                 default = nil)
  if valid_565358 != nil:
    section.add "api-version", valid_565358
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565359: Call_WebAppsGenerateNewSitePublishingPassword_565352;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_565359.validator(path, query, header, formData, body)
  let scheme = call_565359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565359.url(scheme.get, call_565359.host, call_565359.base,
                         call_565359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565359, url, valid)

proc call*(call_565360: Call_WebAppsGenerateNewSitePublishingPassword_565352;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGenerateNewSitePublishingPassword
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565361 = newJObject()
  var query_565362 = newJObject()
  add(query_565362, "api-version", newJString(apiVersion))
  add(path_565361, "name", newJString(name))
  add(path_565361, "subscriptionId", newJString(subscriptionId))
  add(path_565361, "resourceGroupName", newJString(resourceGroupName))
  result = call_565360.call(path_565361, query_565362, nil, nil, nil)

var webAppsGenerateNewSitePublishingPassword* = Call_WebAppsGenerateNewSitePublishingPassword_565352(
    name: "webAppsGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPassword_565353, base: "",
    url: url_WebAppsGenerateNewSitePublishingPassword_565354,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCounters_565363 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPerfMonCounters_565365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCounters_565364(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565366 = path.getOrDefault("name")
  valid_565366 = validateParameter(valid_565366, JString, required = true,
                                 default = nil)
  if valid_565366 != nil:
    section.add "name", valid_565366
  var valid_565367 = path.getOrDefault("subscriptionId")
  valid_565367 = validateParameter(valid_565367, JString, required = true,
                                 default = nil)
  if valid_565367 != nil:
    section.add "subscriptionId", valid_565367
  var valid_565368 = path.getOrDefault("resourceGroupName")
  valid_565368 = validateParameter(valid_565368, JString, required = true,
                                 default = nil)
  if valid_565368 != nil:
    section.add "resourceGroupName", valid_565368
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565369 = query.getOrDefault("api-version")
  valid_565369 = validateParameter(valid_565369, JString, required = true,
                                 default = nil)
  if valid_565369 != nil:
    section.add "api-version", valid_565369
  var valid_565370 = query.getOrDefault("$filter")
  valid_565370 = validateParameter(valid_565370, JString, required = false,
                                 default = nil)
  if valid_565370 != nil:
    section.add "$filter", valid_565370
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565371: Call_WebAppsListPerfMonCounters_565363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_565371.validator(path, query, header, formData, body)
  let scheme = call_565371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565371.url(scheme.get, call_565371.host, call_565371.base,
                         call_565371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565371, url, valid)

proc call*(call_565372: Call_WebAppsListPerfMonCounters_565363; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          Filter: string = ""): Recallable =
  ## webAppsListPerfMonCounters
  ## Gets perfmon counters for web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_565373 = newJObject()
  var query_565374 = newJObject()
  add(query_565374, "api-version", newJString(apiVersion))
  add(path_565373, "name", newJString(name))
  add(path_565373, "subscriptionId", newJString(subscriptionId))
  add(path_565373, "resourceGroupName", newJString(resourceGroupName))
  add(query_565374, "$filter", newJString(Filter))
  result = call_565372.call(path_565373, query_565374, nil, nil, nil)

var webAppsListPerfMonCounters* = Call_WebAppsListPerfMonCounters_565363(
    name: "webAppsListPerfMonCounters", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    validator: validate_WebAppsListPerfMonCounters_565364, base: "",
    url: url_WebAppsListPerfMonCounters_565365, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlag_565375 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSitePhpErrorLogFlag_565377(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlag_565376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565378 = path.getOrDefault("name")
  valid_565378 = validateParameter(valid_565378, JString, required = true,
                                 default = nil)
  if valid_565378 != nil:
    section.add "name", valid_565378
  var valid_565379 = path.getOrDefault("subscriptionId")
  valid_565379 = validateParameter(valid_565379, JString, required = true,
                                 default = nil)
  if valid_565379 != nil:
    section.add "subscriptionId", valid_565379
  var valid_565380 = path.getOrDefault("resourceGroupName")
  valid_565380 = validateParameter(valid_565380, JString, required = true,
                                 default = nil)
  if valid_565380 != nil:
    section.add "resourceGroupName", valid_565380
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565381 = query.getOrDefault("api-version")
  valid_565381 = validateParameter(valid_565381, JString, required = true,
                                 default = nil)
  if valid_565381 != nil:
    section.add "api-version", valid_565381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565382: Call_WebAppsGetSitePhpErrorLogFlag_565375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_565382.validator(path, query, header, formData, body)
  let scheme = call_565382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565382.url(scheme.get, call_565382.host, call_565382.base,
                         call_565382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565382, url, valid)

proc call*(call_565383: Call_WebAppsGetSitePhpErrorLogFlag_565375;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlag
  ## Gets web app's event logs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565384 = newJObject()
  var query_565385 = newJObject()
  add(query_565385, "api-version", newJString(apiVersion))
  add(path_565384, "name", newJString(name))
  add(path_565384, "subscriptionId", newJString(subscriptionId))
  add(path_565384, "resourceGroupName", newJString(resourceGroupName))
  result = call_565383.call(path_565384, query_565385, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlag* = Call_WebAppsGetSitePhpErrorLogFlag_565375(
    name: "webAppsGetSitePhpErrorLogFlag", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlag_565376, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlag_565377, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOns_565386 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPremierAddOns_565388(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOns_565387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565389 = path.getOrDefault("name")
  valid_565389 = validateParameter(valid_565389, JString, required = true,
                                 default = nil)
  if valid_565389 != nil:
    section.add "name", valid_565389
  var valid_565390 = path.getOrDefault("subscriptionId")
  valid_565390 = validateParameter(valid_565390, JString, required = true,
                                 default = nil)
  if valid_565390 != nil:
    section.add "subscriptionId", valid_565390
  var valid_565391 = path.getOrDefault("resourceGroupName")
  valid_565391 = validateParameter(valid_565391, JString, required = true,
                                 default = nil)
  if valid_565391 != nil:
    section.add "resourceGroupName", valid_565391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565392 = query.getOrDefault("api-version")
  valid_565392 = validateParameter(valid_565392, JString, required = true,
                                 default = nil)
  if valid_565392 != nil:
    section.add "api-version", valid_565392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565393: Call_WebAppsListPremierAddOns_565386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_565393.validator(path, query, header, formData, body)
  let scheme = call_565393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565393.url(scheme.get, call_565393.host, call_565393.base,
                         call_565393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565393, url, valid)

proc call*(call_565394: Call_WebAppsListPremierAddOns_565386; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListPremierAddOns
  ## Gets the premier add-ons of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565395 = newJObject()
  var query_565396 = newJObject()
  add(query_565396, "api-version", newJString(apiVersion))
  add(path_565395, "name", newJString(name))
  add(path_565395, "subscriptionId", newJString(subscriptionId))
  add(path_565395, "resourceGroupName", newJString(resourceGroupName))
  result = call_565394.call(path_565395, query_565396, nil, nil, nil)

var webAppsListPremierAddOns* = Call_WebAppsListPremierAddOns_565386(
    name: "webAppsListPremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_WebAppsListPremierAddOns_565387, base: "",
    url: url_WebAppsListPremierAddOns_565388, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOn_565409 = ref object of OpenApiRestCall_563564
proc url_WebAppsAddPremierAddOn_565411(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOn_565410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565412 = path.getOrDefault("name")
  valid_565412 = validateParameter(valid_565412, JString, required = true,
                                 default = nil)
  if valid_565412 != nil:
    section.add "name", valid_565412
  var valid_565413 = path.getOrDefault("subscriptionId")
  valid_565413 = validateParameter(valid_565413, JString, required = true,
                                 default = nil)
  if valid_565413 != nil:
    section.add "subscriptionId", valid_565413
  var valid_565414 = path.getOrDefault("premierAddOnName")
  valid_565414 = validateParameter(valid_565414, JString, required = true,
                                 default = nil)
  if valid_565414 != nil:
    section.add "premierAddOnName", valid_565414
  var valid_565415 = path.getOrDefault("resourceGroupName")
  valid_565415 = validateParameter(valid_565415, JString, required = true,
                                 default = nil)
  if valid_565415 != nil:
    section.add "resourceGroupName", valid_565415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565416 = query.getOrDefault("api-version")
  valid_565416 = validateParameter(valid_565416, JString, required = true,
                                 default = nil)
  if valid_565416 != nil:
    section.add "api-version", valid_565416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565418: Call_WebAppsAddPremierAddOn_565409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_565418.validator(path, query, header, formData, body)
  let scheme = call_565418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565418.url(scheme.get, call_565418.host, call_565418.base,
                         call_565418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565418, url, valid)

proc call*(call_565419: Call_WebAppsAddPremierAddOn_565409; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          premierAddOn: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsAddPremierAddOn
  ## Updates a named add-on of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565420 = newJObject()
  var query_565421 = newJObject()
  var body_565422 = newJObject()
  add(query_565421, "api-version", newJString(apiVersion))
  add(path_565420, "name", newJString(name))
  add(path_565420, "subscriptionId", newJString(subscriptionId))
  add(path_565420, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_565422 = premierAddOn
  add(path_565420, "resourceGroupName", newJString(resourceGroupName))
  result = call_565419.call(path_565420, query_565421, nil, nil, body_565422)

var webAppsAddPremierAddOn* = Call_WebAppsAddPremierAddOn_565409(
    name: "webAppsAddPremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOn_565410, base: "",
    url: url_WebAppsAddPremierAddOn_565411, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOn_565397 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPremierAddOn_565399(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOn_565398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565400 = path.getOrDefault("name")
  valid_565400 = validateParameter(valid_565400, JString, required = true,
                                 default = nil)
  if valid_565400 != nil:
    section.add "name", valid_565400
  var valid_565401 = path.getOrDefault("subscriptionId")
  valid_565401 = validateParameter(valid_565401, JString, required = true,
                                 default = nil)
  if valid_565401 != nil:
    section.add "subscriptionId", valid_565401
  var valid_565402 = path.getOrDefault("premierAddOnName")
  valid_565402 = validateParameter(valid_565402, JString, required = true,
                                 default = nil)
  if valid_565402 != nil:
    section.add "premierAddOnName", valid_565402
  var valid_565403 = path.getOrDefault("resourceGroupName")
  valid_565403 = validateParameter(valid_565403, JString, required = true,
                                 default = nil)
  if valid_565403 != nil:
    section.add "resourceGroupName", valid_565403
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565404 = query.getOrDefault("api-version")
  valid_565404 = validateParameter(valid_565404, JString, required = true,
                                 default = nil)
  if valid_565404 != nil:
    section.add "api-version", valid_565404
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565405: Call_WebAppsGetPremierAddOn_565397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_565405.validator(path, query, header, formData, body)
  let scheme = call_565405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565405.url(scheme.get, call_565405.host, call_565405.base,
                         call_565405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565405, url, valid)

proc call*(call_565406: Call_WebAppsGetPremierAddOn_565397; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetPremierAddOn
  ## Gets a named add-on of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565407 = newJObject()
  var query_565408 = newJObject()
  add(query_565408, "api-version", newJString(apiVersion))
  add(path_565407, "name", newJString(name))
  add(path_565407, "subscriptionId", newJString(subscriptionId))
  add(path_565407, "premierAddOnName", newJString(premierAddOnName))
  add(path_565407, "resourceGroupName", newJString(resourceGroupName))
  result = call_565406.call(path_565407, query_565408, nil, nil, nil)

var webAppsGetPremierAddOn* = Call_WebAppsGetPremierAddOn_565397(
    name: "webAppsGetPremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOn_565398, base: "",
    url: url_WebAppsGetPremierAddOn_565399, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOn_565423 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePremierAddOn_565425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOn_565424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565426 = path.getOrDefault("name")
  valid_565426 = validateParameter(valid_565426, JString, required = true,
                                 default = nil)
  if valid_565426 != nil:
    section.add "name", valid_565426
  var valid_565427 = path.getOrDefault("subscriptionId")
  valid_565427 = validateParameter(valid_565427, JString, required = true,
                                 default = nil)
  if valid_565427 != nil:
    section.add "subscriptionId", valid_565427
  var valid_565428 = path.getOrDefault("premierAddOnName")
  valid_565428 = validateParameter(valid_565428, JString, required = true,
                                 default = nil)
  if valid_565428 != nil:
    section.add "premierAddOnName", valid_565428
  var valid_565429 = path.getOrDefault("resourceGroupName")
  valid_565429 = validateParameter(valid_565429, JString, required = true,
                                 default = nil)
  if valid_565429 != nil:
    section.add "resourceGroupName", valid_565429
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565430 = query.getOrDefault("api-version")
  valid_565430 = validateParameter(valid_565430, JString, required = true,
                                 default = nil)
  if valid_565430 != nil:
    section.add "api-version", valid_565430
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565431: Call_WebAppsDeletePremierAddOn_565423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_565431.validator(path, query, header, formData, body)
  let scheme = call_565431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565431.url(scheme.get, call_565431.host, call_565431.base,
                         call_565431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565431, url, valid)

proc call*(call_565432: Call_WebAppsDeletePremierAddOn_565423; apiVersion: string;
          name: string; subscriptionId: string; premierAddOnName: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeletePremierAddOn
  ## Delete a premier add-on from an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565433 = newJObject()
  var query_565434 = newJObject()
  add(query_565434, "api-version", newJString(apiVersion))
  add(path_565433, "name", newJString(name))
  add(path_565433, "subscriptionId", newJString(subscriptionId))
  add(path_565433, "premierAddOnName", newJString(premierAddOnName))
  add(path_565433, "resourceGroupName", newJString(resourceGroupName))
  result = call_565432.call(path_565433, query_565434, nil, nil, nil)

var webAppsDeletePremierAddOn* = Call_WebAppsDeletePremierAddOn_565423(
    name: "webAppsDeletePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOn_565424, base: "",
    url: url_WebAppsDeletePremierAddOn_565425, schemes: {Scheme.Https})
type
  Call_WebAppsListProcesses_565435 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcesses_565437(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcesses_565436(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565438 = path.getOrDefault("name")
  valid_565438 = validateParameter(valid_565438, JString, required = true,
                                 default = nil)
  if valid_565438 != nil:
    section.add "name", valid_565438
  var valid_565439 = path.getOrDefault("subscriptionId")
  valid_565439 = validateParameter(valid_565439, JString, required = true,
                                 default = nil)
  if valid_565439 != nil:
    section.add "subscriptionId", valid_565439
  var valid_565440 = path.getOrDefault("resourceGroupName")
  valid_565440 = validateParameter(valid_565440, JString, required = true,
                                 default = nil)
  if valid_565440 != nil:
    section.add "resourceGroupName", valid_565440
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565441 = query.getOrDefault("api-version")
  valid_565441 = validateParameter(valid_565441, JString, required = true,
                                 default = nil)
  if valid_565441 != nil:
    section.add "api-version", valid_565441
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565442: Call_WebAppsListProcesses_565435; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565442.validator(path, query, header, formData, body)
  let scheme = call_565442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565442.url(scheme.get, call_565442.host, call_565442.base,
                         call_565442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565442, url, valid)

proc call*(call_565443: Call_WebAppsListProcesses_565435; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565444 = newJObject()
  var query_565445 = newJObject()
  add(query_565445, "api-version", newJString(apiVersion))
  add(path_565444, "name", newJString(name))
  add(path_565444, "subscriptionId", newJString(subscriptionId))
  add(path_565444, "resourceGroupName", newJString(resourceGroupName))
  result = call_565443.call(path_565444, query_565445, nil, nil, nil)

var webAppsListProcesses* = Call_WebAppsListProcesses_565435(
    name: "webAppsListProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    validator: validate_WebAppsListProcesses_565436, base: "",
    url: url_WebAppsListProcesses_565437, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcess_565446 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcess_565448(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcess_565447(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565449 = path.getOrDefault("name")
  valid_565449 = validateParameter(valid_565449, JString, required = true,
                                 default = nil)
  if valid_565449 != nil:
    section.add "name", valid_565449
  var valid_565450 = path.getOrDefault("subscriptionId")
  valid_565450 = validateParameter(valid_565450, JString, required = true,
                                 default = nil)
  if valid_565450 != nil:
    section.add "subscriptionId", valid_565450
  var valid_565451 = path.getOrDefault("resourceGroupName")
  valid_565451 = validateParameter(valid_565451, JString, required = true,
                                 default = nil)
  if valid_565451 != nil:
    section.add "resourceGroupName", valid_565451
  var valid_565452 = path.getOrDefault("processId")
  valid_565452 = validateParameter(valid_565452, JString, required = true,
                                 default = nil)
  if valid_565452 != nil:
    section.add "processId", valid_565452
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565453 = query.getOrDefault("api-version")
  valid_565453 = validateParameter(valid_565453, JString, required = true,
                                 default = nil)
  if valid_565453 != nil:
    section.add "api-version", valid_565453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565454: Call_WebAppsGetProcess_565446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565454.validator(path, query, header, formData, body)
  let scheme = call_565454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565454.url(scheme.get, call_565454.host, call_565454.base,
                         call_565454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565454, url, valid)

proc call*(call_565455: Call_WebAppsGetProcess_565446; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsGetProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565456 = newJObject()
  var query_565457 = newJObject()
  add(query_565457, "api-version", newJString(apiVersion))
  add(path_565456, "name", newJString(name))
  add(path_565456, "subscriptionId", newJString(subscriptionId))
  add(path_565456, "resourceGroupName", newJString(resourceGroupName))
  add(path_565456, "processId", newJString(processId))
  result = call_565455.call(path_565456, query_565457, nil, nil, nil)

var webAppsGetProcess* = Call_WebAppsGetProcess_565446(name: "webAppsGetProcess",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsGetProcess_565447, base: "",
    url: url_WebAppsGetProcess_565448, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcess_565458 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteProcess_565460(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcess_565459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565461 = path.getOrDefault("name")
  valid_565461 = validateParameter(valid_565461, JString, required = true,
                                 default = nil)
  if valid_565461 != nil:
    section.add "name", valid_565461
  var valid_565462 = path.getOrDefault("subscriptionId")
  valid_565462 = validateParameter(valid_565462, JString, required = true,
                                 default = nil)
  if valid_565462 != nil:
    section.add "subscriptionId", valid_565462
  var valid_565463 = path.getOrDefault("resourceGroupName")
  valid_565463 = validateParameter(valid_565463, JString, required = true,
                                 default = nil)
  if valid_565463 != nil:
    section.add "resourceGroupName", valid_565463
  var valid_565464 = path.getOrDefault("processId")
  valid_565464 = validateParameter(valid_565464, JString, required = true,
                                 default = nil)
  if valid_565464 != nil:
    section.add "processId", valid_565464
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565465 = query.getOrDefault("api-version")
  valid_565465 = validateParameter(valid_565465, JString, required = true,
                                 default = nil)
  if valid_565465 != nil:
    section.add "api-version", valid_565465
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565466: Call_WebAppsDeleteProcess_565458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_565466.validator(path, query, header, formData, body)
  let scheme = call_565466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565466.url(scheme.get, call_565466.host, call_565466.base,
                         call_565466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565466, url, valid)

proc call*(call_565467: Call_WebAppsDeleteProcess_565458; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsDeleteProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565468 = newJObject()
  var query_565469 = newJObject()
  add(query_565469, "api-version", newJString(apiVersion))
  add(path_565468, "name", newJString(name))
  add(path_565468, "subscriptionId", newJString(subscriptionId))
  add(path_565468, "resourceGroupName", newJString(resourceGroupName))
  add(path_565468, "processId", newJString(processId))
  result = call_565467.call(path_565468, query_565469, nil, nil, nil)

var webAppsDeleteProcess* = Call_WebAppsDeleteProcess_565458(
    name: "webAppsDeleteProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsDeleteProcess_565459, base: "",
    url: url_WebAppsDeleteProcess_565460, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDump_565470 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessDump_565472(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDump_565471(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565473 = path.getOrDefault("name")
  valid_565473 = validateParameter(valid_565473, JString, required = true,
                                 default = nil)
  if valid_565473 != nil:
    section.add "name", valid_565473
  var valid_565474 = path.getOrDefault("subscriptionId")
  valid_565474 = validateParameter(valid_565474, JString, required = true,
                                 default = nil)
  if valid_565474 != nil:
    section.add "subscriptionId", valid_565474
  var valid_565475 = path.getOrDefault("resourceGroupName")
  valid_565475 = validateParameter(valid_565475, JString, required = true,
                                 default = nil)
  if valid_565475 != nil:
    section.add "resourceGroupName", valid_565475
  var valid_565476 = path.getOrDefault("processId")
  valid_565476 = validateParameter(valid_565476, JString, required = true,
                                 default = nil)
  if valid_565476 != nil:
    section.add "processId", valid_565476
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565477 = query.getOrDefault("api-version")
  valid_565477 = validateParameter(valid_565477, JString, required = true,
                                 default = nil)
  if valid_565477 != nil:
    section.add "api-version", valid_565477
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565478: Call_WebAppsGetProcessDump_565470; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565478.validator(path, query, header, formData, body)
  let scheme = call_565478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565478.url(scheme.get, call_565478.host, call_565478.base,
                         call_565478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565478, url, valid)

proc call*(call_565479: Call_WebAppsGetProcessDump_565470; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsGetProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565480 = newJObject()
  var query_565481 = newJObject()
  add(query_565481, "api-version", newJString(apiVersion))
  add(path_565480, "name", newJString(name))
  add(path_565480, "subscriptionId", newJString(subscriptionId))
  add(path_565480, "resourceGroupName", newJString(resourceGroupName))
  add(path_565480, "processId", newJString(processId))
  result = call_565479.call(path_565480, query_565481, nil, nil, nil)

var webAppsGetProcessDump* = Call_WebAppsGetProcessDump_565470(
    name: "webAppsGetProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDump_565471, base: "",
    url: url_WebAppsGetProcessDump_565472, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModules_565482 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessModules_565484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModules_565483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565485 = path.getOrDefault("name")
  valid_565485 = validateParameter(valid_565485, JString, required = true,
                                 default = nil)
  if valid_565485 != nil:
    section.add "name", valid_565485
  var valid_565486 = path.getOrDefault("subscriptionId")
  valid_565486 = validateParameter(valid_565486, JString, required = true,
                                 default = nil)
  if valid_565486 != nil:
    section.add "subscriptionId", valid_565486
  var valid_565487 = path.getOrDefault("resourceGroupName")
  valid_565487 = validateParameter(valid_565487, JString, required = true,
                                 default = nil)
  if valid_565487 != nil:
    section.add "resourceGroupName", valid_565487
  var valid_565488 = path.getOrDefault("processId")
  valid_565488 = validateParameter(valid_565488, JString, required = true,
                                 default = nil)
  if valid_565488 != nil:
    section.add "processId", valid_565488
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565489 = query.getOrDefault("api-version")
  valid_565489 = validateParameter(valid_565489, JString, required = true,
                                 default = nil)
  if valid_565489 != nil:
    section.add "api-version", valid_565489
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565490: Call_WebAppsListProcessModules_565482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565490.validator(path, query, header, formData, body)
  let scheme = call_565490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565490.url(scheme.get, call_565490.host, call_565490.base,
                         call_565490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565490, url, valid)

proc call*(call_565491: Call_WebAppsListProcessModules_565482; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsListProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565492 = newJObject()
  var query_565493 = newJObject()
  add(query_565493, "api-version", newJString(apiVersion))
  add(path_565492, "name", newJString(name))
  add(path_565492, "subscriptionId", newJString(subscriptionId))
  add(path_565492, "resourceGroupName", newJString(resourceGroupName))
  add(path_565492, "processId", newJString(processId))
  result = call_565491.call(path_565492, query_565493, nil, nil, nil)

var webAppsListProcessModules* = Call_WebAppsListProcessModules_565482(
    name: "webAppsListProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModules_565483, base: "",
    url: url_WebAppsListProcessModules_565484, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModule_565494 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessModule_565496(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModule_565495(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565497 = path.getOrDefault("name")
  valid_565497 = validateParameter(valid_565497, JString, required = true,
                                 default = nil)
  if valid_565497 != nil:
    section.add "name", valid_565497
  var valid_565498 = path.getOrDefault("subscriptionId")
  valid_565498 = validateParameter(valid_565498, JString, required = true,
                                 default = nil)
  if valid_565498 != nil:
    section.add "subscriptionId", valid_565498
  var valid_565499 = path.getOrDefault("resourceGroupName")
  valid_565499 = validateParameter(valid_565499, JString, required = true,
                                 default = nil)
  if valid_565499 != nil:
    section.add "resourceGroupName", valid_565499
  var valid_565500 = path.getOrDefault("processId")
  valid_565500 = validateParameter(valid_565500, JString, required = true,
                                 default = nil)
  if valid_565500 != nil:
    section.add "processId", valid_565500
  var valid_565501 = path.getOrDefault("baseAddress")
  valid_565501 = validateParameter(valid_565501, JString, required = true,
                                 default = nil)
  if valid_565501 != nil:
    section.add "baseAddress", valid_565501
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565502 = query.getOrDefault("api-version")
  valid_565502 = validateParameter(valid_565502, JString, required = true,
                                 default = nil)
  if valid_565502 != nil:
    section.add "api-version", valid_565502
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565503: Call_WebAppsGetProcessModule_565494; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565503.validator(path, query, header, formData, body)
  let scheme = call_565503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565503.url(scheme.get, call_565503.host, call_565503.base,
                         call_565503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565503, url, valid)

proc call*(call_565504: Call_WebAppsGetProcessModule_565494; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_565505 = newJObject()
  var query_565506 = newJObject()
  add(query_565506, "api-version", newJString(apiVersion))
  add(path_565505, "name", newJString(name))
  add(path_565505, "subscriptionId", newJString(subscriptionId))
  add(path_565505, "resourceGroupName", newJString(resourceGroupName))
  add(path_565505, "processId", newJString(processId))
  add(path_565505, "baseAddress", newJString(baseAddress))
  result = call_565504.call(path_565505, query_565506, nil, nil, nil)

var webAppsGetProcessModule* = Call_WebAppsGetProcessModule_565494(
    name: "webAppsGetProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModule_565495, base: "",
    url: url_WebAppsGetProcessModule_565496, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreads_565507 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessThreads_565509(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreads_565508(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565510 = path.getOrDefault("name")
  valid_565510 = validateParameter(valid_565510, JString, required = true,
                                 default = nil)
  if valid_565510 != nil:
    section.add "name", valid_565510
  var valid_565511 = path.getOrDefault("subscriptionId")
  valid_565511 = validateParameter(valid_565511, JString, required = true,
                                 default = nil)
  if valid_565511 != nil:
    section.add "subscriptionId", valid_565511
  var valid_565512 = path.getOrDefault("resourceGroupName")
  valid_565512 = validateParameter(valid_565512, JString, required = true,
                                 default = nil)
  if valid_565512 != nil:
    section.add "resourceGroupName", valid_565512
  var valid_565513 = path.getOrDefault("processId")
  valid_565513 = validateParameter(valid_565513, JString, required = true,
                                 default = nil)
  if valid_565513 != nil:
    section.add "processId", valid_565513
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565514 = query.getOrDefault("api-version")
  valid_565514 = validateParameter(valid_565514, JString, required = true,
                                 default = nil)
  if valid_565514 != nil:
    section.add "api-version", valid_565514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565515: Call_WebAppsListProcessThreads_565507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_565515.validator(path, query, header, formData, body)
  let scheme = call_565515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565515.url(scheme.get, call_565515.host, call_565515.base,
                         call_565515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565515, url, valid)

proc call*(call_565516: Call_WebAppsListProcessThreads_565507; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          processId: string): Recallable =
  ## webAppsListProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565517 = newJObject()
  var query_565518 = newJObject()
  add(query_565518, "api-version", newJString(apiVersion))
  add(path_565517, "name", newJString(name))
  add(path_565517, "subscriptionId", newJString(subscriptionId))
  add(path_565517, "resourceGroupName", newJString(resourceGroupName))
  add(path_565517, "processId", newJString(processId))
  result = call_565516.call(path_565517, query_565518, nil, nil, nil)

var webAppsListProcessThreads* = Call_WebAppsListProcessThreads_565507(
    name: "webAppsListProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreads_565508, base: "",
    url: url_WebAppsListProcessThreads_565509, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThread_565519 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessThread_565521(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThread_565520(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_565522 = path.getOrDefault("threadId")
  valid_565522 = validateParameter(valid_565522, JString, required = true,
                                 default = nil)
  if valid_565522 != nil:
    section.add "threadId", valid_565522
  var valid_565523 = path.getOrDefault("name")
  valid_565523 = validateParameter(valid_565523, JString, required = true,
                                 default = nil)
  if valid_565523 != nil:
    section.add "name", valid_565523
  var valid_565524 = path.getOrDefault("subscriptionId")
  valid_565524 = validateParameter(valid_565524, JString, required = true,
                                 default = nil)
  if valid_565524 != nil:
    section.add "subscriptionId", valid_565524
  var valid_565525 = path.getOrDefault("resourceGroupName")
  valid_565525 = validateParameter(valid_565525, JString, required = true,
                                 default = nil)
  if valid_565525 != nil:
    section.add "resourceGroupName", valid_565525
  var valid_565526 = path.getOrDefault("processId")
  valid_565526 = validateParameter(valid_565526, JString, required = true,
                                 default = nil)
  if valid_565526 != nil:
    section.add "processId", valid_565526
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565527 = query.getOrDefault("api-version")
  valid_565527 = validateParameter(valid_565527, JString, required = true,
                                 default = nil)
  if valid_565527 != nil:
    section.add "api-version", valid_565527
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565528: Call_WebAppsGetProcessThread_565519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_565528.validator(path, query, header, formData, body)
  let scheme = call_565528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565528.url(scheme.get, call_565528.host, call_565528.base,
                         call_565528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565528, url, valid)

proc call*(call_565529: Call_WebAppsGetProcessThread_565519; threadId: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_565530 = newJObject()
  var query_565531 = newJObject()
  add(path_565530, "threadId", newJString(threadId))
  add(query_565531, "api-version", newJString(apiVersion))
  add(path_565530, "name", newJString(name))
  add(path_565530, "subscriptionId", newJString(subscriptionId))
  add(path_565530, "resourceGroupName", newJString(resourceGroupName))
  add(path_565530, "processId", newJString(processId))
  result = call_565529.call(path_565530, query_565531, nil, nil, nil)

var webAppsGetProcessThread* = Call_WebAppsGetProcessThread_565519(
    name: "webAppsGetProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThread_565520, base: "",
    url: url_WebAppsGetProcessThread_565521, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificates_565532 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublicCertificates_565534(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificates_565533(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565535 = path.getOrDefault("name")
  valid_565535 = validateParameter(valid_565535, JString, required = true,
                                 default = nil)
  if valid_565535 != nil:
    section.add "name", valid_565535
  var valid_565536 = path.getOrDefault("subscriptionId")
  valid_565536 = validateParameter(valid_565536, JString, required = true,
                                 default = nil)
  if valid_565536 != nil:
    section.add "subscriptionId", valid_565536
  var valid_565537 = path.getOrDefault("resourceGroupName")
  valid_565537 = validateParameter(valid_565537, JString, required = true,
                                 default = nil)
  if valid_565537 != nil:
    section.add "resourceGroupName", valid_565537
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565538 = query.getOrDefault("api-version")
  valid_565538 = validateParameter(valid_565538, JString, required = true,
                                 default = nil)
  if valid_565538 != nil:
    section.add "api-version", valid_565538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565539: Call_WebAppsListPublicCertificates_565532; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_565539.validator(path, query, header, formData, body)
  let scheme = call_565539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565539.url(scheme.get, call_565539.host, call_565539.base,
                         call_565539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565539, url, valid)

proc call*(call_565540: Call_WebAppsListPublicCertificates_565532;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublicCertificates
  ## Get public certificates for an app or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565541 = newJObject()
  var query_565542 = newJObject()
  add(query_565542, "api-version", newJString(apiVersion))
  add(path_565541, "name", newJString(name))
  add(path_565541, "subscriptionId", newJString(subscriptionId))
  add(path_565541, "resourceGroupName", newJString(resourceGroupName))
  result = call_565540.call(path_565541, query_565542, nil, nil, nil)

var webAppsListPublicCertificates* = Call_WebAppsListPublicCertificates_565532(
    name: "webAppsListPublicCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    validator: validate_WebAppsListPublicCertificates_565533, base: "",
    url: url_WebAppsListPublicCertificates_565534, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificate_565555 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdatePublicCertificate_565557(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificate_565556(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565558 = path.getOrDefault("name")
  valid_565558 = validateParameter(valid_565558, JString, required = true,
                                 default = nil)
  if valid_565558 != nil:
    section.add "name", valid_565558
  var valid_565559 = path.getOrDefault("subscriptionId")
  valid_565559 = validateParameter(valid_565559, JString, required = true,
                                 default = nil)
  if valid_565559 != nil:
    section.add "subscriptionId", valid_565559
  var valid_565560 = path.getOrDefault("publicCertificateName")
  valid_565560 = validateParameter(valid_565560, JString, required = true,
                                 default = nil)
  if valid_565560 != nil:
    section.add "publicCertificateName", valid_565560
  var valid_565561 = path.getOrDefault("resourceGroupName")
  valid_565561 = validateParameter(valid_565561, JString, required = true,
                                 default = nil)
  if valid_565561 != nil:
    section.add "resourceGroupName", valid_565561
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565562 = query.getOrDefault("api-version")
  valid_565562 = validateParameter(valid_565562, JString, required = true,
                                 default = nil)
  if valid_565562 != nil:
    section.add "api-version", valid_565562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565564: Call_WebAppsCreateOrUpdatePublicCertificate_565555;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_565564.validator(path, query, header, formData, body)
  let scheme = call_565564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565564.url(scheme.get, call_565564.host, call_565564.base,
                         call_565564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565564, url, valid)

proc call*(call_565565: Call_WebAppsCreateOrUpdatePublicCertificate_565555;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificate
  ## Creates a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_565566 = newJObject()
  var query_565567 = newJObject()
  var body_565568 = newJObject()
  add(query_565567, "api-version", newJString(apiVersion))
  add(path_565566, "name", newJString(name))
  add(path_565566, "subscriptionId", newJString(subscriptionId))
  add(path_565566, "publicCertificateName", newJString(publicCertificateName))
  add(path_565566, "resourceGroupName", newJString(resourceGroupName))
  if publicCertificate != nil:
    body_565568 = publicCertificate
  result = call_565565.call(path_565566, query_565567, nil, nil, body_565568)

var webAppsCreateOrUpdatePublicCertificate* = Call_WebAppsCreateOrUpdatePublicCertificate_565555(
    name: "webAppsCreateOrUpdatePublicCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificate_565556, base: "",
    url: url_WebAppsCreateOrUpdatePublicCertificate_565557,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificate_565543 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPublicCertificate_565545(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificate_565544(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565546 = path.getOrDefault("name")
  valid_565546 = validateParameter(valid_565546, JString, required = true,
                                 default = nil)
  if valid_565546 != nil:
    section.add "name", valid_565546
  var valid_565547 = path.getOrDefault("subscriptionId")
  valid_565547 = validateParameter(valid_565547, JString, required = true,
                                 default = nil)
  if valid_565547 != nil:
    section.add "subscriptionId", valid_565547
  var valid_565548 = path.getOrDefault("publicCertificateName")
  valid_565548 = validateParameter(valid_565548, JString, required = true,
                                 default = nil)
  if valid_565548 != nil:
    section.add "publicCertificateName", valid_565548
  var valid_565549 = path.getOrDefault("resourceGroupName")
  valid_565549 = validateParameter(valid_565549, JString, required = true,
                                 default = nil)
  if valid_565549 != nil:
    section.add "resourceGroupName", valid_565549
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565550 = query.getOrDefault("api-version")
  valid_565550 = validateParameter(valid_565550, JString, required = true,
                                 default = nil)
  if valid_565550 != nil:
    section.add "api-version", valid_565550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565551: Call_WebAppsGetPublicCertificate_565543; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_565551.validator(path, query, header, formData, body)
  let scheme = call_565551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565551.url(scheme.get, call_565551.host, call_565551.base,
                         call_565551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565551, url, valid)

proc call*(call_565552: Call_WebAppsGetPublicCertificate_565543;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsGetPublicCertificate
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565553 = newJObject()
  var query_565554 = newJObject()
  add(query_565554, "api-version", newJString(apiVersion))
  add(path_565553, "name", newJString(name))
  add(path_565553, "subscriptionId", newJString(subscriptionId))
  add(path_565553, "publicCertificateName", newJString(publicCertificateName))
  add(path_565553, "resourceGroupName", newJString(resourceGroupName))
  result = call_565552.call(path_565553, query_565554, nil, nil, nil)

var webAppsGetPublicCertificate* = Call_WebAppsGetPublicCertificate_565543(
    name: "webAppsGetPublicCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificate_565544, base: "",
    url: url_WebAppsGetPublicCertificate_565545, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificate_565569 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePublicCertificate_565571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificate_565570(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565572 = path.getOrDefault("name")
  valid_565572 = validateParameter(valid_565572, JString, required = true,
                                 default = nil)
  if valid_565572 != nil:
    section.add "name", valid_565572
  var valid_565573 = path.getOrDefault("subscriptionId")
  valid_565573 = validateParameter(valid_565573, JString, required = true,
                                 default = nil)
  if valid_565573 != nil:
    section.add "subscriptionId", valid_565573
  var valid_565574 = path.getOrDefault("publicCertificateName")
  valid_565574 = validateParameter(valid_565574, JString, required = true,
                                 default = nil)
  if valid_565574 != nil:
    section.add "publicCertificateName", valid_565574
  var valid_565575 = path.getOrDefault("resourceGroupName")
  valid_565575 = validateParameter(valid_565575, JString, required = true,
                                 default = nil)
  if valid_565575 != nil:
    section.add "resourceGroupName", valid_565575
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565576 = query.getOrDefault("api-version")
  valid_565576 = validateParameter(valid_565576, JString, required = true,
                                 default = nil)
  if valid_565576 != nil:
    section.add "api-version", valid_565576
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565577: Call_WebAppsDeletePublicCertificate_565569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_565577.validator(path, query, header, formData, body)
  let scheme = call_565577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565577.url(scheme.get, call_565577.host, call_565577.base,
                         call_565577.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565577, url, valid)

proc call*(call_565578: Call_WebAppsDeletePublicCertificate_565569;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsDeletePublicCertificate
  ## Deletes a hostname binding for an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565579 = newJObject()
  var query_565580 = newJObject()
  add(query_565580, "api-version", newJString(apiVersion))
  add(path_565579, "name", newJString(name))
  add(path_565579, "subscriptionId", newJString(subscriptionId))
  add(path_565579, "publicCertificateName", newJString(publicCertificateName))
  add(path_565579, "resourceGroupName", newJString(resourceGroupName))
  result = call_565578.call(path_565579, query_565580, nil, nil, nil)

var webAppsDeletePublicCertificate* = Call_WebAppsDeletePublicCertificate_565569(
    name: "webAppsDeletePublicCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificate_565570, base: "",
    url: url_WebAppsDeletePublicCertificate_565571, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecrets_565581 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingProfileXmlWithSecrets_565583(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecrets_565582(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565584 = path.getOrDefault("name")
  valid_565584 = validateParameter(valid_565584, JString, required = true,
                                 default = nil)
  if valid_565584 != nil:
    section.add "name", valid_565584
  var valid_565585 = path.getOrDefault("subscriptionId")
  valid_565585 = validateParameter(valid_565585, JString, required = true,
                                 default = nil)
  if valid_565585 != nil:
    section.add "subscriptionId", valid_565585
  var valid_565586 = path.getOrDefault("resourceGroupName")
  valid_565586 = validateParameter(valid_565586, JString, required = true,
                                 default = nil)
  if valid_565586 != nil:
    section.add "resourceGroupName", valid_565586
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565587 = query.getOrDefault("api-version")
  valid_565587 = validateParameter(valid_565587, JString, required = true,
                                 default = nil)
  if valid_565587 != nil:
    section.add "api-version", valid_565587
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565589: Call_WebAppsListPublishingProfileXmlWithSecrets_565581;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_565589.validator(path, query, header, formData, body)
  let scheme = call_565589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565589.url(scheme.get, call_565589.host, call_565589.base,
                         call_565589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565589, url, valid)

proc call*(call_565590: Call_WebAppsListPublishingProfileXmlWithSecrets_565581;
          apiVersion: string; publishingProfileOptions: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListPublishingProfileXmlWithSecrets
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565591 = newJObject()
  var query_565592 = newJObject()
  var body_565593 = newJObject()
  add(query_565592, "api-version", newJString(apiVersion))
  if publishingProfileOptions != nil:
    body_565593 = publishingProfileOptions
  add(path_565591, "name", newJString(name))
  add(path_565591, "subscriptionId", newJString(subscriptionId))
  add(path_565591, "resourceGroupName", newJString(resourceGroupName))
  result = call_565590.call(path_565591, query_565592, nil, nil, body_565593)

var webAppsListPublishingProfileXmlWithSecrets* = Call_WebAppsListPublishingProfileXmlWithSecrets_565581(
    name: "webAppsListPublishingProfileXmlWithSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecrets_565582,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecrets_565583,
    schemes: {Scheme.Https})
type
  Call_WebAppsRecover_565594 = ref object of OpenApiRestCall_563564
proc url_WebAppsRecover_565596(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecover_565595(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Recovers a web app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565597 = path.getOrDefault("name")
  valid_565597 = validateParameter(valid_565597, JString, required = true,
                                 default = nil)
  if valid_565597 != nil:
    section.add "name", valid_565597
  var valid_565598 = path.getOrDefault("subscriptionId")
  valid_565598 = validateParameter(valid_565598, JString, required = true,
                                 default = nil)
  if valid_565598 != nil:
    section.add "subscriptionId", valid_565598
  var valid_565599 = path.getOrDefault("resourceGroupName")
  valid_565599 = validateParameter(valid_565599, JString, required = true,
                                 default = nil)
  if valid_565599 != nil:
    section.add "resourceGroupName", valid_565599
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565600 = query.getOrDefault("api-version")
  valid_565600 = validateParameter(valid_565600, JString, required = true,
                                 default = nil)
  if valid_565600 != nil:
    section.add "api-version", valid_565600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565602: Call_WebAppsRecover_565594; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Recovers a web app to a previous snapshot.
  ## 
  let valid = call_565602.validator(path, query, header, formData, body)
  let scheme = call_565602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565602.url(scheme.get, call_565602.host, call_565602.base,
                         call_565602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565602, url, valid)

proc call*(call_565603: Call_WebAppsRecover_565594; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string;
          recoveryEntity: JsonNode): Recallable =
  ## webAppsRecover
  ## Recovers a web app to a previous snapshot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_565604 = newJObject()
  var query_565605 = newJObject()
  var body_565606 = newJObject()
  add(query_565605, "api-version", newJString(apiVersion))
  add(path_565604, "name", newJString(name))
  add(path_565604, "subscriptionId", newJString(subscriptionId))
  add(path_565604, "resourceGroupName", newJString(resourceGroupName))
  if recoveryEntity != nil:
    body_565606 = recoveryEntity
  result = call_565603.call(path_565604, query_565605, nil, nil, body_565606)

var webAppsRecover* = Call_WebAppsRecover_565594(name: "webAppsRecover",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
    validator: validate_WebAppsRecover_565595, base: "", url: url_WebAppsRecover_565596,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetProductionSlotConfig_565607 = ref object of OpenApiRestCall_563564
proc url_WebAppsResetProductionSlotConfig_565609(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetProductionSlotConfig_565608(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565610 = path.getOrDefault("name")
  valid_565610 = validateParameter(valid_565610, JString, required = true,
                                 default = nil)
  if valid_565610 != nil:
    section.add "name", valid_565610
  var valid_565611 = path.getOrDefault("subscriptionId")
  valid_565611 = validateParameter(valid_565611, JString, required = true,
                                 default = nil)
  if valid_565611 != nil:
    section.add "subscriptionId", valid_565611
  var valid_565612 = path.getOrDefault("resourceGroupName")
  valid_565612 = validateParameter(valid_565612, JString, required = true,
                                 default = nil)
  if valid_565612 != nil:
    section.add "resourceGroupName", valid_565612
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565613 = query.getOrDefault("api-version")
  valid_565613 = validateParameter(valid_565613, JString, required = true,
                                 default = nil)
  if valid_565613 != nil:
    section.add "api-version", valid_565613
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565614: Call_WebAppsResetProductionSlotConfig_565607;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_565614.validator(path, query, header, formData, body)
  let scheme = call_565614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565614.url(scheme.get, call_565614.host, call_565614.base,
                         call_565614.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565614, url, valid)

proc call*(call_565615: Call_WebAppsResetProductionSlotConfig_565607;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsResetProductionSlotConfig
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565616 = newJObject()
  var query_565617 = newJObject()
  add(query_565617, "api-version", newJString(apiVersion))
  add(path_565616, "name", newJString(name))
  add(path_565616, "subscriptionId", newJString(subscriptionId))
  add(path_565616, "resourceGroupName", newJString(resourceGroupName))
  result = call_565615.call(path_565616, query_565617, nil, nil, nil)

var webAppsResetProductionSlotConfig* = Call_WebAppsResetProductionSlotConfig_565607(
    name: "webAppsResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_WebAppsResetProductionSlotConfig_565608, base: "",
    url: url_WebAppsResetProductionSlotConfig_565609, schemes: {Scheme.Https})
type
  Call_WebAppsRestart_565618 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestart_565620(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestart_565619(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565621 = path.getOrDefault("name")
  valid_565621 = validateParameter(valid_565621, JString, required = true,
                                 default = nil)
  if valid_565621 != nil:
    section.add "name", valid_565621
  var valid_565622 = path.getOrDefault("subscriptionId")
  valid_565622 = validateParameter(valid_565622, JString, required = true,
                                 default = nil)
  if valid_565622 != nil:
    section.add "subscriptionId", valid_565622
  var valid_565623 = path.getOrDefault("resourceGroupName")
  valid_565623 = validateParameter(valid_565623, JString, required = true,
                                 default = nil)
  if valid_565623 != nil:
    section.add "resourceGroupName", valid_565623
  result.add "path", section
  ## parameters in `query` object:
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  var valid_565624 = query.getOrDefault("synchronous")
  valid_565624 = validateParameter(valid_565624, JBool, required = false, default = nil)
  if valid_565624 != nil:
    section.add "synchronous", valid_565624
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565625 = query.getOrDefault("api-version")
  valid_565625 = validateParameter(valid_565625, JString, required = true,
                                 default = nil)
  if valid_565625 != nil:
    section.add "api-version", valid_565625
  var valid_565626 = query.getOrDefault("softRestart")
  valid_565626 = validateParameter(valid_565626, JBool, required = false, default = nil)
  if valid_565626 != nil:
    section.add "softRestart", valid_565626
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565627: Call_WebAppsRestart_565618; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_565627.validator(path, query, header, formData, body)
  let scheme = call_565627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565627.url(scheme.get, call_565627.host, call_565627.base,
                         call_565627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565627, url, valid)

proc call*(call_565628: Call_WebAppsRestart_565618; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestart
  ## Restarts an app (or deployment slot, if specified).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_565629 = newJObject()
  var query_565630 = newJObject()
  add(query_565630, "synchronous", newJBool(synchronous))
  add(query_565630, "api-version", newJString(apiVersion))
  add(path_565629, "name", newJString(name))
  add(path_565629, "subscriptionId", newJString(subscriptionId))
  add(path_565629, "resourceGroupName", newJString(resourceGroupName))
  add(query_565630, "softRestart", newJBool(softRestart))
  result = call_565628.call(path_565629, query_565630, nil, nil, nil)

var webAppsRestart* = Call_WebAppsRestart_565618(name: "webAppsRestart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_WebAppsRestart_565619, base: "", url: url_WebAppsRestart_565620,
    schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensions_565631 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSiteExtensions_565633(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensions_565632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565634 = path.getOrDefault("name")
  valid_565634 = validateParameter(valid_565634, JString, required = true,
                                 default = nil)
  if valid_565634 != nil:
    section.add "name", valid_565634
  var valid_565635 = path.getOrDefault("subscriptionId")
  valid_565635 = validateParameter(valid_565635, JString, required = true,
                                 default = nil)
  if valid_565635 != nil:
    section.add "subscriptionId", valid_565635
  var valid_565636 = path.getOrDefault("resourceGroupName")
  valid_565636 = validateParameter(valid_565636, JString, required = true,
                                 default = nil)
  if valid_565636 != nil:
    section.add "resourceGroupName", valid_565636
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565637 = query.getOrDefault("api-version")
  valid_565637 = validateParameter(valid_565637, JString, required = true,
                                 default = nil)
  if valid_565637 != nil:
    section.add "api-version", valid_565637
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565638: Call_WebAppsListSiteExtensions_565631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  let valid = call_565638.validator(path, query, header, formData, body)
  let scheme = call_565638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565638.url(scheme.get, call_565638.host, call_565638.base,
                         call_565638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565638, url, valid)

proc call*(call_565639: Call_WebAppsListSiteExtensions_565631; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListSiteExtensions
  ## Get list of site extensions for a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565640 = newJObject()
  var query_565641 = newJObject()
  add(query_565641, "api-version", newJString(apiVersion))
  add(path_565640, "name", newJString(name))
  add(path_565640, "subscriptionId", newJString(subscriptionId))
  add(path_565640, "resourceGroupName", newJString(resourceGroupName))
  result = call_565639.call(path_565640, query_565641, nil, nil, nil)

var webAppsListSiteExtensions* = Call_WebAppsListSiteExtensions_565631(
    name: "webAppsListSiteExtensions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    validator: validate_WebAppsListSiteExtensions_565632, base: "",
    url: url_WebAppsListSiteExtensions_565633, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtension_565654 = ref object of OpenApiRestCall_563564
proc url_WebAppsInstallSiteExtension_565656(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtension_565655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565657 = path.getOrDefault("name")
  valid_565657 = validateParameter(valid_565657, JString, required = true,
                                 default = nil)
  if valid_565657 != nil:
    section.add "name", valid_565657
  var valid_565658 = path.getOrDefault("subscriptionId")
  valid_565658 = validateParameter(valid_565658, JString, required = true,
                                 default = nil)
  if valid_565658 != nil:
    section.add "subscriptionId", valid_565658
  var valid_565659 = path.getOrDefault("resourceGroupName")
  valid_565659 = validateParameter(valid_565659, JString, required = true,
                                 default = nil)
  if valid_565659 != nil:
    section.add "resourceGroupName", valid_565659
  var valid_565660 = path.getOrDefault("siteExtensionId")
  valid_565660 = validateParameter(valid_565660, JString, required = true,
                                 default = nil)
  if valid_565660 != nil:
    section.add "siteExtensionId", valid_565660
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565661 = query.getOrDefault("api-version")
  valid_565661 = validateParameter(valid_565661, JString, required = true,
                                 default = nil)
  if valid_565661 != nil:
    section.add "api-version", valid_565661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565662: Call_WebAppsInstallSiteExtension_565654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_565662.validator(path, query, header, formData, body)
  let scheme = call_565662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565662.url(scheme.get, call_565662.host, call_565662.base,
                         call_565662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565662, url, valid)

proc call*(call_565663: Call_WebAppsInstallSiteExtension_565654;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtension
  ## Install site extension on a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_565664 = newJObject()
  var query_565665 = newJObject()
  add(query_565665, "api-version", newJString(apiVersion))
  add(path_565664, "name", newJString(name))
  add(path_565664, "subscriptionId", newJString(subscriptionId))
  add(path_565664, "resourceGroupName", newJString(resourceGroupName))
  add(path_565664, "siteExtensionId", newJString(siteExtensionId))
  result = call_565663.call(path_565664, query_565665, nil, nil, nil)

var webAppsInstallSiteExtension* = Call_WebAppsInstallSiteExtension_565654(
    name: "webAppsInstallSiteExtension", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtension_565655, base: "",
    url: url_WebAppsInstallSiteExtension_565656, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtension_565642 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSiteExtension_565644(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtension_565643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565645 = path.getOrDefault("name")
  valid_565645 = validateParameter(valid_565645, JString, required = true,
                                 default = nil)
  if valid_565645 != nil:
    section.add "name", valid_565645
  var valid_565646 = path.getOrDefault("subscriptionId")
  valid_565646 = validateParameter(valid_565646, JString, required = true,
                                 default = nil)
  if valid_565646 != nil:
    section.add "subscriptionId", valid_565646
  var valid_565647 = path.getOrDefault("resourceGroupName")
  valid_565647 = validateParameter(valid_565647, JString, required = true,
                                 default = nil)
  if valid_565647 != nil:
    section.add "resourceGroupName", valid_565647
  var valid_565648 = path.getOrDefault("siteExtensionId")
  valid_565648 = validateParameter(valid_565648, JString, required = true,
                                 default = nil)
  if valid_565648 != nil:
    section.add "siteExtensionId", valid_565648
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565649 = query.getOrDefault("api-version")
  valid_565649 = validateParameter(valid_565649, JString, required = true,
                                 default = nil)
  if valid_565649 != nil:
    section.add "api-version", valid_565649
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565650: Call_WebAppsGetSiteExtension_565642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_565650.validator(path, query, header, formData, body)
  let scheme = call_565650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565650.url(scheme.get, call_565650.host, call_565650.base,
                         call_565650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565650, url, valid)

proc call*(call_565651: Call_WebAppsGetSiteExtension_565642; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtension
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_565652 = newJObject()
  var query_565653 = newJObject()
  add(query_565653, "api-version", newJString(apiVersion))
  add(path_565652, "name", newJString(name))
  add(path_565652, "subscriptionId", newJString(subscriptionId))
  add(path_565652, "resourceGroupName", newJString(resourceGroupName))
  add(path_565652, "siteExtensionId", newJString(siteExtensionId))
  result = call_565651.call(path_565652, query_565653, nil, nil, nil)

var webAppsGetSiteExtension* = Call_WebAppsGetSiteExtension_565642(
    name: "webAppsGetSiteExtension", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtension_565643, base: "",
    url: url_WebAppsGetSiteExtension_565644, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtension_565666 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSiteExtension_565668(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtension_565667(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565669 = path.getOrDefault("name")
  valid_565669 = validateParameter(valid_565669, JString, required = true,
                                 default = nil)
  if valid_565669 != nil:
    section.add "name", valid_565669
  var valid_565670 = path.getOrDefault("subscriptionId")
  valid_565670 = validateParameter(valid_565670, JString, required = true,
                                 default = nil)
  if valid_565670 != nil:
    section.add "subscriptionId", valid_565670
  var valid_565671 = path.getOrDefault("resourceGroupName")
  valid_565671 = validateParameter(valid_565671, JString, required = true,
                                 default = nil)
  if valid_565671 != nil:
    section.add "resourceGroupName", valid_565671
  var valid_565672 = path.getOrDefault("siteExtensionId")
  valid_565672 = validateParameter(valid_565672, JString, required = true,
                                 default = nil)
  if valid_565672 != nil:
    section.add "siteExtensionId", valid_565672
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565673 = query.getOrDefault("api-version")
  valid_565673 = validateParameter(valid_565673, JString, required = true,
                                 default = nil)
  if valid_565673 != nil:
    section.add "api-version", valid_565673
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565674: Call_WebAppsDeleteSiteExtension_565666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_565674.validator(path, query, header, formData, body)
  let scheme = call_565674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565674.url(scheme.get, call_565674.host, call_565674.base,
                         call_565674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565674, url, valid)

proc call*(call_565675: Call_WebAppsDeleteSiteExtension_565666; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtension
  ## Remove a site extension from a web site, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_565676 = newJObject()
  var query_565677 = newJObject()
  add(query_565677, "api-version", newJString(apiVersion))
  add(path_565676, "name", newJString(name))
  add(path_565676, "subscriptionId", newJString(subscriptionId))
  add(path_565676, "resourceGroupName", newJString(resourceGroupName))
  add(path_565676, "siteExtensionId", newJString(siteExtensionId))
  result = call_565675.call(path_565676, query_565677, nil, nil, nil)

var webAppsDeleteSiteExtension* = Call_WebAppsDeleteSiteExtension_565666(
    name: "webAppsDeleteSiteExtension", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtension_565667, base: "",
    url: url_WebAppsDeleteSiteExtension_565668, schemes: {Scheme.Https})
type
  Call_WebAppsListSlots_565678 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlots_565680(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlots_565679(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets an app's deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_565681 = path.getOrDefault("name")
  valid_565681 = validateParameter(valid_565681, JString, required = true,
                                 default = nil)
  if valid_565681 != nil:
    section.add "name", valid_565681
  var valid_565682 = path.getOrDefault("subscriptionId")
  valid_565682 = validateParameter(valid_565682, JString, required = true,
                                 default = nil)
  if valid_565682 != nil:
    section.add "subscriptionId", valid_565682
  var valid_565683 = path.getOrDefault("resourceGroupName")
  valid_565683 = validateParameter(valid_565683, JString, required = true,
                                 default = nil)
  if valid_565683 != nil:
    section.add "resourceGroupName", valid_565683
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565684 = query.getOrDefault("api-version")
  valid_565684 = validateParameter(valid_565684, JString, required = true,
                                 default = nil)
  if valid_565684 != nil:
    section.add "api-version", valid_565684
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565685: Call_WebAppsListSlots_565678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets an app's deployment slots.
  ## 
  let valid = call_565685.validator(path, query, header, formData, body)
  let scheme = call_565685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565685.url(scheme.get, call_565685.host, call_565685.base,
                         call_565685.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565685, url, valid)

proc call*(call_565686: Call_WebAppsListSlots_565678; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListSlots
  ## Gets an app's deployment slots.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565687 = newJObject()
  var query_565688 = newJObject()
  add(query_565688, "api-version", newJString(apiVersion))
  add(path_565687, "name", newJString(name))
  add(path_565687, "subscriptionId", newJString(subscriptionId))
  add(path_565687, "resourceGroupName", newJString(resourceGroupName))
  result = call_565686.call(path_565687, query_565688, nil, nil, nil)

var webAppsListSlots* = Call_WebAppsListSlots_565678(name: "webAppsListSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_WebAppsListSlots_565679, base: "",
    url: url_WebAppsListSlots_565680, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSlot_565701 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSlot_565703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSlot_565702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565704 = path.getOrDefault("slot")
  valid_565704 = validateParameter(valid_565704, JString, required = true,
                                 default = nil)
  if valid_565704 != nil:
    section.add "slot", valid_565704
  var valid_565705 = path.getOrDefault("name")
  valid_565705 = validateParameter(valid_565705, JString, required = true,
                                 default = nil)
  if valid_565705 != nil:
    section.add "name", valid_565705
  var valid_565706 = path.getOrDefault("subscriptionId")
  valid_565706 = validateParameter(valid_565706, JString, required = true,
                                 default = nil)
  if valid_565706 != nil:
    section.add "subscriptionId", valid_565706
  var valid_565707 = path.getOrDefault("resourceGroupName")
  valid_565707 = validateParameter(valid_565707, JString, required = true,
                                 default = nil)
  if valid_565707 != nil:
    section.add "resourceGroupName", valid_565707
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name.
  ##   skipCustomDomainVerification: JBool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JBool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   skipDnsRegistration: JBool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565708 = query.getOrDefault("api-version")
  valid_565708 = validateParameter(valid_565708, JString, required = true,
                                 default = nil)
  if valid_565708 != nil:
    section.add "api-version", valid_565708
  var valid_565709 = query.getOrDefault("ttlInSeconds")
  valid_565709 = validateParameter(valid_565709, JString, required = false,
                                 default = nil)
  if valid_565709 != nil:
    section.add "ttlInSeconds", valid_565709
  var valid_565710 = query.getOrDefault("skipCustomDomainVerification")
  valid_565710 = validateParameter(valid_565710, JBool, required = false, default = nil)
  if valid_565710 != nil:
    section.add "skipCustomDomainVerification", valid_565710
  var valid_565711 = query.getOrDefault("forceDnsRegistration")
  valid_565711 = validateParameter(valid_565711, JBool, required = false, default = nil)
  if valid_565711 != nil:
    section.add "forceDnsRegistration", valid_565711
  var valid_565712 = query.getOrDefault("skipDnsRegistration")
  valid_565712 = validateParameter(valid_565712, JBool, required = false, default = nil)
  if valid_565712 != nil:
    section.add "skipDnsRegistration", valid_565712
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565714: Call_WebAppsCreateOrUpdateSlot_565701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_565714.validator(path, query, header, formData, body)
  let scheme = call_565714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565714.url(scheme.get, call_565714.host, call_565714.base,
                         call_565714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565714, url, valid)

proc call*(call_565715: Call_WebAppsCreateOrUpdateSlot_565701; slot: string;
          apiVersion: string; siteEnvelope: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string;
          ttlInSeconds: string = ""; skipCustomDomainVerification: bool = false;
          forceDnsRegistration: bool = false; skipDnsRegistration: bool = false): Recallable =
  ## webAppsCreateOrUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   skipCustomDomainVerification: bool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: bool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  var path_565716 = newJObject()
  var query_565717 = newJObject()
  var body_565718 = newJObject()
  add(path_565716, "slot", newJString(slot))
  add(query_565717, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_565718 = siteEnvelope
  add(query_565717, "ttlInSeconds", newJString(ttlInSeconds))
  add(path_565716, "name", newJString(name))
  add(path_565716, "subscriptionId", newJString(subscriptionId))
  add(query_565717, "skipCustomDomainVerification",
      newJBool(skipCustomDomainVerification))
  add(query_565717, "forceDnsRegistration", newJBool(forceDnsRegistration))
  add(path_565716, "resourceGroupName", newJString(resourceGroupName))
  add(query_565717, "skipDnsRegistration", newJBool(skipDnsRegistration))
  result = call_565715.call(path_565716, query_565717, nil, nil, body_565718)

var webAppsCreateOrUpdateSlot* = Call_WebAppsCreateOrUpdateSlot_565701(
    name: "webAppsCreateOrUpdateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsCreateOrUpdateSlot_565702, base: "",
    url: url_WebAppsCreateOrUpdateSlot_565703, schemes: {Scheme.Https})
type
  Call_WebAppsGetSlot_565689 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSlot_565691(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSlot_565690(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565692 = path.getOrDefault("slot")
  valid_565692 = validateParameter(valid_565692, JString, required = true,
                                 default = nil)
  if valid_565692 != nil:
    section.add "slot", valid_565692
  var valid_565693 = path.getOrDefault("name")
  valid_565693 = validateParameter(valid_565693, JString, required = true,
                                 default = nil)
  if valid_565693 != nil:
    section.add "name", valid_565693
  var valid_565694 = path.getOrDefault("subscriptionId")
  valid_565694 = validateParameter(valid_565694, JString, required = true,
                                 default = nil)
  if valid_565694 != nil:
    section.add "subscriptionId", valid_565694
  var valid_565695 = path.getOrDefault("resourceGroupName")
  valid_565695 = validateParameter(valid_565695, JString, required = true,
                                 default = nil)
  if valid_565695 != nil:
    section.add "resourceGroupName", valid_565695
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565696 = query.getOrDefault("api-version")
  valid_565696 = validateParameter(valid_565696, JString, required = true,
                                 default = nil)
  if valid_565696 != nil:
    section.add "api-version", valid_565696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565697: Call_WebAppsGetSlot_565689; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_565697.validator(path, query, header, formData, body)
  let scheme = call_565697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565697.url(scheme.get, call_565697.host, call_565697.base,
                         call_565697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565697, url, valid)

proc call*(call_565698: Call_WebAppsGetSlot_565689; slot: string; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetSlot
  ## Gets the details of a web, mobile, or API app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565699 = newJObject()
  var query_565700 = newJObject()
  add(path_565699, "slot", newJString(slot))
  add(query_565700, "api-version", newJString(apiVersion))
  add(path_565699, "name", newJString(name))
  add(path_565699, "subscriptionId", newJString(subscriptionId))
  add(path_565699, "resourceGroupName", newJString(resourceGroupName))
  result = call_565698.call(path_565699, query_565700, nil, nil, nil)

var webAppsGetSlot* = Call_WebAppsGetSlot_565689(name: "webAppsGetSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsGetSlot_565690, base: "", url: url_WebAppsGetSlot_565691,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlot_565734 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSlot_565736(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlot_565735(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565737 = path.getOrDefault("slot")
  valid_565737 = validateParameter(valid_565737, JString, required = true,
                                 default = nil)
  if valid_565737 != nil:
    section.add "slot", valid_565737
  var valid_565738 = path.getOrDefault("name")
  valid_565738 = validateParameter(valid_565738, JString, required = true,
                                 default = nil)
  if valid_565738 != nil:
    section.add "name", valid_565738
  var valid_565739 = path.getOrDefault("subscriptionId")
  valid_565739 = validateParameter(valid_565739, JString, required = true,
                                 default = nil)
  if valid_565739 != nil:
    section.add "subscriptionId", valid_565739
  var valid_565740 = path.getOrDefault("resourceGroupName")
  valid_565740 = validateParameter(valid_565740, JString, required = true,
                                 default = nil)
  if valid_565740 != nil:
    section.add "resourceGroupName", valid_565740
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name.
  ##   skipCustomDomainVerification: JBool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JBool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   skipDnsRegistration: JBool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565741 = query.getOrDefault("api-version")
  valid_565741 = validateParameter(valid_565741, JString, required = true,
                                 default = nil)
  if valid_565741 != nil:
    section.add "api-version", valid_565741
  var valid_565742 = query.getOrDefault("ttlInSeconds")
  valid_565742 = validateParameter(valid_565742, JString, required = false,
                                 default = nil)
  if valid_565742 != nil:
    section.add "ttlInSeconds", valid_565742
  var valid_565743 = query.getOrDefault("skipCustomDomainVerification")
  valid_565743 = validateParameter(valid_565743, JBool, required = false, default = nil)
  if valid_565743 != nil:
    section.add "skipCustomDomainVerification", valid_565743
  var valid_565744 = query.getOrDefault("forceDnsRegistration")
  valid_565744 = validateParameter(valid_565744, JBool, required = false, default = nil)
  if valid_565744 != nil:
    section.add "forceDnsRegistration", valid_565744
  var valid_565745 = query.getOrDefault("skipDnsRegistration")
  valid_565745 = validateParameter(valid_565745, JBool, required = false, default = nil)
  if valid_565745 != nil:
    section.add "skipDnsRegistration", valid_565745
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565747: Call_WebAppsUpdateSlot_565734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_565747.validator(path, query, header, formData, body)
  let scheme = call_565747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565747.url(scheme.get, call_565747.host, call_565747.base,
                         call_565747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565747, url, valid)

proc call*(call_565748: Call_WebAppsUpdateSlot_565734; slot: string;
          apiVersion: string; siteEnvelope: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string;
          ttlInSeconds: string = ""; skipCustomDomainVerification: bool = false;
          forceDnsRegistration: bool = false; skipDnsRegistration: bool = false): Recallable =
  ## webAppsUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name.
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   skipCustomDomainVerification: bool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: bool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  var path_565749 = newJObject()
  var query_565750 = newJObject()
  var body_565751 = newJObject()
  add(path_565749, "slot", newJString(slot))
  add(query_565750, "api-version", newJString(apiVersion))
  if siteEnvelope != nil:
    body_565751 = siteEnvelope
  add(query_565750, "ttlInSeconds", newJString(ttlInSeconds))
  add(path_565749, "name", newJString(name))
  add(path_565749, "subscriptionId", newJString(subscriptionId))
  add(query_565750, "skipCustomDomainVerification",
      newJBool(skipCustomDomainVerification))
  add(query_565750, "forceDnsRegistration", newJBool(forceDnsRegistration))
  add(path_565749, "resourceGroupName", newJString(resourceGroupName))
  add(query_565750, "skipDnsRegistration", newJBool(skipDnsRegistration))
  result = call_565748.call(path_565749, query_565750, nil, nil, body_565751)

var webAppsUpdateSlot* = Call_WebAppsUpdateSlot_565734(name: "webAppsUpdateSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsUpdateSlot_565735, base: "",
    url: url_WebAppsUpdateSlot_565736, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSlot_565719 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSlot_565721(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSlot_565720(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565722 = path.getOrDefault("slot")
  valid_565722 = validateParameter(valid_565722, JString, required = true,
                                 default = nil)
  if valid_565722 != nil:
    section.add "slot", valid_565722
  var valid_565723 = path.getOrDefault("name")
  valid_565723 = validateParameter(valid_565723, JString, required = true,
                                 default = nil)
  if valid_565723 != nil:
    section.add "name", valid_565723
  var valid_565724 = path.getOrDefault("subscriptionId")
  valid_565724 = validateParameter(valid_565724, JString, required = true,
                                 default = nil)
  if valid_565724 != nil:
    section.add "subscriptionId", valid_565724
  var valid_565725 = path.getOrDefault("resourceGroupName")
  valid_565725 = validateParameter(valid_565725, JString, required = true,
                                 default = nil)
  if valid_565725 != nil:
    section.add "resourceGroupName", valid_565725
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   skipDnsRegistration: JBool
  ##                      : If true, DNS registration is skipped.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565726 = query.getOrDefault("api-version")
  valid_565726 = validateParameter(valid_565726, JString, required = true,
                                 default = nil)
  if valid_565726 != nil:
    section.add "api-version", valid_565726
  var valid_565727 = query.getOrDefault("deleteEmptyServerFarm")
  valid_565727 = validateParameter(valid_565727, JBool, required = false, default = nil)
  if valid_565727 != nil:
    section.add "deleteEmptyServerFarm", valid_565727
  var valid_565728 = query.getOrDefault("deleteMetrics")
  valid_565728 = validateParameter(valid_565728, JBool, required = false, default = nil)
  if valid_565728 != nil:
    section.add "deleteMetrics", valid_565728
  var valid_565729 = query.getOrDefault("skipDnsRegistration")
  valid_565729 = validateParameter(valid_565729, JBool, required = false, default = nil)
  if valid_565729 != nil:
    section.add "skipDnsRegistration", valid_565729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565730: Call_WebAppsDeleteSlot_565719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_565730.validator(path, query, header, formData, body)
  let scheme = call_565730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565730.url(scheme.get, call_565730.host, call_565730.base,
                         call_565730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565730, url, valid)

proc call*(call_565731: Call_WebAppsDeleteSlot_565719; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; deleteEmptyServerFarm: bool = false;
          deleteMetrics: bool = false; skipDnsRegistration: bool = false): Recallable =
  ## webAppsDeleteSlot
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   slot: string (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true, DNS registration is skipped.
  var path_565732 = newJObject()
  var query_565733 = newJObject()
  add(path_565732, "slot", newJString(slot))
  add(query_565733, "api-version", newJString(apiVersion))
  add(query_565733, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  add(path_565732, "name", newJString(name))
  add(path_565732, "subscriptionId", newJString(subscriptionId))
  add(query_565733, "deleteMetrics", newJBool(deleteMetrics))
  add(path_565732, "resourceGroupName", newJString(resourceGroupName))
  add(query_565733, "skipDnsRegistration", newJBool(skipDnsRegistration))
  result = call_565731.call(path_565732, query_565733, nil, nil, nil)

var webAppsDeleteSlot* = Call_WebAppsDeleteSlot_565719(name: "webAppsDeleteSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsDeleteSlot_565720, base: "",
    url: url_WebAppsDeleteSlot_565721, schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostnameSlot_565752 = ref object of OpenApiRestCall_563564
proc url_WebAppsAnalyzeCustomHostnameSlot_565754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostnameSlot_565753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565755 = path.getOrDefault("slot")
  valid_565755 = validateParameter(valid_565755, JString, required = true,
                                 default = nil)
  if valid_565755 != nil:
    section.add "slot", valid_565755
  var valid_565756 = path.getOrDefault("name")
  valid_565756 = validateParameter(valid_565756, JString, required = true,
                                 default = nil)
  if valid_565756 != nil:
    section.add "name", valid_565756
  var valid_565757 = path.getOrDefault("subscriptionId")
  valid_565757 = validateParameter(valid_565757, JString, required = true,
                                 default = nil)
  if valid_565757 != nil:
    section.add "subscriptionId", valid_565757
  var valid_565758 = path.getOrDefault("resourceGroupName")
  valid_565758 = validateParameter(valid_565758, JString, required = true,
                                 default = nil)
  if valid_565758 != nil:
    section.add "resourceGroupName", valid_565758
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565759 = query.getOrDefault("api-version")
  valid_565759 = validateParameter(valid_565759, JString, required = true,
                                 default = nil)
  if valid_565759 != nil:
    section.add "api-version", valid_565759
  var valid_565760 = query.getOrDefault("hostName")
  valid_565760 = validateParameter(valid_565760, JString, required = false,
                                 default = nil)
  if valid_565760 != nil:
    section.add "hostName", valid_565760
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565761: Call_WebAppsAnalyzeCustomHostnameSlot_565752;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_565761.validator(path, query, header, formData, body)
  let scheme = call_565761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565761.url(scheme.get, call_565761.host, call_565761.base,
                         call_565761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565761, url, valid)

proc call*(call_565762: Call_WebAppsAnalyzeCustomHostnameSlot_565752; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostnameSlot
  ## Analyze a custom hostname.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string
  ##           : Custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565763 = newJObject()
  var query_565764 = newJObject()
  add(path_565763, "slot", newJString(slot))
  add(query_565764, "api-version", newJString(apiVersion))
  add(path_565763, "name", newJString(name))
  add(path_565763, "subscriptionId", newJString(subscriptionId))
  add(query_565764, "hostName", newJString(hostName))
  add(path_565763, "resourceGroupName", newJString(resourceGroupName))
  result = call_565762.call(path_565763, query_565764, nil, nil, nil)

var webAppsAnalyzeCustomHostnameSlot* = Call_WebAppsAnalyzeCustomHostnameSlot_565752(
    name: "webAppsAnalyzeCustomHostnameSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostnameSlot_565753, base: "",
    url: url_WebAppsAnalyzeCustomHostnameSlot_565754, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigurationSlot_565765 = ref object of OpenApiRestCall_563564
proc url_WebAppsApplySlotConfigurationSlot_565767(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigurationSlot_565766(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565768 = path.getOrDefault("slot")
  valid_565768 = validateParameter(valid_565768, JString, required = true,
                                 default = nil)
  if valid_565768 != nil:
    section.add "slot", valid_565768
  var valid_565769 = path.getOrDefault("name")
  valid_565769 = validateParameter(valid_565769, JString, required = true,
                                 default = nil)
  if valid_565769 != nil:
    section.add "name", valid_565769
  var valid_565770 = path.getOrDefault("subscriptionId")
  valid_565770 = validateParameter(valid_565770, JString, required = true,
                                 default = nil)
  if valid_565770 != nil:
    section.add "subscriptionId", valid_565770
  var valid_565771 = path.getOrDefault("resourceGroupName")
  valid_565771 = validateParameter(valid_565771, JString, required = true,
                                 default = nil)
  if valid_565771 != nil:
    section.add "resourceGroupName", valid_565771
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565772 = query.getOrDefault("api-version")
  valid_565772 = validateParameter(valid_565772, JString, required = true,
                                 default = nil)
  if valid_565772 != nil:
    section.add "api-version", valid_565772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565774: Call_WebAppsApplySlotConfigurationSlot_565765;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_565774.validator(path, query, header, formData, body)
  let scheme = call_565774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565774.url(scheme.get, call_565774.host, call_565774.base,
                         call_565774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565774, url, valid)

proc call*(call_565775: Call_WebAppsApplySlotConfigurationSlot_565765;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsApplySlotConfigurationSlot
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565776 = newJObject()
  var query_565777 = newJObject()
  var body_565778 = newJObject()
  add(path_565776, "slot", newJString(slot))
  add(query_565777, "api-version", newJString(apiVersion))
  add(path_565776, "name", newJString(name))
  add(path_565776, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_565778 = slotSwapEntity
  add(path_565776, "resourceGroupName", newJString(resourceGroupName))
  result = call_565775.call(path_565776, query_565777, nil, nil, body_565778)

var webAppsApplySlotConfigurationSlot* = Call_WebAppsApplySlotConfigurationSlot_565765(
    name: "webAppsApplySlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigurationSlot_565766, base: "",
    url: url_WebAppsApplySlotConfigurationSlot_565767, schemes: {Scheme.Https})
type
  Call_WebAppsBackupSlot_565779 = ref object of OpenApiRestCall_563564
proc url_WebAppsBackupSlot_565781(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackupSlot_565780(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565782 = path.getOrDefault("slot")
  valid_565782 = validateParameter(valid_565782, JString, required = true,
                                 default = nil)
  if valid_565782 != nil:
    section.add "slot", valid_565782
  var valid_565783 = path.getOrDefault("name")
  valid_565783 = validateParameter(valid_565783, JString, required = true,
                                 default = nil)
  if valid_565783 != nil:
    section.add "name", valid_565783
  var valid_565784 = path.getOrDefault("subscriptionId")
  valid_565784 = validateParameter(valid_565784, JString, required = true,
                                 default = nil)
  if valid_565784 != nil:
    section.add "subscriptionId", valid_565784
  var valid_565785 = path.getOrDefault("resourceGroupName")
  valid_565785 = validateParameter(valid_565785, JString, required = true,
                                 default = nil)
  if valid_565785 != nil:
    section.add "resourceGroupName", valid_565785
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565786 = query.getOrDefault("api-version")
  valid_565786 = validateParameter(valid_565786, JString, required = true,
                                 default = nil)
  if valid_565786 != nil:
    section.add "api-version", valid_565786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565788: Call_WebAppsBackupSlot_565779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_565788.validator(path, query, header, formData, body)
  let scheme = call_565788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565788.url(scheme.get, call_565788.host, call_565788.base,
                         call_565788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565788, url, valid)

proc call*(call_565789: Call_WebAppsBackupSlot_565779; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsBackupSlot
  ## Creates a backup of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_565790 = newJObject()
  var query_565791 = newJObject()
  var body_565792 = newJObject()
  add(path_565790, "slot", newJString(slot))
  add(query_565791, "api-version", newJString(apiVersion))
  add(path_565790, "name", newJString(name))
  add(path_565790, "subscriptionId", newJString(subscriptionId))
  add(path_565790, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565792 = request
  result = call_565789.call(path_565790, query_565791, nil, nil, body_565792)

var webAppsBackupSlot* = Call_WebAppsBackupSlot_565779(name: "webAppsBackupSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_WebAppsBackupSlot_565780, base: "",
    url: url_WebAppsBackupSlot_565781, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupsSlot_565793 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackupsSlot_565795(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupsSlot_565794(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565796 = path.getOrDefault("slot")
  valid_565796 = validateParameter(valid_565796, JString, required = true,
                                 default = nil)
  if valid_565796 != nil:
    section.add "slot", valid_565796
  var valid_565797 = path.getOrDefault("name")
  valid_565797 = validateParameter(valid_565797, JString, required = true,
                                 default = nil)
  if valid_565797 != nil:
    section.add "name", valid_565797
  var valid_565798 = path.getOrDefault("subscriptionId")
  valid_565798 = validateParameter(valid_565798, JString, required = true,
                                 default = nil)
  if valid_565798 != nil:
    section.add "subscriptionId", valid_565798
  var valid_565799 = path.getOrDefault("resourceGroupName")
  valid_565799 = validateParameter(valid_565799, JString, required = true,
                                 default = nil)
  if valid_565799 != nil:
    section.add "resourceGroupName", valid_565799
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565800 = query.getOrDefault("api-version")
  valid_565800 = validateParameter(valid_565800, JString, required = true,
                                 default = nil)
  if valid_565800 != nil:
    section.add "api-version", valid_565800
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565801: Call_WebAppsListBackupsSlot_565793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_565801.validator(path, query, header, formData, body)
  let scheme = call_565801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565801.url(scheme.get, call_565801.host, call_565801.base,
                         call_565801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565801, url, valid)

proc call*(call_565802: Call_WebAppsListBackupsSlot_565793; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListBackupsSlot
  ## Gets existing backups of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565803 = newJObject()
  var query_565804 = newJObject()
  add(path_565803, "slot", newJString(slot))
  add(query_565804, "api-version", newJString(apiVersion))
  add(path_565803, "name", newJString(name))
  add(path_565803, "subscriptionId", newJString(subscriptionId))
  add(path_565803, "resourceGroupName", newJString(resourceGroupName))
  result = call_565802.call(path_565803, query_565804, nil, nil, nil)

var webAppsListBackupsSlot* = Call_WebAppsListBackupsSlot_565793(
    name: "webAppsListBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_WebAppsListBackupsSlot_565794, base: "",
    url: url_WebAppsListBackupsSlot_565795, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverRestoreSlot_565805 = ref object of OpenApiRestCall_563564
proc url_WebAppsDiscoverRestoreSlot_565807(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverRestoreSlot_565806(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565808 = path.getOrDefault("slot")
  valid_565808 = validateParameter(valid_565808, JString, required = true,
                                 default = nil)
  if valid_565808 != nil:
    section.add "slot", valid_565808
  var valid_565809 = path.getOrDefault("name")
  valid_565809 = validateParameter(valid_565809, JString, required = true,
                                 default = nil)
  if valid_565809 != nil:
    section.add "name", valid_565809
  var valid_565810 = path.getOrDefault("subscriptionId")
  valid_565810 = validateParameter(valid_565810, JString, required = true,
                                 default = nil)
  if valid_565810 != nil:
    section.add "subscriptionId", valid_565810
  var valid_565811 = path.getOrDefault("resourceGroupName")
  valid_565811 = validateParameter(valid_565811, JString, required = true,
                                 default = nil)
  if valid_565811 != nil:
    section.add "resourceGroupName", valid_565811
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565812 = query.getOrDefault("api-version")
  valid_565812 = validateParameter(valid_565812, JString, required = true,
                                 default = nil)
  if valid_565812 != nil:
    section.add "api-version", valid_565812
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565814: Call_WebAppsDiscoverRestoreSlot_565805; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  let valid = call_565814.validator(path, query, header, formData, body)
  let scheme = call_565814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565814.url(scheme.get, call_565814.host, call_565814.base,
                         call_565814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565814, url, valid)

proc call*(call_565815: Call_WebAppsDiscoverRestoreSlot_565805; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsDiscoverRestoreSlot
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_565816 = newJObject()
  var query_565817 = newJObject()
  var body_565818 = newJObject()
  add(path_565816, "slot", newJString(slot))
  add(query_565817, "api-version", newJString(apiVersion))
  add(path_565816, "name", newJString(name))
  add(path_565816, "subscriptionId", newJString(subscriptionId))
  add(path_565816, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565818 = request
  result = call_565815.call(path_565816, query_565817, nil, nil, body_565818)

var webAppsDiscoverRestoreSlot* = Call_WebAppsDiscoverRestoreSlot_565805(
    name: "webAppsDiscoverRestoreSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
    validator: validate_WebAppsDiscoverRestoreSlot_565806, base: "",
    url: url_WebAppsDiscoverRestoreSlot_565807, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatusSlot_565819 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupStatusSlot_565821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatusSlot_565820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565822 = path.getOrDefault("slot")
  valid_565822 = validateParameter(valid_565822, JString, required = true,
                                 default = nil)
  if valid_565822 != nil:
    section.add "slot", valid_565822
  var valid_565823 = path.getOrDefault("name")
  valid_565823 = validateParameter(valid_565823, JString, required = true,
                                 default = nil)
  if valid_565823 != nil:
    section.add "name", valid_565823
  var valid_565824 = path.getOrDefault("subscriptionId")
  valid_565824 = validateParameter(valid_565824, JString, required = true,
                                 default = nil)
  if valid_565824 != nil:
    section.add "subscriptionId", valid_565824
  var valid_565825 = path.getOrDefault("backupId")
  valid_565825 = validateParameter(valid_565825, JString, required = true,
                                 default = nil)
  if valid_565825 != nil:
    section.add "backupId", valid_565825
  var valid_565826 = path.getOrDefault("resourceGroupName")
  valid_565826 = validateParameter(valid_565826, JString, required = true,
                                 default = nil)
  if valid_565826 != nil:
    section.add "resourceGroupName", valid_565826
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565827 = query.getOrDefault("api-version")
  valid_565827 = validateParameter(valid_565827, JString, required = true,
                                 default = nil)
  if valid_565827 != nil:
    section.add "api-version", valid_565827
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565828: Call_WebAppsGetBackupStatusSlot_565819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_565828.validator(path, query, header, formData, body)
  let scheme = call_565828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565828.url(scheme.get, call_565828.host, call_565828.base,
                         call_565828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565828, url, valid)

proc call*(call_565829: Call_WebAppsGetBackupStatusSlot_565819; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupStatusSlot
  ## Gets a backup of an app by its ID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565830 = newJObject()
  var query_565831 = newJObject()
  add(path_565830, "slot", newJString(slot))
  add(query_565831, "api-version", newJString(apiVersion))
  add(path_565830, "name", newJString(name))
  add(path_565830, "subscriptionId", newJString(subscriptionId))
  add(path_565830, "backupId", newJString(backupId))
  add(path_565830, "resourceGroupName", newJString(resourceGroupName))
  result = call_565829.call(path_565830, query_565831, nil, nil, nil)

var webAppsGetBackupStatusSlot* = Call_WebAppsGetBackupStatusSlot_565819(
    name: "webAppsGetBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatusSlot_565820, base: "",
    url: url_WebAppsGetBackupStatusSlot_565821, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupSlot_565832 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackupSlot_565834(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupSlot_565833(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565835 = path.getOrDefault("slot")
  valid_565835 = validateParameter(valid_565835, JString, required = true,
                                 default = nil)
  if valid_565835 != nil:
    section.add "slot", valid_565835
  var valid_565836 = path.getOrDefault("name")
  valid_565836 = validateParameter(valid_565836, JString, required = true,
                                 default = nil)
  if valid_565836 != nil:
    section.add "name", valid_565836
  var valid_565837 = path.getOrDefault("subscriptionId")
  valid_565837 = validateParameter(valid_565837, JString, required = true,
                                 default = nil)
  if valid_565837 != nil:
    section.add "subscriptionId", valid_565837
  var valid_565838 = path.getOrDefault("backupId")
  valid_565838 = validateParameter(valid_565838, JString, required = true,
                                 default = nil)
  if valid_565838 != nil:
    section.add "backupId", valid_565838
  var valid_565839 = path.getOrDefault("resourceGroupName")
  valid_565839 = validateParameter(valid_565839, JString, required = true,
                                 default = nil)
  if valid_565839 != nil:
    section.add "resourceGroupName", valid_565839
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565840 = query.getOrDefault("api-version")
  valid_565840 = validateParameter(valid_565840, JString, required = true,
                                 default = nil)
  if valid_565840 != nil:
    section.add "api-version", valid_565840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565841: Call_WebAppsDeleteBackupSlot_565832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_565841.validator(path, query, header, formData, body)
  let scheme = call_565841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565841.url(scheme.get, call_565841.host, call_565841.base,
                         call_565841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565841, url, valid)

proc call*(call_565842: Call_WebAppsDeleteBackupSlot_565832; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackupSlot
  ## Deletes a backup of an app by its ID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565843 = newJObject()
  var query_565844 = newJObject()
  add(path_565843, "slot", newJString(slot))
  add(query_565844, "api-version", newJString(apiVersion))
  add(path_565843, "name", newJString(name))
  add(path_565843, "subscriptionId", newJString(subscriptionId))
  add(path_565843, "backupId", newJString(backupId))
  add(path_565843, "resourceGroupName", newJString(resourceGroupName))
  result = call_565842.call(path_565843, query_565844, nil, nil, nil)

var webAppsDeleteBackupSlot* = Call_WebAppsDeleteBackupSlot_565832(
    name: "webAppsDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackupSlot_565833, base: "",
    url: url_WebAppsDeleteBackupSlot_565834, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecretsSlot_565845 = ref object of OpenApiRestCall_563564
proc url_WebAppsListBackupStatusSecretsSlot_565847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecretsSlot_565846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565848 = path.getOrDefault("slot")
  valid_565848 = validateParameter(valid_565848, JString, required = true,
                                 default = nil)
  if valid_565848 != nil:
    section.add "slot", valid_565848
  var valid_565849 = path.getOrDefault("name")
  valid_565849 = validateParameter(valid_565849, JString, required = true,
                                 default = nil)
  if valid_565849 != nil:
    section.add "name", valid_565849
  var valid_565850 = path.getOrDefault("subscriptionId")
  valid_565850 = validateParameter(valid_565850, JString, required = true,
                                 default = nil)
  if valid_565850 != nil:
    section.add "subscriptionId", valid_565850
  var valid_565851 = path.getOrDefault("backupId")
  valid_565851 = validateParameter(valid_565851, JString, required = true,
                                 default = nil)
  if valid_565851 != nil:
    section.add "backupId", valid_565851
  var valid_565852 = path.getOrDefault("resourceGroupName")
  valid_565852 = validateParameter(valid_565852, JString, required = true,
                                 default = nil)
  if valid_565852 != nil:
    section.add "resourceGroupName", valid_565852
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565853 = query.getOrDefault("api-version")
  valid_565853 = validateParameter(valid_565853, JString, required = true,
                                 default = nil)
  if valid_565853 != nil:
    section.add "api-version", valid_565853
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565855: Call_WebAppsListBackupStatusSecretsSlot_565845;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_565855.validator(path, query, header, formData, body)
  let scheme = call_565855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565855.url(scheme.get, call_565855.host, call_565855.base,
                         call_565855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565855, url, valid)

proc call*(call_565856: Call_WebAppsListBackupStatusSecretsSlot_565845;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          backupId: string; resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsListBackupStatusSecretsSlot
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on backup request.
  var path_565857 = newJObject()
  var query_565858 = newJObject()
  var body_565859 = newJObject()
  add(path_565857, "slot", newJString(slot))
  add(query_565858, "api-version", newJString(apiVersion))
  add(path_565857, "name", newJString(name))
  add(path_565857, "subscriptionId", newJString(subscriptionId))
  add(path_565857, "backupId", newJString(backupId))
  add(path_565857, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565859 = request
  result = call_565856.call(path_565857, query_565858, nil, nil, body_565859)

var webAppsListBackupStatusSecretsSlot* = Call_WebAppsListBackupStatusSecretsSlot_565845(
    name: "webAppsListBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecretsSlot_565846, base: "",
    url: url_WebAppsListBackupStatusSecretsSlot_565847, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSlot_565860 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestoreSlot_565862(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSlot_565861(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565863 = path.getOrDefault("slot")
  valid_565863 = validateParameter(valid_565863, JString, required = true,
                                 default = nil)
  if valid_565863 != nil:
    section.add "slot", valid_565863
  var valid_565864 = path.getOrDefault("name")
  valid_565864 = validateParameter(valid_565864, JString, required = true,
                                 default = nil)
  if valid_565864 != nil:
    section.add "name", valid_565864
  var valid_565865 = path.getOrDefault("subscriptionId")
  valid_565865 = validateParameter(valid_565865, JString, required = true,
                                 default = nil)
  if valid_565865 != nil:
    section.add "subscriptionId", valid_565865
  var valid_565866 = path.getOrDefault("backupId")
  valid_565866 = validateParameter(valid_565866, JString, required = true,
                                 default = nil)
  if valid_565866 != nil:
    section.add "backupId", valid_565866
  var valid_565867 = path.getOrDefault("resourceGroupName")
  valid_565867 = validateParameter(valid_565867, JString, required = true,
                                 default = nil)
  if valid_565867 != nil:
    section.add "resourceGroupName", valid_565867
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565868 = query.getOrDefault("api-version")
  valid_565868 = validateParameter(valid_565868, JString, required = true,
                                 default = nil)
  if valid_565868 != nil:
    section.add "api-version", valid_565868
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565870: Call_WebAppsRestoreSlot_565860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_565870.validator(path, query, header, formData, body)
  let scheme = call_565870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565870.url(scheme.get, call_565870.host, call_565870.base,
                         call_565870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565870, url, valid)

proc call*(call_565871: Call_WebAppsRestoreSlot_565860; slot: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsRestoreSlot
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_565872 = newJObject()
  var query_565873 = newJObject()
  var body_565874 = newJObject()
  add(path_565872, "slot", newJString(slot))
  add(query_565873, "api-version", newJString(apiVersion))
  add(path_565872, "name", newJString(name))
  add(path_565872, "subscriptionId", newJString(subscriptionId))
  add(path_565872, "backupId", newJString(backupId))
  add(path_565872, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565874 = request
  result = call_565871.call(path_565872, query_565873, nil, nil, body_565874)

var webAppsRestoreSlot* = Call_WebAppsRestoreSlot_565860(
    name: "webAppsRestoreSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_WebAppsRestoreSlot_565861, base: "",
    url: url_WebAppsRestoreSlot_565862, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationsSlot_565875 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurationsSlot_565877(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationsSlot_565876(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565878 = path.getOrDefault("slot")
  valid_565878 = validateParameter(valid_565878, JString, required = true,
                                 default = nil)
  if valid_565878 != nil:
    section.add "slot", valid_565878
  var valid_565879 = path.getOrDefault("name")
  valid_565879 = validateParameter(valid_565879, JString, required = true,
                                 default = nil)
  if valid_565879 != nil:
    section.add "name", valid_565879
  var valid_565880 = path.getOrDefault("subscriptionId")
  valid_565880 = validateParameter(valid_565880, JString, required = true,
                                 default = nil)
  if valid_565880 != nil:
    section.add "subscriptionId", valid_565880
  var valid_565881 = path.getOrDefault("resourceGroupName")
  valid_565881 = validateParameter(valid_565881, JString, required = true,
                                 default = nil)
  if valid_565881 != nil:
    section.add "resourceGroupName", valid_565881
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565882 = query.getOrDefault("api-version")
  valid_565882 = validateParameter(valid_565882, JString, required = true,
                                 default = nil)
  if valid_565882 != nil:
    section.add "api-version", valid_565882
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565883: Call_WebAppsListConfigurationsSlot_565875; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_565883.validator(path, query, header, formData, body)
  let scheme = call_565883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565883.url(scheme.get, call_565883.host, call_565883.base,
                         call_565883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565883, url, valid)

proc call*(call_565884: Call_WebAppsListConfigurationsSlot_565875; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConfigurationsSlot
  ## List the configurations of an app
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565885 = newJObject()
  var query_565886 = newJObject()
  add(path_565885, "slot", newJString(slot))
  add(query_565886, "api-version", newJString(apiVersion))
  add(path_565885, "name", newJString(name))
  add(path_565885, "subscriptionId", newJString(subscriptionId))
  add(path_565885, "resourceGroupName", newJString(resourceGroupName))
  result = call_565884.call(path_565885, query_565886, nil, nil, nil)

var webAppsListConfigurationsSlot* = Call_WebAppsListConfigurationsSlot_565875(
    name: "webAppsListConfigurationsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    validator: validate_WebAppsListConfigurationsSlot_565876, base: "",
    url: url_WebAppsListConfigurationsSlot_565877, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettingsSlot_565887 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateApplicationSettingsSlot_565889(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettingsSlot_565888(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565890 = path.getOrDefault("slot")
  valid_565890 = validateParameter(valid_565890, JString, required = true,
                                 default = nil)
  if valid_565890 != nil:
    section.add "slot", valid_565890
  var valid_565891 = path.getOrDefault("name")
  valid_565891 = validateParameter(valid_565891, JString, required = true,
                                 default = nil)
  if valid_565891 != nil:
    section.add "name", valid_565891
  var valid_565892 = path.getOrDefault("subscriptionId")
  valid_565892 = validateParameter(valid_565892, JString, required = true,
                                 default = nil)
  if valid_565892 != nil:
    section.add "subscriptionId", valid_565892
  var valid_565893 = path.getOrDefault("resourceGroupName")
  valid_565893 = validateParameter(valid_565893, JString, required = true,
                                 default = nil)
  if valid_565893 != nil:
    section.add "resourceGroupName", valid_565893
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565894 = query.getOrDefault("api-version")
  valid_565894 = validateParameter(valid_565894, JString, required = true,
                                 default = nil)
  if valid_565894 != nil:
    section.add "api-version", valid_565894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565896: Call_WebAppsUpdateApplicationSettingsSlot_565887;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_565896.validator(path, query, header, formData, body)
  let scheme = call_565896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565896.url(scheme.get, call_565896.host, call_565896.base,
                         call_565896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565896, url, valid)

proc call*(call_565897: Call_WebAppsUpdateApplicationSettingsSlot_565887;
          appSettings: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateApplicationSettingsSlot
  ## Replaces the application settings of an app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565898 = newJObject()
  var query_565899 = newJObject()
  var body_565900 = newJObject()
  if appSettings != nil:
    body_565900 = appSettings
  add(path_565898, "slot", newJString(slot))
  add(query_565899, "api-version", newJString(apiVersion))
  add(path_565898, "name", newJString(name))
  add(path_565898, "subscriptionId", newJString(subscriptionId))
  add(path_565898, "resourceGroupName", newJString(resourceGroupName))
  result = call_565897.call(path_565898, query_565899, nil, nil, body_565900)

var webAppsUpdateApplicationSettingsSlot* = Call_WebAppsUpdateApplicationSettingsSlot_565887(
    name: "webAppsUpdateApplicationSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettingsSlot_565888, base: "",
    url: url_WebAppsUpdateApplicationSettingsSlot_565889, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettingsSlot_565901 = ref object of OpenApiRestCall_563564
proc url_WebAppsListApplicationSettingsSlot_565903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettingsSlot_565902(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565904 = path.getOrDefault("slot")
  valid_565904 = validateParameter(valid_565904, JString, required = true,
                                 default = nil)
  if valid_565904 != nil:
    section.add "slot", valid_565904
  var valid_565905 = path.getOrDefault("name")
  valid_565905 = validateParameter(valid_565905, JString, required = true,
                                 default = nil)
  if valid_565905 != nil:
    section.add "name", valid_565905
  var valid_565906 = path.getOrDefault("subscriptionId")
  valid_565906 = validateParameter(valid_565906, JString, required = true,
                                 default = nil)
  if valid_565906 != nil:
    section.add "subscriptionId", valid_565906
  var valid_565907 = path.getOrDefault("resourceGroupName")
  valid_565907 = validateParameter(valid_565907, JString, required = true,
                                 default = nil)
  if valid_565907 != nil:
    section.add "resourceGroupName", valid_565907
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565908 = query.getOrDefault("api-version")
  valid_565908 = validateParameter(valid_565908, JString, required = true,
                                 default = nil)
  if valid_565908 != nil:
    section.add "api-version", valid_565908
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565909: Call_WebAppsListApplicationSettingsSlot_565901;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_565909.validator(path, query, header, formData, body)
  let scheme = call_565909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565909.url(scheme.get, call_565909.host, call_565909.base,
                         call_565909.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565909, url, valid)

proc call*(call_565910: Call_WebAppsListApplicationSettingsSlot_565901;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListApplicationSettingsSlot
  ## Gets the application settings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565911 = newJObject()
  var query_565912 = newJObject()
  add(path_565911, "slot", newJString(slot))
  add(query_565912, "api-version", newJString(apiVersion))
  add(path_565911, "name", newJString(name))
  add(path_565911, "subscriptionId", newJString(subscriptionId))
  add(path_565911, "resourceGroupName", newJString(resourceGroupName))
  result = call_565910.call(path_565911, query_565912, nil, nil, nil)

var webAppsListApplicationSettingsSlot* = Call_WebAppsListApplicationSettingsSlot_565901(
    name: "webAppsListApplicationSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettingsSlot_565902, base: "",
    url: url_WebAppsListApplicationSettingsSlot_565903, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettingsSlot_565913 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateAuthSettingsSlot_565915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettingsSlot_565914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565916 = path.getOrDefault("slot")
  valid_565916 = validateParameter(valid_565916, JString, required = true,
                                 default = nil)
  if valid_565916 != nil:
    section.add "slot", valid_565916
  var valid_565917 = path.getOrDefault("name")
  valid_565917 = validateParameter(valid_565917, JString, required = true,
                                 default = nil)
  if valid_565917 != nil:
    section.add "name", valid_565917
  var valid_565918 = path.getOrDefault("subscriptionId")
  valid_565918 = validateParameter(valid_565918, JString, required = true,
                                 default = nil)
  if valid_565918 != nil:
    section.add "subscriptionId", valid_565918
  var valid_565919 = path.getOrDefault("resourceGroupName")
  valid_565919 = validateParameter(valid_565919, JString, required = true,
                                 default = nil)
  if valid_565919 != nil:
    section.add "resourceGroupName", valid_565919
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565920 = query.getOrDefault("api-version")
  valid_565920 = validateParameter(valid_565920, JString, required = true,
                                 default = nil)
  if valid_565920 != nil:
    section.add "api-version", valid_565920
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565922: Call_WebAppsUpdateAuthSettingsSlot_565913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_565922.validator(path, query, header, formData, body)
  let scheme = call_565922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565922.url(scheme.get, call_565922.host, call_565922.base,
                         call_565922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565922, url, valid)

proc call*(call_565923: Call_WebAppsUpdateAuthSettingsSlot_565913; slot: string;
          apiVersion: string; siteAuthSettings: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateAuthSettingsSlot
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565924 = newJObject()
  var query_565925 = newJObject()
  var body_565926 = newJObject()
  add(path_565924, "slot", newJString(slot))
  add(query_565925, "api-version", newJString(apiVersion))
  if siteAuthSettings != nil:
    body_565926 = siteAuthSettings
  add(path_565924, "name", newJString(name))
  add(path_565924, "subscriptionId", newJString(subscriptionId))
  add(path_565924, "resourceGroupName", newJString(resourceGroupName))
  result = call_565923.call(path_565924, query_565925, nil, nil, body_565926)

var webAppsUpdateAuthSettingsSlot* = Call_WebAppsUpdateAuthSettingsSlot_565913(
    name: "webAppsUpdateAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettingsSlot_565914, base: "",
    url: url_WebAppsUpdateAuthSettingsSlot_565915, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettingsSlot_565927 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetAuthSettingsSlot_565929(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettingsSlot_565928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565930 = path.getOrDefault("slot")
  valid_565930 = validateParameter(valid_565930, JString, required = true,
                                 default = nil)
  if valid_565930 != nil:
    section.add "slot", valid_565930
  var valid_565931 = path.getOrDefault("name")
  valid_565931 = validateParameter(valid_565931, JString, required = true,
                                 default = nil)
  if valid_565931 != nil:
    section.add "name", valid_565931
  var valid_565932 = path.getOrDefault("subscriptionId")
  valid_565932 = validateParameter(valid_565932, JString, required = true,
                                 default = nil)
  if valid_565932 != nil:
    section.add "subscriptionId", valid_565932
  var valid_565933 = path.getOrDefault("resourceGroupName")
  valid_565933 = validateParameter(valid_565933, JString, required = true,
                                 default = nil)
  if valid_565933 != nil:
    section.add "resourceGroupName", valid_565933
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565934 = query.getOrDefault("api-version")
  valid_565934 = validateParameter(valid_565934, JString, required = true,
                                 default = nil)
  if valid_565934 != nil:
    section.add "api-version", valid_565934
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565935: Call_WebAppsGetAuthSettingsSlot_565927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_565935.validator(path, query, header, formData, body)
  let scheme = call_565935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565935.url(scheme.get, call_565935.host, call_565935.base,
                         call_565935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565935, url, valid)

proc call*(call_565936: Call_WebAppsGetAuthSettingsSlot_565927; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetAuthSettingsSlot
  ## Gets the Authentication/Authorization settings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565937 = newJObject()
  var query_565938 = newJObject()
  add(path_565937, "slot", newJString(slot))
  add(query_565938, "api-version", newJString(apiVersion))
  add(path_565937, "name", newJString(name))
  add(path_565937, "subscriptionId", newJString(subscriptionId))
  add(path_565937, "resourceGroupName", newJString(resourceGroupName))
  result = call_565936.call(path_565937, query_565938, nil, nil, nil)

var webAppsGetAuthSettingsSlot* = Call_WebAppsGetAuthSettingsSlot_565927(
    name: "webAppsGetAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettingsSlot_565928, base: "",
    url: url_WebAppsGetAuthSettingsSlot_565929, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfigurationSlot_565939 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateBackupConfigurationSlot_565941(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfigurationSlot_565940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565942 = path.getOrDefault("slot")
  valid_565942 = validateParameter(valid_565942, JString, required = true,
                                 default = nil)
  if valid_565942 != nil:
    section.add "slot", valid_565942
  var valid_565943 = path.getOrDefault("name")
  valid_565943 = validateParameter(valid_565943, JString, required = true,
                                 default = nil)
  if valid_565943 != nil:
    section.add "name", valid_565943
  var valid_565944 = path.getOrDefault("subscriptionId")
  valid_565944 = validateParameter(valid_565944, JString, required = true,
                                 default = nil)
  if valid_565944 != nil:
    section.add "subscriptionId", valid_565944
  var valid_565945 = path.getOrDefault("resourceGroupName")
  valid_565945 = validateParameter(valid_565945, JString, required = true,
                                 default = nil)
  if valid_565945 != nil:
    section.add "resourceGroupName", valid_565945
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565946 = query.getOrDefault("api-version")
  valid_565946 = validateParameter(valid_565946, JString, required = true,
                                 default = nil)
  if valid_565946 != nil:
    section.add "api-version", valid_565946
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565948: Call_WebAppsUpdateBackupConfigurationSlot_565939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_565948.validator(path, query, header, formData, body)
  let scheme = call_565948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565948.url(scheme.get, call_565948.host, call_565948.base,
                         call_565948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565948, url, valid)

proc call*(call_565949: Call_WebAppsUpdateBackupConfigurationSlot_565939;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfigurationSlot
  ## Updates the backup configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_565950 = newJObject()
  var query_565951 = newJObject()
  var body_565952 = newJObject()
  add(path_565950, "slot", newJString(slot))
  add(query_565951, "api-version", newJString(apiVersion))
  add(path_565950, "name", newJString(name))
  add(path_565950, "subscriptionId", newJString(subscriptionId))
  add(path_565950, "resourceGroupName", newJString(resourceGroupName))
  if request != nil:
    body_565952 = request
  result = call_565949.call(path_565950, query_565951, nil, nil, body_565952)

var webAppsUpdateBackupConfigurationSlot* = Call_WebAppsUpdateBackupConfigurationSlot_565939(
    name: "webAppsUpdateBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsUpdateBackupConfigurationSlot_565940, base: "",
    url: url_WebAppsUpdateBackupConfigurationSlot_565941, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfigurationSlot_565953 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteBackupConfigurationSlot_565955(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfigurationSlot_565954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565956 = path.getOrDefault("slot")
  valid_565956 = validateParameter(valid_565956, JString, required = true,
                                 default = nil)
  if valid_565956 != nil:
    section.add "slot", valid_565956
  var valid_565957 = path.getOrDefault("name")
  valid_565957 = validateParameter(valid_565957, JString, required = true,
                                 default = nil)
  if valid_565957 != nil:
    section.add "name", valid_565957
  var valid_565958 = path.getOrDefault("subscriptionId")
  valid_565958 = validateParameter(valid_565958, JString, required = true,
                                 default = nil)
  if valid_565958 != nil:
    section.add "subscriptionId", valid_565958
  var valid_565959 = path.getOrDefault("resourceGroupName")
  valid_565959 = validateParameter(valid_565959, JString, required = true,
                                 default = nil)
  if valid_565959 != nil:
    section.add "resourceGroupName", valid_565959
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565960 = query.getOrDefault("api-version")
  valid_565960 = validateParameter(valid_565960, JString, required = true,
                                 default = nil)
  if valid_565960 != nil:
    section.add "api-version", valid_565960
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565961: Call_WebAppsDeleteBackupConfigurationSlot_565953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_565961.validator(path, query, header, formData, body)
  let scheme = call_565961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565961.url(scheme.get, call_565961.host, call_565961.base,
                         call_565961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565961, url, valid)

proc call*(call_565962: Call_WebAppsDeleteBackupConfigurationSlot_565953;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteBackupConfigurationSlot
  ## Deletes the backup configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565963 = newJObject()
  var query_565964 = newJObject()
  add(path_565963, "slot", newJString(slot))
  add(query_565964, "api-version", newJString(apiVersion))
  add(path_565963, "name", newJString(name))
  add(path_565963, "subscriptionId", newJString(subscriptionId))
  add(path_565963, "resourceGroupName", newJString(resourceGroupName))
  result = call_565962.call(path_565963, query_565964, nil, nil, nil)

var webAppsDeleteBackupConfigurationSlot* = Call_WebAppsDeleteBackupConfigurationSlot_565953(
    name: "webAppsDeleteBackupConfigurationSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsDeleteBackupConfigurationSlot_565954, base: "",
    url: url_WebAppsDeleteBackupConfigurationSlot_565955, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfigurationSlot_565965 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetBackupConfigurationSlot_565967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfigurationSlot_565966(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565968 = path.getOrDefault("slot")
  valid_565968 = validateParameter(valid_565968, JString, required = true,
                                 default = nil)
  if valid_565968 != nil:
    section.add "slot", valid_565968
  var valid_565969 = path.getOrDefault("name")
  valid_565969 = validateParameter(valid_565969, JString, required = true,
                                 default = nil)
  if valid_565969 != nil:
    section.add "name", valid_565969
  var valid_565970 = path.getOrDefault("subscriptionId")
  valid_565970 = validateParameter(valid_565970, JString, required = true,
                                 default = nil)
  if valid_565970 != nil:
    section.add "subscriptionId", valid_565970
  var valid_565971 = path.getOrDefault("resourceGroupName")
  valid_565971 = validateParameter(valid_565971, JString, required = true,
                                 default = nil)
  if valid_565971 != nil:
    section.add "resourceGroupName", valid_565971
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565972 = query.getOrDefault("api-version")
  valid_565972 = validateParameter(valid_565972, JString, required = true,
                                 default = nil)
  if valid_565972 != nil:
    section.add "api-version", valid_565972
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565973: Call_WebAppsGetBackupConfigurationSlot_565965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_565973.validator(path, query, header, formData, body)
  let scheme = call_565973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565973.url(scheme.get, call_565973.host, call_565973.base,
                         call_565973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565973, url, valid)

proc call*(call_565974: Call_WebAppsGetBackupConfigurationSlot_565965;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetBackupConfigurationSlot
  ## Gets the backup configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_565975 = newJObject()
  var query_565976 = newJObject()
  add(path_565975, "slot", newJString(slot))
  add(query_565976, "api-version", newJString(apiVersion))
  add(path_565975, "name", newJString(name))
  add(path_565975, "subscriptionId", newJString(subscriptionId))
  add(path_565975, "resourceGroupName", newJString(resourceGroupName))
  result = call_565974.call(path_565975, query_565976, nil, nil, nil)

var webAppsGetBackupConfigurationSlot* = Call_WebAppsGetBackupConfigurationSlot_565965(
    name: "webAppsGetBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_WebAppsGetBackupConfigurationSlot_565966, base: "",
    url: url_WebAppsGetBackupConfigurationSlot_565967, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStringsSlot_565977 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConnectionStringsSlot_565979(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStringsSlot_565978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565980 = path.getOrDefault("slot")
  valid_565980 = validateParameter(valid_565980, JString, required = true,
                                 default = nil)
  if valid_565980 != nil:
    section.add "slot", valid_565980
  var valid_565981 = path.getOrDefault("name")
  valid_565981 = validateParameter(valid_565981, JString, required = true,
                                 default = nil)
  if valid_565981 != nil:
    section.add "name", valid_565981
  var valid_565982 = path.getOrDefault("subscriptionId")
  valid_565982 = validateParameter(valid_565982, JString, required = true,
                                 default = nil)
  if valid_565982 != nil:
    section.add "subscriptionId", valid_565982
  var valid_565983 = path.getOrDefault("resourceGroupName")
  valid_565983 = validateParameter(valid_565983, JString, required = true,
                                 default = nil)
  if valid_565983 != nil:
    section.add "resourceGroupName", valid_565983
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565984 = query.getOrDefault("api-version")
  valid_565984 = validateParameter(valid_565984, JString, required = true,
                                 default = nil)
  if valid_565984 != nil:
    section.add "api-version", valid_565984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_565986: Call_WebAppsUpdateConnectionStringsSlot_565977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_565986.validator(path, query, header, formData, body)
  let scheme = call_565986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565986.url(scheme.get, call_565986.host, call_565986.base,
                         call_565986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565986, url, valid)

proc call*(call_565987: Call_WebAppsUpdateConnectionStringsSlot_565977;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; connectionStrings: JsonNode): Recallable =
  ## webAppsUpdateConnectionStringsSlot
  ## Replaces the connection strings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  var path_565988 = newJObject()
  var query_565989 = newJObject()
  var body_565990 = newJObject()
  add(path_565988, "slot", newJString(slot))
  add(query_565989, "api-version", newJString(apiVersion))
  add(path_565988, "name", newJString(name))
  add(path_565988, "subscriptionId", newJString(subscriptionId))
  add(path_565988, "resourceGroupName", newJString(resourceGroupName))
  if connectionStrings != nil:
    body_565990 = connectionStrings
  result = call_565987.call(path_565988, query_565989, nil, nil, body_565990)

var webAppsUpdateConnectionStringsSlot* = Call_WebAppsUpdateConnectionStringsSlot_565977(
    name: "webAppsUpdateConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStringsSlot_565978, base: "",
    url: url_WebAppsUpdateConnectionStringsSlot_565979, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStringsSlot_565991 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConnectionStringsSlot_565993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStringsSlot_565992(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_565994 = path.getOrDefault("slot")
  valid_565994 = validateParameter(valid_565994, JString, required = true,
                                 default = nil)
  if valid_565994 != nil:
    section.add "slot", valid_565994
  var valid_565995 = path.getOrDefault("name")
  valid_565995 = validateParameter(valid_565995, JString, required = true,
                                 default = nil)
  if valid_565995 != nil:
    section.add "name", valid_565995
  var valid_565996 = path.getOrDefault("subscriptionId")
  valid_565996 = validateParameter(valid_565996, JString, required = true,
                                 default = nil)
  if valid_565996 != nil:
    section.add "subscriptionId", valid_565996
  var valid_565997 = path.getOrDefault("resourceGroupName")
  valid_565997 = validateParameter(valid_565997, JString, required = true,
                                 default = nil)
  if valid_565997 != nil:
    section.add "resourceGroupName", valid_565997
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_565998 = query.getOrDefault("api-version")
  valid_565998 = validateParameter(valid_565998, JString, required = true,
                                 default = nil)
  if valid_565998 != nil:
    section.add "api-version", valid_565998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_565999: Call_WebAppsListConnectionStringsSlot_565991;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_565999.validator(path, query, header, formData, body)
  let scheme = call_565999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_565999.url(scheme.get, call_565999.host, call_565999.base,
                         call_565999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_565999, url, valid)

proc call*(call_566000: Call_WebAppsListConnectionStringsSlot_565991; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConnectionStringsSlot
  ## Gets the connection strings of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566001 = newJObject()
  var query_566002 = newJObject()
  add(path_566001, "slot", newJString(slot))
  add(query_566002, "api-version", newJString(apiVersion))
  add(path_566001, "name", newJString(name))
  add(path_566001, "subscriptionId", newJString(subscriptionId))
  add(path_566001, "resourceGroupName", newJString(resourceGroupName))
  result = call_566000.call(path_566001, query_566002, nil, nil, nil)

var webAppsListConnectionStringsSlot* = Call_WebAppsListConnectionStringsSlot_565991(
    name: "webAppsListConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStringsSlot_565992, base: "",
    url: url_WebAppsListConnectionStringsSlot_565993, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfigSlot_566015 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDiagnosticLogsConfigSlot_566017(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfigSlot_566016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566018 = path.getOrDefault("slot")
  valid_566018 = validateParameter(valid_566018, JString, required = true,
                                 default = nil)
  if valid_566018 != nil:
    section.add "slot", valid_566018
  var valid_566019 = path.getOrDefault("name")
  valid_566019 = validateParameter(valid_566019, JString, required = true,
                                 default = nil)
  if valid_566019 != nil:
    section.add "name", valid_566019
  var valid_566020 = path.getOrDefault("subscriptionId")
  valid_566020 = validateParameter(valid_566020, JString, required = true,
                                 default = nil)
  if valid_566020 != nil:
    section.add "subscriptionId", valid_566020
  var valid_566021 = path.getOrDefault("resourceGroupName")
  valid_566021 = validateParameter(valid_566021, JString, required = true,
                                 default = nil)
  if valid_566021 != nil:
    section.add "resourceGroupName", valid_566021
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566022 = query.getOrDefault("api-version")
  valid_566022 = validateParameter(valid_566022, JString, required = true,
                                 default = nil)
  if valid_566022 != nil:
    section.add "api-version", valid_566022
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566024: Call_WebAppsUpdateDiagnosticLogsConfigSlot_566015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_566024.validator(path, query, header, formData, body)
  let scheme = call_566024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566024.url(scheme.get, call_566024.host, call_566024.base,
                         call_566024.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566024, url, valid)

proc call*(call_566025: Call_WebAppsUpdateDiagnosticLogsConfigSlot_566015;
          slot: string; apiVersion: string; siteLogsConfig: JsonNode; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfigSlot
  ## Updates the logging configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566026 = newJObject()
  var query_566027 = newJObject()
  var body_566028 = newJObject()
  add(path_566026, "slot", newJString(slot))
  add(query_566027, "api-version", newJString(apiVersion))
  if siteLogsConfig != nil:
    body_566028 = siteLogsConfig
  add(path_566026, "name", newJString(name))
  add(path_566026, "subscriptionId", newJString(subscriptionId))
  add(path_566026, "resourceGroupName", newJString(resourceGroupName))
  result = call_566025.call(path_566026, query_566027, nil, nil, body_566028)

var webAppsUpdateDiagnosticLogsConfigSlot* = Call_WebAppsUpdateDiagnosticLogsConfigSlot_566015(
    name: "webAppsUpdateDiagnosticLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfigSlot_566016, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfigSlot_566017, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfigurationSlot_566003 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDiagnosticLogsConfigurationSlot_566005(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfigurationSlot_566004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566006 = path.getOrDefault("slot")
  valid_566006 = validateParameter(valid_566006, JString, required = true,
                                 default = nil)
  if valid_566006 != nil:
    section.add "slot", valid_566006
  var valid_566007 = path.getOrDefault("name")
  valid_566007 = validateParameter(valid_566007, JString, required = true,
                                 default = nil)
  if valid_566007 != nil:
    section.add "name", valid_566007
  var valid_566008 = path.getOrDefault("subscriptionId")
  valid_566008 = validateParameter(valid_566008, JString, required = true,
                                 default = nil)
  if valid_566008 != nil:
    section.add "subscriptionId", valid_566008
  var valid_566009 = path.getOrDefault("resourceGroupName")
  valid_566009 = validateParameter(valid_566009, JString, required = true,
                                 default = nil)
  if valid_566009 != nil:
    section.add "resourceGroupName", valid_566009
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566010 = query.getOrDefault("api-version")
  valid_566010 = validateParameter(valid_566010, JString, required = true,
                                 default = nil)
  if valid_566010 != nil:
    section.add "api-version", valid_566010
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566011: Call_WebAppsGetDiagnosticLogsConfigurationSlot_566003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_566011.validator(path, query, header, formData, body)
  let scheme = call_566011.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566011.url(scheme.get, call_566011.host, call_566011.base,
                         call_566011.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566011, url, valid)

proc call*(call_566012: Call_WebAppsGetDiagnosticLogsConfigurationSlot_566003;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetDiagnosticLogsConfigurationSlot
  ## Gets the logging configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566013 = newJObject()
  var query_566014 = newJObject()
  add(path_566013, "slot", newJString(slot))
  add(query_566014, "api-version", newJString(apiVersion))
  add(path_566013, "name", newJString(name))
  add(path_566013, "subscriptionId", newJString(subscriptionId))
  add(path_566013, "resourceGroupName", newJString(resourceGroupName))
  result = call_566012.call(path_566013, query_566014, nil, nil, nil)

var webAppsGetDiagnosticLogsConfigurationSlot* = Call_WebAppsGetDiagnosticLogsConfigurationSlot_566003(
    name: "webAppsGetDiagnosticLogsConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfigurationSlot_566004,
    base: "", url: url_WebAppsGetDiagnosticLogsConfigurationSlot_566005,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadataSlot_566029 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateMetadataSlot_566031(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadataSlot_566030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566032 = path.getOrDefault("slot")
  valid_566032 = validateParameter(valid_566032, JString, required = true,
                                 default = nil)
  if valid_566032 != nil:
    section.add "slot", valid_566032
  var valid_566033 = path.getOrDefault("name")
  valid_566033 = validateParameter(valid_566033, JString, required = true,
                                 default = nil)
  if valid_566033 != nil:
    section.add "name", valid_566033
  var valid_566034 = path.getOrDefault("subscriptionId")
  valid_566034 = validateParameter(valid_566034, JString, required = true,
                                 default = nil)
  if valid_566034 != nil:
    section.add "subscriptionId", valid_566034
  var valid_566035 = path.getOrDefault("resourceGroupName")
  valid_566035 = validateParameter(valid_566035, JString, required = true,
                                 default = nil)
  if valid_566035 != nil:
    section.add "resourceGroupName", valid_566035
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566036 = query.getOrDefault("api-version")
  valid_566036 = validateParameter(valid_566036, JString, required = true,
                                 default = nil)
  if valid_566036 != nil:
    section.add "api-version", valid_566036
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566038: Call_WebAppsUpdateMetadataSlot_566029; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_566038.validator(path, query, header, formData, body)
  let scheme = call_566038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566038.url(scheme.get, call_566038.host, call_566038.base,
                         call_566038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566038, url, valid)

proc call*(call_566039: Call_WebAppsUpdateMetadataSlot_566029; metadata: JsonNode;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateMetadataSlot
  ## Replaces the metadata of an app.
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566040 = newJObject()
  var query_566041 = newJObject()
  var body_566042 = newJObject()
  if metadata != nil:
    body_566042 = metadata
  add(path_566040, "slot", newJString(slot))
  add(query_566041, "api-version", newJString(apiVersion))
  add(path_566040, "name", newJString(name))
  add(path_566040, "subscriptionId", newJString(subscriptionId))
  add(path_566040, "resourceGroupName", newJString(resourceGroupName))
  result = call_566039.call(path_566040, query_566041, nil, nil, body_566042)

var webAppsUpdateMetadataSlot* = Call_WebAppsUpdateMetadataSlot_566029(
    name: "webAppsUpdateMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_WebAppsUpdateMetadataSlot_566030, base: "",
    url: url_WebAppsUpdateMetadataSlot_566031, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadataSlot_566043 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetadataSlot_566045(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadataSlot_566044(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566046 = path.getOrDefault("slot")
  valid_566046 = validateParameter(valid_566046, JString, required = true,
                                 default = nil)
  if valid_566046 != nil:
    section.add "slot", valid_566046
  var valid_566047 = path.getOrDefault("name")
  valid_566047 = validateParameter(valid_566047, JString, required = true,
                                 default = nil)
  if valid_566047 != nil:
    section.add "name", valid_566047
  var valid_566048 = path.getOrDefault("subscriptionId")
  valid_566048 = validateParameter(valid_566048, JString, required = true,
                                 default = nil)
  if valid_566048 != nil:
    section.add "subscriptionId", valid_566048
  var valid_566049 = path.getOrDefault("resourceGroupName")
  valid_566049 = validateParameter(valid_566049, JString, required = true,
                                 default = nil)
  if valid_566049 != nil:
    section.add "resourceGroupName", valid_566049
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566050 = query.getOrDefault("api-version")
  valid_566050 = validateParameter(valid_566050, JString, required = true,
                                 default = nil)
  if valid_566050 != nil:
    section.add "api-version", valid_566050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566051: Call_WebAppsListMetadataSlot_566043; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_566051.validator(path, query, header, formData, body)
  let scheme = call_566051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566051.url(scheme.get, call_566051.host, call_566051.base,
                         call_566051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566051, url, valid)

proc call*(call_566052: Call_WebAppsListMetadataSlot_566043; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListMetadataSlot
  ## Gets the metadata of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566053 = newJObject()
  var query_566054 = newJObject()
  add(path_566053, "slot", newJString(slot))
  add(query_566054, "api-version", newJString(apiVersion))
  add(path_566053, "name", newJString(name))
  add(path_566053, "subscriptionId", newJString(subscriptionId))
  add(path_566053, "resourceGroupName", newJString(resourceGroupName))
  result = call_566052.call(path_566053, query_566054, nil, nil, nil)

var webAppsListMetadataSlot* = Call_WebAppsListMetadataSlot_566043(
    name: "webAppsListMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_WebAppsListMetadataSlot_566044, base: "",
    url: url_WebAppsListMetadataSlot_566045, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentialsSlot_566055 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingCredentialsSlot_566057(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentialsSlot_566056(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566058 = path.getOrDefault("slot")
  valid_566058 = validateParameter(valid_566058, JString, required = true,
                                 default = nil)
  if valid_566058 != nil:
    section.add "slot", valid_566058
  var valid_566059 = path.getOrDefault("name")
  valid_566059 = validateParameter(valid_566059, JString, required = true,
                                 default = nil)
  if valid_566059 != nil:
    section.add "name", valid_566059
  var valid_566060 = path.getOrDefault("subscriptionId")
  valid_566060 = validateParameter(valid_566060, JString, required = true,
                                 default = nil)
  if valid_566060 != nil:
    section.add "subscriptionId", valid_566060
  var valid_566061 = path.getOrDefault("resourceGroupName")
  valid_566061 = validateParameter(valid_566061, JString, required = true,
                                 default = nil)
  if valid_566061 != nil:
    section.add "resourceGroupName", valid_566061
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566062 = query.getOrDefault("api-version")
  valid_566062 = validateParameter(valid_566062, JString, required = true,
                                 default = nil)
  if valid_566062 != nil:
    section.add "api-version", valid_566062
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566063: Call_WebAppsListPublishingCredentialsSlot_566055;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_566063.validator(path, query, header, formData, body)
  let scheme = call_566063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566063.url(scheme.get, call_566063.host, call_566063.base,
                         call_566063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566063, url, valid)

proc call*(call_566064: Call_WebAppsListPublishingCredentialsSlot_566055;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublishingCredentialsSlot
  ## Gets the Git/FTP publishing credentials of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566065 = newJObject()
  var query_566066 = newJObject()
  add(path_566065, "slot", newJString(slot))
  add(query_566066, "api-version", newJString(apiVersion))
  add(path_566065, "name", newJString(name))
  add(path_566065, "subscriptionId", newJString(subscriptionId))
  add(path_566065, "resourceGroupName", newJString(resourceGroupName))
  result = call_566064.call(path_566065, query_566066, nil, nil, nil)

var webAppsListPublishingCredentialsSlot* = Call_WebAppsListPublishingCredentialsSlot_566055(
    name: "webAppsListPublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentialsSlot_566056, base: "",
    url: url_WebAppsListPublishingCredentialsSlot_566057, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettingsSlot_566067 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSitePushSettingsSlot_566069(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettingsSlot_566068(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566070 = path.getOrDefault("slot")
  valid_566070 = validateParameter(valid_566070, JString, required = true,
                                 default = nil)
  if valid_566070 != nil:
    section.add "slot", valid_566070
  var valid_566071 = path.getOrDefault("name")
  valid_566071 = validateParameter(valid_566071, JString, required = true,
                                 default = nil)
  if valid_566071 != nil:
    section.add "name", valid_566071
  var valid_566072 = path.getOrDefault("subscriptionId")
  valid_566072 = validateParameter(valid_566072, JString, required = true,
                                 default = nil)
  if valid_566072 != nil:
    section.add "subscriptionId", valid_566072
  var valid_566073 = path.getOrDefault("resourceGroupName")
  valid_566073 = validateParameter(valid_566073, JString, required = true,
                                 default = nil)
  if valid_566073 != nil:
    section.add "resourceGroupName", valid_566073
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566074 = query.getOrDefault("api-version")
  valid_566074 = validateParameter(valid_566074, JString, required = true,
                                 default = nil)
  if valid_566074 != nil:
    section.add "api-version", valid_566074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566076: Call_WebAppsUpdateSitePushSettingsSlot_566067;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_566076.validator(path, query, header, formData, body)
  let scheme = call_566076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566076.url(scheme.get, call_566076.host, call_566076.base,
                         call_566076.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566076, url, valid)

proc call*(call_566077: Call_WebAppsUpdateSitePushSettingsSlot_566067;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          pushSettings: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdateSitePushSettingsSlot
  ## Updates the Push settings associated with web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566078 = newJObject()
  var query_566079 = newJObject()
  var body_566080 = newJObject()
  add(path_566078, "slot", newJString(slot))
  add(query_566079, "api-version", newJString(apiVersion))
  add(path_566078, "name", newJString(name))
  add(path_566078, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_566080 = pushSettings
  add(path_566078, "resourceGroupName", newJString(resourceGroupName))
  result = call_566077.call(path_566078, query_566079, nil, nil, body_566080)

var webAppsUpdateSitePushSettingsSlot* = Call_WebAppsUpdateSitePushSettingsSlot_566067(
    name: "webAppsUpdateSitePushSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettingsSlot_566068, base: "",
    url: url_WebAppsUpdateSitePushSettingsSlot_566069, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettingsSlot_566081 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSitePushSettingsSlot_566083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettingsSlot_566082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566084 = path.getOrDefault("slot")
  valid_566084 = validateParameter(valid_566084, JString, required = true,
                                 default = nil)
  if valid_566084 != nil:
    section.add "slot", valid_566084
  var valid_566085 = path.getOrDefault("name")
  valid_566085 = validateParameter(valid_566085, JString, required = true,
                                 default = nil)
  if valid_566085 != nil:
    section.add "name", valid_566085
  var valid_566086 = path.getOrDefault("subscriptionId")
  valid_566086 = validateParameter(valid_566086, JString, required = true,
                                 default = nil)
  if valid_566086 != nil:
    section.add "subscriptionId", valid_566086
  var valid_566087 = path.getOrDefault("resourceGroupName")
  valid_566087 = validateParameter(valid_566087, JString, required = true,
                                 default = nil)
  if valid_566087 != nil:
    section.add "resourceGroupName", valid_566087
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566088 = query.getOrDefault("api-version")
  valid_566088 = validateParameter(valid_566088, JString, required = true,
                                 default = nil)
  if valid_566088 != nil:
    section.add "api-version", valid_566088
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566089: Call_WebAppsListSitePushSettingsSlot_566081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_566089.validator(path, query, header, formData, body)
  let scheme = call_566089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566089.url(scheme.get, call_566089.host, call_566089.base,
                         call_566089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566089, url, valid)

proc call*(call_566090: Call_WebAppsListSitePushSettingsSlot_566081; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSitePushSettingsSlot
  ## Gets the Push settings associated with web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566091 = newJObject()
  var query_566092 = newJObject()
  add(path_566091, "slot", newJString(slot))
  add(query_566092, "api-version", newJString(apiVersion))
  add(path_566091, "name", newJString(name))
  add(path_566091, "subscriptionId", newJString(subscriptionId))
  add(path_566091, "resourceGroupName", newJString(resourceGroupName))
  result = call_566090.call(path_566091, query_566092, nil, nil, nil)

var webAppsListSitePushSettingsSlot* = Call_WebAppsListSitePushSettingsSlot_566081(
    name: "webAppsListSitePushSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettingsSlot_566082, base: "",
    url: url_WebAppsListSitePushSettingsSlot_566083, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfigurationSlot_566105 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateConfigurationSlot_566107(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfigurationSlot_566106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566108 = path.getOrDefault("slot")
  valid_566108 = validateParameter(valid_566108, JString, required = true,
                                 default = nil)
  if valid_566108 != nil:
    section.add "slot", valid_566108
  var valid_566109 = path.getOrDefault("name")
  valid_566109 = validateParameter(valid_566109, JString, required = true,
                                 default = nil)
  if valid_566109 != nil:
    section.add "name", valid_566109
  var valid_566110 = path.getOrDefault("subscriptionId")
  valid_566110 = validateParameter(valid_566110, JString, required = true,
                                 default = nil)
  if valid_566110 != nil:
    section.add "subscriptionId", valid_566110
  var valid_566111 = path.getOrDefault("resourceGroupName")
  valid_566111 = validateParameter(valid_566111, JString, required = true,
                                 default = nil)
  if valid_566111 != nil:
    section.add "resourceGroupName", valid_566111
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566112 = query.getOrDefault("api-version")
  valid_566112 = validateParameter(valid_566112, JString, required = true,
                                 default = nil)
  if valid_566112 != nil:
    section.add "api-version", valid_566112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566114: Call_WebAppsCreateOrUpdateConfigurationSlot_566105;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_566114.validator(path, query, header, formData, body)
  let scheme = call_566114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566114.url(scheme.get, call_566114.host, call_566114.base,
                         call_566114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566114, url, valid)

proc call*(call_566115: Call_WebAppsCreateOrUpdateConfigurationSlot_566105;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566116 = newJObject()
  var query_566117 = newJObject()
  var body_566118 = newJObject()
  add(path_566116, "slot", newJString(slot))
  add(query_566117, "api-version", newJString(apiVersion))
  add(path_566116, "name", newJString(name))
  add(path_566116, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_566118 = siteConfig
  add(path_566116, "resourceGroupName", newJString(resourceGroupName))
  result = call_566115.call(path_566116, query_566117, nil, nil, body_566118)

var webAppsCreateOrUpdateConfigurationSlot* = Call_WebAppsCreateOrUpdateConfigurationSlot_566105(
    name: "webAppsCreateOrUpdateConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfigurationSlot_566106, base: "",
    url: url_WebAppsCreateOrUpdateConfigurationSlot_566107,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSlot_566093 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfigurationSlot_566095(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSlot_566094(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566096 = path.getOrDefault("slot")
  valid_566096 = validateParameter(valid_566096, JString, required = true,
                                 default = nil)
  if valid_566096 != nil:
    section.add "slot", valid_566096
  var valid_566097 = path.getOrDefault("name")
  valid_566097 = validateParameter(valid_566097, JString, required = true,
                                 default = nil)
  if valid_566097 != nil:
    section.add "name", valid_566097
  var valid_566098 = path.getOrDefault("subscriptionId")
  valid_566098 = validateParameter(valid_566098, JString, required = true,
                                 default = nil)
  if valid_566098 != nil:
    section.add "subscriptionId", valid_566098
  var valid_566099 = path.getOrDefault("resourceGroupName")
  valid_566099 = validateParameter(valid_566099, JString, required = true,
                                 default = nil)
  if valid_566099 != nil:
    section.add "resourceGroupName", valid_566099
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566100 = query.getOrDefault("api-version")
  valid_566100 = validateParameter(valid_566100, JString, required = true,
                                 default = nil)
  if valid_566100 != nil:
    section.add "api-version", valid_566100
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566101: Call_WebAppsGetConfigurationSlot_566093; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_566101.validator(path, query, header, formData, body)
  let scheme = call_566101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566101.url(scheme.get, call_566101.host, call_566101.base,
                         call_566101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566101, url, valid)

proc call*(call_566102: Call_WebAppsGetConfigurationSlot_566093; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetConfigurationSlot
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566103 = newJObject()
  var query_566104 = newJObject()
  add(path_566103, "slot", newJString(slot))
  add(query_566104, "api-version", newJString(apiVersion))
  add(path_566103, "name", newJString(name))
  add(path_566103, "subscriptionId", newJString(subscriptionId))
  add(path_566103, "resourceGroupName", newJString(resourceGroupName))
  result = call_566102.call(path_566103, query_566104, nil, nil, nil)

var webAppsGetConfigurationSlot* = Call_WebAppsGetConfigurationSlot_566093(
    name: "webAppsGetConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsGetConfigurationSlot_566094, base: "",
    url: url_WebAppsGetConfigurationSlot_566095, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfigurationSlot_566119 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateConfigurationSlot_566121(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfigurationSlot_566120(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566122 = path.getOrDefault("slot")
  valid_566122 = validateParameter(valid_566122, JString, required = true,
                                 default = nil)
  if valid_566122 != nil:
    section.add "slot", valid_566122
  var valid_566123 = path.getOrDefault("name")
  valid_566123 = validateParameter(valid_566123, JString, required = true,
                                 default = nil)
  if valid_566123 != nil:
    section.add "name", valid_566123
  var valid_566124 = path.getOrDefault("subscriptionId")
  valid_566124 = validateParameter(valid_566124, JString, required = true,
                                 default = nil)
  if valid_566124 != nil:
    section.add "subscriptionId", valid_566124
  var valid_566125 = path.getOrDefault("resourceGroupName")
  valid_566125 = validateParameter(valid_566125, JString, required = true,
                                 default = nil)
  if valid_566125 != nil:
    section.add "resourceGroupName", valid_566125
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566126 = query.getOrDefault("api-version")
  valid_566126 = validateParameter(valid_566126, JString, required = true,
                                 default = nil)
  if valid_566126 != nil:
    section.add "api-version", valid_566126
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566128: Call_WebAppsUpdateConfigurationSlot_566119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_566128.validator(path, query, header, formData, body)
  let scheme = call_566128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566128.url(scheme.get, call_566128.host, call_566128.base,
                         call_566128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566128, url, valid)

proc call*(call_566129: Call_WebAppsUpdateConfigurationSlot_566119; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          siteConfig: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566130 = newJObject()
  var query_566131 = newJObject()
  var body_566132 = newJObject()
  add(path_566130, "slot", newJString(slot))
  add(query_566131, "api-version", newJString(apiVersion))
  add(path_566130, "name", newJString(name))
  add(path_566130, "subscriptionId", newJString(subscriptionId))
  if siteConfig != nil:
    body_566132 = siteConfig
  add(path_566130, "resourceGroupName", newJString(resourceGroupName))
  result = call_566129.call(path_566130, query_566131, nil, nil, body_566132)

var webAppsUpdateConfigurationSlot* = Call_WebAppsUpdateConfigurationSlot_566119(
    name: "webAppsUpdateConfigurationSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsUpdateConfigurationSlot_566120, base: "",
    url: url_WebAppsUpdateConfigurationSlot_566121, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfoSlot_566133 = ref object of OpenApiRestCall_563564
proc url_WebAppsListConfigurationSnapshotInfoSlot_566135(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfoSlot_566134(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566136 = path.getOrDefault("slot")
  valid_566136 = validateParameter(valid_566136, JString, required = true,
                                 default = nil)
  if valid_566136 != nil:
    section.add "slot", valid_566136
  var valid_566137 = path.getOrDefault("name")
  valid_566137 = validateParameter(valid_566137, JString, required = true,
                                 default = nil)
  if valid_566137 != nil:
    section.add "name", valid_566137
  var valid_566138 = path.getOrDefault("subscriptionId")
  valid_566138 = validateParameter(valid_566138, JString, required = true,
                                 default = nil)
  if valid_566138 != nil:
    section.add "subscriptionId", valid_566138
  var valid_566139 = path.getOrDefault("resourceGroupName")
  valid_566139 = validateParameter(valid_566139, JString, required = true,
                                 default = nil)
  if valid_566139 != nil:
    section.add "resourceGroupName", valid_566139
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566140 = query.getOrDefault("api-version")
  valid_566140 = validateParameter(valid_566140, JString, required = true,
                                 default = nil)
  if valid_566140 != nil:
    section.add "api-version", valid_566140
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566141: Call_WebAppsListConfigurationSnapshotInfoSlot_566133;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_566141.validator(path, query, header, formData, body)
  let scheme = call_566141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566141.url(scheme.get, call_566141.host, call_566141.base,
                         call_566141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566141, url, valid)

proc call*(call_566142: Call_WebAppsListConfigurationSnapshotInfoSlot_566133;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListConfigurationSnapshotInfoSlot
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566143 = newJObject()
  var query_566144 = newJObject()
  add(path_566143, "slot", newJString(slot))
  add(query_566144, "api-version", newJString(apiVersion))
  add(path_566143, "name", newJString(name))
  add(path_566143, "subscriptionId", newJString(subscriptionId))
  add(path_566143, "resourceGroupName", newJString(resourceGroupName))
  result = call_566142.call(path_566143, query_566144, nil, nil, nil)

var webAppsListConfigurationSnapshotInfoSlot* = Call_WebAppsListConfigurationSnapshotInfoSlot_566133(
    name: "webAppsListConfigurationSnapshotInfoSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfoSlot_566134, base: "",
    url: url_WebAppsListConfigurationSnapshotInfoSlot_566135,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshotSlot_566145 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetConfigurationSnapshotSlot_566147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshotSlot_566146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_566148 = path.getOrDefault("snapshotId")
  valid_566148 = validateParameter(valid_566148, JString, required = true,
                                 default = nil)
  if valid_566148 != nil:
    section.add "snapshotId", valid_566148
  var valid_566149 = path.getOrDefault("slot")
  valid_566149 = validateParameter(valid_566149, JString, required = true,
                                 default = nil)
  if valid_566149 != nil:
    section.add "slot", valid_566149
  var valid_566150 = path.getOrDefault("name")
  valid_566150 = validateParameter(valid_566150, JString, required = true,
                                 default = nil)
  if valid_566150 != nil:
    section.add "name", valid_566150
  var valid_566151 = path.getOrDefault("subscriptionId")
  valid_566151 = validateParameter(valid_566151, JString, required = true,
                                 default = nil)
  if valid_566151 != nil:
    section.add "subscriptionId", valid_566151
  var valid_566152 = path.getOrDefault("resourceGroupName")
  valid_566152 = validateParameter(valid_566152, JString, required = true,
                                 default = nil)
  if valid_566152 != nil:
    section.add "resourceGroupName", valid_566152
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566153 = query.getOrDefault("api-version")
  valid_566153 = validateParameter(valid_566153, JString, required = true,
                                 default = nil)
  if valid_566153 != nil:
    section.add "api-version", valid_566153
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566154: Call_WebAppsGetConfigurationSnapshotSlot_566145;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_566154.validator(path, query, header, formData, body)
  let scheme = call_566154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566154.url(scheme.get, call_566154.host, call_566154.base,
                         call_566154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566154, url, valid)

proc call*(call_566155: Call_WebAppsGetConfigurationSnapshotSlot_566145;
          snapshotId: string; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetConfigurationSnapshotSlot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566156 = newJObject()
  var query_566157 = newJObject()
  add(path_566156, "snapshotId", newJString(snapshotId))
  add(path_566156, "slot", newJString(slot))
  add(query_566157, "api-version", newJString(apiVersion))
  add(path_566156, "name", newJString(name))
  add(path_566156, "subscriptionId", newJString(subscriptionId))
  add(path_566156, "resourceGroupName", newJString(resourceGroupName))
  result = call_566155.call(path_566156, query_566157, nil, nil, nil)

var webAppsGetConfigurationSnapshotSlot* = Call_WebAppsGetConfigurationSnapshotSlot_566145(
    name: "webAppsGetConfigurationSnapshotSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshotSlot_566146, base: "",
    url: url_WebAppsGetConfigurationSnapshotSlot_566147, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566158 = ref object of OpenApiRestCall_563564
proc url_WebAppsRecoverSiteConfigurationSnapshotSlot_566160(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshotSlot_566159(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `snapshotId` field"
  var valid_566161 = path.getOrDefault("snapshotId")
  valid_566161 = validateParameter(valid_566161, JString, required = true,
                                 default = nil)
  if valid_566161 != nil:
    section.add "snapshotId", valid_566161
  var valid_566162 = path.getOrDefault("slot")
  valid_566162 = validateParameter(valid_566162, JString, required = true,
                                 default = nil)
  if valid_566162 != nil:
    section.add "slot", valid_566162
  var valid_566163 = path.getOrDefault("name")
  valid_566163 = validateParameter(valid_566163, JString, required = true,
                                 default = nil)
  if valid_566163 != nil:
    section.add "name", valid_566163
  var valid_566164 = path.getOrDefault("subscriptionId")
  valid_566164 = validateParameter(valid_566164, JString, required = true,
                                 default = nil)
  if valid_566164 != nil:
    section.add "subscriptionId", valid_566164
  var valid_566165 = path.getOrDefault("resourceGroupName")
  valid_566165 = validateParameter(valid_566165, JString, required = true,
                                 default = nil)
  if valid_566165 != nil:
    section.add "resourceGroupName", valid_566165
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566166 = query.getOrDefault("api-version")
  valid_566166 = validateParameter(valid_566166, JString, required = true,
                                 default = nil)
  if valid_566166 != nil:
    section.add "api-version", valid_566166
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566167: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566158;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_566167.validator(path, query, header, formData, body)
  let scheme = call_566167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566167.url(scheme.get, call_566167.host, call_566167.base,
                         call_566167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566167, url, valid)

proc call*(call_566168: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566158;
          snapshotId: string; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshotSlot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566169 = newJObject()
  var query_566170 = newJObject()
  add(path_566169, "snapshotId", newJString(snapshotId))
  add(path_566169, "slot", newJString(slot))
  add(query_566170, "api-version", newJString(apiVersion))
  add(path_566169, "name", newJString(name))
  add(path_566169, "subscriptionId", newJString(subscriptionId))
  add(path_566169, "resourceGroupName", newJString(resourceGroupName))
  result = call_566168.call(path_566169, query_566170, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshotSlot* = Call_WebAppsRecoverSiteConfigurationSnapshotSlot_566158(
    name: "webAppsRecoverSiteConfigurationSnapshotSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshotSlot_566159,
    base: "", url: url_WebAppsRecoverSiteConfigurationSnapshotSlot_566160,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsSlot_566171 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebSiteContainerLogsSlot_566173(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsSlot_566172(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566174 = path.getOrDefault("slot")
  valid_566174 = validateParameter(valid_566174, JString, required = true,
                                 default = nil)
  if valid_566174 != nil:
    section.add "slot", valid_566174
  var valid_566175 = path.getOrDefault("name")
  valid_566175 = validateParameter(valid_566175, JString, required = true,
                                 default = nil)
  if valid_566175 != nil:
    section.add "name", valid_566175
  var valid_566176 = path.getOrDefault("subscriptionId")
  valid_566176 = validateParameter(valid_566176, JString, required = true,
                                 default = nil)
  if valid_566176 != nil:
    section.add "subscriptionId", valid_566176
  var valid_566177 = path.getOrDefault("resourceGroupName")
  valid_566177 = validateParameter(valid_566177, JString, required = true,
                                 default = nil)
  if valid_566177 != nil:
    section.add "resourceGroupName", valid_566177
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566178 = query.getOrDefault("api-version")
  valid_566178 = validateParameter(valid_566178, JString, required = true,
                                 default = nil)
  if valid_566178 != nil:
    section.add "api-version", valid_566178
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566179: Call_WebAppsGetWebSiteContainerLogsSlot_566171;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_566179.validator(path, query, header, formData, body)
  let scheme = call_566179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566179.url(scheme.get, call_566179.host, call_566179.base,
                         call_566179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566179, url, valid)

proc call*(call_566180: Call_WebAppsGetWebSiteContainerLogsSlot_566171;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebSiteContainerLogsSlot
  ## Gets the last lines of docker logs for the given site
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566181 = newJObject()
  var query_566182 = newJObject()
  add(path_566181, "slot", newJString(slot))
  add(query_566182, "api-version", newJString(apiVersion))
  add(path_566181, "name", newJString(name))
  add(path_566181, "subscriptionId", newJString(subscriptionId))
  add(path_566181, "resourceGroupName", newJString(resourceGroupName))
  result = call_566180.call(path_566181, query_566182, nil, nil, nil)

var webAppsGetWebSiteContainerLogsSlot* = Call_WebAppsGetWebSiteContainerLogsSlot_566171(
    name: "webAppsGetWebSiteContainerLogsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogsSlot_566172, base: "",
    url: url_WebAppsGetWebSiteContainerLogsSlot_566173, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsZipSlot_566183 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebSiteContainerLogsZipSlot_566185(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsZipSlot_566184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566186 = path.getOrDefault("slot")
  valid_566186 = validateParameter(valid_566186, JString, required = true,
                                 default = nil)
  if valid_566186 != nil:
    section.add "slot", valid_566186
  var valid_566187 = path.getOrDefault("name")
  valid_566187 = validateParameter(valid_566187, JString, required = true,
                                 default = nil)
  if valid_566187 != nil:
    section.add "name", valid_566187
  var valid_566188 = path.getOrDefault("subscriptionId")
  valid_566188 = validateParameter(valid_566188, JString, required = true,
                                 default = nil)
  if valid_566188 != nil:
    section.add "subscriptionId", valid_566188
  var valid_566189 = path.getOrDefault("resourceGroupName")
  valid_566189 = validateParameter(valid_566189, JString, required = true,
                                 default = nil)
  if valid_566189 != nil:
    section.add "resourceGroupName", valid_566189
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566190 = query.getOrDefault("api-version")
  valid_566190 = validateParameter(valid_566190, JString, required = true,
                                 default = nil)
  if valid_566190 != nil:
    section.add "api-version", valid_566190
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566191: Call_WebAppsGetWebSiteContainerLogsZipSlot_566183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_566191.validator(path, query, header, formData, body)
  let scheme = call_566191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566191.url(scheme.get, call_566191.host, call_566191.base,
                         call_566191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566191, url, valid)

proc call*(call_566192: Call_WebAppsGetWebSiteContainerLogsZipSlot_566183;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebSiteContainerLogsZipSlot
  ## Gets the ZIP archived docker log files for the given site
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566193 = newJObject()
  var query_566194 = newJObject()
  add(path_566193, "slot", newJString(slot))
  add(query_566194, "api-version", newJString(apiVersion))
  add(path_566193, "name", newJString(name))
  add(path_566193, "subscriptionId", newJString(subscriptionId))
  add(path_566193, "resourceGroupName", newJString(resourceGroupName))
  result = call_566192.call(path_566193, query_566194, nil, nil, nil)

var webAppsGetWebSiteContainerLogsZipSlot* = Call_WebAppsGetWebSiteContainerLogsZipSlot_566183(
    name: "webAppsGetWebSiteContainerLogsZipSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    validator: validate_WebAppsGetWebSiteContainerLogsZipSlot_566184, base: "",
    url: url_WebAppsGetWebSiteContainerLogsZipSlot_566185, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobsSlot_566195 = ref object of OpenApiRestCall_563564
proc url_WebAppsListContinuousWebJobsSlot_566197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobsSlot_566196(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566198 = path.getOrDefault("slot")
  valid_566198 = validateParameter(valid_566198, JString, required = true,
                                 default = nil)
  if valid_566198 != nil:
    section.add "slot", valid_566198
  var valid_566199 = path.getOrDefault("name")
  valid_566199 = validateParameter(valid_566199, JString, required = true,
                                 default = nil)
  if valid_566199 != nil:
    section.add "name", valid_566199
  var valid_566200 = path.getOrDefault("subscriptionId")
  valid_566200 = validateParameter(valid_566200, JString, required = true,
                                 default = nil)
  if valid_566200 != nil:
    section.add "subscriptionId", valid_566200
  var valid_566201 = path.getOrDefault("resourceGroupName")
  valid_566201 = validateParameter(valid_566201, JString, required = true,
                                 default = nil)
  if valid_566201 != nil:
    section.add "resourceGroupName", valid_566201
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566202 = query.getOrDefault("api-version")
  valid_566202 = validateParameter(valid_566202, JString, required = true,
                                 default = nil)
  if valid_566202 != nil:
    section.add "api-version", valid_566202
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566203: Call_WebAppsListContinuousWebJobsSlot_566195;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_566203.validator(path, query, header, formData, body)
  let scheme = call_566203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566203.url(scheme.get, call_566203.host, call_566203.base,
                         call_566203.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566203, url, valid)

proc call*(call_566204: Call_WebAppsListContinuousWebJobsSlot_566195; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListContinuousWebJobsSlot
  ## List continuous web jobs for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566205 = newJObject()
  var query_566206 = newJObject()
  add(path_566205, "slot", newJString(slot))
  add(query_566206, "api-version", newJString(apiVersion))
  add(path_566205, "name", newJString(name))
  add(path_566205, "subscriptionId", newJString(subscriptionId))
  add(path_566205, "resourceGroupName", newJString(resourceGroupName))
  result = call_566204.call(path_566205, query_566206, nil, nil, nil)

var webAppsListContinuousWebJobsSlot* = Call_WebAppsListContinuousWebJobsSlot_566195(
    name: "webAppsListContinuousWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobsSlot_566196, base: "",
    url: url_WebAppsListContinuousWebJobsSlot_566197, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJobSlot_566207 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetContinuousWebJobSlot_566209(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJobSlot_566208(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566210 = path.getOrDefault("slot")
  valid_566210 = validateParameter(valid_566210, JString, required = true,
                                 default = nil)
  if valid_566210 != nil:
    section.add "slot", valid_566210
  var valid_566211 = path.getOrDefault("name")
  valid_566211 = validateParameter(valid_566211, JString, required = true,
                                 default = nil)
  if valid_566211 != nil:
    section.add "name", valid_566211
  var valid_566212 = path.getOrDefault("subscriptionId")
  valid_566212 = validateParameter(valid_566212, JString, required = true,
                                 default = nil)
  if valid_566212 != nil:
    section.add "subscriptionId", valid_566212
  var valid_566213 = path.getOrDefault("webJobName")
  valid_566213 = validateParameter(valid_566213, JString, required = true,
                                 default = nil)
  if valid_566213 != nil:
    section.add "webJobName", valid_566213
  var valid_566214 = path.getOrDefault("resourceGroupName")
  valid_566214 = validateParameter(valid_566214, JString, required = true,
                                 default = nil)
  if valid_566214 != nil:
    section.add "resourceGroupName", valid_566214
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566215 = query.getOrDefault("api-version")
  valid_566215 = validateParameter(valid_566215, JString, required = true,
                                 default = nil)
  if valid_566215 != nil:
    section.add "api-version", valid_566215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566216: Call_WebAppsGetContinuousWebJobSlot_566207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566216.validator(path, query, header, formData, body)
  let scheme = call_566216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566216.url(scheme.get, call_566216.host, call_566216.base,
                         call_566216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566216, url, valid)

proc call*(call_566217: Call_WebAppsGetContinuousWebJobSlot_566207; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetContinuousWebJobSlot
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566218 = newJObject()
  var query_566219 = newJObject()
  add(path_566218, "slot", newJString(slot))
  add(query_566219, "api-version", newJString(apiVersion))
  add(path_566218, "name", newJString(name))
  add(path_566218, "subscriptionId", newJString(subscriptionId))
  add(path_566218, "webJobName", newJString(webJobName))
  add(path_566218, "resourceGroupName", newJString(resourceGroupName))
  result = call_566217.call(path_566218, query_566219, nil, nil, nil)

var webAppsGetContinuousWebJobSlot* = Call_WebAppsGetContinuousWebJobSlot_566207(
    name: "webAppsGetContinuousWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJobSlot_566208, base: "",
    url: url_WebAppsGetContinuousWebJobSlot_566209, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJobSlot_566220 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteContinuousWebJobSlot_566222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJobSlot_566221(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566223 = path.getOrDefault("slot")
  valid_566223 = validateParameter(valid_566223, JString, required = true,
                                 default = nil)
  if valid_566223 != nil:
    section.add "slot", valid_566223
  var valid_566224 = path.getOrDefault("name")
  valid_566224 = validateParameter(valid_566224, JString, required = true,
                                 default = nil)
  if valid_566224 != nil:
    section.add "name", valid_566224
  var valid_566225 = path.getOrDefault("subscriptionId")
  valid_566225 = validateParameter(valid_566225, JString, required = true,
                                 default = nil)
  if valid_566225 != nil:
    section.add "subscriptionId", valid_566225
  var valid_566226 = path.getOrDefault("webJobName")
  valid_566226 = validateParameter(valid_566226, JString, required = true,
                                 default = nil)
  if valid_566226 != nil:
    section.add "webJobName", valid_566226
  var valid_566227 = path.getOrDefault("resourceGroupName")
  valid_566227 = validateParameter(valid_566227, JString, required = true,
                                 default = nil)
  if valid_566227 != nil:
    section.add "resourceGroupName", valid_566227
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566228 = query.getOrDefault("api-version")
  valid_566228 = validateParameter(valid_566228, JString, required = true,
                                 default = nil)
  if valid_566228 != nil:
    section.add "api-version", valid_566228
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566229: Call_WebAppsDeleteContinuousWebJobSlot_566220;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566229.validator(path, query, header, formData, body)
  let scheme = call_566229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566229.url(scheme.get, call_566229.host, call_566229.base,
                         call_566229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566229, url, valid)

proc call*(call_566230: Call_WebAppsDeleteContinuousWebJobSlot_566220;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteContinuousWebJobSlot
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566231 = newJObject()
  var query_566232 = newJObject()
  add(path_566231, "slot", newJString(slot))
  add(query_566232, "api-version", newJString(apiVersion))
  add(path_566231, "name", newJString(name))
  add(path_566231, "subscriptionId", newJString(subscriptionId))
  add(path_566231, "webJobName", newJString(webJobName))
  add(path_566231, "resourceGroupName", newJString(resourceGroupName))
  result = call_566230.call(path_566231, query_566232, nil, nil, nil)

var webAppsDeleteContinuousWebJobSlot* = Call_WebAppsDeleteContinuousWebJobSlot_566220(
    name: "webAppsDeleteContinuousWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJobSlot_566221, base: "",
    url: url_WebAppsDeleteContinuousWebJobSlot_566222, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJobSlot_566233 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartContinuousWebJobSlot_566235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJobSlot_566234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566236 = path.getOrDefault("slot")
  valid_566236 = validateParameter(valid_566236, JString, required = true,
                                 default = nil)
  if valid_566236 != nil:
    section.add "slot", valid_566236
  var valid_566237 = path.getOrDefault("name")
  valid_566237 = validateParameter(valid_566237, JString, required = true,
                                 default = nil)
  if valid_566237 != nil:
    section.add "name", valid_566237
  var valid_566238 = path.getOrDefault("subscriptionId")
  valid_566238 = validateParameter(valid_566238, JString, required = true,
                                 default = nil)
  if valid_566238 != nil:
    section.add "subscriptionId", valid_566238
  var valid_566239 = path.getOrDefault("webJobName")
  valid_566239 = validateParameter(valid_566239, JString, required = true,
                                 default = nil)
  if valid_566239 != nil:
    section.add "webJobName", valid_566239
  var valid_566240 = path.getOrDefault("resourceGroupName")
  valid_566240 = validateParameter(valid_566240, JString, required = true,
                                 default = nil)
  if valid_566240 != nil:
    section.add "resourceGroupName", valid_566240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566241 = query.getOrDefault("api-version")
  valid_566241 = validateParameter(valid_566241, JString, required = true,
                                 default = nil)
  if valid_566241 != nil:
    section.add "api-version", valid_566241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566242: Call_WebAppsStartContinuousWebJobSlot_566233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_566242.validator(path, query, header, formData, body)
  let scheme = call_566242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566242.url(scheme.get, call_566242.host, call_566242.base,
                         call_566242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566242, url, valid)

proc call*(call_566243: Call_WebAppsStartContinuousWebJobSlot_566233; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStartContinuousWebJobSlot
  ## Start a continuous web job for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566244 = newJObject()
  var query_566245 = newJObject()
  add(path_566244, "slot", newJString(slot))
  add(query_566245, "api-version", newJString(apiVersion))
  add(path_566244, "name", newJString(name))
  add(path_566244, "subscriptionId", newJString(subscriptionId))
  add(path_566244, "webJobName", newJString(webJobName))
  add(path_566244, "resourceGroupName", newJString(resourceGroupName))
  result = call_566243.call(path_566244, query_566245, nil, nil, nil)

var webAppsStartContinuousWebJobSlot* = Call_WebAppsStartContinuousWebJobSlot_566233(
    name: "webAppsStartContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJobSlot_566234, base: "",
    url: url_WebAppsStartContinuousWebJobSlot_566235, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJobSlot_566246 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopContinuousWebJobSlot_566248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJobSlot_566247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566249 = path.getOrDefault("slot")
  valid_566249 = validateParameter(valid_566249, JString, required = true,
                                 default = nil)
  if valid_566249 != nil:
    section.add "slot", valid_566249
  var valid_566250 = path.getOrDefault("name")
  valid_566250 = validateParameter(valid_566250, JString, required = true,
                                 default = nil)
  if valid_566250 != nil:
    section.add "name", valid_566250
  var valid_566251 = path.getOrDefault("subscriptionId")
  valid_566251 = validateParameter(valid_566251, JString, required = true,
                                 default = nil)
  if valid_566251 != nil:
    section.add "subscriptionId", valid_566251
  var valid_566252 = path.getOrDefault("webJobName")
  valid_566252 = validateParameter(valid_566252, JString, required = true,
                                 default = nil)
  if valid_566252 != nil:
    section.add "webJobName", valid_566252
  var valid_566253 = path.getOrDefault("resourceGroupName")
  valid_566253 = validateParameter(valid_566253, JString, required = true,
                                 default = nil)
  if valid_566253 != nil:
    section.add "resourceGroupName", valid_566253
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566254 = query.getOrDefault("api-version")
  valid_566254 = validateParameter(valid_566254, JString, required = true,
                                 default = nil)
  if valid_566254 != nil:
    section.add "api-version", valid_566254
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566255: Call_WebAppsStopContinuousWebJobSlot_566246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_566255.validator(path, query, header, formData, body)
  let scheme = call_566255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566255.url(scheme.get, call_566255.host, call_566255.base,
                         call_566255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566255, url, valid)

proc call*(call_566256: Call_WebAppsStopContinuousWebJobSlot_566246; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsStopContinuousWebJobSlot
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566257 = newJObject()
  var query_566258 = newJObject()
  add(path_566257, "slot", newJString(slot))
  add(query_566258, "api-version", newJString(apiVersion))
  add(path_566257, "name", newJString(name))
  add(path_566257, "subscriptionId", newJString(subscriptionId))
  add(path_566257, "webJobName", newJString(webJobName))
  add(path_566257, "resourceGroupName", newJString(resourceGroupName))
  result = call_566256.call(path_566257, query_566258, nil, nil, nil)

var webAppsStopContinuousWebJobSlot* = Call_WebAppsStopContinuousWebJobSlot_566246(
    name: "webAppsStopContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJobSlot_566247, base: "",
    url: url_WebAppsStopContinuousWebJobSlot_566248, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentsSlot_566259 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeploymentsSlot_566261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentsSlot_566260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566262 = path.getOrDefault("slot")
  valid_566262 = validateParameter(valid_566262, JString, required = true,
                                 default = nil)
  if valid_566262 != nil:
    section.add "slot", valid_566262
  var valid_566263 = path.getOrDefault("name")
  valid_566263 = validateParameter(valid_566263, JString, required = true,
                                 default = nil)
  if valid_566263 != nil:
    section.add "name", valid_566263
  var valid_566264 = path.getOrDefault("subscriptionId")
  valid_566264 = validateParameter(valid_566264, JString, required = true,
                                 default = nil)
  if valid_566264 != nil:
    section.add "subscriptionId", valid_566264
  var valid_566265 = path.getOrDefault("resourceGroupName")
  valid_566265 = validateParameter(valid_566265, JString, required = true,
                                 default = nil)
  if valid_566265 != nil:
    section.add "resourceGroupName", valid_566265
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566266 = query.getOrDefault("api-version")
  valid_566266 = validateParameter(valid_566266, JString, required = true,
                                 default = nil)
  if valid_566266 != nil:
    section.add "api-version", valid_566266
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566267: Call_WebAppsListDeploymentsSlot_566259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_566267.validator(path, query, header, formData, body)
  let scheme = call_566267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566267.url(scheme.get, call_566267.host, call_566267.base,
                         call_566267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566267, url, valid)

proc call*(call_566268: Call_WebAppsListDeploymentsSlot_566259; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDeploymentsSlot
  ## List deployments for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566269 = newJObject()
  var query_566270 = newJObject()
  add(path_566269, "slot", newJString(slot))
  add(query_566270, "api-version", newJString(apiVersion))
  add(path_566269, "name", newJString(name))
  add(path_566269, "subscriptionId", newJString(subscriptionId))
  add(path_566269, "resourceGroupName", newJString(resourceGroupName))
  result = call_566268.call(path_566269, query_566270, nil, nil, nil)

var webAppsListDeploymentsSlot* = Call_WebAppsListDeploymentsSlot_566259(
    name: "webAppsListDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_WebAppsListDeploymentsSlot_566260, base: "",
    url: url_WebAppsListDeploymentsSlot_566261, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeploymentSlot_566284 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateDeploymentSlot_566286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeploymentSlot_566285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566287 = path.getOrDefault("slot")
  valid_566287 = validateParameter(valid_566287, JString, required = true,
                                 default = nil)
  if valid_566287 != nil:
    section.add "slot", valid_566287
  var valid_566288 = path.getOrDefault("id")
  valid_566288 = validateParameter(valid_566288, JString, required = true,
                                 default = nil)
  if valid_566288 != nil:
    section.add "id", valid_566288
  var valid_566289 = path.getOrDefault("name")
  valid_566289 = validateParameter(valid_566289, JString, required = true,
                                 default = nil)
  if valid_566289 != nil:
    section.add "name", valid_566289
  var valid_566290 = path.getOrDefault("subscriptionId")
  valid_566290 = validateParameter(valid_566290, JString, required = true,
                                 default = nil)
  if valid_566290 != nil:
    section.add "subscriptionId", valid_566290
  var valid_566291 = path.getOrDefault("resourceGroupName")
  valid_566291 = validateParameter(valid_566291, JString, required = true,
                                 default = nil)
  if valid_566291 != nil:
    section.add "resourceGroupName", valid_566291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566292 = query.getOrDefault("api-version")
  valid_566292 = validateParameter(valid_566292, JString, required = true,
                                 default = nil)
  if valid_566292 != nil:
    section.add "api-version", valid_566292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566294: Call_WebAppsCreateDeploymentSlot_566284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_566294.validator(path, query, header, formData, body)
  let scheme = call_566294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566294.url(scheme.get, call_566294.host, call_566294.base,
                         call_566294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566294, url, valid)

proc call*(call_566295: Call_WebAppsCreateDeploymentSlot_566284; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          deployment: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateDeploymentSlot
  ## Create a deployment for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deployment: JObject (required)
  ##             : Deployment details.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566296 = newJObject()
  var query_566297 = newJObject()
  var body_566298 = newJObject()
  add(path_566296, "slot", newJString(slot))
  add(query_566297, "api-version", newJString(apiVersion))
  add(path_566296, "id", newJString(id))
  add(path_566296, "name", newJString(name))
  add(path_566296, "subscriptionId", newJString(subscriptionId))
  if deployment != nil:
    body_566298 = deployment
  add(path_566296, "resourceGroupName", newJString(resourceGroupName))
  result = call_566295.call(path_566296, query_566297, nil, nil, body_566298)

var webAppsCreateDeploymentSlot* = Call_WebAppsCreateDeploymentSlot_566284(
    name: "webAppsCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsCreateDeploymentSlot_566285, base: "",
    url: url_WebAppsCreateDeploymentSlot_566286, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeploymentSlot_566271 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDeploymentSlot_566273(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeploymentSlot_566272(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566274 = path.getOrDefault("slot")
  valid_566274 = validateParameter(valid_566274, JString, required = true,
                                 default = nil)
  if valid_566274 != nil:
    section.add "slot", valid_566274
  var valid_566275 = path.getOrDefault("id")
  valid_566275 = validateParameter(valid_566275, JString, required = true,
                                 default = nil)
  if valid_566275 != nil:
    section.add "id", valid_566275
  var valid_566276 = path.getOrDefault("name")
  valid_566276 = validateParameter(valid_566276, JString, required = true,
                                 default = nil)
  if valid_566276 != nil:
    section.add "name", valid_566276
  var valid_566277 = path.getOrDefault("subscriptionId")
  valid_566277 = validateParameter(valid_566277, JString, required = true,
                                 default = nil)
  if valid_566277 != nil:
    section.add "subscriptionId", valid_566277
  var valid_566278 = path.getOrDefault("resourceGroupName")
  valid_566278 = validateParameter(valid_566278, JString, required = true,
                                 default = nil)
  if valid_566278 != nil:
    section.add "resourceGroupName", valid_566278
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566279 = query.getOrDefault("api-version")
  valid_566279 = validateParameter(valid_566279, JString, required = true,
                                 default = nil)
  if valid_566279 != nil:
    section.add "api-version", valid_566279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566280: Call_WebAppsGetDeploymentSlot_566271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566280.validator(path, query, header, formData, body)
  let scheme = call_566280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566280.url(scheme.get, call_566280.host, call_566280.base,
                         call_566280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566280, url, valid)

proc call*(call_566281: Call_WebAppsGetDeploymentSlot_566271; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetDeploymentSlot
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566282 = newJObject()
  var query_566283 = newJObject()
  add(path_566282, "slot", newJString(slot))
  add(query_566283, "api-version", newJString(apiVersion))
  add(path_566282, "id", newJString(id))
  add(path_566282, "name", newJString(name))
  add(path_566282, "subscriptionId", newJString(subscriptionId))
  add(path_566282, "resourceGroupName", newJString(resourceGroupName))
  result = call_566281.call(path_566282, query_566283, nil, nil, nil)

var webAppsGetDeploymentSlot* = Call_WebAppsGetDeploymentSlot_566271(
    name: "webAppsGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsGetDeploymentSlot_566272, base: "",
    url: url_WebAppsGetDeploymentSlot_566273, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeploymentSlot_566299 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDeploymentSlot_566301(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeploymentSlot_566300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   id: JString (required)
  ##     : Deployment ID.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566302 = path.getOrDefault("slot")
  valid_566302 = validateParameter(valid_566302, JString, required = true,
                                 default = nil)
  if valid_566302 != nil:
    section.add "slot", valid_566302
  var valid_566303 = path.getOrDefault("id")
  valid_566303 = validateParameter(valid_566303, JString, required = true,
                                 default = nil)
  if valid_566303 != nil:
    section.add "id", valid_566303
  var valid_566304 = path.getOrDefault("name")
  valid_566304 = validateParameter(valid_566304, JString, required = true,
                                 default = nil)
  if valid_566304 != nil:
    section.add "name", valid_566304
  var valid_566305 = path.getOrDefault("subscriptionId")
  valid_566305 = validateParameter(valid_566305, JString, required = true,
                                 default = nil)
  if valid_566305 != nil:
    section.add "subscriptionId", valid_566305
  var valid_566306 = path.getOrDefault("resourceGroupName")
  valid_566306 = validateParameter(valid_566306, JString, required = true,
                                 default = nil)
  if valid_566306 != nil:
    section.add "resourceGroupName", valid_566306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566307 = query.getOrDefault("api-version")
  valid_566307 = validateParameter(valid_566307, JString, required = true,
                                 default = nil)
  if valid_566307 != nil:
    section.add "api-version", valid_566307
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566308: Call_WebAppsDeleteDeploymentSlot_566299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_566308.validator(path, query, header, formData, body)
  let scheme = call_566308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566308.url(scheme.get, call_566308.host, call_566308.base,
                         call_566308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566308, url, valid)

proc call*(call_566309: Call_WebAppsDeleteDeploymentSlot_566299; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteDeploymentSlot
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : Deployment ID.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566310 = newJObject()
  var query_566311 = newJObject()
  add(path_566310, "slot", newJString(slot))
  add(query_566311, "api-version", newJString(apiVersion))
  add(path_566310, "id", newJString(id))
  add(path_566310, "name", newJString(name))
  add(path_566310, "subscriptionId", newJString(subscriptionId))
  add(path_566310, "resourceGroupName", newJString(resourceGroupName))
  result = call_566309.call(path_566310, query_566311, nil, nil, nil)

var webAppsDeleteDeploymentSlot* = Call_WebAppsDeleteDeploymentSlot_566299(
    name: "webAppsDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsDeleteDeploymentSlot_566300, base: "",
    url: url_WebAppsDeleteDeploymentSlot_566301, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLogSlot_566312 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDeploymentLogSlot_566314(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLogSlot_566313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566315 = path.getOrDefault("slot")
  valid_566315 = validateParameter(valid_566315, JString, required = true,
                                 default = nil)
  if valid_566315 != nil:
    section.add "slot", valid_566315
  var valid_566316 = path.getOrDefault("id")
  valid_566316 = validateParameter(valid_566316, JString, required = true,
                                 default = nil)
  if valid_566316 != nil:
    section.add "id", valid_566316
  var valid_566317 = path.getOrDefault("name")
  valid_566317 = validateParameter(valid_566317, JString, required = true,
                                 default = nil)
  if valid_566317 != nil:
    section.add "name", valid_566317
  var valid_566318 = path.getOrDefault("subscriptionId")
  valid_566318 = validateParameter(valid_566318, JString, required = true,
                                 default = nil)
  if valid_566318 != nil:
    section.add "subscriptionId", valid_566318
  var valid_566319 = path.getOrDefault("resourceGroupName")
  valid_566319 = validateParameter(valid_566319, JString, required = true,
                                 default = nil)
  if valid_566319 != nil:
    section.add "resourceGroupName", valid_566319
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566320 = query.getOrDefault("api-version")
  valid_566320 = validateParameter(valid_566320, JString, required = true,
                                 default = nil)
  if valid_566320 != nil:
    section.add "api-version", valid_566320
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566321: Call_WebAppsListDeploymentLogSlot_566312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_566321.validator(path, query, header, formData, body)
  let scheme = call_566321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566321.url(scheme.get, call_566321.host, call_566321.base,
                         call_566321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566321, url, valid)

proc call*(call_566322: Call_WebAppsListDeploymentLogSlot_566312; slot: string;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDeploymentLogSlot
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566323 = newJObject()
  var query_566324 = newJObject()
  add(path_566323, "slot", newJString(slot))
  add(query_566324, "api-version", newJString(apiVersion))
  add(path_566323, "id", newJString(id))
  add(path_566323, "name", newJString(name))
  add(path_566323, "subscriptionId", newJString(subscriptionId))
  add(path_566323, "resourceGroupName", newJString(resourceGroupName))
  result = call_566322.call(path_566323, query_566324, nil, nil, nil)

var webAppsListDeploymentLogSlot* = Call_WebAppsListDeploymentLogSlot_566312(
    name: "webAppsListDeploymentLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLogSlot_566313, base: "",
    url: url_WebAppsListDeploymentLogSlot_566314, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiersSlot_566325 = ref object of OpenApiRestCall_563564
proc url_WebAppsListDomainOwnershipIdentifiersSlot_566327(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiersSlot_566326(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566328 = path.getOrDefault("slot")
  valid_566328 = validateParameter(valid_566328, JString, required = true,
                                 default = nil)
  if valid_566328 != nil:
    section.add "slot", valid_566328
  var valid_566329 = path.getOrDefault("name")
  valid_566329 = validateParameter(valid_566329, JString, required = true,
                                 default = nil)
  if valid_566329 != nil:
    section.add "name", valid_566329
  var valid_566330 = path.getOrDefault("subscriptionId")
  valid_566330 = validateParameter(valid_566330, JString, required = true,
                                 default = nil)
  if valid_566330 != nil:
    section.add "subscriptionId", valid_566330
  var valid_566331 = path.getOrDefault("resourceGroupName")
  valid_566331 = validateParameter(valid_566331, JString, required = true,
                                 default = nil)
  if valid_566331 != nil:
    section.add "resourceGroupName", valid_566331
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566332 = query.getOrDefault("api-version")
  valid_566332 = validateParameter(valid_566332, JString, required = true,
                                 default = nil)
  if valid_566332 != nil:
    section.add "api-version", valid_566332
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566333: Call_WebAppsListDomainOwnershipIdentifiersSlot_566325;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_566333.validator(path, query, header, formData, body)
  let scheme = call_566333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566333.url(scheme.get, call_566333.host, call_566333.base,
                         call_566333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566333, url, valid)

proc call*(call_566334: Call_WebAppsListDomainOwnershipIdentifiersSlot_566325;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiersSlot
  ## Lists ownership identifiers for domain associated with web app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566335 = newJObject()
  var query_566336 = newJObject()
  add(path_566335, "slot", newJString(slot))
  add(query_566336, "api-version", newJString(apiVersion))
  add(path_566335, "name", newJString(name))
  add(path_566335, "subscriptionId", newJString(subscriptionId))
  add(path_566335, "resourceGroupName", newJString(resourceGroupName))
  result = call_566334.call(path_566335, query_566336, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiersSlot* = Call_WebAppsListDomainOwnershipIdentifiersSlot_566325(
    name: "webAppsListDomainOwnershipIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiersSlot_566326,
    base: "", url: url_WebAppsListDomainOwnershipIdentifiersSlot_566327,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566350 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566352(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566351(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566353 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566353 = validateParameter(valid_566353, JString, required = true,
                                 default = nil)
  if valid_566353 != nil:
    section.add "domainOwnershipIdentifierName", valid_566353
  var valid_566354 = path.getOrDefault("slot")
  valid_566354 = validateParameter(valid_566354, JString, required = true,
                                 default = nil)
  if valid_566354 != nil:
    section.add "slot", valid_566354
  var valid_566355 = path.getOrDefault("name")
  valid_566355 = validateParameter(valid_566355, JString, required = true,
                                 default = nil)
  if valid_566355 != nil:
    section.add "name", valid_566355
  var valid_566356 = path.getOrDefault("subscriptionId")
  valid_566356 = validateParameter(valid_566356, JString, required = true,
                                 default = nil)
  if valid_566356 != nil:
    section.add "subscriptionId", valid_566356
  var valid_566357 = path.getOrDefault("resourceGroupName")
  valid_566357 = validateParameter(valid_566357, JString, required = true,
                                 default = nil)
  if valid_566357 != nil:
    section.add "resourceGroupName", valid_566357
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566358 = query.getOrDefault("api-version")
  valid_566358 = validateParameter(valid_566358, JString, required = true,
                                 default = nil)
  if valid_566358 != nil:
    section.add "api-version", valid_566358
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566360: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566350;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_566360.validator(path, query, header, formData, body)
  let scheme = call_566360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566360.url(scheme.get, call_566360.host, call_566360.base,
                         call_566360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566360, url, valid)

proc call*(call_566361: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566350;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566362 = newJObject()
  var query_566363 = newJObject()
  var body_566364 = newJObject()
  add(path_566362, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566362, "slot", newJString(slot))
  add(query_566363, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_566364 = domainOwnershipIdentifier
  add(path_566362, "name", newJString(name))
  add(path_566362, "subscriptionId", newJString(subscriptionId))
  add(path_566362, "resourceGroupName", newJString(resourceGroupName))
  result = call_566361.call(path_566362, query_566363, nil, nil, body_566364)

var webAppsCreateOrUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566350(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566351,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_566352,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifierSlot_566337 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetDomainOwnershipIdentifierSlot_566339(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifierSlot_566338(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566340 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566340 = validateParameter(valid_566340, JString, required = true,
                                 default = nil)
  if valid_566340 != nil:
    section.add "domainOwnershipIdentifierName", valid_566340
  var valid_566341 = path.getOrDefault("slot")
  valid_566341 = validateParameter(valid_566341, JString, required = true,
                                 default = nil)
  if valid_566341 != nil:
    section.add "slot", valid_566341
  var valid_566342 = path.getOrDefault("name")
  valid_566342 = validateParameter(valid_566342, JString, required = true,
                                 default = nil)
  if valid_566342 != nil:
    section.add "name", valid_566342
  var valid_566343 = path.getOrDefault("subscriptionId")
  valid_566343 = validateParameter(valid_566343, JString, required = true,
                                 default = nil)
  if valid_566343 != nil:
    section.add "subscriptionId", valid_566343
  var valid_566344 = path.getOrDefault("resourceGroupName")
  valid_566344 = validateParameter(valid_566344, JString, required = true,
                                 default = nil)
  if valid_566344 != nil:
    section.add "resourceGroupName", valid_566344
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566345 = query.getOrDefault("api-version")
  valid_566345 = validateParameter(valid_566345, JString, required = true,
                                 default = nil)
  if valid_566345 != nil:
    section.add "api-version", valid_566345
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566346: Call_WebAppsGetDomainOwnershipIdentifierSlot_566337;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_566346.validator(path, query, header, formData, body)
  let scheme = call_566346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566346.url(scheme.get, call_566346.host, call_566346.base,
                         call_566346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566346, url, valid)

proc call*(call_566347: Call_WebAppsGetDomainOwnershipIdentifierSlot_566337;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifierSlot
  ## Get domain ownership identifier for web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566348 = newJObject()
  var query_566349 = newJObject()
  add(path_566348, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566348, "slot", newJString(slot))
  add(query_566349, "api-version", newJString(apiVersion))
  add(path_566348, "name", newJString(name))
  add(path_566348, "subscriptionId", newJString(subscriptionId))
  add(path_566348, "resourceGroupName", newJString(resourceGroupName))
  result = call_566347.call(path_566348, query_566349, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifierSlot* = Call_WebAppsGetDomainOwnershipIdentifierSlot_566337(
    name: "webAppsGetDomainOwnershipIdentifierSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifierSlot_566338, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifierSlot_566339,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566378 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateDomainOwnershipIdentifierSlot_566380(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifierSlot_566379(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566381 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566381 = validateParameter(valid_566381, JString, required = true,
                                 default = nil)
  if valid_566381 != nil:
    section.add "domainOwnershipIdentifierName", valid_566381
  var valid_566382 = path.getOrDefault("slot")
  valid_566382 = validateParameter(valid_566382, JString, required = true,
                                 default = nil)
  if valid_566382 != nil:
    section.add "slot", valid_566382
  var valid_566383 = path.getOrDefault("name")
  valid_566383 = validateParameter(valid_566383, JString, required = true,
                                 default = nil)
  if valid_566383 != nil:
    section.add "name", valid_566383
  var valid_566384 = path.getOrDefault("subscriptionId")
  valid_566384 = validateParameter(valid_566384, JString, required = true,
                                 default = nil)
  if valid_566384 != nil:
    section.add "subscriptionId", valid_566384
  var valid_566385 = path.getOrDefault("resourceGroupName")
  valid_566385 = validateParameter(valid_566385, JString, required = true,
                                 default = nil)
  if valid_566385 != nil:
    section.add "resourceGroupName", valid_566385
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566386 = query.getOrDefault("api-version")
  valid_566386 = validateParameter(valid_566386, JString, required = true,
                                 default = nil)
  if valid_566386 != nil:
    section.add "api-version", valid_566386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566388: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566378;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_566388.validator(path, query, header, formData, body)
  let scheme = call_566388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566388.url(scheme.get, call_566388.host, call_566388.base,
                         call_566388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566388, url, valid)

proc call*(call_566389: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566378;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          domainOwnershipIdentifier: JsonNode; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566390 = newJObject()
  var query_566391 = newJObject()
  var body_566392 = newJObject()
  add(path_566390, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566390, "slot", newJString(slot))
  add(query_566391, "api-version", newJString(apiVersion))
  if domainOwnershipIdentifier != nil:
    body_566392 = domainOwnershipIdentifier
  add(path_566390, "name", newJString(name))
  add(path_566390, "subscriptionId", newJString(subscriptionId))
  add(path_566390, "resourceGroupName", newJString(resourceGroupName))
  result = call_566389.call(path_566390, query_566391, nil, nil, body_566392)

var webAppsUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsUpdateDomainOwnershipIdentifierSlot_566378(
    name: "webAppsUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifierSlot_566379,
    base: "", url: url_WebAppsUpdateDomainOwnershipIdentifierSlot_566380,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566365 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteDomainOwnershipIdentifierSlot_566367(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifierSlot_566366(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `domainOwnershipIdentifierName` field"
  var valid_566368 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_566368 = validateParameter(valid_566368, JString, required = true,
                                 default = nil)
  if valid_566368 != nil:
    section.add "domainOwnershipIdentifierName", valid_566368
  var valid_566369 = path.getOrDefault("slot")
  valid_566369 = validateParameter(valid_566369, JString, required = true,
                                 default = nil)
  if valid_566369 != nil:
    section.add "slot", valid_566369
  var valid_566370 = path.getOrDefault("name")
  valid_566370 = validateParameter(valid_566370, JString, required = true,
                                 default = nil)
  if valid_566370 != nil:
    section.add "name", valid_566370
  var valid_566371 = path.getOrDefault("subscriptionId")
  valid_566371 = validateParameter(valid_566371, JString, required = true,
                                 default = nil)
  if valid_566371 != nil:
    section.add "subscriptionId", valid_566371
  var valid_566372 = path.getOrDefault("resourceGroupName")
  valid_566372 = validateParameter(valid_566372, JString, required = true,
                                 default = nil)
  if valid_566372 != nil:
    section.add "resourceGroupName", valid_566372
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566373 = query.getOrDefault("api-version")
  valid_566373 = validateParameter(valid_566373, JString, required = true,
                                 default = nil)
  if valid_566373 != nil:
    section.add "api-version", valid_566373
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566374: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566365;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_566374.validator(path, query, header, formData, body)
  let scheme = call_566374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566374.url(scheme.get, call_566374.host, call_566374.base,
                         call_566374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566374, url, valid)

proc call*(call_566375: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566365;
          domainOwnershipIdentifierName: string; slot: string; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifierSlot
  ## Deletes a domain ownership identifier for a web app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566376 = newJObject()
  var query_566377 = newJObject()
  add(path_566376, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_566376, "slot", newJString(slot))
  add(query_566377, "api-version", newJString(apiVersion))
  add(path_566376, "name", newJString(name))
  add(path_566376, "subscriptionId", newJString(subscriptionId))
  add(path_566376, "resourceGroupName", newJString(resourceGroupName))
  result = call_566375.call(path_566376, query_566377, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifierSlot* = Call_WebAppsDeleteDomainOwnershipIdentifierSlot_566365(
    name: "webAppsDeleteDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifierSlot_566366,
    base: "", url: url_WebAppsDeleteDomainOwnershipIdentifierSlot_566367,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperationSlot_566405 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateMSDeployOperationSlot_566407(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperationSlot_566406(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566408 = path.getOrDefault("slot")
  valid_566408 = validateParameter(valid_566408, JString, required = true,
                                 default = nil)
  if valid_566408 != nil:
    section.add "slot", valid_566408
  var valid_566409 = path.getOrDefault("name")
  valid_566409 = validateParameter(valid_566409, JString, required = true,
                                 default = nil)
  if valid_566409 != nil:
    section.add "name", valid_566409
  var valid_566410 = path.getOrDefault("subscriptionId")
  valid_566410 = validateParameter(valid_566410, JString, required = true,
                                 default = nil)
  if valid_566410 != nil:
    section.add "subscriptionId", valid_566410
  var valid_566411 = path.getOrDefault("resourceGroupName")
  valid_566411 = validateParameter(valid_566411, JString, required = true,
                                 default = nil)
  if valid_566411 != nil:
    section.add "resourceGroupName", valid_566411
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566412 = query.getOrDefault("api-version")
  valid_566412 = validateParameter(valid_566412, JString, required = true,
                                 default = nil)
  if valid_566412 != nil:
    section.add "api-version", valid_566412
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566414: Call_WebAppsCreateMSDeployOperationSlot_566405;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_566414.validator(path, query, header, formData, body)
  let scheme = call_566414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566414.url(scheme.get, call_566414.host, call_566414.base,
                         call_566414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566414, url, valid)

proc call*(call_566415: Call_WebAppsCreateMSDeployOperationSlot_566405;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsCreateMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566416 = newJObject()
  var query_566417 = newJObject()
  var body_566418 = newJObject()
  add(path_566416, "slot", newJString(slot))
  add(query_566417, "api-version", newJString(apiVersion))
  add(path_566416, "name", newJString(name))
  add(path_566416, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_566418 = MSDeploy
  add(path_566416, "resourceGroupName", newJString(resourceGroupName))
  result = call_566415.call(path_566416, query_566417, nil, nil, body_566418)

var webAppsCreateMSDeployOperationSlot* = Call_WebAppsCreateMSDeployOperationSlot_566405(
    name: "webAppsCreateMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperationSlot_566406, base: "",
    url: url_WebAppsCreateMSDeployOperationSlot_566407, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatusSlot_566393 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployStatusSlot_566395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatusSlot_566394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566396 = path.getOrDefault("slot")
  valid_566396 = validateParameter(valid_566396, JString, required = true,
                                 default = nil)
  if valid_566396 != nil:
    section.add "slot", valid_566396
  var valid_566397 = path.getOrDefault("name")
  valid_566397 = validateParameter(valid_566397, JString, required = true,
                                 default = nil)
  if valid_566397 != nil:
    section.add "name", valid_566397
  var valid_566398 = path.getOrDefault("subscriptionId")
  valid_566398 = validateParameter(valid_566398, JString, required = true,
                                 default = nil)
  if valid_566398 != nil:
    section.add "subscriptionId", valid_566398
  var valid_566399 = path.getOrDefault("resourceGroupName")
  valid_566399 = validateParameter(valid_566399, JString, required = true,
                                 default = nil)
  if valid_566399 != nil:
    section.add "resourceGroupName", valid_566399
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566400 = query.getOrDefault("api-version")
  valid_566400 = validateParameter(valid_566400, JString, required = true,
                                 default = nil)
  if valid_566400 != nil:
    section.add "api-version", valid_566400
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566401: Call_WebAppsGetMSDeployStatusSlot_566393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_566401.validator(path, query, header, formData, body)
  let scheme = call_566401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566401.url(scheme.get, call_566401.host, call_566401.base,
                         call_566401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566401, url, valid)

proc call*(call_566402: Call_WebAppsGetMSDeployStatusSlot_566393; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566403 = newJObject()
  var query_566404 = newJObject()
  add(path_566403, "slot", newJString(slot))
  add(query_566404, "api-version", newJString(apiVersion))
  add(path_566403, "name", newJString(name))
  add(path_566403, "subscriptionId", newJString(subscriptionId))
  add(path_566403, "resourceGroupName", newJString(resourceGroupName))
  result = call_566402.call(path_566403, query_566404, nil, nil, nil)

var webAppsGetMSDeployStatusSlot* = Call_WebAppsGetMSDeployStatusSlot_566393(
    name: "webAppsGetMSDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatusSlot_566394, base: "",
    url: url_WebAppsGetMSDeployStatusSlot_566395, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLogSlot_566419 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMSDeployLogSlot_566421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLogSlot_566420(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566422 = path.getOrDefault("slot")
  valid_566422 = validateParameter(valid_566422, JString, required = true,
                                 default = nil)
  if valid_566422 != nil:
    section.add "slot", valid_566422
  var valid_566423 = path.getOrDefault("name")
  valid_566423 = validateParameter(valid_566423, JString, required = true,
                                 default = nil)
  if valid_566423 != nil:
    section.add "name", valid_566423
  var valid_566424 = path.getOrDefault("subscriptionId")
  valid_566424 = validateParameter(valid_566424, JString, required = true,
                                 default = nil)
  if valid_566424 != nil:
    section.add "subscriptionId", valid_566424
  var valid_566425 = path.getOrDefault("resourceGroupName")
  valid_566425 = validateParameter(valid_566425, JString, required = true,
                                 default = nil)
  if valid_566425 != nil:
    section.add "resourceGroupName", valid_566425
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566426 = query.getOrDefault("api-version")
  valid_566426 = validateParameter(valid_566426, JString, required = true,
                                 default = nil)
  if valid_566426 != nil:
    section.add "api-version", valid_566426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566427: Call_WebAppsGetMSDeployLogSlot_566419; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_566427.validator(path, query, header, formData, body)
  let scheme = call_566427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566427.url(scheme.get, call_566427.host, call_566427.base,
                         call_566427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566427, url, valid)

proc call*(call_566428: Call_WebAppsGetMSDeployLogSlot_566419; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566429 = newJObject()
  var query_566430 = newJObject()
  add(path_566429, "slot", newJString(slot))
  add(query_566430, "api-version", newJString(apiVersion))
  add(path_566429, "name", newJString(name))
  add(path_566429, "subscriptionId", newJString(subscriptionId))
  add(path_566429, "resourceGroupName", newJString(resourceGroupName))
  result = call_566428.call(path_566429, query_566430, nil, nil, nil)

var webAppsGetMSDeployLogSlot* = Call_WebAppsGetMSDeployLogSlot_566419(
    name: "webAppsGetMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLogSlot_566420, base: "",
    url: url_WebAppsGetMSDeployLogSlot_566421, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceFunctionsSlot_566431 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceFunctionsSlot_566433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceFunctionsSlot_566432(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566434 = path.getOrDefault("slot")
  valid_566434 = validateParameter(valid_566434, JString, required = true,
                                 default = nil)
  if valid_566434 != nil:
    section.add "slot", valid_566434
  var valid_566435 = path.getOrDefault("name")
  valid_566435 = validateParameter(valid_566435, JString, required = true,
                                 default = nil)
  if valid_566435 != nil:
    section.add "name", valid_566435
  var valid_566436 = path.getOrDefault("subscriptionId")
  valid_566436 = validateParameter(valid_566436, JString, required = true,
                                 default = nil)
  if valid_566436 != nil:
    section.add "subscriptionId", valid_566436
  var valid_566437 = path.getOrDefault("resourceGroupName")
  valid_566437 = validateParameter(valid_566437, JString, required = true,
                                 default = nil)
  if valid_566437 != nil:
    section.add "resourceGroupName", valid_566437
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566438 = query.getOrDefault("api-version")
  valid_566438 = validateParameter(valid_566438, JString, required = true,
                                 default = nil)
  if valid_566438 != nil:
    section.add "api-version", valid_566438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566439: Call_WebAppsListInstanceFunctionsSlot_566431;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_566439.validator(path, query, header, formData, body)
  let scheme = call_566439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566439.url(scheme.get, call_566439.host, call_566439.base,
                         call_566439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566439, url, valid)

proc call*(call_566440: Call_WebAppsListInstanceFunctionsSlot_566431; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListInstanceFunctionsSlot
  ## List the functions for a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566441 = newJObject()
  var query_566442 = newJObject()
  add(path_566441, "slot", newJString(slot))
  add(query_566442, "api-version", newJString(apiVersion))
  add(path_566441, "name", newJString(name))
  add(path_566441, "subscriptionId", newJString(subscriptionId))
  add(path_566441, "resourceGroupName", newJString(resourceGroupName))
  result = call_566440.call(path_566441, query_566442, nil, nil, nil)

var webAppsListInstanceFunctionsSlot* = Call_WebAppsListInstanceFunctionsSlot_566431(
    name: "webAppsListInstanceFunctionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    validator: validate_WebAppsListInstanceFunctionsSlot_566432, base: "",
    url: url_WebAppsListInstanceFunctionsSlot_566433, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminTokenSlot_566443 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetFunctionsAdminTokenSlot_566445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminTokenSlot_566444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566446 = path.getOrDefault("slot")
  valid_566446 = validateParameter(valid_566446, JString, required = true,
                                 default = nil)
  if valid_566446 != nil:
    section.add "slot", valid_566446
  var valid_566447 = path.getOrDefault("name")
  valid_566447 = validateParameter(valid_566447, JString, required = true,
                                 default = nil)
  if valid_566447 != nil:
    section.add "name", valid_566447
  var valid_566448 = path.getOrDefault("subscriptionId")
  valid_566448 = validateParameter(valid_566448, JString, required = true,
                                 default = nil)
  if valid_566448 != nil:
    section.add "subscriptionId", valid_566448
  var valid_566449 = path.getOrDefault("resourceGroupName")
  valid_566449 = validateParameter(valid_566449, JString, required = true,
                                 default = nil)
  if valid_566449 != nil:
    section.add "resourceGroupName", valid_566449
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566450 = query.getOrDefault("api-version")
  valid_566450 = validateParameter(valid_566450, JString, required = true,
                                 default = nil)
  if valid_566450 != nil:
    section.add "api-version", valid_566450
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566451: Call_WebAppsGetFunctionsAdminTokenSlot_566443;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_566451.validator(path, query, header, formData, body)
  let scheme = call_566451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566451.url(scheme.get, call_566451.host, call_566451.base,
                         call_566451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566451, url, valid)

proc call*(call_566452: Call_WebAppsGetFunctionsAdminTokenSlot_566443;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetFunctionsAdminTokenSlot
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566453 = newJObject()
  var query_566454 = newJObject()
  add(path_566453, "slot", newJString(slot))
  add(query_566454, "api-version", newJString(apiVersion))
  add(path_566453, "name", newJString(name))
  add(path_566453, "subscriptionId", newJString(subscriptionId))
  add(path_566453, "resourceGroupName", newJString(resourceGroupName))
  result = call_566452.call(path_566453, query_566454, nil, nil, nil)

var webAppsGetFunctionsAdminTokenSlot* = Call_WebAppsGetFunctionsAdminTokenSlot_566443(
    name: "webAppsGetFunctionsAdminTokenSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminTokenSlot_566444, base: "",
    url: url_WebAppsGetFunctionsAdminTokenSlot_566445, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceFunctionSlot_566468 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateInstanceFunctionSlot_566470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceFunctionSlot_566469(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566471 = path.getOrDefault("slot")
  valid_566471 = validateParameter(valid_566471, JString, required = true,
                                 default = nil)
  if valid_566471 != nil:
    section.add "slot", valid_566471
  var valid_566472 = path.getOrDefault("functionName")
  valid_566472 = validateParameter(valid_566472, JString, required = true,
                                 default = nil)
  if valid_566472 != nil:
    section.add "functionName", valid_566472
  var valid_566473 = path.getOrDefault("name")
  valid_566473 = validateParameter(valid_566473, JString, required = true,
                                 default = nil)
  if valid_566473 != nil:
    section.add "name", valid_566473
  var valid_566474 = path.getOrDefault("subscriptionId")
  valid_566474 = validateParameter(valid_566474, JString, required = true,
                                 default = nil)
  if valid_566474 != nil:
    section.add "subscriptionId", valid_566474
  var valid_566475 = path.getOrDefault("resourceGroupName")
  valid_566475 = validateParameter(valid_566475, JString, required = true,
                                 default = nil)
  if valid_566475 != nil:
    section.add "resourceGroupName", valid_566475
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566476 = query.getOrDefault("api-version")
  valid_566476 = validateParameter(valid_566476, JString, required = true,
                                 default = nil)
  if valid_566476 != nil:
    section.add "api-version", valid_566476
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566478: Call_WebAppsCreateInstanceFunctionSlot_566468;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_566478.validator(path, query, header, formData, body)
  let scheme = call_566478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566478.url(scheme.get, call_566478.host, call_566478.base,
                         call_566478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566478, url, valid)

proc call*(call_566479: Call_WebAppsCreateInstanceFunctionSlot_566468;
          slot: string; functionName: string; apiVersion: string; name: string;
          functionEnvelope: JsonNode; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateInstanceFunctionSlot
  ## Create function for web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566480 = newJObject()
  var query_566481 = newJObject()
  var body_566482 = newJObject()
  add(path_566480, "slot", newJString(slot))
  add(path_566480, "functionName", newJString(functionName))
  add(query_566481, "api-version", newJString(apiVersion))
  add(path_566480, "name", newJString(name))
  if functionEnvelope != nil:
    body_566482 = functionEnvelope
  add(path_566480, "subscriptionId", newJString(subscriptionId))
  add(path_566480, "resourceGroupName", newJString(resourceGroupName))
  result = call_566479.call(path_566480, query_566481, nil, nil, body_566482)

var webAppsCreateInstanceFunctionSlot* = Call_WebAppsCreateInstanceFunctionSlot_566468(
    name: "webAppsCreateInstanceFunctionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsCreateInstanceFunctionSlot_566469, base: "",
    url: url_WebAppsCreateInstanceFunctionSlot_566470, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceFunctionSlot_566455 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceFunctionSlot_566457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceFunctionSlot_566456(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566458 = path.getOrDefault("slot")
  valid_566458 = validateParameter(valid_566458, JString, required = true,
                                 default = nil)
  if valid_566458 != nil:
    section.add "slot", valid_566458
  var valid_566459 = path.getOrDefault("functionName")
  valid_566459 = validateParameter(valid_566459, JString, required = true,
                                 default = nil)
  if valid_566459 != nil:
    section.add "functionName", valid_566459
  var valid_566460 = path.getOrDefault("name")
  valid_566460 = validateParameter(valid_566460, JString, required = true,
                                 default = nil)
  if valid_566460 != nil:
    section.add "name", valid_566460
  var valid_566461 = path.getOrDefault("subscriptionId")
  valid_566461 = validateParameter(valid_566461, JString, required = true,
                                 default = nil)
  if valid_566461 != nil:
    section.add "subscriptionId", valid_566461
  var valid_566462 = path.getOrDefault("resourceGroupName")
  valid_566462 = validateParameter(valid_566462, JString, required = true,
                                 default = nil)
  if valid_566462 != nil:
    section.add "resourceGroupName", valid_566462
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566463 = query.getOrDefault("api-version")
  valid_566463 = validateParameter(valid_566463, JString, required = true,
                                 default = nil)
  if valid_566463 != nil:
    section.add "api-version", valid_566463
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566464: Call_WebAppsGetInstanceFunctionSlot_566455; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_566464.validator(path, query, header, formData, body)
  let scheme = call_566464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566464.url(scheme.get, call_566464.host, call_566464.base,
                         call_566464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566464, url, valid)

proc call*(call_566465: Call_WebAppsGetInstanceFunctionSlot_566455; slot: string;
          functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetInstanceFunctionSlot
  ## Get function information by its ID for web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566466 = newJObject()
  var query_566467 = newJObject()
  add(path_566466, "slot", newJString(slot))
  add(path_566466, "functionName", newJString(functionName))
  add(query_566467, "api-version", newJString(apiVersion))
  add(path_566466, "name", newJString(name))
  add(path_566466, "subscriptionId", newJString(subscriptionId))
  add(path_566466, "resourceGroupName", newJString(resourceGroupName))
  result = call_566465.call(path_566466, query_566467, nil, nil, nil)

var webAppsGetInstanceFunctionSlot* = Call_WebAppsGetInstanceFunctionSlot_566455(
    name: "webAppsGetInstanceFunctionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsGetInstanceFunctionSlot_566456, base: "",
    url: url_WebAppsGetInstanceFunctionSlot_566457, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceFunctionSlot_566483 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteInstanceFunctionSlot_566485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceFunctionSlot_566484(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566486 = path.getOrDefault("slot")
  valid_566486 = validateParameter(valid_566486, JString, required = true,
                                 default = nil)
  if valid_566486 != nil:
    section.add "slot", valid_566486
  var valid_566487 = path.getOrDefault("functionName")
  valid_566487 = validateParameter(valid_566487, JString, required = true,
                                 default = nil)
  if valid_566487 != nil:
    section.add "functionName", valid_566487
  var valid_566488 = path.getOrDefault("name")
  valid_566488 = validateParameter(valid_566488, JString, required = true,
                                 default = nil)
  if valid_566488 != nil:
    section.add "name", valid_566488
  var valid_566489 = path.getOrDefault("subscriptionId")
  valid_566489 = validateParameter(valid_566489, JString, required = true,
                                 default = nil)
  if valid_566489 != nil:
    section.add "subscriptionId", valid_566489
  var valid_566490 = path.getOrDefault("resourceGroupName")
  valid_566490 = validateParameter(valid_566490, JString, required = true,
                                 default = nil)
  if valid_566490 != nil:
    section.add "resourceGroupName", valid_566490
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566491 = query.getOrDefault("api-version")
  valid_566491 = validateParameter(valid_566491, JString, required = true,
                                 default = nil)
  if valid_566491 != nil:
    section.add "api-version", valid_566491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566492: Call_WebAppsDeleteInstanceFunctionSlot_566483;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_566492.validator(path, query, header, formData, body)
  let scheme = call_566492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566492.url(scheme.get, call_566492.host, call_566492.base,
                         call_566492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566492, url, valid)

proc call*(call_566493: Call_WebAppsDeleteInstanceFunctionSlot_566483;
          slot: string; functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteInstanceFunctionSlot
  ## Delete a function for web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566494 = newJObject()
  var query_566495 = newJObject()
  add(path_566494, "slot", newJString(slot))
  add(path_566494, "functionName", newJString(functionName))
  add(query_566495, "api-version", newJString(apiVersion))
  add(path_566494, "name", newJString(name))
  add(path_566494, "subscriptionId", newJString(subscriptionId))
  add(path_566494, "resourceGroupName", newJString(resourceGroupName))
  result = call_566493.call(path_566494, query_566495, nil, nil, nil)

var webAppsDeleteInstanceFunctionSlot* = Call_WebAppsDeleteInstanceFunctionSlot_566483(
    name: "webAppsDeleteInstanceFunctionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsDeleteInstanceFunctionSlot_566484, base: "",
    url: url_WebAppsDeleteInstanceFunctionSlot_566485, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecretsSlot_566496 = ref object of OpenApiRestCall_563564
proc url_WebAppsListFunctionSecretsSlot_566498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecretsSlot_566497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: JString (required)
  ##               : Function name.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566499 = path.getOrDefault("slot")
  valid_566499 = validateParameter(valid_566499, JString, required = true,
                                 default = nil)
  if valid_566499 != nil:
    section.add "slot", valid_566499
  var valid_566500 = path.getOrDefault("functionName")
  valid_566500 = validateParameter(valid_566500, JString, required = true,
                                 default = nil)
  if valid_566500 != nil:
    section.add "functionName", valid_566500
  var valid_566501 = path.getOrDefault("name")
  valid_566501 = validateParameter(valid_566501, JString, required = true,
                                 default = nil)
  if valid_566501 != nil:
    section.add "name", valid_566501
  var valid_566502 = path.getOrDefault("subscriptionId")
  valid_566502 = validateParameter(valid_566502, JString, required = true,
                                 default = nil)
  if valid_566502 != nil:
    section.add "subscriptionId", valid_566502
  var valid_566503 = path.getOrDefault("resourceGroupName")
  valid_566503 = validateParameter(valid_566503, JString, required = true,
                                 default = nil)
  if valid_566503 != nil:
    section.add "resourceGroupName", valid_566503
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566504 = query.getOrDefault("api-version")
  valid_566504 = validateParameter(valid_566504, JString, required = true,
                                 default = nil)
  if valid_566504 != nil:
    section.add "api-version", valid_566504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566505: Call_WebAppsListFunctionSecretsSlot_566496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_566505.validator(path, query, header, formData, body)
  let scheme = call_566505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566505.url(scheme.get, call_566505.host, call_566505.base,
                         call_566505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566505, url, valid)

proc call*(call_566506: Call_WebAppsListFunctionSecretsSlot_566496; slot: string;
          functionName: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListFunctionSecretsSlot
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   functionName: string (required)
  ##               : Function name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566507 = newJObject()
  var query_566508 = newJObject()
  add(path_566507, "slot", newJString(slot))
  add(path_566507, "functionName", newJString(functionName))
  add(query_566508, "api-version", newJString(apiVersion))
  add(path_566507, "name", newJString(name))
  add(path_566507, "subscriptionId", newJString(subscriptionId))
  add(path_566507, "resourceGroupName", newJString(resourceGroupName))
  result = call_566506.call(path_566507, query_566508, nil, nil, nil)

var webAppsListFunctionSecretsSlot* = Call_WebAppsListFunctionSecretsSlot_566496(
    name: "webAppsListFunctionSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecretsSlot_566497, base: "",
    url: url_WebAppsListFunctionSecretsSlot_566498, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindingsSlot_566509 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHostNameBindingsSlot_566511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindingsSlot_566510(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566512 = path.getOrDefault("slot")
  valid_566512 = validateParameter(valid_566512, JString, required = true,
                                 default = nil)
  if valid_566512 != nil:
    section.add "slot", valid_566512
  var valid_566513 = path.getOrDefault("name")
  valid_566513 = validateParameter(valid_566513, JString, required = true,
                                 default = nil)
  if valid_566513 != nil:
    section.add "name", valid_566513
  var valid_566514 = path.getOrDefault("subscriptionId")
  valid_566514 = validateParameter(valid_566514, JString, required = true,
                                 default = nil)
  if valid_566514 != nil:
    section.add "subscriptionId", valid_566514
  var valid_566515 = path.getOrDefault("resourceGroupName")
  valid_566515 = validateParameter(valid_566515, JString, required = true,
                                 default = nil)
  if valid_566515 != nil:
    section.add "resourceGroupName", valid_566515
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566516 = query.getOrDefault("api-version")
  valid_566516 = validateParameter(valid_566516, JString, required = true,
                                 default = nil)
  if valid_566516 != nil:
    section.add "api-version", valid_566516
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566517: Call_WebAppsListHostNameBindingsSlot_566509;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_566517.validator(path, query, header, formData, body)
  let scheme = call_566517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566517.url(scheme.get, call_566517.host, call_566517.base,
                         call_566517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566517, url, valid)

proc call*(call_566518: Call_WebAppsListHostNameBindingsSlot_566509; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHostNameBindingsSlot
  ## Get hostname bindings for an app or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566519 = newJObject()
  var query_566520 = newJObject()
  add(path_566519, "slot", newJString(slot))
  add(query_566520, "api-version", newJString(apiVersion))
  add(path_566519, "name", newJString(name))
  add(path_566519, "subscriptionId", newJString(subscriptionId))
  add(path_566519, "resourceGroupName", newJString(resourceGroupName))
  result = call_566518.call(path_566519, query_566520, nil, nil, nil)

var webAppsListHostNameBindingsSlot* = Call_WebAppsListHostNameBindingsSlot_566509(
    name: "webAppsListHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindingsSlot_566510, base: "",
    url: url_WebAppsListHostNameBindingsSlot_566511, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBindingSlot_566534 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHostNameBindingSlot_566536(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBindingSlot_566535(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566537 = path.getOrDefault("slot")
  valid_566537 = validateParameter(valid_566537, JString, required = true,
                                 default = nil)
  if valid_566537 != nil:
    section.add "slot", valid_566537
  var valid_566538 = path.getOrDefault("name")
  valid_566538 = validateParameter(valid_566538, JString, required = true,
                                 default = nil)
  if valid_566538 != nil:
    section.add "name", valid_566538
  var valid_566539 = path.getOrDefault("subscriptionId")
  valid_566539 = validateParameter(valid_566539, JString, required = true,
                                 default = nil)
  if valid_566539 != nil:
    section.add "subscriptionId", valid_566539
  var valid_566540 = path.getOrDefault("resourceGroupName")
  valid_566540 = validateParameter(valid_566540, JString, required = true,
                                 default = nil)
  if valid_566540 != nil:
    section.add "resourceGroupName", valid_566540
  var valid_566541 = path.getOrDefault("hostName")
  valid_566541 = validateParameter(valid_566541, JString, required = true,
                                 default = nil)
  if valid_566541 != nil:
    section.add "hostName", valid_566541
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566542 = query.getOrDefault("api-version")
  valid_566542 = validateParameter(valid_566542, JString, required = true,
                                 default = nil)
  if valid_566542 != nil:
    section.add "api-version", valid_566542
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566544: Call_WebAppsCreateOrUpdateHostNameBindingSlot_566534;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_566544.validator(path, query, header, formData, body)
  let scheme = call_566544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566544.url(scheme.get, call_566544.host, call_566544.base,
                         call_566544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566544, url, valid)

proc call*(call_566545: Call_WebAppsCreateOrUpdateHostNameBindingSlot_566534;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostNameBinding: JsonNode; hostName: string): Recallable =
  ## webAppsCreateOrUpdateHostNameBindingSlot
  ## Creates a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_566546 = newJObject()
  var query_566547 = newJObject()
  var body_566548 = newJObject()
  add(path_566546, "slot", newJString(slot))
  add(query_566547, "api-version", newJString(apiVersion))
  add(path_566546, "name", newJString(name))
  add(path_566546, "subscriptionId", newJString(subscriptionId))
  add(path_566546, "resourceGroupName", newJString(resourceGroupName))
  if hostNameBinding != nil:
    body_566548 = hostNameBinding
  add(path_566546, "hostName", newJString(hostName))
  result = call_566545.call(path_566546, query_566547, nil, nil, body_566548)

var webAppsCreateOrUpdateHostNameBindingSlot* = Call_WebAppsCreateOrUpdateHostNameBindingSlot_566534(
    name: "webAppsCreateOrUpdateHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBindingSlot_566535, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBindingSlot_566536,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBindingSlot_566521 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHostNameBindingSlot_566523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBindingSlot_566522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566524 = path.getOrDefault("slot")
  valid_566524 = validateParameter(valid_566524, JString, required = true,
                                 default = nil)
  if valid_566524 != nil:
    section.add "slot", valid_566524
  var valid_566525 = path.getOrDefault("name")
  valid_566525 = validateParameter(valid_566525, JString, required = true,
                                 default = nil)
  if valid_566525 != nil:
    section.add "name", valid_566525
  var valid_566526 = path.getOrDefault("subscriptionId")
  valid_566526 = validateParameter(valid_566526, JString, required = true,
                                 default = nil)
  if valid_566526 != nil:
    section.add "subscriptionId", valid_566526
  var valid_566527 = path.getOrDefault("resourceGroupName")
  valid_566527 = validateParameter(valid_566527, JString, required = true,
                                 default = nil)
  if valid_566527 != nil:
    section.add "resourceGroupName", valid_566527
  var valid_566528 = path.getOrDefault("hostName")
  valid_566528 = validateParameter(valid_566528, JString, required = true,
                                 default = nil)
  if valid_566528 != nil:
    section.add "hostName", valid_566528
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566529 = query.getOrDefault("api-version")
  valid_566529 = validateParameter(valid_566529, JString, required = true,
                                 default = nil)
  if valid_566529 != nil:
    section.add "api-version", valid_566529
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566530: Call_WebAppsGetHostNameBindingSlot_566521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_566530.validator(path, query, header, formData, body)
  let scheme = call_566530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566530.url(scheme.get, call_566530.host, call_566530.base,
                         call_566530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566530, url, valid)

proc call*(call_566531: Call_WebAppsGetHostNameBindingSlot_566521; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## webAppsGetHostNameBindingSlot
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_566532 = newJObject()
  var query_566533 = newJObject()
  add(path_566532, "slot", newJString(slot))
  add(query_566533, "api-version", newJString(apiVersion))
  add(path_566532, "name", newJString(name))
  add(path_566532, "subscriptionId", newJString(subscriptionId))
  add(path_566532, "resourceGroupName", newJString(resourceGroupName))
  add(path_566532, "hostName", newJString(hostName))
  result = call_566531.call(path_566532, query_566533, nil, nil, nil)

var webAppsGetHostNameBindingSlot* = Call_WebAppsGetHostNameBindingSlot_566521(
    name: "webAppsGetHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBindingSlot_566522, base: "",
    url: url_WebAppsGetHostNameBindingSlot_566523, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBindingSlot_566549 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHostNameBindingSlot_566551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBindingSlot_566550(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566552 = path.getOrDefault("slot")
  valid_566552 = validateParameter(valid_566552, JString, required = true,
                                 default = nil)
  if valid_566552 != nil:
    section.add "slot", valid_566552
  var valid_566553 = path.getOrDefault("name")
  valid_566553 = validateParameter(valid_566553, JString, required = true,
                                 default = nil)
  if valid_566553 != nil:
    section.add "name", valid_566553
  var valid_566554 = path.getOrDefault("subscriptionId")
  valid_566554 = validateParameter(valid_566554, JString, required = true,
                                 default = nil)
  if valid_566554 != nil:
    section.add "subscriptionId", valid_566554
  var valid_566555 = path.getOrDefault("resourceGroupName")
  valid_566555 = validateParameter(valid_566555, JString, required = true,
                                 default = nil)
  if valid_566555 != nil:
    section.add "resourceGroupName", valid_566555
  var valid_566556 = path.getOrDefault("hostName")
  valid_566556 = validateParameter(valid_566556, JString, required = true,
                                 default = nil)
  if valid_566556 != nil:
    section.add "hostName", valid_566556
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566557 = query.getOrDefault("api-version")
  valid_566557 = validateParameter(valid_566557, JString, required = true,
                                 default = nil)
  if valid_566557 != nil:
    section.add "api-version", valid_566557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566558: Call_WebAppsDeleteHostNameBindingSlot_566549;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_566558.validator(path, query, header, formData, body)
  let scheme = call_566558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566558.url(scheme.get, call_566558.host, call_566558.base,
                         call_566558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566558, url, valid)

proc call*(call_566559: Call_WebAppsDeleteHostNameBindingSlot_566549; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBindingSlot
  ## Deletes a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_566560 = newJObject()
  var query_566561 = newJObject()
  add(path_566560, "slot", newJString(slot))
  add(query_566561, "api-version", newJString(apiVersion))
  add(path_566560, "name", newJString(name))
  add(path_566560, "subscriptionId", newJString(subscriptionId))
  add(path_566560, "resourceGroupName", newJString(resourceGroupName))
  add(path_566560, "hostName", newJString(hostName))
  result = call_566559.call(path_566560, query_566561, nil, nil, nil)

var webAppsDeleteHostNameBindingSlot* = Call_WebAppsDeleteHostNameBindingSlot_566549(
    name: "webAppsDeleteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBindingSlot_566550, base: "",
    url: url_WebAppsDeleteHostNameBindingSlot_566551, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnectionSlot_566576 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateHybridConnectionSlot_566578(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnectionSlot_566577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566579 = path.getOrDefault("slot")
  valid_566579 = validateParameter(valid_566579, JString, required = true,
                                 default = nil)
  if valid_566579 != nil:
    section.add "slot", valid_566579
  var valid_566580 = path.getOrDefault("namespaceName")
  valid_566580 = validateParameter(valid_566580, JString, required = true,
                                 default = nil)
  if valid_566580 != nil:
    section.add "namespaceName", valid_566580
  var valid_566581 = path.getOrDefault("name")
  valid_566581 = validateParameter(valid_566581, JString, required = true,
                                 default = nil)
  if valid_566581 != nil:
    section.add "name", valid_566581
  var valid_566582 = path.getOrDefault("subscriptionId")
  valid_566582 = validateParameter(valid_566582, JString, required = true,
                                 default = nil)
  if valid_566582 != nil:
    section.add "subscriptionId", valid_566582
  var valid_566583 = path.getOrDefault("resourceGroupName")
  valid_566583 = validateParameter(valid_566583, JString, required = true,
                                 default = nil)
  if valid_566583 != nil:
    section.add "resourceGroupName", valid_566583
  var valid_566584 = path.getOrDefault("relayName")
  valid_566584 = validateParameter(valid_566584, JString, required = true,
                                 default = nil)
  if valid_566584 != nil:
    section.add "relayName", valid_566584
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566585 = query.getOrDefault("api-version")
  valid_566585 = validateParameter(valid_566585, JString, required = true,
                                 default = nil)
  if valid_566585 != nil:
    section.add "api-version", valid_566585
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566587: Call_WebAppsCreateOrUpdateHybridConnectionSlot_566576;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_566587.validator(path, query, header, formData, body)
  let scheme = call_566587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566587.url(scheme.get, call_566587.host, call_566587.base,
                         call_566587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566587, url, valid)

proc call*(call_566588: Call_WebAppsCreateOrUpdateHybridConnectionSlot_566576;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          namespaceName: string; name: string; subscriptionId: string;
          resourceGroupName: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566589 = newJObject()
  var query_566590 = newJObject()
  var body_566591 = newJObject()
  add(path_566589, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566591 = connectionEnvelope
  add(query_566590, "api-version", newJString(apiVersion))
  add(path_566589, "namespaceName", newJString(namespaceName))
  add(path_566589, "name", newJString(name))
  add(path_566589, "subscriptionId", newJString(subscriptionId))
  add(path_566589, "resourceGroupName", newJString(resourceGroupName))
  add(path_566589, "relayName", newJString(relayName))
  result = call_566588.call(path_566589, query_566590, nil, nil, body_566591)

var webAppsCreateOrUpdateHybridConnectionSlot* = Call_WebAppsCreateOrUpdateHybridConnectionSlot_566576(
    name: "webAppsCreateOrUpdateHybridConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnectionSlot_566577,
    base: "", url: url_WebAppsCreateOrUpdateHybridConnectionSlot_566578,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnectionSlot_566562 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetHybridConnectionSlot_566564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnectionSlot_566563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566565 = path.getOrDefault("slot")
  valid_566565 = validateParameter(valid_566565, JString, required = true,
                                 default = nil)
  if valid_566565 != nil:
    section.add "slot", valid_566565
  var valid_566566 = path.getOrDefault("namespaceName")
  valid_566566 = validateParameter(valid_566566, JString, required = true,
                                 default = nil)
  if valid_566566 != nil:
    section.add "namespaceName", valid_566566
  var valid_566567 = path.getOrDefault("name")
  valid_566567 = validateParameter(valid_566567, JString, required = true,
                                 default = nil)
  if valid_566567 != nil:
    section.add "name", valid_566567
  var valid_566568 = path.getOrDefault("subscriptionId")
  valid_566568 = validateParameter(valid_566568, JString, required = true,
                                 default = nil)
  if valid_566568 != nil:
    section.add "subscriptionId", valid_566568
  var valid_566569 = path.getOrDefault("resourceGroupName")
  valid_566569 = validateParameter(valid_566569, JString, required = true,
                                 default = nil)
  if valid_566569 != nil:
    section.add "resourceGroupName", valid_566569
  var valid_566570 = path.getOrDefault("relayName")
  valid_566570 = validateParameter(valid_566570, JString, required = true,
                                 default = nil)
  if valid_566570 != nil:
    section.add "relayName", valid_566570
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566571 = query.getOrDefault("api-version")
  valid_566571 = validateParameter(valid_566571, JString, required = true,
                                 default = nil)
  if valid_566571 != nil:
    section.add "api-version", valid_566571
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566572: Call_WebAppsGetHybridConnectionSlot_566562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_566572.validator(path, query, header, formData, body)
  let scheme = call_566572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566572.url(scheme.get, call_566572.host, call_566572.base,
                         call_566572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566572, url, valid)

proc call*(call_566573: Call_WebAppsGetHybridConnectionSlot_566562; slot: string;
          apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsGetHybridConnectionSlot
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566574 = newJObject()
  var query_566575 = newJObject()
  add(path_566574, "slot", newJString(slot))
  add(query_566575, "api-version", newJString(apiVersion))
  add(path_566574, "namespaceName", newJString(namespaceName))
  add(path_566574, "name", newJString(name))
  add(path_566574, "subscriptionId", newJString(subscriptionId))
  add(path_566574, "resourceGroupName", newJString(resourceGroupName))
  add(path_566574, "relayName", newJString(relayName))
  result = call_566573.call(path_566574, query_566575, nil, nil, nil)

var webAppsGetHybridConnectionSlot* = Call_WebAppsGetHybridConnectionSlot_566562(
    name: "webAppsGetHybridConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnectionSlot_566563, base: "",
    url: url_WebAppsGetHybridConnectionSlot_566564, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnectionSlot_566606 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateHybridConnectionSlot_566608(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnectionSlot_566607(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566609 = path.getOrDefault("slot")
  valid_566609 = validateParameter(valid_566609, JString, required = true,
                                 default = nil)
  if valid_566609 != nil:
    section.add "slot", valid_566609
  var valid_566610 = path.getOrDefault("namespaceName")
  valid_566610 = validateParameter(valid_566610, JString, required = true,
                                 default = nil)
  if valid_566610 != nil:
    section.add "namespaceName", valid_566610
  var valid_566611 = path.getOrDefault("name")
  valid_566611 = validateParameter(valid_566611, JString, required = true,
                                 default = nil)
  if valid_566611 != nil:
    section.add "name", valid_566611
  var valid_566612 = path.getOrDefault("subscriptionId")
  valid_566612 = validateParameter(valid_566612, JString, required = true,
                                 default = nil)
  if valid_566612 != nil:
    section.add "subscriptionId", valid_566612
  var valid_566613 = path.getOrDefault("resourceGroupName")
  valid_566613 = validateParameter(valid_566613, JString, required = true,
                                 default = nil)
  if valid_566613 != nil:
    section.add "resourceGroupName", valid_566613
  var valid_566614 = path.getOrDefault("relayName")
  valid_566614 = validateParameter(valid_566614, JString, required = true,
                                 default = nil)
  if valid_566614 != nil:
    section.add "relayName", valid_566614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566615 = query.getOrDefault("api-version")
  valid_566615 = validateParameter(valid_566615, JString, required = true,
                                 default = nil)
  if valid_566615 != nil:
    section.add "api-version", valid_566615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566617: Call_WebAppsUpdateHybridConnectionSlot_566606;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_566617.validator(path, query, header, formData, body)
  let scheme = call_566617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566617.url(scheme.get, call_566617.host, call_566617.base,
                         call_566617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566617, url, valid)

proc call*(call_566618: Call_WebAppsUpdateHybridConnectionSlot_566606;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          namespaceName: string; name: string; subscriptionId: string;
          resourceGroupName: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566619 = newJObject()
  var query_566620 = newJObject()
  var body_566621 = newJObject()
  add(path_566619, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566621 = connectionEnvelope
  add(query_566620, "api-version", newJString(apiVersion))
  add(path_566619, "namespaceName", newJString(namespaceName))
  add(path_566619, "name", newJString(name))
  add(path_566619, "subscriptionId", newJString(subscriptionId))
  add(path_566619, "resourceGroupName", newJString(resourceGroupName))
  add(path_566619, "relayName", newJString(relayName))
  result = call_566618.call(path_566619, query_566620, nil, nil, body_566621)

var webAppsUpdateHybridConnectionSlot* = Call_WebAppsUpdateHybridConnectionSlot_566606(
    name: "webAppsUpdateHybridConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnectionSlot_566607, base: "",
    url: url_WebAppsUpdateHybridConnectionSlot_566608, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnectionSlot_566592 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteHybridConnectionSlot_566594(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnectionSlot_566593(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566595 = path.getOrDefault("slot")
  valid_566595 = validateParameter(valid_566595, JString, required = true,
                                 default = nil)
  if valid_566595 != nil:
    section.add "slot", valid_566595
  var valid_566596 = path.getOrDefault("namespaceName")
  valid_566596 = validateParameter(valid_566596, JString, required = true,
                                 default = nil)
  if valid_566596 != nil:
    section.add "namespaceName", valid_566596
  var valid_566597 = path.getOrDefault("name")
  valid_566597 = validateParameter(valid_566597, JString, required = true,
                                 default = nil)
  if valid_566597 != nil:
    section.add "name", valid_566597
  var valid_566598 = path.getOrDefault("subscriptionId")
  valid_566598 = validateParameter(valid_566598, JString, required = true,
                                 default = nil)
  if valid_566598 != nil:
    section.add "subscriptionId", valid_566598
  var valid_566599 = path.getOrDefault("resourceGroupName")
  valid_566599 = validateParameter(valid_566599, JString, required = true,
                                 default = nil)
  if valid_566599 != nil:
    section.add "resourceGroupName", valid_566599
  var valid_566600 = path.getOrDefault("relayName")
  valid_566600 = validateParameter(valid_566600, JString, required = true,
                                 default = nil)
  if valid_566600 != nil:
    section.add "relayName", valid_566600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566601 = query.getOrDefault("api-version")
  valid_566601 = validateParameter(valid_566601, JString, required = true,
                                 default = nil)
  if valid_566601 != nil:
    section.add "api-version", valid_566601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566602: Call_WebAppsDeleteHybridConnectionSlot_566592;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_566602.validator(path, query, header, formData, body)
  let scheme = call_566602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566602.url(scheme.get, call_566602.host, call_566602.base,
                         call_566602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566602, url, valid)

proc call*(call_566603: Call_WebAppsDeleteHybridConnectionSlot_566592;
          slot: string; apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnectionSlot
  ## Removes a Hybrid Connection from this site.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566604 = newJObject()
  var query_566605 = newJObject()
  add(path_566604, "slot", newJString(slot))
  add(query_566605, "api-version", newJString(apiVersion))
  add(path_566604, "namespaceName", newJString(namespaceName))
  add(path_566604, "name", newJString(name))
  add(path_566604, "subscriptionId", newJString(subscriptionId))
  add(path_566604, "resourceGroupName", newJString(resourceGroupName))
  add(path_566604, "relayName", newJString(relayName))
  result = call_566603.call(path_566604, query_566605, nil, nil, nil)

var webAppsDeleteHybridConnectionSlot* = Call_WebAppsDeleteHybridConnectionSlot_566592(
    name: "webAppsDeleteHybridConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnectionSlot_566593, base: "",
    url: url_WebAppsDeleteHybridConnectionSlot_566594, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeysSlot_566622 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnectionKeysSlot_566624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeysSlot_566623(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566625 = path.getOrDefault("slot")
  valid_566625 = validateParameter(valid_566625, JString, required = true,
                                 default = nil)
  if valid_566625 != nil:
    section.add "slot", valid_566625
  var valid_566626 = path.getOrDefault("namespaceName")
  valid_566626 = validateParameter(valid_566626, JString, required = true,
                                 default = nil)
  if valid_566626 != nil:
    section.add "namespaceName", valid_566626
  var valid_566627 = path.getOrDefault("name")
  valid_566627 = validateParameter(valid_566627, JString, required = true,
                                 default = nil)
  if valid_566627 != nil:
    section.add "name", valid_566627
  var valid_566628 = path.getOrDefault("subscriptionId")
  valid_566628 = validateParameter(valid_566628, JString, required = true,
                                 default = nil)
  if valid_566628 != nil:
    section.add "subscriptionId", valid_566628
  var valid_566629 = path.getOrDefault("resourceGroupName")
  valid_566629 = validateParameter(valid_566629, JString, required = true,
                                 default = nil)
  if valid_566629 != nil:
    section.add "resourceGroupName", valid_566629
  var valid_566630 = path.getOrDefault("relayName")
  valid_566630 = validateParameter(valid_566630, JString, required = true,
                                 default = nil)
  if valid_566630 != nil:
    section.add "relayName", valid_566630
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566631 = query.getOrDefault("api-version")
  valid_566631 = validateParameter(valid_566631, JString, required = true,
                                 default = nil)
  if valid_566631 != nil:
    section.add "api-version", valid_566631
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566632: Call_WebAppsListHybridConnectionKeysSlot_566622;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_566632.validator(path, query, header, formData, body)
  let scheme = call_566632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566632.url(scheme.get, call_566632.host, call_566632.base,
                         call_566632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566632, url, valid)

proc call*(call_566633: Call_WebAppsListHybridConnectionKeysSlot_566622;
          slot: string; apiVersion: string; namespaceName: string; name: string;
          subscriptionId: string; resourceGroupName: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeysSlot
  ## Gets the send key name and value for a Hybrid Connection.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_566634 = newJObject()
  var query_566635 = newJObject()
  add(path_566634, "slot", newJString(slot))
  add(query_566635, "api-version", newJString(apiVersion))
  add(path_566634, "namespaceName", newJString(namespaceName))
  add(path_566634, "name", newJString(name))
  add(path_566634, "subscriptionId", newJString(subscriptionId))
  add(path_566634, "resourceGroupName", newJString(resourceGroupName))
  add(path_566634, "relayName", newJString(relayName))
  result = call_566633.call(path_566634, query_566635, nil, nil, nil)

var webAppsListHybridConnectionKeysSlot* = Call_WebAppsListHybridConnectionKeysSlot_566622(
    name: "webAppsListHybridConnectionKeysSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeysSlot_566623, base: "",
    url: url_WebAppsListHybridConnectionKeysSlot_566624, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionsSlot_566636 = ref object of OpenApiRestCall_563564
proc url_WebAppsListHybridConnectionsSlot_566638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionsSlot_566637(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566639 = path.getOrDefault("slot")
  valid_566639 = validateParameter(valid_566639, JString, required = true,
                                 default = nil)
  if valid_566639 != nil:
    section.add "slot", valid_566639
  var valid_566640 = path.getOrDefault("name")
  valid_566640 = validateParameter(valid_566640, JString, required = true,
                                 default = nil)
  if valid_566640 != nil:
    section.add "name", valid_566640
  var valid_566641 = path.getOrDefault("subscriptionId")
  valid_566641 = validateParameter(valid_566641, JString, required = true,
                                 default = nil)
  if valid_566641 != nil:
    section.add "subscriptionId", valid_566641
  var valid_566642 = path.getOrDefault("resourceGroupName")
  valid_566642 = validateParameter(valid_566642, JString, required = true,
                                 default = nil)
  if valid_566642 != nil:
    section.add "resourceGroupName", valid_566642
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566643 = query.getOrDefault("api-version")
  valid_566643 = validateParameter(valid_566643, JString, required = true,
                                 default = nil)
  if valid_566643 != nil:
    section.add "api-version", valid_566643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566644: Call_WebAppsListHybridConnectionsSlot_566636;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_566644.validator(path, query, header, formData, body)
  let scheme = call_566644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566644.url(scheme.get, call_566644.host, call_566644.base,
                         call_566644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566644, url, valid)

proc call*(call_566645: Call_WebAppsListHybridConnectionsSlot_566636; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListHybridConnectionsSlot
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566646 = newJObject()
  var query_566647 = newJObject()
  add(path_566646, "slot", newJString(slot))
  add(query_566647, "api-version", newJString(apiVersion))
  add(path_566646, "name", newJString(name))
  add(path_566646, "subscriptionId", newJString(subscriptionId))
  add(path_566646, "resourceGroupName", newJString(resourceGroupName))
  result = call_566645.call(path_566646, query_566647, nil, nil, nil)

var webAppsListHybridConnectionsSlot* = Call_WebAppsListHybridConnectionsSlot_566636(
    name: "webAppsListHybridConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnectionsSlot_566637, base: "",
    url: url_WebAppsListHybridConnectionsSlot_566638, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnectionsSlot_566648 = ref object of OpenApiRestCall_563564
proc url_WebAppsListRelayServiceConnectionsSlot_566650(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnectionsSlot_566649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566651 = path.getOrDefault("slot")
  valid_566651 = validateParameter(valid_566651, JString, required = true,
                                 default = nil)
  if valid_566651 != nil:
    section.add "slot", valid_566651
  var valid_566652 = path.getOrDefault("name")
  valid_566652 = validateParameter(valid_566652, JString, required = true,
                                 default = nil)
  if valid_566652 != nil:
    section.add "name", valid_566652
  var valid_566653 = path.getOrDefault("subscriptionId")
  valid_566653 = validateParameter(valid_566653, JString, required = true,
                                 default = nil)
  if valid_566653 != nil:
    section.add "subscriptionId", valid_566653
  var valid_566654 = path.getOrDefault("resourceGroupName")
  valid_566654 = validateParameter(valid_566654, JString, required = true,
                                 default = nil)
  if valid_566654 != nil:
    section.add "resourceGroupName", valid_566654
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566655 = query.getOrDefault("api-version")
  valid_566655 = validateParameter(valid_566655, JString, required = true,
                                 default = nil)
  if valid_566655 != nil:
    section.add "api-version", valid_566655
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566656: Call_WebAppsListRelayServiceConnectionsSlot_566648;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_566656.validator(path, query, header, formData, body)
  let scheme = call_566656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566656.url(scheme.get, call_566656.host, call_566656.base,
                         call_566656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566656, url, valid)

proc call*(call_566657: Call_WebAppsListRelayServiceConnectionsSlot_566648;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListRelayServiceConnectionsSlot
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566658 = newJObject()
  var query_566659 = newJObject()
  add(path_566658, "slot", newJString(slot))
  add(query_566659, "api-version", newJString(apiVersion))
  add(path_566658, "name", newJString(name))
  add(path_566658, "subscriptionId", newJString(subscriptionId))
  add(path_566658, "resourceGroupName", newJString(resourceGroupName))
  result = call_566657.call(path_566658, query_566659, nil, nil, nil)

var webAppsListRelayServiceConnectionsSlot* = Call_WebAppsListRelayServiceConnectionsSlot_566648(
    name: "webAppsListRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnectionsSlot_566649, base: "",
    url: url_WebAppsListRelayServiceConnectionsSlot_566650,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566673 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566675(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566674(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566676 = path.getOrDefault("slot")
  valid_566676 = validateParameter(valid_566676, JString, required = true,
                                 default = nil)
  if valid_566676 != nil:
    section.add "slot", valid_566676
  var valid_566677 = path.getOrDefault("name")
  valid_566677 = validateParameter(valid_566677, JString, required = true,
                                 default = nil)
  if valid_566677 != nil:
    section.add "name", valid_566677
  var valid_566678 = path.getOrDefault("subscriptionId")
  valid_566678 = validateParameter(valid_566678, JString, required = true,
                                 default = nil)
  if valid_566678 != nil:
    section.add "subscriptionId", valid_566678
  var valid_566679 = path.getOrDefault("resourceGroupName")
  valid_566679 = validateParameter(valid_566679, JString, required = true,
                                 default = nil)
  if valid_566679 != nil:
    section.add "resourceGroupName", valid_566679
  var valid_566680 = path.getOrDefault("entityName")
  valid_566680 = validateParameter(valid_566680, JString, required = true,
                                 default = nil)
  if valid_566680 != nil:
    section.add "entityName", valid_566680
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566681 = query.getOrDefault("api-version")
  valid_566681 = validateParameter(valid_566681, JString, required = true,
                                 default = nil)
  if valid_566681 != nil:
    section.add "api-version", valid_566681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566683: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566673;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_566683.validator(path, query, header, formData, body)
  let scheme = call_566683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566683.url(scheme.get, call_566683.host, call_566683.base,
                         call_566683.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566683, url, valid)

proc call*(call_566684: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566673;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_566685 = newJObject()
  var query_566686 = newJObject()
  var body_566687 = newJObject()
  add(path_566685, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566687 = connectionEnvelope
  add(query_566686, "api-version", newJString(apiVersion))
  add(path_566685, "name", newJString(name))
  add(path_566685, "subscriptionId", newJString(subscriptionId))
  add(path_566685, "resourceGroupName", newJString(resourceGroupName))
  add(path_566685, "entityName", newJString(entityName))
  result = call_566684.call(path_566685, query_566686, nil, nil, body_566687)

var webAppsCreateOrUpdateRelayServiceConnectionSlot* = Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566673(
    name: "webAppsCreateOrUpdateRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566674,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_566675,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnectionSlot_566660 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetRelayServiceConnectionSlot_566662(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnectionSlot_566661(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566663 = path.getOrDefault("slot")
  valid_566663 = validateParameter(valid_566663, JString, required = true,
                                 default = nil)
  if valid_566663 != nil:
    section.add "slot", valid_566663
  var valid_566664 = path.getOrDefault("name")
  valid_566664 = validateParameter(valid_566664, JString, required = true,
                                 default = nil)
  if valid_566664 != nil:
    section.add "name", valid_566664
  var valid_566665 = path.getOrDefault("subscriptionId")
  valid_566665 = validateParameter(valid_566665, JString, required = true,
                                 default = nil)
  if valid_566665 != nil:
    section.add "subscriptionId", valid_566665
  var valid_566666 = path.getOrDefault("resourceGroupName")
  valid_566666 = validateParameter(valid_566666, JString, required = true,
                                 default = nil)
  if valid_566666 != nil:
    section.add "resourceGroupName", valid_566666
  var valid_566667 = path.getOrDefault("entityName")
  valid_566667 = validateParameter(valid_566667, JString, required = true,
                                 default = nil)
  if valid_566667 != nil:
    section.add "entityName", valid_566667
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566668 = query.getOrDefault("api-version")
  valid_566668 = validateParameter(valid_566668, JString, required = true,
                                 default = nil)
  if valid_566668 != nil:
    section.add "api-version", valid_566668
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566669: Call_WebAppsGetRelayServiceConnectionSlot_566660;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_566669.validator(path, query, header, formData, body)
  let scheme = call_566669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566669.url(scheme.get, call_566669.host, call_566669.base,
                         call_566669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566669, url, valid)

proc call*(call_566670: Call_WebAppsGetRelayServiceConnectionSlot_566660;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnectionSlot
  ## Gets a hybrid connection configuration by its name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_566671 = newJObject()
  var query_566672 = newJObject()
  add(path_566671, "slot", newJString(slot))
  add(query_566672, "api-version", newJString(apiVersion))
  add(path_566671, "name", newJString(name))
  add(path_566671, "subscriptionId", newJString(subscriptionId))
  add(path_566671, "resourceGroupName", newJString(resourceGroupName))
  add(path_566671, "entityName", newJString(entityName))
  result = call_566670.call(path_566671, query_566672, nil, nil, nil)

var webAppsGetRelayServiceConnectionSlot* = Call_WebAppsGetRelayServiceConnectionSlot_566660(
    name: "webAppsGetRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnectionSlot_566661, base: "",
    url: url_WebAppsGetRelayServiceConnectionSlot_566662, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnectionSlot_566701 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateRelayServiceConnectionSlot_566703(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnectionSlot_566702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566704 = path.getOrDefault("slot")
  valid_566704 = validateParameter(valid_566704, JString, required = true,
                                 default = nil)
  if valid_566704 != nil:
    section.add "slot", valid_566704
  var valid_566705 = path.getOrDefault("name")
  valid_566705 = validateParameter(valid_566705, JString, required = true,
                                 default = nil)
  if valid_566705 != nil:
    section.add "name", valid_566705
  var valid_566706 = path.getOrDefault("subscriptionId")
  valid_566706 = validateParameter(valid_566706, JString, required = true,
                                 default = nil)
  if valid_566706 != nil:
    section.add "subscriptionId", valid_566706
  var valid_566707 = path.getOrDefault("resourceGroupName")
  valid_566707 = validateParameter(valid_566707, JString, required = true,
                                 default = nil)
  if valid_566707 != nil:
    section.add "resourceGroupName", valid_566707
  var valid_566708 = path.getOrDefault("entityName")
  valid_566708 = validateParameter(valid_566708, JString, required = true,
                                 default = nil)
  if valid_566708 != nil:
    section.add "entityName", valid_566708
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566709 = query.getOrDefault("api-version")
  valid_566709 = validateParameter(valid_566709, JString, required = true,
                                 default = nil)
  if valid_566709 != nil:
    section.add "api-version", valid_566709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566711: Call_WebAppsUpdateRelayServiceConnectionSlot_566701;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_566711.validator(path, query, header, formData, body)
  let scheme = call_566711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566711.url(scheme.get, call_566711.host, call_566711.base,
                         call_566711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566711, url, valid)

proc call*(call_566712: Call_WebAppsUpdateRelayServiceConnectionSlot_566701;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_566713 = newJObject()
  var query_566714 = newJObject()
  var body_566715 = newJObject()
  add(path_566713, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_566715 = connectionEnvelope
  add(query_566714, "api-version", newJString(apiVersion))
  add(path_566713, "name", newJString(name))
  add(path_566713, "subscriptionId", newJString(subscriptionId))
  add(path_566713, "resourceGroupName", newJString(resourceGroupName))
  add(path_566713, "entityName", newJString(entityName))
  result = call_566712.call(path_566713, query_566714, nil, nil, body_566715)

var webAppsUpdateRelayServiceConnectionSlot* = Call_WebAppsUpdateRelayServiceConnectionSlot_566701(
    name: "webAppsUpdateRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnectionSlot_566702, base: "",
    url: url_WebAppsUpdateRelayServiceConnectionSlot_566703,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnectionSlot_566688 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteRelayServiceConnectionSlot_566690(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnectionSlot_566689(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566691 = path.getOrDefault("slot")
  valid_566691 = validateParameter(valid_566691, JString, required = true,
                                 default = nil)
  if valid_566691 != nil:
    section.add "slot", valid_566691
  var valid_566692 = path.getOrDefault("name")
  valid_566692 = validateParameter(valid_566692, JString, required = true,
                                 default = nil)
  if valid_566692 != nil:
    section.add "name", valid_566692
  var valid_566693 = path.getOrDefault("subscriptionId")
  valid_566693 = validateParameter(valid_566693, JString, required = true,
                                 default = nil)
  if valid_566693 != nil:
    section.add "subscriptionId", valid_566693
  var valid_566694 = path.getOrDefault("resourceGroupName")
  valid_566694 = validateParameter(valid_566694, JString, required = true,
                                 default = nil)
  if valid_566694 != nil:
    section.add "resourceGroupName", valid_566694
  var valid_566695 = path.getOrDefault("entityName")
  valid_566695 = validateParameter(valid_566695, JString, required = true,
                                 default = nil)
  if valid_566695 != nil:
    section.add "entityName", valid_566695
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566696 = query.getOrDefault("api-version")
  valid_566696 = validateParameter(valid_566696, JString, required = true,
                                 default = nil)
  if valid_566696 != nil:
    section.add "api-version", valid_566696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566697: Call_WebAppsDeleteRelayServiceConnectionSlot_566688;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_566697.validator(path, query, header, formData, body)
  let scheme = call_566697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566697.url(scheme.get, call_566697.host, call_566697.base,
                         call_566697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566697, url, valid)

proc call*(call_566698: Call_WebAppsDeleteRelayServiceConnectionSlot_566688;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnectionSlot
  ## Deletes a relay service connection by its name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_566699 = newJObject()
  var query_566700 = newJObject()
  add(path_566699, "slot", newJString(slot))
  add(query_566700, "api-version", newJString(apiVersion))
  add(path_566699, "name", newJString(name))
  add(path_566699, "subscriptionId", newJString(subscriptionId))
  add(path_566699, "resourceGroupName", newJString(resourceGroupName))
  add(path_566699, "entityName", newJString(entityName))
  result = call_566698.call(path_566699, query_566700, nil, nil, nil)

var webAppsDeleteRelayServiceConnectionSlot* = Call_WebAppsDeleteRelayServiceConnectionSlot_566688(
    name: "webAppsDeleteRelayServiceConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnectionSlot_566689, base: "",
    url: url_WebAppsDeleteRelayServiceConnectionSlot_566690,
    schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiersSlot_566716 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceIdentifiersSlot_566718(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiersSlot_566717(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566719 = path.getOrDefault("slot")
  valid_566719 = validateParameter(valid_566719, JString, required = true,
                                 default = nil)
  if valid_566719 != nil:
    section.add "slot", valid_566719
  var valid_566720 = path.getOrDefault("name")
  valid_566720 = validateParameter(valid_566720, JString, required = true,
                                 default = nil)
  if valid_566720 != nil:
    section.add "name", valid_566720
  var valid_566721 = path.getOrDefault("subscriptionId")
  valid_566721 = validateParameter(valid_566721, JString, required = true,
                                 default = nil)
  if valid_566721 != nil:
    section.add "subscriptionId", valid_566721
  var valid_566722 = path.getOrDefault("resourceGroupName")
  valid_566722 = validateParameter(valid_566722, JString, required = true,
                                 default = nil)
  if valid_566722 != nil:
    section.add "resourceGroupName", valid_566722
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566723 = query.getOrDefault("api-version")
  valid_566723 = validateParameter(valid_566723, JString, required = true,
                                 default = nil)
  if valid_566723 != nil:
    section.add "api-version", valid_566723
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566724: Call_WebAppsListInstanceIdentifiersSlot_566716;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_566724.validator(path, query, header, formData, body)
  let scheme = call_566724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566724.url(scheme.get, call_566724.host, call_566724.base,
                         call_566724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566724, url, valid)

proc call*(call_566725: Call_WebAppsListInstanceIdentifiersSlot_566716;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListInstanceIdentifiersSlot
  ## Gets all scale-out instances of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566726 = newJObject()
  var query_566727 = newJObject()
  add(path_566726, "slot", newJString(slot))
  add(query_566727, "api-version", newJString(apiVersion))
  add(path_566726, "name", newJString(name))
  add(path_566726, "subscriptionId", newJString(subscriptionId))
  add(path_566726, "resourceGroupName", newJString(resourceGroupName))
  result = call_566725.call(path_566726, query_566727, nil, nil, nil)

var webAppsListInstanceIdentifiersSlot* = Call_WebAppsListInstanceIdentifiersSlot_566716(
    name: "webAppsListInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_WebAppsListInstanceIdentifiersSlot_566717, base: "",
    url: url_WebAppsListInstanceIdentifiersSlot_566718, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperationSlot_566741 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateInstanceMSDeployOperationSlot_566743(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperationSlot_566742(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566744 = path.getOrDefault("slot")
  valid_566744 = validateParameter(valid_566744, JString, required = true,
                                 default = nil)
  if valid_566744 != nil:
    section.add "slot", valid_566744
  var valid_566745 = path.getOrDefault("name")
  valid_566745 = validateParameter(valid_566745, JString, required = true,
                                 default = nil)
  if valid_566745 != nil:
    section.add "name", valid_566745
  var valid_566746 = path.getOrDefault("subscriptionId")
  valid_566746 = validateParameter(valid_566746, JString, required = true,
                                 default = nil)
  if valid_566746 != nil:
    section.add "subscriptionId", valid_566746
  var valid_566747 = path.getOrDefault("resourceGroupName")
  valid_566747 = validateParameter(valid_566747, JString, required = true,
                                 default = nil)
  if valid_566747 != nil:
    section.add "resourceGroupName", valid_566747
  var valid_566748 = path.getOrDefault("instanceId")
  valid_566748 = validateParameter(valid_566748, JString, required = true,
                                 default = nil)
  if valid_566748 != nil:
    section.add "instanceId", valid_566748
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566749 = query.getOrDefault("api-version")
  valid_566749 = validateParameter(valid_566749, JString, required = true,
                                 default = nil)
  if valid_566749 != nil:
    section.add "api-version", valid_566749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_566751: Call_WebAppsCreateInstanceMSDeployOperationSlot_566741;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_566751.validator(path, query, header, formData, body)
  let scheme = call_566751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566751.url(scheme.get, call_566751.host, call_566751.base,
                         call_566751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566751, url, valid)

proc call*(call_566752: Call_WebAppsCreateInstanceMSDeployOperationSlot_566741;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          MSDeploy: JsonNode; resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsCreateInstanceMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_566753 = newJObject()
  var query_566754 = newJObject()
  var body_566755 = newJObject()
  add(path_566753, "slot", newJString(slot))
  add(query_566754, "api-version", newJString(apiVersion))
  add(path_566753, "name", newJString(name))
  add(path_566753, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_566755 = MSDeploy
  add(path_566753, "resourceGroupName", newJString(resourceGroupName))
  add(path_566753, "instanceId", newJString(instanceId))
  result = call_566752.call(path_566753, query_566754, nil, nil, body_566755)

var webAppsCreateInstanceMSDeployOperationSlot* = Call_WebAppsCreateInstanceMSDeployOperationSlot_566741(
    name: "webAppsCreateInstanceMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperationSlot_566742,
    base: "", url: url_WebAppsCreateInstanceMSDeployOperationSlot_566743,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatusSlot_566728 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMsDeployStatusSlot_566730(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatusSlot_566729(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566731 = path.getOrDefault("slot")
  valid_566731 = validateParameter(valid_566731, JString, required = true,
                                 default = nil)
  if valid_566731 != nil:
    section.add "slot", valid_566731
  var valid_566732 = path.getOrDefault("name")
  valid_566732 = validateParameter(valid_566732, JString, required = true,
                                 default = nil)
  if valid_566732 != nil:
    section.add "name", valid_566732
  var valid_566733 = path.getOrDefault("subscriptionId")
  valid_566733 = validateParameter(valid_566733, JString, required = true,
                                 default = nil)
  if valid_566733 != nil:
    section.add "subscriptionId", valid_566733
  var valid_566734 = path.getOrDefault("resourceGroupName")
  valid_566734 = validateParameter(valid_566734, JString, required = true,
                                 default = nil)
  if valid_566734 != nil:
    section.add "resourceGroupName", valid_566734
  var valid_566735 = path.getOrDefault("instanceId")
  valid_566735 = validateParameter(valid_566735, JString, required = true,
                                 default = nil)
  if valid_566735 != nil:
    section.add "instanceId", valid_566735
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566736 = query.getOrDefault("api-version")
  valid_566736 = validateParameter(valid_566736, JString, required = true,
                                 default = nil)
  if valid_566736 != nil:
    section.add "api-version", valid_566736
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566737: Call_WebAppsGetInstanceMsDeployStatusSlot_566728;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_566737.validator(path, query, header, formData, body)
  let scheme = call_566737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566737.url(scheme.get, call_566737.host, call_566737.base,
                         call_566737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566737, url, valid)

proc call*(call_566738: Call_WebAppsGetInstanceMsDeployStatusSlot_566728;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_566739 = newJObject()
  var query_566740 = newJObject()
  add(path_566739, "slot", newJString(slot))
  add(query_566740, "api-version", newJString(apiVersion))
  add(path_566739, "name", newJString(name))
  add(path_566739, "subscriptionId", newJString(subscriptionId))
  add(path_566739, "resourceGroupName", newJString(resourceGroupName))
  add(path_566739, "instanceId", newJString(instanceId))
  result = call_566738.call(path_566739, query_566740, nil, nil, nil)

var webAppsGetInstanceMsDeployStatusSlot* = Call_WebAppsGetInstanceMsDeployStatusSlot_566728(
    name: "webAppsGetInstanceMsDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatusSlot_566729, base: "",
    url: url_WebAppsGetInstanceMsDeployStatusSlot_566730, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLogSlot_566756 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceMSDeployLogSlot_566758(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLogSlot_566757(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566759 = path.getOrDefault("slot")
  valid_566759 = validateParameter(valid_566759, JString, required = true,
                                 default = nil)
  if valid_566759 != nil:
    section.add "slot", valid_566759
  var valid_566760 = path.getOrDefault("name")
  valid_566760 = validateParameter(valid_566760, JString, required = true,
                                 default = nil)
  if valid_566760 != nil:
    section.add "name", valid_566760
  var valid_566761 = path.getOrDefault("subscriptionId")
  valid_566761 = validateParameter(valid_566761, JString, required = true,
                                 default = nil)
  if valid_566761 != nil:
    section.add "subscriptionId", valid_566761
  var valid_566762 = path.getOrDefault("resourceGroupName")
  valid_566762 = validateParameter(valid_566762, JString, required = true,
                                 default = nil)
  if valid_566762 != nil:
    section.add "resourceGroupName", valid_566762
  var valid_566763 = path.getOrDefault("instanceId")
  valid_566763 = validateParameter(valid_566763, JString, required = true,
                                 default = nil)
  if valid_566763 != nil:
    section.add "instanceId", valid_566763
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566764 = query.getOrDefault("api-version")
  valid_566764 = validateParameter(valid_566764, JString, required = true,
                                 default = nil)
  if valid_566764 != nil:
    section.add "api-version", valid_566764
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566765: Call_WebAppsGetInstanceMSDeployLogSlot_566756;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_566765.validator(path, query, header, formData, body)
  let scheme = call_566765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566765.url(scheme.get, call_566765.host, call_566765.base,
                         call_566765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566765, url, valid)

proc call*(call_566766: Call_WebAppsGetInstanceMSDeployLogSlot_566756;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_566767 = newJObject()
  var query_566768 = newJObject()
  add(path_566767, "slot", newJString(slot))
  add(query_566768, "api-version", newJString(apiVersion))
  add(path_566767, "name", newJString(name))
  add(path_566767, "subscriptionId", newJString(subscriptionId))
  add(path_566767, "resourceGroupName", newJString(resourceGroupName))
  add(path_566767, "instanceId", newJString(instanceId))
  result = call_566766.call(path_566767, query_566768, nil, nil, nil)

var webAppsGetInstanceMSDeployLogSlot* = Call_WebAppsGetInstanceMSDeployLogSlot_566756(
    name: "webAppsGetInstanceMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLogSlot_566757, base: "",
    url: url_WebAppsGetInstanceMSDeployLogSlot_566758, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessesSlot_566769 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessesSlot_566771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessesSlot_566770(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566772 = path.getOrDefault("slot")
  valid_566772 = validateParameter(valid_566772, JString, required = true,
                                 default = nil)
  if valid_566772 != nil:
    section.add "slot", valid_566772
  var valid_566773 = path.getOrDefault("name")
  valid_566773 = validateParameter(valid_566773, JString, required = true,
                                 default = nil)
  if valid_566773 != nil:
    section.add "name", valid_566773
  var valid_566774 = path.getOrDefault("subscriptionId")
  valid_566774 = validateParameter(valid_566774, JString, required = true,
                                 default = nil)
  if valid_566774 != nil:
    section.add "subscriptionId", valid_566774
  var valid_566775 = path.getOrDefault("resourceGroupName")
  valid_566775 = validateParameter(valid_566775, JString, required = true,
                                 default = nil)
  if valid_566775 != nil:
    section.add "resourceGroupName", valid_566775
  var valid_566776 = path.getOrDefault("instanceId")
  valid_566776 = validateParameter(valid_566776, JString, required = true,
                                 default = nil)
  if valid_566776 != nil:
    section.add "instanceId", valid_566776
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566777 = query.getOrDefault("api-version")
  valid_566777 = validateParameter(valid_566777, JString, required = true,
                                 default = nil)
  if valid_566777 != nil:
    section.add "api-version", valid_566777
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566778: Call_WebAppsListInstanceProcessesSlot_566769;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566778.validator(path, query, header, formData, body)
  let scheme = call_566778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566778.url(scheme.get, call_566778.host, call_566778.base,
                         call_566778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566778, url, valid)

proc call*(call_566779: Call_WebAppsListInstanceProcessesSlot_566769; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566780 = newJObject()
  var query_566781 = newJObject()
  add(path_566780, "slot", newJString(slot))
  add(query_566781, "api-version", newJString(apiVersion))
  add(path_566780, "name", newJString(name))
  add(path_566780, "subscriptionId", newJString(subscriptionId))
  add(path_566780, "resourceGroupName", newJString(resourceGroupName))
  add(path_566780, "instanceId", newJString(instanceId))
  result = call_566779.call(path_566780, query_566781, nil, nil, nil)

var webAppsListInstanceProcessesSlot* = Call_WebAppsListInstanceProcessesSlot_566769(
    name: "webAppsListInstanceProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcessesSlot_566770, base: "",
    url: url_WebAppsListInstanceProcessesSlot_566771, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessSlot_566782 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessSlot_566784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessSlot_566783(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566785 = path.getOrDefault("slot")
  valid_566785 = validateParameter(valid_566785, JString, required = true,
                                 default = nil)
  if valid_566785 != nil:
    section.add "slot", valid_566785
  var valid_566786 = path.getOrDefault("name")
  valid_566786 = validateParameter(valid_566786, JString, required = true,
                                 default = nil)
  if valid_566786 != nil:
    section.add "name", valid_566786
  var valid_566787 = path.getOrDefault("subscriptionId")
  valid_566787 = validateParameter(valid_566787, JString, required = true,
                                 default = nil)
  if valid_566787 != nil:
    section.add "subscriptionId", valid_566787
  var valid_566788 = path.getOrDefault("resourceGroupName")
  valid_566788 = validateParameter(valid_566788, JString, required = true,
                                 default = nil)
  if valid_566788 != nil:
    section.add "resourceGroupName", valid_566788
  var valid_566789 = path.getOrDefault("processId")
  valid_566789 = validateParameter(valid_566789, JString, required = true,
                                 default = nil)
  if valid_566789 != nil:
    section.add "processId", valid_566789
  var valid_566790 = path.getOrDefault("instanceId")
  valid_566790 = validateParameter(valid_566790, JString, required = true,
                                 default = nil)
  if valid_566790 != nil:
    section.add "instanceId", valid_566790
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566791 = query.getOrDefault("api-version")
  valid_566791 = validateParameter(valid_566791, JString, required = true,
                                 default = nil)
  if valid_566791 != nil:
    section.add "api-version", valid_566791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566792: Call_WebAppsGetInstanceProcessSlot_566782; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566792.validator(path, query, header, formData, body)
  let scheme = call_566792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566792.url(scheme.get, call_566792.host, call_566792.base,
                         call_566792.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566792, url, valid)

proc call*(call_566793: Call_WebAppsGetInstanceProcessSlot_566782; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566794 = newJObject()
  var query_566795 = newJObject()
  add(path_566794, "slot", newJString(slot))
  add(query_566795, "api-version", newJString(apiVersion))
  add(path_566794, "name", newJString(name))
  add(path_566794, "subscriptionId", newJString(subscriptionId))
  add(path_566794, "resourceGroupName", newJString(resourceGroupName))
  add(path_566794, "processId", newJString(processId))
  add(path_566794, "instanceId", newJString(instanceId))
  result = call_566793.call(path_566794, query_566795, nil, nil, nil)

var webAppsGetInstanceProcessSlot* = Call_WebAppsGetInstanceProcessSlot_566782(
    name: "webAppsGetInstanceProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcessSlot_566783, base: "",
    url: url_WebAppsGetInstanceProcessSlot_566784, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcessSlot_566796 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteInstanceProcessSlot_566798(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcessSlot_566797(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566799 = path.getOrDefault("slot")
  valid_566799 = validateParameter(valid_566799, JString, required = true,
                                 default = nil)
  if valid_566799 != nil:
    section.add "slot", valid_566799
  var valid_566800 = path.getOrDefault("name")
  valid_566800 = validateParameter(valid_566800, JString, required = true,
                                 default = nil)
  if valid_566800 != nil:
    section.add "name", valid_566800
  var valid_566801 = path.getOrDefault("subscriptionId")
  valid_566801 = validateParameter(valid_566801, JString, required = true,
                                 default = nil)
  if valid_566801 != nil:
    section.add "subscriptionId", valid_566801
  var valid_566802 = path.getOrDefault("resourceGroupName")
  valid_566802 = validateParameter(valid_566802, JString, required = true,
                                 default = nil)
  if valid_566802 != nil:
    section.add "resourceGroupName", valid_566802
  var valid_566803 = path.getOrDefault("processId")
  valid_566803 = validateParameter(valid_566803, JString, required = true,
                                 default = nil)
  if valid_566803 != nil:
    section.add "processId", valid_566803
  var valid_566804 = path.getOrDefault("instanceId")
  valid_566804 = validateParameter(valid_566804, JString, required = true,
                                 default = nil)
  if valid_566804 != nil:
    section.add "instanceId", valid_566804
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566805 = query.getOrDefault("api-version")
  valid_566805 = validateParameter(valid_566805, JString, required = true,
                                 default = nil)
  if valid_566805 != nil:
    section.add "api-version", valid_566805
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566806: Call_WebAppsDeleteInstanceProcessSlot_566796;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_566806.validator(path, query, header, formData, body)
  let scheme = call_566806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566806.url(scheme.get, call_566806.host, call_566806.base,
                         call_566806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566806, url, valid)

proc call*(call_566807: Call_WebAppsDeleteInstanceProcessSlot_566796; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566808 = newJObject()
  var query_566809 = newJObject()
  add(path_566808, "slot", newJString(slot))
  add(query_566809, "api-version", newJString(apiVersion))
  add(path_566808, "name", newJString(name))
  add(path_566808, "subscriptionId", newJString(subscriptionId))
  add(path_566808, "resourceGroupName", newJString(resourceGroupName))
  add(path_566808, "processId", newJString(processId))
  add(path_566808, "instanceId", newJString(instanceId))
  result = call_566807.call(path_566808, query_566809, nil, nil, nil)

var webAppsDeleteInstanceProcessSlot* = Call_WebAppsDeleteInstanceProcessSlot_566796(
    name: "webAppsDeleteInstanceProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcessSlot_566797, base: "",
    url: url_WebAppsDeleteInstanceProcessSlot_566798, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDumpSlot_566810 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessDumpSlot_566812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDumpSlot_566811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566813 = path.getOrDefault("slot")
  valid_566813 = validateParameter(valid_566813, JString, required = true,
                                 default = nil)
  if valid_566813 != nil:
    section.add "slot", valid_566813
  var valid_566814 = path.getOrDefault("name")
  valid_566814 = validateParameter(valid_566814, JString, required = true,
                                 default = nil)
  if valid_566814 != nil:
    section.add "name", valid_566814
  var valid_566815 = path.getOrDefault("subscriptionId")
  valid_566815 = validateParameter(valid_566815, JString, required = true,
                                 default = nil)
  if valid_566815 != nil:
    section.add "subscriptionId", valid_566815
  var valid_566816 = path.getOrDefault("resourceGroupName")
  valid_566816 = validateParameter(valid_566816, JString, required = true,
                                 default = nil)
  if valid_566816 != nil:
    section.add "resourceGroupName", valid_566816
  var valid_566817 = path.getOrDefault("processId")
  valid_566817 = validateParameter(valid_566817, JString, required = true,
                                 default = nil)
  if valid_566817 != nil:
    section.add "processId", valid_566817
  var valid_566818 = path.getOrDefault("instanceId")
  valid_566818 = validateParameter(valid_566818, JString, required = true,
                                 default = nil)
  if valid_566818 != nil:
    section.add "instanceId", valid_566818
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566819 = query.getOrDefault("api-version")
  valid_566819 = validateParameter(valid_566819, JString, required = true,
                                 default = nil)
  if valid_566819 != nil:
    section.add "api-version", valid_566819
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566820: Call_WebAppsGetInstanceProcessDumpSlot_566810;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566820.validator(path, query, header, formData, body)
  let scheme = call_566820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566820.url(scheme.get, call_566820.host, call_566820.base,
                         call_566820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566820, url, valid)

proc call*(call_566821: Call_WebAppsGetInstanceProcessDumpSlot_566810;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566822 = newJObject()
  var query_566823 = newJObject()
  add(path_566822, "slot", newJString(slot))
  add(query_566823, "api-version", newJString(apiVersion))
  add(path_566822, "name", newJString(name))
  add(path_566822, "subscriptionId", newJString(subscriptionId))
  add(path_566822, "resourceGroupName", newJString(resourceGroupName))
  add(path_566822, "processId", newJString(processId))
  add(path_566822, "instanceId", newJString(instanceId))
  result = call_566821.call(path_566822, query_566823, nil, nil, nil)

var webAppsGetInstanceProcessDumpSlot* = Call_WebAppsGetInstanceProcessDumpSlot_566810(
    name: "webAppsGetInstanceProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDumpSlot_566811, base: "",
    url: url_WebAppsGetInstanceProcessDumpSlot_566812, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModulesSlot_566824 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessModulesSlot_566826(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModulesSlot_566825(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566827 = path.getOrDefault("slot")
  valid_566827 = validateParameter(valid_566827, JString, required = true,
                                 default = nil)
  if valid_566827 != nil:
    section.add "slot", valid_566827
  var valid_566828 = path.getOrDefault("name")
  valid_566828 = validateParameter(valid_566828, JString, required = true,
                                 default = nil)
  if valid_566828 != nil:
    section.add "name", valid_566828
  var valid_566829 = path.getOrDefault("subscriptionId")
  valid_566829 = validateParameter(valid_566829, JString, required = true,
                                 default = nil)
  if valid_566829 != nil:
    section.add "subscriptionId", valid_566829
  var valid_566830 = path.getOrDefault("resourceGroupName")
  valid_566830 = validateParameter(valid_566830, JString, required = true,
                                 default = nil)
  if valid_566830 != nil:
    section.add "resourceGroupName", valid_566830
  var valid_566831 = path.getOrDefault("processId")
  valid_566831 = validateParameter(valid_566831, JString, required = true,
                                 default = nil)
  if valid_566831 != nil:
    section.add "processId", valid_566831
  var valid_566832 = path.getOrDefault("instanceId")
  valid_566832 = validateParameter(valid_566832, JString, required = true,
                                 default = nil)
  if valid_566832 != nil:
    section.add "instanceId", valid_566832
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566833 = query.getOrDefault("api-version")
  valid_566833 = validateParameter(valid_566833, JString, required = true,
                                 default = nil)
  if valid_566833 != nil:
    section.add "api-version", valid_566833
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566834: Call_WebAppsListInstanceProcessModulesSlot_566824;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566834.validator(path, query, header, formData, body)
  let scheme = call_566834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566834.url(scheme.get, call_566834.host, call_566834.base,
                         call_566834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566834, url, valid)

proc call*(call_566835: Call_WebAppsListInstanceProcessModulesSlot_566824;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566836 = newJObject()
  var query_566837 = newJObject()
  add(path_566836, "slot", newJString(slot))
  add(query_566837, "api-version", newJString(apiVersion))
  add(path_566836, "name", newJString(name))
  add(path_566836, "subscriptionId", newJString(subscriptionId))
  add(path_566836, "resourceGroupName", newJString(resourceGroupName))
  add(path_566836, "processId", newJString(processId))
  add(path_566836, "instanceId", newJString(instanceId))
  result = call_566835.call(path_566836, query_566837, nil, nil, nil)

var webAppsListInstanceProcessModulesSlot* = Call_WebAppsListInstanceProcessModulesSlot_566824(
    name: "webAppsListInstanceProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModulesSlot_566825, base: "",
    url: url_WebAppsListInstanceProcessModulesSlot_566826, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModuleSlot_566838 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessModuleSlot_566840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModuleSlot_566839(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566841 = path.getOrDefault("slot")
  valid_566841 = validateParameter(valid_566841, JString, required = true,
                                 default = nil)
  if valid_566841 != nil:
    section.add "slot", valid_566841
  var valid_566842 = path.getOrDefault("name")
  valid_566842 = validateParameter(valid_566842, JString, required = true,
                                 default = nil)
  if valid_566842 != nil:
    section.add "name", valid_566842
  var valid_566843 = path.getOrDefault("subscriptionId")
  valid_566843 = validateParameter(valid_566843, JString, required = true,
                                 default = nil)
  if valid_566843 != nil:
    section.add "subscriptionId", valid_566843
  var valid_566844 = path.getOrDefault("resourceGroupName")
  valid_566844 = validateParameter(valid_566844, JString, required = true,
                                 default = nil)
  if valid_566844 != nil:
    section.add "resourceGroupName", valid_566844
  var valid_566845 = path.getOrDefault("processId")
  valid_566845 = validateParameter(valid_566845, JString, required = true,
                                 default = nil)
  if valid_566845 != nil:
    section.add "processId", valid_566845
  var valid_566846 = path.getOrDefault("baseAddress")
  valid_566846 = validateParameter(valid_566846, JString, required = true,
                                 default = nil)
  if valid_566846 != nil:
    section.add "baseAddress", valid_566846
  var valid_566847 = path.getOrDefault("instanceId")
  valid_566847 = validateParameter(valid_566847, JString, required = true,
                                 default = nil)
  if valid_566847 != nil:
    section.add "instanceId", valid_566847
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566848 = query.getOrDefault("api-version")
  valid_566848 = validateParameter(valid_566848, JString, required = true,
                                 default = nil)
  if valid_566848 != nil:
    section.add "api-version", valid_566848
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566849: Call_WebAppsGetInstanceProcessModuleSlot_566838;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566849.validator(path, query, header, formData, body)
  let scheme = call_566849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566849.url(scheme.get, call_566849.host, call_566849.base,
                         call_566849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566849, url, valid)

proc call*(call_566850: Call_WebAppsGetInstanceProcessModuleSlot_566838;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566851 = newJObject()
  var query_566852 = newJObject()
  add(path_566851, "slot", newJString(slot))
  add(query_566852, "api-version", newJString(apiVersion))
  add(path_566851, "name", newJString(name))
  add(path_566851, "subscriptionId", newJString(subscriptionId))
  add(path_566851, "resourceGroupName", newJString(resourceGroupName))
  add(path_566851, "processId", newJString(processId))
  add(path_566851, "baseAddress", newJString(baseAddress))
  add(path_566851, "instanceId", newJString(instanceId))
  result = call_566850.call(path_566851, query_566852, nil, nil, nil)

var webAppsGetInstanceProcessModuleSlot* = Call_WebAppsGetInstanceProcessModuleSlot_566838(
    name: "webAppsGetInstanceProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModuleSlot_566839, base: "",
    url: url_WebAppsGetInstanceProcessModuleSlot_566840, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreadsSlot_566853 = ref object of OpenApiRestCall_563564
proc url_WebAppsListInstanceProcessThreadsSlot_566855(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreadsSlot_566854(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566856 = path.getOrDefault("slot")
  valid_566856 = validateParameter(valid_566856, JString, required = true,
                                 default = nil)
  if valid_566856 != nil:
    section.add "slot", valid_566856
  var valid_566857 = path.getOrDefault("name")
  valid_566857 = validateParameter(valid_566857, JString, required = true,
                                 default = nil)
  if valid_566857 != nil:
    section.add "name", valid_566857
  var valid_566858 = path.getOrDefault("subscriptionId")
  valid_566858 = validateParameter(valid_566858, JString, required = true,
                                 default = nil)
  if valid_566858 != nil:
    section.add "subscriptionId", valid_566858
  var valid_566859 = path.getOrDefault("resourceGroupName")
  valid_566859 = validateParameter(valid_566859, JString, required = true,
                                 default = nil)
  if valid_566859 != nil:
    section.add "resourceGroupName", valid_566859
  var valid_566860 = path.getOrDefault("processId")
  valid_566860 = validateParameter(valid_566860, JString, required = true,
                                 default = nil)
  if valid_566860 != nil:
    section.add "processId", valid_566860
  var valid_566861 = path.getOrDefault("instanceId")
  valid_566861 = validateParameter(valid_566861, JString, required = true,
                                 default = nil)
  if valid_566861 != nil:
    section.add "instanceId", valid_566861
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566862 = query.getOrDefault("api-version")
  valid_566862 = validateParameter(valid_566862, JString, required = true,
                                 default = nil)
  if valid_566862 != nil:
    section.add "api-version", valid_566862
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566863: Call_WebAppsListInstanceProcessThreadsSlot_566853;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_566863.validator(path, query, header, formData, body)
  let scheme = call_566863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566863.url(scheme.get, call_566863.host, call_566863.base,
                         call_566863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566863, url, valid)

proc call*(call_566864: Call_WebAppsListInstanceProcessThreadsSlot_566853;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566865 = newJObject()
  var query_566866 = newJObject()
  add(path_566865, "slot", newJString(slot))
  add(query_566866, "api-version", newJString(apiVersion))
  add(path_566865, "name", newJString(name))
  add(path_566865, "subscriptionId", newJString(subscriptionId))
  add(path_566865, "resourceGroupName", newJString(resourceGroupName))
  add(path_566865, "processId", newJString(processId))
  add(path_566865, "instanceId", newJString(instanceId))
  result = call_566864.call(path_566865, query_566866, nil, nil, nil)

var webAppsListInstanceProcessThreadsSlot* = Call_WebAppsListInstanceProcessThreadsSlot_566853(
    name: "webAppsListInstanceProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreadsSlot_566854, base: "",
    url: url_WebAppsListInstanceProcessThreadsSlot_566855, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThreadSlot_566867 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetInstanceProcessThreadSlot_566869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThreadSlot_566868(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_566870 = path.getOrDefault("threadId")
  valid_566870 = validateParameter(valid_566870, JString, required = true,
                                 default = nil)
  if valid_566870 != nil:
    section.add "threadId", valid_566870
  var valid_566871 = path.getOrDefault("slot")
  valid_566871 = validateParameter(valid_566871, JString, required = true,
                                 default = nil)
  if valid_566871 != nil:
    section.add "slot", valid_566871
  var valid_566872 = path.getOrDefault("name")
  valid_566872 = validateParameter(valid_566872, JString, required = true,
                                 default = nil)
  if valid_566872 != nil:
    section.add "name", valid_566872
  var valid_566873 = path.getOrDefault("subscriptionId")
  valid_566873 = validateParameter(valid_566873, JString, required = true,
                                 default = nil)
  if valid_566873 != nil:
    section.add "subscriptionId", valid_566873
  var valid_566874 = path.getOrDefault("resourceGroupName")
  valid_566874 = validateParameter(valid_566874, JString, required = true,
                                 default = nil)
  if valid_566874 != nil:
    section.add "resourceGroupName", valid_566874
  var valid_566875 = path.getOrDefault("processId")
  valid_566875 = validateParameter(valid_566875, JString, required = true,
                                 default = nil)
  if valid_566875 != nil:
    section.add "processId", valid_566875
  var valid_566876 = path.getOrDefault("instanceId")
  valid_566876 = validateParameter(valid_566876, JString, required = true,
                                 default = nil)
  if valid_566876 != nil:
    section.add "instanceId", valid_566876
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566877 = query.getOrDefault("api-version")
  valid_566877 = validateParameter(valid_566877, JString, required = true,
                                 default = nil)
  if valid_566877 != nil:
    section.add "api-version", valid_566877
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566878: Call_WebAppsGetInstanceProcessThreadSlot_566867;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_566878.validator(path, query, header, formData, body)
  let scheme = call_566878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566878.url(scheme.get, call_566878.host, call_566878.base,
                         call_566878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566878, url, valid)

proc call*(call_566879: Call_WebAppsGetInstanceProcessThreadSlot_566867;
          threadId: string; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string; processId: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_566880 = newJObject()
  var query_566881 = newJObject()
  add(path_566880, "threadId", newJString(threadId))
  add(path_566880, "slot", newJString(slot))
  add(query_566881, "api-version", newJString(apiVersion))
  add(path_566880, "name", newJString(name))
  add(path_566880, "subscriptionId", newJString(subscriptionId))
  add(path_566880, "resourceGroupName", newJString(resourceGroupName))
  add(path_566880, "processId", newJString(processId))
  add(path_566880, "instanceId", newJString(instanceId))
  result = call_566879.call(path_566880, query_566881, nil, nil, nil)

var webAppsGetInstanceProcessThreadSlot* = Call_WebAppsGetInstanceProcessThreadSlot_566867(
    name: "webAppsGetInstanceProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThreadSlot_566868, base: "",
    url: url_WebAppsGetInstanceProcessThreadSlot_566869, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneableSlot_566882 = ref object of OpenApiRestCall_563564
proc url_WebAppsIsCloneableSlot_566884(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneableSlot_566883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566885 = path.getOrDefault("slot")
  valid_566885 = validateParameter(valid_566885, JString, required = true,
                                 default = nil)
  if valid_566885 != nil:
    section.add "slot", valid_566885
  var valid_566886 = path.getOrDefault("name")
  valid_566886 = validateParameter(valid_566886, JString, required = true,
                                 default = nil)
  if valid_566886 != nil:
    section.add "name", valid_566886
  var valid_566887 = path.getOrDefault("subscriptionId")
  valid_566887 = validateParameter(valid_566887, JString, required = true,
                                 default = nil)
  if valid_566887 != nil:
    section.add "subscriptionId", valid_566887
  var valid_566888 = path.getOrDefault("resourceGroupName")
  valid_566888 = validateParameter(valid_566888, JString, required = true,
                                 default = nil)
  if valid_566888 != nil:
    section.add "resourceGroupName", valid_566888
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566889 = query.getOrDefault("api-version")
  valid_566889 = validateParameter(valid_566889, JString, required = true,
                                 default = nil)
  if valid_566889 != nil:
    section.add "api-version", valid_566889
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566890: Call_WebAppsIsCloneableSlot_566882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_566890.validator(path, query, header, formData, body)
  let scheme = call_566890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566890.url(scheme.get, call_566890.host, call_566890.base,
                         call_566890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566890, url, valid)

proc call*(call_566891: Call_WebAppsIsCloneableSlot_566882; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsIsCloneableSlot
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566892 = newJObject()
  var query_566893 = newJObject()
  add(path_566892, "slot", newJString(slot))
  add(query_566893, "api-version", newJString(apiVersion))
  add(path_566892, "name", newJString(name))
  add(path_566892, "subscriptionId", newJString(subscriptionId))
  add(path_566892, "resourceGroupName", newJString(resourceGroupName))
  result = call_566891.call(path_566892, query_566893, nil, nil, nil)

var webAppsIsCloneableSlot* = Call_WebAppsIsCloneableSlot_566882(
    name: "webAppsIsCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_WebAppsIsCloneableSlot_566883, base: "",
    url: url_WebAppsIsCloneableSlot_566884, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggersSlot_566894 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSyncFunctionTriggersSlot_566896(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggersSlot_566895(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566897 = path.getOrDefault("slot")
  valid_566897 = validateParameter(valid_566897, JString, required = true,
                                 default = nil)
  if valid_566897 != nil:
    section.add "slot", valid_566897
  var valid_566898 = path.getOrDefault("name")
  valid_566898 = validateParameter(valid_566898, JString, required = true,
                                 default = nil)
  if valid_566898 != nil:
    section.add "name", valid_566898
  var valid_566899 = path.getOrDefault("subscriptionId")
  valid_566899 = validateParameter(valid_566899, JString, required = true,
                                 default = nil)
  if valid_566899 != nil:
    section.add "subscriptionId", valid_566899
  var valid_566900 = path.getOrDefault("resourceGroupName")
  valid_566900 = validateParameter(valid_566900, JString, required = true,
                                 default = nil)
  if valid_566900 != nil:
    section.add "resourceGroupName", valid_566900
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566901 = query.getOrDefault("api-version")
  valid_566901 = validateParameter(valid_566901, JString, required = true,
                                 default = nil)
  if valid_566901 != nil:
    section.add "api-version", valid_566901
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566902: Call_WebAppsListSyncFunctionTriggersSlot_566894;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_566902.validator(path, query, header, formData, body)
  let scheme = call_566902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566902.url(scheme.get, call_566902.host, call_566902.base,
                         call_566902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566902, url, valid)

proc call*(call_566903: Call_WebAppsListSyncFunctionTriggersSlot_566894;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSyncFunctionTriggersSlot
  ## This is to allow calling via powershell and ARM template.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566904 = newJObject()
  var query_566905 = newJObject()
  add(path_566904, "slot", newJString(slot))
  add(query_566905, "api-version", newJString(apiVersion))
  add(path_566904, "name", newJString(name))
  add(path_566904, "subscriptionId", newJString(subscriptionId))
  add(path_566904, "resourceGroupName", newJString(resourceGroupName))
  result = call_566903.call(path_566904, query_566905, nil, nil, nil)

var webAppsListSyncFunctionTriggersSlot* = Call_WebAppsListSyncFunctionTriggersSlot_566894(
    name: "webAppsListSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggersSlot_566895, base: "",
    url: url_WebAppsListSyncFunctionTriggersSlot_566896, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitionsSlot_566906 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetricDefinitionsSlot_566908(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitionsSlot_566907(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566909 = path.getOrDefault("slot")
  valid_566909 = validateParameter(valid_566909, JString, required = true,
                                 default = nil)
  if valid_566909 != nil:
    section.add "slot", valid_566909
  var valid_566910 = path.getOrDefault("name")
  valid_566910 = validateParameter(valid_566910, JString, required = true,
                                 default = nil)
  if valid_566910 != nil:
    section.add "name", valid_566910
  var valid_566911 = path.getOrDefault("subscriptionId")
  valid_566911 = validateParameter(valid_566911, JString, required = true,
                                 default = nil)
  if valid_566911 != nil:
    section.add "subscriptionId", valid_566911
  var valid_566912 = path.getOrDefault("resourceGroupName")
  valid_566912 = validateParameter(valid_566912, JString, required = true,
                                 default = nil)
  if valid_566912 != nil:
    section.add "resourceGroupName", valid_566912
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566913 = query.getOrDefault("api-version")
  valid_566913 = validateParameter(valid_566913, JString, required = true,
                                 default = nil)
  if valid_566913 != nil:
    section.add "api-version", valid_566913
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566914: Call_WebAppsListMetricDefinitionsSlot_566906;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_566914.validator(path, query, header, formData, body)
  let scheme = call_566914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566914.url(scheme.get, call_566914.host, call_566914.base,
                         call_566914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566914, url, valid)

proc call*(call_566915: Call_WebAppsListMetricDefinitionsSlot_566906; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListMetricDefinitionsSlot
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566916 = newJObject()
  var query_566917 = newJObject()
  add(path_566916, "slot", newJString(slot))
  add(query_566917, "api-version", newJString(apiVersion))
  add(path_566916, "name", newJString(name))
  add(path_566916, "subscriptionId", newJString(subscriptionId))
  add(path_566916, "resourceGroupName", newJString(resourceGroupName))
  result = call_566915.call(path_566916, query_566917, nil, nil, nil)

var webAppsListMetricDefinitionsSlot* = Call_WebAppsListMetricDefinitionsSlot_566906(
    name: "webAppsListMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitionsSlot_566907, base: "",
    url: url_WebAppsListMetricDefinitionsSlot_566908, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricsSlot_566918 = ref object of OpenApiRestCall_563564
proc url_WebAppsListMetricsSlot_566920(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricsSlot_566919(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566921 = path.getOrDefault("slot")
  valid_566921 = validateParameter(valid_566921, JString, required = true,
                                 default = nil)
  if valid_566921 != nil:
    section.add "slot", valid_566921
  var valid_566922 = path.getOrDefault("name")
  valid_566922 = validateParameter(valid_566922, JString, required = true,
                                 default = nil)
  if valid_566922 != nil:
    section.add "name", valid_566922
  var valid_566923 = path.getOrDefault("subscriptionId")
  valid_566923 = validateParameter(valid_566923, JString, required = true,
                                 default = nil)
  if valid_566923 != nil:
    section.add "subscriptionId", valid_566923
  var valid_566924 = path.getOrDefault("resourceGroupName")
  valid_566924 = validateParameter(valid_566924, JString, required = true,
                                 default = nil)
  if valid_566924 != nil:
    section.add "resourceGroupName", valid_566924
  result.add "path", section
  ## parameters in `query` object:
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  var valid_566925 = query.getOrDefault("details")
  valid_566925 = validateParameter(valid_566925, JBool, required = false, default = nil)
  if valid_566925 != nil:
    section.add "details", valid_566925
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566926 = query.getOrDefault("api-version")
  valid_566926 = validateParameter(valid_566926, JString, required = true,
                                 default = nil)
  if valid_566926 != nil:
    section.add "api-version", valid_566926
  var valid_566927 = query.getOrDefault("$filter")
  valid_566927 = validateParameter(valid_566927, JString, required = false,
                                 default = nil)
  if valid_566927 != nil:
    section.add "$filter", valid_566927
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566928: Call_WebAppsListMetricsSlot_566918; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_566928.validator(path, query, header, formData, body)
  let scheme = call_566928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566928.url(scheme.get, call_566928.host, call_566928.base,
                         call_566928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566928, url, valid)

proc call*(call_566929: Call_WebAppsListMetricsSlot_566918; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetricsSlot
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_566930 = newJObject()
  var query_566931 = newJObject()
  add(query_566931, "details", newJBool(details))
  add(path_566930, "slot", newJString(slot))
  add(query_566931, "api-version", newJString(apiVersion))
  add(path_566930, "name", newJString(name))
  add(path_566930, "subscriptionId", newJString(subscriptionId))
  add(path_566930, "resourceGroupName", newJString(resourceGroupName))
  add(query_566931, "$filter", newJString(Filter))
  result = call_566929.call(path_566930, query_566931, nil, nil, nil)

var webAppsListMetricsSlot* = Call_WebAppsListMetricsSlot_566918(
    name: "webAppsListMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_WebAppsListMetricsSlot_566919, base: "",
    url: url_WebAppsListMetricsSlot_566920, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatusSlot_566932 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetMigrateMySqlStatusSlot_566934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatusSlot_566933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566935 = path.getOrDefault("slot")
  valid_566935 = validateParameter(valid_566935, JString, required = true,
                                 default = nil)
  if valid_566935 != nil:
    section.add "slot", valid_566935
  var valid_566936 = path.getOrDefault("name")
  valid_566936 = validateParameter(valid_566936, JString, required = true,
                                 default = nil)
  if valid_566936 != nil:
    section.add "name", valid_566936
  var valid_566937 = path.getOrDefault("subscriptionId")
  valid_566937 = validateParameter(valid_566937, JString, required = true,
                                 default = nil)
  if valid_566937 != nil:
    section.add "subscriptionId", valid_566937
  var valid_566938 = path.getOrDefault("resourceGroupName")
  valid_566938 = validateParameter(valid_566938, JString, required = true,
                                 default = nil)
  if valid_566938 != nil:
    section.add "resourceGroupName", valid_566938
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566939 = query.getOrDefault("api-version")
  valid_566939 = validateParameter(valid_566939, JString, required = true,
                                 default = nil)
  if valid_566939 != nil:
    section.add "api-version", valid_566939
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566940: Call_WebAppsGetMigrateMySqlStatusSlot_566932;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_566940.validator(path, query, header, formData, body)
  let scheme = call_566940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566940.url(scheme.get, call_566940.host, call_566940.base,
                         call_566940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566940, url, valid)

proc call*(call_566941: Call_WebAppsGetMigrateMySqlStatusSlot_566932; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetMigrateMySqlStatusSlot
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   slot: string (required)
  ##       : Name of the deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566942 = newJObject()
  var query_566943 = newJObject()
  add(path_566942, "slot", newJString(slot))
  add(query_566943, "api-version", newJString(apiVersion))
  add(path_566942, "name", newJString(name))
  add(path_566942, "subscriptionId", newJString(subscriptionId))
  add(path_566942, "resourceGroupName", newJString(resourceGroupName))
  result = call_566941.call(path_566942, query_566943, nil, nil, nil)

var webAppsGetMigrateMySqlStatusSlot* = Call_WebAppsGetMigrateMySqlStatusSlot_566932(
    name: "webAppsGetMigrateMySqlStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatusSlot_566933, base: "",
    url: url_WebAppsGetMigrateMySqlStatusSlot_566934, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeaturesSlot_566944 = ref object of OpenApiRestCall_563564
proc url_WebAppsListNetworkFeaturesSlot_566946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeaturesSlot_566945(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566947 = path.getOrDefault("slot")
  valid_566947 = validateParameter(valid_566947, JString, required = true,
                                 default = nil)
  if valid_566947 != nil:
    section.add "slot", valid_566947
  var valid_566948 = path.getOrDefault("view")
  valid_566948 = validateParameter(valid_566948, JString, required = true,
                                 default = nil)
  if valid_566948 != nil:
    section.add "view", valid_566948
  var valid_566949 = path.getOrDefault("name")
  valid_566949 = validateParameter(valid_566949, JString, required = true,
                                 default = nil)
  if valid_566949 != nil:
    section.add "name", valid_566949
  var valid_566950 = path.getOrDefault("subscriptionId")
  valid_566950 = validateParameter(valid_566950, JString, required = true,
                                 default = nil)
  if valid_566950 != nil:
    section.add "subscriptionId", valid_566950
  var valid_566951 = path.getOrDefault("resourceGroupName")
  valid_566951 = validateParameter(valid_566951, JString, required = true,
                                 default = nil)
  if valid_566951 != nil:
    section.add "resourceGroupName", valid_566951
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566952 = query.getOrDefault("api-version")
  valid_566952 = validateParameter(valid_566952, JString, required = true,
                                 default = nil)
  if valid_566952 != nil:
    section.add "api-version", valid_566952
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566953: Call_WebAppsListNetworkFeaturesSlot_566944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_566953.validator(path, query, header, formData, body)
  let scheme = call_566953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566953.url(scheme.get, call_566953.host, call_566953.base,
                         call_566953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566953, url, valid)

proc call*(call_566954: Call_WebAppsListNetworkFeaturesSlot_566944; slot: string;
          apiVersion: string; view: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListNetworkFeaturesSlot
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566955 = newJObject()
  var query_566956 = newJObject()
  add(path_566955, "slot", newJString(slot))
  add(query_566956, "api-version", newJString(apiVersion))
  add(path_566955, "view", newJString(view))
  add(path_566955, "name", newJString(name))
  add(path_566955, "subscriptionId", newJString(subscriptionId))
  add(path_566955, "resourceGroupName", newJString(resourceGroupName))
  result = call_566954.call(path_566955, query_566956, nil, nil, nil)

var webAppsListNetworkFeaturesSlot* = Call_WebAppsListNetworkFeaturesSlot_566944(
    name: "webAppsListNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeaturesSlot_566945, base: "",
    url: url_WebAppsListNetworkFeaturesSlot_566946, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceSlot_566957 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartWebSiteNetworkTraceSlot_566959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceSlot_566958(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566960 = path.getOrDefault("slot")
  valid_566960 = validateParameter(valid_566960, JString, required = true,
                                 default = nil)
  if valid_566960 != nil:
    section.add "slot", valid_566960
  var valid_566961 = path.getOrDefault("name")
  valid_566961 = validateParameter(valid_566961, JString, required = true,
                                 default = nil)
  if valid_566961 != nil:
    section.add "name", valid_566961
  var valid_566962 = path.getOrDefault("subscriptionId")
  valid_566962 = validateParameter(valid_566962, JString, required = true,
                                 default = nil)
  if valid_566962 != nil:
    section.add "subscriptionId", valid_566962
  var valid_566963 = path.getOrDefault("resourceGroupName")
  valid_566963 = validateParameter(valid_566963, JString, required = true,
                                 default = nil)
  if valid_566963 != nil:
    section.add "resourceGroupName", valid_566963
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566964 = query.getOrDefault("api-version")
  valid_566964 = validateParameter(valid_566964, JString, required = true,
                                 default = nil)
  if valid_566964 != nil:
    section.add "api-version", valid_566964
  var valid_566965 = query.getOrDefault("sasUrl")
  valid_566965 = validateParameter(valid_566965, JString, required = false,
                                 default = nil)
  if valid_566965 != nil:
    section.add "sasUrl", valid_566965
  var valid_566966 = query.getOrDefault("durationInSeconds")
  valid_566966 = validateParameter(valid_566966, JInt, required = false, default = nil)
  if valid_566966 != nil:
    section.add "durationInSeconds", valid_566966
  var valid_566967 = query.getOrDefault("maxFrameLength")
  valid_566967 = validateParameter(valid_566967, JInt, required = false, default = nil)
  if valid_566967 != nil:
    section.add "maxFrameLength", valid_566967
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566968: Call_WebAppsStartWebSiteNetworkTraceSlot_566957;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_566968.validator(path, query, header, formData, body)
  let scheme = call_566968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566968.url(scheme.get, call_566968.host, call_566968.base,
                         call_566968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566968, url, valid)

proc call*(call_566969: Call_WebAppsStartWebSiteNetworkTraceSlot_566957;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; sasUrl: string = ""; durationInSeconds: int = 0;
          maxFrameLength: int = 0): Recallable =
  ## webAppsStartWebSiteNetworkTraceSlot
  ## Start capturing network packets for the site.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  var path_566970 = newJObject()
  var query_566971 = newJObject()
  add(path_566970, "slot", newJString(slot))
  add(query_566971, "api-version", newJString(apiVersion))
  add(query_566971, "sasUrl", newJString(sasUrl))
  add(path_566970, "name", newJString(name))
  add(path_566970, "subscriptionId", newJString(subscriptionId))
  add(query_566971, "durationInSeconds", newJInt(durationInSeconds))
  add(path_566970, "resourceGroupName", newJString(resourceGroupName))
  add(query_566971, "maxFrameLength", newJInt(maxFrameLength))
  result = call_566969.call(path_566970, query_566971, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceSlot* = Call_WebAppsStartWebSiteNetworkTraceSlot_566957(
    name: "webAppsStartWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTraceSlot_566958, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceSlot_566959, schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTraceSlot_566972 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopWebSiteNetworkTraceSlot_566974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTraceSlot_566973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566975 = path.getOrDefault("slot")
  valid_566975 = validateParameter(valid_566975, JString, required = true,
                                 default = nil)
  if valid_566975 != nil:
    section.add "slot", valid_566975
  var valid_566976 = path.getOrDefault("name")
  valid_566976 = validateParameter(valid_566976, JString, required = true,
                                 default = nil)
  if valid_566976 != nil:
    section.add "name", valid_566976
  var valid_566977 = path.getOrDefault("subscriptionId")
  valid_566977 = validateParameter(valid_566977, JString, required = true,
                                 default = nil)
  if valid_566977 != nil:
    section.add "subscriptionId", valid_566977
  var valid_566978 = path.getOrDefault("resourceGroupName")
  valid_566978 = validateParameter(valid_566978, JString, required = true,
                                 default = nil)
  if valid_566978 != nil:
    section.add "resourceGroupName", valid_566978
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566979 = query.getOrDefault("api-version")
  valid_566979 = validateParameter(valid_566979, JString, required = true,
                                 default = nil)
  if valid_566979 != nil:
    section.add "api-version", valid_566979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566980: Call_WebAppsStopWebSiteNetworkTraceSlot_566972;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_566980.validator(path, query, header, formData, body)
  let scheme = call_566980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566980.url(scheme.get, call_566980.host, call_566980.base,
                         call_566980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566980, url, valid)

proc call*(call_566981: Call_WebAppsStopWebSiteNetworkTraceSlot_566972;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopWebSiteNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566982 = newJObject()
  var query_566983 = newJObject()
  add(path_566982, "slot", newJString(slot))
  add(query_566983, "api-version", newJString(apiVersion))
  add(path_566982, "name", newJString(name))
  add(path_566982, "subscriptionId", newJString(subscriptionId))
  add(path_566982, "resourceGroupName", newJString(resourceGroupName))
  result = call_566981.call(path_566982, query_566983, nil, nil, nil)

var webAppsStopWebSiteNetworkTraceSlot* = Call_WebAppsStopWebSiteNetworkTraceSlot_566972(
    name: "webAppsStopWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTraceSlot_566973, base: "",
    url: url_WebAppsStopWebSiteNetworkTraceSlot_566974, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPasswordSlot_566984 = ref object of OpenApiRestCall_563564
proc url_WebAppsGenerateNewSitePublishingPasswordSlot_566986(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPasswordSlot_566985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566987 = path.getOrDefault("slot")
  valid_566987 = validateParameter(valid_566987, JString, required = true,
                                 default = nil)
  if valid_566987 != nil:
    section.add "slot", valid_566987
  var valid_566988 = path.getOrDefault("name")
  valid_566988 = validateParameter(valid_566988, JString, required = true,
                                 default = nil)
  if valid_566988 != nil:
    section.add "name", valid_566988
  var valid_566989 = path.getOrDefault("subscriptionId")
  valid_566989 = validateParameter(valid_566989, JString, required = true,
                                 default = nil)
  if valid_566989 != nil:
    section.add "subscriptionId", valid_566989
  var valid_566990 = path.getOrDefault("resourceGroupName")
  valid_566990 = validateParameter(valid_566990, JString, required = true,
                                 default = nil)
  if valid_566990 != nil:
    section.add "resourceGroupName", valid_566990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_566991 = query.getOrDefault("api-version")
  valid_566991 = validateParameter(valid_566991, JString, required = true,
                                 default = nil)
  if valid_566991 != nil:
    section.add "api-version", valid_566991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_566992: Call_WebAppsGenerateNewSitePublishingPasswordSlot_566984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_566992.validator(path, query, header, formData, body)
  let scheme = call_566992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_566992.url(scheme.get, call_566992.host, call_566992.base,
                         call_566992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_566992, url, valid)

proc call*(call_566993: Call_WebAppsGenerateNewSitePublishingPasswordSlot_566984;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGenerateNewSitePublishingPasswordSlot
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_566994 = newJObject()
  var query_566995 = newJObject()
  add(path_566994, "slot", newJString(slot))
  add(query_566995, "api-version", newJString(apiVersion))
  add(path_566994, "name", newJString(name))
  add(path_566994, "subscriptionId", newJString(subscriptionId))
  add(path_566994, "resourceGroupName", newJString(resourceGroupName))
  result = call_566993.call(path_566994, query_566995, nil, nil, nil)

var webAppsGenerateNewSitePublishingPasswordSlot* = Call_WebAppsGenerateNewSitePublishingPasswordSlot_566984(
    name: "webAppsGenerateNewSitePublishingPasswordSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPasswordSlot_566985,
    base: "", url: url_WebAppsGenerateNewSitePublishingPasswordSlot_566986,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCountersSlot_566996 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPerfMonCountersSlot_566998(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCountersSlot_566997(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_566999 = path.getOrDefault("slot")
  valid_566999 = validateParameter(valid_566999, JString, required = true,
                                 default = nil)
  if valid_566999 != nil:
    section.add "slot", valid_566999
  var valid_567000 = path.getOrDefault("name")
  valid_567000 = validateParameter(valid_567000, JString, required = true,
                                 default = nil)
  if valid_567000 != nil:
    section.add "name", valid_567000
  var valid_567001 = path.getOrDefault("subscriptionId")
  valid_567001 = validateParameter(valid_567001, JString, required = true,
                                 default = nil)
  if valid_567001 != nil:
    section.add "subscriptionId", valid_567001
  var valid_567002 = path.getOrDefault("resourceGroupName")
  valid_567002 = validateParameter(valid_567002, JString, required = true,
                                 default = nil)
  if valid_567002 != nil:
    section.add "resourceGroupName", valid_567002
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567003 = query.getOrDefault("api-version")
  valid_567003 = validateParameter(valid_567003, JString, required = true,
                                 default = nil)
  if valid_567003 != nil:
    section.add "api-version", valid_567003
  var valid_567004 = query.getOrDefault("$filter")
  valid_567004 = validateParameter(valid_567004, JString, required = false,
                                 default = nil)
  if valid_567004 != nil:
    section.add "$filter", valid_567004
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567005: Call_WebAppsListPerfMonCountersSlot_566996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_567005.validator(path, query, header, formData, body)
  let scheme = call_567005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567005.url(scheme.get, call_567005.host, call_567005.base,
                         call_567005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567005, url, valid)

proc call*(call_567006: Call_WebAppsListPerfMonCountersSlot_566996; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCountersSlot
  ## Gets perfmon counters for web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567007 = newJObject()
  var query_567008 = newJObject()
  add(path_567007, "slot", newJString(slot))
  add(query_567008, "api-version", newJString(apiVersion))
  add(path_567007, "name", newJString(name))
  add(path_567007, "subscriptionId", newJString(subscriptionId))
  add(path_567007, "resourceGroupName", newJString(resourceGroupName))
  add(query_567008, "$filter", newJString(Filter))
  result = call_567006.call(path_567007, query_567008, nil, nil, nil)

var webAppsListPerfMonCountersSlot* = Call_WebAppsListPerfMonCountersSlot_566996(
    name: "webAppsListPerfMonCountersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    validator: validate_WebAppsListPerfMonCountersSlot_566997, base: "",
    url: url_WebAppsListPerfMonCountersSlot_566998, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlagSlot_567009 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSitePhpErrorLogFlagSlot_567011(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlagSlot_567010(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567012 = path.getOrDefault("slot")
  valid_567012 = validateParameter(valid_567012, JString, required = true,
                                 default = nil)
  if valid_567012 != nil:
    section.add "slot", valid_567012
  var valid_567013 = path.getOrDefault("name")
  valid_567013 = validateParameter(valid_567013, JString, required = true,
                                 default = nil)
  if valid_567013 != nil:
    section.add "name", valid_567013
  var valid_567014 = path.getOrDefault("subscriptionId")
  valid_567014 = validateParameter(valid_567014, JString, required = true,
                                 default = nil)
  if valid_567014 != nil:
    section.add "subscriptionId", valid_567014
  var valid_567015 = path.getOrDefault("resourceGroupName")
  valid_567015 = validateParameter(valid_567015, JString, required = true,
                                 default = nil)
  if valid_567015 != nil:
    section.add "resourceGroupName", valid_567015
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567016 = query.getOrDefault("api-version")
  valid_567016 = validateParameter(valid_567016, JString, required = true,
                                 default = nil)
  if valid_567016 != nil:
    section.add "api-version", valid_567016
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567017: Call_WebAppsGetSitePhpErrorLogFlagSlot_567009;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_567017.validator(path, query, header, formData, body)
  let scheme = call_567017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567017.url(scheme.get, call_567017.host, call_567017.base,
                         call_567017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567017, url, valid)

proc call*(call_567018: Call_WebAppsGetSitePhpErrorLogFlagSlot_567009;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlagSlot
  ## Gets web app's event logs.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567019 = newJObject()
  var query_567020 = newJObject()
  add(path_567019, "slot", newJString(slot))
  add(query_567020, "api-version", newJString(apiVersion))
  add(path_567019, "name", newJString(name))
  add(path_567019, "subscriptionId", newJString(subscriptionId))
  add(path_567019, "resourceGroupName", newJString(resourceGroupName))
  result = call_567018.call(path_567019, query_567020, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlagSlot* = Call_WebAppsGetSitePhpErrorLogFlagSlot_567009(
    name: "webAppsGetSitePhpErrorLogFlagSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlagSlot_567010, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlagSlot_567011, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOnsSlot_567021 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPremierAddOnsSlot_567023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOnsSlot_567022(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567024 = path.getOrDefault("slot")
  valid_567024 = validateParameter(valid_567024, JString, required = true,
                                 default = nil)
  if valid_567024 != nil:
    section.add "slot", valid_567024
  var valid_567025 = path.getOrDefault("name")
  valid_567025 = validateParameter(valid_567025, JString, required = true,
                                 default = nil)
  if valid_567025 != nil:
    section.add "name", valid_567025
  var valid_567026 = path.getOrDefault("subscriptionId")
  valid_567026 = validateParameter(valid_567026, JString, required = true,
                                 default = nil)
  if valid_567026 != nil:
    section.add "subscriptionId", valid_567026
  var valid_567027 = path.getOrDefault("resourceGroupName")
  valid_567027 = validateParameter(valid_567027, JString, required = true,
                                 default = nil)
  if valid_567027 != nil:
    section.add "resourceGroupName", valid_567027
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567028 = query.getOrDefault("api-version")
  valid_567028 = validateParameter(valid_567028, JString, required = true,
                                 default = nil)
  if valid_567028 != nil:
    section.add "api-version", valid_567028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567029: Call_WebAppsListPremierAddOnsSlot_567021; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_567029.validator(path, query, header, formData, body)
  let scheme = call_567029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567029.url(scheme.get, call_567029.host, call_567029.base,
                         call_567029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567029, url, valid)

proc call*(call_567030: Call_WebAppsListPremierAddOnsSlot_567021; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPremierAddOnsSlot
  ## Gets the premier add-ons of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567031 = newJObject()
  var query_567032 = newJObject()
  add(path_567031, "slot", newJString(slot))
  add(query_567032, "api-version", newJString(apiVersion))
  add(path_567031, "name", newJString(name))
  add(path_567031, "subscriptionId", newJString(subscriptionId))
  add(path_567031, "resourceGroupName", newJString(resourceGroupName))
  result = call_567030.call(path_567031, query_567032, nil, nil, nil)

var webAppsListPremierAddOnsSlot* = Call_WebAppsListPremierAddOnsSlot_567021(
    name: "webAppsListPremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_WebAppsListPremierAddOnsSlot_567022, base: "",
    url: url_WebAppsListPremierAddOnsSlot_567023, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOnSlot_567046 = ref object of OpenApiRestCall_563564
proc url_WebAppsAddPremierAddOnSlot_567048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOnSlot_567047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567049 = path.getOrDefault("slot")
  valid_567049 = validateParameter(valid_567049, JString, required = true,
                                 default = nil)
  if valid_567049 != nil:
    section.add "slot", valid_567049
  var valid_567050 = path.getOrDefault("name")
  valid_567050 = validateParameter(valid_567050, JString, required = true,
                                 default = nil)
  if valid_567050 != nil:
    section.add "name", valid_567050
  var valid_567051 = path.getOrDefault("subscriptionId")
  valid_567051 = validateParameter(valid_567051, JString, required = true,
                                 default = nil)
  if valid_567051 != nil:
    section.add "subscriptionId", valid_567051
  var valid_567052 = path.getOrDefault("premierAddOnName")
  valid_567052 = validateParameter(valid_567052, JString, required = true,
                                 default = nil)
  if valid_567052 != nil:
    section.add "premierAddOnName", valid_567052
  var valid_567053 = path.getOrDefault("resourceGroupName")
  valid_567053 = validateParameter(valid_567053, JString, required = true,
                                 default = nil)
  if valid_567053 != nil:
    section.add "resourceGroupName", valid_567053
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567054 = query.getOrDefault("api-version")
  valid_567054 = validateParameter(valid_567054, JString, required = true,
                                 default = nil)
  if valid_567054 != nil:
    section.add "api-version", valid_567054
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567056: Call_WebAppsAddPremierAddOnSlot_567046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_567056.validator(path, query, header, formData, body)
  let scheme = call_567056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567056.url(scheme.get, call_567056.host, call_567056.base,
                         call_567056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567056, url, valid)

proc call*(call_567057: Call_WebAppsAddPremierAddOnSlot_567046; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; premierAddOn: JsonNode;
          resourceGroupName: string): Recallable =
  ## webAppsAddPremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567058 = newJObject()
  var query_567059 = newJObject()
  var body_567060 = newJObject()
  add(path_567058, "slot", newJString(slot))
  add(query_567059, "api-version", newJString(apiVersion))
  add(path_567058, "name", newJString(name))
  add(path_567058, "subscriptionId", newJString(subscriptionId))
  add(path_567058, "premierAddOnName", newJString(premierAddOnName))
  if premierAddOn != nil:
    body_567060 = premierAddOn
  add(path_567058, "resourceGroupName", newJString(resourceGroupName))
  result = call_567057.call(path_567058, query_567059, nil, nil, body_567060)

var webAppsAddPremierAddOnSlot* = Call_WebAppsAddPremierAddOnSlot_567046(
    name: "webAppsAddPremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOnSlot_567047, base: "",
    url: url_WebAppsAddPremierAddOnSlot_567048, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOnSlot_567033 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPremierAddOnSlot_567035(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOnSlot_567034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567036 = path.getOrDefault("slot")
  valid_567036 = validateParameter(valid_567036, JString, required = true,
                                 default = nil)
  if valid_567036 != nil:
    section.add "slot", valid_567036
  var valid_567037 = path.getOrDefault("name")
  valid_567037 = validateParameter(valid_567037, JString, required = true,
                                 default = nil)
  if valid_567037 != nil:
    section.add "name", valid_567037
  var valid_567038 = path.getOrDefault("subscriptionId")
  valid_567038 = validateParameter(valid_567038, JString, required = true,
                                 default = nil)
  if valid_567038 != nil:
    section.add "subscriptionId", valid_567038
  var valid_567039 = path.getOrDefault("premierAddOnName")
  valid_567039 = validateParameter(valid_567039, JString, required = true,
                                 default = nil)
  if valid_567039 != nil:
    section.add "premierAddOnName", valid_567039
  var valid_567040 = path.getOrDefault("resourceGroupName")
  valid_567040 = validateParameter(valid_567040, JString, required = true,
                                 default = nil)
  if valid_567040 != nil:
    section.add "resourceGroupName", valid_567040
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567041 = query.getOrDefault("api-version")
  valid_567041 = validateParameter(valid_567041, JString, required = true,
                                 default = nil)
  if valid_567041 != nil:
    section.add "api-version", valid_567041
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567042: Call_WebAppsGetPremierAddOnSlot_567033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_567042.validator(path, query, header, formData, body)
  let scheme = call_567042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567042.url(scheme.get, call_567042.host, call_567042.base,
                         call_567042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567042, url, valid)

proc call*(call_567043: Call_WebAppsGetPremierAddOnSlot_567033; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## webAppsGetPremierAddOnSlot
  ## Gets a named add-on of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567044 = newJObject()
  var query_567045 = newJObject()
  add(path_567044, "slot", newJString(slot))
  add(query_567045, "api-version", newJString(apiVersion))
  add(path_567044, "name", newJString(name))
  add(path_567044, "subscriptionId", newJString(subscriptionId))
  add(path_567044, "premierAddOnName", newJString(premierAddOnName))
  add(path_567044, "resourceGroupName", newJString(resourceGroupName))
  result = call_567043.call(path_567044, query_567045, nil, nil, nil)

var webAppsGetPremierAddOnSlot* = Call_WebAppsGetPremierAddOnSlot_567033(
    name: "webAppsGetPremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOnSlot_567034, base: "",
    url: url_WebAppsGetPremierAddOnSlot_567035, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOnSlot_567061 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePremierAddOnSlot_567063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOnSlot_567062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567064 = path.getOrDefault("slot")
  valid_567064 = validateParameter(valid_567064, JString, required = true,
                                 default = nil)
  if valid_567064 != nil:
    section.add "slot", valid_567064
  var valid_567065 = path.getOrDefault("name")
  valid_567065 = validateParameter(valid_567065, JString, required = true,
                                 default = nil)
  if valid_567065 != nil:
    section.add "name", valid_567065
  var valid_567066 = path.getOrDefault("subscriptionId")
  valid_567066 = validateParameter(valid_567066, JString, required = true,
                                 default = nil)
  if valid_567066 != nil:
    section.add "subscriptionId", valid_567066
  var valid_567067 = path.getOrDefault("premierAddOnName")
  valid_567067 = validateParameter(valid_567067, JString, required = true,
                                 default = nil)
  if valid_567067 != nil:
    section.add "premierAddOnName", valid_567067
  var valid_567068 = path.getOrDefault("resourceGroupName")
  valid_567068 = validateParameter(valid_567068, JString, required = true,
                                 default = nil)
  if valid_567068 != nil:
    section.add "resourceGroupName", valid_567068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567069 = query.getOrDefault("api-version")
  valid_567069 = validateParameter(valid_567069, JString, required = true,
                                 default = nil)
  if valid_567069 != nil:
    section.add "api-version", valid_567069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567070: Call_WebAppsDeletePremierAddOnSlot_567061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_567070.validator(path, query, header, formData, body)
  let scheme = call_567070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567070.url(scheme.get, call_567070.host, call_567070.base,
                         call_567070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567070, url, valid)

proc call*(call_567071: Call_WebAppsDeletePremierAddOnSlot_567061; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          premierAddOnName: string; resourceGroupName: string): Recallable =
  ## webAppsDeletePremierAddOnSlot
  ## Delete a premier add-on from an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567072 = newJObject()
  var query_567073 = newJObject()
  add(path_567072, "slot", newJString(slot))
  add(query_567073, "api-version", newJString(apiVersion))
  add(path_567072, "name", newJString(name))
  add(path_567072, "subscriptionId", newJString(subscriptionId))
  add(path_567072, "premierAddOnName", newJString(premierAddOnName))
  add(path_567072, "resourceGroupName", newJString(resourceGroupName))
  result = call_567071.call(path_567072, query_567073, nil, nil, nil)

var webAppsDeletePremierAddOnSlot* = Call_WebAppsDeletePremierAddOnSlot_567061(
    name: "webAppsDeletePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOnSlot_567062, base: "",
    url: url_WebAppsDeletePremierAddOnSlot_567063, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessesSlot_567074 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessesSlot_567076(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessesSlot_567075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567077 = path.getOrDefault("slot")
  valid_567077 = validateParameter(valid_567077, JString, required = true,
                                 default = nil)
  if valid_567077 != nil:
    section.add "slot", valid_567077
  var valid_567078 = path.getOrDefault("name")
  valid_567078 = validateParameter(valid_567078, JString, required = true,
                                 default = nil)
  if valid_567078 != nil:
    section.add "name", valid_567078
  var valid_567079 = path.getOrDefault("subscriptionId")
  valid_567079 = validateParameter(valid_567079, JString, required = true,
                                 default = nil)
  if valid_567079 != nil:
    section.add "subscriptionId", valid_567079
  var valid_567080 = path.getOrDefault("resourceGroupName")
  valid_567080 = validateParameter(valid_567080, JString, required = true,
                                 default = nil)
  if valid_567080 != nil:
    section.add "resourceGroupName", valid_567080
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567081 = query.getOrDefault("api-version")
  valid_567081 = validateParameter(valid_567081, JString, required = true,
                                 default = nil)
  if valid_567081 != nil:
    section.add "api-version", valid_567081
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567082: Call_WebAppsListProcessesSlot_567074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567082.validator(path, query, header, formData, body)
  let scheme = call_567082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567082.url(scheme.get, call_567082.host, call_567082.base,
                         call_567082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567082, url, valid)

proc call*(call_567083: Call_WebAppsListProcessesSlot_567074; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567084 = newJObject()
  var query_567085 = newJObject()
  add(path_567084, "slot", newJString(slot))
  add(query_567085, "api-version", newJString(apiVersion))
  add(path_567084, "name", newJString(name))
  add(path_567084, "subscriptionId", newJString(subscriptionId))
  add(path_567084, "resourceGroupName", newJString(resourceGroupName))
  result = call_567083.call(path_567084, query_567085, nil, nil, nil)

var webAppsListProcessesSlot* = Call_WebAppsListProcessesSlot_567074(
    name: "webAppsListProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    validator: validate_WebAppsListProcessesSlot_567075, base: "",
    url: url_WebAppsListProcessesSlot_567076, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessSlot_567086 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessSlot_567088(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessSlot_567087(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567089 = path.getOrDefault("slot")
  valid_567089 = validateParameter(valid_567089, JString, required = true,
                                 default = nil)
  if valid_567089 != nil:
    section.add "slot", valid_567089
  var valid_567090 = path.getOrDefault("name")
  valid_567090 = validateParameter(valid_567090, JString, required = true,
                                 default = nil)
  if valid_567090 != nil:
    section.add "name", valid_567090
  var valid_567091 = path.getOrDefault("subscriptionId")
  valid_567091 = validateParameter(valid_567091, JString, required = true,
                                 default = nil)
  if valid_567091 != nil:
    section.add "subscriptionId", valid_567091
  var valid_567092 = path.getOrDefault("resourceGroupName")
  valid_567092 = validateParameter(valid_567092, JString, required = true,
                                 default = nil)
  if valid_567092 != nil:
    section.add "resourceGroupName", valid_567092
  var valid_567093 = path.getOrDefault("processId")
  valid_567093 = validateParameter(valid_567093, JString, required = true,
                                 default = nil)
  if valid_567093 != nil:
    section.add "processId", valid_567093
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567094 = query.getOrDefault("api-version")
  valid_567094 = validateParameter(valid_567094, JString, required = true,
                                 default = nil)
  if valid_567094 != nil:
    section.add "api-version", valid_567094
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567095: Call_WebAppsGetProcessSlot_567086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567095.validator(path, query, header, formData, body)
  let scheme = call_567095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567095.url(scheme.get, call_567095.host, call_567095.base,
                         call_567095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567095, url, valid)

proc call*(call_567096: Call_WebAppsGetProcessSlot_567086; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567097 = newJObject()
  var query_567098 = newJObject()
  add(path_567097, "slot", newJString(slot))
  add(query_567098, "api-version", newJString(apiVersion))
  add(path_567097, "name", newJString(name))
  add(path_567097, "subscriptionId", newJString(subscriptionId))
  add(path_567097, "resourceGroupName", newJString(resourceGroupName))
  add(path_567097, "processId", newJString(processId))
  result = call_567096.call(path_567097, query_567098, nil, nil, nil)

var webAppsGetProcessSlot* = Call_WebAppsGetProcessSlot_567086(
    name: "webAppsGetProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsGetProcessSlot_567087, base: "",
    url: url_WebAppsGetProcessSlot_567088, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcessSlot_567099 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteProcessSlot_567101(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcessSlot_567100(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567102 = path.getOrDefault("slot")
  valid_567102 = validateParameter(valid_567102, JString, required = true,
                                 default = nil)
  if valid_567102 != nil:
    section.add "slot", valid_567102
  var valid_567103 = path.getOrDefault("name")
  valid_567103 = validateParameter(valid_567103, JString, required = true,
                                 default = nil)
  if valid_567103 != nil:
    section.add "name", valid_567103
  var valid_567104 = path.getOrDefault("subscriptionId")
  valid_567104 = validateParameter(valid_567104, JString, required = true,
                                 default = nil)
  if valid_567104 != nil:
    section.add "subscriptionId", valid_567104
  var valid_567105 = path.getOrDefault("resourceGroupName")
  valid_567105 = validateParameter(valid_567105, JString, required = true,
                                 default = nil)
  if valid_567105 != nil:
    section.add "resourceGroupName", valid_567105
  var valid_567106 = path.getOrDefault("processId")
  valid_567106 = validateParameter(valid_567106, JString, required = true,
                                 default = nil)
  if valid_567106 != nil:
    section.add "processId", valid_567106
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567107 = query.getOrDefault("api-version")
  valid_567107 = validateParameter(valid_567107, JString, required = true,
                                 default = nil)
  if valid_567107 != nil:
    section.add "api-version", valid_567107
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567108: Call_WebAppsDeleteProcessSlot_567099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_567108.validator(path, query, header, formData, body)
  let scheme = call_567108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567108.url(scheme.get, call_567108.host, call_567108.base,
                         call_567108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567108, url, valid)

proc call*(call_567109: Call_WebAppsDeleteProcessSlot_567099; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsDeleteProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567110 = newJObject()
  var query_567111 = newJObject()
  add(path_567110, "slot", newJString(slot))
  add(query_567111, "api-version", newJString(apiVersion))
  add(path_567110, "name", newJString(name))
  add(path_567110, "subscriptionId", newJString(subscriptionId))
  add(path_567110, "resourceGroupName", newJString(resourceGroupName))
  add(path_567110, "processId", newJString(processId))
  result = call_567109.call(path_567110, query_567111, nil, nil, nil)

var webAppsDeleteProcessSlot* = Call_WebAppsDeleteProcessSlot_567099(
    name: "webAppsDeleteProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsDeleteProcessSlot_567100, base: "",
    url: url_WebAppsDeleteProcessSlot_567101, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDumpSlot_567112 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessDumpSlot_567114(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDumpSlot_567113(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567115 = path.getOrDefault("slot")
  valid_567115 = validateParameter(valid_567115, JString, required = true,
                                 default = nil)
  if valid_567115 != nil:
    section.add "slot", valid_567115
  var valid_567116 = path.getOrDefault("name")
  valid_567116 = validateParameter(valid_567116, JString, required = true,
                                 default = nil)
  if valid_567116 != nil:
    section.add "name", valid_567116
  var valid_567117 = path.getOrDefault("subscriptionId")
  valid_567117 = validateParameter(valid_567117, JString, required = true,
                                 default = nil)
  if valid_567117 != nil:
    section.add "subscriptionId", valid_567117
  var valid_567118 = path.getOrDefault("resourceGroupName")
  valid_567118 = validateParameter(valid_567118, JString, required = true,
                                 default = nil)
  if valid_567118 != nil:
    section.add "resourceGroupName", valid_567118
  var valid_567119 = path.getOrDefault("processId")
  valid_567119 = validateParameter(valid_567119, JString, required = true,
                                 default = nil)
  if valid_567119 != nil:
    section.add "processId", valid_567119
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567120 = query.getOrDefault("api-version")
  valid_567120 = validateParameter(valid_567120, JString, required = true,
                                 default = nil)
  if valid_567120 != nil:
    section.add "api-version", valid_567120
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567121: Call_WebAppsGetProcessDumpSlot_567112; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567121.validator(path, query, header, formData, body)
  let scheme = call_567121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567121.url(scheme.get, call_567121.host, call_567121.base,
                         call_567121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567121, url, valid)

proc call*(call_567122: Call_WebAppsGetProcessDumpSlot_567112; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567123 = newJObject()
  var query_567124 = newJObject()
  add(path_567123, "slot", newJString(slot))
  add(query_567124, "api-version", newJString(apiVersion))
  add(path_567123, "name", newJString(name))
  add(path_567123, "subscriptionId", newJString(subscriptionId))
  add(path_567123, "resourceGroupName", newJString(resourceGroupName))
  add(path_567123, "processId", newJString(processId))
  result = call_567122.call(path_567123, query_567124, nil, nil, nil)

var webAppsGetProcessDumpSlot* = Call_WebAppsGetProcessDumpSlot_567112(
    name: "webAppsGetProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDumpSlot_567113, base: "",
    url: url_WebAppsGetProcessDumpSlot_567114, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModulesSlot_567125 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessModulesSlot_567127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModulesSlot_567126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567128 = path.getOrDefault("slot")
  valid_567128 = validateParameter(valid_567128, JString, required = true,
                                 default = nil)
  if valid_567128 != nil:
    section.add "slot", valid_567128
  var valid_567129 = path.getOrDefault("name")
  valid_567129 = validateParameter(valid_567129, JString, required = true,
                                 default = nil)
  if valid_567129 != nil:
    section.add "name", valid_567129
  var valid_567130 = path.getOrDefault("subscriptionId")
  valid_567130 = validateParameter(valid_567130, JString, required = true,
                                 default = nil)
  if valid_567130 != nil:
    section.add "subscriptionId", valid_567130
  var valid_567131 = path.getOrDefault("resourceGroupName")
  valid_567131 = validateParameter(valid_567131, JString, required = true,
                                 default = nil)
  if valid_567131 != nil:
    section.add "resourceGroupName", valid_567131
  var valid_567132 = path.getOrDefault("processId")
  valid_567132 = validateParameter(valid_567132, JString, required = true,
                                 default = nil)
  if valid_567132 != nil:
    section.add "processId", valid_567132
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567133 = query.getOrDefault("api-version")
  valid_567133 = validateParameter(valid_567133, JString, required = true,
                                 default = nil)
  if valid_567133 != nil:
    section.add "api-version", valid_567133
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567134: Call_WebAppsListProcessModulesSlot_567125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567134.validator(path, query, header, formData, body)
  let scheme = call_567134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567134.url(scheme.get, call_567134.host, call_567134.base,
                         call_567134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567134, url, valid)

proc call*(call_567135: Call_WebAppsListProcessModulesSlot_567125; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsListProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567136 = newJObject()
  var query_567137 = newJObject()
  add(path_567136, "slot", newJString(slot))
  add(query_567137, "api-version", newJString(apiVersion))
  add(path_567136, "name", newJString(name))
  add(path_567136, "subscriptionId", newJString(subscriptionId))
  add(path_567136, "resourceGroupName", newJString(resourceGroupName))
  add(path_567136, "processId", newJString(processId))
  result = call_567135.call(path_567136, query_567137, nil, nil, nil)

var webAppsListProcessModulesSlot* = Call_WebAppsListProcessModulesSlot_567125(
    name: "webAppsListProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModulesSlot_567126, base: "",
    url: url_WebAppsListProcessModulesSlot_567127, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModuleSlot_567138 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessModuleSlot_567140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModuleSlot_567139(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567141 = path.getOrDefault("slot")
  valid_567141 = validateParameter(valid_567141, JString, required = true,
                                 default = nil)
  if valid_567141 != nil:
    section.add "slot", valid_567141
  var valid_567142 = path.getOrDefault("name")
  valid_567142 = validateParameter(valid_567142, JString, required = true,
                                 default = nil)
  if valid_567142 != nil:
    section.add "name", valid_567142
  var valid_567143 = path.getOrDefault("subscriptionId")
  valid_567143 = validateParameter(valid_567143, JString, required = true,
                                 default = nil)
  if valid_567143 != nil:
    section.add "subscriptionId", valid_567143
  var valid_567144 = path.getOrDefault("resourceGroupName")
  valid_567144 = validateParameter(valid_567144, JString, required = true,
                                 default = nil)
  if valid_567144 != nil:
    section.add "resourceGroupName", valid_567144
  var valid_567145 = path.getOrDefault("processId")
  valid_567145 = validateParameter(valid_567145, JString, required = true,
                                 default = nil)
  if valid_567145 != nil:
    section.add "processId", valid_567145
  var valid_567146 = path.getOrDefault("baseAddress")
  valid_567146 = validateParameter(valid_567146, JString, required = true,
                                 default = nil)
  if valid_567146 != nil:
    section.add "baseAddress", valid_567146
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567147 = query.getOrDefault("api-version")
  valid_567147 = validateParameter(valid_567147, JString, required = true,
                                 default = nil)
  if valid_567147 != nil:
    section.add "api-version", valid_567147
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567148: Call_WebAppsGetProcessModuleSlot_567138; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567148.validator(path, query, header, formData, body)
  let scheme = call_567148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567148.url(scheme.get, call_567148.host, call_567148.base,
                         call_567148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567148, url, valid)

proc call*(call_567149: Call_WebAppsGetProcessModuleSlot_567138; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_567150 = newJObject()
  var query_567151 = newJObject()
  add(path_567150, "slot", newJString(slot))
  add(query_567151, "api-version", newJString(apiVersion))
  add(path_567150, "name", newJString(name))
  add(path_567150, "subscriptionId", newJString(subscriptionId))
  add(path_567150, "resourceGroupName", newJString(resourceGroupName))
  add(path_567150, "processId", newJString(processId))
  add(path_567150, "baseAddress", newJString(baseAddress))
  result = call_567149.call(path_567150, query_567151, nil, nil, nil)

var webAppsGetProcessModuleSlot* = Call_WebAppsGetProcessModuleSlot_567138(
    name: "webAppsGetProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModuleSlot_567139, base: "",
    url: url_WebAppsGetProcessModuleSlot_567140, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreadsSlot_567152 = ref object of OpenApiRestCall_563564
proc url_WebAppsListProcessThreadsSlot_567154(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreadsSlot_567153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567155 = path.getOrDefault("slot")
  valid_567155 = validateParameter(valid_567155, JString, required = true,
                                 default = nil)
  if valid_567155 != nil:
    section.add "slot", valid_567155
  var valid_567156 = path.getOrDefault("name")
  valid_567156 = validateParameter(valid_567156, JString, required = true,
                                 default = nil)
  if valid_567156 != nil:
    section.add "name", valid_567156
  var valid_567157 = path.getOrDefault("subscriptionId")
  valid_567157 = validateParameter(valid_567157, JString, required = true,
                                 default = nil)
  if valid_567157 != nil:
    section.add "subscriptionId", valid_567157
  var valid_567158 = path.getOrDefault("resourceGroupName")
  valid_567158 = validateParameter(valid_567158, JString, required = true,
                                 default = nil)
  if valid_567158 != nil:
    section.add "resourceGroupName", valid_567158
  var valid_567159 = path.getOrDefault("processId")
  valid_567159 = validateParameter(valid_567159, JString, required = true,
                                 default = nil)
  if valid_567159 != nil:
    section.add "processId", valid_567159
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567160 = query.getOrDefault("api-version")
  valid_567160 = validateParameter(valid_567160, JString, required = true,
                                 default = nil)
  if valid_567160 != nil:
    section.add "api-version", valid_567160
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567161: Call_WebAppsListProcessThreadsSlot_567152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_567161.validator(path, query, header, formData, body)
  let scheme = call_567161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567161.url(scheme.get, call_567161.host, call_567161.base,
                         call_567161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567161, url, valid)

proc call*(call_567162: Call_WebAppsListProcessThreadsSlot_567152; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsListProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567163 = newJObject()
  var query_567164 = newJObject()
  add(path_567163, "slot", newJString(slot))
  add(query_567164, "api-version", newJString(apiVersion))
  add(path_567163, "name", newJString(name))
  add(path_567163, "subscriptionId", newJString(subscriptionId))
  add(path_567163, "resourceGroupName", newJString(resourceGroupName))
  add(path_567163, "processId", newJString(processId))
  result = call_567162.call(path_567163, query_567164, nil, nil, nil)

var webAppsListProcessThreadsSlot* = Call_WebAppsListProcessThreadsSlot_567152(
    name: "webAppsListProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreadsSlot_567153, base: "",
    url: url_WebAppsListProcessThreadsSlot_567154, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThreadSlot_567165 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetProcessThreadSlot_567167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThreadSlot_567166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   threadId: JString (required)
  ##           : TID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: JString (required)
  ##            : PID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `threadId` field"
  var valid_567168 = path.getOrDefault("threadId")
  valid_567168 = validateParameter(valid_567168, JString, required = true,
                                 default = nil)
  if valid_567168 != nil:
    section.add "threadId", valid_567168
  var valid_567169 = path.getOrDefault("slot")
  valid_567169 = validateParameter(valid_567169, JString, required = true,
                                 default = nil)
  if valid_567169 != nil:
    section.add "slot", valid_567169
  var valid_567170 = path.getOrDefault("name")
  valid_567170 = validateParameter(valid_567170, JString, required = true,
                                 default = nil)
  if valid_567170 != nil:
    section.add "name", valid_567170
  var valid_567171 = path.getOrDefault("subscriptionId")
  valid_567171 = validateParameter(valid_567171, JString, required = true,
                                 default = nil)
  if valid_567171 != nil:
    section.add "subscriptionId", valid_567171
  var valid_567172 = path.getOrDefault("resourceGroupName")
  valid_567172 = validateParameter(valid_567172, JString, required = true,
                                 default = nil)
  if valid_567172 != nil:
    section.add "resourceGroupName", valid_567172
  var valid_567173 = path.getOrDefault("processId")
  valid_567173 = validateParameter(valid_567173, JString, required = true,
                                 default = nil)
  if valid_567173 != nil:
    section.add "processId", valid_567173
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567174 = query.getOrDefault("api-version")
  valid_567174 = validateParameter(valid_567174, JString, required = true,
                                 default = nil)
  if valid_567174 != nil:
    section.add "api-version", valid_567174
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567175: Call_WebAppsGetProcessThreadSlot_567165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_567175.validator(path, query, header, formData, body)
  let scheme = call_567175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567175.url(scheme.get, call_567175.host, call_567175.base,
                         call_567175.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567175, url, valid)

proc call*(call_567176: Call_WebAppsGetProcessThreadSlot_567165; threadId: string;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; processId: string): Recallable =
  ## webAppsGetProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   threadId: string (required)
  ##           : TID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   processId: string (required)
  ##            : PID.
  var path_567177 = newJObject()
  var query_567178 = newJObject()
  add(path_567177, "threadId", newJString(threadId))
  add(path_567177, "slot", newJString(slot))
  add(query_567178, "api-version", newJString(apiVersion))
  add(path_567177, "name", newJString(name))
  add(path_567177, "subscriptionId", newJString(subscriptionId))
  add(path_567177, "resourceGroupName", newJString(resourceGroupName))
  add(path_567177, "processId", newJString(processId))
  result = call_567176.call(path_567177, query_567178, nil, nil, nil)

var webAppsGetProcessThreadSlot* = Call_WebAppsGetProcessThreadSlot_567165(
    name: "webAppsGetProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThreadSlot_567166, base: "",
    url: url_WebAppsGetProcessThreadSlot_567167, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificatesSlot_567179 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublicCertificatesSlot_567181(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificatesSlot_567180(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567182 = path.getOrDefault("slot")
  valid_567182 = validateParameter(valid_567182, JString, required = true,
                                 default = nil)
  if valid_567182 != nil:
    section.add "slot", valid_567182
  var valid_567183 = path.getOrDefault("name")
  valid_567183 = validateParameter(valid_567183, JString, required = true,
                                 default = nil)
  if valid_567183 != nil:
    section.add "name", valid_567183
  var valid_567184 = path.getOrDefault("subscriptionId")
  valid_567184 = validateParameter(valid_567184, JString, required = true,
                                 default = nil)
  if valid_567184 != nil:
    section.add "subscriptionId", valid_567184
  var valid_567185 = path.getOrDefault("resourceGroupName")
  valid_567185 = validateParameter(valid_567185, JString, required = true,
                                 default = nil)
  if valid_567185 != nil:
    section.add "resourceGroupName", valid_567185
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567186 = query.getOrDefault("api-version")
  valid_567186 = validateParameter(valid_567186, JString, required = true,
                                 default = nil)
  if valid_567186 != nil:
    section.add "api-version", valid_567186
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567187: Call_WebAppsListPublicCertificatesSlot_567179;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_567187.validator(path, query, header, formData, body)
  let scheme = call_567187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567187.url(scheme.get, call_567187.host, call_567187.base,
                         call_567187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567187, url, valid)

proc call*(call_567188: Call_WebAppsListPublicCertificatesSlot_567179;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListPublicCertificatesSlot
  ## Get public certificates for an app or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567189 = newJObject()
  var query_567190 = newJObject()
  add(path_567189, "slot", newJString(slot))
  add(query_567190, "api-version", newJString(apiVersion))
  add(path_567189, "name", newJString(name))
  add(path_567189, "subscriptionId", newJString(subscriptionId))
  add(path_567189, "resourceGroupName", newJString(resourceGroupName))
  result = call_567188.call(path_567189, query_567190, nil, nil, nil)

var webAppsListPublicCertificatesSlot* = Call_WebAppsListPublicCertificatesSlot_567179(
    name: "webAppsListPublicCertificatesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    validator: validate_WebAppsListPublicCertificatesSlot_567180, base: "",
    url: url_WebAppsListPublicCertificatesSlot_567181, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificateSlot_567204 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdatePublicCertificateSlot_567206(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificateSlot_567205(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567207 = path.getOrDefault("slot")
  valid_567207 = validateParameter(valid_567207, JString, required = true,
                                 default = nil)
  if valid_567207 != nil:
    section.add "slot", valid_567207
  var valid_567208 = path.getOrDefault("name")
  valid_567208 = validateParameter(valid_567208, JString, required = true,
                                 default = nil)
  if valid_567208 != nil:
    section.add "name", valid_567208
  var valid_567209 = path.getOrDefault("subscriptionId")
  valid_567209 = validateParameter(valid_567209, JString, required = true,
                                 default = nil)
  if valid_567209 != nil:
    section.add "subscriptionId", valid_567209
  var valid_567210 = path.getOrDefault("publicCertificateName")
  valid_567210 = validateParameter(valid_567210, JString, required = true,
                                 default = nil)
  if valid_567210 != nil:
    section.add "publicCertificateName", valid_567210
  var valid_567211 = path.getOrDefault("resourceGroupName")
  valid_567211 = validateParameter(valid_567211, JString, required = true,
                                 default = nil)
  if valid_567211 != nil:
    section.add "resourceGroupName", valid_567211
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567212 = query.getOrDefault("api-version")
  valid_567212 = validateParameter(valid_567212, JString, required = true,
                                 default = nil)
  if valid_567212 != nil:
    section.add "api-version", valid_567212
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567214: Call_WebAppsCreateOrUpdatePublicCertificateSlot_567204;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_567214.validator(path, query, header, formData, body)
  let scheme = call_567214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567214.url(scheme.get, call_567214.host, call_567214.base,
                         call_567214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567214, url, valid)

proc call*(call_567215: Call_WebAppsCreateOrUpdatePublicCertificateSlot_567204;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificateSlot
  ## Creates a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_567216 = newJObject()
  var query_567217 = newJObject()
  var body_567218 = newJObject()
  add(path_567216, "slot", newJString(slot))
  add(query_567217, "api-version", newJString(apiVersion))
  add(path_567216, "name", newJString(name))
  add(path_567216, "subscriptionId", newJString(subscriptionId))
  add(path_567216, "publicCertificateName", newJString(publicCertificateName))
  add(path_567216, "resourceGroupName", newJString(resourceGroupName))
  if publicCertificate != nil:
    body_567218 = publicCertificate
  result = call_567215.call(path_567216, query_567217, nil, nil, body_567218)

var webAppsCreateOrUpdatePublicCertificateSlot* = Call_WebAppsCreateOrUpdatePublicCertificateSlot_567204(
    name: "webAppsCreateOrUpdatePublicCertificateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificateSlot_567205,
    base: "", url: url_WebAppsCreateOrUpdatePublicCertificateSlot_567206,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificateSlot_567191 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetPublicCertificateSlot_567193(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificateSlot_567192(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567194 = path.getOrDefault("slot")
  valid_567194 = validateParameter(valid_567194, JString, required = true,
                                 default = nil)
  if valid_567194 != nil:
    section.add "slot", valid_567194
  var valid_567195 = path.getOrDefault("name")
  valid_567195 = validateParameter(valid_567195, JString, required = true,
                                 default = nil)
  if valid_567195 != nil:
    section.add "name", valid_567195
  var valid_567196 = path.getOrDefault("subscriptionId")
  valid_567196 = validateParameter(valid_567196, JString, required = true,
                                 default = nil)
  if valid_567196 != nil:
    section.add "subscriptionId", valid_567196
  var valid_567197 = path.getOrDefault("publicCertificateName")
  valid_567197 = validateParameter(valid_567197, JString, required = true,
                                 default = nil)
  if valid_567197 != nil:
    section.add "publicCertificateName", valid_567197
  var valid_567198 = path.getOrDefault("resourceGroupName")
  valid_567198 = validateParameter(valid_567198, JString, required = true,
                                 default = nil)
  if valid_567198 != nil:
    section.add "resourceGroupName", valid_567198
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567199 = query.getOrDefault("api-version")
  valid_567199 = validateParameter(valid_567199, JString, required = true,
                                 default = nil)
  if valid_567199 != nil:
    section.add "api-version", valid_567199
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567200: Call_WebAppsGetPublicCertificateSlot_567191;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_567200.validator(path, query, header, formData, body)
  let scheme = call_567200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567200.url(scheme.get, call_567200.host, call_567200.base,
                         call_567200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567200, url, valid)

proc call*(call_567201: Call_WebAppsGetPublicCertificateSlot_567191; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsGetPublicCertificateSlot
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567202 = newJObject()
  var query_567203 = newJObject()
  add(path_567202, "slot", newJString(slot))
  add(query_567203, "api-version", newJString(apiVersion))
  add(path_567202, "name", newJString(name))
  add(path_567202, "subscriptionId", newJString(subscriptionId))
  add(path_567202, "publicCertificateName", newJString(publicCertificateName))
  add(path_567202, "resourceGroupName", newJString(resourceGroupName))
  result = call_567201.call(path_567202, query_567203, nil, nil, nil)

var webAppsGetPublicCertificateSlot* = Call_WebAppsGetPublicCertificateSlot_567191(
    name: "webAppsGetPublicCertificateSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificateSlot_567192, base: "",
    url: url_WebAppsGetPublicCertificateSlot_567193, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificateSlot_567219 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeletePublicCertificateSlot_567221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificateSlot_567220(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567222 = path.getOrDefault("slot")
  valid_567222 = validateParameter(valid_567222, JString, required = true,
                                 default = nil)
  if valid_567222 != nil:
    section.add "slot", valid_567222
  var valid_567223 = path.getOrDefault("name")
  valid_567223 = validateParameter(valid_567223, JString, required = true,
                                 default = nil)
  if valid_567223 != nil:
    section.add "name", valid_567223
  var valid_567224 = path.getOrDefault("subscriptionId")
  valid_567224 = validateParameter(valid_567224, JString, required = true,
                                 default = nil)
  if valid_567224 != nil:
    section.add "subscriptionId", valid_567224
  var valid_567225 = path.getOrDefault("publicCertificateName")
  valid_567225 = validateParameter(valid_567225, JString, required = true,
                                 default = nil)
  if valid_567225 != nil:
    section.add "publicCertificateName", valid_567225
  var valid_567226 = path.getOrDefault("resourceGroupName")
  valid_567226 = validateParameter(valid_567226, JString, required = true,
                                 default = nil)
  if valid_567226 != nil:
    section.add "resourceGroupName", valid_567226
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567227 = query.getOrDefault("api-version")
  valid_567227 = validateParameter(valid_567227, JString, required = true,
                                 default = nil)
  if valid_567227 != nil:
    section.add "api-version", valid_567227
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567228: Call_WebAppsDeletePublicCertificateSlot_567219;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_567228.validator(path, query, header, formData, body)
  let scheme = call_567228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567228.url(scheme.get, call_567228.host, call_567228.base,
                         call_567228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567228, url, valid)

proc call*(call_567229: Call_WebAppsDeletePublicCertificateSlot_567219;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          publicCertificateName: string; resourceGroupName: string): Recallable =
  ## webAppsDeletePublicCertificateSlot
  ## Deletes a hostname binding for an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567230 = newJObject()
  var query_567231 = newJObject()
  add(path_567230, "slot", newJString(slot))
  add(query_567231, "api-version", newJString(apiVersion))
  add(path_567230, "name", newJString(name))
  add(path_567230, "subscriptionId", newJString(subscriptionId))
  add(path_567230, "publicCertificateName", newJString(publicCertificateName))
  add(path_567230, "resourceGroupName", newJString(resourceGroupName))
  result = call_567229.call(path_567230, query_567231, nil, nil, nil)

var webAppsDeletePublicCertificateSlot* = Call_WebAppsDeletePublicCertificateSlot_567219(
    name: "webAppsDeletePublicCertificateSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificateSlot_567220, base: "",
    url: url_WebAppsDeletePublicCertificateSlot_567221, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567232 = ref object of OpenApiRestCall_563564
proc url_WebAppsListPublishingProfileXmlWithSecretsSlot_567234(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecretsSlot_567233(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567235 = path.getOrDefault("slot")
  valid_567235 = validateParameter(valid_567235, JString, required = true,
                                 default = nil)
  if valid_567235 != nil:
    section.add "slot", valid_567235
  var valid_567236 = path.getOrDefault("name")
  valid_567236 = validateParameter(valid_567236, JString, required = true,
                                 default = nil)
  if valid_567236 != nil:
    section.add "name", valid_567236
  var valid_567237 = path.getOrDefault("subscriptionId")
  valid_567237 = validateParameter(valid_567237, JString, required = true,
                                 default = nil)
  if valid_567237 != nil:
    section.add "subscriptionId", valid_567237
  var valid_567238 = path.getOrDefault("resourceGroupName")
  valid_567238 = validateParameter(valid_567238, JString, required = true,
                                 default = nil)
  if valid_567238 != nil:
    section.add "resourceGroupName", valid_567238
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567239 = query.getOrDefault("api-version")
  valid_567239 = validateParameter(valid_567239, JString, required = true,
                                 default = nil)
  if valid_567239 != nil:
    section.add "api-version", valid_567239
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567241: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567232;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_567241.validator(path, query, header, formData, body)
  let scheme = call_567241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567241.url(scheme.get, call_567241.host, call_567241.base,
                         call_567241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567241, url, valid)

proc call*(call_567242: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567232;
          slot: string; apiVersion: string; publishingProfileOptions: JsonNode;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListPublishingProfileXmlWithSecretsSlot
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567243 = newJObject()
  var query_567244 = newJObject()
  var body_567245 = newJObject()
  add(path_567243, "slot", newJString(slot))
  add(query_567244, "api-version", newJString(apiVersion))
  if publishingProfileOptions != nil:
    body_567245 = publishingProfileOptions
  add(path_567243, "name", newJString(name))
  add(path_567243, "subscriptionId", newJString(subscriptionId))
  add(path_567243, "resourceGroupName", newJString(resourceGroupName))
  result = call_567242.call(path_567243, query_567244, nil, nil, body_567245)

var webAppsListPublishingProfileXmlWithSecretsSlot* = Call_WebAppsListPublishingProfileXmlWithSecretsSlot_567232(
    name: "webAppsListPublishingProfileXmlWithSecretsSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecretsSlot_567233,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecretsSlot_567234,
    schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSlot_567246 = ref object of OpenApiRestCall_563564
proc url_WebAppsRecoverSlot_567248(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSlot_567247(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Recovers a web app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567249 = path.getOrDefault("slot")
  valid_567249 = validateParameter(valid_567249, JString, required = true,
                                 default = nil)
  if valid_567249 != nil:
    section.add "slot", valid_567249
  var valid_567250 = path.getOrDefault("name")
  valid_567250 = validateParameter(valid_567250, JString, required = true,
                                 default = nil)
  if valid_567250 != nil:
    section.add "name", valid_567250
  var valid_567251 = path.getOrDefault("subscriptionId")
  valid_567251 = validateParameter(valid_567251, JString, required = true,
                                 default = nil)
  if valid_567251 != nil:
    section.add "subscriptionId", valid_567251
  var valid_567252 = path.getOrDefault("resourceGroupName")
  valid_567252 = validateParameter(valid_567252, JString, required = true,
                                 default = nil)
  if valid_567252 != nil:
    section.add "resourceGroupName", valid_567252
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567253 = query.getOrDefault("api-version")
  valid_567253 = validateParameter(valid_567253, JString, required = true,
                                 default = nil)
  if valid_567253 != nil:
    section.add "api-version", valid_567253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567255: Call_WebAppsRecoverSlot_567246; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Recovers a web app to a previous snapshot.
  ## 
  let valid = call_567255.validator(path, query, header, formData, body)
  let scheme = call_567255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567255.url(scheme.get, call_567255.host, call_567255.base,
                         call_567255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567255, url, valid)

proc call*(call_567256: Call_WebAppsRecoverSlot_567246; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; recoveryEntity: JsonNode): Recallable =
  ## webAppsRecoverSlot
  ## Recovers a web app to a previous snapshot.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_567257 = newJObject()
  var query_567258 = newJObject()
  var body_567259 = newJObject()
  add(path_567257, "slot", newJString(slot))
  add(query_567258, "api-version", newJString(apiVersion))
  add(path_567257, "name", newJString(name))
  add(path_567257, "subscriptionId", newJString(subscriptionId))
  add(path_567257, "resourceGroupName", newJString(resourceGroupName))
  if recoveryEntity != nil:
    body_567259 = recoveryEntity
  result = call_567256.call(path_567257, query_567258, nil, nil, body_567259)

var webAppsRecoverSlot* = Call_WebAppsRecoverSlot_567246(
    name: "webAppsRecoverSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
    validator: validate_WebAppsRecoverSlot_567247, base: "",
    url: url_WebAppsRecoverSlot_567248, schemes: {Scheme.Https})
type
  Call_WebAppsResetSlotConfigurationSlot_567260 = ref object of OpenApiRestCall_563564
proc url_WebAppsResetSlotConfigurationSlot_567262(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetSlotConfigurationSlot_567261(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567263 = path.getOrDefault("slot")
  valid_567263 = validateParameter(valid_567263, JString, required = true,
                                 default = nil)
  if valid_567263 != nil:
    section.add "slot", valid_567263
  var valid_567264 = path.getOrDefault("name")
  valid_567264 = validateParameter(valid_567264, JString, required = true,
                                 default = nil)
  if valid_567264 != nil:
    section.add "name", valid_567264
  var valid_567265 = path.getOrDefault("subscriptionId")
  valid_567265 = validateParameter(valid_567265, JString, required = true,
                                 default = nil)
  if valid_567265 != nil:
    section.add "subscriptionId", valid_567265
  var valid_567266 = path.getOrDefault("resourceGroupName")
  valid_567266 = validateParameter(valid_567266, JString, required = true,
                                 default = nil)
  if valid_567266 != nil:
    section.add "resourceGroupName", valid_567266
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567267 = query.getOrDefault("api-version")
  valid_567267 = validateParameter(valid_567267, JString, required = true,
                                 default = nil)
  if valid_567267 != nil:
    section.add "api-version", valid_567267
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567268: Call_WebAppsResetSlotConfigurationSlot_567260;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_567268.validator(path, query, header, formData, body)
  let scheme = call_567268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567268.url(scheme.get, call_567268.host, call_567268.base,
                         call_567268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567268, url, valid)

proc call*(call_567269: Call_WebAppsResetSlotConfigurationSlot_567260;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsResetSlotConfigurationSlot
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567270 = newJObject()
  var query_567271 = newJObject()
  add(path_567270, "slot", newJString(slot))
  add(query_567271, "api-version", newJString(apiVersion))
  add(path_567270, "name", newJString(name))
  add(path_567270, "subscriptionId", newJString(subscriptionId))
  add(path_567270, "resourceGroupName", newJString(resourceGroupName))
  result = call_567269.call(path_567270, query_567271, nil, nil, nil)

var webAppsResetSlotConfigurationSlot* = Call_WebAppsResetSlotConfigurationSlot_567260(
    name: "webAppsResetSlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_WebAppsResetSlotConfigurationSlot_567261, base: "",
    url: url_WebAppsResetSlotConfigurationSlot_567262, schemes: {Scheme.Https})
type
  Call_WebAppsRestartSlot_567272 = ref object of OpenApiRestCall_563564
proc url_WebAppsRestartSlot_567274(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestartSlot_567273(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567275 = path.getOrDefault("slot")
  valid_567275 = validateParameter(valid_567275, JString, required = true,
                                 default = nil)
  if valid_567275 != nil:
    section.add "slot", valid_567275
  var valid_567276 = path.getOrDefault("name")
  valid_567276 = validateParameter(valid_567276, JString, required = true,
                                 default = nil)
  if valid_567276 != nil:
    section.add "name", valid_567276
  var valid_567277 = path.getOrDefault("subscriptionId")
  valid_567277 = validateParameter(valid_567277, JString, required = true,
                                 default = nil)
  if valid_567277 != nil:
    section.add "subscriptionId", valid_567277
  var valid_567278 = path.getOrDefault("resourceGroupName")
  valid_567278 = validateParameter(valid_567278, JString, required = true,
                                 default = nil)
  if valid_567278 != nil:
    section.add "resourceGroupName", valid_567278
  result.add "path", section
  ## parameters in `query` object:
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   api-version: JString (required)
  ##              : API Version
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  var valid_567279 = query.getOrDefault("synchronous")
  valid_567279 = validateParameter(valid_567279, JBool, required = false, default = nil)
  if valid_567279 != nil:
    section.add "synchronous", valid_567279
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567280 = query.getOrDefault("api-version")
  valid_567280 = validateParameter(valid_567280, JString, required = true,
                                 default = nil)
  if valid_567280 != nil:
    section.add "api-version", valid_567280
  var valid_567281 = query.getOrDefault("softRestart")
  valid_567281 = validateParameter(valid_567281, JBool, required = false, default = nil)
  if valid_567281 != nil:
    section.add "softRestart", valid_567281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567282: Call_WebAppsRestartSlot_567272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_567282.validator(path, query, header, formData, body)
  let scheme = call_567282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567282.url(scheme.get, call_567282.host, call_567282.base,
                         call_567282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567282, url, valid)

proc call*(call_567283: Call_WebAppsRestartSlot_567272; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; synchronous: bool = false;
          softRestart: bool = false): Recallable =
  ## webAppsRestartSlot
  ## Restarts an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_567284 = newJObject()
  var query_567285 = newJObject()
  add(path_567284, "slot", newJString(slot))
  add(query_567285, "synchronous", newJBool(synchronous))
  add(query_567285, "api-version", newJString(apiVersion))
  add(path_567284, "name", newJString(name))
  add(path_567284, "subscriptionId", newJString(subscriptionId))
  add(path_567284, "resourceGroupName", newJString(resourceGroupName))
  add(query_567285, "softRestart", newJBool(softRestart))
  result = call_567283.call(path_567284, query_567285, nil, nil, nil)

var webAppsRestartSlot* = Call_WebAppsRestartSlot_567272(
    name: "webAppsRestartSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_WebAppsRestartSlot_567273, base: "",
    url: url_WebAppsRestartSlot_567274, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensionsSlot_567286 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSiteExtensionsSlot_567288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensionsSlot_567287(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567289 = path.getOrDefault("slot")
  valid_567289 = validateParameter(valid_567289, JString, required = true,
                                 default = nil)
  if valid_567289 != nil:
    section.add "slot", valid_567289
  var valid_567290 = path.getOrDefault("name")
  valid_567290 = validateParameter(valid_567290, JString, required = true,
                                 default = nil)
  if valid_567290 != nil:
    section.add "name", valid_567290
  var valid_567291 = path.getOrDefault("subscriptionId")
  valid_567291 = validateParameter(valid_567291, JString, required = true,
                                 default = nil)
  if valid_567291 != nil:
    section.add "subscriptionId", valid_567291
  var valid_567292 = path.getOrDefault("resourceGroupName")
  valid_567292 = validateParameter(valid_567292, JString, required = true,
                                 default = nil)
  if valid_567292 != nil:
    section.add "resourceGroupName", valid_567292
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567293 = query.getOrDefault("api-version")
  valid_567293 = validateParameter(valid_567293, JString, required = true,
                                 default = nil)
  if valid_567293 != nil:
    section.add "api-version", valid_567293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567294: Call_WebAppsListSiteExtensionsSlot_567286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  let valid = call_567294.validator(path, query, header, formData, body)
  let scheme = call_567294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567294.url(scheme.get, call_567294.host, call_567294.base,
                         call_567294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567294, url, valid)

proc call*(call_567295: Call_WebAppsListSiteExtensionsSlot_567286; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSiteExtensionsSlot
  ## Get list of site extensions for a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567296 = newJObject()
  var query_567297 = newJObject()
  add(path_567296, "slot", newJString(slot))
  add(query_567297, "api-version", newJString(apiVersion))
  add(path_567296, "name", newJString(name))
  add(path_567296, "subscriptionId", newJString(subscriptionId))
  add(path_567296, "resourceGroupName", newJString(resourceGroupName))
  result = call_567295.call(path_567296, query_567297, nil, nil, nil)

var webAppsListSiteExtensionsSlot* = Call_WebAppsListSiteExtensionsSlot_567286(
    name: "webAppsListSiteExtensionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    validator: validate_WebAppsListSiteExtensionsSlot_567287, base: "",
    url: url_WebAppsListSiteExtensionsSlot_567288, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtensionSlot_567311 = ref object of OpenApiRestCall_563564
proc url_WebAppsInstallSiteExtensionSlot_567313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtensionSlot_567312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567314 = path.getOrDefault("slot")
  valid_567314 = validateParameter(valid_567314, JString, required = true,
                                 default = nil)
  if valid_567314 != nil:
    section.add "slot", valid_567314
  var valid_567315 = path.getOrDefault("name")
  valid_567315 = validateParameter(valid_567315, JString, required = true,
                                 default = nil)
  if valid_567315 != nil:
    section.add "name", valid_567315
  var valid_567316 = path.getOrDefault("subscriptionId")
  valid_567316 = validateParameter(valid_567316, JString, required = true,
                                 default = nil)
  if valid_567316 != nil:
    section.add "subscriptionId", valid_567316
  var valid_567317 = path.getOrDefault("resourceGroupName")
  valid_567317 = validateParameter(valid_567317, JString, required = true,
                                 default = nil)
  if valid_567317 != nil:
    section.add "resourceGroupName", valid_567317
  var valid_567318 = path.getOrDefault("siteExtensionId")
  valid_567318 = validateParameter(valid_567318, JString, required = true,
                                 default = nil)
  if valid_567318 != nil:
    section.add "siteExtensionId", valid_567318
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567319 = query.getOrDefault("api-version")
  valid_567319 = validateParameter(valid_567319, JString, required = true,
                                 default = nil)
  if valid_567319 != nil:
    section.add "api-version", valid_567319
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567320: Call_WebAppsInstallSiteExtensionSlot_567311;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_567320.validator(path, query, header, formData, body)
  let scheme = call_567320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567320.url(scheme.get, call_567320.host, call_567320.base,
                         call_567320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567320, url, valid)

proc call*(call_567321: Call_WebAppsInstallSiteExtensionSlot_567311; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtensionSlot
  ## Install site extension on a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_567322 = newJObject()
  var query_567323 = newJObject()
  add(path_567322, "slot", newJString(slot))
  add(query_567323, "api-version", newJString(apiVersion))
  add(path_567322, "name", newJString(name))
  add(path_567322, "subscriptionId", newJString(subscriptionId))
  add(path_567322, "resourceGroupName", newJString(resourceGroupName))
  add(path_567322, "siteExtensionId", newJString(siteExtensionId))
  result = call_567321.call(path_567322, query_567323, nil, nil, nil)

var webAppsInstallSiteExtensionSlot* = Call_WebAppsInstallSiteExtensionSlot_567311(
    name: "webAppsInstallSiteExtensionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtensionSlot_567312, base: "",
    url: url_WebAppsInstallSiteExtensionSlot_567313, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtensionSlot_567298 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSiteExtensionSlot_567300(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtensionSlot_567299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567301 = path.getOrDefault("slot")
  valid_567301 = validateParameter(valid_567301, JString, required = true,
                                 default = nil)
  if valid_567301 != nil:
    section.add "slot", valid_567301
  var valid_567302 = path.getOrDefault("name")
  valid_567302 = validateParameter(valid_567302, JString, required = true,
                                 default = nil)
  if valid_567302 != nil:
    section.add "name", valid_567302
  var valid_567303 = path.getOrDefault("subscriptionId")
  valid_567303 = validateParameter(valid_567303, JString, required = true,
                                 default = nil)
  if valid_567303 != nil:
    section.add "subscriptionId", valid_567303
  var valid_567304 = path.getOrDefault("resourceGroupName")
  valid_567304 = validateParameter(valid_567304, JString, required = true,
                                 default = nil)
  if valid_567304 != nil:
    section.add "resourceGroupName", valid_567304
  var valid_567305 = path.getOrDefault("siteExtensionId")
  valid_567305 = validateParameter(valid_567305, JString, required = true,
                                 default = nil)
  if valid_567305 != nil:
    section.add "siteExtensionId", valid_567305
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567306 = query.getOrDefault("api-version")
  valid_567306 = validateParameter(valid_567306, JString, required = true,
                                 default = nil)
  if valid_567306 != nil:
    section.add "api-version", valid_567306
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567307: Call_WebAppsGetSiteExtensionSlot_567298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_567307.validator(path, query, header, formData, body)
  let scheme = call_567307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567307.url(scheme.get, call_567307.host, call_567307.base,
                         call_567307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567307, url, valid)

proc call*(call_567308: Call_WebAppsGetSiteExtensionSlot_567298; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtensionSlot
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_567309 = newJObject()
  var query_567310 = newJObject()
  add(path_567309, "slot", newJString(slot))
  add(query_567310, "api-version", newJString(apiVersion))
  add(path_567309, "name", newJString(name))
  add(path_567309, "subscriptionId", newJString(subscriptionId))
  add(path_567309, "resourceGroupName", newJString(resourceGroupName))
  add(path_567309, "siteExtensionId", newJString(siteExtensionId))
  result = call_567308.call(path_567309, query_567310, nil, nil, nil)

var webAppsGetSiteExtensionSlot* = Call_WebAppsGetSiteExtensionSlot_567298(
    name: "webAppsGetSiteExtensionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtensionSlot_567299, base: "",
    url: url_WebAppsGetSiteExtensionSlot_567300, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtensionSlot_567324 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSiteExtensionSlot_567326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtensionSlot_567325(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567327 = path.getOrDefault("slot")
  valid_567327 = validateParameter(valid_567327, JString, required = true,
                                 default = nil)
  if valid_567327 != nil:
    section.add "slot", valid_567327
  var valid_567328 = path.getOrDefault("name")
  valid_567328 = validateParameter(valid_567328, JString, required = true,
                                 default = nil)
  if valid_567328 != nil:
    section.add "name", valid_567328
  var valid_567329 = path.getOrDefault("subscriptionId")
  valid_567329 = validateParameter(valid_567329, JString, required = true,
                                 default = nil)
  if valid_567329 != nil:
    section.add "subscriptionId", valid_567329
  var valid_567330 = path.getOrDefault("resourceGroupName")
  valid_567330 = validateParameter(valid_567330, JString, required = true,
                                 default = nil)
  if valid_567330 != nil:
    section.add "resourceGroupName", valid_567330
  var valid_567331 = path.getOrDefault("siteExtensionId")
  valid_567331 = validateParameter(valid_567331, JString, required = true,
                                 default = nil)
  if valid_567331 != nil:
    section.add "siteExtensionId", valid_567331
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567332 = query.getOrDefault("api-version")
  valid_567332 = validateParameter(valid_567332, JString, required = true,
                                 default = nil)
  if valid_567332 != nil:
    section.add "api-version", valid_567332
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567333: Call_WebAppsDeleteSiteExtensionSlot_567324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_567333.validator(path, query, header, formData, body)
  let scheme = call_567333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567333.url(scheme.get, call_567333.host, call_567333.base,
                         call_567333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567333, url, valid)

proc call*(call_567334: Call_WebAppsDeleteSiteExtensionSlot_567324; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtensionSlot
  ## Remove a site extension from a web site, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_567335 = newJObject()
  var query_567336 = newJObject()
  add(path_567335, "slot", newJString(slot))
  add(query_567336, "api-version", newJString(apiVersion))
  add(path_567335, "name", newJString(name))
  add(path_567335, "subscriptionId", newJString(subscriptionId))
  add(path_567335, "resourceGroupName", newJString(resourceGroupName))
  add(path_567335, "siteExtensionId", newJString(siteExtensionId))
  result = call_567334.call(path_567335, query_567336, nil, nil, nil)

var webAppsDeleteSiteExtensionSlot* = Call_WebAppsDeleteSiteExtensionSlot_567324(
    name: "webAppsDeleteSiteExtensionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtensionSlot_567325, base: "",
    url: url_WebAppsDeleteSiteExtensionSlot_567326, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesSlot_567337 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlotDifferencesSlot_567339(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesSlot_567338(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567340 = path.getOrDefault("slot")
  valid_567340 = validateParameter(valid_567340, JString, required = true,
                                 default = nil)
  if valid_567340 != nil:
    section.add "slot", valid_567340
  var valid_567341 = path.getOrDefault("name")
  valid_567341 = validateParameter(valid_567341, JString, required = true,
                                 default = nil)
  if valid_567341 != nil:
    section.add "name", valid_567341
  var valid_567342 = path.getOrDefault("subscriptionId")
  valid_567342 = validateParameter(valid_567342, JString, required = true,
                                 default = nil)
  if valid_567342 != nil:
    section.add "subscriptionId", valid_567342
  var valid_567343 = path.getOrDefault("resourceGroupName")
  valid_567343 = validateParameter(valid_567343, JString, required = true,
                                 default = nil)
  if valid_567343 != nil:
    section.add "resourceGroupName", valid_567343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567344 = query.getOrDefault("api-version")
  valid_567344 = validateParameter(valid_567344, JString, required = true,
                                 default = nil)
  if valid_567344 != nil:
    section.add "api-version", valid_567344
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567346: Call_WebAppsListSlotDifferencesSlot_567337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_567346.validator(path, query, header, formData, body)
  let scheme = call_567346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567346.url(scheme.get, call_567346.host, call_567346.base,
                         call_567346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567346, url, valid)

proc call*(call_567347: Call_WebAppsListSlotDifferencesSlot_567337; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsListSlotDifferencesSlot
  ## Get the difference in configuration settings between two web app slots.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567348 = newJObject()
  var query_567349 = newJObject()
  var body_567350 = newJObject()
  add(path_567348, "slot", newJString(slot))
  add(query_567349, "api-version", newJString(apiVersion))
  add(path_567348, "name", newJString(name))
  add(path_567348, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567350 = slotSwapEntity
  add(path_567348, "resourceGroupName", newJString(resourceGroupName))
  result = call_567347.call(path_567348, query_567349, nil, nil, body_567350)

var webAppsListSlotDifferencesSlot* = Call_WebAppsListSlotDifferencesSlot_567337(
    name: "webAppsListSlotDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesSlot_567338, base: "",
    url: url_WebAppsListSlotDifferencesSlot_567339, schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotSlot_567351 = ref object of OpenApiRestCall_563564
proc url_WebAppsSwapSlotSlot_567353(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotSlot_567352(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567354 = path.getOrDefault("slot")
  valid_567354 = validateParameter(valid_567354, JString, required = true,
                                 default = nil)
  if valid_567354 != nil:
    section.add "slot", valid_567354
  var valid_567355 = path.getOrDefault("name")
  valid_567355 = validateParameter(valid_567355, JString, required = true,
                                 default = nil)
  if valid_567355 != nil:
    section.add "name", valid_567355
  var valid_567356 = path.getOrDefault("subscriptionId")
  valid_567356 = validateParameter(valid_567356, JString, required = true,
                                 default = nil)
  if valid_567356 != nil:
    section.add "subscriptionId", valid_567356
  var valid_567357 = path.getOrDefault("resourceGroupName")
  valid_567357 = validateParameter(valid_567357, JString, required = true,
                                 default = nil)
  if valid_567357 != nil:
    section.add "resourceGroupName", valid_567357
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567358 = query.getOrDefault("api-version")
  valid_567358 = validateParameter(valid_567358, JString, required = true,
                                 default = nil)
  if valid_567358 != nil:
    section.add "api-version", valid_567358
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567360: Call_WebAppsSwapSlotSlot_567351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_567360.validator(path, query, header, formData, body)
  let scheme = call_567360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567360.url(scheme.get, call_567360.host, call_567360.base,
                         call_567360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567360, url, valid)

proc call*(call_567361: Call_WebAppsSwapSlotSlot_567351; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsSwapSlotSlot
  ## Swaps two deployment slots of an app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567362 = newJObject()
  var query_567363 = newJObject()
  var body_567364 = newJObject()
  add(path_567362, "slot", newJString(slot))
  add(query_567363, "api-version", newJString(apiVersion))
  add(path_567362, "name", newJString(name))
  add(path_567362, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567364 = slotSwapEntity
  add(path_567362, "resourceGroupName", newJString(resourceGroupName))
  result = call_567361.call(path_567362, query_567363, nil, nil, body_567364)

var webAppsSwapSlotSlot* = Call_WebAppsSwapSlotSlot_567351(
    name: "webAppsSwapSlotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_WebAppsSwapSlotSlot_567352, base: "",
    url: url_WebAppsSwapSlotSlot_567353, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsSlot_567365 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSnapshotsSlot_567367(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsSlot_567366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567368 = path.getOrDefault("slot")
  valid_567368 = validateParameter(valid_567368, JString, required = true,
                                 default = nil)
  if valid_567368 != nil:
    section.add "slot", valid_567368
  var valid_567369 = path.getOrDefault("name")
  valid_567369 = validateParameter(valid_567369, JString, required = true,
                                 default = nil)
  if valid_567369 != nil:
    section.add "name", valid_567369
  var valid_567370 = path.getOrDefault("subscriptionId")
  valid_567370 = validateParameter(valid_567370, JString, required = true,
                                 default = nil)
  if valid_567370 != nil:
    section.add "subscriptionId", valid_567370
  var valid_567371 = path.getOrDefault("resourceGroupName")
  valid_567371 = validateParameter(valid_567371, JString, required = true,
                                 default = nil)
  if valid_567371 != nil:
    section.add "resourceGroupName", valid_567371
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567372 = query.getOrDefault("api-version")
  valid_567372 = validateParameter(valid_567372, JString, required = true,
                                 default = nil)
  if valid_567372 != nil:
    section.add "api-version", valid_567372
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567373: Call_WebAppsListSnapshotsSlot_567365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_567373.validator(path, query, header, formData, body)
  let scheme = call_567373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567373.url(scheme.get, call_567373.host, call_567373.base,
                         call_567373.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567373, url, valid)

proc call*(call_567374: Call_WebAppsListSnapshotsSlot_567365; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListSnapshotsSlot
  ## Returns all Snapshots to the user.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567375 = newJObject()
  var query_567376 = newJObject()
  add(path_567375, "slot", newJString(slot))
  add(query_567376, "api-version", newJString(apiVersion))
  add(path_567375, "name", newJString(name))
  add(path_567375, "subscriptionId", newJString(subscriptionId))
  add(path_567375, "resourceGroupName", newJString(resourceGroupName))
  result = call_567374.call(path_567375, query_567376, nil, nil, nil)

var webAppsListSnapshotsSlot* = Call_WebAppsListSnapshotsSlot_567365(
    name: "webAppsListSnapshotsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_WebAppsListSnapshotsSlot_567366, base: "",
    url: url_WebAppsListSnapshotsSlot_567367, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControlSlot_567389 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSourceControlSlot_567391(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControlSlot_567390(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567392 = path.getOrDefault("slot")
  valid_567392 = validateParameter(valid_567392, JString, required = true,
                                 default = nil)
  if valid_567392 != nil:
    section.add "slot", valid_567392
  var valid_567393 = path.getOrDefault("name")
  valid_567393 = validateParameter(valid_567393, JString, required = true,
                                 default = nil)
  if valid_567393 != nil:
    section.add "name", valid_567393
  var valid_567394 = path.getOrDefault("subscriptionId")
  valid_567394 = validateParameter(valid_567394, JString, required = true,
                                 default = nil)
  if valid_567394 != nil:
    section.add "subscriptionId", valid_567394
  var valid_567395 = path.getOrDefault("resourceGroupName")
  valid_567395 = validateParameter(valid_567395, JString, required = true,
                                 default = nil)
  if valid_567395 != nil:
    section.add "resourceGroupName", valid_567395
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567396 = query.getOrDefault("api-version")
  valid_567396 = validateParameter(valid_567396, JString, required = true,
                                 default = nil)
  if valid_567396 != nil:
    section.add "api-version", valid_567396
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567398: Call_WebAppsCreateOrUpdateSourceControlSlot_567389;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_567398.validator(path, query, header, formData, body)
  let scheme = call_567398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567398.url(scheme.get, call_567398.host, call_567398.base,
                         call_567398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567398, url, valid)

proc call*(call_567399: Call_WebAppsCreateOrUpdateSourceControlSlot_567389;
          siteSourceControl: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567400 = newJObject()
  var query_567401 = newJObject()
  var body_567402 = newJObject()
  if siteSourceControl != nil:
    body_567402 = siteSourceControl
  add(path_567400, "slot", newJString(slot))
  add(query_567401, "api-version", newJString(apiVersion))
  add(path_567400, "name", newJString(name))
  add(path_567400, "subscriptionId", newJString(subscriptionId))
  add(path_567400, "resourceGroupName", newJString(resourceGroupName))
  result = call_567399.call(path_567400, query_567401, nil, nil, body_567402)

var webAppsCreateOrUpdateSourceControlSlot* = Call_WebAppsCreateOrUpdateSourceControlSlot_567389(
    name: "webAppsCreateOrUpdateSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControlSlot_567390, base: "",
    url: url_WebAppsCreateOrUpdateSourceControlSlot_567391,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControlSlot_567377 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSourceControlSlot_567379(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControlSlot_567378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567380 = path.getOrDefault("slot")
  valid_567380 = validateParameter(valid_567380, JString, required = true,
                                 default = nil)
  if valid_567380 != nil:
    section.add "slot", valid_567380
  var valid_567381 = path.getOrDefault("name")
  valid_567381 = validateParameter(valid_567381, JString, required = true,
                                 default = nil)
  if valid_567381 != nil:
    section.add "name", valid_567381
  var valid_567382 = path.getOrDefault("subscriptionId")
  valid_567382 = validateParameter(valid_567382, JString, required = true,
                                 default = nil)
  if valid_567382 != nil:
    section.add "subscriptionId", valid_567382
  var valid_567383 = path.getOrDefault("resourceGroupName")
  valid_567383 = validateParameter(valid_567383, JString, required = true,
                                 default = nil)
  if valid_567383 != nil:
    section.add "resourceGroupName", valid_567383
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567384 = query.getOrDefault("api-version")
  valid_567384 = validateParameter(valid_567384, JString, required = true,
                                 default = nil)
  if valid_567384 != nil:
    section.add "api-version", valid_567384
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567385: Call_WebAppsGetSourceControlSlot_567377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_567385.validator(path, query, header, formData, body)
  let scheme = call_567385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567385.url(scheme.get, call_567385.host, call_567385.base,
                         call_567385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567385, url, valid)

proc call*(call_567386: Call_WebAppsGetSourceControlSlot_567377; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetSourceControlSlot
  ## Gets the source control configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567387 = newJObject()
  var query_567388 = newJObject()
  add(path_567387, "slot", newJString(slot))
  add(query_567388, "api-version", newJString(apiVersion))
  add(path_567387, "name", newJString(name))
  add(path_567387, "subscriptionId", newJString(subscriptionId))
  add(path_567387, "resourceGroupName", newJString(resourceGroupName))
  result = call_567386.call(path_567387, query_567388, nil, nil, nil)

var webAppsGetSourceControlSlot* = Call_WebAppsGetSourceControlSlot_567377(
    name: "webAppsGetSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControlSlot_567378, base: "",
    url: url_WebAppsGetSourceControlSlot_567379, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControlSlot_567415 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSourceControlSlot_567417(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControlSlot_567416(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567418 = path.getOrDefault("slot")
  valid_567418 = validateParameter(valid_567418, JString, required = true,
                                 default = nil)
  if valid_567418 != nil:
    section.add "slot", valid_567418
  var valid_567419 = path.getOrDefault("name")
  valid_567419 = validateParameter(valid_567419, JString, required = true,
                                 default = nil)
  if valid_567419 != nil:
    section.add "name", valid_567419
  var valid_567420 = path.getOrDefault("subscriptionId")
  valid_567420 = validateParameter(valid_567420, JString, required = true,
                                 default = nil)
  if valid_567420 != nil:
    section.add "subscriptionId", valid_567420
  var valid_567421 = path.getOrDefault("resourceGroupName")
  valid_567421 = validateParameter(valid_567421, JString, required = true,
                                 default = nil)
  if valid_567421 != nil:
    section.add "resourceGroupName", valid_567421
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567422 = query.getOrDefault("api-version")
  valid_567422 = validateParameter(valid_567422, JString, required = true,
                                 default = nil)
  if valid_567422 != nil:
    section.add "api-version", valid_567422
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567424: Call_WebAppsUpdateSourceControlSlot_567415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_567424.validator(path, query, header, formData, body)
  let scheme = call_567424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567424.url(scheme.get, call_567424.host, call_567424.base,
                         call_567424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567424, url, valid)

proc call*(call_567425: Call_WebAppsUpdateSourceControlSlot_567415;
          siteSourceControl: JsonNode; slot: string; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567426 = newJObject()
  var query_567427 = newJObject()
  var body_567428 = newJObject()
  if siteSourceControl != nil:
    body_567428 = siteSourceControl
  add(path_567426, "slot", newJString(slot))
  add(query_567427, "api-version", newJString(apiVersion))
  add(path_567426, "name", newJString(name))
  add(path_567426, "subscriptionId", newJString(subscriptionId))
  add(path_567426, "resourceGroupName", newJString(resourceGroupName))
  result = call_567425.call(path_567426, query_567427, nil, nil, body_567428)

var webAppsUpdateSourceControlSlot* = Call_WebAppsUpdateSourceControlSlot_567415(
    name: "webAppsUpdateSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControlSlot_567416, base: "",
    url: url_WebAppsUpdateSourceControlSlot_567417, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControlSlot_567403 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSourceControlSlot_567405(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControlSlot_567404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567406 = path.getOrDefault("slot")
  valid_567406 = validateParameter(valid_567406, JString, required = true,
                                 default = nil)
  if valid_567406 != nil:
    section.add "slot", valid_567406
  var valid_567407 = path.getOrDefault("name")
  valid_567407 = validateParameter(valid_567407, JString, required = true,
                                 default = nil)
  if valid_567407 != nil:
    section.add "name", valid_567407
  var valid_567408 = path.getOrDefault("subscriptionId")
  valid_567408 = validateParameter(valid_567408, JString, required = true,
                                 default = nil)
  if valid_567408 != nil:
    section.add "subscriptionId", valid_567408
  var valid_567409 = path.getOrDefault("resourceGroupName")
  valid_567409 = validateParameter(valid_567409, JString, required = true,
                                 default = nil)
  if valid_567409 != nil:
    section.add "resourceGroupName", valid_567409
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567410 = query.getOrDefault("api-version")
  valid_567410 = validateParameter(valid_567410, JString, required = true,
                                 default = nil)
  if valid_567410 != nil:
    section.add "api-version", valid_567410
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567411: Call_WebAppsDeleteSourceControlSlot_567403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_567411.validator(path, query, header, formData, body)
  let scheme = call_567411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567411.url(scheme.get, call_567411.host, call_567411.base,
                         call_567411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567411, url, valid)

proc call*(call_567412: Call_WebAppsDeleteSourceControlSlot_567403; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteSourceControlSlot
  ## Deletes the source control configuration of an app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567413 = newJObject()
  var query_567414 = newJObject()
  add(path_567413, "slot", newJString(slot))
  add(query_567414, "api-version", newJString(apiVersion))
  add(path_567413, "name", newJString(name))
  add(path_567413, "subscriptionId", newJString(subscriptionId))
  add(path_567413, "resourceGroupName", newJString(resourceGroupName))
  result = call_567412.call(path_567413, query_567414, nil, nil, nil)

var webAppsDeleteSourceControlSlot* = Call_WebAppsDeleteSourceControlSlot_567403(
    name: "webAppsDeleteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControlSlot_567404, base: "",
    url: url_WebAppsDeleteSourceControlSlot_567405, schemes: {Scheme.Https})
type
  Call_WebAppsStartSlot_567429 = ref object of OpenApiRestCall_563564
proc url_WebAppsStartSlot_567431(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartSlot_567430(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567432 = path.getOrDefault("slot")
  valid_567432 = validateParameter(valid_567432, JString, required = true,
                                 default = nil)
  if valid_567432 != nil:
    section.add "slot", valid_567432
  var valid_567433 = path.getOrDefault("name")
  valid_567433 = validateParameter(valid_567433, JString, required = true,
                                 default = nil)
  if valid_567433 != nil:
    section.add "name", valid_567433
  var valid_567434 = path.getOrDefault("subscriptionId")
  valid_567434 = validateParameter(valid_567434, JString, required = true,
                                 default = nil)
  if valid_567434 != nil:
    section.add "subscriptionId", valid_567434
  var valid_567435 = path.getOrDefault("resourceGroupName")
  valid_567435 = validateParameter(valid_567435, JString, required = true,
                                 default = nil)
  if valid_567435 != nil:
    section.add "resourceGroupName", valid_567435
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567436 = query.getOrDefault("api-version")
  valid_567436 = validateParameter(valid_567436, JString, required = true,
                                 default = nil)
  if valid_567436 != nil:
    section.add "api-version", valid_567436
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567437: Call_WebAppsStartSlot_567429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_567437.validator(path, query, header, formData, body)
  let scheme = call_567437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567437.url(scheme.get, call_567437.host, call_567437.base,
                         call_567437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567437, url, valid)

proc call*(call_567438: Call_WebAppsStartSlot_567429; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStartSlot
  ## Starts an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567439 = newJObject()
  var query_567440 = newJObject()
  add(path_567439, "slot", newJString(slot))
  add(query_567440, "api-version", newJString(apiVersion))
  add(path_567439, "name", newJString(name))
  add(path_567439, "subscriptionId", newJString(subscriptionId))
  add(path_567439, "resourceGroupName", newJString(resourceGroupName))
  result = call_567438.call(path_567439, query_567440, nil, nil, nil)

var webAppsStartSlot* = Call_WebAppsStartSlot_567429(name: "webAppsStartSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_WebAppsStartSlot_567430, base: "",
    url: url_WebAppsStartSlot_567431, schemes: {Scheme.Https})
type
  Call_WebAppsStopSlot_567441 = ref object of OpenApiRestCall_563564
proc url_WebAppsStopSlot_567443(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopSlot_567442(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567444 = path.getOrDefault("slot")
  valid_567444 = validateParameter(valid_567444, JString, required = true,
                                 default = nil)
  if valid_567444 != nil:
    section.add "slot", valid_567444
  var valid_567445 = path.getOrDefault("name")
  valid_567445 = validateParameter(valid_567445, JString, required = true,
                                 default = nil)
  if valid_567445 != nil:
    section.add "name", valid_567445
  var valid_567446 = path.getOrDefault("subscriptionId")
  valid_567446 = validateParameter(valid_567446, JString, required = true,
                                 default = nil)
  if valid_567446 != nil:
    section.add "subscriptionId", valid_567446
  var valid_567447 = path.getOrDefault("resourceGroupName")
  valid_567447 = validateParameter(valid_567447, JString, required = true,
                                 default = nil)
  if valid_567447 != nil:
    section.add "resourceGroupName", valid_567447
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567448 = query.getOrDefault("api-version")
  valid_567448 = validateParameter(valid_567448, JString, required = true,
                                 default = nil)
  if valid_567448 != nil:
    section.add "api-version", valid_567448
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567449: Call_WebAppsStopSlot_567441; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_567449.validator(path, query, header, formData, body)
  let scheme = call_567449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567449.url(scheme.get, call_567449.host, call_567449.base,
                         call_567449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567449, url, valid)

proc call*(call_567450: Call_WebAppsStopSlot_567441; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsStopSlot
  ## Stops an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567451 = newJObject()
  var query_567452 = newJObject()
  add(path_567451, "slot", newJString(slot))
  add(query_567452, "api-version", newJString(apiVersion))
  add(path_567451, "name", newJString(name))
  add(path_567451, "subscriptionId", newJString(subscriptionId))
  add(path_567451, "resourceGroupName", newJString(resourceGroupName))
  result = call_567450.call(path_567451, query_567452, nil, nil, nil)

var webAppsStopSlot* = Call_WebAppsStopSlot_567441(name: "webAppsStopSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_WebAppsStopSlot_567442, base: "", url: url_WebAppsStopSlot_567443,
    schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepositorySlot_567453 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncRepositorySlot_567455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepositorySlot_567454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567456 = path.getOrDefault("slot")
  valid_567456 = validateParameter(valid_567456, JString, required = true,
                                 default = nil)
  if valid_567456 != nil:
    section.add "slot", valid_567456
  var valid_567457 = path.getOrDefault("name")
  valid_567457 = validateParameter(valid_567457, JString, required = true,
                                 default = nil)
  if valid_567457 != nil:
    section.add "name", valid_567457
  var valid_567458 = path.getOrDefault("subscriptionId")
  valid_567458 = validateParameter(valid_567458, JString, required = true,
                                 default = nil)
  if valid_567458 != nil:
    section.add "subscriptionId", valid_567458
  var valid_567459 = path.getOrDefault("resourceGroupName")
  valid_567459 = validateParameter(valid_567459, JString, required = true,
                                 default = nil)
  if valid_567459 != nil:
    section.add "resourceGroupName", valid_567459
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567460 = query.getOrDefault("api-version")
  valid_567460 = validateParameter(valid_567460, JString, required = true,
                                 default = nil)
  if valid_567460 != nil:
    section.add "api-version", valid_567460
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567461: Call_WebAppsSyncRepositorySlot_567453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_567461.validator(path, query, header, formData, body)
  let scheme = call_567461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567461.url(scheme.get, call_567461.host, call_567461.base,
                         call_567461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567461, url, valid)

proc call*(call_567462: Call_WebAppsSyncRepositorySlot_567453; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsSyncRepositorySlot
  ## Sync web app repository.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567463 = newJObject()
  var query_567464 = newJObject()
  add(path_567463, "slot", newJString(slot))
  add(query_567464, "api-version", newJString(apiVersion))
  add(path_567463, "name", newJString(name))
  add(path_567463, "subscriptionId", newJString(subscriptionId))
  add(path_567463, "resourceGroupName", newJString(resourceGroupName))
  result = call_567462.call(path_567463, query_567464, nil, nil, nil)

var webAppsSyncRepositorySlot* = Call_WebAppsSyncRepositorySlot_567453(
    name: "webAppsSyncRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_WebAppsSyncRepositorySlot_567454, base: "",
    url: url_WebAppsSyncRepositorySlot_567455, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggersSlot_567465 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncFunctionTriggersSlot_567467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggersSlot_567466(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567468 = path.getOrDefault("slot")
  valid_567468 = validateParameter(valid_567468, JString, required = true,
                                 default = nil)
  if valid_567468 != nil:
    section.add "slot", valid_567468
  var valid_567469 = path.getOrDefault("name")
  valid_567469 = validateParameter(valid_567469, JString, required = true,
                                 default = nil)
  if valid_567469 != nil:
    section.add "name", valid_567469
  var valid_567470 = path.getOrDefault("subscriptionId")
  valid_567470 = validateParameter(valid_567470, JString, required = true,
                                 default = nil)
  if valid_567470 != nil:
    section.add "subscriptionId", valid_567470
  var valid_567471 = path.getOrDefault("resourceGroupName")
  valid_567471 = validateParameter(valid_567471, JString, required = true,
                                 default = nil)
  if valid_567471 != nil:
    section.add "resourceGroupName", valid_567471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567472 = query.getOrDefault("api-version")
  valid_567472 = validateParameter(valid_567472, JString, required = true,
                                 default = nil)
  if valid_567472 != nil:
    section.add "api-version", valid_567472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567473: Call_WebAppsSyncFunctionTriggersSlot_567465;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_567473.validator(path, query, header, formData, body)
  let scheme = call_567473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567473.url(scheme.get, call_567473.host, call_567473.base,
                         call_567473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567473, url, valid)

proc call*(call_567474: Call_WebAppsSyncFunctionTriggersSlot_567465; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsSyncFunctionTriggersSlot
  ## Syncs function trigger metadata to the scale controller
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567475 = newJObject()
  var query_567476 = newJObject()
  add(path_567475, "slot", newJString(slot))
  add(query_567476, "api-version", newJString(apiVersion))
  add(path_567475, "name", newJString(name))
  add(path_567475, "subscriptionId", newJString(subscriptionId))
  add(path_567475, "resourceGroupName", newJString(resourceGroupName))
  result = call_567474.call(path_567475, query_567476, nil, nil, nil)

var webAppsSyncFunctionTriggersSlot* = Call_WebAppsSyncFunctionTriggersSlot_567465(
    name: "webAppsSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggersSlot_567466, base: "",
    url: url_WebAppsSyncFunctionTriggersSlot_567467, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobsSlot_567477 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobsSlot_567479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobsSlot_567478(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567480 = path.getOrDefault("slot")
  valid_567480 = validateParameter(valid_567480, JString, required = true,
                                 default = nil)
  if valid_567480 != nil:
    section.add "slot", valid_567480
  var valid_567481 = path.getOrDefault("name")
  valid_567481 = validateParameter(valid_567481, JString, required = true,
                                 default = nil)
  if valid_567481 != nil:
    section.add "name", valid_567481
  var valid_567482 = path.getOrDefault("subscriptionId")
  valid_567482 = validateParameter(valid_567482, JString, required = true,
                                 default = nil)
  if valid_567482 != nil:
    section.add "subscriptionId", valid_567482
  var valid_567483 = path.getOrDefault("resourceGroupName")
  valid_567483 = validateParameter(valid_567483, JString, required = true,
                                 default = nil)
  if valid_567483 != nil:
    section.add "resourceGroupName", valid_567483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567484 = query.getOrDefault("api-version")
  valid_567484 = validateParameter(valid_567484, JString, required = true,
                                 default = nil)
  if valid_567484 != nil:
    section.add "api-version", valid_567484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567485: Call_WebAppsListTriggeredWebJobsSlot_567477;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_567485.validator(path, query, header, formData, body)
  let scheme = call_567485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567485.url(scheme.get, call_567485.host, call_567485.base,
                         call_567485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567485, url, valid)

proc call*(call_567486: Call_WebAppsListTriggeredWebJobsSlot_567477; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobsSlot
  ## List triggered web jobs for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567487 = newJObject()
  var query_567488 = newJObject()
  add(path_567487, "slot", newJString(slot))
  add(query_567488, "api-version", newJString(apiVersion))
  add(path_567487, "name", newJString(name))
  add(path_567487, "subscriptionId", newJString(subscriptionId))
  add(path_567487, "resourceGroupName", newJString(resourceGroupName))
  result = call_567486.call(path_567487, query_567488, nil, nil, nil)

var webAppsListTriggeredWebJobsSlot* = Call_WebAppsListTriggeredWebJobsSlot_567477(
    name: "webAppsListTriggeredWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobsSlot_567478, base: "",
    url: url_WebAppsListTriggeredWebJobsSlot_567479, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobSlot_567489 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJobSlot_567491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobSlot_567490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567492 = path.getOrDefault("slot")
  valid_567492 = validateParameter(valid_567492, JString, required = true,
                                 default = nil)
  if valid_567492 != nil:
    section.add "slot", valid_567492
  var valid_567493 = path.getOrDefault("name")
  valid_567493 = validateParameter(valid_567493, JString, required = true,
                                 default = nil)
  if valid_567493 != nil:
    section.add "name", valid_567493
  var valid_567494 = path.getOrDefault("subscriptionId")
  valid_567494 = validateParameter(valid_567494, JString, required = true,
                                 default = nil)
  if valid_567494 != nil:
    section.add "subscriptionId", valid_567494
  var valid_567495 = path.getOrDefault("webJobName")
  valid_567495 = validateParameter(valid_567495, JString, required = true,
                                 default = nil)
  if valid_567495 != nil:
    section.add "webJobName", valid_567495
  var valid_567496 = path.getOrDefault("resourceGroupName")
  valid_567496 = validateParameter(valid_567496, JString, required = true,
                                 default = nil)
  if valid_567496 != nil:
    section.add "resourceGroupName", valid_567496
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567497 = query.getOrDefault("api-version")
  valid_567497 = validateParameter(valid_567497, JString, required = true,
                                 default = nil)
  if valid_567497 != nil:
    section.add "api-version", valid_567497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567498: Call_WebAppsGetTriggeredWebJobSlot_567489; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_567498.validator(path, query, header, formData, body)
  let scheme = call_567498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567498.url(scheme.get, call_567498.host, call_567498.base,
                         call_567498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567498, url, valid)

proc call*(call_567499: Call_WebAppsGetTriggeredWebJobSlot_567489; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJobSlot
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567500 = newJObject()
  var query_567501 = newJObject()
  add(path_567500, "slot", newJString(slot))
  add(query_567501, "api-version", newJString(apiVersion))
  add(path_567500, "name", newJString(name))
  add(path_567500, "subscriptionId", newJString(subscriptionId))
  add(path_567500, "webJobName", newJString(webJobName))
  add(path_567500, "resourceGroupName", newJString(resourceGroupName))
  result = call_567499.call(path_567500, query_567501, nil, nil, nil)

var webAppsGetTriggeredWebJobSlot* = Call_WebAppsGetTriggeredWebJobSlot_567489(
    name: "webAppsGetTriggeredWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJobSlot_567490, base: "",
    url: url_WebAppsGetTriggeredWebJobSlot_567491, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJobSlot_567502 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteTriggeredWebJobSlot_567504(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJobSlot_567503(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567505 = path.getOrDefault("slot")
  valid_567505 = validateParameter(valid_567505, JString, required = true,
                                 default = nil)
  if valid_567505 != nil:
    section.add "slot", valid_567505
  var valid_567506 = path.getOrDefault("name")
  valid_567506 = validateParameter(valid_567506, JString, required = true,
                                 default = nil)
  if valid_567506 != nil:
    section.add "name", valid_567506
  var valid_567507 = path.getOrDefault("subscriptionId")
  valid_567507 = validateParameter(valid_567507, JString, required = true,
                                 default = nil)
  if valid_567507 != nil:
    section.add "subscriptionId", valid_567507
  var valid_567508 = path.getOrDefault("webJobName")
  valid_567508 = validateParameter(valid_567508, JString, required = true,
                                 default = nil)
  if valid_567508 != nil:
    section.add "webJobName", valid_567508
  var valid_567509 = path.getOrDefault("resourceGroupName")
  valid_567509 = validateParameter(valid_567509, JString, required = true,
                                 default = nil)
  if valid_567509 != nil:
    section.add "resourceGroupName", valid_567509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567510 = query.getOrDefault("api-version")
  valid_567510 = validateParameter(valid_567510, JString, required = true,
                                 default = nil)
  if valid_567510 != nil:
    section.add "api-version", valid_567510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567511: Call_WebAppsDeleteTriggeredWebJobSlot_567502;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_567511.validator(path, query, header, formData, body)
  let scheme = call_567511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567511.url(scheme.get, call_567511.host, call_567511.base,
                         call_567511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567511, url, valid)

proc call*(call_567512: Call_WebAppsDeleteTriggeredWebJobSlot_567502; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteTriggeredWebJobSlot
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567513 = newJObject()
  var query_567514 = newJObject()
  add(path_567513, "slot", newJString(slot))
  add(query_567514, "api-version", newJString(apiVersion))
  add(path_567513, "name", newJString(name))
  add(path_567513, "subscriptionId", newJString(subscriptionId))
  add(path_567513, "webJobName", newJString(webJobName))
  add(path_567513, "resourceGroupName", newJString(resourceGroupName))
  result = call_567512.call(path_567513, query_567514, nil, nil, nil)

var webAppsDeleteTriggeredWebJobSlot* = Call_WebAppsDeleteTriggeredWebJobSlot_567502(
    name: "webAppsDeleteTriggeredWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJobSlot_567503, base: "",
    url: url_WebAppsDeleteTriggeredWebJobSlot_567504, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistorySlot_567515 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobHistorySlot_567517(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistorySlot_567516(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567518 = path.getOrDefault("slot")
  valid_567518 = validateParameter(valid_567518, JString, required = true,
                                 default = nil)
  if valid_567518 != nil:
    section.add "slot", valid_567518
  var valid_567519 = path.getOrDefault("name")
  valid_567519 = validateParameter(valid_567519, JString, required = true,
                                 default = nil)
  if valid_567519 != nil:
    section.add "name", valid_567519
  var valid_567520 = path.getOrDefault("subscriptionId")
  valid_567520 = validateParameter(valid_567520, JString, required = true,
                                 default = nil)
  if valid_567520 != nil:
    section.add "subscriptionId", valid_567520
  var valid_567521 = path.getOrDefault("webJobName")
  valid_567521 = validateParameter(valid_567521, JString, required = true,
                                 default = nil)
  if valid_567521 != nil:
    section.add "webJobName", valid_567521
  var valid_567522 = path.getOrDefault("resourceGroupName")
  valid_567522 = validateParameter(valid_567522, JString, required = true,
                                 default = nil)
  if valid_567522 != nil:
    section.add "resourceGroupName", valid_567522
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567523 = query.getOrDefault("api-version")
  valid_567523 = validateParameter(valid_567523, JString, required = true,
                                 default = nil)
  if valid_567523 != nil:
    section.add "api-version", valid_567523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567524: Call_WebAppsListTriggeredWebJobHistorySlot_567515;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_567524.validator(path, query, header, formData, body)
  let scheme = call_567524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567524.url(scheme.get, call_567524.host, call_567524.base,
                         call_567524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567524, url, valid)

proc call*(call_567525: Call_WebAppsListTriggeredWebJobHistorySlot_567515;
          slot: string; apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobHistorySlot
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567526 = newJObject()
  var query_567527 = newJObject()
  add(path_567526, "slot", newJString(slot))
  add(query_567527, "api-version", newJString(apiVersion))
  add(path_567526, "name", newJString(name))
  add(path_567526, "subscriptionId", newJString(subscriptionId))
  add(path_567526, "webJobName", newJString(webJobName))
  add(path_567526, "resourceGroupName", newJString(resourceGroupName))
  result = call_567525.call(path_567526, query_567527, nil, nil, nil)

var webAppsListTriggeredWebJobHistorySlot* = Call_WebAppsListTriggeredWebJobHistorySlot_567515(
    name: "webAppsListTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistorySlot_567516, base: "",
    url: url_WebAppsListTriggeredWebJobHistorySlot_567517, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistorySlot_567528 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJobHistorySlot_567530(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistorySlot_567529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   id: JString (required)
  ##     : History ID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567531 = path.getOrDefault("slot")
  valid_567531 = validateParameter(valid_567531, JString, required = true,
                                 default = nil)
  if valid_567531 != nil:
    section.add "slot", valid_567531
  var valid_567532 = path.getOrDefault("id")
  valid_567532 = validateParameter(valid_567532, JString, required = true,
                                 default = nil)
  if valid_567532 != nil:
    section.add "id", valid_567532
  var valid_567533 = path.getOrDefault("name")
  valid_567533 = validateParameter(valid_567533, JString, required = true,
                                 default = nil)
  if valid_567533 != nil:
    section.add "name", valid_567533
  var valid_567534 = path.getOrDefault("subscriptionId")
  valid_567534 = validateParameter(valid_567534, JString, required = true,
                                 default = nil)
  if valid_567534 != nil:
    section.add "subscriptionId", valid_567534
  var valid_567535 = path.getOrDefault("webJobName")
  valid_567535 = validateParameter(valid_567535, JString, required = true,
                                 default = nil)
  if valid_567535 != nil:
    section.add "webJobName", valid_567535
  var valid_567536 = path.getOrDefault("resourceGroupName")
  valid_567536 = validateParameter(valid_567536, JString, required = true,
                                 default = nil)
  if valid_567536 != nil:
    section.add "resourceGroupName", valid_567536
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567537 = query.getOrDefault("api-version")
  valid_567537 = validateParameter(valid_567537, JString, required = true,
                                 default = nil)
  if valid_567537 != nil:
    section.add "api-version", valid_567537
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567538: Call_WebAppsGetTriggeredWebJobHistorySlot_567528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_567538.validator(path, query, header, formData, body)
  let scheme = call_567538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567538.url(scheme.get, call_567538.host, call_567538.base,
                         call_567538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567538, url, valid)

proc call*(call_567539: Call_WebAppsGetTriggeredWebJobHistorySlot_567528;
          slot: string; apiVersion: string; id: string; name: string;
          subscriptionId: string; webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistorySlot
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : History ID.
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567540 = newJObject()
  var query_567541 = newJObject()
  add(path_567540, "slot", newJString(slot))
  add(query_567541, "api-version", newJString(apiVersion))
  add(path_567540, "id", newJString(id))
  add(path_567540, "name", newJString(name))
  add(path_567540, "subscriptionId", newJString(subscriptionId))
  add(path_567540, "webJobName", newJString(webJobName))
  add(path_567540, "resourceGroupName", newJString(resourceGroupName))
  result = call_567539.call(path_567540, query_567541, nil, nil, nil)

var webAppsGetTriggeredWebJobHistorySlot* = Call_WebAppsGetTriggeredWebJobHistorySlot_567528(
    name: "webAppsGetTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistorySlot_567529, base: "",
    url: url_WebAppsGetTriggeredWebJobHistorySlot_567530, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJobSlot_567542 = ref object of OpenApiRestCall_563564
proc url_WebAppsRunTriggeredWebJobSlot_567544(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJobSlot_567543(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567545 = path.getOrDefault("slot")
  valid_567545 = validateParameter(valid_567545, JString, required = true,
                                 default = nil)
  if valid_567545 != nil:
    section.add "slot", valid_567545
  var valid_567546 = path.getOrDefault("name")
  valid_567546 = validateParameter(valid_567546, JString, required = true,
                                 default = nil)
  if valid_567546 != nil:
    section.add "name", valid_567546
  var valid_567547 = path.getOrDefault("subscriptionId")
  valid_567547 = validateParameter(valid_567547, JString, required = true,
                                 default = nil)
  if valid_567547 != nil:
    section.add "subscriptionId", valid_567547
  var valid_567548 = path.getOrDefault("webJobName")
  valid_567548 = validateParameter(valid_567548, JString, required = true,
                                 default = nil)
  if valid_567548 != nil:
    section.add "webJobName", valid_567548
  var valid_567549 = path.getOrDefault("resourceGroupName")
  valid_567549 = validateParameter(valid_567549, JString, required = true,
                                 default = nil)
  if valid_567549 != nil:
    section.add "resourceGroupName", valid_567549
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567550 = query.getOrDefault("api-version")
  valid_567550 = validateParameter(valid_567550, JString, required = true,
                                 default = nil)
  if valid_567550 != nil:
    section.add "api-version", valid_567550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567551: Call_WebAppsRunTriggeredWebJobSlot_567542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_567551.validator(path, query, header, formData, body)
  let scheme = call_567551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567551.url(scheme.get, call_567551.host, call_567551.base,
                         call_567551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567551, url, valid)

proc call*(call_567552: Call_WebAppsRunTriggeredWebJobSlot_567542; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsRunTriggeredWebJobSlot
  ## Run a triggered web job for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567553 = newJObject()
  var query_567554 = newJObject()
  add(path_567553, "slot", newJString(slot))
  add(query_567554, "api-version", newJString(apiVersion))
  add(path_567553, "name", newJString(name))
  add(path_567553, "subscriptionId", newJString(subscriptionId))
  add(path_567553, "webJobName", newJString(webJobName))
  add(path_567553, "resourceGroupName", newJString(resourceGroupName))
  result = call_567552.call(path_567553, query_567554, nil, nil, nil)

var webAppsRunTriggeredWebJobSlot* = Call_WebAppsRunTriggeredWebJobSlot_567542(
    name: "webAppsRunTriggeredWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJobSlot_567543, base: "",
    url: url_WebAppsRunTriggeredWebJobSlot_567544, schemes: {Scheme.Https})
type
  Call_WebAppsListUsagesSlot_567555 = ref object of OpenApiRestCall_563564
proc url_WebAppsListUsagesSlot_567557(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsagesSlot_567556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567558 = path.getOrDefault("slot")
  valid_567558 = validateParameter(valid_567558, JString, required = true,
                                 default = nil)
  if valid_567558 != nil:
    section.add "slot", valid_567558
  var valid_567559 = path.getOrDefault("name")
  valid_567559 = validateParameter(valid_567559, JString, required = true,
                                 default = nil)
  if valid_567559 != nil:
    section.add "name", valid_567559
  var valid_567560 = path.getOrDefault("subscriptionId")
  valid_567560 = validateParameter(valid_567560, JString, required = true,
                                 default = nil)
  if valid_567560 != nil:
    section.add "subscriptionId", valid_567560
  var valid_567561 = path.getOrDefault("resourceGroupName")
  valid_567561 = validateParameter(valid_567561, JString, required = true,
                                 default = nil)
  if valid_567561 != nil:
    section.add "resourceGroupName", valid_567561
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567562 = query.getOrDefault("api-version")
  valid_567562 = validateParameter(valid_567562, JString, required = true,
                                 default = nil)
  if valid_567562 != nil:
    section.add "api-version", valid_567562
  var valid_567563 = query.getOrDefault("$filter")
  valid_567563 = validateParameter(valid_567563, JString, required = false,
                                 default = nil)
  if valid_567563 != nil:
    section.add "$filter", valid_567563
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567564: Call_WebAppsListUsagesSlot_567555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_567564.validator(path, query, header, formData, body)
  let scheme = call_567564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567564.url(scheme.get, call_567564.host, call_567564.base,
                         call_567564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567564, url, valid)

proc call*(call_567565: Call_WebAppsListUsagesSlot_567555; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string; Filter: string = ""): Recallable =
  ## webAppsListUsagesSlot
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567566 = newJObject()
  var query_567567 = newJObject()
  add(path_567566, "slot", newJString(slot))
  add(query_567567, "api-version", newJString(apiVersion))
  add(path_567566, "name", newJString(name))
  add(path_567566, "subscriptionId", newJString(subscriptionId))
  add(path_567566, "resourceGroupName", newJString(resourceGroupName))
  add(query_567567, "$filter", newJString(Filter))
  result = call_567565.call(path_567566, query_567567, nil, nil, nil)

var webAppsListUsagesSlot* = Call_WebAppsListUsagesSlot_567555(
    name: "webAppsListUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_WebAppsListUsagesSlot_567556, base: "",
    url: url_WebAppsListUsagesSlot_567557, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnectionsSlot_567568 = ref object of OpenApiRestCall_563564
proc url_WebAppsListVnetConnectionsSlot_567570(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnectionsSlot_567569(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567571 = path.getOrDefault("slot")
  valid_567571 = validateParameter(valid_567571, JString, required = true,
                                 default = nil)
  if valid_567571 != nil:
    section.add "slot", valid_567571
  var valid_567572 = path.getOrDefault("name")
  valid_567572 = validateParameter(valid_567572, JString, required = true,
                                 default = nil)
  if valid_567572 != nil:
    section.add "name", valid_567572
  var valid_567573 = path.getOrDefault("subscriptionId")
  valid_567573 = validateParameter(valid_567573, JString, required = true,
                                 default = nil)
  if valid_567573 != nil:
    section.add "subscriptionId", valid_567573
  var valid_567574 = path.getOrDefault("resourceGroupName")
  valid_567574 = validateParameter(valid_567574, JString, required = true,
                                 default = nil)
  if valid_567574 != nil:
    section.add "resourceGroupName", valid_567574
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567575 = query.getOrDefault("api-version")
  valid_567575 = validateParameter(valid_567575, JString, required = true,
                                 default = nil)
  if valid_567575 != nil:
    section.add "api-version", valid_567575
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567576: Call_WebAppsListVnetConnectionsSlot_567568; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_567576.validator(path, query, header, formData, body)
  let scheme = call_567576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567576.url(scheme.get, call_567576.host, call_567576.base,
                         call_567576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567576, url, valid)

proc call*(call_567577: Call_WebAppsListVnetConnectionsSlot_567568; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListVnetConnectionsSlot
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567578 = newJObject()
  var query_567579 = newJObject()
  add(path_567578, "slot", newJString(slot))
  add(query_567579, "api-version", newJString(apiVersion))
  add(path_567578, "name", newJString(name))
  add(path_567578, "subscriptionId", newJString(subscriptionId))
  add(path_567578, "resourceGroupName", newJString(resourceGroupName))
  result = call_567577.call(path_567578, query_567579, nil, nil, nil)

var webAppsListVnetConnectionsSlot* = Call_WebAppsListVnetConnectionsSlot_567568(
    name: "webAppsListVnetConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnectionsSlot_567569, base: "",
    url: url_WebAppsListVnetConnectionsSlot_567570, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionSlot_567593 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnectionSlot_567595(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionSlot_567594(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567596 = path.getOrDefault("slot")
  valid_567596 = validateParameter(valid_567596, JString, required = true,
                                 default = nil)
  if valid_567596 != nil:
    section.add "slot", valid_567596
  var valid_567597 = path.getOrDefault("name")
  valid_567597 = validateParameter(valid_567597, JString, required = true,
                                 default = nil)
  if valid_567597 != nil:
    section.add "name", valid_567597
  var valid_567598 = path.getOrDefault("vnetName")
  valid_567598 = validateParameter(valid_567598, JString, required = true,
                                 default = nil)
  if valid_567598 != nil:
    section.add "vnetName", valid_567598
  var valid_567599 = path.getOrDefault("subscriptionId")
  valid_567599 = validateParameter(valid_567599, JString, required = true,
                                 default = nil)
  if valid_567599 != nil:
    section.add "subscriptionId", valid_567599
  var valid_567600 = path.getOrDefault("resourceGroupName")
  valid_567600 = validateParameter(valid_567600, JString, required = true,
                                 default = nil)
  if valid_567600 != nil:
    section.add "resourceGroupName", valid_567600
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567601 = query.getOrDefault("api-version")
  valid_567601 = validateParameter(valid_567601, JString, required = true,
                                 default = nil)
  if valid_567601 != nil:
    section.add "api-version", valid_567601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567603: Call_WebAppsCreateOrUpdateVnetConnectionSlot_567593;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_567603.validator(path, query, header, formData, body)
  let scheme = call_567603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567603.url(scheme.get, call_567603.host, call_567603.base,
                         call_567603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567603, url, valid)

proc call*(call_567604: Call_WebAppsCreateOrUpdateVnetConnectionSlot_567593;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567605 = newJObject()
  var query_567606 = newJObject()
  var body_567607 = newJObject()
  add(path_567605, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567607 = connectionEnvelope
  add(query_567606, "api-version", newJString(apiVersion))
  add(path_567605, "name", newJString(name))
  add(path_567605, "vnetName", newJString(vnetName))
  add(path_567605, "subscriptionId", newJString(subscriptionId))
  add(path_567605, "resourceGroupName", newJString(resourceGroupName))
  result = call_567604.call(path_567605, query_567606, nil, nil, body_567607)

var webAppsCreateOrUpdateVnetConnectionSlot* = Call_WebAppsCreateOrUpdateVnetConnectionSlot_567593(
    name: "webAppsCreateOrUpdateVnetConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionSlot_567594, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnectionSlot_567595,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionSlot_567580 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnectionSlot_567582(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionSlot_567581(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567583 = path.getOrDefault("slot")
  valid_567583 = validateParameter(valid_567583, JString, required = true,
                                 default = nil)
  if valid_567583 != nil:
    section.add "slot", valid_567583
  var valid_567584 = path.getOrDefault("name")
  valid_567584 = validateParameter(valid_567584, JString, required = true,
                                 default = nil)
  if valid_567584 != nil:
    section.add "name", valid_567584
  var valid_567585 = path.getOrDefault("vnetName")
  valid_567585 = validateParameter(valid_567585, JString, required = true,
                                 default = nil)
  if valid_567585 != nil:
    section.add "vnetName", valid_567585
  var valid_567586 = path.getOrDefault("subscriptionId")
  valid_567586 = validateParameter(valid_567586, JString, required = true,
                                 default = nil)
  if valid_567586 != nil:
    section.add "subscriptionId", valid_567586
  var valid_567587 = path.getOrDefault("resourceGroupName")
  valid_567587 = validateParameter(valid_567587, JString, required = true,
                                 default = nil)
  if valid_567587 != nil:
    section.add "resourceGroupName", valid_567587
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567588 = query.getOrDefault("api-version")
  valid_567588 = validateParameter(valid_567588, JString, required = true,
                                 default = nil)
  if valid_567588 != nil:
    section.add "api-version", valid_567588
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567589: Call_WebAppsGetVnetConnectionSlot_567580; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_567589.validator(path, query, header, formData, body)
  let scheme = call_567589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567589.url(scheme.get, call_567589.host, call_567589.base,
                         call_567589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567589, url, valid)

proc call*(call_567590: Call_WebAppsGetVnetConnectionSlot_567580; slot: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnectionSlot
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567591 = newJObject()
  var query_567592 = newJObject()
  add(path_567591, "slot", newJString(slot))
  add(query_567592, "api-version", newJString(apiVersion))
  add(path_567591, "name", newJString(name))
  add(path_567591, "vnetName", newJString(vnetName))
  add(path_567591, "subscriptionId", newJString(subscriptionId))
  add(path_567591, "resourceGroupName", newJString(resourceGroupName))
  result = call_567590.call(path_567591, query_567592, nil, nil, nil)

var webAppsGetVnetConnectionSlot* = Call_WebAppsGetVnetConnectionSlot_567580(
    name: "webAppsGetVnetConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnectionSlot_567581, base: "",
    url: url_WebAppsGetVnetConnectionSlot_567582, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionSlot_567621 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnectionSlot_567623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionSlot_567622(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567624 = path.getOrDefault("slot")
  valid_567624 = validateParameter(valid_567624, JString, required = true,
                                 default = nil)
  if valid_567624 != nil:
    section.add "slot", valid_567624
  var valid_567625 = path.getOrDefault("name")
  valid_567625 = validateParameter(valid_567625, JString, required = true,
                                 default = nil)
  if valid_567625 != nil:
    section.add "name", valid_567625
  var valid_567626 = path.getOrDefault("vnetName")
  valid_567626 = validateParameter(valid_567626, JString, required = true,
                                 default = nil)
  if valid_567626 != nil:
    section.add "vnetName", valid_567626
  var valid_567627 = path.getOrDefault("subscriptionId")
  valid_567627 = validateParameter(valid_567627, JString, required = true,
                                 default = nil)
  if valid_567627 != nil:
    section.add "subscriptionId", valid_567627
  var valid_567628 = path.getOrDefault("resourceGroupName")
  valid_567628 = validateParameter(valid_567628, JString, required = true,
                                 default = nil)
  if valid_567628 != nil:
    section.add "resourceGroupName", valid_567628
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567629 = query.getOrDefault("api-version")
  valid_567629 = validateParameter(valid_567629, JString, required = true,
                                 default = nil)
  if valid_567629 != nil:
    section.add "api-version", valid_567629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567631: Call_WebAppsUpdateVnetConnectionSlot_567621;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_567631.validator(path, query, header, formData, body)
  let scheme = call_567631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567631.url(scheme.get, call_567631.host, call_567631.base,
                         call_567631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567631, url, valid)

proc call*(call_567632: Call_WebAppsUpdateVnetConnectionSlot_567621; slot: string;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567633 = newJObject()
  var query_567634 = newJObject()
  var body_567635 = newJObject()
  add(path_567633, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567635 = connectionEnvelope
  add(query_567634, "api-version", newJString(apiVersion))
  add(path_567633, "name", newJString(name))
  add(path_567633, "vnetName", newJString(vnetName))
  add(path_567633, "subscriptionId", newJString(subscriptionId))
  add(path_567633, "resourceGroupName", newJString(resourceGroupName))
  result = call_567632.call(path_567633, query_567634, nil, nil, body_567635)

var webAppsUpdateVnetConnectionSlot* = Call_WebAppsUpdateVnetConnectionSlot_567621(
    name: "webAppsUpdateVnetConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnectionSlot_567622, base: "",
    url: url_WebAppsUpdateVnetConnectionSlot_567623, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnectionSlot_567608 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteVnetConnectionSlot_567610(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnectionSlot_567609(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567611 = path.getOrDefault("slot")
  valid_567611 = validateParameter(valid_567611, JString, required = true,
                                 default = nil)
  if valid_567611 != nil:
    section.add "slot", valid_567611
  var valid_567612 = path.getOrDefault("name")
  valid_567612 = validateParameter(valid_567612, JString, required = true,
                                 default = nil)
  if valid_567612 != nil:
    section.add "name", valid_567612
  var valid_567613 = path.getOrDefault("vnetName")
  valid_567613 = validateParameter(valid_567613, JString, required = true,
                                 default = nil)
  if valid_567613 != nil:
    section.add "vnetName", valid_567613
  var valid_567614 = path.getOrDefault("subscriptionId")
  valid_567614 = validateParameter(valid_567614, JString, required = true,
                                 default = nil)
  if valid_567614 != nil:
    section.add "subscriptionId", valid_567614
  var valid_567615 = path.getOrDefault("resourceGroupName")
  valid_567615 = validateParameter(valid_567615, JString, required = true,
                                 default = nil)
  if valid_567615 != nil:
    section.add "resourceGroupName", valid_567615
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567616 = query.getOrDefault("api-version")
  valid_567616 = validateParameter(valid_567616, JString, required = true,
                                 default = nil)
  if valid_567616 != nil:
    section.add "api-version", valid_567616
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567617: Call_WebAppsDeleteVnetConnectionSlot_567608;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_567617.validator(path, query, header, formData, body)
  let scheme = call_567617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567617.url(scheme.get, call_567617.host, call_567617.base,
                         call_567617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567617, url, valid)

proc call*(call_567618: Call_WebAppsDeleteVnetConnectionSlot_567608; slot: string;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteVnetConnectionSlot
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567619 = newJObject()
  var query_567620 = newJObject()
  add(path_567619, "slot", newJString(slot))
  add(query_567620, "api-version", newJString(apiVersion))
  add(path_567619, "name", newJString(name))
  add(path_567619, "vnetName", newJString(vnetName))
  add(path_567619, "subscriptionId", newJString(subscriptionId))
  add(path_567619, "resourceGroupName", newJString(resourceGroupName))
  result = call_567618.call(path_567619, query_567620, nil, nil, nil)

var webAppsDeleteVnetConnectionSlot* = Call_WebAppsDeleteVnetConnectionSlot_567608(
    name: "webAppsDeleteVnetConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnectionSlot_567609, base: "",
    url: url_WebAppsDeleteVnetConnectionSlot_567610, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567650 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567652(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567651(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567653 = path.getOrDefault("slot")
  valid_567653 = validateParameter(valid_567653, JString, required = true,
                                 default = nil)
  if valid_567653 != nil:
    section.add "slot", valid_567653
  var valid_567654 = path.getOrDefault("gatewayName")
  valid_567654 = validateParameter(valid_567654, JString, required = true,
                                 default = nil)
  if valid_567654 != nil:
    section.add "gatewayName", valid_567654
  var valid_567655 = path.getOrDefault("name")
  valid_567655 = validateParameter(valid_567655, JString, required = true,
                                 default = nil)
  if valid_567655 != nil:
    section.add "name", valid_567655
  var valid_567656 = path.getOrDefault("vnetName")
  valid_567656 = validateParameter(valid_567656, JString, required = true,
                                 default = nil)
  if valid_567656 != nil:
    section.add "vnetName", valid_567656
  var valid_567657 = path.getOrDefault("subscriptionId")
  valid_567657 = validateParameter(valid_567657, JString, required = true,
                                 default = nil)
  if valid_567657 != nil:
    section.add "subscriptionId", valid_567657
  var valid_567658 = path.getOrDefault("resourceGroupName")
  valid_567658 = validateParameter(valid_567658, JString, required = true,
                                 default = nil)
  if valid_567658 != nil:
    section.add "resourceGroupName", valid_567658
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567659 = query.getOrDefault("api-version")
  valid_567659 = validateParameter(valid_567659, JString, required = true,
                                 default = nil)
  if valid_567659 != nil:
    section.add "api-version", valid_567659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567661: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567650;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_567661.validator(path, query, header, formData, body)
  let scheme = call_567661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567661.url(scheme.get, call_567661.host, call_567661.base,
                         call_567661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567661, url, valid)

proc call*(call_567662: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567650;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567663 = newJObject()
  var query_567664 = newJObject()
  var body_567665 = newJObject()
  add(path_567663, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567665 = connectionEnvelope
  add(query_567664, "api-version", newJString(apiVersion))
  add(path_567663, "gatewayName", newJString(gatewayName))
  add(path_567663, "name", newJString(name))
  add(path_567663, "vnetName", newJString(vnetName))
  add(path_567663, "subscriptionId", newJString(subscriptionId))
  add(path_567663, "resourceGroupName", newJString(resourceGroupName))
  result = call_567662.call(path_567663, query_567664, nil, nil, body_567665)

var webAppsCreateOrUpdateVnetConnectionGatewaySlot* = Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567650(
    name: "webAppsCreateOrUpdateVnetConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567651,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_567652,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGatewaySlot_567636 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnectionGatewaySlot_567638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGatewaySlot_567637(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567639 = path.getOrDefault("slot")
  valid_567639 = validateParameter(valid_567639, JString, required = true,
                                 default = nil)
  if valid_567639 != nil:
    section.add "slot", valid_567639
  var valid_567640 = path.getOrDefault("gatewayName")
  valid_567640 = validateParameter(valid_567640, JString, required = true,
                                 default = nil)
  if valid_567640 != nil:
    section.add "gatewayName", valid_567640
  var valid_567641 = path.getOrDefault("name")
  valid_567641 = validateParameter(valid_567641, JString, required = true,
                                 default = nil)
  if valid_567641 != nil:
    section.add "name", valid_567641
  var valid_567642 = path.getOrDefault("vnetName")
  valid_567642 = validateParameter(valid_567642, JString, required = true,
                                 default = nil)
  if valid_567642 != nil:
    section.add "vnetName", valid_567642
  var valid_567643 = path.getOrDefault("subscriptionId")
  valid_567643 = validateParameter(valid_567643, JString, required = true,
                                 default = nil)
  if valid_567643 != nil:
    section.add "subscriptionId", valid_567643
  var valid_567644 = path.getOrDefault("resourceGroupName")
  valid_567644 = validateParameter(valid_567644, JString, required = true,
                                 default = nil)
  if valid_567644 != nil:
    section.add "resourceGroupName", valid_567644
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567645 = query.getOrDefault("api-version")
  valid_567645 = validateParameter(valid_567645, JString, required = true,
                                 default = nil)
  if valid_567645 != nil:
    section.add "api-version", valid_567645
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567646: Call_WebAppsGetVnetConnectionGatewaySlot_567636;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_567646.validator(path, query, header, formData, body)
  let scheme = call_567646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567646.url(scheme.get, call_567646.host, call_567646.base,
                         call_567646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567646, url, valid)

proc call*(call_567647: Call_WebAppsGetVnetConnectionGatewaySlot_567636;
          slot: string; apiVersion: string; gatewayName: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnectionGatewaySlot
  ## Gets an app's Virtual Network gateway.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567648 = newJObject()
  var query_567649 = newJObject()
  add(path_567648, "slot", newJString(slot))
  add(query_567649, "api-version", newJString(apiVersion))
  add(path_567648, "gatewayName", newJString(gatewayName))
  add(path_567648, "name", newJString(name))
  add(path_567648, "vnetName", newJString(vnetName))
  add(path_567648, "subscriptionId", newJString(subscriptionId))
  add(path_567648, "resourceGroupName", newJString(resourceGroupName))
  result = call_567647.call(path_567648, query_567649, nil, nil, nil)

var webAppsGetVnetConnectionGatewaySlot* = Call_WebAppsGetVnetConnectionGatewaySlot_567636(
    name: "webAppsGetVnetConnectionGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGatewaySlot_567637, base: "",
    url: url_WebAppsGetVnetConnectionGatewaySlot_567638, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGatewaySlot_567666 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnectionGatewaySlot_567668(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGatewaySlot_567667(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567669 = path.getOrDefault("slot")
  valid_567669 = validateParameter(valid_567669, JString, required = true,
                                 default = nil)
  if valid_567669 != nil:
    section.add "slot", valid_567669
  var valid_567670 = path.getOrDefault("gatewayName")
  valid_567670 = validateParameter(valid_567670, JString, required = true,
                                 default = nil)
  if valid_567670 != nil:
    section.add "gatewayName", valid_567670
  var valid_567671 = path.getOrDefault("name")
  valid_567671 = validateParameter(valid_567671, JString, required = true,
                                 default = nil)
  if valid_567671 != nil:
    section.add "name", valid_567671
  var valid_567672 = path.getOrDefault("vnetName")
  valid_567672 = validateParameter(valid_567672, JString, required = true,
                                 default = nil)
  if valid_567672 != nil:
    section.add "vnetName", valid_567672
  var valid_567673 = path.getOrDefault("subscriptionId")
  valid_567673 = validateParameter(valid_567673, JString, required = true,
                                 default = nil)
  if valid_567673 != nil:
    section.add "subscriptionId", valid_567673
  var valid_567674 = path.getOrDefault("resourceGroupName")
  valid_567674 = validateParameter(valid_567674, JString, required = true,
                                 default = nil)
  if valid_567674 != nil:
    section.add "resourceGroupName", valid_567674
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567675 = query.getOrDefault("api-version")
  valid_567675 = validateParameter(valid_567675, JString, required = true,
                                 default = nil)
  if valid_567675 != nil:
    section.add "api-version", valid_567675
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567677: Call_WebAppsUpdateVnetConnectionGatewaySlot_567666;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_567677.validator(path, query, header, formData, body)
  let scheme = call_567677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567677.url(scheme.get, call_567677.host, call_567677.base,
                         call_567677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567677, url, valid)

proc call*(call_567678: Call_WebAppsUpdateVnetConnectionGatewaySlot_567666;
          slot: string; connectionEnvelope: JsonNode; apiVersion: string;
          gatewayName: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567679 = newJObject()
  var query_567680 = newJObject()
  var body_567681 = newJObject()
  add(path_567679, "slot", newJString(slot))
  if connectionEnvelope != nil:
    body_567681 = connectionEnvelope
  add(query_567680, "api-version", newJString(apiVersion))
  add(path_567679, "gatewayName", newJString(gatewayName))
  add(path_567679, "name", newJString(name))
  add(path_567679, "vnetName", newJString(vnetName))
  add(path_567679, "subscriptionId", newJString(subscriptionId))
  add(path_567679, "resourceGroupName", newJString(resourceGroupName))
  result = call_567678.call(path_567679, query_567680, nil, nil, body_567681)

var webAppsUpdateVnetConnectionGatewaySlot* = Call_WebAppsUpdateVnetConnectionGatewaySlot_567666(
    name: "webAppsUpdateVnetConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGatewaySlot_567667, base: "",
    url: url_WebAppsUpdateVnetConnectionGatewaySlot_567668,
    schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobsSlot_567682 = ref object of OpenApiRestCall_563564
proc url_WebAppsListWebJobsSlot_567684(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobsSlot_567683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567685 = path.getOrDefault("slot")
  valid_567685 = validateParameter(valid_567685, JString, required = true,
                                 default = nil)
  if valid_567685 != nil:
    section.add "slot", valid_567685
  var valid_567686 = path.getOrDefault("name")
  valid_567686 = validateParameter(valid_567686, JString, required = true,
                                 default = nil)
  if valid_567686 != nil:
    section.add "name", valid_567686
  var valid_567687 = path.getOrDefault("subscriptionId")
  valid_567687 = validateParameter(valid_567687, JString, required = true,
                                 default = nil)
  if valid_567687 != nil:
    section.add "subscriptionId", valid_567687
  var valid_567688 = path.getOrDefault("resourceGroupName")
  valid_567688 = validateParameter(valid_567688, JString, required = true,
                                 default = nil)
  if valid_567688 != nil:
    section.add "resourceGroupName", valid_567688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567689 = query.getOrDefault("api-version")
  valid_567689 = validateParameter(valid_567689, JString, required = true,
                                 default = nil)
  if valid_567689 != nil:
    section.add "api-version", valid_567689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567690: Call_WebAppsListWebJobsSlot_567682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_567690.validator(path, query, header, formData, body)
  let scheme = call_567690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567690.url(scheme.get, call_567690.host, call_567690.base,
                         call_567690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567690, url, valid)

proc call*(call_567691: Call_WebAppsListWebJobsSlot_567682; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListWebJobsSlot
  ## List webjobs for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567692 = newJObject()
  var query_567693 = newJObject()
  add(path_567692, "slot", newJString(slot))
  add(query_567693, "api-version", newJString(apiVersion))
  add(path_567692, "name", newJString(name))
  add(path_567692, "subscriptionId", newJString(subscriptionId))
  add(path_567692, "resourceGroupName", newJString(resourceGroupName))
  result = call_567691.call(path_567692, query_567693, nil, nil, nil)

var webAppsListWebJobsSlot* = Call_WebAppsListWebJobsSlot_567682(
    name: "webAppsListWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    validator: validate_WebAppsListWebJobsSlot_567683, base: "",
    url: url_WebAppsListWebJobsSlot_567684, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJobSlot_567694 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebJobSlot_567696(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJobSlot_567695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `slot` field"
  var valid_567697 = path.getOrDefault("slot")
  valid_567697 = validateParameter(valid_567697, JString, required = true,
                                 default = nil)
  if valid_567697 != nil:
    section.add "slot", valid_567697
  var valid_567698 = path.getOrDefault("name")
  valid_567698 = validateParameter(valid_567698, JString, required = true,
                                 default = nil)
  if valid_567698 != nil:
    section.add "name", valid_567698
  var valid_567699 = path.getOrDefault("subscriptionId")
  valid_567699 = validateParameter(valid_567699, JString, required = true,
                                 default = nil)
  if valid_567699 != nil:
    section.add "subscriptionId", valid_567699
  var valid_567700 = path.getOrDefault("webJobName")
  valid_567700 = validateParameter(valid_567700, JString, required = true,
                                 default = nil)
  if valid_567700 != nil:
    section.add "webJobName", valid_567700
  var valid_567701 = path.getOrDefault("resourceGroupName")
  valid_567701 = validateParameter(valid_567701, JString, required = true,
                                 default = nil)
  if valid_567701 != nil:
    section.add "resourceGroupName", valid_567701
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567702 = query.getOrDefault("api-version")
  valid_567702 = validateParameter(valid_567702, JString, required = true,
                                 default = nil)
  if valid_567702 != nil:
    section.add "api-version", valid_567702
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567703: Call_WebAppsGetWebJobSlot_567694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_567703.validator(path, query, header, formData, body)
  let scheme = call_567703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567703.url(scheme.get, call_567703.host, call_567703.base,
                         call_567703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567703, url, valid)

proc call*(call_567704: Call_WebAppsGetWebJobSlot_567694; slot: string;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetWebJobSlot
  ## Get webjob information for an app, or a deployment slot.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567705 = newJObject()
  var query_567706 = newJObject()
  add(path_567705, "slot", newJString(slot))
  add(query_567706, "api-version", newJString(apiVersion))
  add(path_567705, "name", newJString(name))
  add(path_567705, "subscriptionId", newJString(subscriptionId))
  add(path_567705, "webJobName", newJString(webJobName))
  add(path_567705, "resourceGroupName", newJString(resourceGroupName))
  result = call_567704.call(path_567705, query_567706, nil, nil, nil)

var webAppsGetWebJobSlot* = Call_WebAppsGetWebJobSlot_567694(
    name: "webAppsGetWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJobSlot_567695, base: "",
    url: url_WebAppsGetWebJobSlot_567696, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesFromProduction_567707 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSlotDifferencesFromProduction_567709(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesFromProduction_567708(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567710 = path.getOrDefault("name")
  valid_567710 = validateParameter(valid_567710, JString, required = true,
                                 default = nil)
  if valid_567710 != nil:
    section.add "name", valid_567710
  var valid_567711 = path.getOrDefault("subscriptionId")
  valid_567711 = validateParameter(valid_567711, JString, required = true,
                                 default = nil)
  if valid_567711 != nil:
    section.add "subscriptionId", valid_567711
  var valid_567712 = path.getOrDefault("resourceGroupName")
  valid_567712 = validateParameter(valid_567712, JString, required = true,
                                 default = nil)
  if valid_567712 != nil:
    section.add "resourceGroupName", valid_567712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567713 = query.getOrDefault("api-version")
  valid_567713 = validateParameter(valid_567713, JString, required = true,
                                 default = nil)
  if valid_567713 != nil:
    section.add "api-version", valid_567713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567715: Call_WebAppsListSlotDifferencesFromProduction_567707;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_567715.validator(path, query, header, formData, body)
  let scheme = call_567715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567715.url(scheme.get, call_567715.host, call_567715.base,
                         call_567715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567715, url, valid)

proc call*(call_567716: Call_WebAppsListSlotDifferencesFromProduction_567707;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsListSlotDifferencesFromProduction
  ## Get the difference in configuration settings between two web app slots.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567717 = newJObject()
  var query_567718 = newJObject()
  var body_567719 = newJObject()
  add(query_567718, "api-version", newJString(apiVersion))
  add(path_567717, "name", newJString(name))
  add(path_567717, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567719 = slotSwapEntity
  add(path_567717, "resourceGroupName", newJString(resourceGroupName))
  result = call_567716.call(path_567717, query_567718, nil, nil, body_567719)

var webAppsListSlotDifferencesFromProduction* = Call_WebAppsListSlotDifferencesFromProduction_567707(
    name: "webAppsListSlotDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesFromProduction_567708, base: "",
    url: url_WebAppsListSlotDifferencesFromProduction_567709,
    schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotWithProduction_567720 = ref object of OpenApiRestCall_563564
proc url_WebAppsSwapSlotWithProduction_567722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotWithProduction_567721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567723 = path.getOrDefault("name")
  valid_567723 = validateParameter(valid_567723, JString, required = true,
                                 default = nil)
  if valid_567723 != nil:
    section.add "name", valid_567723
  var valid_567724 = path.getOrDefault("subscriptionId")
  valid_567724 = validateParameter(valid_567724, JString, required = true,
                                 default = nil)
  if valid_567724 != nil:
    section.add "subscriptionId", valid_567724
  var valid_567725 = path.getOrDefault("resourceGroupName")
  valid_567725 = validateParameter(valid_567725, JString, required = true,
                                 default = nil)
  if valid_567725 != nil:
    section.add "resourceGroupName", valid_567725
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567726 = query.getOrDefault("api-version")
  valid_567726 = validateParameter(valid_567726, JString, required = true,
                                 default = nil)
  if valid_567726 != nil:
    section.add "api-version", valid_567726
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567728: Call_WebAppsSwapSlotWithProduction_567720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_567728.validator(path, query, header, formData, body)
  let scheme = call_567728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567728.url(scheme.get, call_567728.host, call_567728.base,
                         call_567728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567728, url, valid)

proc call*(call_567729: Call_WebAppsSwapSlotWithProduction_567720;
          apiVersion: string; name: string; subscriptionId: string;
          slotSwapEntity: JsonNode; resourceGroupName: string): Recallable =
  ## webAppsSwapSlotWithProduction
  ## Swaps two deployment slots of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567730 = newJObject()
  var query_567731 = newJObject()
  var body_567732 = newJObject()
  add(query_567731, "api-version", newJString(apiVersion))
  add(path_567730, "name", newJString(name))
  add(path_567730, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_567732 = slotSwapEntity
  add(path_567730, "resourceGroupName", newJString(resourceGroupName))
  result = call_567729.call(path_567730, query_567731, nil, nil, body_567732)

var webAppsSwapSlotWithProduction* = Call_WebAppsSwapSlotWithProduction_567720(
    name: "webAppsSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_WebAppsSwapSlotWithProduction_567721, base: "",
    url: url_WebAppsSwapSlotWithProduction_567722, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshots_567733 = ref object of OpenApiRestCall_563564
proc url_WebAppsListSnapshots_567735(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshots_567734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567736 = path.getOrDefault("name")
  valid_567736 = validateParameter(valid_567736, JString, required = true,
                                 default = nil)
  if valid_567736 != nil:
    section.add "name", valid_567736
  var valid_567737 = path.getOrDefault("subscriptionId")
  valid_567737 = validateParameter(valid_567737, JString, required = true,
                                 default = nil)
  if valid_567737 != nil:
    section.add "subscriptionId", valid_567737
  var valid_567738 = path.getOrDefault("resourceGroupName")
  valid_567738 = validateParameter(valid_567738, JString, required = true,
                                 default = nil)
  if valid_567738 != nil:
    section.add "resourceGroupName", valid_567738
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567739 = query.getOrDefault("api-version")
  valid_567739 = validateParameter(valid_567739, JString, required = true,
                                 default = nil)
  if valid_567739 != nil:
    section.add "api-version", valid_567739
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567740: Call_WebAppsListSnapshots_567733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_567740.validator(path, query, header, formData, body)
  let scheme = call_567740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567740.url(scheme.get, call_567740.host, call_567740.base,
                         call_567740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567740, url, valid)

proc call*(call_567741: Call_WebAppsListSnapshots_567733; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListSnapshots
  ## Returns all Snapshots to the user.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567742 = newJObject()
  var query_567743 = newJObject()
  add(query_567743, "api-version", newJString(apiVersion))
  add(path_567742, "name", newJString(name))
  add(path_567742, "subscriptionId", newJString(subscriptionId))
  add(path_567742, "resourceGroupName", newJString(resourceGroupName))
  result = call_567741.call(path_567742, query_567743, nil, nil, nil)

var webAppsListSnapshots* = Call_WebAppsListSnapshots_567733(
    name: "webAppsListSnapshots", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_WebAppsListSnapshots_567734, base: "",
    url: url_WebAppsListSnapshots_567735, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControl_567755 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateSourceControl_567757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControl_567756(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567758 = path.getOrDefault("name")
  valid_567758 = validateParameter(valid_567758, JString, required = true,
                                 default = nil)
  if valid_567758 != nil:
    section.add "name", valid_567758
  var valid_567759 = path.getOrDefault("subscriptionId")
  valid_567759 = validateParameter(valid_567759, JString, required = true,
                                 default = nil)
  if valid_567759 != nil:
    section.add "subscriptionId", valid_567759
  var valid_567760 = path.getOrDefault("resourceGroupName")
  valid_567760 = validateParameter(valid_567760, JString, required = true,
                                 default = nil)
  if valid_567760 != nil:
    section.add "resourceGroupName", valid_567760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567761 = query.getOrDefault("api-version")
  valid_567761 = validateParameter(valid_567761, JString, required = true,
                                 default = nil)
  if valid_567761 != nil:
    section.add "api-version", valid_567761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567763: Call_WebAppsCreateOrUpdateSourceControl_567755;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_567763.validator(path, query, header, formData, body)
  let scheme = call_567763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567763.url(scheme.get, call_567763.host, call_567763.base,
                         call_567763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567763, url, valid)

proc call*(call_567764: Call_WebAppsCreateOrUpdateSourceControl_567755;
          siteSourceControl: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567765 = newJObject()
  var query_567766 = newJObject()
  var body_567767 = newJObject()
  if siteSourceControl != nil:
    body_567767 = siteSourceControl
  add(query_567766, "api-version", newJString(apiVersion))
  add(path_567765, "name", newJString(name))
  add(path_567765, "subscriptionId", newJString(subscriptionId))
  add(path_567765, "resourceGroupName", newJString(resourceGroupName))
  result = call_567764.call(path_567765, query_567766, nil, nil, body_567767)

var webAppsCreateOrUpdateSourceControl* = Call_WebAppsCreateOrUpdateSourceControl_567755(
    name: "webAppsCreateOrUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControl_567756, base: "",
    url: url_WebAppsCreateOrUpdateSourceControl_567757, schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControl_567744 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetSourceControl_567746(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControl_567745(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567747 = path.getOrDefault("name")
  valid_567747 = validateParameter(valid_567747, JString, required = true,
                                 default = nil)
  if valid_567747 != nil:
    section.add "name", valid_567747
  var valid_567748 = path.getOrDefault("subscriptionId")
  valid_567748 = validateParameter(valid_567748, JString, required = true,
                                 default = nil)
  if valid_567748 != nil:
    section.add "subscriptionId", valid_567748
  var valid_567749 = path.getOrDefault("resourceGroupName")
  valid_567749 = validateParameter(valid_567749, JString, required = true,
                                 default = nil)
  if valid_567749 != nil:
    section.add "resourceGroupName", valid_567749
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567750 = query.getOrDefault("api-version")
  valid_567750 = validateParameter(valid_567750, JString, required = true,
                                 default = nil)
  if valid_567750 != nil:
    section.add "api-version", valid_567750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567751: Call_WebAppsGetSourceControl_567744; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_567751.validator(path, query, header, formData, body)
  let scheme = call_567751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567751.url(scheme.get, call_567751.host, call_567751.base,
                         call_567751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567751, url, valid)

proc call*(call_567752: Call_WebAppsGetSourceControl_567744; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetSourceControl
  ## Gets the source control configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567753 = newJObject()
  var query_567754 = newJObject()
  add(query_567754, "api-version", newJString(apiVersion))
  add(path_567753, "name", newJString(name))
  add(path_567753, "subscriptionId", newJString(subscriptionId))
  add(path_567753, "resourceGroupName", newJString(resourceGroupName))
  result = call_567752.call(path_567753, query_567754, nil, nil, nil)

var webAppsGetSourceControl* = Call_WebAppsGetSourceControl_567744(
    name: "webAppsGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControl_567745, base: "",
    url: url_WebAppsGetSourceControl_567746, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControl_567779 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateSourceControl_567781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControl_567780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567782 = path.getOrDefault("name")
  valid_567782 = validateParameter(valid_567782, JString, required = true,
                                 default = nil)
  if valid_567782 != nil:
    section.add "name", valid_567782
  var valid_567783 = path.getOrDefault("subscriptionId")
  valid_567783 = validateParameter(valid_567783, JString, required = true,
                                 default = nil)
  if valid_567783 != nil:
    section.add "subscriptionId", valid_567783
  var valid_567784 = path.getOrDefault("resourceGroupName")
  valid_567784 = validateParameter(valid_567784, JString, required = true,
                                 default = nil)
  if valid_567784 != nil:
    section.add "resourceGroupName", valid_567784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567785 = query.getOrDefault("api-version")
  valid_567785 = validateParameter(valid_567785, JString, required = true,
                                 default = nil)
  if valid_567785 != nil:
    section.add "api-version", valid_567785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567787: Call_WebAppsUpdateSourceControl_567779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_567787.validator(path, query, header, formData, body)
  let scheme = call_567787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567787.url(scheme.get, call_567787.host, call_567787.base,
                         call_567787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567787, url, valid)

proc call*(call_567788: Call_WebAppsUpdateSourceControl_567779;
          siteSourceControl: JsonNode; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567789 = newJObject()
  var query_567790 = newJObject()
  var body_567791 = newJObject()
  if siteSourceControl != nil:
    body_567791 = siteSourceControl
  add(query_567790, "api-version", newJString(apiVersion))
  add(path_567789, "name", newJString(name))
  add(path_567789, "subscriptionId", newJString(subscriptionId))
  add(path_567789, "resourceGroupName", newJString(resourceGroupName))
  result = call_567788.call(path_567789, query_567790, nil, nil, body_567791)

var webAppsUpdateSourceControl* = Call_WebAppsUpdateSourceControl_567779(
    name: "webAppsUpdateSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControl_567780, base: "",
    url: url_WebAppsUpdateSourceControl_567781, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControl_567768 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteSourceControl_567770(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControl_567769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567771 = path.getOrDefault("name")
  valid_567771 = validateParameter(valid_567771, JString, required = true,
                                 default = nil)
  if valid_567771 != nil:
    section.add "name", valid_567771
  var valid_567772 = path.getOrDefault("subscriptionId")
  valid_567772 = validateParameter(valid_567772, JString, required = true,
                                 default = nil)
  if valid_567772 != nil:
    section.add "subscriptionId", valid_567772
  var valid_567773 = path.getOrDefault("resourceGroupName")
  valid_567773 = validateParameter(valid_567773, JString, required = true,
                                 default = nil)
  if valid_567773 != nil:
    section.add "resourceGroupName", valid_567773
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567774 = query.getOrDefault("api-version")
  valid_567774 = validateParameter(valid_567774, JString, required = true,
                                 default = nil)
  if valid_567774 != nil:
    section.add "api-version", valid_567774
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567775: Call_WebAppsDeleteSourceControl_567768; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_567775.validator(path, query, header, formData, body)
  let scheme = call_567775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567775.url(scheme.get, call_567775.host, call_567775.base,
                         call_567775.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567775, url, valid)

proc call*(call_567776: Call_WebAppsDeleteSourceControl_567768; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteSourceControl
  ## Deletes the source control configuration of an app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567777 = newJObject()
  var query_567778 = newJObject()
  add(query_567778, "api-version", newJString(apiVersion))
  add(path_567777, "name", newJString(name))
  add(path_567777, "subscriptionId", newJString(subscriptionId))
  add(path_567777, "resourceGroupName", newJString(resourceGroupName))
  result = call_567776.call(path_567777, query_567778, nil, nil, nil)

var webAppsDeleteSourceControl* = Call_WebAppsDeleteSourceControl_567768(
    name: "webAppsDeleteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControl_567769, base: "",
    url: url_WebAppsDeleteSourceControl_567770, schemes: {Scheme.Https})
type
  Call_WebAppsStart_567792 = ref object of OpenApiRestCall_563564
proc url_WebAppsStart_567794(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStart_567793(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567795 = path.getOrDefault("name")
  valid_567795 = validateParameter(valid_567795, JString, required = true,
                                 default = nil)
  if valid_567795 != nil:
    section.add "name", valid_567795
  var valid_567796 = path.getOrDefault("subscriptionId")
  valid_567796 = validateParameter(valid_567796, JString, required = true,
                                 default = nil)
  if valid_567796 != nil:
    section.add "subscriptionId", valid_567796
  var valid_567797 = path.getOrDefault("resourceGroupName")
  valid_567797 = validateParameter(valid_567797, JString, required = true,
                                 default = nil)
  if valid_567797 != nil:
    section.add "resourceGroupName", valid_567797
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567798 = query.getOrDefault("api-version")
  valid_567798 = validateParameter(valid_567798, JString, required = true,
                                 default = nil)
  if valid_567798 != nil:
    section.add "api-version", valid_567798
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567799: Call_WebAppsStart_567792; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_567799.validator(path, query, header, formData, body)
  let scheme = call_567799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567799.url(scheme.get, call_567799.host, call_567799.base,
                         call_567799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567799, url, valid)

proc call*(call_567800: Call_WebAppsStart_567792; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsStart
  ## Starts an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567801 = newJObject()
  var query_567802 = newJObject()
  add(query_567802, "api-version", newJString(apiVersion))
  add(path_567801, "name", newJString(name))
  add(path_567801, "subscriptionId", newJString(subscriptionId))
  add(path_567801, "resourceGroupName", newJString(resourceGroupName))
  result = call_567800.call(path_567801, query_567802, nil, nil, nil)

var webAppsStart* = Call_WebAppsStart_567792(name: "webAppsStart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_WebAppsStart_567793, base: "", url: url_WebAppsStart_567794,
    schemes: {Scheme.Https})
type
  Call_WebAppsStop_567803 = ref object of OpenApiRestCall_563564
proc url_WebAppsStop_567805(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStop_567804(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567806 = path.getOrDefault("name")
  valid_567806 = validateParameter(valid_567806, JString, required = true,
                                 default = nil)
  if valid_567806 != nil:
    section.add "name", valid_567806
  var valid_567807 = path.getOrDefault("subscriptionId")
  valid_567807 = validateParameter(valid_567807, JString, required = true,
                                 default = nil)
  if valid_567807 != nil:
    section.add "subscriptionId", valid_567807
  var valid_567808 = path.getOrDefault("resourceGroupName")
  valid_567808 = validateParameter(valid_567808, JString, required = true,
                                 default = nil)
  if valid_567808 != nil:
    section.add "resourceGroupName", valid_567808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567809 = query.getOrDefault("api-version")
  valid_567809 = validateParameter(valid_567809, JString, required = true,
                                 default = nil)
  if valid_567809 != nil:
    section.add "api-version", valid_567809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567810: Call_WebAppsStop_567803; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_567810.validator(path, query, header, formData, body)
  let scheme = call_567810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567810.url(scheme.get, call_567810.host, call_567810.base,
                         call_567810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567810, url, valid)

proc call*(call_567811: Call_WebAppsStop_567803; apiVersion: string; name: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsStop
  ## Stops an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567812 = newJObject()
  var query_567813 = newJObject()
  add(query_567813, "api-version", newJString(apiVersion))
  add(path_567812, "name", newJString(name))
  add(path_567812, "subscriptionId", newJString(subscriptionId))
  add(path_567812, "resourceGroupName", newJString(resourceGroupName))
  result = call_567811.call(path_567812, query_567813, nil, nil, nil)

var webAppsStop* = Call_WebAppsStop_567803(name: "webAppsStop",
                                        meth: HttpMethod.HttpPost,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
                                        validator: validate_WebAppsStop_567804,
                                        base: "", url: url_WebAppsStop_567805,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepository_567814 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncRepository_567816(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepository_567815(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567817 = path.getOrDefault("name")
  valid_567817 = validateParameter(valid_567817, JString, required = true,
                                 default = nil)
  if valid_567817 != nil:
    section.add "name", valid_567817
  var valid_567818 = path.getOrDefault("subscriptionId")
  valid_567818 = validateParameter(valid_567818, JString, required = true,
                                 default = nil)
  if valid_567818 != nil:
    section.add "subscriptionId", valid_567818
  var valid_567819 = path.getOrDefault("resourceGroupName")
  valid_567819 = validateParameter(valid_567819, JString, required = true,
                                 default = nil)
  if valid_567819 != nil:
    section.add "resourceGroupName", valid_567819
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567820 = query.getOrDefault("api-version")
  valid_567820 = validateParameter(valid_567820, JString, required = true,
                                 default = nil)
  if valid_567820 != nil:
    section.add "api-version", valid_567820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567821: Call_WebAppsSyncRepository_567814; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_567821.validator(path, query, header, formData, body)
  let scheme = call_567821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567821.url(scheme.get, call_567821.host, call_567821.base,
                         call_567821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567821, url, valid)

proc call*(call_567822: Call_WebAppsSyncRepository_567814; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsSyncRepository
  ## Sync web app repository.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567823 = newJObject()
  var query_567824 = newJObject()
  add(query_567824, "api-version", newJString(apiVersion))
  add(path_567823, "name", newJString(name))
  add(path_567823, "subscriptionId", newJString(subscriptionId))
  add(path_567823, "resourceGroupName", newJString(resourceGroupName))
  result = call_567822.call(path_567823, query_567824, nil, nil, nil)

var webAppsSyncRepository* = Call_WebAppsSyncRepository_567814(
    name: "webAppsSyncRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_WebAppsSyncRepository_567815, base: "",
    url: url_WebAppsSyncRepository_567816, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggers_567825 = ref object of OpenApiRestCall_563564
proc url_WebAppsSyncFunctionTriggers_567827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggers_567826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567828 = path.getOrDefault("name")
  valid_567828 = validateParameter(valid_567828, JString, required = true,
                                 default = nil)
  if valid_567828 != nil:
    section.add "name", valid_567828
  var valid_567829 = path.getOrDefault("subscriptionId")
  valid_567829 = validateParameter(valid_567829, JString, required = true,
                                 default = nil)
  if valid_567829 != nil:
    section.add "subscriptionId", valid_567829
  var valid_567830 = path.getOrDefault("resourceGroupName")
  valid_567830 = validateParameter(valid_567830, JString, required = true,
                                 default = nil)
  if valid_567830 != nil:
    section.add "resourceGroupName", valid_567830
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567831 = query.getOrDefault("api-version")
  valid_567831 = validateParameter(valid_567831, JString, required = true,
                                 default = nil)
  if valid_567831 != nil:
    section.add "api-version", valid_567831
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567832: Call_WebAppsSyncFunctionTriggers_567825; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_567832.validator(path, query, header, formData, body)
  let scheme = call_567832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567832.url(scheme.get, call_567832.host, call_567832.base,
                         call_567832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567832, url, valid)

proc call*(call_567833: Call_WebAppsSyncFunctionTriggers_567825;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsSyncFunctionTriggers
  ## Syncs function trigger metadata to the scale controller
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567834 = newJObject()
  var query_567835 = newJObject()
  add(query_567835, "api-version", newJString(apiVersion))
  add(path_567834, "name", newJString(name))
  add(path_567834, "subscriptionId", newJString(subscriptionId))
  add(path_567834, "resourceGroupName", newJString(resourceGroupName))
  result = call_567833.call(path_567834, query_567835, nil, nil, nil)

var webAppsSyncFunctionTriggers* = Call_WebAppsSyncFunctionTriggers_567825(
    name: "webAppsSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggers_567826, base: "",
    url: url_WebAppsSyncFunctionTriggers_567827, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobs_567836 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobs_567838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobs_567837(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567839 = path.getOrDefault("name")
  valid_567839 = validateParameter(valid_567839, JString, required = true,
                                 default = nil)
  if valid_567839 != nil:
    section.add "name", valid_567839
  var valid_567840 = path.getOrDefault("subscriptionId")
  valid_567840 = validateParameter(valid_567840, JString, required = true,
                                 default = nil)
  if valid_567840 != nil:
    section.add "subscriptionId", valid_567840
  var valid_567841 = path.getOrDefault("resourceGroupName")
  valid_567841 = validateParameter(valid_567841, JString, required = true,
                                 default = nil)
  if valid_567841 != nil:
    section.add "resourceGroupName", valid_567841
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567842 = query.getOrDefault("api-version")
  valid_567842 = validateParameter(valid_567842, JString, required = true,
                                 default = nil)
  if valid_567842 != nil:
    section.add "api-version", valid_567842
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567843: Call_WebAppsListTriggeredWebJobs_567836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_567843.validator(path, query, header, formData, body)
  let scheme = call_567843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567843.url(scheme.get, call_567843.host, call_567843.base,
                         call_567843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567843, url, valid)

proc call*(call_567844: Call_WebAppsListTriggeredWebJobs_567836;
          apiVersion: string; name: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobs
  ## List triggered web jobs for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567845 = newJObject()
  var query_567846 = newJObject()
  add(query_567846, "api-version", newJString(apiVersion))
  add(path_567845, "name", newJString(name))
  add(path_567845, "subscriptionId", newJString(subscriptionId))
  add(path_567845, "resourceGroupName", newJString(resourceGroupName))
  result = call_567844.call(path_567845, query_567846, nil, nil, nil)

var webAppsListTriggeredWebJobs* = Call_WebAppsListTriggeredWebJobs_567836(
    name: "webAppsListTriggeredWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobs_567837, base: "",
    url: url_WebAppsListTriggeredWebJobs_567838, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJob_567847 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJob_567849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJob_567848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567850 = path.getOrDefault("name")
  valid_567850 = validateParameter(valid_567850, JString, required = true,
                                 default = nil)
  if valid_567850 != nil:
    section.add "name", valid_567850
  var valid_567851 = path.getOrDefault("subscriptionId")
  valid_567851 = validateParameter(valid_567851, JString, required = true,
                                 default = nil)
  if valid_567851 != nil:
    section.add "subscriptionId", valid_567851
  var valid_567852 = path.getOrDefault("webJobName")
  valid_567852 = validateParameter(valid_567852, JString, required = true,
                                 default = nil)
  if valid_567852 != nil:
    section.add "webJobName", valid_567852
  var valid_567853 = path.getOrDefault("resourceGroupName")
  valid_567853 = validateParameter(valid_567853, JString, required = true,
                                 default = nil)
  if valid_567853 != nil:
    section.add "resourceGroupName", valid_567853
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567854 = query.getOrDefault("api-version")
  valid_567854 = validateParameter(valid_567854, JString, required = true,
                                 default = nil)
  if valid_567854 != nil:
    section.add "api-version", valid_567854
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567855: Call_WebAppsGetTriggeredWebJob_567847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_567855.validator(path, query, header, formData, body)
  let scheme = call_567855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567855.url(scheme.get, call_567855.host, call_567855.base,
                         call_567855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567855, url, valid)

proc call*(call_567856: Call_WebAppsGetTriggeredWebJob_567847; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJob
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567857 = newJObject()
  var query_567858 = newJObject()
  add(query_567858, "api-version", newJString(apiVersion))
  add(path_567857, "name", newJString(name))
  add(path_567857, "subscriptionId", newJString(subscriptionId))
  add(path_567857, "webJobName", newJString(webJobName))
  add(path_567857, "resourceGroupName", newJString(resourceGroupName))
  result = call_567856.call(path_567857, query_567858, nil, nil, nil)

var webAppsGetTriggeredWebJob* = Call_WebAppsGetTriggeredWebJob_567847(
    name: "webAppsGetTriggeredWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJob_567848, base: "",
    url: url_WebAppsGetTriggeredWebJob_567849, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJob_567859 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteTriggeredWebJob_567861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJob_567860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567862 = path.getOrDefault("name")
  valid_567862 = validateParameter(valid_567862, JString, required = true,
                                 default = nil)
  if valid_567862 != nil:
    section.add "name", valid_567862
  var valid_567863 = path.getOrDefault("subscriptionId")
  valid_567863 = validateParameter(valid_567863, JString, required = true,
                                 default = nil)
  if valid_567863 != nil:
    section.add "subscriptionId", valid_567863
  var valid_567864 = path.getOrDefault("webJobName")
  valid_567864 = validateParameter(valid_567864, JString, required = true,
                                 default = nil)
  if valid_567864 != nil:
    section.add "webJobName", valid_567864
  var valid_567865 = path.getOrDefault("resourceGroupName")
  valid_567865 = validateParameter(valid_567865, JString, required = true,
                                 default = nil)
  if valid_567865 != nil:
    section.add "resourceGroupName", valid_567865
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567866 = query.getOrDefault("api-version")
  valid_567866 = validateParameter(valid_567866, JString, required = true,
                                 default = nil)
  if valid_567866 != nil:
    section.add "api-version", valid_567866
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567867: Call_WebAppsDeleteTriggeredWebJob_567859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_567867.validator(path, query, header, formData, body)
  let scheme = call_567867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567867.url(scheme.get, call_567867.host, call_567867.base,
                         call_567867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567867, url, valid)

proc call*(call_567868: Call_WebAppsDeleteTriggeredWebJob_567859;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsDeleteTriggeredWebJob
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567869 = newJObject()
  var query_567870 = newJObject()
  add(query_567870, "api-version", newJString(apiVersion))
  add(path_567869, "name", newJString(name))
  add(path_567869, "subscriptionId", newJString(subscriptionId))
  add(path_567869, "webJobName", newJString(webJobName))
  add(path_567869, "resourceGroupName", newJString(resourceGroupName))
  result = call_567868.call(path_567869, query_567870, nil, nil, nil)

var webAppsDeleteTriggeredWebJob* = Call_WebAppsDeleteTriggeredWebJob_567859(
    name: "webAppsDeleteTriggeredWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJob_567860, base: "",
    url: url_WebAppsDeleteTriggeredWebJob_567861, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistory_567871 = ref object of OpenApiRestCall_563564
proc url_WebAppsListTriggeredWebJobHistory_567873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistory_567872(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567874 = path.getOrDefault("name")
  valid_567874 = validateParameter(valid_567874, JString, required = true,
                                 default = nil)
  if valid_567874 != nil:
    section.add "name", valid_567874
  var valid_567875 = path.getOrDefault("subscriptionId")
  valid_567875 = validateParameter(valid_567875, JString, required = true,
                                 default = nil)
  if valid_567875 != nil:
    section.add "subscriptionId", valid_567875
  var valid_567876 = path.getOrDefault("webJobName")
  valid_567876 = validateParameter(valid_567876, JString, required = true,
                                 default = nil)
  if valid_567876 != nil:
    section.add "webJobName", valid_567876
  var valid_567877 = path.getOrDefault("resourceGroupName")
  valid_567877 = validateParameter(valid_567877, JString, required = true,
                                 default = nil)
  if valid_567877 != nil:
    section.add "resourceGroupName", valid_567877
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567878 = query.getOrDefault("api-version")
  valid_567878 = validateParameter(valid_567878, JString, required = true,
                                 default = nil)
  if valid_567878 != nil:
    section.add "api-version", valid_567878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567879: Call_WebAppsListTriggeredWebJobHistory_567871;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_567879.validator(path, query, header, formData, body)
  let scheme = call_567879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567879.url(scheme.get, call_567879.host, call_567879.base,
                         call_567879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567879, url, valid)

proc call*(call_567880: Call_WebAppsListTriggeredWebJobHistory_567871;
          apiVersion: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsListTriggeredWebJobHistory
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567881 = newJObject()
  var query_567882 = newJObject()
  add(query_567882, "api-version", newJString(apiVersion))
  add(path_567881, "name", newJString(name))
  add(path_567881, "subscriptionId", newJString(subscriptionId))
  add(path_567881, "webJobName", newJString(webJobName))
  add(path_567881, "resourceGroupName", newJString(resourceGroupName))
  result = call_567880.call(path_567881, query_567882, nil, nil, nil)

var webAppsListTriggeredWebJobHistory* = Call_WebAppsListTriggeredWebJobHistory_567871(
    name: "webAppsListTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistory_567872, base: "",
    url: url_WebAppsListTriggeredWebJobHistory_567873, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistory_567883 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetTriggeredWebJobHistory_567885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistory_567884(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   id: JString (required)
  ##     : History ID.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `id` field"
  var valid_567886 = path.getOrDefault("id")
  valid_567886 = validateParameter(valid_567886, JString, required = true,
                                 default = nil)
  if valid_567886 != nil:
    section.add "id", valid_567886
  var valid_567887 = path.getOrDefault("name")
  valid_567887 = validateParameter(valid_567887, JString, required = true,
                                 default = nil)
  if valid_567887 != nil:
    section.add "name", valid_567887
  var valid_567888 = path.getOrDefault("subscriptionId")
  valid_567888 = validateParameter(valid_567888, JString, required = true,
                                 default = nil)
  if valid_567888 != nil:
    section.add "subscriptionId", valid_567888
  var valid_567889 = path.getOrDefault("webJobName")
  valid_567889 = validateParameter(valid_567889, JString, required = true,
                                 default = nil)
  if valid_567889 != nil:
    section.add "webJobName", valid_567889
  var valid_567890 = path.getOrDefault("resourceGroupName")
  valid_567890 = validateParameter(valid_567890, JString, required = true,
                                 default = nil)
  if valid_567890 != nil:
    section.add "resourceGroupName", valid_567890
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567891 = query.getOrDefault("api-version")
  valid_567891 = validateParameter(valid_567891, JString, required = true,
                                 default = nil)
  if valid_567891 != nil:
    section.add "api-version", valid_567891
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567892: Call_WebAppsGetTriggeredWebJobHistory_567883;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_567892.validator(path, query, header, formData, body)
  let scheme = call_567892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567892.url(scheme.get, call_567892.host, call_567892.base,
                         call_567892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567892, url, valid)

proc call*(call_567893: Call_WebAppsGetTriggeredWebJobHistory_567883;
          apiVersion: string; id: string; name: string; subscriptionId: string;
          webJobName: string; resourceGroupName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistory
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   id: string (required)
  ##     : History ID.
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567894 = newJObject()
  var query_567895 = newJObject()
  add(query_567895, "api-version", newJString(apiVersion))
  add(path_567894, "id", newJString(id))
  add(path_567894, "name", newJString(name))
  add(path_567894, "subscriptionId", newJString(subscriptionId))
  add(path_567894, "webJobName", newJString(webJobName))
  add(path_567894, "resourceGroupName", newJString(resourceGroupName))
  result = call_567893.call(path_567894, query_567895, nil, nil, nil)

var webAppsGetTriggeredWebJobHistory* = Call_WebAppsGetTriggeredWebJobHistory_567883(
    name: "webAppsGetTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistory_567884, base: "",
    url: url_WebAppsGetTriggeredWebJobHistory_567885, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJob_567896 = ref object of OpenApiRestCall_563564
proc url_WebAppsRunTriggeredWebJob_567898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJob_567897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567899 = path.getOrDefault("name")
  valid_567899 = validateParameter(valid_567899, JString, required = true,
                                 default = nil)
  if valid_567899 != nil:
    section.add "name", valid_567899
  var valid_567900 = path.getOrDefault("subscriptionId")
  valid_567900 = validateParameter(valid_567900, JString, required = true,
                                 default = nil)
  if valid_567900 != nil:
    section.add "subscriptionId", valid_567900
  var valid_567901 = path.getOrDefault("webJobName")
  valid_567901 = validateParameter(valid_567901, JString, required = true,
                                 default = nil)
  if valid_567901 != nil:
    section.add "webJobName", valid_567901
  var valid_567902 = path.getOrDefault("resourceGroupName")
  valid_567902 = validateParameter(valid_567902, JString, required = true,
                                 default = nil)
  if valid_567902 != nil:
    section.add "resourceGroupName", valid_567902
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567903 = query.getOrDefault("api-version")
  valid_567903 = validateParameter(valid_567903, JString, required = true,
                                 default = nil)
  if valid_567903 != nil:
    section.add "api-version", valid_567903
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567904: Call_WebAppsRunTriggeredWebJob_567896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_567904.validator(path, query, header, formData, body)
  let scheme = call_567904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567904.url(scheme.get, call_567904.host, call_567904.base,
                         call_567904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567904, url, valid)

proc call*(call_567905: Call_WebAppsRunTriggeredWebJob_567896; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsRunTriggeredWebJob
  ## Run a triggered web job for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567906 = newJObject()
  var query_567907 = newJObject()
  add(query_567907, "api-version", newJString(apiVersion))
  add(path_567906, "name", newJString(name))
  add(path_567906, "subscriptionId", newJString(subscriptionId))
  add(path_567906, "webJobName", newJString(webJobName))
  add(path_567906, "resourceGroupName", newJString(resourceGroupName))
  result = call_567905.call(path_567906, query_567907, nil, nil, nil)

var webAppsRunTriggeredWebJob* = Call_WebAppsRunTriggeredWebJob_567896(
    name: "webAppsRunTriggeredWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJob_567897, base: "",
    url: url_WebAppsRunTriggeredWebJob_567898, schemes: {Scheme.Https})
type
  Call_WebAppsListUsages_567908 = ref object of OpenApiRestCall_563564
proc url_WebAppsListUsages_567910(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsages_567909(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567911 = path.getOrDefault("name")
  valid_567911 = validateParameter(valid_567911, JString, required = true,
                                 default = nil)
  if valid_567911 != nil:
    section.add "name", valid_567911
  var valid_567912 = path.getOrDefault("subscriptionId")
  valid_567912 = validateParameter(valid_567912, JString, required = true,
                                 default = nil)
  if valid_567912 != nil:
    section.add "subscriptionId", valid_567912
  var valid_567913 = path.getOrDefault("resourceGroupName")
  valid_567913 = validateParameter(valid_567913, JString, required = true,
                                 default = nil)
  if valid_567913 != nil:
    section.add "resourceGroupName", valid_567913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567914 = query.getOrDefault("api-version")
  valid_567914 = validateParameter(valid_567914, JString, required = true,
                                 default = nil)
  if valid_567914 != nil:
    section.add "api-version", valid_567914
  var valid_567915 = query.getOrDefault("$filter")
  valid_567915 = validateParameter(valid_567915, JString, required = false,
                                 default = nil)
  if valid_567915 != nil:
    section.add "$filter", valid_567915
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567916: Call_WebAppsListUsages_567908; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_567916.validator(path, query, header, formData, body)
  let scheme = call_567916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567916.url(scheme.get, call_567916.host, call_567916.base,
                         call_567916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567916, url, valid)

proc call*(call_567917: Call_WebAppsListUsages_567908; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string;
          Filter: string = ""): Recallable =
  ## webAppsListUsages
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_567918 = newJObject()
  var query_567919 = newJObject()
  add(query_567919, "api-version", newJString(apiVersion))
  add(path_567918, "name", newJString(name))
  add(path_567918, "subscriptionId", newJString(subscriptionId))
  add(path_567918, "resourceGroupName", newJString(resourceGroupName))
  add(query_567919, "$filter", newJString(Filter))
  result = call_567917.call(path_567918, query_567919, nil, nil, nil)

var webAppsListUsages* = Call_WebAppsListUsages_567908(name: "webAppsListUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_WebAppsListUsages_567909, base: "",
    url: url_WebAppsListUsages_567910, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnections_567920 = ref object of OpenApiRestCall_563564
proc url_WebAppsListVnetConnections_567922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnections_567921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567923 = path.getOrDefault("name")
  valid_567923 = validateParameter(valid_567923, JString, required = true,
                                 default = nil)
  if valid_567923 != nil:
    section.add "name", valid_567923
  var valid_567924 = path.getOrDefault("subscriptionId")
  valid_567924 = validateParameter(valid_567924, JString, required = true,
                                 default = nil)
  if valid_567924 != nil:
    section.add "subscriptionId", valid_567924
  var valid_567925 = path.getOrDefault("resourceGroupName")
  valid_567925 = validateParameter(valid_567925, JString, required = true,
                                 default = nil)
  if valid_567925 != nil:
    section.add "resourceGroupName", valid_567925
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567926 = query.getOrDefault("api-version")
  valid_567926 = validateParameter(valid_567926, JString, required = true,
                                 default = nil)
  if valid_567926 != nil:
    section.add "api-version", valid_567926
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567927: Call_WebAppsListVnetConnections_567920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_567927.validator(path, query, header, formData, body)
  let scheme = call_567927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567927.url(scheme.get, call_567927.host, call_567927.base,
                         call_567927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567927, url, valid)

proc call*(call_567928: Call_WebAppsListVnetConnections_567920; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListVnetConnections
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567929 = newJObject()
  var query_567930 = newJObject()
  add(query_567930, "api-version", newJString(apiVersion))
  add(path_567929, "name", newJString(name))
  add(path_567929, "subscriptionId", newJString(subscriptionId))
  add(path_567929, "resourceGroupName", newJString(resourceGroupName))
  result = call_567928.call(path_567929, query_567930, nil, nil, nil)

var webAppsListVnetConnections* = Call_WebAppsListVnetConnections_567920(
    name: "webAppsListVnetConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnections_567921, base: "",
    url: url_WebAppsListVnetConnections_567922, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnection_567943 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnection_567945(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnection_567944(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567946 = path.getOrDefault("name")
  valid_567946 = validateParameter(valid_567946, JString, required = true,
                                 default = nil)
  if valid_567946 != nil:
    section.add "name", valid_567946
  var valid_567947 = path.getOrDefault("vnetName")
  valid_567947 = validateParameter(valid_567947, JString, required = true,
                                 default = nil)
  if valid_567947 != nil:
    section.add "vnetName", valid_567947
  var valid_567948 = path.getOrDefault("subscriptionId")
  valid_567948 = validateParameter(valid_567948, JString, required = true,
                                 default = nil)
  if valid_567948 != nil:
    section.add "subscriptionId", valid_567948
  var valid_567949 = path.getOrDefault("resourceGroupName")
  valid_567949 = validateParameter(valid_567949, JString, required = true,
                                 default = nil)
  if valid_567949 != nil:
    section.add "resourceGroupName", valid_567949
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567950 = query.getOrDefault("api-version")
  valid_567950 = validateParameter(valid_567950, JString, required = true,
                                 default = nil)
  if valid_567950 != nil:
    section.add "api-version", valid_567950
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567952: Call_WebAppsCreateOrUpdateVnetConnection_567943;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_567952.validator(path, query, header, formData, body)
  let scheme = call_567952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567952.url(scheme.get, call_567952.host, call_567952.base,
                         call_567952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567952, url, valid)

proc call*(call_567953: Call_WebAppsCreateOrUpdateVnetConnection_567943;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567954 = newJObject()
  var query_567955 = newJObject()
  var body_567956 = newJObject()
  if connectionEnvelope != nil:
    body_567956 = connectionEnvelope
  add(query_567955, "api-version", newJString(apiVersion))
  add(path_567954, "name", newJString(name))
  add(path_567954, "vnetName", newJString(vnetName))
  add(path_567954, "subscriptionId", newJString(subscriptionId))
  add(path_567954, "resourceGroupName", newJString(resourceGroupName))
  result = call_567953.call(path_567954, query_567955, nil, nil, body_567956)

var webAppsCreateOrUpdateVnetConnection* = Call_WebAppsCreateOrUpdateVnetConnection_567943(
    name: "webAppsCreateOrUpdateVnetConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnection_567944, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnection_567945, schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnection_567931 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnection_567933(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnection_567932(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567934 = path.getOrDefault("name")
  valid_567934 = validateParameter(valid_567934, JString, required = true,
                                 default = nil)
  if valid_567934 != nil:
    section.add "name", valid_567934
  var valid_567935 = path.getOrDefault("vnetName")
  valid_567935 = validateParameter(valid_567935, JString, required = true,
                                 default = nil)
  if valid_567935 != nil:
    section.add "vnetName", valid_567935
  var valid_567936 = path.getOrDefault("subscriptionId")
  valid_567936 = validateParameter(valid_567936, JString, required = true,
                                 default = nil)
  if valid_567936 != nil:
    section.add "subscriptionId", valid_567936
  var valid_567937 = path.getOrDefault("resourceGroupName")
  valid_567937 = validateParameter(valid_567937, JString, required = true,
                                 default = nil)
  if valid_567937 != nil:
    section.add "resourceGroupName", valid_567937
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567938 = query.getOrDefault("api-version")
  valid_567938 = validateParameter(valid_567938, JString, required = true,
                                 default = nil)
  if valid_567938 != nil:
    section.add "api-version", valid_567938
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567939: Call_WebAppsGetVnetConnection_567931; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_567939.validator(path, query, header, formData, body)
  let scheme = call_567939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567939.url(scheme.get, call_567939.host, call_567939.base,
                         call_567939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567939, url, valid)

proc call*(call_567940: Call_WebAppsGetVnetConnection_567931; apiVersion: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnection
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567941 = newJObject()
  var query_567942 = newJObject()
  add(query_567942, "api-version", newJString(apiVersion))
  add(path_567941, "name", newJString(name))
  add(path_567941, "vnetName", newJString(vnetName))
  add(path_567941, "subscriptionId", newJString(subscriptionId))
  add(path_567941, "resourceGroupName", newJString(resourceGroupName))
  result = call_567940.call(path_567941, query_567942, nil, nil, nil)

var webAppsGetVnetConnection* = Call_WebAppsGetVnetConnection_567931(
    name: "webAppsGetVnetConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnection_567932, base: "",
    url: url_WebAppsGetVnetConnection_567933, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnection_567969 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnection_567971(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnection_567970(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567972 = path.getOrDefault("name")
  valid_567972 = validateParameter(valid_567972, JString, required = true,
                                 default = nil)
  if valid_567972 != nil:
    section.add "name", valid_567972
  var valid_567973 = path.getOrDefault("vnetName")
  valid_567973 = validateParameter(valid_567973, JString, required = true,
                                 default = nil)
  if valid_567973 != nil:
    section.add "vnetName", valid_567973
  var valid_567974 = path.getOrDefault("subscriptionId")
  valid_567974 = validateParameter(valid_567974, JString, required = true,
                                 default = nil)
  if valid_567974 != nil:
    section.add "subscriptionId", valid_567974
  var valid_567975 = path.getOrDefault("resourceGroupName")
  valid_567975 = validateParameter(valid_567975, JString, required = true,
                                 default = nil)
  if valid_567975 != nil:
    section.add "resourceGroupName", valid_567975
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567976 = query.getOrDefault("api-version")
  valid_567976 = validateParameter(valid_567976, JString, required = true,
                                 default = nil)
  if valid_567976 != nil:
    section.add "api-version", valid_567976
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_567978: Call_WebAppsUpdateVnetConnection_567969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_567978.validator(path, query, header, formData, body)
  let scheme = call_567978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567978.url(scheme.get, call_567978.host, call_567978.base,
                         call_567978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567978, url, valid)

proc call*(call_567979: Call_WebAppsUpdateVnetConnection_567969;
          connectionEnvelope: JsonNode; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567980 = newJObject()
  var query_567981 = newJObject()
  var body_567982 = newJObject()
  if connectionEnvelope != nil:
    body_567982 = connectionEnvelope
  add(query_567981, "api-version", newJString(apiVersion))
  add(path_567980, "name", newJString(name))
  add(path_567980, "vnetName", newJString(vnetName))
  add(path_567980, "subscriptionId", newJString(subscriptionId))
  add(path_567980, "resourceGroupName", newJString(resourceGroupName))
  result = call_567979.call(path_567980, query_567981, nil, nil, body_567982)

var webAppsUpdateVnetConnection* = Call_WebAppsUpdateVnetConnection_567969(
    name: "webAppsUpdateVnetConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnection_567970, base: "",
    url: url_WebAppsUpdateVnetConnection_567971, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnection_567957 = ref object of OpenApiRestCall_563564
proc url_WebAppsDeleteVnetConnection_567959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnection_567958(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_567960 = path.getOrDefault("name")
  valid_567960 = validateParameter(valid_567960, JString, required = true,
                                 default = nil)
  if valid_567960 != nil:
    section.add "name", valid_567960
  var valid_567961 = path.getOrDefault("vnetName")
  valid_567961 = validateParameter(valid_567961, JString, required = true,
                                 default = nil)
  if valid_567961 != nil:
    section.add "vnetName", valid_567961
  var valid_567962 = path.getOrDefault("subscriptionId")
  valid_567962 = validateParameter(valid_567962, JString, required = true,
                                 default = nil)
  if valid_567962 != nil:
    section.add "subscriptionId", valid_567962
  var valid_567963 = path.getOrDefault("resourceGroupName")
  valid_567963 = validateParameter(valid_567963, JString, required = true,
                                 default = nil)
  if valid_567963 != nil:
    section.add "resourceGroupName", valid_567963
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567964 = query.getOrDefault("api-version")
  valid_567964 = validateParameter(valid_567964, JString, required = true,
                                 default = nil)
  if valid_567964 != nil:
    section.add "api-version", valid_567964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567965: Call_WebAppsDeleteVnetConnection_567957; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_567965.validator(path, query, header, formData, body)
  let scheme = call_567965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567965.url(scheme.get, call_567965.host, call_567965.base,
                         call_567965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567965, url, valid)

proc call*(call_567966: Call_WebAppsDeleteVnetConnection_567957;
          apiVersion: string; name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsDeleteVnetConnection
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567967 = newJObject()
  var query_567968 = newJObject()
  add(query_567968, "api-version", newJString(apiVersion))
  add(path_567967, "name", newJString(name))
  add(path_567967, "vnetName", newJString(vnetName))
  add(path_567967, "subscriptionId", newJString(subscriptionId))
  add(path_567967, "resourceGroupName", newJString(resourceGroupName))
  result = call_567966.call(path_567967, query_567968, nil, nil, nil)

var webAppsDeleteVnetConnection* = Call_WebAppsDeleteVnetConnection_567957(
    name: "webAppsDeleteVnetConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnection_567958, base: "",
    url: url_WebAppsDeleteVnetConnection_567959, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGateway_567996 = ref object of OpenApiRestCall_563564
proc url_WebAppsCreateOrUpdateVnetConnectionGateway_567998(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGateway_567997(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_567999 = path.getOrDefault("gatewayName")
  valid_567999 = validateParameter(valid_567999, JString, required = true,
                                 default = nil)
  if valid_567999 != nil:
    section.add "gatewayName", valid_567999
  var valid_568000 = path.getOrDefault("name")
  valid_568000 = validateParameter(valid_568000, JString, required = true,
                                 default = nil)
  if valid_568000 != nil:
    section.add "name", valid_568000
  var valid_568001 = path.getOrDefault("vnetName")
  valid_568001 = validateParameter(valid_568001, JString, required = true,
                                 default = nil)
  if valid_568001 != nil:
    section.add "vnetName", valid_568001
  var valid_568002 = path.getOrDefault("subscriptionId")
  valid_568002 = validateParameter(valid_568002, JString, required = true,
                                 default = nil)
  if valid_568002 != nil:
    section.add "subscriptionId", valid_568002
  var valid_568003 = path.getOrDefault("resourceGroupName")
  valid_568003 = validateParameter(valid_568003, JString, required = true,
                                 default = nil)
  if valid_568003 != nil:
    section.add "resourceGroupName", valid_568003
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568004 = query.getOrDefault("api-version")
  valid_568004 = validateParameter(valid_568004, JString, required = true,
                                 default = nil)
  if valid_568004 != nil:
    section.add "api-version", valid_568004
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568006: Call_WebAppsCreateOrUpdateVnetConnectionGateway_567996;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_568006.validator(path, query, header, formData, body)
  let scheme = call_568006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568006.url(scheme.get, call_568006.host, call_568006.base,
                         call_568006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568006, url, valid)

proc call*(call_568007: Call_WebAppsCreateOrUpdateVnetConnectionGateway_567996;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568008 = newJObject()
  var query_568009 = newJObject()
  var body_568010 = newJObject()
  if connectionEnvelope != nil:
    body_568010 = connectionEnvelope
  add(query_568009, "api-version", newJString(apiVersion))
  add(path_568008, "gatewayName", newJString(gatewayName))
  add(path_568008, "name", newJString(name))
  add(path_568008, "vnetName", newJString(vnetName))
  add(path_568008, "subscriptionId", newJString(subscriptionId))
  add(path_568008, "resourceGroupName", newJString(resourceGroupName))
  result = call_568007.call(path_568008, query_568009, nil, nil, body_568010)

var webAppsCreateOrUpdateVnetConnectionGateway* = Call_WebAppsCreateOrUpdateVnetConnectionGateway_567996(
    name: "webAppsCreateOrUpdateVnetConnectionGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGateway_567997,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGateway_567998,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGateway_567983 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetVnetConnectionGateway_567985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGateway_567984(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_567986 = path.getOrDefault("gatewayName")
  valid_567986 = validateParameter(valid_567986, JString, required = true,
                                 default = nil)
  if valid_567986 != nil:
    section.add "gatewayName", valid_567986
  var valid_567987 = path.getOrDefault("name")
  valid_567987 = validateParameter(valid_567987, JString, required = true,
                                 default = nil)
  if valid_567987 != nil:
    section.add "name", valid_567987
  var valid_567988 = path.getOrDefault("vnetName")
  valid_567988 = validateParameter(valid_567988, JString, required = true,
                                 default = nil)
  if valid_567988 != nil:
    section.add "vnetName", valid_567988
  var valid_567989 = path.getOrDefault("subscriptionId")
  valid_567989 = validateParameter(valid_567989, JString, required = true,
                                 default = nil)
  if valid_567989 != nil:
    section.add "subscriptionId", valid_567989
  var valid_567990 = path.getOrDefault("resourceGroupName")
  valid_567990 = validateParameter(valid_567990, JString, required = true,
                                 default = nil)
  if valid_567990 != nil:
    section.add "resourceGroupName", valid_567990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_567991 = query.getOrDefault("api-version")
  valid_567991 = validateParameter(valid_567991, JString, required = true,
                                 default = nil)
  if valid_567991 != nil:
    section.add "api-version", valid_567991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_567992: Call_WebAppsGetVnetConnectionGateway_567983;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_567992.validator(path, query, header, formData, body)
  let scheme = call_567992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_567992.url(scheme.get, call_567992.host, call_567992.base,
                         call_567992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_567992, url, valid)

proc call*(call_567993: Call_WebAppsGetVnetConnectionGateway_567983;
          apiVersion: string; gatewayName: string; name: string; vnetName: string;
          subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsGetVnetConnectionGateway
  ## Gets an app's Virtual Network gateway.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_567994 = newJObject()
  var query_567995 = newJObject()
  add(query_567995, "api-version", newJString(apiVersion))
  add(path_567994, "gatewayName", newJString(gatewayName))
  add(path_567994, "name", newJString(name))
  add(path_567994, "vnetName", newJString(vnetName))
  add(path_567994, "subscriptionId", newJString(subscriptionId))
  add(path_567994, "resourceGroupName", newJString(resourceGroupName))
  result = call_567993.call(path_567994, query_567995, nil, nil, nil)

var webAppsGetVnetConnectionGateway* = Call_WebAppsGetVnetConnectionGateway_567983(
    name: "webAppsGetVnetConnectionGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGateway_567984, base: "",
    url: url_WebAppsGetVnetConnectionGateway_567985, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGateway_568011 = ref object of OpenApiRestCall_563564
proc url_WebAppsUpdateVnetConnectionGateway_568013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGateway_568012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `gatewayName` field"
  var valid_568014 = path.getOrDefault("gatewayName")
  valid_568014 = validateParameter(valid_568014, JString, required = true,
                                 default = nil)
  if valid_568014 != nil:
    section.add "gatewayName", valid_568014
  var valid_568015 = path.getOrDefault("name")
  valid_568015 = validateParameter(valid_568015, JString, required = true,
                                 default = nil)
  if valid_568015 != nil:
    section.add "name", valid_568015
  var valid_568016 = path.getOrDefault("vnetName")
  valid_568016 = validateParameter(valid_568016, JString, required = true,
                                 default = nil)
  if valid_568016 != nil:
    section.add "vnetName", valid_568016
  var valid_568017 = path.getOrDefault("subscriptionId")
  valid_568017 = validateParameter(valid_568017, JString, required = true,
                                 default = nil)
  if valid_568017 != nil:
    section.add "subscriptionId", valid_568017
  var valid_568018 = path.getOrDefault("resourceGroupName")
  valid_568018 = validateParameter(valid_568018, JString, required = true,
                                 default = nil)
  if valid_568018 != nil:
    section.add "resourceGroupName", valid_568018
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568019 = query.getOrDefault("api-version")
  valid_568019 = validateParameter(valid_568019, JString, required = true,
                                 default = nil)
  if valid_568019 != nil:
    section.add "api-version", valid_568019
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568021: Call_WebAppsUpdateVnetConnectionGateway_568011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_568021.validator(path, query, header, formData, body)
  let scheme = call_568021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568021.url(scheme.get, call_568021.host, call_568021.base,
                         call_568021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568021, url, valid)

proc call*(call_568022: Call_WebAppsUpdateVnetConnectionGateway_568011;
          connectionEnvelope: JsonNode; apiVersion: string; gatewayName: string;
          name: string; vnetName: string; subscriptionId: string;
          resourceGroupName: string): Recallable =
  ## webAppsUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568023 = newJObject()
  var query_568024 = newJObject()
  var body_568025 = newJObject()
  if connectionEnvelope != nil:
    body_568025 = connectionEnvelope
  add(query_568024, "api-version", newJString(apiVersion))
  add(path_568023, "gatewayName", newJString(gatewayName))
  add(path_568023, "name", newJString(name))
  add(path_568023, "vnetName", newJString(vnetName))
  add(path_568023, "subscriptionId", newJString(subscriptionId))
  add(path_568023, "resourceGroupName", newJString(resourceGroupName))
  result = call_568022.call(path_568023, query_568024, nil, nil, body_568025)

var webAppsUpdateVnetConnectionGateway* = Call_WebAppsUpdateVnetConnectionGateway_568011(
    name: "webAppsUpdateVnetConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGateway_568012, base: "",
    url: url_WebAppsUpdateVnetConnectionGateway_568013, schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobs_568026 = ref object of OpenApiRestCall_563564
proc url_WebAppsListWebJobs_568028(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobs_568027(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568029 = path.getOrDefault("name")
  valid_568029 = validateParameter(valid_568029, JString, required = true,
                                 default = nil)
  if valid_568029 != nil:
    section.add "name", valid_568029
  var valid_568030 = path.getOrDefault("subscriptionId")
  valid_568030 = validateParameter(valid_568030, JString, required = true,
                                 default = nil)
  if valid_568030 != nil:
    section.add "subscriptionId", valid_568030
  var valid_568031 = path.getOrDefault("resourceGroupName")
  valid_568031 = validateParameter(valid_568031, JString, required = true,
                                 default = nil)
  if valid_568031 != nil:
    section.add "resourceGroupName", valid_568031
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568032 = query.getOrDefault("api-version")
  valid_568032 = validateParameter(valid_568032, JString, required = true,
                                 default = nil)
  if valid_568032 != nil:
    section.add "api-version", valid_568032
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568033: Call_WebAppsListWebJobs_568026; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_568033.validator(path, query, header, formData, body)
  let scheme = call_568033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568033.url(scheme.get, call_568033.host, call_568033.base,
                         call_568033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568033, url, valid)

proc call*(call_568034: Call_WebAppsListWebJobs_568026; apiVersion: string;
          name: string; subscriptionId: string; resourceGroupName: string): Recallable =
  ## webAppsListWebJobs
  ## List webjobs for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568035 = newJObject()
  var query_568036 = newJObject()
  add(query_568036, "api-version", newJString(apiVersion))
  add(path_568035, "name", newJString(name))
  add(path_568035, "subscriptionId", newJString(subscriptionId))
  add(path_568035, "resourceGroupName", newJString(resourceGroupName))
  result = call_568034.call(path_568035, query_568036, nil, nil, nil)

var webAppsListWebJobs* = Call_WebAppsListWebJobs_568026(
    name: "webAppsListWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    validator: validate_WebAppsListWebJobs_568027, base: "",
    url: url_WebAppsListWebJobs_568028, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJob_568037 = ref object of OpenApiRestCall_563564
proc url_WebAppsGetWebJob_568039(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJob_568038(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `name` field"
  var valid_568040 = path.getOrDefault("name")
  valid_568040 = validateParameter(valid_568040, JString, required = true,
                                 default = nil)
  if valid_568040 != nil:
    section.add "name", valid_568040
  var valid_568041 = path.getOrDefault("subscriptionId")
  valid_568041 = validateParameter(valid_568041, JString, required = true,
                                 default = nil)
  if valid_568041 != nil:
    section.add "subscriptionId", valid_568041
  var valid_568042 = path.getOrDefault("webJobName")
  valid_568042 = validateParameter(valid_568042, JString, required = true,
                                 default = nil)
  if valid_568042 != nil:
    section.add "webJobName", valid_568042
  var valid_568043 = path.getOrDefault("resourceGroupName")
  valid_568043 = validateParameter(valid_568043, JString, required = true,
                                 default = nil)
  if valid_568043 != nil:
    section.add "resourceGroupName", valid_568043
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568044 = query.getOrDefault("api-version")
  valid_568044 = validateParameter(valid_568044, JString, required = true,
                                 default = nil)
  if valid_568044 != nil:
    section.add "api-version", valid_568044
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568045: Call_WebAppsGetWebJob_568037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_568045.validator(path, query, header, formData, body)
  let scheme = call_568045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568045.url(scheme.get, call_568045.host, call_568045.base,
                         call_568045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568045, url, valid)

proc call*(call_568046: Call_WebAppsGetWebJob_568037; apiVersion: string;
          name: string; subscriptionId: string; webJobName: string;
          resourceGroupName: string): Recallable =
  ## webAppsGetWebJob
  ## Get webjob information for an app, or a deployment slot.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  var path_568047 = newJObject()
  var query_568048 = newJObject()
  add(query_568048, "api-version", newJString(apiVersion))
  add(path_568047, "name", newJString(name))
  add(path_568047, "subscriptionId", newJString(subscriptionId))
  add(path_568047, "webJobName", newJString(webJobName))
  add(path_568047, "resourceGroupName", newJString(resourceGroupName))
  result = call_568046.call(path_568047, query_568048, nil, nil, nil)

var webAppsGetWebJob* = Call_WebAppsGetWebJob_568037(name: "webAppsGetWebJob",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJob_568038, base: "",
    url: url_WebAppsGetWebJob_568039, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
