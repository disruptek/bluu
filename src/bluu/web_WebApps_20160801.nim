
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: WebApps API Client
## version: 2016-08-01
## termsOfService: (not provided)
## license: (not provided)
## 
## 
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-WebApps"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_WebAppsList_593659 = ref object of OpenApiRestCall_593437
proc url_WebAppsList_593661(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsList_593660(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Get all apps for a subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_593834 = path.getOrDefault("subscriptionId")
  valid_593834 = validateParameter(valid_593834, JString, required = true,
                                 default = nil)
  if valid_593834 != nil:
    section.add "subscriptionId", valid_593834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593835 = query.getOrDefault("api-version")
  valid_593835 = validateParameter(valid_593835, JString, required = true,
                                 default = nil)
  if valid_593835 != nil:
    section.add "api-version", valid_593835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593858: Call_WebAppsList_593659; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get all apps for a subscription.
  ## 
  let valid = call_593858.validator(path, query, header, formData, body)
  let scheme = call_593858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593858.url(scheme.get, call_593858.host, call_593858.base,
                         call_593858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593858, url, valid)

proc call*(call_593929: Call_WebAppsList_593659; apiVersion: string;
          subscriptionId: string): Recallable =
  ## webAppsList
  ## Get all apps for a subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_593930 = newJObject()
  var query_593932 = newJObject()
  add(query_593932, "api-version", newJString(apiVersion))
  add(path_593930, "subscriptionId", newJString(subscriptionId))
  result = call_593929.call(path_593930, query_593932, nil, nil, nil)

var webAppsList* = Call_WebAppsList_593659(name: "webAppsList",
                                        meth: HttpMethod.HttpGet,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
                                        validator: validate_WebAppsList_593660,
                                        base: "", url: url_WebAppsList_593661,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsListByResourceGroup_593971 = ref object of OpenApiRestCall_593437
proc url_WebAppsListByResourceGroup_593973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListByResourceGroup_593972(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593974 = path.getOrDefault("resourceGroupName")
  valid_593974 = validateParameter(valid_593974, JString, required = true,
                                 default = nil)
  if valid_593974 != nil:
    section.add "resourceGroupName", valid_593974
  var valid_593975 = path.getOrDefault("subscriptionId")
  valid_593975 = validateParameter(valid_593975, JString, required = true,
                                 default = nil)
  if valid_593975 != nil:
    section.add "subscriptionId", valid_593975
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593976 = query.getOrDefault("api-version")
  valid_593976 = validateParameter(valid_593976, JString, required = true,
                                 default = nil)
  if valid_593976 != nil:
    section.add "api-version", valid_593976
  var valid_593977 = query.getOrDefault("includeSlots")
  valid_593977 = validateParameter(valid_593977, JBool, required = false, default = nil)
  if valid_593977 != nil:
    section.add "includeSlots", valid_593977
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593978: Call_WebAppsListByResourceGroup_593971; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  let valid = call_593978.validator(path, query, header, formData, body)
  let scheme = call_593978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593978.url(scheme.get, call_593978.host, call_593978.base,
                         call_593978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593978, url, valid)

proc call*(call_593979: Call_WebAppsListByResourceGroup_593971;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          includeSlots: bool = false): Recallable =
  ## webAppsListByResourceGroup
  ## Gets all web, mobile, and API apps in the specified resource group.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   includeSlots: bool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  var path_593980 = newJObject()
  var query_593981 = newJObject()
  add(path_593980, "resourceGroupName", newJString(resourceGroupName))
  add(query_593981, "api-version", newJString(apiVersion))
  add(path_593980, "subscriptionId", newJString(subscriptionId))
  add(query_593981, "includeSlots", newJBool(includeSlots))
  result = call_593979.call(path_593980, query_593981, nil, nil, nil)

var webAppsListByResourceGroup* = Call_WebAppsListByResourceGroup_593971(
    name: "webAppsListByResourceGroup", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_WebAppsListByResourceGroup_593972, base: "",
    url: url_WebAppsListByResourceGroup_593973, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdate_593993 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdate_593995(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdate_593994(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593996 = path.getOrDefault("resourceGroupName")
  valid_593996 = validateParameter(valid_593996, JString, required = true,
                                 default = nil)
  if valid_593996 != nil:
    section.add "resourceGroupName", valid_593996
  var valid_593997 = path.getOrDefault("name")
  valid_593997 = validateParameter(valid_593997, JString, required = true,
                                 default = nil)
  if valid_593997 != nil:
    section.add "name", valid_593997
  var valid_593998 = path.getOrDefault("subscriptionId")
  valid_593998 = validateParameter(valid_593998, JString, required = true,
                                 default = nil)
  if valid_593998 != nil:
    section.add "subscriptionId", valid_593998
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593999 = query.getOrDefault("api-version")
  valid_593999 = validateParameter(valid_593999, JString, required = true,
                                 default = nil)
  if valid_593999 != nil:
    section.add "api-version", valid_593999
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594001: Call_WebAppsCreateOrUpdate_593993; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_594001.validator(path, query, header, formData, body)
  let scheme = call_594001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594001.url(scheme.get, call_594001.host, call_594001.base,
                         call_594001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594001, url, valid)

proc call*(call_594002: Call_WebAppsCreateOrUpdate_593993; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594003 = newJObject()
  var query_594004 = newJObject()
  var body_594005 = newJObject()
  if siteEnvelope != nil:
    body_594005 = siteEnvelope
  add(path_594003, "resourceGroupName", newJString(resourceGroupName))
  add(query_594004, "api-version", newJString(apiVersion))
  add(path_594003, "name", newJString(name))
  add(path_594003, "subscriptionId", newJString(subscriptionId))
  result = call_594002.call(path_594003, query_594004, nil, nil, body_594005)

var webAppsCreateOrUpdate* = Call_WebAppsCreateOrUpdate_593993(
    name: "webAppsCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsCreateOrUpdate_593994, base: "",
    url: url_WebAppsCreateOrUpdate_593995, schemes: {Scheme.Https})
type
  Call_WebAppsGet_593982 = ref object of OpenApiRestCall_593437
proc url_WebAppsGet_593984(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGet_593983(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593985 = path.getOrDefault("resourceGroupName")
  valid_593985 = validateParameter(valid_593985, JString, required = true,
                                 default = nil)
  if valid_593985 != nil:
    section.add "resourceGroupName", valid_593985
  var valid_593986 = path.getOrDefault("name")
  valid_593986 = validateParameter(valid_593986, JString, required = true,
                                 default = nil)
  if valid_593986 != nil:
    section.add "name", valid_593986
  var valid_593987 = path.getOrDefault("subscriptionId")
  valid_593987 = validateParameter(valid_593987, JString, required = true,
                                 default = nil)
  if valid_593987 != nil:
    section.add "subscriptionId", valid_593987
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593988 = query.getOrDefault("api-version")
  valid_593988 = validateParameter(valid_593988, JString, required = true,
                                 default = nil)
  if valid_593988 != nil:
    section.add "api-version", valid_593988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593989: Call_WebAppsGet_593982; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_593989.validator(path, query, header, formData, body)
  let scheme = call_593989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593989.url(scheme.get, call_593989.host, call_593989.base,
                         call_593989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593989, url, valid)

proc call*(call_593990: Call_WebAppsGet_593982; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsGet
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_593991 = newJObject()
  var query_593992 = newJObject()
  add(path_593991, "resourceGroupName", newJString(resourceGroupName))
  add(query_593992, "api-version", newJString(apiVersion))
  add(path_593991, "name", newJString(name))
  add(path_593991, "subscriptionId", newJString(subscriptionId))
  result = call_593990.call(path_593991, query_593992, nil, nil, nil)

var webAppsGet* = Call_WebAppsGet_593982(name: "webAppsGet",
                                      meth: HttpMethod.HttpGet,
                                      host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
                                      validator: validate_WebAppsGet_593983,
                                      base: "", url: url_WebAppsGet_593984,
                                      schemes: {Scheme.Https})
type
  Call_WebAppsUpdate_594019 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdate_594021(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdate_594020(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594022 = path.getOrDefault("resourceGroupName")
  valid_594022 = validateParameter(valid_594022, JString, required = true,
                                 default = nil)
  if valid_594022 != nil:
    section.add "resourceGroupName", valid_594022
  var valid_594023 = path.getOrDefault("name")
  valid_594023 = validateParameter(valid_594023, JString, required = true,
                                 default = nil)
  if valid_594023 != nil:
    section.add "name", valid_594023
  var valid_594024 = path.getOrDefault("subscriptionId")
  valid_594024 = validateParameter(valid_594024, JString, required = true,
                                 default = nil)
  if valid_594024 != nil:
    section.add "subscriptionId", valid_594024
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594025 = query.getOrDefault("api-version")
  valid_594025 = validateParameter(valid_594025, JString, required = true,
                                 default = nil)
  if valid_594025 != nil:
    section.add "api-version", valid_594025
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594027: Call_WebAppsUpdate_594019; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_594027.validator(path, query, header, formData, body)
  let scheme = call_594027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594027.url(scheme.get, call_594027.host, call_594027.base,
                         call_594027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594027, url, valid)

proc call*(call_594028: Call_WebAppsUpdate_594019; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594029 = newJObject()
  var query_594030 = newJObject()
  var body_594031 = newJObject()
  if siteEnvelope != nil:
    body_594031 = siteEnvelope
  add(path_594029, "resourceGroupName", newJString(resourceGroupName))
  add(query_594030, "api-version", newJString(apiVersion))
  add(path_594029, "name", newJString(name))
  add(path_594029, "subscriptionId", newJString(subscriptionId))
  result = call_594028.call(path_594029, query_594030, nil, nil, body_594031)

var webAppsUpdate* = Call_WebAppsUpdate_594019(name: "webAppsUpdate",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsUpdate_594020, base: "", url: url_WebAppsUpdate_594021,
    schemes: {Scheme.Https})
type
  Call_WebAppsDelete_594006 = ref object of OpenApiRestCall_593437
proc url_WebAppsDelete_594008(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDelete_594007(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594009 = path.getOrDefault("resourceGroupName")
  valid_594009 = validateParameter(valid_594009, JString, required = true,
                                 default = nil)
  if valid_594009 != nil:
    section.add "resourceGroupName", valid_594009
  var valid_594010 = path.getOrDefault("name")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = nil)
  if valid_594010 != nil:
    section.add "name", valid_594010
  var valid_594011 = path.getOrDefault("subscriptionId")
  valid_594011 = validateParameter(valid_594011, JString, required = true,
                                 default = nil)
  if valid_594011 != nil:
    section.add "subscriptionId", valid_594011
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594012 = query.getOrDefault("api-version")
  valid_594012 = validateParameter(valid_594012, JString, required = true,
                                 default = nil)
  if valid_594012 != nil:
    section.add "api-version", valid_594012
  var valid_594013 = query.getOrDefault("deleteMetrics")
  valid_594013 = validateParameter(valid_594013, JBool, required = false, default = nil)
  if valid_594013 != nil:
    section.add "deleteMetrics", valid_594013
  var valid_594014 = query.getOrDefault("deleteEmptyServerFarm")
  valid_594014 = validateParameter(valid_594014, JBool, required = false, default = nil)
  if valid_594014 != nil:
    section.add "deleteEmptyServerFarm", valid_594014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594015: Call_WebAppsDelete_594006; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_594015.validator(path, query, header, formData, body)
  let scheme = call_594015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594015.url(scheme.get, call_594015.host, call_594015.base,
                         call_594015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594015, url, valid)

proc call*(call_594016: Call_WebAppsDelete_594006; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          deleteMetrics: bool = false; deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDelete
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_594017 = newJObject()
  var query_594018 = newJObject()
  add(path_594017, "resourceGroupName", newJString(resourceGroupName))
  add(query_594018, "api-version", newJString(apiVersion))
  add(path_594017, "name", newJString(name))
  add(path_594017, "subscriptionId", newJString(subscriptionId))
  add(query_594018, "deleteMetrics", newJBool(deleteMetrics))
  add(query_594018, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_594016.call(path_594017, query_594018, nil, nil, nil)

var webAppsDelete* = Call_WebAppsDelete_594006(name: "webAppsDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsDelete_594007, base: "", url: url_WebAppsDelete_594008,
    schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostname_594032 = ref object of OpenApiRestCall_593437
proc url_WebAppsAnalyzeCustomHostname_594034(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostname_594033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594035 = path.getOrDefault("resourceGroupName")
  valid_594035 = validateParameter(valid_594035, JString, required = true,
                                 default = nil)
  if valid_594035 != nil:
    section.add "resourceGroupName", valid_594035
  var valid_594036 = path.getOrDefault("name")
  valid_594036 = validateParameter(valid_594036, JString, required = true,
                                 default = nil)
  if valid_594036 != nil:
    section.add "name", valid_594036
  var valid_594037 = path.getOrDefault("subscriptionId")
  valid_594037 = validateParameter(valid_594037, JString, required = true,
                                 default = nil)
  if valid_594037 != nil:
    section.add "subscriptionId", valid_594037
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594038 = query.getOrDefault("api-version")
  valid_594038 = validateParameter(valid_594038, JString, required = true,
                                 default = nil)
  if valid_594038 != nil:
    section.add "api-version", valid_594038
  var valid_594039 = query.getOrDefault("hostName")
  valid_594039 = validateParameter(valid_594039, JString, required = false,
                                 default = nil)
  if valid_594039 != nil:
    section.add "hostName", valid_594039
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594040: Call_WebAppsAnalyzeCustomHostname_594032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_594040.validator(path, query, header, formData, body)
  let scheme = call_594040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594040.url(scheme.get, call_594040.host, call_594040.base,
                         call_594040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594040, url, valid)

proc call*(call_594041: Call_WebAppsAnalyzeCustomHostname_594032;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostname
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594042 = newJObject()
  var query_594043 = newJObject()
  add(path_594042, "resourceGroupName", newJString(resourceGroupName))
  add(query_594043, "api-version", newJString(apiVersion))
  add(path_594042, "name", newJString(name))
  add(query_594043, "hostName", newJString(hostName))
  add(path_594042, "subscriptionId", newJString(subscriptionId))
  result = call_594041.call(path_594042, query_594043, nil, nil, nil)

var webAppsAnalyzeCustomHostname* = Call_WebAppsAnalyzeCustomHostname_594032(
    name: "webAppsAnalyzeCustomHostname", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostname_594033, base: "",
    url: url_WebAppsAnalyzeCustomHostname_594034, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigToProduction_594044 = ref object of OpenApiRestCall_593437
proc url_WebAppsApplySlotConfigToProduction_594046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigToProduction_594045(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594047 = path.getOrDefault("resourceGroupName")
  valid_594047 = validateParameter(valid_594047, JString, required = true,
                                 default = nil)
  if valid_594047 != nil:
    section.add "resourceGroupName", valid_594047
  var valid_594048 = path.getOrDefault("name")
  valid_594048 = validateParameter(valid_594048, JString, required = true,
                                 default = nil)
  if valid_594048 != nil:
    section.add "name", valid_594048
  var valid_594049 = path.getOrDefault("subscriptionId")
  valid_594049 = validateParameter(valid_594049, JString, required = true,
                                 default = nil)
  if valid_594049 != nil:
    section.add "subscriptionId", valid_594049
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594050 = query.getOrDefault("api-version")
  valid_594050 = validateParameter(valid_594050, JString, required = true,
                                 default = nil)
  if valid_594050 != nil:
    section.add "api-version", valid_594050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594052: Call_WebAppsApplySlotConfigToProduction_594044;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_594052.validator(path, query, header, formData, body)
  let scheme = call_594052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594052.url(scheme.get, call_594052.host, call_594052.base,
                         call_594052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594052, url, valid)

proc call*(call_594053: Call_WebAppsApplySlotConfigToProduction_594044;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigToProduction
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_594054 = newJObject()
  var query_594055 = newJObject()
  var body_594056 = newJObject()
  add(path_594054, "resourceGroupName", newJString(resourceGroupName))
  add(query_594055, "api-version", newJString(apiVersion))
  add(path_594054, "name", newJString(name))
  add(path_594054, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_594056 = slotSwapEntity
  result = call_594053.call(path_594054, query_594055, nil, nil, body_594056)

var webAppsApplySlotConfigToProduction* = Call_WebAppsApplySlotConfigToProduction_594044(
    name: "webAppsApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigToProduction_594045, base: "",
    url: url_WebAppsApplySlotConfigToProduction_594046, schemes: {Scheme.Https})
type
  Call_WebAppsBackup_594057 = ref object of OpenApiRestCall_593437
proc url_WebAppsBackup_594059(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackup_594058(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594060 = path.getOrDefault("resourceGroupName")
  valid_594060 = validateParameter(valid_594060, JString, required = true,
                                 default = nil)
  if valid_594060 != nil:
    section.add "resourceGroupName", valid_594060
  var valid_594061 = path.getOrDefault("name")
  valid_594061 = validateParameter(valid_594061, JString, required = true,
                                 default = nil)
  if valid_594061 != nil:
    section.add "name", valid_594061
  var valid_594062 = path.getOrDefault("subscriptionId")
  valid_594062 = validateParameter(valid_594062, JString, required = true,
                                 default = nil)
  if valid_594062 != nil:
    section.add "subscriptionId", valid_594062
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594063 = query.getOrDefault("api-version")
  valid_594063 = validateParameter(valid_594063, JString, required = true,
                                 default = nil)
  if valid_594063 != nil:
    section.add "api-version", valid_594063
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594065: Call_WebAppsBackup_594057; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_594065.validator(path, query, header, formData, body)
  let scheme = call_594065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594065.url(scheme.get, call_594065.host, call_594065.base,
                         call_594065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594065, url, valid)

proc call*(call_594066: Call_WebAppsBackup_594057; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsBackup
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_594067 = newJObject()
  var query_594068 = newJObject()
  var body_594069 = newJObject()
  add(path_594067, "resourceGroupName", newJString(resourceGroupName))
  add(query_594068, "api-version", newJString(apiVersion))
  add(path_594067, "name", newJString(name))
  add(path_594067, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594069 = request
  result = call_594066.call(path_594067, query_594068, nil, nil, body_594069)

var webAppsBackup* = Call_WebAppsBackup_594057(name: "webAppsBackup",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_WebAppsBackup_594058, base: "", url: url_WebAppsBackup_594059,
    schemes: {Scheme.Https})
type
  Call_WebAppsListBackups_594070 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackups_594072(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackups_594071(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594073 = path.getOrDefault("resourceGroupName")
  valid_594073 = validateParameter(valid_594073, JString, required = true,
                                 default = nil)
  if valid_594073 != nil:
    section.add "resourceGroupName", valid_594073
  var valid_594074 = path.getOrDefault("name")
  valid_594074 = validateParameter(valid_594074, JString, required = true,
                                 default = nil)
  if valid_594074 != nil:
    section.add "name", valid_594074
  var valid_594075 = path.getOrDefault("subscriptionId")
  valid_594075 = validateParameter(valid_594075, JString, required = true,
                                 default = nil)
  if valid_594075 != nil:
    section.add "subscriptionId", valid_594075
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594076 = query.getOrDefault("api-version")
  valid_594076 = validateParameter(valid_594076, JString, required = true,
                                 default = nil)
  if valid_594076 != nil:
    section.add "api-version", valid_594076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594077: Call_WebAppsListBackups_594070; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_594077.validator(path, query, header, formData, body)
  let scheme = call_594077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594077.url(scheme.get, call_594077.host, call_594077.base,
                         call_594077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594077, url, valid)

proc call*(call_594078: Call_WebAppsListBackups_594070; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListBackups
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594079 = newJObject()
  var query_594080 = newJObject()
  add(path_594079, "resourceGroupName", newJString(resourceGroupName))
  add(query_594080, "api-version", newJString(apiVersion))
  add(path_594079, "name", newJString(name))
  add(path_594079, "subscriptionId", newJString(subscriptionId))
  result = call_594078.call(path_594079, query_594080, nil, nil, nil)

var webAppsListBackups* = Call_WebAppsListBackups_594070(
    name: "webAppsListBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_WebAppsListBackups_594071, base: "",
    url: url_WebAppsListBackups_594072, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverRestore_594081 = ref object of OpenApiRestCall_593437
proc url_WebAppsDiscoverRestore_594083(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverRestore_594082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594084 = path.getOrDefault("resourceGroupName")
  valid_594084 = validateParameter(valid_594084, JString, required = true,
                                 default = nil)
  if valid_594084 != nil:
    section.add "resourceGroupName", valid_594084
  var valid_594085 = path.getOrDefault("name")
  valid_594085 = validateParameter(valid_594085, JString, required = true,
                                 default = nil)
  if valid_594085 != nil:
    section.add "name", valid_594085
  var valid_594086 = path.getOrDefault("subscriptionId")
  valid_594086 = validateParameter(valid_594086, JString, required = true,
                                 default = nil)
  if valid_594086 != nil:
    section.add "subscriptionId", valid_594086
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594087 = query.getOrDefault("api-version")
  valid_594087 = validateParameter(valid_594087, JString, required = true,
                                 default = nil)
  if valid_594087 != nil:
    section.add "api-version", valid_594087
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594089: Call_WebAppsDiscoverRestore_594081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  let valid = call_594089.validator(path, query, header, formData, body)
  let scheme = call_594089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594089.url(scheme.get, call_594089.host, call_594089.base,
                         call_594089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594089, url, valid)

proc call*(call_594090: Call_WebAppsDiscoverRestore_594081;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverRestore
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_594091 = newJObject()
  var query_594092 = newJObject()
  var body_594093 = newJObject()
  add(path_594091, "resourceGroupName", newJString(resourceGroupName))
  add(query_594092, "api-version", newJString(apiVersion))
  add(path_594091, "name", newJString(name))
  add(path_594091, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594093 = request
  result = call_594090.call(path_594091, query_594092, nil, nil, body_594093)

var webAppsDiscoverRestore* = Call_WebAppsDiscoverRestore_594081(
    name: "webAppsDiscoverRestore", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
    validator: validate_WebAppsDiscoverRestore_594082, base: "",
    url: url_WebAppsDiscoverRestore_594083, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatus_594094 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupStatus_594096(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatus_594095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594097 = path.getOrDefault("resourceGroupName")
  valid_594097 = validateParameter(valid_594097, JString, required = true,
                                 default = nil)
  if valid_594097 != nil:
    section.add "resourceGroupName", valid_594097
  var valid_594098 = path.getOrDefault("name")
  valid_594098 = validateParameter(valid_594098, JString, required = true,
                                 default = nil)
  if valid_594098 != nil:
    section.add "name", valid_594098
  var valid_594099 = path.getOrDefault("subscriptionId")
  valid_594099 = validateParameter(valid_594099, JString, required = true,
                                 default = nil)
  if valid_594099 != nil:
    section.add "subscriptionId", valid_594099
  var valid_594100 = path.getOrDefault("backupId")
  valid_594100 = validateParameter(valid_594100, JString, required = true,
                                 default = nil)
  if valid_594100 != nil:
    section.add "backupId", valid_594100
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594101 = query.getOrDefault("api-version")
  valid_594101 = validateParameter(valid_594101, JString, required = true,
                                 default = nil)
  if valid_594101 != nil:
    section.add "api-version", valid_594101
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594102: Call_WebAppsGetBackupStatus_594094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_594102.validator(path, query, header, formData, body)
  let scheme = call_594102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594102.url(scheme.get, call_594102.host, call_594102.base,
                         call_594102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594102, url, valid)

proc call*(call_594103: Call_WebAppsGetBackupStatus_594094;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatus
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_594104 = newJObject()
  var query_594105 = newJObject()
  add(path_594104, "resourceGroupName", newJString(resourceGroupName))
  add(query_594105, "api-version", newJString(apiVersion))
  add(path_594104, "name", newJString(name))
  add(path_594104, "subscriptionId", newJString(subscriptionId))
  add(path_594104, "backupId", newJString(backupId))
  result = call_594103.call(path_594104, query_594105, nil, nil, nil)

var webAppsGetBackupStatus* = Call_WebAppsGetBackupStatus_594094(
    name: "webAppsGetBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatus_594095, base: "",
    url: url_WebAppsGetBackupStatus_594096, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackup_594106 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackup_594108(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackup_594107(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594109 = path.getOrDefault("resourceGroupName")
  valid_594109 = validateParameter(valid_594109, JString, required = true,
                                 default = nil)
  if valid_594109 != nil:
    section.add "resourceGroupName", valid_594109
  var valid_594110 = path.getOrDefault("name")
  valid_594110 = validateParameter(valid_594110, JString, required = true,
                                 default = nil)
  if valid_594110 != nil:
    section.add "name", valid_594110
  var valid_594111 = path.getOrDefault("subscriptionId")
  valid_594111 = validateParameter(valid_594111, JString, required = true,
                                 default = nil)
  if valid_594111 != nil:
    section.add "subscriptionId", valid_594111
  var valid_594112 = path.getOrDefault("backupId")
  valid_594112 = validateParameter(valid_594112, JString, required = true,
                                 default = nil)
  if valid_594112 != nil:
    section.add "backupId", valid_594112
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594113 = query.getOrDefault("api-version")
  valid_594113 = validateParameter(valid_594113, JString, required = true,
                                 default = nil)
  if valid_594113 != nil:
    section.add "api-version", valid_594113
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594114: Call_WebAppsDeleteBackup_594106; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_594114.validator(path, query, header, formData, body)
  let scheme = call_594114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594114.url(scheme.get, call_594114.host, call_594114.base,
                         call_594114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594114, url, valid)

proc call*(call_594115: Call_WebAppsDeleteBackup_594106; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackup
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_594116 = newJObject()
  var query_594117 = newJObject()
  add(path_594116, "resourceGroupName", newJString(resourceGroupName))
  add(query_594117, "api-version", newJString(apiVersion))
  add(path_594116, "name", newJString(name))
  add(path_594116, "subscriptionId", newJString(subscriptionId))
  add(path_594116, "backupId", newJString(backupId))
  result = call_594115.call(path_594116, query_594117, nil, nil, nil)

var webAppsDeleteBackup* = Call_WebAppsDeleteBackup_594106(
    name: "webAppsDeleteBackup", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackup_594107, base: "",
    url: url_WebAppsDeleteBackup_594108, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecrets_594118 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackupStatusSecrets_594120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecrets_594119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594121 = path.getOrDefault("resourceGroupName")
  valid_594121 = validateParameter(valid_594121, JString, required = true,
                                 default = nil)
  if valid_594121 != nil:
    section.add "resourceGroupName", valid_594121
  var valid_594122 = path.getOrDefault("name")
  valid_594122 = validateParameter(valid_594122, JString, required = true,
                                 default = nil)
  if valid_594122 != nil:
    section.add "name", valid_594122
  var valid_594123 = path.getOrDefault("subscriptionId")
  valid_594123 = validateParameter(valid_594123, JString, required = true,
                                 default = nil)
  if valid_594123 != nil:
    section.add "subscriptionId", valid_594123
  var valid_594124 = path.getOrDefault("backupId")
  valid_594124 = validateParameter(valid_594124, JString, required = true,
                                 default = nil)
  if valid_594124 != nil:
    section.add "backupId", valid_594124
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594125 = query.getOrDefault("api-version")
  valid_594125 = validateParameter(valid_594125, JString, required = true,
                                 default = nil)
  if valid_594125 != nil:
    section.add "api-version", valid_594125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594127: Call_WebAppsListBackupStatusSecrets_594118; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_594127.validator(path, query, header, formData, body)
  let scheme = call_594127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594127.url(scheme.get, call_594127.host, call_594127.base,
                         call_594127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594127, url, valid)

proc call*(call_594128: Call_WebAppsListBackupStatusSecrets_594118;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecrets
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_594129 = newJObject()
  var query_594130 = newJObject()
  var body_594131 = newJObject()
  add(path_594129, "resourceGroupName", newJString(resourceGroupName))
  add(query_594130, "api-version", newJString(apiVersion))
  add(path_594129, "name", newJString(name))
  add(path_594129, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594131 = request
  add(path_594129, "backupId", newJString(backupId))
  result = call_594128.call(path_594129, query_594130, nil, nil, body_594131)

var webAppsListBackupStatusSecrets* = Call_WebAppsListBackupStatusSecrets_594118(
    name: "webAppsListBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecrets_594119, base: "",
    url: url_WebAppsListBackupStatusSecrets_594120, schemes: {Scheme.Https})
type
  Call_WebAppsRestore_594132 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestore_594134(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestore_594133(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594135 = path.getOrDefault("resourceGroupName")
  valid_594135 = validateParameter(valid_594135, JString, required = true,
                                 default = nil)
  if valid_594135 != nil:
    section.add "resourceGroupName", valid_594135
  var valid_594136 = path.getOrDefault("name")
  valid_594136 = validateParameter(valid_594136, JString, required = true,
                                 default = nil)
  if valid_594136 != nil:
    section.add "name", valid_594136
  var valid_594137 = path.getOrDefault("subscriptionId")
  valid_594137 = validateParameter(valid_594137, JString, required = true,
                                 default = nil)
  if valid_594137 != nil:
    section.add "subscriptionId", valid_594137
  var valid_594138 = path.getOrDefault("backupId")
  valid_594138 = validateParameter(valid_594138, JString, required = true,
                                 default = nil)
  if valid_594138 != nil:
    section.add "backupId", valid_594138
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594139 = query.getOrDefault("api-version")
  valid_594139 = validateParameter(valid_594139, JString, required = true,
                                 default = nil)
  if valid_594139 != nil:
    section.add "api-version", valid_594139
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594141: Call_WebAppsRestore_594132; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_594141.validator(path, query, header, formData, body)
  let scheme = call_594141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594141.url(scheme.get, call_594141.host, call_594141.base,
                         call_594141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594141, url, valid)

proc call*(call_594142: Call_WebAppsRestore_594132; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode;
          backupId: string): Recallable =
  ## webAppsRestore
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_594143 = newJObject()
  var query_594144 = newJObject()
  var body_594145 = newJObject()
  add(path_594143, "resourceGroupName", newJString(resourceGroupName))
  add(query_594144, "api-version", newJString(apiVersion))
  add(path_594143, "name", newJString(name))
  add(path_594143, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594145 = request
  add(path_594143, "backupId", newJString(backupId))
  result = call_594142.call(path_594143, query_594144, nil, nil, body_594145)

var webAppsRestore* = Call_WebAppsRestore_594132(name: "webAppsRestore",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_WebAppsRestore_594133, base: "", url: url_WebAppsRestore_594134,
    schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurations_594146 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurations_594148(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurations_594147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594149 = path.getOrDefault("resourceGroupName")
  valid_594149 = validateParameter(valid_594149, JString, required = true,
                                 default = nil)
  if valid_594149 != nil:
    section.add "resourceGroupName", valid_594149
  var valid_594150 = path.getOrDefault("name")
  valid_594150 = validateParameter(valid_594150, JString, required = true,
                                 default = nil)
  if valid_594150 != nil:
    section.add "name", valid_594150
  var valid_594151 = path.getOrDefault("subscriptionId")
  valid_594151 = validateParameter(valid_594151, JString, required = true,
                                 default = nil)
  if valid_594151 != nil:
    section.add "subscriptionId", valid_594151
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594152 = query.getOrDefault("api-version")
  valid_594152 = validateParameter(valid_594152, JString, required = true,
                                 default = nil)
  if valid_594152 != nil:
    section.add "api-version", valid_594152
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594153: Call_WebAppsListConfigurations_594146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_594153.validator(path, query, header, formData, body)
  let scheme = call_594153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594153.url(scheme.get, call_594153.host, call_594153.base,
                         call_594153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594153, url, valid)

proc call*(call_594154: Call_WebAppsListConfigurations_594146;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurations
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594155 = newJObject()
  var query_594156 = newJObject()
  add(path_594155, "resourceGroupName", newJString(resourceGroupName))
  add(query_594156, "api-version", newJString(apiVersion))
  add(path_594155, "name", newJString(name))
  add(path_594155, "subscriptionId", newJString(subscriptionId))
  result = call_594154.call(path_594155, query_594156, nil, nil, nil)

var webAppsListConfigurations* = Call_WebAppsListConfigurations_594146(
    name: "webAppsListConfigurations", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    validator: validate_WebAppsListConfigurations_594147, base: "",
    url: url_WebAppsListConfigurations_594148, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettings_594157 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateApplicationSettings_594159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettings_594158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594160 = path.getOrDefault("resourceGroupName")
  valid_594160 = validateParameter(valid_594160, JString, required = true,
                                 default = nil)
  if valid_594160 != nil:
    section.add "resourceGroupName", valid_594160
  var valid_594161 = path.getOrDefault("name")
  valid_594161 = validateParameter(valid_594161, JString, required = true,
                                 default = nil)
  if valid_594161 != nil:
    section.add "name", valid_594161
  var valid_594162 = path.getOrDefault("subscriptionId")
  valid_594162 = validateParameter(valid_594162, JString, required = true,
                                 default = nil)
  if valid_594162 != nil:
    section.add "subscriptionId", valid_594162
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594163 = query.getOrDefault("api-version")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "api-version", valid_594163
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594165: Call_WebAppsUpdateApplicationSettings_594157;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_594165.validator(path, query, header, formData, body)
  let scheme = call_594165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594165.url(scheme.get, call_594165.host, call_594165.base,
                         call_594165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594165, url, valid)

proc call*(call_594166: Call_WebAppsUpdateApplicationSettings_594157;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettings
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594167 = newJObject()
  var query_594168 = newJObject()
  var body_594169 = newJObject()
  add(path_594167, "resourceGroupName", newJString(resourceGroupName))
  add(query_594168, "api-version", newJString(apiVersion))
  add(path_594167, "name", newJString(name))
  if appSettings != nil:
    body_594169 = appSettings
  add(path_594167, "subscriptionId", newJString(subscriptionId))
  result = call_594166.call(path_594167, query_594168, nil, nil, body_594169)

var webAppsUpdateApplicationSettings* = Call_WebAppsUpdateApplicationSettings_594157(
    name: "webAppsUpdateApplicationSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettings_594158, base: "",
    url: url_WebAppsUpdateApplicationSettings_594159, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettings_594170 = ref object of OpenApiRestCall_593437
proc url_WebAppsListApplicationSettings_594172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettings_594171(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594173 = path.getOrDefault("resourceGroupName")
  valid_594173 = validateParameter(valid_594173, JString, required = true,
                                 default = nil)
  if valid_594173 != nil:
    section.add "resourceGroupName", valid_594173
  var valid_594174 = path.getOrDefault("name")
  valid_594174 = validateParameter(valid_594174, JString, required = true,
                                 default = nil)
  if valid_594174 != nil:
    section.add "name", valid_594174
  var valid_594175 = path.getOrDefault("subscriptionId")
  valid_594175 = validateParameter(valid_594175, JString, required = true,
                                 default = nil)
  if valid_594175 != nil:
    section.add "subscriptionId", valid_594175
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594176 = query.getOrDefault("api-version")
  valid_594176 = validateParameter(valid_594176, JString, required = true,
                                 default = nil)
  if valid_594176 != nil:
    section.add "api-version", valid_594176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594177: Call_WebAppsListApplicationSettings_594170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_594177.validator(path, query, header, formData, body)
  let scheme = call_594177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594177.url(scheme.get, call_594177.host, call_594177.base,
                         call_594177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594177, url, valid)

proc call*(call_594178: Call_WebAppsListApplicationSettings_594170;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettings
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594179 = newJObject()
  var query_594180 = newJObject()
  add(path_594179, "resourceGroupName", newJString(resourceGroupName))
  add(query_594180, "api-version", newJString(apiVersion))
  add(path_594179, "name", newJString(name))
  add(path_594179, "subscriptionId", newJString(subscriptionId))
  result = call_594178.call(path_594179, query_594180, nil, nil, nil)

var webAppsListApplicationSettings* = Call_WebAppsListApplicationSettings_594170(
    name: "webAppsListApplicationSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettings_594171, base: "",
    url: url_WebAppsListApplicationSettings_594172, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettings_594181 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateAuthSettings_594183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettings_594182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594184 = path.getOrDefault("resourceGroupName")
  valid_594184 = validateParameter(valid_594184, JString, required = true,
                                 default = nil)
  if valid_594184 != nil:
    section.add "resourceGroupName", valid_594184
  var valid_594185 = path.getOrDefault("name")
  valid_594185 = validateParameter(valid_594185, JString, required = true,
                                 default = nil)
  if valid_594185 != nil:
    section.add "name", valid_594185
  var valid_594186 = path.getOrDefault("subscriptionId")
  valid_594186 = validateParameter(valid_594186, JString, required = true,
                                 default = nil)
  if valid_594186 != nil:
    section.add "subscriptionId", valid_594186
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594187 = query.getOrDefault("api-version")
  valid_594187 = validateParameter(valid_594187, JString, required = true,
                                 default = nil)
  if valid_594187 != nil:
    section.add "api-version", valid_594187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594189: Call_WebAppsUpdateAuthSettings_594181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_594189.validator(path, query, header, formData, body)
  let scheme = call_594189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594189.url(scheme.get, call_594189.host, call_594189.base,
                         call_594189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594189, url, valid)

proc call*(call_594190: Call_WebAppsUpdateAuthSettings_594181;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettings
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_594191 = newJObject()
  var query_594192 = newJObject()
  var body_594193 = newJObject()
  add(path_594191, "resourceGroupName", newJString(resourceGroupName))
  add(query_594192, "api-version", newJString(apiVersion))
  add(path_594191, "name", newJString(name))
  add(path_594191, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_594193 = siteAuthSettings
  result = call_594190.call(path_594191, query_594192, nil, nil, body_594193)

var webAppsUpdateAuthSettings* = Call_WebAppsUpdateAuthSettings_594181(
    name: "webAppsUpdateAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettings_594182, base: "",
    url: url_WebAppsUpdateAuthSettings_594183, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettings_594194 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetAuthSettings_594196(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettings_594195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594197 = path.getOrDefault("resourceGroupName")
  valid_594197 = validateParameter(valid_594197, JString, required = true,
                                 default = nil)
  if valid_594197 != nil:
    section.add "resourceGroupName", valid_594197
  var valid_594198 = path.getOrDefault("name")
  valid_594198 = validateParameter(valid_594198, JString, required = true,
                                 default = nil)
  if valid_594198 != nil:
    section.add "name", valid_594198
  var valid_594199 = path.getOrDefault("subscriptionId")
  valid_594199 = validateParameter(valid_594199, JString, required = true,
                                 default = nil)
  if valid_594199 != nil:
    section.add "subscriptionId", valid_594199
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594200 = query.getOrDefault("api-version")
  valid_594200 = validateParameter(valid_594200, JString, required = true,
                                 default = nil)
  if valid_594200 != nil:
    section.add "api-version", valid_594200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594201: Call_WebAppsGetAuthSettings_594194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_594201.validator(path, query, header, formData, body)
  let scheme = call_594201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594201.url(scheme.get, call_594201.host, call_594201.base,
                         call_594201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594201, url, valid)

proc call*(call_594202: Call_WebAppsGetAuthSettings_594194;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettings
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594203 = newJObject()
  var query_594204 = newJObject()
  add(path_594203, "resourceGroupName", newJString(resourceGroupName))
  add(query_594204, "api-version", newJString(apiVersion))
  add(path_594203, "name", newJString(name))
  add(path_594203, "subscriptionId", newJString(subscriptionId))
  result = call_594202.call(path_594203, query_594204, nil, nil, nil)

var webAppsGetAuthSettings* = Call_WebAppsGetAuthSettings_594194(
    name: "webAppsGetAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettings_594195, base: "",
    url: url_WebAppsGetAuthSettings_594196, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfiguration_594205 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateBackupConfiguration_594207(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfiguration_594206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594208 = path.getOrDefault("resourceGroupName")
  valid_594208 = validateParameter(valid_594208, JString, required = true,
                                 default = nil)
  if valid_594208 != nil:
    section.add "resourceGroupName", valid_594208
  var valid_594209 = path.getOrDefault("name")
  valid_594209 = validateParameter(valid_594209, JString, required = true,
                                 default = nil)
  if valid_594209 != nil:
    section.add "name", valid_594209
  var valid_594210 = path.getOrDefault("subscriptionId")
  valid_594210 = validateParameter(valid_594210, JString, required = true,
                                 default = nil)
  if valid_594210 != nil:
    section.add "subscriptionId", valid_594210
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594211 = query.getOrDefault("api-version")
  valid_594211 = validateParameter(valid_594211, JString, required = true,
                                 default = nil)
  if valid_594211 != nil:
    section.add "api-version", valid_594211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594213: Call_WebAppsUpdateBackupConfiguration_594205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_594213.validator(path, query, header, formData, body)
  let scheme = call_594213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594213.url(scheme.get, call_594213.host, call_594213.base,
                         call_594213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594213, url, valid)

proc call*(call_594214: Call_WebAppsUpdateBackupConfiguration_594205;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfiguration
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_594215 = newJObject()
  var query_594216 = newJObject()
  var body_594217 = newJObject()
  add(path_594215, "resourceGroupName", newJString(resourceGroupName))
  add(query_594216, "api-version", newJString(apiVersion))
  add(path_594215, "name", newJString(name))
  add(path_594215, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_594217 = request
  result = call_594214.call(path_594215, query_594216, nil, nil, body_594217)

var webAppsUpdateBackupConfiguration* = Call_WebAppsUpdateBackupConfiguration_594205(
    name: "webAppsUpdateBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsUpdateBackupConfiguration_594206, base: "",
    url: url_WebAppsUpdateBackupConfiguration_594207, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfiguration_594218 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackupConfiguration_594220(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfiguration_594219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594221 = path.getOrDefault("resourceGroupName")
  valid_594221 = validateParameter(valid_594221, JString, required = true,
                                 default = nil)
  if valid_594221 != nil:
    section.add "resourceGroupName", valid_594221
  var valid_594222 = path.getOrDefault("name")
  valid_594222 = validateParameter(valid_594222, JString, required = true,
                                 default = nil)
  if valid_594222 != nil:
    section.add "name", valid_594222
  var valid_594223 = path.getOrDefault("subscriptionId")
  valid_594223 = validateParameter(valid_594223, JString, required = true,
                                 default = nil)
  if valid_594223 != nil:
    section.add "subscriptionId", valid_594223
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594224 = query.getOrDefault("api-version")
  valid_594224 = validateParameter(valid_594224, JString, required = true,
                                 default = nil)
  if valid_594224 != nil:
    section.add "api-version", valid_594224
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594225: Call_WebAppsDeleteBackupConfiguration_594218;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_594225.validator(path, query, header, formData, body)
  let scheme = call_594225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594225.url(scheme.get, call_594225.host, call_594225.base,
                         call_594225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594225, url, valid)

proc call*(call_594226: Call_WebAppsDeleteBackupConfiguration_594218;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfiguration
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594227 = newJObject()
  var query_594228 = newJObject()
  add(path_594227, "resourceGroupName", newJString(resourceGroupName))
  add(query_594228, "api-version", newJString(apiVersion))
  add(path_594227, "name", newJString(name))
  add(path_594227, "subscriptionId", newJString(subscriptionId))
  result = call_594226.call(path_594227, query_594228, nil, nil, nil)

var webAppsDeleteBackupConfiguration* = Call_WebAppsDeleteBackupConfiguration_594218(
    name: "webAppsDeleteBackupConfiguration", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsDeleteBackupConfiguration_594219, base: "",
    url: url_WebAppsDeleteBackupConfiguration_594220, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfiguration_594229 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupConfiguration_594231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfiguration_594230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594232 = path.getOrDefault("resourceGroupName")
  valid_594232 = validateParameter(valid_594232, JString, required = true,
                                 default = nil)
  if valid_594232 != nil:
    section.add "resourceGroupName", valid_594232
  var valid_594233 = path.getOrDefault("name")
  valid_594233 = validateParameter(valid_594233, JString, required = true,
                                 default = nil)
  if valid_594233 != nil:
    section.add "name", valid_594233
  var valid_594234 = path.getOrDefault("subscriptionId")
  valid_594234 = validateParameter(valid_594234, JString, required = true,
                                 default = nil)
  if valid_594234 != nil:
    section.add "subscriptionId", valid_594234
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594235 = query.getOrDefault("api-version")
  valid_594235 = validateParameter(valid_594235, JString, required = true,
                                 default = nil)
  if valid_594235 != nil:
    section.add "api-version", valid_594235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594236: Call_WebAppsGetBackupConfiguration_594229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_594236.validator(path, query, header, formData, body)
  let scheme = call_594236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594236.url(scheme.get, call_594236.host, call_594236.base,
                         call_594236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594236, url, valid)

proc call*(call_594237: Call_WebAppsGetBackupConfiguration_594229;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfiguration
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594238 = newJObject()
  var query_594239 = newJObject()
  add(path_594238, "resourceGroupName", newJString(resourceGroupName))
  add(query_594239, "api-version", newJString(apiVersion))
  add(path_594238, "name", newJString(name))
  add(path_594238, "subscriptionId", newJString(subscriptionId))
  result = call_594237.call(path_594238, query_594239, nil, nil, nil)

var webAppsGetBackupConfiguration* = Call_WebAppsGetBackupConfiguration_594229(
    name: "webAppsGetBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_WebAppsGetBackupConfiguration_594230, base: "",
    url: url_WebAppsGetBackupConfiguration_594231, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStrings_594240 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConnectionStrings_594242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStrings_594241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594243 = path.getOrDefault("resourceGroupName")
  valid_594243 = validateParameter(valid_594243, JString, required = true,
                                 default = nil)
  if valid_594243 != nil:
    section.add "resourceGroupName", valid_594243
  var valid_594244 = path.getOrDefault("name")
  valid_594244 = validateParameter(valid_594244, JString, required = true,
                                 default = nil)
  if valid_594244 != nil:
    section.add "name", valid_594244
  var valid_594245 = path.getOrDefault("subscriptionId")
  valid_594245 = validateParameter(valid_594245, JString, required = true,
                                 default = nil)
  if valid_594245 != nil:
    section.add "subscriptionId", valid_594245
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594246 = query.getOrDefault("api-version")
  valid_594246 = validateParameter(valid_594246, JString, required = true,
                                 default = nil)
  if valid_594246 != nil:
    section.add "api-version", valid_594246
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594248: Call_WebAppsUpdateConnectionStrings_594240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_594248.validator(path, query, header, formData, body)
  let scheme = call_594248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594248.url(scheme.get, call_594248.host, call_594248.base,
                         call_594248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594248, url, valid)

proc call*(call_594249: Call_WebAppsUpdateConnectionStrings_594240;
          resourceGroupName: string; apiVersion: string; name: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStrings
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594250 = newJObject()
  var query_594251 = newJObject()
  var body_594252 = newJObject()
  add(path_594250, "resourceGroupName", newJString(resourceGroupName))
  add(query_594251, "api-version", newJString(apiVersion))
  add(path_594250, "name", newJString(name))
  if connectionStrings != nil:
    body_594252 = connectionStrings
  add(path_594250, "subscriptionId", newJString(subscriptionId))
  result = call_594249.call(path_594250, query_594251, nil, nil, body_594252)

var webAppsUpdateConnectionStrings* = Call_WebAppsUpdateConnectionStrings_594240(
    name: "webAppsUpdateConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStrings_594241, base: "",
    url: url_WebAppsUpdateConnectionStrings_594242, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStrings_594253 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConnectionStrings_594255(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStrings_594254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594256 = path.getOrDefault("resourceGroupName")
  valid_594256 = validateParameter(valid_594256, JString, required = true,
                                 default = nil)
  if valid_594256 != nil:
    section.add "resourceGroupName", valid_594256
  var valid_594257 = path.getOrDefault("name")
  valid_594257 = validateParameter(valid_594257, JString, required = true,
                                 default = nil)
  if valid_594257 != nil:
    section.add "name", valid_594257
  var valid_594258 = path.getOrDefault("subscriptionId")
  valid_594258 = validateParameter(valid_594258, JString, required = true,
                                 default = nil)
  if valid_594258 != nil:
    section.add "subscriptionId", valid_594258
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594259 = query.getOrDefault("api-version")
  valid_594259 = validateParameter(valid_594259, JString, required = true,
                                 default = nil)
  if valid_594259 != nil:
    section.add "api-version", valid_594259
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594260: Call_WebAppsListConnectionStrings_594253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_594260.validator(path, query, header, formData, body)
  let scheme = call_594260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594260.url(scheme.get, call_594260.host, call_594260.base,
                         call_594260.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594260, url, valid)

proc call*(call_594261: Call_WebAppsListConnectionStrings_594253;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStrings
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594262 = newJObject()
  var query_594263 = newJObject()
  add(path_594262, "resourceGroupName", newJString(resourceGroupName))
  add(query_594263, "api-version", newJString(apiVersion))
  add(path_594262, "name", newJString(name))
  add(path_594262, "subscriptionId", newJString(subscriptionId))
  result = call_594261.call(path_594262, query_594263, nil, nil, nil)

var webAppsListConnectionStrings* = Call_WebAppsListConnectionStrings_594253(
    name: "webAppsListConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStrings_594254, base: "",
    url: url_WebAppsListConnectionStrings_594255, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfig_594275 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDiagnosticLogsConfig_594277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfig_594276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594278 = path.getOrDefault("resourceGroupName")
  valid_594278 = validateParameter(valid_594278, JString, required = true,
                                 default = nil)
  if valid_594278 != nil:
    section.add "resourceGroupName", valid_594278
  var valid_594279 = path.getOrDefault("name")
  valid_594279 = validateParameter(valid_594279, JString, required = true,
                                 default = nil)
  if valid_594279 != nil:
    section.add "name", valid_594279
  var valid_594280 = path.getOrDefault("subscriptionId")
  valid_594280 = validateParameter(valid_594280, JString, required = true,
                                 default = nil)
  if valid_594280 != nil:
    section.add "subscriptionId", valid_594280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594281 = query.getOrDefault("api-version")
  valid_594281 = validateParameter(valid_594281, JString, required = true,
                                 default = nil)
  if valid_594281 != nil:
    section.add "api-version", valid_594281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594283: Call_WebAppsUpdateDiagnosticLogsConfig_594275;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_594283.validator(path, query, header, formData, body)
  let scheme = call_594283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594283.url(scheme.get, call_594283.host, call_594283.base,
                         call_594283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594283, url, valid)

proc call*(call_594284: Call_WebAppsUpdateDiagnosticLogsConfig_594275;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfig
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594285 = newJObject()
  var query_594286 = newJObject()
  var body_594287 = newJObject()
  add(path_594285, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_594287 = siteLogsConfig
  add(query_594286, "api-version", newJString(apiVersion))
  add(path_594285, "name", newJString(name))
  add(path_594285, "subscriptionId", newJString(subscriptionId))
  result = call_594284.call(path_594285, query_594286, nil, nil, body_594287)

var webAppsUpdateDiagnosticLogsConfig* = Call_WebAppsUpdateDiagnosticLogsConfig_594275(
    name: "webAppsUpdateDiagnosticLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfig_594276, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfig_594277, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfiguration_594264 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDiagnosticLogsConfiguration_594266(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfiguration_594265(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594267 = path.getOrDefault("resourceGroupName")
  valid_594267 = validateParameter(valid_594267, JString, required = true,
                                 default = nil)
  if valid_594267 != nil:
    section.add "resourceGroupName", valid_594267
  var valid_594268 = path.getOrDefault("name")
  valid_594268 = validateParameter(valid_594268, JString, required = true,
                                 default = nil)
  if valid_594268 != nil:
    section.add "name", valid_594268
  var valid_594269 = path.getOrDefault("subscriptionId")
  valid_594269 = validateParameter(valid_594269, JString, required = true,
                                 default = nil)
  if valid_594269 != nil:
    section.add "subscriptionId", valid_594269
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594270 = query.getOrDefault("api-version")
  valid_594270 = validateParameter(valid_594270, JString, required = true,
                                 default = nil)
  if valid_594270 != nil:
    section.add "api-version", valid_594270
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594271: Call_WebAppsGetDiagnosticLogsConfiguration_594264;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_594271.validator(path, query, header, formData, body)
  let scheme = call_594271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594271.url(scheme.get, call_594271.host, call_594271.base,
                         call_594271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594271, url, valid)

proc call*(call_594272: Call_WebAppsGetDiagnosticLogsConfiguration_594264;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfiguration
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594273 = newJObject()
  var query_594274 = newJObject()
  add(path_594273, "resourceGroupName", newJString(resourceGroupName))
  add(query_594274, "api-version", newJString(apiVersion))
  add(path_594273, "name", newJString(name))
  add(path_594273, "subscriptionId", newJString(subscriptionId))
  result = call_594272.call(path_594273, query_594274, nil, nil, nil)

var webAppsGetDiagnosticLogsConfiguration* = Call_WebAppsGetDiagnosticLogsConfiguration_594264(
    name: "webAppsGetDiagnosticLogsConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfiguration_594265, base: "",
    url: url_WebAppsGetDiagnosticLogsConfiguration_594266, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadata_594288 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateMetadata_594290(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadata_594289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594291 = path.getOrDefault("resourceGroupName")
  valid_594291 = validateParameter(valid_594291, JString, required = true,
                                 default = nil)
  if valid_594291 != nil:
    section.add "resourceGroupName", valid_594291
  var valid_594292 = path.getOrDefault("name")
  valid_594292 = validateParameter(valid_594292, JString, required = true,
                                 default = nil)
  if valid_594292 != nil:
    section.add "name", valid_594292
  var valid_594293 = path.getOrDefault("subscriptionId")
  valid_594293 = validateParameter(valid_594293, JString, required = true,
                                 default = nil)
  if valid_594293 != nil:
    section.add "subscriptionId", valid_594293
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594294 = query.getOrDefault("api-version")
  valid_594294 = validateParameter(valid_594294, JString, required = true,
                                 default = nil)
  if valid_594294 != nil:
    section.add "api-version", valid_594294
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594296: Call_WebAppsUpdateMetadata_594288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_594296.validator(path, query, header, formData, body)
  let scheme = call_594296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594296.url(scheme.get, call_594296.host, call_594296.base,
                         call_594296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594296, url, valid)

proc call*(call_594297: Call_WebAppsUpdateMetadata_594288;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadata
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_594298 = newJObject()
  var query_594299 = newJObject()
  var body_594300 = newJObject()
  add(path_594298, "resourceGroupName", newJString(resourceGroupName))
  add(query_594299, "api-version", newJString(apiVersion))
  add(path_594298, "name", newJString(name))
  add(path_594298, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_594300 = metadata
  result = call_594297.call(path_594298, query_594299, nil, nil, body_594300)

var webAppsUpdateMetadata* = Call_WebAppsUpdateMetadata_594288(
    name: "webAppsUpdateMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_WebAppsUpdateMetadata_594289, base: "",
    url: url_WebAppsUpdateMetadata_594290, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadata_594301 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetadata_594303(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadata_594302(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594304 = path.getOrDefault("resourceGroupName")
  valid_594304 = validateParameter(valid_594304, JString, required = true,
                                 default = nil)
  if valid_594304 != nil:
    section.add "resourceGroupName", valid_594304
  var valid_594305 = path.getOrDefault("name")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = nil)
  if valid_594305 != nil:
    section.add "name", valid_594305
  var valid_594306 = path.getOrDefault("subscriptionId")
  valid_594306 = validateParameter(valid_594306, JString, required = true,
                                 default = nil)
  if valid_594306 != nil:
    section.add "subscriptionId", valid_594306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594307 = query.getOrDefault("api-version")
  valid_594307 = validateParameter(valid_594307, JString, required = true,
                                 default = nil)
  if valid_594307 != nil:
    section.add "api-version", valid_594307
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594308: Call_WebAppsListMetadata_594301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_594308.validator(path, query, header, formData, body)
  let scheme = call_594308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594308.url(scheme.get, call_594308.host, call_594308.base,
                         call_594308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594308, url, valid)

proc call*(call_594309: Call_WebAppsListMetadata_594301; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListMetadata
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594310 = newJObject()
  var query_594311 = newJObject()
  add(path_594310, "resourceGroupName", newJString(resourceGroupName))
  add(query_594311, "api-version", newJString(apiVersion))
  add(path_594310, "name", newJString(name))
  add(path_594310, "subscriptionId", newJString(subscriptionId))
  result = call_594309.call(path_594310, query_594311, nil, nil, nil)

var webAppsListMetadata* = Call_WebAppsListMetadata_594301(
    name: "webAppsListMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_WebAppsListMetadata_594302, base: "",
    url: url_WebAppsListMetadata_594303, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentials_594312 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingCredentials_594314(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentials_594313(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594315 = path.getOrDefault("resourceGroupName")
  valid_594315 = validateParameter(valid_594315, JString, required = true,
                                 default = nil)
  if valid_594315 != nil:
    section.add "resourceGroupName", valid_594315
  var valid_594316 = path.getOrDefault("name")
  valid_594316 = validateParameter(valid_594316, JString, required = true,
                                 default = nil)
  if valid_594316 != nil:
    section.add "name", valid_594316
  var valid_594317 = path.getOrDefault("subscriptionId")
  valid_594317 = validateParameter(valid_594317, JString, required = true,
                                 default = nil)
  if valid_594317 != nil:
    section.add "subscriptionId", valid_594317
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594318 = query.getOrDefault("api-version")
  valid_594318 = validateParameter(valid_594318, JString, required = true,
                                 default = nil)
  if valid_594318 != nil:
    section.add "api-version", valid_594318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594319: Call_WebAppsListPublishingCredentials_594312;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_594319.validator(path, query, header, formData, body)
  let scheme = call_594319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594319.url(scheme.get, call_594319.host, call_594319.base,
                         call_594319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594319, url, valid)

proc call*(call_594320: Call_WebAppsListPublishingCredentials_594312;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentials
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594321 = newJObject()
  var query_594322 = newJObject()
  add(path_594321, "resourceGroupName", newJString(resourceGroupName))
  add(query_594322, "api-version", newJString(apiVersion))
  add(path_594321, "name", newJString(name))
  add(path_594321, "subscriptionId", newJString(subscriptionId))
  result = call_594320.call(path_594321, query_594322, nil, nil, nil)

var webAppsListPublishingCredentials* = Call_WebAppsListPublishingCredentials_594312(
    name: "webAppsListPublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentials_594313, base: "",
    url: url_WebAppsListPublishingCredentials_594314, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettings_594323 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSitePushSettings_594325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettings_594324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594326 = path.getOrDefault("resourceGroupName")
  valid_594326 = validateParameter(valid_594326, JString, required = true,
                                 default = nil)
  if valid_594326 != nil:
    section.add "resourceGroupName", valid_594326
  var valid_594327 = path.getOrDefault("name")
  valid_594327 = validateParameter(valid_594327, JString, required = true,
                                 default = nil)
  if valid_594327 != nil:
    section.add "name", valid_594327
  var valid_594328 = path.getOrDefault("subscriptionId")
  valid_594328 = validateParameter(valid_594328, JString, required = true,
                                 default = nil)
  if valid_594328 != nil:
    section.add "subscriptionId", valid_594328
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594329 = query.getOrDefault("api-version")
  valid_594329 = validateParameter(valid_594329, JString, required = true,
                                 default = nil)
  if valid_594329 != nil:
    section.add "api-version", valid_594329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594331: Call_WebAppsUpdateSitePushSettings_594323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_594331.validator(path, query, header, formData, body)
  let scheme = call_594331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594331.url(scheme.get, call_594331.host, call_594331.base,
                         call_594331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594331, url, valid)

proc call*(call_594332: Call_WebAppsUpdateSitePushSettings_594323;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettings
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_594333 = newJObject()
  var query_594334 = newJObject()
  var body_594335 = newJObject()
  add(path_594333, "resourceGroupName", newJString(resourceGroupName))
  add(query_594334, "api-version", newJString(apiVersion))
  add(path_594333, "name", newJString(name))
  add(path_594333, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_594335 = pushSettings
  result = call_594332.call(path_594333, query_594334, nil, nil, body_594335)

var webAppsUpdateSitePushSettings* = Call_WebAppsUpdateSitePushSettings_594323(
    name: "webAppsUpdateSitePushSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettings_594324, base: "",
    url: url_WebAppsUpdateSitePushSettings_594325, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettings_594336 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSitePushSettings_594338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettings_594337(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594339 = path.getOrDefault("resourceGroupName")
  valid_594339 = validateParameter(valid_594339, JString, required = true,
                                 default = nil)
  if valid_594339 != nil:
    section.add "resourceGroupName", valid_594339
  var valid_594340 = path.getOrDefault("name")
  valid_594340 = validateParameter(valid_594340, JString, required = true,
                                 default = nil)
  if valid_594340 != nil:
    section.add "name", valid_594340
  var valid_594341 = path.getOrDefault("subscriptionId")
  valid_594341 = validateParameter(valid_594341, JString, required = true,
                                 default = nil)
  if valid_594341 != nil:
    section.add "subscriptionId", valid_594341
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594342 = query.getOrDefault("api-version")
  valid_594342 = validateParameter(valid_594342, JString, required = true,
                                 default = nil)
  if valid_594342 != nil:
    section.add "api-version", valid_594342
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594343: Call_WebAppsListSitePushSettings_594336; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_594343.validator(path, query, header, formData, body)
  let scheme = call_594343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594343.url(scheme.get, call_594343.host, call_594343.base,
                         call_594343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594343, url, valid)

proc call*(call_594344: Call_WebAppsListSitePushSettings_594336;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettings
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594345 = newJObject()
  var query_594346 = newJObject()
  add(path_594345, "resourceGroupName", newJString(resourceGroupName))
  add(query_594346, "api-version", newJString(apiVersion))
  add(path_594345, "name", newJString(name))
  add(path_594345, "subscriptionId", newJString(subscriptionId))
  result = call_594344.call(path_594345, query_594346, nil, nil, nil)

var webAppsListSitePushSettings* = Call_WebAppsListSitePushSettings_594336(
    name: "webAppsListSitePushSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettings_594337, base: "",
    url: url_WebAppsListSitePushSettings_594338, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlotConfigurationNames_594358 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSlotConfigurationNames_594360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlotConfigurationNames_594359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594361 = path.getOrDefault("resourceGroupName")
  valid_594361 = validateParameter(valid_594361, JString, required = true,
                                 default = nil)
  if valid_594361 != nil:
    section.add "resourceGroupName", valid_594361
  var valid_594362 = path.getOrDefault("name")
  valid_594362 = validateParameter(valid_594362, JString, required = true,
                                 default = nil)
  if valid_594362 != nil:
    section.add "name", valid_594362
  var valid_594363 = path.getOrDefault("subscriptionId")
  valid_594363 = validateParameter(valid_594363, JString, required = true,
                                 default = nil)
  if valid_594363 != nil:
    section.add "subscriptionId", valid_594363
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594364 = query.getOrDefault("api-version")
  valid_594364 = validateParameter(valid_594364, JString, required = true,
                                 default = nil)
  if valid_594364 != nil:
    section.add "api-version", valid_594364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594366: Call_WebAppsUpdateSlotConfigurationNames_594358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  let valid = call_594366.validator(path, query, header, formData, body)
  let scheme = call_594366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594366.url(scheme.get, call_594366.host, call_594366.base,
                         call_594366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594366, url, valid)

proc call*(call_594367: Call_WebAppsUpdateSlotConfigurationNames_594358;
          resourceGroupName: string; apiVersion: string; name: string;
          slotConfigNames: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateSlotConfigurationNames
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594368 = newJObject()
  var query_594369 = newJObject()
  var body_594370 = newJObject()
  add(path_594368, "resourceGroupName", newJString(resourceGroupName))
  add(query_594369, "api-version", newJString(apiVersion))
  add(path_594368, "name", newJString(name))
  if slotConfigNames != nil:
    body_594370 = slotConfigNames
  add(path_594368, "subscriptionId", newJString(subscriptionId))
  result = call_594367.call(path_594368, query_594369, nil, nil, body_594370)

var webAppsUpdateSlotConfigurationNames* = Call_WebAppsUpdateSlotConfigurationNames_594358(
    name: "webAppsUpdateSlotConfigurationNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsUpdateSlotConfigurationNames_594359, base: "",
    url: url_WebAppsUpdateSlotConfigurationNames_594360, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotConfigurationNames_594347 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlotConfigurationNames_594349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotConfigurationNames_594348(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594350 = path.getOrDefault("resourceGroupName")
  valid_594350 = validateParameter(valid_594350, JString, required = true,
                                 default = nil)
  if valid_594350 != nil:
    section.add "resourceGroupName", valid_594350
  var valid_594351 = path.getOrDefault("name")
  valid_594351 = validateParameter(valid_594351, JString, required = true,
                                 default = nil)
  if valid_594351 != nil:
    section.add "name", valid_594351
  var valid_594352 = path.getOrDefault("subscriptionId")
  valid_594352 = validateParameter(valid_594352, JString, required = true,
                                 default = nil)
  if valid_594352 != nil:
    section.add "subscriptionId", valid_594352
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594353 = query.getOrDefault("api-version")
  valid_594353 = validateParameter(valid_594353, JString, required = true,
                                 default = nil)
  if valid_594353 != nil:
    section.add "api-version", valid_594353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594354: Call_WebAppsListSlotConfigurationNames_594347;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  let valid = call_594354.validator(path, query, header, formData, body)
  let scheme = call_594354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594354.url(scheme.get, call_594354.host, call_594354.base,
                         call_594354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594354, url, valid)

proc call*(call_594355: Call_WebAppsListSlotConfigurationNames_594347;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSlotConfigurationNames
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594356 = newJObject()
  var query_594357 = newJObject()
  add(path_594356, "resourceGroupName", newJString(resourceGroupName))
  add(query_594357, "api-version", newJString(apiVersion))
  add(path_594356, "name", newJString(name))
  add(path_594356, "subscriptionId", newJString(subscriptionId))
  result = call_594355.call(path_594356, query_594357, nil, nil, nil)

var webAppsListSlotConfigurationNames* = Call_WebAppsListSlotConfigurationNames_594347(
    name: "webAppsListSlotConfigurationNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsListSlotConfigurationNames_594348, base: "",
    url: url_WebAppsListSlotConfigurationNames_594349, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfiguration_594382 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateConfiguration_594384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfiguration_594383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594385 = path.getOrDefault("resourceGroupName")
  valid_594385 = validateParameter(valid_594385, JString, required = true,
                                 default = nil)
  if valid_594385 != nil:
    section.add "resourceGroupName", valid_594385
  var valid_594386 = path.getOrDefault("name")
  valid_594386 = validateParameter(valid_594386, JString, required = true,
                                 default = nil)
  if valid_594386 != nil:
    section.add "name", valid_594386
  var valid_594387 = path.getOrDefault("subscriptionId")
  valid_594387 = validateParameter(valid_594387, JString, required = true,
                                 default = nil)
  if valid_594387 != nil:
    section.add "subscriptionId", valid_594387
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594388 = query.getOrDefault("api-version")
  valid_594388 = validateParameter(valid_594388, JString, required = true,
                                 default = nil)
  if valid_594388 != nil:
    section.add "api-version", valid_594388
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594390: Call_WebAppsCreateOrUpdateConfiguration_594382;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_594390.validator(path, query, header, formData, body)
  let scheme = call_594390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594390.url(scheme.get, call_594390.host, call_594390.base,
                         call_594390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594390, url, valid)

proc call*(call_594391: Call_WebAppsCreateOrUpdateConfiguration_594382;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594392 = newJObject()
  var query_594393 = newJObject()
  var body_594394 = newJObject()
  add(path_594392, "resourceGroupName", newJString(resourceGroupName))
  add(query_594393, "api-version", newJString(apiVersion))
  add(path_594392, "name", newJString(name))
  if siteConfig != nil:
    body_594394 = siteConfig
  add(path_594392, "subscriptionId", newJString(subscriptionId))
  result = call_594391.call(path_594392, query_594393, nil, nil, body_594394)

var webAppsCreateOrUpdateConfiguration* = Call_WebAppsCreateOrUpdateConfiguration_594382(
    name: "webAppsCreateOrUpdateConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfiguration_594383, base: "",
    url: url_WebAppsCreateOrUpdateConfiguration_594384, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfiguration_594371 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfiguration_594373(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfiguration_594372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594374 = path.getOrDefault("resourceGroupName")
  valid_594374 = validateParameter(valid_594374, JString, required = true,
                                 default = nil)
  if valid_594374 != nil:
    section.add "resourceGroupName", valid_594374
  var valid_594375 = path.getOrDefault("name")
  valid_594375 = validateParameter(valid_594375, JString, required = true,
                                 default = nil)
  if valid_594375 != nil:
    section.add "name", valid_594375
  var valid_594376 = path.getOrDefault("subscriptionId")
  valid_594376 = validateParameter(valid_594376, JString, required = true,
                                 default = nil)
  if valid_594376 != nil:
    section.add "subscriptionId", valid_594376
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594377 = query.getOrDefault("api-version")
  valid_594377 = validateParameter(valid_594377, JString, required = true,
                                 default = nil)
  if valid_594377 != nil:
    section.add "api-version", valid_594377
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594378: Call_WebAppsGetConfiguration_594371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_594378.validator(path, query, header, formData, body)
  let scheme = call_594378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594378.url(scheme.get, call_594378.host, call_594378.base,
                         call_594378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594378, url, valid)

proc call*(call_594379: Call_WebAppsGetConfiguration_594371;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfiguration
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594380 = newJObject()
  var query_594381 = newJObject()
  add(path_594380, "resourceGroupName", newJString(resourceGroupName))
  add(query_594381, "api-version", newJString(apiVersion))
  add(path_594380, "name", newJString(name))
  add(path_594380, "subscriptionId", newJString(subscriptionId))
  result = call_594379.call(path_594380, query_594381, nil, nil, nil)

var webAppsGetConfiguration* = Call_WebAppsGetConfiguration_594371(
    name: "webAppsGetConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsGetConfiguration_594372, base: "",
    url: url_WebAppsGetConfiguration_594373, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfiguration_594395 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConfiguration_594397(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfiguration_594396(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594398 = path.getOrDefault("resourceGroupName")
  valid_594398 = validateParameter(valid_594398, JString, required = true,
                                 default = nil)
  if valid_594398 != nil:
    section.add "resourceGroupName", valid_594398
  var valid_594399 = path.getOrDefault("name")
  valid_594399 = validateParameter(valid_594399, JString, required = true,
                                 default = nil)
  if valid_594399 != nil:
    section.add "name", valid_594399
  var valid_594400 = path.getOrDefault("subscriptionId")
  valid_594400 = validateParameter(valid_594400, JString, required = true,
                                 default = nil)
  if valid_594400 != nil:
    section.add "subscriptionId", valid_594400
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594401 = query.getOrDefault("api-version")
  valid_594401 = validateParameter(valid_594401, JString, required = true,
                                 default = nil)
  if valid_594401 != nil:
    section.add "api-version", valid_594401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594403: Call_WebAppsUpdateConfiguration_594395; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_594403.validator(path, query, header, formData, body)
  let scheme = call_594403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594403.url(scheme.get, call_594403.host, call_594403.base,
                         call_594403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594403, url, valid)

proc call*(call_594404: Call_WebAppsUpdateConfiguration_594395;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594405 = newJObject()
  var query_594406 = newJObject()
  var body_594407 = newJObject()
  add(path_594405, "resourceGroupName", newJString(resourceGroupName))
  add(query_594406, "api-version", newJString(apiVersion))
  add(path_594405, "name", newJString(name))
  if siteConfig != nil:
    body_594407 = siteConfig
  add(path_594405, "subscriptionId", newJString(subscriptionId))
  result = call_594404.call(path_594405, query_594406, nil, nil, body_594407)

var webAppsUpdateConfiguration* = Call_WebAppsUpdateConfiguration_594395(
    name: "webAppsUpdateConfiguration", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsUpdateConfiguration_594396, base: "",
    url: url_WebAppsUpdateConfiguration_594397, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfo_594408 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurationSnapshotInfo_594410(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfo_594409(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594411 = path.getOrDefault("resourceGroupName")
  valid_594411 = validateParameter(valid_594411, JString, required = true,
                                 default = nil)
  if valid_594411 != nil:
    section.add "resourceGroupName", valid_594411
  var valid_594412 = path.getOrDefault("name")
  valid_594412 = validateParameter(valid_594412, JString, required = true,
                                 default = nil)
  if valid_594412 != nil:
    section.add "name", valid_594412
  var valid_594413 = path.getOrDefault("subscriptionId")
  valid_594413 = validateParameter(valid_594413, JString, required = true,
                                 default = nil)
  if valid_594413 != nil:
    section.add "subscriptionId", valid_594413
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594414 = query.getOrDefault("api-version")
  valid_594414 = validateParameter(valid_594414, JString, required = true,
                                 default = nil)
  if valid_594414 != nil:
    section.add "api-version", valid_594414
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594415: Call_WebAppsListConfigurationSnapshotInfo_594408;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_594415.validator(path, query, header, formData, body)
  let scheme = call_594415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594415.url(scheme.get, call_594415.host, call_594415.base,
                         call_594415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594415, url, valid)

proc call*(call_594416: Call_WebAppsListConfigurationSnapshotInfo_594408;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfo
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594417 = newJObject()
  var query_594418 = newJObject()
  add(path_594417, "resourceGroupName", newJString(resourceGroupName))
  add(query_594418, "api-version", newJString(apiVersion))
  add(path_594417, "name", newJString(name))
  add(path_594417, "subscriptionId", newJString(subscriptionId))
  result = call_594416.call(path_594417, query_594418, nil, nil, nil)

var webAppsListConfigurationSnapshotInfo* = Call_WebAppsListConfigurationSnapshotInfo_594408(
    name: "webAppsListConfigurationSnapshotInfo", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfo_594409, base: "",
    url: url_WebAppsListConfigurationSnapshotInfo_594410, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshot_594419 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfigurationSnapshot_594421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshot_594420(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594422 = path.getOrDefault("resourceGroupName")
  valid_594422 = validateParameter(valid_594422, JString, required = true,
                                 default = nil)
  if valid_594422 != nil:
    section.add "resourceGroupName", valid_594422
  var valid_594423 = path.getOrDefault("name")
  valid_594423 = validateParameter(valid_594423, JString, required = true,
                                 default = nil)
  if valid_594423 != nil:
    section.add "name", valid_594423
  var valid_594424 = path.getOrDefault("snapshotId")
  valid_594424 = validateParameter(valid_594424, JString, required = true,
                                 default = nil)
  if valid_594424 != nil:
    section.add "snapshotId", valid_594424
  var valid_594425 = path.getOrDefault("subscriptionId")
  valid_594425 = validateParameter(valid_594425, JString, required = true,
                                 default = nil)
  if valid_594425 != nil:
    section.add "subscriptionId", valid_594425
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594426 = query.getOrDefault("api-version")
  valid_594426 = validateParameter(valid_594426, JString, required = true,
                                 default = nil)
  if valid_594426 != nil:
    section.add "api-version", valid_594426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594427: Call_WebAppsGetConfigurationSnapshot_594419;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_594427.validator(path, query, header, formData, body)
  let scheme = call_594427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594427.url(scheme.get, call_594427.host, call_594427.base,
                         call_594427.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594427, url, valid)

proc call*(call_594428: Call_WebAppsGetConfigurationSnapshot_594419;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594429 = newJObject()
  var query_594430 = newJObject()
  add(path_594429, "resourceGroupName", newJString(resourceGroupName))
  add(query_594430, "api-version", newJString(apiVersion))
  add(path_594429, "name", newJString(name))
  add(path_594429, "snapshotId", newJString(snapshotId))
  add(path_594429, "subscriptionId", newJString(subscriptionId))
  result = call_594428.call(path_594429, query_594430, nil, nil, nil)

var webAppsGetConfigurationSnapshot* = Call_WebAppsGetConfigurationSnapshot_594419(
    name: "webAppsGetConfigurationSnapshot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshot_594420, base: "",
    url: url_WebAppsGetConfigurationSnapshot_594421, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshot_594431 = ref object of OpenApiRestCall_593437
proc url_WebAppsRecoverSiteConfigurationSnapshot_594433(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshot_594432(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594434 = path.getOrDefault("resourceGroupName")
  valid_594434 = validateParameter(valid_594434, JString, required = true,
                                 default = nil)
  if valid_594434 != nil:
    section.add "resourceGroupName", valid_594434
  var valid_594435 = path.getOrDefault("name")
  valid_594435 = validateParameter(valid_594435, JString, required = true,
                                 default = nil)
  if valid_594435 != nil:
    section.add "name", valid_594435
  var valid_594436 = path.getOrDefault("snapshotId")
  valid_594436 = validateParameter(valid_594436, JString, required = true,
                                 default = nil)
  if valid_594436 != nil:
    section.add "snapshotId", valid_594436
  var valid_594437 = path.getOrDefault("subscriptionId")
  valid_594437 = validateParameter(valid_594437, JString, required = true,
                                 default = nil)
  if valid_594437 != nil:
    section.add "subscriptionId", valid_594437
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594438 = query.getOrDefault("api-version")
  valid_594438 = validateParameter(valid_594438, JString, required = true,
                                 default = nil)
  if valid_594438 != nil:
    section.add "api-version", valid_594438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594439: Call_WebAppsRecoverSiteConfigurationSnapshot_594431;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_594439.validator(path, query, header, formData, body)
  let scheme = call_594439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594439.url(scheme.get, call_594439.host, call_594439.base,
                         call_594439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594439, url, valid)

proc call*(call_594440: Call_WebAppsRecoverSiteConfigurationSnapshot_594431;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594441 = newJObject()
  var query_594442 = newJObject()
  add(path_594441, "resourceGroupName", newJString(resourceGroupName))
  add(query_594442, "api-version", newJString(apiVersion))
  add(path_594441, "name", newJString(name))
  add(path_594441, "snapshotId", newJString(snapshotId))
  add(path_594441, "subscriptionId", newJString(subscriptionId))
  result = call_594440.call(path_594441, query_594442, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshot* = Call_WebAppsRecoverSiteConfigurationSnapshot_594431(
    name: "webAppsRecoverSiteConfigurationSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshot_594432, base: "",
    url: url_WebAppsRecoverSiteConfigurationSnapshot_594433,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogs_594443 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebSiteContainerLogs_594445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogs_594444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594446 = path.getOrDefault("resourceGroupName")
  valid_594446 = validateParameter(valid_594446, JString, required = true,
                                 default = nil)
  if valid_594446 != nil:
    section.add "resourceGroupName", valid_594446
  var valid_594447 = path.getOrDefault("name")
  valid_594447 = validateParameter(valid_594447, JString, required = true,
                                 default = nil)
  if valid_594447 != nil:
    section.add "name", valid_594447
  var valid_594448 = path.getOrDefault("subscriptionId")
  valid_594448 = validateParameter(valid_594448, JString, required = true,
                                 default = nil)
  if valid_594448 != nil:
    section.add "subscriptionId", valid_594448
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594449 = query.getOrDefault("api-version")
  valid_594449 = validateParameter(valid_594449, JString, required = true,
                                 default = nil)
  if valid_594449 != nil:
    section.add "api-version", valid_594449
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594450: Call_WebAppsGetWebSiteContainerLogs_594443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_594450.validator(path, query, header, formData, body)
  let scheme = call_594450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594450.url(scheme.get, call_594450.host, call_594450.base,
                         call_594450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594450, url, valid)

proc call*(call_594451: Call_WebAppsGetWebSiteContainerLogs_594443;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogs
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594452 = newJObject()
  var query_594453 = newJObject()
  add(path_594452, "resourceGroupName", newJString(resourceGroupName))
  add(query_594453, "api-version", newJString(apiVersion))
  add(path_594452, "name", newJString(name))
  add(path_594452, "subscriptionId", newJString(subscriptionId))
  result = call_594451.call(path_594452, query_594453, nil, nil, nil)

var webAppsGetWebSiteContainerLogs* = Call_WebAppsGetWebSiteContainerLogs_594443(
    name: "webAppsGetWebSiteContainerLogs", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogs_594444, base: "",
    url: url_WebAppsGetWebSiteContainerLogs_594445, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsZip_594454 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebSiteContainerLogsZip_594456(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsZip_594455(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594457 = path.getOrDefault("resourceGroupName")
  valid_594457 = validateParameter(valid_594457, JString, required = true,
                                 default = nil)
  if valid_594457 != nil:
    section.add "resourceGroupName", valid_594457
  var valid_594458 = path.getOrDefault("name")
  valid_594458 = validateParameter(valid_594458, JString, required = true,
                                 default = nil)
  if valid_594458 != nil:
    section.add "name", valid_594458
  var valid_594459 = path.getOrDefault("subscriptionId")
  valid_594459 = validateParameter(valid_594459, JString, required = true,
                                 default = nil)
  if valid_594459 != nil:
    section.add "subscriptionId", valid_594459
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594460 = query.getOrDefault("api-version")
  valid_594460 = validateParameter(valid_594460, JString, required = true,
                                 default = nil)
  if valid_594460 != nil:
    section.add "api-version", valid_594460
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594461: Call_WebAppsGetWebSiteContainerLogsZip_594454;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_594461.validator(path, query, header, formData, body)
  let scheme = call_594461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594461.url(scheme.get, call_594461.host, call_594461.base,
                         call_594461.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594461, url, valid)

proc call*(call_594462: Call_WebAppsGetWebSiteContainerLogsZip_594454;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsZip
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594463 = newJObject()
  var query_594464 = newJObject()
  add(path_594463, "resourceGroupName", newJString(resourceGroupName))
  add(query_594464, "api-version", newJString(apiVersion))
  add(path_594463, "name", newJString(name))
  add(path_594463, "subscriptionId", newJString(subscriptionId))
  result = call_594462.call(path_594463, query_594464, nil, nil, nil)

var webAppsGetWebSiteContainerLogsZip* = Call_WebAppsGetWebSiteContainerLogsZip_594454(
    name: "webAppsGetWebSiteContainerLogsZip", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    validator: validate_WebAppsGetWebSiteContainerLogsZip_594455, base: "",
    url: url_WebAppsGetWebSiteContainerLogsZip_594456, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobs_594465 = ref object of OpenApiRestCall_593437
proc url_WebAppsListContinuousWebJobs_594467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobs_594466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594468 = path.getOrDefault("resourceGroupName")
  valid_594468 = validateParameter(valid_594468, JString, required = true,
                                 default = nil)
  if valid_594468 != nil:
    section.add "resourceGroupName", valid_594468
  var valid_594469 = path.getOrDefault("name")
  valid_594469 = validateParameter(valid_594469, JString, required = true,
                                 default = nil)
  if valid_594469 != nil:
    section.add "name", valid_594469
  var valid_594470 = path.getOrDefault("subscriptionId")
  valid_594470 = validateParameter(valid_594470, JString, required = true,
                                 default = nil)
  if valid_594470 != nil:
    section.add "subscriptionId", valid_594470
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594471 = query.getOrDefault("api-version")
  valid_594471 = validateParameter(valid_594471, JString, required = true,
                                 default = nil)
  if valid_594471 != nil:
    section.add "api-version", valid_594471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594472: Call_WebAppsListContinuousWebJobs_594465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_594472.validator(path, query, header, formData, body)
  let scheme = call_594472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594472.url(scheme.get, call_594472.host, call_594472.base,
                         call_594472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594472, url, valid)

proc call*(call_594473: Call_WebAppsListContinuousWebJobs_594465;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobs
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594474 = newJObject()
  var query_594475 = newJObject()
  add(path_594474, "resourceGroupName", newJString(resourceGroupName))
  add(query_594475, "api-version", newJString(apiVersion))
  add(path_594474, "name", newJString(name))
  add(path_594474, "subscriptionId", newJString(subscriptionId))
  result = call_594473.call(path_594474, query_594475, nil, nil, nil)

var webAppsListContinuousWebJobs* = Call_WebAppsListContinuousWebJobs_594465(
    name: "webAppsListContinuousWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobs_594466, base: "",
    url: url_WebAppsListContinuousWebJobs_594467, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJob_594476 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetContinuousWebJob_594478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJob_594477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594479 = path.getOrDefault("resourceGroupName")
  valid_594479 = validateParameter(valid_594479, JString, required = true,
                                 default = nil)
  if valid_594479 != nil:
    section.add "resourceGroupName", valid_594479
  var valid_594480 = path.getOrDefault("name")
  valid_594480 = validateParameter(valid_594480, JString, required = true,
                                 default = nil)
  if valid_594480 != nil:
    section.add "name", valid_594480
  var valid_594481 = path.getOrDefault("subscriptionId")
  valid_594481 = validateParameter(valid_594481, JString, required = true,
                                 default = nil)
  if valid_594481 != nil:
    section.add "subscriptionId", valid_594481
  var valid_594482 = path.getOrDefault("webJobName")
  valid_594482 = validateParameter(valid_594482, JString, required = true,
                                 default = nil)
  if valid_594482 != nil:
    section.add "webJobName", valid_594482
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594483 = query.getOrDefault("api-version")
  valid_594483 = validateParameter(valid_594483, JString, required = true,
                                 default = nil)
  if valid_594483 != nil:
    section.add "api-version", valid_594483
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594484: Call_WebAppsGetContinuousWebJob_594476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594484.validator(path, query, header, formData, body)
  let scheme = call_594484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594484.url(scheme.get, call_594484.host, call_594484.base,
                         call_594484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594484, url, valid)

proc call*(call_594485: Call_WebAppsGetContinuousWebJob_594476;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJob
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594486 = newJObject()
  var query_594487 = newJObject()
  add(path_594486, "resourceGroupName", newJString(resourceGroupName))
  add(query_594487, "api-version", newJString(apiVersion))
  add(path_594486, "name", newJString(name))
  add(path_594486, "subscriptionId", newJString(subscriptionId))
  add(path_594486, "webJobName", newJString(webJobName))
  result = call_594485.call(path_594486, query_594487, nil, nil, nil)

var webAppsGetContinuousWebJob* = Call_WebAppsGetContinuousWebJob_594476(
    name: "webAppsGetContinuousWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJob_594477, base: "",
    url: url_WebAppsGetContinuousWebJob_594478, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJob_594488 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteContinuousWebJob_594490(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJob_594489(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594491 = path.getOrDefault("resourceGroupName")
  valid_594491 = validateParameter(valid_594491, JString, required = true,
                                 default = nil)
  if valid_594491 != nil:
    section.add "resourceGroupName", valid_594491
  var valid_594492 = path.getOrDefault("name")
  valid_594492 = validateParameter(valid_594492, JString, required = true,
                                 default = nil)
  if valid_594492 != nil:
    section.add "name", valid_594492
  var valid_594493 = path.getOrDefault("subscriptionId")
  valid_594493 = validateParameter(valid_594493, JString, required = true,
                                 default = nil)
  if valid_594493 != nil:
    section.add "subscriptionId", valid_594493
  var valid_594494 = path.getOrDefault("webJobName")
  valid_594494 = validateParameter(valid_594494, JString, required = true,
                                 default = nil)
  if valid_594494 != nil:
    section.add "webJobName", valid_594494
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594495 = query.getOrDefault("api-version")
  valid_594495 = validateParameter(valid_594495, JString, required = true,
                                 default = nil)
  if valid_594495 != nil:
    section.add "api-version", valid_594495
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594496: Call_WebAppsDeleteContinuousWebJob_594488; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594496.validator(path, query, header, formData, body)
  let scheme = call_594496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594496.url(scheme.get, call_594496.host, call_594496.base,
                         call_594496.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594496, url, valid)

proc call*(call_594497: Call_WebAppsDeleteContinuousWebJob_594488;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJob
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594498 = newJObject()
  var query_594499 = newJObject()
  add(path_594498, "resourceGroupName", newJString(resourceGroupName))
  add(query_594499, "api-version", newJString(apiVersion))
  add(path_594498, "name", newJString(name))
  add(path_594498, "subscriptionId", newJString(subscriptionId))
  add(path_594498, "webJobName", newJString(webJobName))
  result = call_594497.call(path_594498, query_594499, nil, nil, nil)

var webAppsDeleteContinuousWebJob* = Call_WebAppsDeleteContinuousWebJob_594488(
    name: "webAppsDeleteContinuousWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJob_594489, base: "",
    url: url_WebAppsDeleteContinuousWebJob_594490, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJob_594500 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartContinuousWebJob_594502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJob_594501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594503 = path.getOrDefault("resourceGroupName")
  valid_594503 = validateParameter(valid_594503, JString, required = true,
                                 default = nil)
  if valid_594503 != nil:
    section.add "resourceGroupName", valid_594503
  var valid_594504 = path.getOrDefault("name")
  valid_594504 = validateParameter(valid_594504, JString, required = true,
                                 default = nil)
  if valid_594504 != nil:
    section.add "name", valid_594504
  var valid_594505 = path.getOrDefault("subscriptionId")
  valid_594505 = validateParameter(valid_594505, JString, required = true,
                                 default = nil)
  if valid_594505 != nil:
    section.add "subscriptionId", valid_594505
  var valid_594506 = path.getOrDefault("webJobName")
  valid_594506 = validateParameter(valid_594506, JString, required = true,
                                 default = nil)
  if valid_594506 != nil:
    section.add "webJobName", valid_594506
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594507 = query.getOrDefault("api-version")
  valid_594507 = validateParameter(valid_594507, JString, required = true,
                                 default = nil)
  if valid_594507 != nil:
    section.add "api-version", valid_594507
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594508: Call_WebAppsStartContinuousWebJob_594500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_594508.validator(path, query, header, formData, body)
  let scheme = call_594508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594508.url(scheme.get, call_594508.host, call_594508.base,
                         call_594508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594508, url, valid)

proc call*(call_594509: Call_WebAppsStartContinuousWebJob_594500;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJob
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594510 = newJObject()
  var query_594511 = newJObject()
  add(path_594510, "resourceGroupName", newJString(resourceGroupName))
  add(query_594511, "api-version", newJString(apiVersion))
  add(path_594510, "name", newJString(name))
  add(path_594510, "subscriptionId", newJString(subscriptionId))
  add(path_594510, "webJobName", newJString(webJobName))
  result = call_594509.call(path_594510, query_594511, nil, nil, nil)

var webAppsStartContinuousWebJob* = Call_WebAppsStartContinuousWebJob_594500(
    name: "webAppsStartContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJob_594501, base: "",
    url: url_WebAppsStartContinuousWebJob_594502, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJob_594512 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopContinuousWebJob_594514(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJob_594513(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594515 = path.getOrDefault("resourceGroupName")
  valid_594515 = validateParameter(valid_594515, JString, required = true,
                                 default = nil)
  if valid_594515 != nil:
    section.add "resourceGroupName", valid_594515
  var valid_594516 = path.getOrDefault("name")
  valid_594516 = validateParameter(valid_594516, JString, required = true,
                                 default = nil)
  if valid_594516 != nil:
    section.add "name", valid_594516
  var valid_594517 = path.getOrDefault("subscriptionId")
  valid_594517 = validateParameter(valid_594517, JString, required = true,
                                 default = nil)
  if valid_594517 != nil:
    section.add "subscriptionId", valid_594517
  var valid_594518 = path.getOrDefault("webJobName")
  valid_594518 = validateParameter(valid_594518, JString, required = true,
                                 default = nil)
  if valid_594518 != nil:
    section.add "webJobName", valid_594518
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594519 = query.getOrDefault("api-version")
  valid_594519 = validateParameter(valid_594519, JString, required = true,
                                 default = nil)
  if valid_594519 != nil:
    section.add "api-version", valid_594519
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594520: Call_WebAppsStopContinuousWebJob_594512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_594520.validator(path, query, header, formData, body)
  let scheme = call_594520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594520.url(scheme.get, call_594520.host, call_594520.base,
                         call_594520.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594520, url, valid)

proc call*(call_594521: Call_WebAppsStopContinuousWebJob_594512;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJob
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_594522 = newJObject()
  var query_594523 = newJObject()
  add(path_594522, "resourceGroupName", newJString(resourceGroupName))
  add(query_594523, "api-version", newJString(apiVersion))
  add(path_594522, "name", newJString(name))
  add(path_594522, "subscriptionId", newJString(subscriptionId))
  add(path_594522, "webJobName", newJString(webJobName))
  result = call_594521.call(path_594522, query_594523, nil, nil, nil)

var webAppsStopContinuousWebJob* = Call_WebAppsStopContinuousWebJob_594512(
    name: "webAppsStopContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJob_594513, base: "",
    url: url_WebAppsStopContinuousWebJob_594514, schemes: {Scheme.Https})
type
  Call_WebAppsListDeployments_594524 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeployments_594526(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeployments_594525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594527 = path.getOrDefault("resourceGroupName")
  valid_594527 = validateParameter(valid_594527, JString, required = true,
                                 default = nil)
  if valid_594527 != nil:
    section.add "resourceGroupName", valid_594527
  var valid_594528 = path.getOrDefault("name")
  valid_594528 = validateParameter(valid_594528, JString, required = true,
                                 default = nil)
  if valid_594528 != nil:
    section.add "name", valid_594528
  var valid_594529 = path.getOrDefault("subscriptionId")
  valid_594529 = validateParameter(valid_594529, JString, required = true,
                                 default = nil)
  if valid_594529 != nil:
    section.add "subscriptionId", valid_594529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594530 = query.getOrDefault("api-version")
  valid_594530 = validateParameter(valid_594530, JString, required = true,
                                 default = nil)
  if valid_594530 != nil:
    section.add "api-version", valid_594530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594531: Call_WebAppsListDeployments_594524; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_594531.validator(path, query, header, formData, body)
  let scheme = call_594531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594531.url(scheme.get, call_594531.host, call_594531.base,
                         call_594531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594531, url, valid)

proc call*(call_594532: Call_WebAppsListDeployments_594524;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeployments
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594533 = newJObject()
  var query_594534 = newJObject()
  add(path_594533, "resourceGroupName", newJString(resourceGroupName))
  add(query_594534, "api-version", newJString(apiVersion))
  add(path_594533, "name", newJString(name))
  add(path_594533, "subscriptionId", newJString(subscriptionId))
  result = call_594532.call(path_594533, query_594534, nil, nil, nil)

var webAppsListDeployments* = Call_WebAppsListDeployments_594524(
    name: "webAppsListDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_WebAppsListDeployments_594525, base: "",
    url: url_WebAppsListDeployments_594526, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeployment_594547 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateDeployment_594549(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeployment_594548(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594550 = path.getOrDefault("resourceGroupName")
  valid_594550 = validateParameter(valid_594550, JString, required = true,
                                 default = nil)
  if valid_594550 != nil:
    section.add "resourceGroupName", valid_594550
  var valid_594551 = path.getOrDefault("name")
  valid_594551 = validateParameter(valid_594551, JString, required = true,
                                 default = nil)
  if valid_594551 != nil:
    section.add "name", valid_594551
  var valid_594552 = path.getOrDefault("subscriptionId")
  valid_594552 = validateParameter(valid_594552, JString, required = true,
                                 default = nil)
  if valid_594552 != nil:
    section.add "subscriptionId", valid_594552
  var valid_594553 = path.getOrDefault("id")
  valid_594553 = validateParameter(valid_594553, JString, required = true,
                                 default = nil)
  if valid_594553 != nil:
    section.add "id", valid_594553
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594554 = query.getOrDefault("api-version")
  valid_594554 = validateParameter(valid_594554, JString, required = true,
                                 default = nil)
  if valid_594554 != nil:
    section.add "api-version", valid_594554
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594556: Call_WebAppsCreateDeployment_594547; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_594556.validator(path, query, header, formData, body)
  let scheme = call_594556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594556.url(scheme.get, call_594556.host, call_594556.base,
                         call_594556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594556, url, valid)

proc call*(call_594557: Call_WebAppsCreateDeployment_594547;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeployment
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_594558 = newJObject()
  var query_594559 = newJObject()
  var body_594560 = newJObject()
  add(path_594558, "resourceGroupName", newJString(resourceGroupName))
  add(query_594559, "api-version", newJString(apiVersion))
  add(path_594558, "name", newJString(name))
  add(path_594558, "subscriptionId", newJString(subscriptionId))
  add(path_594558, "id", newJString(id))
  if deployment != nil:
    body_594560 = deployment
  result = call_594557.call(path_594558, query_594559, nil, nil, body_594560)

var webAppsCreateDeployment* = Call_WebAppsCreateDeployment_594547(
    name: "webAppsCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsCreateDeployment_594548, base: "",
    url: url_WebAppsCreateDeployment_594549, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeployment_594535 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDeployment_594537(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeployment_594536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594538 = path.getOrDefault("resourceGroupName")
  valid_594538 = validateParameter(valid_594538, JString, required = true,
                                 default = nil)
  if valid_594538 != nil:
    section.add "resourceGroupName", valid_594538
  var valid_594539 = path.getOrDefault("name")
  valid_594539 = validateParameter(valid_594539, JString, required = true,
                                 default = nil)
  if valid_594539 != nil:
    section.add "name", valid_594539
  var valid_594540 = path.getOrDefault("subscriptionId")
  valid_594540 = validateParameter(valid_594540, JString, required = true,
                                 default = nil)
  if valid_594540 != nil:
    section.add "subscriptionId", valid_594540
  var valid_594541 = path.getOrDefault("id")
  valid_594541 = validateParameter(valid_594541, JString, required = true,
                                 default = nil)
  if valid_594541 != nil:
    section.add "id", valid_594541
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594542 = query.getOrDefault("api-version")
  valid_594542 = validateParameter(valid_594542, JString, required = true,
                                 default = nil)
  if valid_594542 != nil:
    section.add "api-version", valid_594542
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594543: Call_WebAppsGetDeployment_594535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594543.validator(path, query, header, formData, body)
  let scheme = call_594543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594543.url(scheme.get, call_594543.host, call_594543.base,
                         call_594543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594543, url, valid)

proc call*(call_594544: Call_WebAppsGetDeployment_594535;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeployment
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_594545 = newJObject()
  var query_594546 = newJObject()
  add(path_594545, "resourceGroupName", newJString(resourceGroupName))
  add(query_594546, "api-version", newJString(apiVersion))
  add(path_594545, "name", newJString(name))
  add(path_594545, "subscriptionId", newJString(subscriptionId))
  add(path_594545, "id", newJString(id))
  result = call_594544.call(path_594545, query_594546, nil, nil, nil)

var webAppsGetDeployment* = Call_WebAppsGetDeployment_594535(
    name: "webAppsGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsGetDeployment_594536, base: "",
    url: url_WebAppsGetDeployment_594537, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeployment_594561 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDeployment_594563(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeployment_594562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594564 = path.getOrDefault("resourceGroupName")
  valid_594564 = validateParameter(valid_594564, JString, required = true,
                                 default = nil)
  if valid_594564 != nil:
    section.add "resourceGroupName", valid_594564
  var valid_594565 = path.getOrDefault("name")
  valid_594565 = validateParameter(valid_594565, JString, required = true,
                                 default = nil)
  if valid_594565 != nil:
    section.add "name", valid_594565
  var valid_594566 = path.getOrDefault("subscriptionId")
  valid_594566 = validateParameter(valid_594566, JString, required = true,
                                 default = nil)
  if valid_594566 != nil:
    section.add "subscriptionId", valid_594566
  var valid_594567 = path.getOrDefault("id")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = nil)
  if valid_594567 != nil:
    section.add "id", valid_594567
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594568 = query.getOrDefault("api-version")
  valid_594568 = validateParameter(valid_594568, JString, required = true,
                                 default = nil)
  if valid_594568 != nil:
    section.add "api-version", valid_594568
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594569: Call_WebAppsDeleteDeployment_594561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_594569.validator(path, query, header, formData, body)
  let scheme = call_594569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594569.url(scheme.get, call_594569.host, call_594569.base,
                         call_594569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594569, url, valid)

proc call*(call_594570: Call_WebAppsDeleteDeployment_594561;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeployment
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_594571 = newJObject()
  var query_594572 = newJObject()
  add(path_594571, "resourceGroupName", newJString(resourceGroupName))
  add(query_594572, "api-version", newJString(apiVersion))
  add(path_594571, "name", newJString(name))
  add(path_594571, "subscriptionId", newJString(subscriptionId))
  add(path_594571, "id", newJString(id))
  result = call_594570.call(path_594571, query_594572, nil, nil, nil)

var webAppsDeleteDeployment* = Call_WebAppsDeleteDeployment_594561(
    name: "webAppsDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsDeleteDeployment_594562, base: "",
    url: url_WebAppsDeleteDeployment_594563, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLog_594573 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeploymentLog_594575(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLog_594574(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594576 = path.getOrDefault("resourceGroupName")
  valid_594576 = validateParameter(valid_594576, JString, required = true,
                                 default = nil)
  if valid_594576 != nil:
    section.add "resourceGroupName", valid_594576
  var valid_594577 = path.getOrDefault("name")
  valid_594577 = validateParameter(valid_594577, JString, required = true,
                                 default = nil)
  if valid_594577 != nil:
    section.add "name", valid_594577
  var valid_594578 = path.getOrDefault("subscriptionId")
  valid_594578 = validateParameter(valid_594578, JString, required = true,
                                 default = nil)
  if valid_594578 != nil:
    section.add "subscriptionId", valid_594578
  var valid_594579 = path.getOrDefault("id")
  valid_594579 = validateParameter(valid_594579, JString, required = true,
                                 default = nil)
  if valid_594579 != nil:
    section.add "id", valid_594579
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594580 = query.getOrDefault("api-version")
  valid_594580 = validateParameter(valid_594580, JString, required = true,
                                 default = nil)
  if valid_594580 != nil:
    section.add "api-version", valid_594580
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594581: Call_WebAppsListDeploymentLog_594573; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_594581.validator(path, query, header, formData, body)
  let scheme = call_594581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594581.url(scheme.get, call_594581.host, call_594581.base,
                         call_594581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594581, url, valid)

proc call*(call_594582: Call_WebAppsListDeploymentLog_594573;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLog
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_594583 = newJObject()
  var query_594584 = newJObject()
  add(path_594583, "resourceGroupName", newJString(resourceGroupName))
  add(query_594584, "api-version", newJString(apiVersion))
  add(path_594583, "name", newJString(name))
  add(path_594583, "subscriptionId", newJString(subscriptionId))
  add(path_594583, "id", newJString(id))
  result = call_594582.call(path_594583, query_594584, nil, nil, nil)

var webAppsListDeploymentLog* = Call_WebAppsListDeploymentLog_594573(
    name: "webAppsListDeploymentLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLog_594574, base: "",
    url: url_WebAppsListDeploymentLog_594575, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiers_594585 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDomainOwnershipIdentifiers_594587(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiers_594586(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594588 = path.getOrDefault("resourceGroupName")
  valid_594588 = validateParameter(valid_594588, JString, required = true,
                                 default = nil)
  if valid_594588 != nil:
    section.add "resourceGroupName", valid_594588
  var valid_594589 = path.getOrDefault("name")
  valid_594589 = validateParameter(valid_594589, JString, required = true,
                                 default = nil)
  if valid_594589 != nil:
    section.add "name", valid_594589
  var valid_594590 = path.getOrDefault("subscriptionId")
  valid_594590 = validateParameter(valid_594590, JString, required = true,
                                 default = nil)
  if valid_594590 != nil:
    section.add "subscriptionId", valid_594590
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594591 = query.getOrDefault("api-version")
  valid_594591 = validateParameter(valid_594591, JString, required = true,
                                 default = nil)
  if valid_594591 != nil:
    section.add "api-version", valid_594591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594592: Call_WebAppsListDomainOwnershipIdentifiers_594585;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_594592.validator(path, query, header, formData, body)
  let scheme = call_594592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594592.url(scheme.get, call_594592.host, call_594592.base,
                         call_594592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594592, url, valid)

proc call*(call_594593: Call_WebAppsListDomainOwnershipIdentifiers_594585;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiers
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594594 = newJObject()
  var query_594595 = newJObject()
  add(path_594594, "resourceGroupName", newJString(resourceGroupName))
  add(query_594595, "api-version", newJString(apiVersion))
  add(path_594594, "name", newJString(name))
  add(path_594594, "subscriptionId", newJString(subscriptionId))
  result = call_594593.call(path_594594, query_594595, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiers* = Call_WebAppsListDomainOwnershipIdentifiers_594585(
    name: "webAppsListDomainOwnershipIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiers_594586, base: "",
    url: url_WebAppsListDomainOwnershipIdentifiers_594587, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594608 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594610(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594609(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594611 = path.getOrDefault("resourceGroupName")
  valid_594611 = validateParameter(valid_594611, JString, required = true,
                                 default = nil)
  if valid_594611 != nil:
    section.add "resourceGroupName", valid_594611
  var valid_594612 = path.getOrDefault("name")
  valid_594612 = validateParameter(valid_594612, JString, required = true,
                                 default = nil)
  if valid_594612 != nil:
    section.add "name", valid_594612
  var valid_594613 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594613 = validateParameter(valid_594613, JString, required = true,
                                 default = nil)
  if valid_594613 != nil:
    section.add "domainOwnershipIdentifierName", valid_594613
  var valid_594614 = path.getOrDefault("subscriptionId")
  valid_594614 = validateParameter(valid_594614, JString, required = true,
                                 default = nil)
  if valid_594614 != nil:
    section.add "subscriptionId", valid_594614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594615 = query.getOrDefault("api-version")
  valid_594615 = validateParameter(valid_594615, JString, required = true,
                                 default = nil)
  if valid_594615 != nil:
    section.add "api-version", valid_594615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594617: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594608;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_594617.validator(path, query, header, formData, body)
  let scheme = call_594617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594617.url(scheme.get, call_594617.host, call_594617.base,
                         call_594617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594617, url, valid)

proc call*(call_594618: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594608;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594619 = newJObject()
  var query_594620 = newJObject()
  var body_594621 = newJObject()
  add(path_594619, "resourceGroupName", newJString(resourceGroupName))
  add(query_594620, "api-version", newJString(apiVersion))
  add(path_594619, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_594621 = domainOwnershipIdentifier
  add(path_594619, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594619, "subscriptionId", newJString(subscriptionId))
  result = call_594618.call(path_594619, query_594620, nil, nil, body_594621)

var webAppsCreateOrUpdateDomainOwnershipIdentifier* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594608(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifier",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594609,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_594610,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifier_594596 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDomainOwnershipIdentifier_594598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifier_594597(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594599 = path.getOrDefault("resourceGroupName")
  valid_594599 = validateParameter(valid_594599, JString, required = true,
                                 default = nil)
  if valid_594599 != nil:
    section.add "resourceGroupName", valid_594599
  var valid_594600 = path.getOrDefault("name")
  valid_594600 = validateParameter(valid_594600, JString, required = true,
                                 default = nil)
  if valid_594600 != nil:
    section.add "name", valid_594600
  var valid_594601 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594601 = validateParameter(valid_594601, JString, required = true,
                                 default = nil)
  if valid_594601 != nil:
    section.add "domainOwnershipIdentifierName", valid_594601
  var valid_594602 = path.getOrDefault("subscriptionId")
  valid_594602 = validateParameter(valid_594602, JString, required = true,
                                 default = nil)
  if valid_594602 != nil:
    section.add "subscriptionId", valid_594602
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594603 = query.getOrDefault("api-version")
  valid_594603 = validateParameter(valid_594603, JString, required = true,
                                 default = nil)
  if valid_594603 != nil:
    section.add "api-version", valid_594603
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594604: Call_WebAppsGetDomainOwnershipIdentifier_594596;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_594604.validator(path, query, header, formData, body)
  let scheme = call_594604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594604.url(scheme.get, call_594604.host, call_594604.base,
                         call_594604.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594604, url, valid)

proc call*(call_594605: Call_WebAppsGetDomainOwnershipIdentifier_594596;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifier
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594606 = newJObject()
  var query_594607 = newJObject()
  add(path_594606, "resourceGroupName", newJString(resourceGroupName))
  add(query_594607, "api-version", newJString(apiVersion))
  add(path_594606, "name", newJString(name))
  add(path_594606, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594606, "subscriptionId", newJString(subscriptionId))
  result = call_594605.call(path_594606, query_594607, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifier* = Call_WebAppsGetDomainOwnershipIdentifier_594596(
    name: "webAppsGetDomainOwnershipIdentifier", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifier_594597, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifier_594598, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifier_594634 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDomainOwnershipIdentifier_594636(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifier_594635(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594637 = path.getOrDefault("resourceGroupName")
  valid_594637 = validateParameter(valid_594637, JString, required = true,
                                 default = nil)
  if valid_594637 != nil:
    section.add "resourceGroupName", valid_594637
  var valid_594638 = path.getOrDefault("name")
  valid_594638 = validateParameter(valid_594638, JString, required = true,
                                 default = nil)
  if valid_594638 != nil:
    section.add "name", valid_594638
  var valid_594639 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594639 = validateParameter(valid_594639, JString, required = true,
                                 default = nil)
  if valid_594639 != nil:
    section.add "domainOwnershipIdentifierName", valid_594639
  var valid_594640 = path.getOrDefault("subscriptionId")
  valid_594640 = validateParameter(valid_594640, JString, required = true,
                                 default = nil)
  if valid_594640 != nil:
    section.add "subscriptionId", valid_594640
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594641 = query.getOrDefault("api-version")
  valid_594641 = validateParameter(valid_594641, JString, required = true,
                                 default = nil)
  if valid_594641 != nil:
    section.add "api-version", valid_594641
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594643: Call_WebAppsUpdateDomainOwnershipIdentifier_594634;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_594643.validator(path, query, header, formData, body)
  let scheme = call_594643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594643.url(scheme.get, call_594643.host, call_594643.base,
                         call_594643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594643, url, valid)

proc call*(call_594644: Call_WebAppsUpdateDomainOwnershipIdentifier_594634;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594645 = newJObject()
  var query_594646 = newJObject()
  var body_594647 = newJObject()
  add(path_594645, "resourceGroupName", newJString(resourceGroupName))
  add(query_594646, "api-version", newJString(apiVersion))
  add(path_594645, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_594647 = domainOwnershipIdentifier
  add(path_594645, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594645, "subscriptionId", newJString(subscriptionId))
  result = call_594644.call(path_594645, query_594646, nil, nil, body_594647)

var webAppsUpdateDomainOwnershipIdentifier* = Call_WebAppsUpdateDomainOwnershipIdentifier_594634(
    name: "webAppsUpdateDomainOwnershipIdentifier", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifier_594635, base: "",
    url: url_WebAppsUpdateDomainOwnershipIdentifier_594636,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifier_594622 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDomainOwnershipIdentifier_594624(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifier_594623(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594625 = path.getOrDefault("resourceGroupName")
  valid_594625 = validateParameter(valid_594625, JString, required = true,
                                 default = nil)
  if valid_594625 != nil:
    section.add "resourceGroupName", valid_594625
  var valid_594626 = path.getOrDefault("name")
  valid_594626 = validateParameter(valid_594626, JString, required = true,
                                 default = nil)
  if valid_594626 != nil:
    section.add "name", valid_594626
  var valid_594627 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_594627 = validateParameter(valid_594627, JString, required = true,
                                 default = nil)
  if valid_594627 != nil:
    section.add "domainOwnershipIdentifierName", valid_594627
  var valid_594628 = path.getOrDefault("subscriptionId")
  valid_594628 = validateParameter(valid_594628, JString, required = true,
                                 default = nil)
  if valid_594628 != nil:
    section.add "subscriptionId", valid_594628
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594629 = query.getOrDefault("api-version")
  valid_594629 = validateParameter(valid_594629, JString, required = true,
                                 default = nil)
  if valid_594629 != nil:
    section.add "api-version", valid_594629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594630: Call_WebAppsDeleteDomainOwnershipIdentifier_594622;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_594630.validator(path, query, header, formData, body)
  let scheme = call_594630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594630.url(scheme.get, call_594630.host, call_594630.base,
                         call_594630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594630, url, valid)

proc call*(call_594631: Call_WebAppsDeleteDomainOwnershipIdentifier_594622;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifier
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594632 = newJObject()
  var query_594633 = newJObject()
  add(path_594632, "resourceGroupName", newJString(resourceGroupName))
  add(query_594633, "api-version", newJString(apiVersion))
  add(path_594632, "name", newJString(name))
  add(path_594632, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_594632, "subscriptionId", newJString(subscriptionId))
  result = call_594631.call(path_594632, query_594633, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifier* = Call_WebAppsDeleteDomainOwnershipIdentifier_594622(
    name: "webAppsDeleteDomainOwnershipIdentifier", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifier_594623, base: "",
    url: url_WebAppsDeleteDomainOwnershipIdentifier_594624,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperation_594659 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateMSDeployOperation_594661(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperation_594660(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594662 = path.getOrDefault("resourceGroupName")
  valid_594662 = validateParameter(valid_594662, JString, required = true,
                                 default = nil)
  if valid_594662 != nil:
    section.add "resourceGroupName", valid_594662
  var valid_594663 = path.getOrDefault("name")
  valid_594663 = validateParameter(valid_594663, JString, required = true,
                                 default = nil)
  if valid_594663 != nil:
    section.add "name", valid_594663
  var valid_594664 = path.getOrDefault("subscriptionId")
  valid_594664 = validateParameter(valid_594664, JString, required = true,
                                 default = nil)
  if valid_594664 != nil:
    section.add "subscriptionId", valid_594664
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594665 = query.getOrDefault("api-version")
  valid_594665 = validateParameter(valid_594665, JString, required = true,
                                 default = nil)
  if valid_594665 != nil:
    section.add "api-version", valid_594665
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594667: Call_WebAppsCreateMSDeployOperation_594659; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_594667.validator(path, query, header, formData, body)
  let scheme = call_594667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594667.url(scheme.get, call_594667.host, call_594667.base,
                         call_594667.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594667, url, valid)

proc call*(call_594668: Call_WebAppsCreateMSDeployOperation_594659;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_594669 = newJObject()
  var query_594670 = newJObject()
  var body_594671 = newJObject()
  add(path_594669, "resourceGroupName", newJString(resourceGroupName))
  add(query_594670, "api-version", newJString(apiVersion))
  add(path_594669, "name", newJString(name))
  add(path_594669, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_594671 = MSDeploy
  result = call_594668.call(path_594669, query_594670, nil, nil, body_594671)

var webAppsCreateMSDeployOperation* = Call_WebAppsCreateMSDeployOperation_594659(
    name: "webAppsCreateMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperation_594660, base: "",
    url: url_WebAppsCreateMSDeployOperation_594661, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatus_594648 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployStatus_594650(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatus_594649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594651 = path.getOrDefault("resourceGroupName")
  valid_594651 = validateParameter(valid_594651, JString, required = true,
                                 default = nil)
  if valid_594651 != nil:
    section.add "resourceGroupName", valid_594651
  var valid_594652 = path.getOrDefault("name")
  valid_594652 = validateParameter(valid_594652, JString, required = true,
                                 default = nil)
  if valid_594652 != nil:
    section.add "name", valid_594652
  var valid_594653 = path.getOrDefault("subscriptionId")
  valid_594653 = validateParameter(valid_594653, JString, required = true,
                                 default = nil)
  if valid_594653 != nil:
    section.add "subscriptionId", valid_594653
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594654 = query.getOrDefault("api-version")
  valid_594654 = validateParameter(valid_594654, JString, required = true,
                                 default = nil)
  if valid_594654 != nil:
    section.add "api-version", valid_594654
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594655: Call_WebAppsGetMSDeployStatus_594648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_594655.validator(path, query, header, formData, body)
  let scheme = call_594655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594655.url(scheme.get, call_594655.host, call_594655.base,
                         call_594655.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594655, url, valid)

proc call*(call_594656: Call_WebAppsGetMSDeployStatus_594648;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594657 = newJObject()
  var query_594658 = newJObject()
  add(path_594657, "resourceGroupName", newJString(resourceGroupName))
  add(query_594658, "api-version", newJString(apiVersion))
  add(path_594657, "name", newJString(name))
  add(path_594657, "subscriptionId", newJString(subscriptionId))
  result = call_594656.call(path_594657, query_594658, nil, nil, nil)

var webAppsGetMSDeployStatus* = Call_WebAppsGetMSDeployStatus_594648(
    name: "webAppsGetMSDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatus_594649, base: "",
    url: url_WebAppsGetMSDeployStatus_594650, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLog_594672 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployLog_594674(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLog_594673(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594675 = path.getOrDefault("resourceGroupName")
  valid_594675 = validateParameter(valid_594675, JString, required = true,
                                 default = nil)
  if valid_594675 != nil:
    section.add "resourceGroupName", valid_594675
  var valid_594676 = path.getOrDefault("name")
  valid_594676 = validateParameter(valid_594676, JString, required = true,
                                 default = nil)
  if valid_594676 != nil:
    section.add "name", valid_594676
  var valid_594677 = path.getOrDefault("subscriptionId")
  valid_594677 = validateParameter(valid_594677, JString, required = true,
                                 default = nil)
  if valid_594677 != nil:
    section.add "subscriptionId", valid_594677
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594678 = query.getOrDefault("api-version")
  valid_594678 = validateParameter(valid_594678, JString, required = true,
                                 default = nil)
  if valid_594678 != nil:
    section.add "api-version", valid_594678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594679: Call_WebAppsGetMSDeployLog_594672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_594679.validator(path, query, header, formData, body)
  let scheme = call_594679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594679.url(scheme.get, call_594679.host, call_594679.base,
                         call_594679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594679, url, valid)

proc call*(call_594680: Call_WebAppsGetMSDeployLog_594672;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594681 = newJObject()
  var query_594682 = newJObject()
  add(path_594681, "resourceGroupName", newJString(resourceGroupName))
  add(query_594682, "api-version", newJString(apiVersion))
  add(path_594681, "name", newJString(name))
  add(path_594681, "subscriptionId", newJString(subscriptionId))
  result = call_594680.call(path_594681, query_594682, nil, nil, nil)

var webAppsGetMSDeployLog* = Call_WebAppsGetMSDeployLog_594672(
    name: "webAppsGetMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLog_594673, base: "",
    url: url_WebAppsGetMSDeployLog_594674, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctions_594683 = ref object of OpenApiRestCall_593437
proc url_WebAppsListFunctions_594685(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctions_594684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594686 = path.getOrDefault("resourceGroupName")
  valid_594686 = validateParameter(valid_594686, JString, required = true,
                                 default = nil)
  if valid_594686 != nil:
    section.add "resourceGroupName", valid_594686
  var valid_594687 = path.getOrDefault("name")
  valid_594687 = validateParameter(valid_594687, JString, required = true,
                                 default = nil)
  if valid_594687 != nil:
    section.add "name", valid_594687
  var valid_594688 = path.getOrDefault("subscriptionId")
  valid_594688 = validateParameter(valid_594688, JString, required = true,
                                 default = nil)
  if valid_594688 != nil:
    section.add "subscriptionId", valid_594688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594689 = query.getOrDefault("api-version")
  valid_594689 = validateParameter(valid_594689, JString, required = true,
                                 default = nil)
  if valid_594689 != nil:
    section.add "api-version", valid_594689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594690: Call_WebAppsListFunctions_594683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_594690.validator(path, query, header, formData, body)
  let scheme = call_594690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594690.url(scheme.get, call_594690.host, call_594690.base,
                         call_594690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594690, url, valid)

proc call*(call_594691: Call_WebAppsListFunctions_594683;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListFunctions
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594692 = newJObject()
  var query_594693 = newJObject()
  add(path_594692, "resourceGroupName", newJString(resourceGroupName))
  add(query_594693, "api-version", newJString(apiVersion))
  add(path_594692, "name", newJString(name))
  add(path_594692, "subscriptionId", newJString(subscriptionId))
  result = call_594691.call(path_594692, query_594693, nil, nil, nil)

var webAppsListFunctions* = Call_WebAppsListFunctions_594683(
    name: "webAppsListFunctions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    validator: validate_WebAppsListFunctions_594684, base: "",
    url: url_WebAppsListFunctions_594685, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminToken_594694 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetFunctionsAdminToken_594696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminToken_594695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594697 = path.getOrDefault("resourceGroupName")
  valid_594697 = validateParameter(valid_594697, JString, required = true,
                                 default = nil)
  if valid_594697 != nil:
    section.add "resourceGroupName", valid_594697
  var valid_594698 = path.getOrDefault("name")
  valid_594698 = validateParameter(valid_594698, JString, required = true,
                                 default = nil)
  if valid_594698 != nil:
    section.add "name", valid_594698
  var valid_594699 = path.getOrDefault("subscriptionId")
  valid_594699 = validateParameter(valid_594699, JString, required = true,
                                 default = nil)
  if valid_594699 != nil:
    section.add "subscriptionId", valid_594699
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594700 = query.getOrDefault("api-version")
  valid_594700 = validateParameter(valid_594700, JString, required = true,
                                 default = nil)
  if valid_594700 != nil:
    section.add "api-version", valid_594700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594701: Call_WebAppsGetFunctionsAdminToken_594694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_594701.validator(path, query, header, formData, body)
  let scheme = call_594701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594701.url(scheme.get, call_594701.host, call_594701.base,
                         call_594701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594701, url, valid)

proc call*(call_594702: Call_WebAppsGetFunctionsAdminToken_594694;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminToken
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594703 = newJObject()
  var query_594704 = newJObject()
  add(path_594703, "resourceGroupName", newJString(resourceGroupName))
  add(query_594704, "api-version", newJString(apiVersion))
  add(path_594703, "name", newJString(name))
  add(path_594703, "subscriptionId", newJString(subscriptionId))
  result = call_594702.call(path_594703, query_594704, nil, nil, nil)

var webAppsGetFunctionsAdminToken* = Call_WebAppsGetFunctionsAdminToken_594694(
    name: "webAppsGetFunctionsAdminToken", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminToken_594695, base: "",
    url: url_WebAppsGetFunctionsAdminToken_594696, schemes: {Scheme.Https})
type
  Call_WebAppsCreateFunction_594717 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateFunction_594719(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateFunction_594718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594720 = path.getOrDefault("resourceGroupName")
  valid_594720 = validateParameter(valid_594720, JString, required = true,
                                 default = nil)
  if valid_594720 != nil:
    section.add "resourceGroupName", valid_594720
  var valid_594721 = path.getOrDefault("name")
  valid_594721 = validateParameter(valid_594721, JString, required = true,
                                 default = nil)
  if valid_594721 != nil:
    section.add "name", valid_594721
  var valid_594722 = path.getOrDefault("subscriptionId")
  valid_594722 = validateParameter(valid_594722, JString, required = true,
                                 default = nil)
  if valid_594722 != nil:
    section.add "subscriptionId", valid_594722
  var valid_594723 = path.getOrDefault("functionName")
  valid_594723 = validateParameter(valid_594723, JString, required = true,
                                 default = nil)
  if valid_594723 != nil:
    section.add "functionName", valid_594723
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594724 = query.getOrDefault("api-version")
  valid_594724 = validateParameter(valid_594724, JString, required = true,
                                 default = nil)
  if valid_594724 != nil:
    section.add "api-version", valid_594724
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594726: Call_WebAppsCreateFunction_594717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_594726.validator(path, query, header, formData, body)
  let scheme = call_594726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594726.url(scheme.get, call_594726.host, call_594726.base,
                         call_594726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594726, url, valid)

proc call*(call_594727: Call_WebAppsCreateFunction_594717;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateFunction
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_594728 = newJObject()
  var query_594729 = newJObject()
  var body_594730 = newJObject()
  add(path_594728, "resourceGroupName", newJString(resourceGroupName))
  add(query_594729, "api-version", newJString(apiVersion))
  add(path_594728, "name", newJString(name))
  add(path_594728, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_594730 = functionEnvelope
  add(path_594728, "functionName", newJString(functionName))
  result = call_594727.call(path_594728, query_594729, nil, nil, body_594730)

var webAppsCreateFunction* = Call_WebAppsCreateFunction_594717(
    name: "webAppsCreateFunction", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsCreateFunction_594718, base: "",
    url: url_WebAppsCreateFunction_594719, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunction_594705 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetFunction_594707(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunction_594706(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594708 = path.getOrDefault("resourceGroupName")
  valid_594708 = validateParameter(valid_594708, JString, required = true,
                                 default = nil)
  if valid_594708 != nil:
    section.add "resourceGroupName", valid_594708
  var valid_594709 = path.getOrDefault("name")
  valid_594709 = validateParameter(valid_594709, JString, required = true,
                                 default = nil)
  if valid_594709 != nil:
    section.add "name", valid_594709
  var valid_594710 = path.getOrDefault("subscriptionId")
  valid_594710 = validateParameter(valid_594710, JString, required = true,
                                 default = nil)
  if valid_594710 != nil:
    section.add "subscriptionId", valid_594710
  var valid_594711 = path.getOrDefault("functionName")
  valid_594711 = validateParameter(valid_594711, JString, required = true,
                                 default = nil)
  if valid_594711 != nil:
    section.add "functionName", valid_594711
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594712 = query.getOrDefault("api-version")
  valid_594712 = validateParameter(valid_594712, JString, required = true,
                                 default = nil)
  if valid_594712 != nil:
    section.add "api-version", valid_594712
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594713: Call_WebAppsGetFunction_594705; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_594713.validator(path, query, header, formData, body)
  let scheme = call_594713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594713.url(scheme.get, call_594713.host, call_594713.base,
                         call_594713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594713, url, valid)

proc call*(call_594714: Call_WebAppsGetFunction_594705; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          functionName: string): Recallable =
  ## webAppsGetFunction
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_594715 = newJObject()
  var query_594716 = newJObject()
  add(path_594715, "resourceGroupName", newJString(resourceGroupName))
  add(query_594716, "api-version", newJString(apiVersion))
  add(path_594715, "name", newJString(name))
  add(path_594715, "subscriptionId", newJString(subscriptionId))
  add(path_594715, "functionName", newJString(functionName))
  result = call_594714.call(path_594715, query_594716, nil, nil, nil)

var webAppsGetFunction* = Call_WebAppsGetFunction_594705(
    name: "webAppsGetFunction", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsGetFunction_594706, base: "",
    url: url_WebAppsGetFunction_594707, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteFunction_594731 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteFunction_594733(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteFunction_594732(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594734 = path.getOrDefault("resourceGroupName")
  valid_594734 = validateParameter(valid_594734, JString, required = true,
                                 default = nil)
  if valid_594734 != nil:
    section.add "resourceGroupName", valid_594734
  var valid_594735 = path.getOrDefault("name")
  valid_594735 = validateParameter(valid_594735, JString, required = true,
                                 default = nil)
  if valid_594735 != nil:
    section.add "name", valid_594735
  var valid_594736 = path.getOrDefault("subscriptionId")
  valid_594736 = validateParameter(valid_594736, JString, required = true,
                                 default = nil)
  if valid_594736 != nil:
    section.add "subscriptionId", valid_594736
  var valid_594737 = path.getOrDefault("functionName")
  valid_594737 = validateParameter(valid_594737, JString, required = true,
                                 default = nil)
  if valid_594737 != nil:
    section.add "functionName", valid_594737
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594738 = query.getOrDefault("api-version")
  valid_594738 = validateParameter(valid_594738, JString, required = true,
                                 default = nil)
  if valid_594738 != nil:
    section.add "api-version", valid_594738
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594739: Call_WebAppsDeleteFunction_594731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_594739.validator(path, query, header, formData, body)
  let scheme = call_594739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594739.url(scheme.get, call_594739.host, call_594739.base,
                         call_594739.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594739, url, valid)

proc call*(call_594740: Call_WebAppsDeleteFunction_594731;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteFunction
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_594741 = newJObject()
  var query_594742 = newJObject()
  add(path_594741, "resourceGroupName", newJString(resourceGroupName))
  add(query_594742, "api-version", newJString(apiVersion))
  add(path_594741, "name", newJString(name))
  add(path_594741, "subscriptionId", newJString(subscriptionId))
  add(path_594741, "functionName", newJString(functionName))
  result = call_594740.call(path_594741, query_594742, nil, nil, nil)

var webAppsDeleteFunction* = Call_WebAppsDeleteFunction_594731(
    name: "webAppsDeleteFunction", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsDeleteFunction_594732, base: "",
    url: url_WebAppsDeleteFunction_594733, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecrets_594743 = ref object of OpenApiRestCall_593437
proc url_WebAppsListFunctionSecrets_594745(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecrets_594744(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594746 = path.getOrDefault("resourceGroupName")
  valid_594746 = validateParameter(valid_594746, JString, required = true,
                                 default = nil)
  if valid_594746 != nil:
    section.add "resourceGroupName", valid_594746
  var valid_594747 = path.getOrDefault("name")
  valid_594747 = validateParameter(valid_594747, JString, required = true,
                                 default = nil)
  if valid_594747 != nil:
    section.add "name", valid_594747
  var valid_594748 = path.getOrDefault("subscriptionId")
  valid_594748 = validateParameter(valid_594748, JString, required = true,
                                 default = nil)
  if valid_594748 != nil:
    section.add "subscriptionId", valid_594748
  var valid_594749 = path.getOrDefault("functionName")
  valid_594749 = validateParameter(valid_594749, JString, required = true,
                                 default = nil)
  if valid_594749 != nil:
    section.add "functionName", valid_594749
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594750 = query.getOrDefault("api-version")
  valid_594750 = validateParameter(valid_594750, JString, required = true,
                                 default = nil)
  if valid_594750 != nil:
    section.add "api-version", valid_594750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594751: Call_WebAppsListFunctionSecrets_594743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_594751.validator(path, query, header, formData, body)
  let scheme = call_594751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594751.url(scheme.get, call_594751.host, call_594751.base,
                         call_594751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594751, url, valid)

proc call*(call_594752: Call_WebAppsListFunctionSecrets_594743;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecrets
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_594753 = newJObject()
  var query_594754 = newJObject()
  add(path_594753, "resourceGroupName", newJString(resourceGroupName))
  add(query_594754, "api-version", newJString(apiVersion))
  add(path_594753, "name", newJString(name))
  add(path_594753, "subscriptionId", newJString(subscriptionId))
  add(path_594753, "functionName", newJString(functionName))
  result = call_594752.call(path_594753, query_594754, nil, nil, nil)

var webAppsListFunctionSecrets* = Call_WebAppsListFunctionSecrets_594743(
    name: "webAppsListFunctionSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecrets_594744, base: "",
    url: url_WebAppsListFunctionSecrets_594745, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindings_594755 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHostNameBindings_594757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindings_594756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594758 = path.getOrDefault("resourceGroupName")
  valid_594758 = validateParameter(valid_594758, JString, required = true,
                                 default = nil)
  if valid_594758 != nil:
    section.add "resourceGroupName", valid_594758
  var valid_594759 = path.getOrDefault("name")
  valid_594759 = validateParameter(valid_594759, JString, required = true,
                                 default = nil)
  if valid_594759 != nil:
    section.add "name", valid_594759
  var valid_594760 = path.getOrDefault("subscriptionId")
  valid_594760 = validateParameter(valid_594760, JString, required = true,
                                 default = nil)
  if valid_594760 != nil:
    section.add "subscriptionId", valid_594760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594761 = query.getOrDefault("api-version")
  valid_594761 = validateParameter(valid_594761, JString, required = true,
                                 default = nil)
  if valid_594761 != nil:
    section.add "api-version", valid_594761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594762: Call_WebAppsListHostNameBindings_594755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_594762.validator(path, query, header, formData, body)
  let scheme = call_594762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594762.url(scheme.get, call_594762.host, call_594762.base,
                         call_594762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594762, url, valid)

proc call*(call_594763: Call_WebAppsListHostNameBindings_594755;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindings
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594764 = newJObject()
  var query_594765 = newJObject()
  add(path_594764, "resourceGroupName", newJString(resourceGroupName))
  add(query_594765, "api-version", newJString(apiVersion))
  add(path_594764, "name", newJString(name))
  add(path_594764, "subscriptionId", newJString(subscriptionId))
  result = call_594763.call(path_594764, query_594765, nil, nil, nil)

var webAppsListHostNameBindings* = Call_WebAppsListHostNameBindings_594755(
    name: "webAppsListHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindings_594756, base: "",
    url: url_WebAppsListHostNameBindings_594757, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBinding_594778 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHostNameBinding_594780(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBinding_594779(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594781 = path.getOrDefault("resourceGroupName")
  valid_594781 = validateParameter(valid_594781, JString, required = true,
                                 default = nil)
  if valid_594781 != nil:
    section.add "resourceGroupName", valid_594781
  var valid_594782 = path.getOrDefault("name")
  valid_594782 = validateParameter(valid_594782, JString, required = true,
                                 default = nil)
  if valid_594782 != nil:
    section.add "name", valid_594782
  var valid_594783 = path.getOrDefault("subscriptionId")
  valid_594783 = validateParameter(valid_594783, JString, required = true,
                                 default = nil)
  if valid_594783 != nil:
    section.add "subscriptionId", valid_594783
  var valid_594784 = path.getOrDefault("hostName")
  valid_594784 = validateParameter(valid_594784, JString, required = true,
                                 default = nil)
  if valid_594784 != nil:
    section.add "hostName", valid_594784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594785 = query.getOrDefault("api-version")
  valid_594785 = validateParameter(valid_594785, JString, required = true,
                                 default = nil)
  if valid_594785 != nil:
    section.add "api-version", valid_594785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594787: Call_WebAppsCreateOrUpdateHostNameBinding_594778;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_594787.validator(path, query, header, formData, body)
  let scheme = call_594787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594787.url(scheme.get, call_594787.host, call_594787.base,
                         call_594787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594787, url, valid)

proc call*(call_594788: Call_WebAppsCreateOrUpdateHostNameBinding_594778;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBinding
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_594789 = newJObject()
  var query_594790 = newJObject()
  var body_594791 = newJObject()
  add(path_594789, "resourceGroupName", newJString(resourceGroupName))
  add(query_594790, "api-version", newJString(apiVersion))
  add(path_594789, "name", newJString(name))
  add(path_594789, "subscriptionId", newJString(subscriptionId))
  add(path_594789, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_594791 = hostNameBinding
  result = call_594788.call(path_594789, query_594790, nil, nil, body_594791)

var webAppsCreateOrUpdateHostNameBinding* = Call_WebAppsCreateOrUpdateHostNameBinding_594778(
    name: "webAppsCreateOrUpdateHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBinding_594779, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBinding_594780, schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBinding_594766 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHostNameBinding_594768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBinding_594767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594769 = path.getOrDefault("resourceGroupName")
  valid_594769 = validateParameter(valid_594769, JString, required = true,
                                 default = nil)
  if valid_594769 != nil:
    section.add "resourceGroupName", valid_594769
  var valid_594770 = path.getOrDefault("name")
  valid_594770 = validateParameter(valid_594770, JString, required = true,
                                 default = nil)
  if valid_594770 != nil:
    section.add "name", valid_594770
  var valid_594771 = path.getOrDefault("subscriptionId")
  valid_594771 = validateParameter(valid_594771, JString, required = true,
                                 default = nil)
  if valid_594771 != nil:
    section.add "subscriptionId", valid_594771
  var valid_594772 = path.getOrDefault("hostName")
  valid_594772 = validateParameter(valid_594772, JString, required = true,
                                 default = nil)
  if valid_594772 != nil:
    section.add "hostName", valid_594772
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594773 = query.getOrDefault("api-version")
  valid_594773 = validateParameter(valid_594773, JString, required = true,
                                 default = nil)
  if valid_594773 != nil:
    section.add "api-version", valid_594773
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594774: Call_WebAppsGetHostNameBinding_594766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_594774.validator(path, query, header, formData, body)
  let scheme = call_594774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594774.url(scheme.get, call_594774.host, call_594774.base,
                         call_594774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594774, url, valid)

proc call*(call_594775: Call_WebAppsGetHostNameBinding_594766;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBinding
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_594776 = newJObject()
  var query_594777 = newJObject()
  add(path_594776, "resourceGroupName", newJString(resourceGroupName))
  add(query_594777, "api-version", newJString(apiVersion))
  add(path_594776, "name", newJString(name))
  add(path_594776, "subscriptionId", newJString(subscriptionId))
  add(path_594776, "hostName", newJString(hostName))
  result = call_594775.call(path_594776, query_594777, nil, nil, nil)

var webAppsGetHostNameBinding* = Call_WebAppsGetHostNameBinding_594766(
    name: "webAppsGetHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBinding_594767, base: "",
    url: url_WebAppsGetHostNameBinding_594768, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBinding_594792 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHostNameBinding_594794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBinding_594793(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594795 = path.getOrDefault("resourceGroupName")
  valid_594795 = validateParameter(valid_594795, JString, required = true,
                                 default = nil)
  if valid_594795 != nil:
    section.add "resourceGroupName", valid_594795
  var valid_594796 = path.getOrDefault("name")
  valid_594796 = validateParameter(valid_594796, JString, required = true,
                                 default = nil)
  if valid_594796 != nil:
    section.add "name", valid_594796
  var valid_594797 = path.getOrDefault("subscriptionId")
  valid_594797 = validateParameter(valid_594797, JString, required = true,
                                 default = nil)
  if valid_594797 != nil:
    section.add "subscriptionId", valid_594797
  var valid_594798 = path.getOrDefault("hostName")
  valid_594798 = validateParameter(valid_594798, JString, required = true,
                                 default = nil)
  if valid_594798 != nil:
    section.add "hostName", valid_594798
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594799 = query.getOrDefault("api-version")
  valid_594799 = validateParameter(valid_594799, JString, required = true,
                                 default = nil)
  if valid_594799 != nil:
    section.add "api-version", valid_594799
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594800: Call_WebAppsDeleteHostNameBinding_594792; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_594800.validator(path, query, header, formData, body)
  let scheme = call_594800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594800.url(scheme.get, call_594800.host, call_594800.base,
                         call_594800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594800, url, valid)

proc call*(call_594801: Call_WebAppsDeleteHostNameBinding_594792;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBinding
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_594802 = newJObject()
  var query_594803 = newJObject()
  add(path_594802, "resourceGroupName", newJString(resourceGroupName))
  add(query_594803, "api-version", newJString(apiVersion))
  add(path_594802, "name", newJString(name))
  add(path_594802, "subscriptionId", newJString(subscriptionId))
  add(path_594802, "hostName", newJString(hostName))
  result = call_594801.call(path_594802, query_594803, nil, nil, nil)

var webAppsDeleteHostNameBinding* = Call_WebAppsDeleteHostNameBinding_594792(
    name: "webAppsDeleteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBinding_594793, base: "",
    url: url_WebAppsDeleteHostNameBinding_594794, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnection_594817 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHybridConnection_594819(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnection_594818(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594820 = path.getOrDefault("namespaceName")
  valid_594820 = validateParameter(valid_594820, JString, required = true,
                                 default = nil)
  if valid_594820 != nil:
    section.add "namespaceName", valid_594820
  var valid_594821 = path.getOrDefault("resourceGroupName")
  valid_594821 = validateParameter(valid_594821, JString, required = true,
                                 default = nil)
  if valid_594821 != nil:
    section.add "resourceGroupName", valid_594821
  var valid_594822 = path.getOrDefault("name")
  valid_594822 = validateParameter(valid_594822, JString, required = true,
                                 default = nil)
  if valid_594822 != nil:
    section.add "name", valid_594822
  var valid_594823 = path.getOrDefault("subscriptionId")
  valid_594823 = validateParameter(valid_594823, JString, required = true,
                                 default = nil)
  if valid_594823 != nil:
    section.add "subscriptionId", valid_594823
  var valid_594824 = path.getOrDefault("relayName")
  valid_594824 = validateParameter(valid_594824, JString, required = true,
                                 default = nil)
  if valid_594824 != nil:
    section.add "relayName", valid_594824
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594825 = query.getOrDefault("api-version")
  valid_594825 = validateParameter(valid_594825, JString, required = true,
                                 default = nil)
  if valid_594825 != nil:
    section.add "api-version", valid_594825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594827: Call_WebAppsCreateOrUpdateHybridConnection_594817;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_594827.validator(path, query, header, formData, body)
  let scheme = call_594827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594827.url(scheme.get, call_594827.host, call_594827.base,
                         call_594827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594827, url, valid)

proc call*(call_594828: Call_WebAppsCreateOrUpdateHybridConnection_594817;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594829 = newJObject()
  var query_594830 = newJObject()
  var body_594831 = newJObject()
  add(path_594829, "namespaceName", newJString(namespaceName))
  add(path_594829, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594831 = connectionEnvelope
  add(path_594829, "name", newJString(name))
  add(query_594830, "api-version", newJString(apiVersion))
  add(path_594829, "subscriptionId", newJString(subscriptionId))
  add(path_594829, "relayName", newJString(relayName))
  result = call_594828.call(path_594829, query_594830, nil, nil, body_594831)

var webAppsCreateOrUpdateHybridConnection* = Call_WebAppsCreateOrUpdateHybridConnection_594817(
    name: "webAppsCreateOrUpdateHybridConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnection_594818, base: "",
    url: url_WebAppsCreateOrUpdateHybridConnection_594819, schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnection_594804 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHybridConnection_594806(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnection_594805(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594807 = path.getOrDefault("namespaceName")
  valid_594807 = validateParameter(valid_594807, JString, required = true,
                                 default = nil)
  if valid_594807 != nil:
    section.add "namespaceName", valid_594807
  var valid_594808 = path.getOrDefault("resourceGroupName")
  valid_594808 = validateParameter(valid_594808, JString, required = true,
                                 default = nil)
  if valid_594808 != nil:
    section.add "resourceGroupName", valid_594808
  var valid_594809 = path.getOrDefault("name")
  valid_594809 = validateParameter(valid_594809, JString, required = true,
                                 default = nil)
  if valid_594809 != nil:
    section.add "name", valid_594809
  var valid_594810 = path.getOrDefault("subscriptionId")
  valid_594810 = validateParameter(valid_594810, JString, required = true,
                                 default = nil)
  if valid_594810 != nil:
    section.add "subscriptionId", valid_594810
  var valid_594811 = path.getOrDefault("relayName")
  valid_594811 = validateParameter(valid_594811, JString, required = true,
                                 default = nil)
  if valid_594811 != nil:
    section.add "relayName", valid_594811
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594812 = query.getOrDefault("api-version")
  valid_594812 = validateParameter(valid_594812, JString, required = true,
                                 default = nil)
  if valid_594812 != nil:
    section.add "api-version", valid_594812
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594813: Call_WebAppsGetHybridConnection_594804; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_594813.validator(path, query, header, formData, body)
  let scheme = call_594813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594813.url(scheme.get, call_594813.host, call_594813.base,
                         call_594813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594813, url, valid)

proc call*(call_594814: Call_WebAppsGetHybridConnection_594804;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnection
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594815 = newJObject()
  var query_594816 = newJObject()
  add(path_594815, "namespaceName", newJString(namespaceName))
  add(path_594815, "resourceGroupName", newJString(resourceGroupName))
  add(query_594816, "api-version", newJString(apiVersion))
  add(path_594815, "name", newJString(name))
  add(path_594815, "subscriptionId", newJString(subscriptionId))
  add(path_594815, "relayName", newJString(relayName))
  result = call_594814.call(path_594815, query_594816, nil, nil, nil)

var webAppsGetHybridConnection* = Call_WebAppsGetHybridConnection_594804(
    name: "webAppsGetHybridConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnection_594805, base: "",
    url: url_WebAppsGetHybridConnection_594806, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnection_594845 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateHybridConnection_594847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnection_594846(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594848 = path.getOrDefault("namespaceName")
  valid_594848 = validateParameter(valid_594848, JString, required = true,
                                 default = nil)
  if valid_594848 != nil:
    section.add "namespaceName", valid_594848
  var valid_594849 = path.getOrDefault("resourceGroupName")
  valid_594849 = validateParameter(valid_594849, JString, required = true,
                                 default = nil)
  if valid_594849 != nil:
    section.add "resourceGroupName", valid_594849
  var valid_594850 = path.getOrDefault("name")
  valid_594850 = validateParameter(valid_594850, JString, required = true,
                                 default = nil)
  if valid_594850 != nil:
    section.add "name", valid_594850
  var valid_594851 = path.getOrDefault("subscriptionId")
  valid_594851 = validateParameter(valid_594851, JString, required = true,
                                 default = nil)
  if valid_594851 != nil:
    section.add "subscriptionId", valid_594851
  var valid_594852 = path.getOrDefault("relayName")
  valid_594852 = validateParameter(valid_594852, JString, required = true,
                                 default = nil)
  if valid_594852 != nil:
    section.add "relayName", valid_594852
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594853 = query.getOrDefault("api-version")
  valid_594853 = validateParameter(valid_594853, JString, required = true,
                                 default = nil)
  if valid_594853 != nil:
    section.add "api-version", valid_594853
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594855: Call_WebAppsUpdateHybridConnection_594845; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_594855.validator(path, query, header, formData, body)
  let scheme = call_594855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594855.url(scheme.get, call_594855.host, call_594855.base,
                         call_594855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594855, url, valid)

proc call*(call_594856: Call_WebAppsUpdateHybridConnection_594845;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594857 = newJObject()
  var query_594858 = newJObject()
  var body_594859 = newJObject()
  add(path_594857, "namespaceName", newJString(namespaceName))
  add(path_594857, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594859 = connectionEnvelope
  add(path_594857, "name", newJString(name))
  add(query_594858, "api-version", newJString(apiVersion))
  add(path_594857, "subscriptionId", newJString(subscriptionId))
  add(path_594857, "relayName", newJString(relayName))
  result = call_594856.call(path_594857, query_594858, nil, nil, body_594859)

var webAppsUpdateHybridConnection* = Call_WebAppsUpdateHybridConnection_594845(
    name: "webAppsUpdateHybridConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnection_594846, base: "",
    url: url_WebAppsUpdateHybridConnection_594847, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnection_594832 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHybridConnection_594834(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnection_594833(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594835 = path.getOrDefault("namespaceName")
  valid_594835 = validateParameter(valid_594835, JString, required = true,
                                 default = nil)
  if valid_594835 != nil:
    section.add "namespaceName", valid_594835
  var valid_594836 = path.getOrDefault("resourceGroupName")
  valid_594836 = validateParameter(valid_594836, JString, required = true,
                                 default = nil)
  if valid_594836 != nil:
    section.add "resourceGroupName", valid_594836
  var valid_594837 = path.getOrDefault("name")
  valid_594837 = validateParameter(valid_594837, JString, required = true,
                                 default = nil)
  if valid_594837 != nil:
    section.add "name", valid_594837
  var valid_594838 = path.getOrDefault("subscriptionId")
  valid_594838 = validateParameter(valid_594838, JString, required = true,
                                 default = nil)
  if valid_594838 != nil:
    section.add "subscriptionId", valid_594838
  var valid_594839 = path.getOrDefault("relayName")
  valid_594839 = validateParameter(valid_594839, JString, required = true,
                                 default = nil)
  if valid_594839 != nil:
    section.add "relayName", valid_594839
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594840 = query.getOrDefault("api-version")
  valid_594840 = validateParameter(valid_594840, JString, required = true,
                                 default = nil)
  if valid_594840 != nil:
    section.add "api-version", valid_594840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594841: Call_WebAppsDeleteHybridConnection_594832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_594841.validator(path, query, header, formData, body)
  let scheme = call_594841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594841.url(scheme.get, call_594841.host, call_594841.base,
                         call_594841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594841, url, valid)

proc call*(call_594842: Call_WebAppsDeleteHybridConnection_594832;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnection
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594843 = newJObject()
  var query_594844 = newJObject()
  add(path_594843, "namespaceName", newJString(namespaceName))
  add(path_594843, "resourceGroupName", newJString(resourceGroupName))
  add(query_594844, "api-version", newJString(apiVersion))
  add(path_594843, "name", newJString(name))
  add(path_594843, "subscriptionId", newJString(subscriptionId))
  add(path_594843, "relayName", newJString(relayName))
  result = call_594842.call(path_594843, query_594844, nil, nil, nil)

var webAppsDeleteHybridConnection* = Call_WebAppsDeleteHybridConnection_594832(
    name: "webAppsDeleteHybridConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnection_594833, base: "",
    url: url_WebAppsDeleteHybridConnection_594834, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeys_594860 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnectionKeys_594862(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeys_594861(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_594863 = path.getOrDefault("namespaceName")
  valid_594863 = validateParameter(valid_594863, JString, required = true,
                                 default = nil)
  if valid_594863 != nil:
    section.add "namespaceName", valid_594863
  var valid_594864 = path.getOrDefault("resourceGroupName")
  valid_594864 = validateParameter(valid_594864, JString, required = true,
                                 default = nil)
  if valid_594864 != nil:
    section.add "resourceGroupName", valid_594864
  var valid_594865 = path.getOrDefault("name")
  valid_594865 = validateParameter(valid_594865, JString, required = true,
                                 default = nil)
  if valid_594865 != nil:
    section.add "name", valid_594865
  var valid_594866 = path.getOrDefault("subscriptionId")
  valid_594866 = validateParameter(valid_594866, JString, required = true,
                                 default = nil)
  if valid_594866 != nil:
    section.add "subscriptionId", valid_594866
  var valid_594867 = path.getOrDefault("relayName")
  valid_594867 = validateParameter(valid_594867, JString, required = true,
                                 default = nil)
  if valid_594867 != nil:
    section.add "relayName", valid_594867
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594868 = query.getOrDefault("api-version")
  valid_594868 = validateParameter(valid_594868, JString, required = true,
                                 default = nil)
  if valid_594868 != nil:
    section.add "api-version", valid_594868
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594869: Call_WebAppsListHybridConnectionKeys_594860;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_594869.validator(path, query, header, formData, body)
  let scheme = call_594869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594869.url(scheme.get, call_594869.host, call_594869.base,
                         call_594869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594869, url, valid)

proc call*(call_594870: Call_WebAppsListHybridConnectionKeys_594860;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeys
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_594871 = newJObject()
  var query_594872 = newJObject()
  add(path_594871, "namespaceName", newJString(namespaceName))
  add(path_594871, "resourceGroupName", newJString(resourceGroupName))
  add(query_594872, "api-version", newJString(apiVersion))
  add(path_594871, "name", newJString(name))
  add(path_594871, "subscriptionId", newJString(subscriptionId))
  add(path_594871, "relayName", newJString(relayName))
  result = call_594870.call(path_594871, query_594872, nil, nil, nil)

var webAppsListHybridConnectionKeys* = Call_WebAppsListHybridConnectionKeys_594860(
    name: "webAppsListHybridConnectionKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeys_594861, base: "",
    url: url_WebAppsListHybridConnectionKeys_594862, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnections_594873 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnections_594875(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnections_594874(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594876 = path.getOrDefault("resourceGroupName")
  valid_594876 = validateParameter(valid_594876, JString, required = true,
                                 default = nil)
  if valid_594876 != nil:
    section.add "resourceGroupName", valid_594876
  var valid_594877 = path.getOrDefault("name")
  valid_594877 = validateParameter(valid_594877, JString, required = true,
                                 default = nil)
  if valid_594877 != nil:
    section.add "name", valid_594877
  var valid_594878 = path.getOrDefault("subscriptionId")
  valid_594878 = validateParameter(valid_594878, JString, required = true,
                                 default = nil)
  if valid_594878 != nil:
    section.add "subscriptionId", valid_594878
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594879 = query.getOrDefault("api-version")
  valid_594879 = validateParameter(valid_594879, JString, required = true,
                                 default = nil)
  if valid_594879 != nil:
    section.add "api-version", valid_594879
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594880: Call_WebAppsListHybridConnections_594873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_594880.validator(path, query, header, formData, body)
  let scheme = call_594880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594880.url(scheme.get, call_594880.host, call_594880.base,
                         call_594880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594880, url, valid)

proc call*(call_594881: Call_WebAppsListHybridConnections_594873;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnections
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594882 = newJObject()
  var query_594883 = newJObject()
  add(path_594882, "resourceGroupName", newJString(resourceGroupName))
  add(query_594883, "api-version", newJString(apiVersion))
  add(path_594882, "name", newJString(name))
  add(path_594882, "subscriptionId", newJString(subscriptionId))
  result = call_594881.call(path_594882, query_594883, nil, nil, nil)

var webAppsListHybridConnections* = Call_WebAppsListHybridConnections_594873(
    name: "webAppsListHybridConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnections_594874, base: "",
    url: url_WebAppsListHybridConnections_594875, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnections_594884 = ref object of OpenApiRestCall_593437
proc url_WebAppsListRelayServiceConnections_594886(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnections_594885(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594887 = path.getOrDefault("resourceGroupName")
  valid_594887 = validateParameter(valid_594887, JString, required = true,
                                 default = nil)
  if valid_594887 != nil:
    section.add "resourceGroupName", valid_594887
  var valid_594888 = path.getOrDefault("name")
  valid_594888 = validateParameter(valid_594888, JString, required = true,
                                 default = nil)
  if valid_594888 != nil:
    section.add "name", valid_594888
  var valid_594889 = path.getOrDefault("subscriptionId")
  valid_594889 = validateParameter(valid_594889, JString, required = true,
                                 default = nil)
  if valid_594889 != nil:
    section.add "subscriptionId", valid_594889
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594890 = query.getOrDefault("api-version")
  valid_594890 = validateParameter(valid_594890, JString, required = true,
                                 default = nil)
  if valid_594890 != nil:
    section.add "api-version", valid_594890
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594891: Call_WebAppsListRelayServiceConnections_594884;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_594891.validator(path, query, header, formData, body)
  let scheme = call_594891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594891.url(scheme.get, call_594891.host, call_594891.base,
                         call_594891.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594891, url, valid)

proc call*(call_594892: Call_WebAppsListRelayServiceConnections_594884;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnections
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594893 = newJObject()
  var query_594894 = newJObject()
  add(path_594893, "resourceGroupName", newJString(resourceGroupName))
  add(query_594894, "api-version", newJString(apiVersion))
  add(path_594893, "name", newJString(name))
  add(path_594893, "subscriptionId", newJString(subscriptionId))
  result = call_594892.call(path_594893, query_594894, nil, nil, nil)

var webAppsListRelayServiceConnections* = Call_WebAppsListRelayServiceConnections_594884(
    name: "webAppsListRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnections_594885, base: "",
    url: url_WebAppsListRelayServiceConnections_594886, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnection_594907 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateRelayServiceConnection_594909(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnection_594908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594910 = path.getOrDefault("resourceGroupName")
  valid_594910 = validateParameter(valid_594910, JString, required = true,
                                 default = nil)
  if valid_594910 != nil:
    section.add "resourceGroupName", valid_594910
  var valid_594911 = path.getOrDefault("name")
  valid_594911 = validateParameter(valid_594911, JString, required = true,
                                 default = nil)
  if valid_594911 != nil:
    section.add "name", valid_594911
  var valid_594912 = path.getOrDefault("subscriptionId")
  valid_594912 = validateParameter(valid_594912, JString, required = true,
                                 default = nil)
  if valid_594912 != nil:
    section.add "subscriptionId", valid_594912
  var valid_594913 = path.getOrDefault("entityName")
  valid_594913 = validateParameter(valid_594913, JString, required = true,
                                 default = nil)
  if valid_594913 != nil:
    section.add "entityName", valid_594913
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594914 = query.getOrDefault("api-version")
  valid_594914 = validateParameter(valid_594914, JString, required = true,
                                 default = nil)
  if valid_594914 != nil:
    section.add "api-version", valid_594914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594916: Call_WebAppsCreateOrUpdateRelayServiceConnection_594907;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_594916.validator(path, query, header, formData, body)
  let scheme = call_594916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594916.url(scheme.get, call_594916.host, call_594916.base,
                         call_594916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594916, url, valid)

proc call*(call_594917: Call_WebAppsCreateOrUpdateRelayServiceConnection_594907;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_594918 = newJObject()
  var query_594919 = newJObject()
  var body_594920 = newJObject()
  add(path_594918, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594920 = connectionEnvelope
  add(path_594918, "name", newJString(name))
  add(query_594919, "api-version", newJString(apiVersion))
  add(path_594918, "subscriptionId", newJString(subscriptionId))
  add(path_594918, "entityName", newJString(entityName))
  result = call_594917.call(path_594918, query_594919, nil, nil, body_594920)

var webAppsCreateOrUpdateRelayServiceConnection* = Call_WebAppsCreateOrUpdateRelayServiceConnection_594907(
    name: "webAppsCreateOrUpdateRelayServiceConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnection_594908,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnection_594909,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnection_594895 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetRelayServiceConnection_594897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnection_594896(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594898 = path.getOrDefault("resourceGroupName")
  valid_594898 = validateParameter(valid_594898, JString, required = true,
                                 default = nil)
  if valid_594898 != nil:
    section.add "resourceGroupName", valid_594898
  var valid_594899 = path.getOrDefault("name")
  valid_594899 = validateParameter(valid_594899, JString, required = true,
                                 default = nil)
  if valid_594899 != nil:
    section.add "name", valid_594899
  var valid_594900 = path.getOrDefault("subscriptionId")
  valid_594900 = validateParameter(valid_594900, JString, required = true,
                                 default = nil)
  if valid_594900 != nil:
    section.add "subscriptionId", valid_594900
  var valid_594901 = path.getOrDefault("entityName")
  valid_594901 = validateParameter(valid_594901, JString, required = true,
                                 default = nil)
  if valid_594901 != nil:
    section.add "entityName", valid_594901
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594902 = query.getOrDefault("api-version")
  valid_594902 = validateParameter(valid_594902, JString, required = true,
                                 default = nil)
  if valid_594902 != nil:
    section.add "api-version", valid_594902
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594903: Call_WebAppsGetRelayServiceConnection_594895;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_594903.validator(path, query, header, formData, body)
  let scheme = call_594903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594903.url(scheme.get, call_594903.host, call_594903.base,
                         call_594903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594903, url, valid)

proc call*(call_594904: Call_WebAppsGetRelayServiceConnection_594895;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnection
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_594905 = newJObject()
  var query_594906 = newJObject()
  add(path_594905, "resourceGroupName", newJString(resourceGroupName))
  add(query_594906, "api-version", newJString(apiVersion))
  add(path_594905, "name", newJString(name))
  add(path_594905, "subscriptionId", newJString(subscriptionId))
  add(path_594905, "entityName", newJString(entityName))
  result = call_594904.call(path_594905, query_594906, nil, nil, nil)

var webAppsGetRelayServiceConnection* = Call_WebAppsGetRelayServiceConnection_594895(
    name: "webAppsGetRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnection_594896, base: "",
    url: url_WebAppsGetRelayServiceConnection_594897, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnection_594933 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateRelayServiceConnection_594935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnection_594934(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594936 = path.getOrDefault("resourceGroupName")
  valid_594936 = validateParameter(valid_594936, JString, required = true,
                                 default = nil)
  if valid_594936 != nil:
    section.add "resourceGroupName", valid_594936
  var valid_594937 = path.getOrDefault("name")
  valid_594937 = validateParameter(valid_594937, JString, required = true,
                                 default = nil)
  if valid_594937 != nil:
    section.add "name", valid_594937
  var valid_594938 = path.getOrDefault("subscriptionId")
  valid_594938 = validateParameter(valid_594938, JString, required = true,
                                 default = nil)
  if valid_594938 != nil:
    section.add "subscriptionId", valid_594938
  var valid_594939 = path.getOrDefault("entityName")
  valid_594939 = validateParameter(valid_594939, JString, required = true,
                                 default = nil)
  if valid_594939 != nil:
    section.add "entityName", valid_594939
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594940 = query.getOrDefault("api-version")
  valid_594940 = validateParameter(valid_594940, JString, required = true,
                                 default = nil)
  if valid_594940 != nil:
    section.add "api-version", valid_594940
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594942: Call_WebAppsUpdateRelayServiceConnection_594933;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_594942.validator(path, query, header, formData, body)
  let scheme = call_594942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594942.url(scheme.get, call_594942.host, call_594942.base,
                         call_594942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594942, url, valid)

proc call*(call_594943: Call_WebAppsUpdateRelayServiceConnection_594933;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_594944 = newJObject()
  var query_594945 = newJObject()
  var body_594946 = newJObject()
  add(path_594944, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_594946 = connectionEnvelope
  add(path_594944, "name", newJString(name))
  add(query_594945, "api-version", newJString(apiVersion))
  add(path_594944, "subscriptionId", newJString(subscriptionId))
  add(path_594944, "entityName", newJString(entityName))
  result = call_594943.call(path_594944, query_594945, nil, nil, body_594946)

var webAppsUpdateRelayServiceConnection* = Call_WebAppsUpdateRelayServiceConnection_594933(
    name: "webAppsUpdateRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnection_594934, base: "",
    url: url_WebAppsUpdateRelayServiceConnection_594935, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnection_594921 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteRelayServiceConnection_594923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnection_594922(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594924 = path.getOrDefault("resourceGroupName")
  valid_594924 = validateParameter(valid_594924, JString, required = true,
                                 default = nil)
  if valid_594924 != nil:
    section.add "resourceGroupName", valid_594924
  var valid_594925 = path.getOrDefault("name")
  valid_594925 = validateParameter(valid_594925, JString, required = true,
                                 default = nil)
  if valid_594925 != nil:
    section.add "name", valid_594925
  var valid_594926 = path.getOrDefault("subscriptionId")
  valid_594926 = validateParameter(valid_594926, JString, required = true,
                                 default = nil)
  if valid_594926 != nil:
    section.add "subscriptionId", valid_594926
  var valid_594927 = path.getOrDefault("entityName")
  valid_594927 = validateParameter(valid_594927, JString, required = true,
                                 default = nil)
  if valid_594927 != nil:
    section.add "entityName", valid_594927
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594928 = query.getOrDefault("api-version")
  valid_594928 = validateParameter(valid_594928, JString, required = true,
                                 default = nil)
  if valid_594928 != nil:
    section.add "api-version", valid_594928
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594929: Call_WebAppsDeleteRelayServiceConnection_594921;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_594929.validator(path, query, header, formData, body)
  let scheme = call_594929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594929.url(scheme.get, call_594929.host, call_594929.base,
                         call_594929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594929, url, valid)

proc call*(call_594930: Call_WebAppsDeleteRelayServiceConnection_594921;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnection
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_594931 = newJObject()
  var query_594932 = newJObject()
  add(path_594931, "resourceGroupName", newJString(resourceGroupName))
  add(query_594932, "api-version", newJString(apiVersion))
  add(path_594931, "name", newJString(name))
  add(path_594931, "subscriptionId", newJString(subscriptionId))
  add(path_594931, "entityName", newJString(entityName))
  result = call_594930.call(path_594931, query_594932, nil, nil, nil)

var webAppsDeleteRelayServiceConnection* = Call_WebAppsDeleteRelayServiceConnection_594921(
    name: "webAppsDeleteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnection_594922, base: "",
    url: url_WebAppsDeleteRelayServiceConnection_594923, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiers_594947 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceIdentifiers_594949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiers_594948(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594950 = path.getOrDefault("resourceGroupName")
  valid_594950 = validateParameter(valid_594950, JString, required = true,
                                 default = nil)
  if valid_594950 != nil:
    section.add "resourceGroupName", valid_594950
  var valid_594951 = path.getOrDefault("name")
  valid_594951 = validateParameter(valid_594951, JString, required = true,
                                 default = nil)
  if valid_594951 != nil:
    section.add "name", valid_594951
  var valid_594952 = path.getOrDefault("subscriptionId")
  valid_594952 = validateParameter(valid_594952, JString, required = true,
                                 default = nil)
  if valid_594952 != nil:
    section.add "subscriptionId", valid_594952
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594953 = query.getOrDefault("api-version")
  valid_594953 = validateParameter(valid_594953, JString, required = true,
                                 default = nil)
  if valid_594953 != nil:
    section.add "api-version", valid_594953
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594954: Call_WebAppsListInstanceIdentifiers_594947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_594954.validator(path, query, header, formData, body)
  let scheme = call_594954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594954.url(scheme.get, call_594954.host, call_594954.base,
                         call_594954.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594954, url, valid)

proc call*(call_594955: Call_WebAppsListInstanceIdentifiers_594947;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiers
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_594956 = newJObject()
  var query_594957 = newJObject()
  add(path_594956, "resourceGroupName", newJString(resourceGroupName))
  add(query_594957, "api-version", newJString(apiVersion))
  add(path_594956, "name", newJString(name))
  add(path_594956, "subscriptionId", newJString(subscriptionId))
  result = call_594955.call(path_594956, query_594957, nil, nil, nil)

var webAppsListInstanceIdentifiers* = Call_WebAppsListInstanceIdentifiers_594947(
    name: "webAppsListInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_WebAppsListInstanceIdentifiers_594948, base: "",
    url: url_WebAppsListInstanceIdentifiers_594949, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperation_594970 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateInstanceMSDeployOperation_594972(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperation_594971(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594973 = path.getOrDefault("resourceGroupName")
  valid_594973 = validateParameter(valid_594973, JString, required = true,
                                 default = nil)
  if valid_594973 != nil:
    section.add "resourceGroupName", valid_594973
  var valid_594974 = path.getOrDefault("name")
  valid_594974 = validateParameter(valid_594974, JString, required = true,
                                 default = nil)
  if valid_594974 != nil:
    section.add "name", valid_594974
  var valid_594975 = path.getOrDefault("subscriptionId")
  valid_594975 = validateParameter(valid_594975, JString, required = true,
                                 default = nil)
  if valid_594975 != nil:
    section.add "subscriptionId", valid_594975
  var valid_594976 = path.getOrDefault("instanceId")
  valid_594976 = validateParameter(valid_594976, JString, required = true,
                                 default = nil)
  if valid_594976 != nil:
    section.add "instanceId", valid_594976
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594977 = query.getOrDefault("api-version")
  valid_594977 = validateParameter(valid_594977, JString, required = true,
                                 default = nil)
  if valid_594977 != nil:
    section.add "api-version", valid_594977
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594979: Call_WebAppsCreateInstanceMSDeployOperation_594970;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_594979.validator(path, query, header, formData, body)
  let scheme = call_594979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594979.url(scheme.get, call_594979.host, call_594979.base,
                         call_594979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594979, url, valid)

proc call*(call_594980: Call_WebAppsCreateInstanceMSDeployOperation_594970;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_594981 = newJObject()
  var query_594982 = newJObject()
  var body_594983 = newJObject()
  add(path_594981, "resourceGroupName", newJString(resourceGroupName))
  add(query_594982, "api-version", newJString(apiVersion))
  add(path_594981, "name", newJString(name))
  add(path_594981, "subscriptionId", newJString(subscriptionId))
  add(path_594981, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_594983 = MSDeploy
  result = call_594980.call(path_594981, query_594982, nil, nil, body_594983)

var webAppsCreateInstanceMSDeployOperation* = Call_WebAppsCreateInstanceMSDeployOperation_594970(
    name: "webAppsCreateInstanceMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperation_594971, base: "",
    url: url_WebAppsCreateInstanceMSDeployOperation_594972,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatus_594958 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMsDeployStatus_594960(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatus_594959(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594961 = path.getOrDefault("resourceGroupName")
  valid_594961 = validateParameter(valid_594961, JString, required = true,
                                 default = nil)
  if valid_594961 != nil:
    section.add "resourceGroupName", valid_594961
  var valid_594962 = path.getOrDefault("name")
  valid_594962 = validateParameter(valid_594962, JString, required = true,
                                 default = nil)
  if valid_594962 != nil:
    section.add "name", valid_594962
  var valid_594963 = path.getOrDefault("subscriptionId")
  valid_594963 = validateParameter(valid_594963, JString, required = true,
                                 default = nil)
  if valid_594963 != nil:
    section.add "subscriptionId", valid_594963
  var valid_594964 = path.getOrDefault("instanceId")
  valid_594964 = validateParameter(valid_594964, JString, required = true,
                                 default = nil)
  if valid_594964 != nil:
    section.add "instanceId", valid_594964
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594965 = query.getOrDefault("api-version")
  valid_594965 = validateParameter(valid_594965, JString, required = true,
                                 default = nil)
  if valid_594965 != nil:
    section.add "api-version", valid_594965
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594966: Call_WebAppsGetInstanceMsDeployStatus_594958;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_594966.validator(path, query, header, formData, body)
  let scheme = call_594966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594966.url(scheme.get, call_594966.host, call_594966.base,
                         call_594966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594966, url, valid)

proc call*(call_594967: Call_WebAppsGetInstanceMsDeployStatus_594958;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_594968 = newJObject()
  var query_594969 = newJObject()
  add(path_594968, "resourceGroupName", newJString(resourceGroupName))
  add(query_594969, "api-version", newJString(apiVersion))
  add(path_594968, "name", newJString(name))
  add(path_594968, "subscriptionId", newJString(subscriptionId))
  add(path_594968, "instanceId", newJString(instanceId))
  result = call_594967.call(path_594968, query_594969, nil, nil, nil)

var webAppsGetInstanceMsDeployStatus* = Call_WebAppsGetInstanceMsDeployStatus_594958(
    name: "webAppsGetInstanceMsDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatus_594959, base: "",
    url: url_WebAppsGetInstanceMsDeployStatus_594960, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLog_594984 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMSDeployLog_594986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLog_594985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594987 = path.getOrDefault("resourceGroupName")
  valid_594987 = validateParameter(valid_594987, JString, required = true,
                                 default = nil)
  if valid_594987 != nil:
    section.add "resourceGroupName", valid_594987
  var valid_594988 = path.getOrDefault("name")
  valid_594988 = validateParameter(valid_594988, JString, required = true,
                                 default = nil)
  if valid_594988 != nil:
    section.add "name", valid_594988
  var valid_594989 = path.getOrDefault("subscriptionId")
  valid_594989 = validateParameter(valid_594989, JString, required = true,
                                 default = nil)
  if valid_594989 != nil:
    section.add "subscriptionId", valid_594989
  var valid_594990 = path.getOrDefault("instanceId")
  valid_594990 = validateParameter(valid_594990, JString, required = true,
                                 default = nil)
  if valid_594990 != nil:
    section.add "instanceId", valid_594990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594991 = query.getOrDefault("api-version")
  valid_594991 = validateParameter(valid_594991, JString, required = true,
                                 default = nil)
  if valid_594991 != nil:
    section.add "api-version", valid_594991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594992: Call_WebAppsGetInstanceMSDeployLog_594984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_594992.validator(path, query, header, formData, body)
  let scheme = call_594992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594992.url(scheme.get, call_594992.host, call_594992.base,
                         call_594992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594992, url, valid)

proc call*(call_594993: Call_WebAppsGetInstanceMSDeployLog_594984;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_594994 = newJObject()
  var query_594995 = newJObject()
  add(path_594994, "resourceGroupName", newJString(resourceGroupName))
  add(query_594995, "api-version", newJString(apiVersion))
  add(path_594994, "name", newJString(name))
  add(path_594994, "subscriptionId", newJString(subscriptionId))
  add(path_594994, "instanceId", newJString(instanceId))
  result = call_594993.call(path_594994, query_594995, nil, nil, nil)

var webAppsGetInstanceMSDeployLog* = Call_WebAppsGetInstanceMSDeployLog_594984(
    name: "webAppsGetInstanceMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLog_594985, base: "",
    url: url_WebAppsGetInstanceMSDeployLog_594986, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcesses_594996 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcesses_594998(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcesses_594997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594999 = path.getOrDefault("resourceGroupName")
  valid_594999 = validateParameter(valid_594999, JString, required = true,
                                 default = nil)
  if valid_594999 != nil:
    section.add "resourceGroupName", valid_594999
  var valid_595000 = path.getOrDefault("name")
  valid_595000 = validateParameter(valid_595000, JString, required = true,
                                 default = nil)
  if valid_595000 != nil:
    section.add "name", valid_595000
  var valid_595001 = path.getOrDefault("subscriptionId")
  valid_595001 = validateParameter(valid_595001, JString, required = true,
                                 default = nil)
  if valid_595001 != nil:
    section.add "subscriptionId", valid_595001
  var valid_595002 = path.getOrDefault("instanceId")
  valid_595002 = validateParameter(valid_595002, JString, required = true,
                                 default = nil)
  if valid_595002 != nil:
    section.add "instanceId", valid_595002
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595003 = query.getOrDefault("api-version")
  valid_595003 = validateParameter(valid_595003, JString, required = true,
                                 default = nil)
  if valid_595003 != nil:
    section.add "api-version", valid_595003
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595004: Call_WebAppsListInstanceProcesses_594996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595004.validator(path, query, header, formData, body)
  let scheme = call_595004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595004.url(scheme.get, call_595004.host, call_595004.base,
                         call_595004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595004, url, valid)

proc call*(call_595005: Call_WebAppsListInstanceProcesses_594996;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595006 = newJObject()
  var query_595007 = newJObject()
  add(path_595006, "resourceGroupName", newJString(resourceGroupName))
  add(query_595007, "api-version", newJString(apiVersion))
  add(path_595006, "name", newJString(name))
  add(path_595006, "subscriptionId", newJString(subscriptionId))
  add(path_595006, "instanceId", newJString(instanceId))
  result = call_595005.call(path_595006, query_595007, nil, nil, nil)

var webAppsListInstanceProcesses* = Call_WebAppsListInstanceProcesses_594996(
    name: "webAppsListInstanceProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcesses_594997, base: "",
    url: url_WebAppsListInstanceProcesses_594998, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcess_595008 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcess_595010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcess_595009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595011 = path.getOrDefault("resourceGroupName")
  valid_595011 = validateParameter(valid_595011, JString, required = true,
                                 default = nil)
  if valid_595011 != nil:
    section.add "resourceGroupName", valid_595011
  var valid_595012 = path.getOrDefault("name")
  valid_595012 = validateParameter(valid_595012, JString, required = true,
                                 default = nil)
  if valid_595012 != nil:
    section.add "name", valid_595012
  var valid_595013 = path.getOrDefault("processId")
  valid_595013 = validateParameter(valid_595013, JString, required = true,
                                 default = nil)
  if valid_595013 != nil:
    section.add "processId", valid_595013
  var valid_595014 = path.getOrDefault("subscriptionId")
  valid_595014 = validateParameter(valid_595014, JString, required = true,
                                 default = nil)
  if valid_595014 != nil:
    section.add "subscriptionId", valid_595014
  var valid_595015 = path.getOrDefault("instanceId")
  valid_595015 = validateParameter(valid_595015, JString, required = true,
                                 default = nil)
  if valid_595015 != nil:
    section.add "instanceId", valid_595015
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595016 = query.getOrDefault("api-version")
  valid_595016 = validateParameter(valid_595016, JString, required = true,
                                 default = nil)
  if valid_595016 != nil:
    section.add "api-version", valid_595016
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595017: Call_WebAppsGetInstanceProcess_595008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595017.validator(path, query, header, formData, body)
  let scheme = call_595017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595017.url(scheme.get, call_595017.host, call_595017.base,
                         call_595017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595017, url, valid)

proc call*(call_595018: Call_WebAppsGetInstanceProcess_595008;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595019 = newJObject()
  var query_595020 = newJObject()
  add(path_595019, "resourceGroupName", newJString(resourceGroupName))
  add(query_595020, "api-version", newJString(apiVersion))
  add(path_595019, "name", newJString(name))
  add(path_595019, "processId", newJString(processId))
  add(path_595019, "subscriptionId", newJString(subscriptionId))
  add(path_595019, "instanceId", newJString(instanceId))
  result = call_595018.call(path_595019, query_595020, nil, nil, nil)

var webAppsGetInstanceProcess* = Call_WebAppsGetInstanceProcess_595008(
    name: "webAppsGetInstanceProcess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcess_595009, base: "",
    url: url_WebAppsGetInstanceProcess_595010, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcess_595021 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteInstanceProcess_595023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcess_595022(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595024 = path.getOrDefault("resourceGroupName")
  valid_595024 = validateParameter(valid_595024, JString, required = true,
                                 default = nil)
  if valid_595024 != nil:
    section.add "resourceGroupName", valid_595024
  var valid_595025 = path.getOrDefault("name")
  valid_595025 = validateParameter(valid_595025, JString, required = true,
                                 default = nil)
  if valid_595025 != nil:
    section.add "name", valid_595025
  var valid_595026 = path.getOrDefault("processId")
  valid_595026 = validateParameter(valid_595026, JString, required = true,
                                 default = nil)
  if valid_595026 != nil:
    section.add "processId", valid_595026
  var valid_595027 = path.getOrDefault("subscriptionId")
  valid_595027 = validateParameter(valid_595027, JString, required = true,
                                 default = nil)
  if valid_595027 != nil:
    section.add "subscriptionId", valid_595027
  var valid_595028 = path.getOrDefault("instanceId")
  valid_595028 = validateParameter(valid_595028, JString, required = true,
                                 default = nil)
  if valid_595028 != nil:
    section.add "instanceId", valid_595028
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595029 = query.getOrDefault("api-version")
  valid_595029 = validateParameter(valid_595029, JString, required = true,
                                 default = nil)
  if valid_595029 != nil:
    section.add "api-version", valid_595029
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595030: Call_WebAppsDeleteInstanceProcess_595021; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_595030.validator(path, query, header, formData, body)
  let scheme = call_595030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595030.url(scheme.get, call_595030.host, call_595030.base,
                         call_595030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595030, url, valid)

proc call*(call_595031: Call_WebAppsDeleteInstanceProcess_595021;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595032 = newJObject()
  var query_595033 = newJObject()
  add(path_595032, "resourceGroupName", newJString(resourceGroupName))
  add(query_595033, "api-version", newJString(apiVersion))
  add(path_595032, "name", newJString(name))
  add(path_595032, "processId", newJString(processId))
  add(path_595032, "subscriptionId", newJString(subscriptionId))
  add(path_595032, "instanceId", newJString(instanceId))
  result = call_595031.call(path_595032, query_595033, nil, nil, nil)

var webAppsDeleteInstanceProcess* = Call_WebAppsDeleteInstanceProcess_595021(
    name: "webAppsDeleteInstanceProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcess_595022, base: "",
    url: url_WebAppsDeleteInstanceProcess_595023, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDump_595034 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessDump_595036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDump_595035(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595037 = path.getOrDefault("resourceGroupName")
  valid_595037 = validateParameter(valid_595037, JString, required = true,
                                 default = nil)
  if valid_595037 != nil:
    section.add "resourceGroupName", valid_595037
  var valid_595038 = path.getOrDefault("name")
  valid_595038 = validateParameter(valid_595038, JString, required = true,
                                 default = nil)
  if valid_595038 != nil:
    section.add "name", valid_595038
  var valid_595039 = path.getOrDefault("processId")
  valid_595039 = validateParameter(valid_595039, JString, required = true,
                                 default = nil)
  if valid_595039 != nil:
    section.add "processId", valid_595039
  var valid_595040 = path.getOrDefault("subscriptionId")
  valid_595040 = validateParameter(valid_595040, JString, required = true,
                                 default = nil)
  if valid_595040 != nil:
    section.add "subscriptionId", valid_595040
  var valid_595041 = path.getOrDefault("instanceId")
  valid_595041 = validateParameter(valid_595041, JString, required = true,
                                 default = nil)
  if valid_595041 != nil:
    section.add "instanceId", valid_595041
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595042 = query.getOrDefault("api-version")
  valid_595042 = validateParameter(valid_595042, JString, required = true,
                                 default = nil)
  if valid_595042 != nil:
    section.add "api-version", valid_595042
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595043: Call_WebAppsGetInstanceProcessDump_595034; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595043.validator(path, query, header, formData, body)
  let scheme = call_595043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595043.url(scheme.get, call_595043.host, call_595043.base,
                         call_595043.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595043, url, valid)

proc call*(call_595044: Call_WebAppsGetInstanceProcessDump_595034;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595045 = newJObject()
  var query_595046 = newJObject()
  add(path_595045, "resourceGroupName", newJString(resourceGroupName))
  add(query_595046, "api-version", newJString(apiVersion))
  add(path_595045, "name", newJString(name))
  add(path_595045, "processId", newJString(processId))
  add(path_595045, "subscriptionId", newJString(subscriptionId))
  add(path_595045, "instanceId", newJString(instanceId))
  result = call_595044.call(path_595045, query_595046, nil, nil, nil)

var webAppsGetInstanceProcessDump* = Call_WebAppsGetInstanceProcessDump_595034(
    name: "webAppsGetInstanceProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDump_595035, base: "",
    url: url_WebAppsGetInstanceProcessDump_595036, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModules_595047 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessModules_595049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModules_595048(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595050 = path.getOrDefault("resourceGroupName")
  valid_595050 = validateParameter(valid_595050, JString, required = true,
                                 default = nil)
  if valid_595050 != nil:
    section.add "resourceGroupName", valid_595050
  var valid_595051 = path.getOrDefault("name")
  valid_595051 = validateParameter(valid_595051, JString, required = true,
                                 default = nil)
  if valid_595051 != nil:
    section.add "name", valid_595051
  var valid_595052 = path.getOrDefault("processId")
  valid_595052 = validateParameter(valid_595052, JString, required = true,
                                 default = nil)
  if valid_595052 != nil:
    section.add "processId", valid_595052
  var valid_595053 = path.getOrDefault("subscriptionId")
  valid_595053 = validateParameter(valid_595053, JString, required = true,
                                 default = nil)
  if valid_595053 != nil:
    section.add "subscriptionId", valid_595053
  var valid_595054 = path.getOrDefault("instanceId")
  valid_595054 = validateParameter(valid_595054, JString, required = true,
                                 default = nil)
  if valid_595054 != nil:
    section.add "instanceId", valid_595054
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595055 = query.getOrDefault("api-version")
  valid_595055 = validateParameter(valid_595055, JString, required = true,
                                 default = nil)
  if valid_595055 != nil:
    section.add "api-version", valid_595055
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595056: Call_WebAppsListInstanceProcessModules_595047;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595056.validator(path, query, header, formData, body)
  let scheme = call_595056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595056.url(scheme.get, call_595056.host, call_595056.base,
                         call_595056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595056, url, valid)

proc call*(call_595057: Call_WebAppsListInstanceProcessModules_595047;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595058 = newJObject()
  var query_595059 = newJObject()
  add(path_595058, "resourceGroupName", newJString(resourceGroupName))
  add(query_595059, "api-version", newJString(apiVersion))
  add(path_595058, "name", newJString(name))
  add(path_595058, "processId", newJString(processId))
  add(path_595058, "subscriptionId", newJString(subscriptionId))
  add(path_595058, "instanceId", newJString(instanceId))
  result = call_595057.call(path_595058, query_595059, nil, nil, nil)

var webAppsListInstanceProcessModules* = Call_WebAppsListInstanceProcessModules_595047(
    name: "webAppsListInstanceProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModules_595048, base: "",
    url: url_WebAppsListInstanceProcessModules_595049, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModule_595060 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessModule_595062(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModule_595061(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595063 = path.getOrDefault("resourceGroupName")
  valid_595063 = validateParameter(valid_595063, JString, required = true,
                                 default = nil)
  if valid_595063 != nil:
    section.add "resourceGroupName", valid_595063
  var valid_595064 = path.getOrDefault("name")
  valid_595064 = validateParameter(valid_595064, JString, required = true,
                                 default = nil)
  if valid_595064 != nil:
    section.add "name", valid_595064
  var valid_595065 = path.getOrDefault("processId")
  valid_595065 = validateParameter(valid_595065, JString, required = true,
                                 default = nil)
  if valid_595065 != nil:
    section.add "processId", valid_595065
  var valid_595066 = path.getOrDefault("subscriptionId")
  valid_595066 = validateParameter(valid_595066, JString, required = true,
                                 default = nil)
  if valid_595066 != nil:
    section.add "subscriptionId", valid_595066
  var valid_595067 = path.getOrDefault("baseAddress")
  valid_595067 = validateParameter(valid_595067, JString, required = true,
                                 default = nil)
  if valid_595067 != nil:
    section.add "baseAddress", valid_595067
  var valid_595068 = path.getOrDefault("instanceId")
  valid_595068 = validateParameter(valid_595068, JString, required = true,
                                 default = nil)
  if valid_595068 != nil:
    section.add "instanceId", valid_595068
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595069 = query.getOrDefault("api-version")
  valid_595069 = validateParameter(valid_595069, JString, required = true,
                                 default = nil)
  if valid_595069 != nil:
    section.add "api-version", valid_595069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595070: Call_WebAppsGetInstanceProcessModule_595060;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595070.validator(path, query, header, formData, body)
  let scheme = call_595070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595070.url(scheme.get, call_595070.host, call_595070.base,
                         call_595070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595070, url, valid)

proc call*(call_595071: Call_WebAppsGetInstanceProcessModule_595060;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595072 = newJObject()
  var query_595073 = newJObject()
  add(path_595072, "resourceGroupName", newJString(resourceGroupName))
  add(query_595073, "api-version", newJString(apiVersion))
  add(path_595072, "name", newJString(name))
  add(path_595072, "processId", newJString(processId))
  add(path_595072, "subscriptionId", newJString(subscriptionId))
  add(path_595072, "baseAddress", newJString(baseAddress))
  add(path_595072, "instanceId", newJString(instanceId))
  result = call_595071.call(path_595072, query_595073, nil, nil, nil)

var webAppsGetInstanceProcessModule* = Call_WebAppsGetInstanceProcessModule_595060(
    name: "webAppsGetInstanceProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModule_595061, base: "",
    url: url_WebAppsGetInstanceProcessModule_595062, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreads_595074 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessThreads_595076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreads_595075(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595077 = path.getOrDefault("resourceGroupName")
  valid_595077 = validateParameter(valid_595077, JString, required = true,
                                 default = nil)
  if valid_595077 != nil:
    section.add "resourceGroupName", valid_595077
  var valid_595078 = path.getOrDefault("name")
  valid_595078 = validateParameter(valid_595078, JString, required = true,
                                 default = nil)
  if valid_595078 != nil:
    section.add "name", valid_595078
  var valid_595079 = path.getOrDefault("processId")
  valid_595079 = validateParameter(valid_595079, JString, required = true,
                                 default = nil)
  if valid_595079 != nil:
    section.add "processId", valid_595079
  var valid_595080 = path.getOrDefault("subscriptionId")
  valid_595080 = validateParameter(valid_595080, JString, required = true,
                                 default = nil)
  if valid_595080 != nil:
    section.add "subscriptionId", valid_595080
  var valid_595081 = path.getOrDefault("instanceId")
  valid_595081 = validateParameter(valid_595081, JString, required = true,
                                 default = nil)
  if valid_595081 != nil:
    section.add "instanceId", valid_595081
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595082 = query.getOrDefault("api-version")
  valid_595082 = validateParameter(valid_595082, JString, required = true,
                                 default = nil)
  if valid_595082 != nil:
    section.add "api-version", valid_595082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595083: Call_WebAppsListInstanceProcessThreads_595074;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595083.validator(path, query, header, formData, body)
  let scheme = call_595083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595083.url(scheme.get, call_595083.host, call_595083.base,
                         call_595083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595083, url, valid)

proc call*(call_595084: Call_WebAppsListInstanceProcessThreads_595074;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_595085 = newJObject()
  var query_595086 = newJObject()
  add(path_595085, "resourceGroupName", newJString(resourceGroupName))
  add(query_595086, "api-version", newJString(apiVersion))
  add(path_595085, "name", newJString(name))
  add(path_595085, "processId", newJString(processId))
  add(path_595085, "subscriptionId", newJString(subscriptionId))
  add(path_595085, "instanceId", newJString(instanceId))
  result = call_595084.call(path_595085, query_595086, nil, nil, nil)

var webAppsListInstanceProcessThreads* = Call_WebAppsListInstanceProcessThreads_595074(
    name: "webAppsListInstanceProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreads_595075, base: "",
    url: url_WebAppsListInstanceProcessThreads_595076, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThread_595087 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessThread_595089(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThread_595088(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595090 = path.getOrDefault("resourceGroupName")
  valid_595090 = validateParameter(valid_595090, JString, required = true,
                                 default = nil)
  if valid_595090 != nil:
    section.add "resourceGroupName", valid_595090
  var valid_595091 = path.getOrDefault("name")
  valid_595091 = validateParameter(valid_595091, JString, required = true,
                                 default = nil)
  if valid_595091 != nil:
    section.add "name", valid_595091
  var valid_595092 = path.getOrDefault("processId")
  valid_595092 = validateParameter(valid_595092, JString, required = true,
                                 default = nil)
  if valid_595092 != nil:
    section.add "processId", valid_595092
  var valid_595093 = path.getOrDefault("subscriptionId")
  valid_595093 = validateParameter(valid_595093, JString, required = true,
                                 default = nil)
  if valid_595093 != nil:
    section.add "subscriptionId", valid_595093
  var valid_595094 = path.getOrDefault("instanceId")
  valid_595094 = validateParameter(valid_595094, JString, required = true,
                                 default = nil)
  if valid_595094 != nil:
    section.add "instanceId", valid_595094
  var valid_595095 = path.getOrDefault("threadId")
  valid_595095 = validateParameter(valid_595095, JString, required = true,
                                 default = nil)
  if valid_595095 != nil:
    section.add "threadId", valid_595095
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595096 = query.getOrDefault("api-version")
  valid_595096 = validateParameter(valid_595096, JString, required = true,
                                 default = nil)
  if valid_595096 != nil:
    section.add "api-version", valid_595096
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595097: Call_WebAppsGetInstanceProcessThread_595087;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_595097.validator(path, query, header, formData, body)
  let scheme = call_595097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595097.url(scheme.get, call_595097.host, call_595097.base,
                         call_595097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595097, url, valid)

proc call*(call_595098: Call_WebAppsGetInstanceProcessThread_595087;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_595099 = newJObject()
  var query_595100 = newJObject()
  add(path_595099, "resourceGroupName", newJString(resourceGroupName))
  add(query_595100, "api-version", newJString(apiVersion))
  add(path_595099, "name", newJString(name))
  add(path_595099, "processId", newJString(processId))
  add(path_595099, "subscriptionId", newJString(subscriptionId))
  add(path_595099, "instanceId", newJString(instanceId))
  add(path_595099, "threadId", newJString(threadId))
  result = call_595098.call(path_595099, query_595100, nil, nil, nil)

var webAppsGetInstanceProcessThread* = Call_WebAppsGetInstanceProcessThread_595087(
    name: "webAppsGetInstanceProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThread_595088, base: "",
    url: url_WebAppsGetInstanceProcessThread_595089, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneable_595101 = ref object of OpenApiRestCall_593437
proc url_WebAppsIsCloneable_595103(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneable_595102(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595104 = path.getOrDefault("resourceGroupName")
  valid_595104 = validateParameter(valid_595104, JString, required = true,
                                 default = nil)
  if valid_595104 != nil:
    section.add "resourceGroupName", valid_595104
  var valid_595105 = path.getOrDefault("name")
  valid_595105 = validateParameter(valid_595105, JString, required = true,
                                 default = nil)
  if valid_595105 != nil:
    section.add "name", valid_595105
  var valid_595106 = path.getOrDefault("subscriptionId")
  valid_595106 = validateParameter(valid_595106, JString, required = true,
                                 default = nil)
  if valid_595106 != nil:
    section.add "subscriptionId", valid_595106
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595107 = query.getOrDefault("api-version")
  valid_595107 = validateParameter(valid_595107, JString, required = true,
                                 default = nil)
  if valid_595107 != nil:
    section.add "api-version", valid_595107
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595108: Call_WebAppsIsCloneable_595101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_595108.validator(path, query, header, formData, body)
  let scheme = call_595108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595108.url(scheme.get, call_595108.host, call_595108.base,
                         call_595108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595108, url, valid)

proc call*(call_595109: Call_WebAppsIsCloneable_595101; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsIsCloneable
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595110 = newJObject()
  var query_595111 = newJObject()
  add(path_595110, "resourceGroupName", newJString(resourceGroupName))
  add(query_595111, "api-version", newJString(apiVersion))
  add(path_595110, "name", newJString(name))
  add(path_595110, "subscriptionId", newJString(subscriptionId))
  result = call_595109.call(path_595110, query_595111, nil, nil, nil)

var webAppsIsCloneable* = Call_WebAppsIsCloneable_595101(
    name: "webAppsIsCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_WebAppsIsCloneable_595102, base: "",
    url: url_WebAppsIsCloneable_595103, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggers_595112 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSyncFunctionTriggers_595114(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggers_595113(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595115 = path.getOrDefault("resourceGroupName")
  valid_595115 = validateParameter(valid_595115, JString, required = true,
                                 default = nil)
  if valid_595115 != nil:
    section.add "resourceGroupName", valid_595115
  var valid_595116 = path.getOrDefault("name")
  valid_595116 = validateParameter(valid_595116, JString, required = true,
                                 default = nil)
  if valid_595116 != nil:
    section.add "name", valid_595116
  var valid_595117 = path.getOrDefault("subscriptionId")
  valid_595117 = validateParameter(valid_595117, JString, required = true,
                                 default = nil)
  if valid_595117 != nil:
    section.add "subscriptionId", valid_595117
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595118 = query.getOrDefault("api-version")
  valid_595118 = validateParameter(valid_595118, JString, required = true,
                                 default = nil)
  if valid_595118 != nil:
    section.add "api-version", valid_595118
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595119: Call_WebAppsListSyncFunctionTriggers_595112;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_595119.validator(path, query, header, formData, body)
  let scheme = call_595119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595119.url(scheme.get, call_595119.host, call_595119.base,
                         call_595119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595119, url, valid)

proc call*(call_595120: Call_WebAppsListSyncFunctionTriggers_595112;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggers
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595121 = newJObject()
  var query_595122 = newJObject()
  add(path_595121, "resourceGroupName", newJString(resourceGroupName))
  add(query_595122, "api-version", newJString(apiVersion))
  add(path_595121, "name", newJString(name))
  add(path_595121, "subscriptionId", newJString(subscriptionId))
  result = call_595120.call(path_595121, query_595122, nil, nil, nil)

var webAppsListSyncFunctionTriggers* = Call_WebAppsListSyncFunctionTriggers_595112(
    name: "webAppsListSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggers_595113, base: "",
    url: url_WebAppsListSyncFunctionTriggers_595114, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitions_595123 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetricDefinitions_595125(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitions_595124(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595126 = path.getOrDefault("resourceGroupName")
  valid_595126 = validateParameter(valid_595126, JString, required = true,
                                 default = nil)
  if valid_595126 != nil:
    section.add "resourceGroupName", valid_595126
  var valid_595127 = path.getOrDefault("name")
  valid_595127 = validateParameter(valid_595127, JString, required = true,
                                 default = nil)
  if valid_595127 != nil:
    section.add "name", valid_595127
  var valid_595128 = path.getOrDefault("subscriptionId")
  valid_595128 = validateParameter(valid_595128, JString, required = true,
                                 default = nil)
  if valid_595128 != nil:
    section.add "subscriptionId", valid_595128
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595129 = query.getOrDefault("api-version")
  valid_595129 = validateParameter(valid_595129, JString, required = true,
                                 default = nil)
  if valid_595129 != nil:
    section.add "api-version", valid_595129
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595130: Call_WebAppsListMetricDefinitions_595123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_595130.validator(path, query, header, formData, body)
  let scheme = call_595130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595130.url(scheme.get, call_595130.host, call_595130.base,
                         call_595130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595130, url, valid)

proc call*(call_595131: Call_WebAppsListMetricDefinitions_595123;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitions
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595132 = newJObject()
  var query_595133 = newJObject()
  add(path_595132, "resourceGroupName", newJString(resourceGroupName))
  add(query_595133, "api-version", newJString(apiVersion))
  add(path_595132, "name", newJString(name))
  add(path_595132, "subscriptionId", newJString(subscriptionId))
  result = call_595131.call(path_595132, query_595133, nil, nil, nil)

var webAppsListMetricDefinitions* = Call_WebAppsListMetricDefinitions_595123(
    name: "webAppsListMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitions_595124, base: "",
    url: url_WebAppsListMetricDefinitions_595125, schemes: {Scheme.Https})
type
  Call_WebAppsListMetrics_595134 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetrics_595136(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetrics_595135(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595138 = path.getOrDefault("resourceGroupName")
  valid_595138 = validateParameter(valid_595138, JString, required = true,
                                 default = nil)
  if valid_595138 != nil:
    section.add "resourceGroupName", valid_595138
  var valid_595139 = path.getOrDefault("name")
  valid_595139 = validateParameter(valid_595139, JString, required = true,
                                 default = nil)
  if valid_595139 != nil:
    section.add "name", valid_595139
  var valid_595140 = path.getOrDefault("subscriptionId")
  valid_595140 = validateParameter(valid_595140, JString, required = true,
                                 default = nil)
  if valid_595140 != nil:
    section.add "subscriptionId", valid_595140
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595141 = query.getOrDefault("api-version")
  valid_595141 = validateParameter(valid_595141, JString, required = true,
                                 default = nil)
  if valid_595141 != nil:
    section.add "api-version", valid_595141
  var valid_595142 = query.getOrDefault("details")
  valid_595142 = validateParameter(valid_595142, JBool, required = false, default = nil)
  if valid_595142 != nil:
    section.add "details", valid_595142
  var valid_595143 = query.getOrDefault("$filter")
  valid_595143 = validateParameter(valid_595143, JString, required = false,
                                 default = nil)
  if valid_595143 != nil:
    section.add "$filter", valid_595143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595144: Call_WebAppsListMetrics_595134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_595144.validator(path, query, header, formData, body)
  let scheme = call_595144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595144.url(scheme.get, call_595144.host, call_595144.base,
                         call_595144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595144, url, valid)

proc call*(call_595145: Call_WebAppsListMetrics_595134; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetrics
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595146 = newJObject()
  var query_595147 = newJObject()
  add(path_595146, "resourceGroupName", newJString(resourceGroupName))
  add(query_595147, "api-version", newJString(apiVersion))
  add(path_595146, "name", newJString(name))
  add(query_595147, "details", newJBool(details))
  add(path_595146, "subscriptionId", newJString(subscriptionId))
  add(query_595147, "$filter", newJString(Filter))
  result = call_595145.call(path_595146, query_595147, nil, nil, nil)

var webAppsListMetrics* = Call_WebAppsListMetrics_595134(
    name: "webAppsListMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_WebAppsListMetrics_595135, base: "",
    url: url_WebAppsListMetrics_595136, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateStorage_595148 = ref object of OpenApiRestCall_593437
proc url_WebAppsMigrateStorage_595150(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migrate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateStorage_595149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595151 = path.getOrDefault("resourceGroupName")
  valid_595151 = validateParameter(valid_595151, JString, required = true,
                                 default = nil)
  if valid_595151 != nil:
    section.add "resourceGroupName", valid_595151
  var valid_595152 = path.getOrDefault("name")
  valid_595152 = validateParameter(valid_595152, JString, required = true,
                                 default = nil)
  if valid_595152 != nil:
    section.add "name", valid_595152
  var valid_595153 = path.getOrDefault("subscriptionId")
  valid_595153 = validateParameter(valid_595153, JString, required = true,
                                 default = nil)
  if valid_595153 != nil:
    section.add "subscriptionId", valid_595153
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   subscriptionName: JString (required)
  ##                   : Azure subscription.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595154 = query.getOrDefault("api-version")
  valid_595154 = validateParameter(valid_595154, JString, required = true,
                                 default = nil)
  if valid_595154 != nil:
    section.add "api-version", valid_595154
  var valid_595155 = query.getOrDefault("subscriptionName")
  valid_595155 = validateParameter(valid_595155, JString, required = true,
                                 default = nil)
  if valid_595155 != nil:
    section.add "subscriptionName", valid_595155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595157: Call_WebAppsMigrateStorage_595148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app.
  ## 
  let valid = call_595157.validator(path, query, header, formData, body)
  let scheme = call_595157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595157.url(scheme.get, call_595157.host, call_595157.base,
                         call_595157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595157, url, valid)

proc call*(call_595158: Call_WebAppsMigrateStorage_595148;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionName: string; subscriptionId: string;
          migrationOptions: JsonNode): Recallable =
  ## webAppsMigrateStorage
  ## Restores a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionName: string (required)
  ##                   : Azure subscription.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  var path_595159 = newJObject()
  var query_595160 = newJObject()
  var body_595161 = newJObject()
  add(path_595159, "resourceGroupName", newJString(resourceGroupName))
  add(query_595160, "api-version", newJString(apiVersion))
  add(path_595159, "name", newJString(name))
  add(query_595160, "subscriptionName", newJString(subscriptionName))
  add(path_595159, "subscriptionId", newJString(subscriptionId))
  if migrationOptions != nil:
    body_595161 = migrationOptions
  result = call_595158.call(path_595159, query_595160, nil, nil, body_595161)

var webAppsMigrateStorage* = Call_WebAppsMigrateStorage_595148(
    name: "webAppsMigrateStorage", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    validator: validate_WebAppsMigrateStorage_595149, base: "",
    url: url_WebAppsMigrateStorage_595150, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateMySql_595162 = ref object of OpenApiRestCall_593437
proc url_WebAppsMigrateMySql_595164(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateMySql_595163(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595165 = path.getOrDefault("resourceGroupName")
  valid_595165 = validateParameter(valid_595165, JString, required = true,
                                 default = nil)
  if valid_595165 != nil:
    section.add "resourceGroupName", valid_595165
  var valid_595166 = path.getOrDefault("name")
  valid_595166 = validateParameter(valid_595166, JString, required = true,
                                 default = nil)
  if valid_595166 != nil:
    section.add "name", valid_595166
  var valid_595167 = path.getOrDefault("subscriptionId")
  valid_595167 = validateParameter(valid_595167, JString, required = true,
                                 default = nil)
  if valid_595167 != nil:
    section.add "subscriptionId", valid_595167
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595168 = query.getOrDefault("api-version")
  valid_595168 = validateParameter(valid_595168, JString, required = true,
                                 default = nil)
  if valid_595168 != nil:
    section.add "api-version", valid_595168
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595170: Call_WebAppsMigrateMySql_595162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  let valid = call_595170.validator(path, query, header, formData, body)
  let scheme = call_595170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595170.url(scheme.get, call_595170.host, call_595170.base,
                         call_595170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595170, url, valid)

proc call*(call_595171: Call_WebAppsMigrateMySql_595162; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          migrationRequestEnvelope: JsonNode): Recallable =
  ## webAppsMigrateMySql
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  var path_595172 = newJObject()
  var query_595173 = newJObject()
  var body_595174 = newJObject()
  add(path_595172, "resourceGroupName", newJString(resourceGroupName))
  add(query_595173, "api-version", newJString(apiVersion))
  add(path_595172, "name", newJString(name))
  add(path_595172, "subscriptionId", newJString(subscriptionId))
  if migrationRequestEnvelope != nil:
    body_595174 = migrationRequestEnvelope
  result = call_595171.call(path_595172, query_595173, nil, nil, body_595174)

var webAppsMigrateMySql* = Call_WebAppsMigrateMySql_595162(
    name: "webAppsMigrateMySql", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    validator: validate_WebAppsMigrateMySql_595163, base: "",
    url: url_WebAppsMigrateMySql_595164, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatus_595175 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMigrateMySqlStatus_595177(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatus_595176(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595178 = path.getOrDefault("resourceGroupName")
  valid_595178 = validateParameter(valid_595178, JString, required = true,
                                 default = nil)
  if valid_595178 != nil:
    section.add "resourceGroupName", valid_595178
  var valid_595179 = path.getOrDefault("name")
  valid_595179 = validateParameter(valid_595179, JString, required = true,
                                 default = nil)
  if valid_595179 != nil:
    section.add "name", valid_595179
  var valid_595180 = path.getOrDefault("subscriptionId")
  valid_595180 = validateParameter(valid_595180, JString, required = true,
                                 default = nil)
  if valid_595180 != nil:
    section.add "subscriptionId", valid_595180
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595181 = query.getOrDefault("api-version")
  valid_595181 = validateParameter(valid_595181, JString, required = true,
                                 default = nil)
  if valid_595181 != nil:
    section.add "api-version", valid_595181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595182: Call_WebAppsGetMigrateMySqlStatus_595175; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_595182.validator(path, query, header, formData, body)
  let scheme = call_595182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595182.url(scheme.get, call_595182.host, call_595182.base,
                         call_595182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595182, url, valid)

proc call*(call_595183: Call_WebAppsGetMigrateMySqlStatus_595175;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatus
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595184 = newJObject()
  var query_595185 = newJObject()
  add(path_595184, "resourceGroupName", newJString(resourceGroupName))
  add(query_595185, "api-version", newJString(apiVersion))
  add(path_595184, "name", newJString(name))
  add(path_595184, "subscriptionId", newJString(subscriptionId))
  result = call_595183.call(path_595184, query_595185, nil, nil, nil)

var webAppsGetMigrateMySqlStatus* = Call_WebAppsGetMigrateMySqlStatus_595175(
    name: "webAppsGetMigrateMySqlStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatus_595176, base: "",
    url: url_WebAppsGetMigrateMySqlStatus_595177, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeatures_595186 = ref object of OpenApiRestCall_593437
proc url_WebAppsListNetworkFeatures_595188(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeatures_595187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595189 = path.getOrDefault("resourceGroupName")
  valid_595189 = validateParameter(valid_595189, JString, required = true,
                                 default = nil)
  if valid_595189 != nil:
    section.add "resourceGroupName", valid_595189
  var valid_595190 = path.getOrDefault("name")
  valid_595190 = validateParameter(valid_595190, JString, required = true,
                                 default = nil)
  if valid_595190 != nil:
    section.add "name", valid_595190
  var valid_595191 = path.getOrDefault("subscriptionId")
  valid_595191 = validateParameter(valid_595191, JString, required = true,
                                 default = nil)
  if valid_595191 != nil:
    section.add "subscriptionId", valid_595191
  var valid_595192 = path.getOrDefault("view")
  valid_595192 = validateParameter(valid_595192, JString, required = true,
                                 default = nil)
  if valid_595192 != nil:
    section.add "view", valid_595192
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595193 = query.getOrDefault("api-version")
  valid_595193 = validateParameter(valid_595193, JString, required = true,
                                 default = nil)
  if valid_595193 != nil:
    section.add "api-version", valid_595193
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595194: Call_WebAppsListNetworkFeatures_595186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_595194.validator(path, query, header, formData, body)
  let scheme = call_595194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595194.url(scheme.get, call_595194.host, call_595194.base,
                         call_595194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595194, url, valid)

proc call*(call_595195: Call_WebAppsListNetworkFeatures_595186;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeatures
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_595196 = newJObject()
  var query_595197 = newJObject()
  add(path_595196, "resourceGroupName", newJString(resourceGroupName))
  add(query_595197, "api-version", newJString(apiVersion))
  add(path_595196, "name", newJString(name))
  add(path_595196, "subscriptionId", newJString(subscriptionId))
  add(path_595196, "view", newJString(view))
  result = call_595195.call(path_595196, query_595197, nil, nil, nil)

var webAppsListNetworkFeatures* = Call_WebAppsListNetworkFeatures_595186(
    name: "webAppsListNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeatures_595187, base: "",
    url: url_WebAppsListNetworkFeatures_595188, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTrace_595198 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartWebSiteNetworkTrace_595200(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTrace_595199(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595201 = path.getOrDefault("resourceGroupName")
  valid_595201 = validateParameter(valid_595201, JString, required = true,
                                 default = nil)
  if valid_595201 != nil:
    section.add "resourceGroupName", valid_595201
  var valid_595202 = path.getOrDefault("name")
  valid_595202 = validateParameter(valid_595202, JString, required = true,
                                 default = nil)
  if valid_595202 != nil:
    section.add "name", valid_595202
  var valid_595203 = path.getOrDefault("subscriptionId")
  valid_595203 = validateParameter(valid_595203, JString, required = true,
                                 default = nil)
  if valid_595203 != nil:
    section.add "subscriptionId", valid_595203
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595204 = query.getOrDefault("api-version")
  valid_595204 = validateParameter(valid_595204, JString, required = true,
                                 default = nil)
  if valid_595204 != nil:
    section.add "api-version", valid_595204
  var valid_595205 = query.getOrDefault("durationInSeconds")
  valid_595205 = validateParameter(valid_595205, JInt, required = false, default = nil)
  if valid_595205 != nil:
    section.add "durationInSeconds", valid_595205
  var valid_595206 = query.getOrDefault("maxFrameLength")
  valid_595206 = validateParameter(valid_595206, JInt, required = false, default = nil)
  if valid_595206 != nil:
    section.add "maxFrameLength", valid_595206
  var valid_595207 = query.getOrDefault("sasUrl")
  valid_595207 = validateParameter(valid_595207, JString, required = false,
                                 default = nil)
  if valid_595207 != nil:
    section.add "sasUrl", valid_595207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595208: Call_WebAppsStartWebSiteNetworkTrace_595198;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_595208.validator(path, query, header, formData, body)
  let scheme = call_595208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595208.url(scheme.get, call_595208.host, call_595208.base,
                         call_595208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595208, url, valid)

proc call*(call_595209: Call_WebAppsStartWebSiteNetworkTrace_595198;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTrace
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_595210 = newJObject()
  var query_595211 = newJObject()
  add(path_595210, "resourceGroupName", newJString(resourceGroupName))
  add(query_595211, "api-version", newJString(apiVersion))
  add(path_595210, "name", newJString(name))
  add(path_595210, "subscriptionId", newJString(subscriptionId))
  add(query_595211, "durationInSeconds", newJInt(durationInSeconds))
  add(query_595211, "maxFrameLength", newJInt(maxFrameLength))
  add(query_595211, "sasUrl", newJString(sasUrl))
  result = call_595209.call(path_595210, query_595211, nil, nil, nil)

var webAppsStartWebSiteNetworkTrace* = Call_WebAppsStartWebSiteNetworkTrace_595198(
    name: "webAppsStartWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTrace_595199, base: "",
    url: url_WebAppsStartWebSiteNetworkTrace_595200, schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTrace_595212 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopWebSiteNetworkTrace_595214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTrace_595213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595215 = path.getOrDefault("resourceGroupName")
  valid_595215 = validateParameter(valid_595215, JString, required = true,
                                 default = nil)
  if valid_595215 != nil:
    section.add "resourceGroupName", valid_595215
  var valid_595216 = path.getOrDefault("name")
  valid_595216 = validateParameter(valid_595216, JString, required = true,
                                 default = nil)
  if valid_595216 != nil:
    section.add "name", valid_595216
  var valid_595217 = path.getOrDefault("subscriptionId")
  valid_595217 = validateParameter(valid_595217, JString, required = true,
                                 default = nil)
  if valid_595217 != nil:
    section.add "subscriptionId", valid_595217
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595218 = query.getOrDefault("api-version")
  valid_595218 = validateParameter(valid_595218, JString, required = true,
                                 default = nil)
  if valid_595218 != nil:
    section.add "api-version", valid_595218
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595219: Call_WebAppsStopWebSiteNetworkTrace_595212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_595219.validator(path, query, header, formData, body)
  let scheme = call_595219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595219.url(scheme.get, call_595219.host, call_595219.base,
                         call_595219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595219, url, valid)

proc call*(call_595220: Call_WebAppsStopWebSiteNetworkTrace_595212;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595221 = newJObject()
  var query_595222 = newJObject()
  add(path_595221, "resourceGroupName", newJString(resourceGroupName))
  add(query_595222, "api-version", newJString(apiVersion))
  add(path_595221, "name", newJString(name))
  add(path_595221, "subscriptionId", newJString(subscriptionId))
  result = call_595220.call(path_595221, query_595222, nil, nil, nil)

var webAppsStopWebSiteNetworkTrace* = Call_WebAppsStopWebSiteNetworkTrace_595212(
    name: "webAppsStopWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTrace_595213, base: "",
    url: url_WebAppsStopWebSiteNetworkTrace_595214, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPassword_595223 = ref object of OpenApiRestCall_593437
proc url_WebAppsGenerateNewSitePublishingPassword_595225(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPassword_595224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595226 = path.getOrDefault("resourceGroupName")
  valid_595226 = validateParameter(valid_595226, JString, required = true,
                                 default = nil)
  if valid_595226 != nil:
    section.add "resourceGroupName", valid_595226
  var valid_595227 = path.getOrDefault("name")
  valid_595227 = validateParameter(valid_595227, JString, required = true,
                                 default = nil)
  if valid_595227 != nil:
    section.add "name", valid_595227
  var valid_595228 = path.getOrDefault("subscriptionId")
  valid_595228 = validateParameter(valid_595228, JString, required = true,
                                 default = nil)
  if valid_595228 != nil:
    section.add "subscriptionId", valid_595228
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595229 = query.getOrDefault("api-version")
  valid_595229 = validateParameter(valid_595229, JString, required = true,
                                 default = nil)
  if valid_595229 != nil:
    section.add "api-version", valid_595229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595230: Call_WebAppsGenerateNewSitePublishingPassword_595223;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_595230.validator(path, query, header, formData, body)
  let scheme = call_595230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595230.url(scheme.get, call_595230.host, call_595230.base,
                         call_595230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595230, url, valid)

proc call*(call_595231: Call_WebAppsGenerateNewSitePublishingPassword_595223;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPassword
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595232 = newJObject()
  var query_595233 = newJObject()
  add(path_595232, "resourceGroupName", newJString(resourceGroupName))
  add(query_595233, "api-version", newJString(apiVersion))
  add(path_595232, "name", newJString(name))
  add(path_595232, "subscriptionId", newJString(subscriptionId))
  result = call_595231.call(path_595232, query_595233, nil, nil, nil)

var webAppsGenerateNewSitePublishingPassword* = Call_WebAppsGenerateNewSitePublishingPassword_595223(
    name: "webAppsGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPassword_595224, base: "",
    url: url_WebAppsGenerateNewSitePublishingPassword_595225,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCounters_595234 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPerfMonCounters_595236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCounters_595235(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595237 = path.getOrDefault("resourceGroupName")
  valid_595237 = validateParameter(valid_595237, JString, required = true,
                                 default = nil)
  if valid_595237 != nil:
    section.add "resourceGroupName", valid_595237
  var valid_595238 = path.getOrDefault("name")
  valid_595238 = validateParameter(valid_595238, JString, required = true,
                                 default = nil)
  if valid_595238 != nil:
    section.add "name", valid_595238
  var valid_595239 = path.getOrDefault("subscriptionId")
  valid_595239 = validateParameter(valid_595239, JString, required = true,
                                 default = nil)
  if valid_595239 != nil:
    section.add "subscriptionId", valid_595239
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595240 = query.getOrDefault("api-version")
  valid_595240 = validateParameter(valid_595240, JString, required = true,
                                 default = nil)
  if valid_595240 != nil:
    section.add "api-version", valid_595240
  var valid_595241 = query.getOrDefault("$filter")
  valid_595241 = validateParameter(valid_595241, JString, required = false,
                                 default = nil)
  if valid_595241 != nil:
    section.add "$filter", valid_595241
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595242: Call_WebAppsListPerfMonCounters_595234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_595242.validator(path, query, header, formData, body)
  let scheme = call_595242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595242.url(scheme.get, call_595242.host, call_595242.base,
                         call_595242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595242, url, valid)

proc call*(call_595243: Call_WebAppsListPerfMonCounters_595234;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCounters
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_595244 = newJObject()
  var query_595245 = newJObject()
  add(path_595244, "resourceGroupName", newJString(resourceGroupName))
  add(query_595245, "api-version", newJString(apiVersion))
  add(path_595244, "name", newJString(name))
  add(path_595244, "subscriptionId", newJString(subscriptionId))
  add(query_595245, "$filter", newJString(Filter))
  result = call_595243.call(path_595244, query_595245, nil, nil, nil)

var webAppsListPerfMonCounters* = Call_WebAppsListPerfMonCounters_595234(
    name: "webAppsListPerfMonCounters", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    validator: validate_WebAppsListPerfMonCounters_595235, base: "",
    url: url_WebAppsListPerfMonCounters_595236, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlag_595246 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSitePhpErrorLogFlag_595248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlag_595247(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595249 = path.getOrDefault("resourceGroupName")
  valid_595249 = validateParameter(valid_595249, JString, required = true,
                                 default = nil)
  if valid_595249 != nil:
    section.add "resourceGroupName", valid_595249
  var valid_595250 = path.getOrDefault("name")
  valid_595250 = validateParameter(valid_595250, JString, required = true,
                                 default = nil)
  if valid_595250 != nil:
    section.add "name", valid_595250
  var valid_595251 = path.getOrDefault("subscriptionId")
  valid_595251 = validateParameter(valid_595251, JString, required = true,
                                 default = nil)
  if valid_595251 != nil:
    section.add "subscriptionId", valid_595251
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595252 = query.getOrDefault("api-version")
  valid_595252 = validateParameter(valid_595252, JString, required = true,
                                 default = nil)
  if valid_595252 != nil:
    section.add "api-version", valid_595252
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595253: Call_WebAppsGetSitePhpErrorLogFlag_595246; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_595253.validator(path, query, header, formData, body)
  let scheme = call_595253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595253.url(scheme.get, call_595253.host, call_595253.base,
                         call_595253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595253, url, valid)

proc call*(call_595254: Call_WebAppsGetSitePhpErrorLogFlag_595246;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlag
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595255 = newJObject()
  var query_595256 = newJObject()
  add(path_595255, "resourceGroupName", newJString(resourceGroupName))
  add(query_595256, "api-version", newJString(apiVersion))
  add(path_595255, "name", newJString(name))
  add(path_595255, "subscriptionId", newJString(subscriptionId))
  result = call_595254.call(path_595255, query_595256, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlag* = Call_WebAppsGetSitePhpErrorLogFlag_595246(
    name: "webAppsGetSitePhpErrorLogFlag", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlag_595247, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlag_595248, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOns_595257 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPremierAddOns_595259(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOns_595258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595260 = path.getOrDefault("resourceGroupName")
  valid_595260 = validateParameter(valid_595260, JString, required = true,
                                 default = nil)
  if valid_595260 != nil:
    section.add "resourceGroupName", valid_595260
  var valid_595261 = path.getOrDefault("name")
  valid_595261 = validateParameter(valid_595261, JString, required = true,
                                 default = nil)
  if valid_595261 != nil:
    section.add "name", valid_595261
  var valid_595262 = path.getOrDefault("subscriptionId")
  valid_595262 = validateParameter(valid_595262, JString, required = true,
                                 default = nil)
  if valid_595262 != nil:
    section.add "subscriptionId", valid_595262
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595263 = query.getOrDefault("api-version")
  valid_595263 = validateParameter(valid_595263, JString, required = true,
                                 default = nil)
  if valid_595263 != nil:
    section.add "api-version", valid_595263
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595264: Call_WebAppsListPremierAddOns_595257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_595264.validator(path, query, header, formData, body)
  let scheme = call_595264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595264.url(scheme.get, call_595264.host, call_595264.base,
                         call_595264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595264, url, valid)

proc call*(call_595265: Call_WebAppsListPremierAddOns_595257;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOns
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595266 = newJObject()
  var query_595267 = newJObject()
  add(path_595266, "resourceGroupName", newJString(resourceGroupName))
  add(query_595267, "api-version", newJString(apiVersion))
  add(path_595266, "name", newJString(name))
  add(path_595266, "subscriptionId", newJString(subscriptionId))
  result = call_595265.call(path_595266, query_595267, nil, nil, nil)

var webAppsListPremierAddOns* = Call_WebAppsListPremierAddOns_595257(
    name: "webAppsListPremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_WebAppsListPremierAddOns_595258, base: "",
    url: url_WebAppsListPremierAddOns_595259, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOn_595280 = ref object of OpenApiRestCall_593437
proc url_WebAppsAddPremierAddOn_595282(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOn_595281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595283 = path.getOrDefault("resourceGroupName")
  valid_595283 = validateParameter(valid_595283, JString, required = true,
                                 default = nil)
  if valid_595283 != nil:
    section.add "resourceGroupName", valid_595283
  var valid_595284 = path.getOrDefault("name")
  valid_595284 = validateParameter(valid_595284, JString, required = true,
                                 default = nil)
  if valid_595284 != nil:
    section.add "name", valid_595284
  var valid_595285 = path.getOrDefault("subscriptionId")
  valid_595285 = validateParameter(valid_595285, JString, required = true,
                                 default = nil)
  if valid_595285 != nil:
    section.add "subscriptionId", valid_595285
  var valid_595286 = path.getOrDefault("premierAddOnName")
  valid_595286 = validateParameter(valid_595286, JString, required = true,
                                 default = nil)
  if valid_595286 != nil:
    section.add "premierAddOnName", valid_595286
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595287 = query.getOrDefault("api-version")
  valid_595287 = validateParameter(valid_595287, JString, required = true,
                                 default = nil)
  if valid_595287 != nil:
    section.add "api-version", valid_595287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595289: Call_WebAppsAddPremierAddOn_595280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_595289.validator(path, query, header, formData, body)
  let scheme = call_595289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595289.url(scheme.get, call_595289.host, call_595289.base,
                         call_595289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595289, url, valid)

proc call*(call_595290: Call_WebAppsAddPremierAddOn_595280;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOn
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595291 = newJObject()
  var query_595292 = newJObject()
  var body_595293 = newJObject()
  add(path_595291, "resourceGroupName", newJString(resourceGroupName))
  add(query_595292, "api-version", newJString(apiVersion))
  add(path_595291, "name", newJString(name))
  if premierAddOn != nil:
    body_595293 = premierAddOn
  add(path_595291, "subscriptionId", newJString(subscriptionId))
  add(path_595291, "premierAddOnName", newJString(premierAddOnName))
  result = call_595290.call(path_595291, query_595292, nil, nil, body_595293)

var webAppsAddPremierAddOn* = Call_WebAppsAddPremierAddOn_595280(
    name: "webAppsAddPremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOn_595281, base: "",
    url: url_WebAppsAddPremierAddOn_595282, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOn_595268 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPremierAddOn_595270(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOn_595269(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595271 = path.getOrDefault("resourceGroupName")
  valid_595271 = validateParameter(valid_595271, JString, required = true,
                                 default = nil)
  if valid_595271 != nil:
    section.add "resourceGroupName", valid_595271
  var valid_595272 = path.getOrDefault("name")
  valid_595272 = validateParameter(valid_595272, JString, required = true,
                                 default = nil)
  if valid_595272 != nil:
    section.add "name", valid_595272
  var valid_595273 = path.getOrDefault("subscriptionId")
  valid_595273 = validateParameter(valid_595273, JString, required = true,
                                 default = nil)
  if valid_595273 != nil:
    section.add "subscriptionId", valid_595273
  var valid_595274 = path.getOrDefault("premierAddOnName")
  valid_595274 = validateParameter(valid_595274, JString, required = true,
                                 default = nil)
  if valid_595274 != nil:
    section.add "premierAddOnName", valid_595274
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595275 = query.getOrDefault("api-version")
  valid_595275 = validateParameter(valid_595275, JString, required = true,
                                 default = nil)
  if valid_595275 != nil:
    section.add "api-version", valid_595275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595276: Call_WebAppsGetPremierAddOn_595268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_595276.validator(path, query, header, formData, body)
  let scheme = call_595276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595276.url(scheme.get, call_595276.host, call_595276.base,
                         call_595276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595276, url, valid)

proc call*(call_595277: Call_WebAppsGetPremierAddOn_595268;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOn
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595278 = newJObject()
  var query_595279 = newJObject()
  add(path_595278, "resourceGroupName", newJString(resourceGroupName))
  add(query_595279, "api-version", newJString(apiVersion))
  add(path_595278, "name", newJString(name))
  add(path_595278, "subscriptionId", newJString(subscriptionId))
  add(path_595278, "premierAddOnName", newJString(premierAddOnName))
  result = call_595277.call(path_595278, query_595279, nil, nil, nil)

var webAppsGetPremierAddOn* = Call_WebAppsGetPremierAddOn_595268(
    name: "webAppsGetPremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOn_595269, base: "",
    url: url_WebAppsGetPremierAddOn_595270, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOn_595294 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePremierAddOn_595296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOn_595295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595297 = path.getOrDefault("resourceGroupName")
  valid_595297 = validateParameter(valid_595297, JString, required = true,
                                 default = nil)
  if valid_595297 != nil:
    section.add "resourceGroupName", valid_595297
  var valid_595298 = path.getOrDefault("name")
  valid_595298 = validateParameter(valid_595298, JString, required = true,
                                 default = nil)
  if valid_595298 != nil:
    section.add "name", valid_595298
  var valid_595299 = path.getOrDefault("subscriptionId")
  valid_595299 = validateParameter(valid_595299, JString, required = true,
                                 default = nil)
  if valid_595299 != nil:
    section.add "subscriptionId", valid_595299
  var valid_595300 = path.getOrDefault("premierAddOnName")
  valid_595300 = validateParameter(valid_595300, JString, required = true,
                                 default = nil)
  if valid_595300 != nil:
    section.add "premierAddOnName", valid_595300
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595301 = query.getOrDefault("api-version")
  valid_595301 = validateParameter(valid_595301, JString, required = true,
                                 default = nil)
  if valid_595301 != nil:
    section.add "api-version", valid_595301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595302: Call_WebAppsDeletePremierAddOn_595294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_595302.validator(path, query, header, formData, body)
  let scheme = call_595302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595302.url(scheme.get, call_595302.host, call_595302.base,
                         call_595302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595302, url, valid)

proc call*(call_595303: Call_WebAppsDeletePremierAddOn_595294;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOn
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_595304 = newJObject()
  var query_595305 = newJObject()
  add(path_595304, "resourceGroupName", newJString(resourceGroupName))
  add(query_595305, "api-version", newJString(apiVersion))
  add(path_595304, "name", newJString(name))
  add(path_595304, "subscriptionId", newJString(subscriptionId))
  add(path_595304, "premierAddOnName", newJString(premierAddOnName))
  result = call_595303.call(path_595304, query_595305, nil, nil, nil)

var webAppsDeletePremierAddOn* = Call_WebAppsDeletePremierAddOn_595294(
    name: "webAppsDeletePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOn_595295, base: "",
    url: url_WebAppsDeletePremierAddOn_595296, schemes: {Scheme.Https})
type
  Call_WebAppsListProcesses_595306 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcesses_595308(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcesses_595307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595309 = path.getOrDefault("resourceGroupName")
  valid_595309 = validateParameter(valid_595309, JString, required = true,
                                 default = nil)
  if valid_595309 != nil:
    section.add "resourceGroupName", valid_595309
  var valid_595310 = path.getOrDefault("name")
  valid_595310 = validateParameter(valid_595310, JString, required = true,
                                 default = nil)
  if valid_595310 != nil:
    section.add "name", valid_595310
  var valid_595311 = path.getOrDefault("subscriptionId")
  valid_595311 = validateParameter(valid_595311, JString, required = true,
                                 default = nil)
  if valid_595311 != nil:
    section.add "subscriptionId", valid_595311
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595312 = query.getOrDefault("api-version")
  valid_595312 = validateParameter(valid_595312, JString, required = true,
                                 default = nil)
  if valid_595312 != nil:
    section.add "api-version", valid_595312
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595313: Call_WebAppsListProcesses_595306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595313.validator(path, query, header, formData, body)
  let scheme = call_595313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595313.url(scheme.get, call_595313.host, call_595313.base,
                         call_595313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595313, url, valid)

proc call*(call_595314: Call_WebAppsListProcesses_595306;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595315 = newJObject()
  var query_595316 = newJObject()
  add(path_595315, "resourceGroupName", newJString(resourceGroupName))
  add(query_595316, "api-version", newJString(apiVersion))
  add(path_595315, "name", newJString(name))
  add(path_595315, "subscriptionId", newJString(subscriptionId))
  result = call_595314.call(path_595315, query_595316, nil, nil, nil)

var webAppsListProcesses* = Call_WebAppsListProcesses_595306(
    name: "webAppsListProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    validator: validate_WebAppsListProcesses_595307, base: "",
    url: url_WebAppsListProcesses_595308, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcess_595317 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcess_595319(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcess_595318(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595320 = path.getOrDefault("resourceGroupName")
  valid_595320 = validateParameter(valid_595320, JString, required = true,
                                 default = nil)
  if valid_595320 != nil:
    section.add "resourceGroupName", valid_595320
  var valid_595321 = path.getOrDefault("name")
  valid_595321 = validateParameter(valid_595321, JString, required = true,
                                 default = nil)
  if valid_595321 != nil:
    section.add "name", valid_595321
  var valid_595322 = path.getOrDefault("processId")
  valid_595322 = validateParameter(valid_595322, JString, required = true,
                                 default = nil)
  if valid_595322 != nil:
    section.add "processId", valid_595322
  var valid_595323 = path.getOrDefault("subscriptionId")
  valid_595323 = validateParameter(valid_595323, JString, required = true,
                                 default = nil)
  if valid_595323 != nil:
    section.add "subscriptionId", valid_595323
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595324 = query.getOrDefault("api-version")
  valid_595324 = validateParameter(valid_595324, JString, required = true,
                                 default = nil)
  if valid_595324 != nil:
    section.add "api-version", valid_595324
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595325: Call_WebAppsGetProcess_595317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595325.validator(path, query, header, formData, body)
  let scheme = call_595325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595325.url(scheme.get, call_595325.host, call_595325.base,
                         call_595325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595325, url, valid)

proc call*(call_595326: Call_WebAppsGetProcess_595317; resourceGroupName: string;
          apiVersion: string; name: string; processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595327 = newJObject()
  var query_595328 = newJObject()
  add(path_595327, "resourceGroupName", newJString(resourceGroupName))
  add(query_595328, "api-version", newJString(apiVersion))
  add(path_595327, "name", newJString(name))
  add(path_595327, "processId", newJString(processId))
  add(path_595327, "subscriptionId", newJString(subscriptionId))
  result = call_595326.call(path_595327, query_595328, nil, nil, nil)

var webAppsGetProcess* = Call_WebAppsGetProcess_595317(name: "webAppsGetProcess",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsGetProcess_595318, base: "",
    url: url_WebAppsGetProcess_595319, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcess_595329 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteProcess_595331(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcess_595330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595332 = path.getOrDefault("resourceGroupName")
  valid_595332 = validateParameter(valid_595332, JString, required = true,
                                 default = nil)
  if valid_595332 != nil:
    section.add "resourceGroupName", valid_595332
  var valid_595333 = path.getOrDefault("name")
  valid_595333 = validateParameter(valid_595333, JString, required = true,
                                 default = nil)
  if valid_595333 != nil:
    section.add "name", valid_595333
  var valid_595334 = path.getOrDefault("processId")
  valid_595334 = validateParameter(valid_595334, JString, required = true,
                                 default = nil)
  if valid_595334 != nil:
    section.add "processId", valid_595334
  var valid_595335 = path.getOrDefault("subscriptionId")
  valid_595335 = validateParameter(valid_595335, JString, required = true,
                                 default = nil)
  if valid_595335 != nil:
    section.add "subscriptionId", valid_595335
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595336 = query.getOrDefault("api-version")
  valid_595336 = validateParameter(valid_595336, JString, required = true,
                                 default = nil)
  if valid_595336 != nil:
    section.add "api-version", valid_595336
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595337: Call_WebAppsDeleteProcess_595329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_595337.validator(path, query, header, formData, body)
  let scheme = call_595337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595337.url(scheme.get, call_595337.host, call_595337.base,
                         call_595337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595337, url, valid)

proc call*(call_595338: Call_WebAppsDeleteProcess_595329;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595339 = newJObject()
  var query_595340 = newJObject()
  add(path_595339, "resourceGroupName", newJString(resourceGroupName))
  add(query_595340, "api-version", newJString(apiVersion))
  add(path_595339, "name", newJString(name))
  add(path_595339, "processId", newJString(processId))
  add(path_595339, "subscriptionId", newJString(subscriptionId))
  result = call_595338.call(path_595339, query_595340, nil, nil, nil)

var webAppsDeleteProcess* = Call_WebAppsDeleteProcess_595329(
    name: "webAppsDeleteProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsDeleteProcess_595330, base: "",
    url: url_WebAppsDeleteProcess_595331, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDump_595341 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessDump_595343(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDump_595342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595344 = path.getOrDefault("resourceGroupName")
  valid_595344 = validateParameter(valid_595344, JString, required = true,
                                 default = nil)
  if valid_595344 != nil:
    section.add "resourceGroupName", valid_595344
  var valid_595345 = path.getOrDefault("name")
  valid_595345 = validateParameter(valid_595345, JString, required = true,
                                 default = nil)
  if valid_595345 != nil:
    section.add "name", valid_595345
  var valid_595346 = path.getOrDefault("processId")
  valid_595346 = validateParameter(valid_595346, JString, required = true,
                                 default = nil)
  if valid_595346 != nil:
    section.add "processId", valid_595346
  var valid_595347 = path.getOrDefault("subscriptionId")
  valid_595347 = validateParameter(valid_595347, JString, required = true,
                                 default = nil)
  if valid_595347 != nil:
    section.add "subscriptionId", valid_595347
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595348 = query.getOrDefault("api-version")
  valid_595348 = validateParameter(valid_595348, JString, required = true,
                                 default = nil)
  if valid_595348 != nil:
    section.add "api-version", valid_595348
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595349: Call_WebAppsGetProcessDump_595341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595349.validator(path, query, header, formData, body)
  let scheme = call_595349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595349.url(scheme.get, call_595349.host, call_595349.base,
                         call_595349.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595349, url, valid)

proc call*(call_595350: Call_WebAppsGetProcessDump_595341;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595351 = newJObject()
  var query_595352 = newJObject()
  add(path_595351, "resourceGroupName", newJString(resourceGroupName))
  add(query_595352, "api-version", newJString(apiVersion))
  add(path_595351, "name", newJString(name))
  add(path_595351, "processId", newJString(processId))
  add(path_595351, "subscriptionId", newJString(subscriptionId))
  result = call_595350.call(path_595351, query_595352, nil, nil, nil)

var webAppsGetProcessDump* = Call_WebAppsGetProcessDump_595341(
    name: "webAppsGetProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDump_595342, base: "",
    url: url_WebAppsGetProcessDump_595343, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModules_595353 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessModules_595355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModules_595354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595356 = path.getOrDefault("resourceGroupName")
  valid_595356 = validateParameter(valid_595356, JString, required = true,
                                 default = nil)
  if valid_595356 != nil:
    section.add "resourceGroupName", valid_595356
  var valid_595357 = path.getOrDefault("name")
  valid_595357 = validateParameter(valid_595357, JString, required = true,
                                 default = nil)
  if valid_595357 != nil:
    section.add "name", valid_595357
  var valid_595358 = path.getOrDefault("processId")
  valid_595358 = validateParameter(valid_595358, JString, required = true,
                                 default = nil)
  if valid_595358 != nil:
    section.add "processId", valid_595358
  var valid_595359 = path.getOrDefault("subscriptionId")
  valid_595359 = validateParameter(valid_595359, JString, required = true,
                                 default = nil)
  if valid_595359 != nil:
    section.add "subscriptionId", valid_595359
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595360 = query.getOrDefault("api-version")
  valid_595360 = validateParameter(valid_595360, JString, required = true,
                                 default = nil)
  if valid_595360 != nil:
    section.add "api-version", valid_595360
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595361: Call_WebAppsListProcessModules_595353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595361.validator(path, query, header, formData, body)
  let scheme = call_595361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595361.url(scheme.get, call_595361.host, call_595361.base,
                         call_595361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595361, url, valid)

proc call*(call_595362: Call_WebAppsListProcessModules_595353;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595363 = newJObject()
  var query_595364 = newJObject()
  add(path_595363, "resourceGroupName", newJString(resourceGroupName))
  add(query_595364, "api-version", newJString(apiVersion))
  add(path_595363, "name", newJString(name))
  add(path_595363, "processId", newJString(processId))
  add(path_595363, "subscriptionId", newJString(subscriptionId))
  result = call_595362.call(path_595363, query_595364, nil, nil, nil)

var webAppsListProcessModules* = Call_WebAppsListProcessModules_595353(
    name: "webAppsListProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModules_595354, base: "",
    url: url_WebAppsListProcessModules_595355, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModule_595365 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessModule_595367(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModule_595366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595368 = path.getOrDefault("resourceGroupName")
  valid_595368 = validateParameter(valid_595368, JString, required = true,
                                 default = nil)
  if valid_595368 != nil:
    section.add "resourceGroupName", valid_595368
  var valid_595369 = path.getOrDefault("name")
  valid_595369 = validateParameter(valid_595369, JString, required = true,
                                 default = nil)
  if valid_595369 != nil:
    section.add "name", valid_595369
  var valid_595370 = path.getOrDefault("processId")
  valid_595370 = validateParameter(valid_595370, JString, required = true,
                                 default = nil)
  if valid_595370 != nil:
    section.add "processId", valid_595370
  var valid_595371 = path.getOrDefault("subscriptionId")
  valid_595371 = validateParameter(valid_595371, JString, required = true,
                                 default = nil)
  if valid_595371 != nil:
    section.add "subscriptionId", valid_595371
  var valid_595372 = path.getOrDefault("baseAddress")
  valid_595372 = validateParameter(valid_595372, JString, required = true,
                                 default = nil)
  if valid_595372 != nil:
    section.add "baseAddress", valid_595372
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595373 = query.getOrDefault("api-version")
  valid_595373 = validateParameter(valid_595373, JString, required = true,
                                 default = nil)
  if valid_595373 != nil:
    section.add "api-version", valid_595373
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595374: Call_WebAppsGetProcessModule_595365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595374.validator(path, query, header, formData, body)
  let scheme = call_595374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595374.url(scheme.get, call_595374.host, call_595374.base,
                         call_595374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595374, url, valid)

proc call*(call_595375: Call_WebAppsGetProcessModule_595365;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_595376 = newJObject()
  var query_595377 = newJObject()
  add(path_595376, "resourceGroupName", newJString(resourceGroupName))
  add(query_595377, "api-version", newJString(apiVersion))
  add(path_595376, "name", newJString(name))
  add(path_595376, "processId", newJString(processId))
  add(path_595376, "subscriptionId", newJString(subscriptionId))
  add(path_595376, "baseAddress", newJString(baseAddress))
  result = call_595375.call(path_595376, query_595377, nil, nil, nil)

var webAppsGetProcessModule* = Call_WebAppsGetProcessModule_595365(
    name: "webAppsGetProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModule_595366, base: "",
    url: url_WebAppsGetProcessModule_595367, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreads_595378 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessThreads_595380(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreads_595379(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595381 = path.getOrDefault("resourceGroupName")
  valid_595381 = validateParameter(valid_595381, JString, required = true,
                                 default = nil)
  if valid_595381 != nil:
    section.add "resourceGroupName", valid_595381
  var valid_595382 = path.getOrDefault("name")
  valid_595382 = validateParameter(valid_595382, JString, required = true,
                                 default = nil)
  if valid_595382 != nil:
    section.add "name", valid_595382
  var valid_595383 = path.getOrDefault("processId")
  valid_595383 = validateParameter(valid_595383, JString, required = true,
                                 default = nil)
  if valid_595383 != nil:
    section.add "processId", valid_595383
  var valid_595384 = path.getOrDefault("subscriptionId")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = nil)
  if valid_595384 != nil:
    section.add "subscriptionId", valid_595384
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595385 = query.getOrDefault("api-version")
  valid_595385 = validateParameter(valid_595385, JString, required = true,
                                 default = nil)
  if valid_595385 != nil:
    section.add "api-version", valid_595385
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595386: Call_WebAppsListProcessThreads_595378; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_595386.validator(path, query, header, formData, body)
  let scheme = call_595386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595386.url(scheme.get, call_595386.host, call_595386.base,
                         call_595386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595386, url, valid)

proc call*(call_595387: Call_WebAppsListProcessThreads_595378;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595388 = newJObject()
  var query_595389 = newJObject()
  add(path_595388, "resourceGroupName", newJString(resourceGroupName))
  add(query_595389, "api-version", newJString(apiVersion))
  add(path_595388, "name", newJString(name))
  add(path_595388, "processId", newJString(processId))
  add(path_595388, "subscriptionId", newJString(subscriptionId))
  result = call_595387.call(path_595388, query_595389, nil, nil, nil)

var webAppsListProcessThreads* = Call_WebAppsListProcessThreads_595378(
    name: "webAppsListProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreads_595379, base: "",
    url: url_WebAppsListProcessThreads_595380, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThread_595390 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessThread_595392(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThread_595391(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595393 = path.getOrDefault("resourceGroupName")
  valid_595393 = validateParameter(valid_595393, JString, required = true,
                                 default = nil)
  if valid_595393 != nil:
    section.add "resourceGroupName", valid_595393
  var valid_595394 = path.getOrDefault("name")
  valid_595394 = validateParameter(valid_595394, JString, required = true,
                                 default = nil)
  if valid_595394 != nil:
    section.add "name", valid_595394
  var valid_595395 = path.getOrDefault("processId")
  valid_595395 = validateParameter(valid_595395, JString, required = true,
                                 default = nil)
  if valid_595395 != nil:
    section.add "processId", valid_595395
  var valid_595396 = path.getOrDefault("subscriptionId")
  valid_595396 = validateParameter(valid_595396, JString, required = true,
                                 default = nil)
  if valid_595396 != nil:
    section.add "subscriptionId", valid_595396
  var valid_595397 = path.getOrDefault("threadId")
  valid_595397 = validateParameter(valid_595397, JString, required = true,
                                 default = nil)
  if valid_595397 != nil:
    section.add "threadId", valid_595397
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595398 = query.getOrDefault("api-version")
  valid_595398 = validateParameter(valid_595398, JString, required = true,
                                 default = nil)
  if valid_595398 != nil:
    section.add "api-version", valid_595398
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595399: Call_WebAppsGetProcessThread_595390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_595399.validator(path, query, header, formData, body)
  let scheme = call_595399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595399.url(scheme.get, call_595399.host, call_595399.base,
                         call_595399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595399, url, valid)

proc call*(call_595400: Call_WebAppsGetProcessThread_595390;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_595401 = newJObject()
  var query_595402 = newJObject()
  add(path_595401, "resourceGroupName", newJString(resourceGroupName))
  add(query_595402, "api-version", newJString(apiVersion))
  add(path_595401, "name", newJString(name))
  add(path_595401, "processId", newJString(processId))
  add(path_595401, "subscriptionId", newJString(subscriptionId))
  add(path_595401, "threadId", newJString(threadId))
  result = call_595400.call(path_595401, query_595402, nil, nil, nil)

var webAppsGetProcessThread* = Call_WebAppsGetProcessThread_595390(
    name: "webAppsGetProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThread_595391, base: "",
    url: url_WebAppsGetProcessThread_595392, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificates_595403 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublicCertificates_595405(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificates_595404(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595406 = path.getOrDefault("resourceGroupName")
  valid_595406 = validateParameter(valid_595406, JString, required = true,
                                 default = nil)
  if valid_595406 != nil:
    section.add "resourceGroupName", valid_595406
  var valid_595407 = path.getOrDefault("name")
  valid_595407 = validateParameter(valid_595407, JString, required = true,
                                 default = nil)
  if valid_595407 != nil:
    section.add "name", valid_595407
  var valid_595408 = path.getOrDefault("subscriptionId")
  valid_595408 = validateParameter(valid_595408, JString, required = true,
                                 default = nil)
  if valid_595408 != nil:
    section.add "subscriptionId", valid_595408
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595409 = query.getOrDefault("api-version")
  valid_595409 = validateParameter(valid_595409, JString, required = true,
                                 default = nil)
  if valid_595409 != nil:
    section.add "api-version", valid_595409
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595410: Call_WebAppsListPublicCertificates_595403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_595410.validator(path, query, header, formData, body)
  let scheme = call_595410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595410.url(scheme.get, call_595410.host, call_595410.base,
                         call_595410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595410, url, valid)

proc call*(call_595411: Call_WebAppsListPublicCertificates_595403;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificates
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595412 = newJObject()
  var query_595413 = newJObject()
  add(path_595412, "resourceGroupName", newJString(resourceGroupName))
  add(query_595413, "api-version", newJString(apiVersion))
  add(path_595412, "name", newJString(name))
  add(path_595412, "subscriptionId", newJString(subscriptionId))
  result = call_595411.call(path_595412, query_595413, nil, nil, nil)

var webAppsListPublicCertificates* = Call_WebAppsListPublicCertificates_595403(
    name: "webAppsListPublicCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    validator: validate_WebAppsListPublicCertificates_595404, base: "",
    url: url_WebAppsListPublicCertificates_595405, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificate_595426 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdatePublicCertificate_595428(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificate_595427(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595429 = path.getOrDefault("resourceGroupName")
  valid_595429 = validateParameter(valid_595429, JString, required = true,
                                 default = nil)
  if valid_595429 != nil:
    section.add "resourceGroupName", valid_595429
  var valid_595430 = path.getOrDefault("name")
  valid_595430 = validateParameter(valid_595430, JString, required = true,
                                 default = nil)
  if valid_595430 != nil:
    section.add "name", valid_595430
  var valid_595431 = path.getOrDefault("subscriptionId")
  valid_595431 = validateParameter(valid_595431, JString, required = true,
                                 default = nil)
  if valid_595431 != nil:
    section.add "subscriptionId", valid_595431
  var valid_595432 = path.getOrDefault("publicCertificateName")
  valid_595432 = validateParameter(valid_595432, JString, required = true,
                                 default = nil)
  if valid_595432 != nil:
    section.add "publicCertificateName", valid_595432
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595433 = query.getOrDefault("api-version")
  valid_595433 = validateParameter(valid_595433, JString, required = true,
                                 default = nil)
  if valid_595433 != nil:
    section.add "api-version", valid_595433
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595435: Call_WebAppsCreateOrUpdatePublicCertificate_595426;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_595435.validator(path, query, header, formData, body)
  let scheme = call_595435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595435.url(scheme.get, call_595435.host, call_595435.base,
                         call_595435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595435, url, valid)

proc call*(call_595436: Call_WebAppsCreateOrUpdatePublicCertificate_595426;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificate
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_595437 = newJObject()
  var query_595438 = newJObject()
  var body_595439 = newJObject()
  add(path_595437, "resourceGroupName", newJString(resourceGroupName))
  add(query_595438, "api-version", newJString(apiVersion))
  add(path_595437, "name", newJString(name))
  add(path_595437, "subscriptionId", newJString(subscriptionId))
  add(path_595437, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_595439 = publicCertificate
  result = call_595436.call(path_595437, query_595438, nil, nil, body_595439)

var webAppsCreateOrUpdatePublicCertificate* = Call_WebAppsCreateOrUpdatePublicCertificate_595426(
    name: "webAppsCreateOrUpdatePublicCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificate_595427, base: "",
    url: url_WebAppsCreateOrUpdatePublicCertificate_595428,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificate_595414 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPublicCertificate_595416(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificate_595415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595417 = path.getOrDefault("resourceGroupName")
  valid_595417 = validateParameter(valid_595417, JString, required = true,
                                 default = nil)
  if valid_595417 != nil:
    section.add "resourceGroupName", valid_595417
  var valid_595418 = path.getOrDefault("name")
  valid_595418 = validateParameter(valid_595418, JString, required = true,
                                 default = nil)
  if valid_595418 != nil:
    section.add "name", valid_595418
  var valid_595419 = path.getOrDefault("subscriptionId")
  valid_595419 = validateParameter(valid_595419, JString, required = true,
                                 default = nil)
  if valid_595419 != nil:
    section.add "subscriptionId", valid_595419
  var valid_595420 = path.getOrDefault("publicCertificateName")
  valid_595420 = validateParameter(valid_595420, JString, required = true,
                                 default = nil)
  if valid_595420 != nil:
    section.add "publicCertificateName", valid_595420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595421 = query.getOrDefault("api-version")
  valid_595421 = validateParameter(valid_595421, JString, required = true,
                                 default = nil)
  if valid_595421 != nil:
    section.add "api-version", valid_595421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595422: Call_WebAppsGetPublicCertificate_595414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_595422.validator(path, query, header, formData, body)
  let scheme = call_595422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595422.url(scheme.get, call_595422.host, call_595422.base,
                         call_595422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595422, url, valid)

proc call*(call_595423: Call_WebAppsGetPublicCertificate_595414;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificate
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_595424 = newJObject()
  var query_595425 = newJObject()
  add(path_595424, "resourceGroupName", newJString(resourceGroupName))
  add(query_595425, "api-version", newJString(apiVersion))
  add(path_595424, "name", newJString(name))
  add(path_595424, "subscriptionId", newJString(subscriptionId))
  add(path_595424, "publicCertificateName", newJString(publicCertificateName))
  result = call_595423.call(path_595424, query_595425, nil, nil, nil)

var webAppsGetPublicCertificate* = Call_WebAppsGetPublicCertificate_595414(
    name: "webAppsGetPublicCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificate_595415, base: "",
    url: url_WebAppsGetPublicCertificate_595416, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificate_595440 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePublicCertificate_595442(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificate_595441(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595443 = path.getOrDefault("resourceGroupName")
  valid_595443 = validateParameter(valid_595443, JString, required = true,
                                 default = nil)
  if valid_595443 != nil:
    section.add "resourceGroupName", valid_595443
  var valid_595444 = path.getOrDefault("name")
  valid_595444 = validateParameter(valid_595444, JString, required = true,
                                 default = nil)
  if valid_595444 != nil:
    section.add "name", valid_595444
  var valid_595445 = path.getOrDefault("subscriptionId")
  valid_595445 = validateParameter(valid_595445, JString, required = true,
                                 default = nil)
  if valid_595445 != nil:
    section.add "subscriptionId", valid_595445
  var valid_595446 = path.getOrDefault("publicCertificateName")
  valid_595446 = validateParameter(valid_595446, JString, required = true,
                                 default = nil)
  if valid_595446 != nil:
    section.add "publicCertificateName", valid_595446
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595447 = query.getOrDefault("api-version")
  valid_595447 = validateParameter(valid_595447, JString, required = true,
                                 default = nil)
  if valid_595447 != nil:
    section.add "api-version", valid_595447
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595448: Call_WebAppsDeletePublicCertificate_595440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_595448.validator(path, query, header, formData, body)
  let scheme = call_595448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595448.url(scheme.get, call_595448.host, call_595448.base,
                         call_595448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595448, url, valid)

proc call*(call_595449: Call_WebAppsDeletePublicCertificate_595440;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificate
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_595450 = newJObject()
  var query_595451 = newJObject()
  add(path_595450, "resourceGroupName", newJString(resourceGroupName))
  add(query_595451, "api-version", newJString(apiVersion))
  add(path_595450, "name", newJString(name))
  add(path_595450, "subscriptionId", newJString(subscriptionId))
  add(path_595450, "publicCertificateName", newJString(publicCertificateName))
  result = call_595449.call(path_595450, query_595451, nil, nil, nil)

var webAppsDeletePublicCertificate* = Call_WebAppsDeletePublicCertificate_595440(
    name: "webAppsDeletePublicCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificate_595441, base: "",
    url: url_WebAppsDeletePublicCertificate_595442, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecrets_595452 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingProfileXmlWithSecrets_595454(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecrets_595453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595455 = path.getOrDefault("resourceGroupName")
  valid_595455 = validateParameter(valid_595455, JString, required = true,
                                 default = nil)
  if valid_595455 != nil:
    section.add "resourceGroupName", valid_595455
  var valid_595456 = path.getOrDefault("name")
  valid_595456 = validateParameter(valid_595456, JString, required = true,
                                 default = nil)
  if valid_595456 != nil:
    section.add "name", valid_595456
  var valid_595457 = path.getOrDefault("subscriptionId")
  valid_595457 = validateParameter(valid_595457, JString, required = true,
                                 default = nil)
  if valid_595457 != nil:
    section.add "subscriptionId", valid_595457
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595458 = query.getOrDefault("api-version")
  valid_595458 = validateParameter(valid_595458, JString, required = true,
                                 default = nil)
  if valid_595458 != nil:
    section.add "api-version", valid_595458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595460: Call_WebAppsListPublishingProfileXmlWithSecrets_595452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_595460.validator(path, query, header, formData, body)
  let scheme = call_595460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595460.url(scheme.get, call_595460.host, call_595460.base,
                         call_595460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595460, url, valid)

proc call*(call_595461: Call_WebAppsListPublishingProfileXmlWithSecrets_595452;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecrets
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_595462 = newJObject()
  var query_595463 = newJObject()
  var body_595464 = newJObject()
  add(path_595462, "resourceGroupName", newJString(resourceGroupName))
  add(query_595463, "api-version", newJString(apiVersion))
  add(path_595462, "name", newJString(name))
  add(path_595462, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_595464 = publishingProfileOptions
  result = call_595461.call(path_595462, query_595463, nil, nil, body_595464)

var webAppsListPublishingProfileXmlWithSecrets* = Call_WebAppsListPublishingProfileXmlWithSecrets_595452(
    name: "webAppsListPublishingProfileXmlWithSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecrets_595453,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecrets_595454,
    schemes: {Scheme.Https})
type
  Call_WebAppsRecover_595465 = ref object of OpenApiRestCall_593437
proc url_WebAppsRecover_595467(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecover_595466(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Recovers a web app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595468 = path.getOrDefault("resourceGroupName")
  valid_595468 = validateParameter(valid_595468, JString, required = true,
                                 default = nil)
  if valid_595468 != nil:
    section.add "resourceGroupName", valid_595468
  var valid_595469 = path.getOrDefault("name")
  valid_595469 = validateParameter(valid_595469, JString, required = true,
                                 default = nil)
  if valid_595469 != nil:
    section.add "name", valid_595469
  var valid_595470 = path.getOrDefault("subscriptionId")
  valid_595470 = validateParameter(valid_595470, JString, required = true,
                                 default = nil)
  if valid_595470 != nil:
    section.add "subscriptionId", valid_595470
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595471 = query.getOrDefault("api-version")
  valid_595471 = validateParameter(valid_595471, JString, required = true,
                                 default = nil)
  if valid_595471 != nil:
    section.add "api-version", valid_595471
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595473: Call_WebAppsRecover_595465; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Recovers a web app to a previous snapshot.
  ## 
  let valid = call_595473.validator(path, query, header, formData, body)
  let scheme = call_595473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595473.url(scheme.get, call_595473.host, call_595473.base,
                         call_595473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595473, url, valid)

proc call*(call_595474: Call_WebAppsRecover_595465; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          recoveryEntity: JsonNode): Recallable =
  ## webAppsRecover
  ## Recovers a web app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_595475 = newJObject()
  var query_595476 = newJObject()
  var body_595477 = newJObject()
  add(path_595475, "resourceGroupName", newJString(resourceGroupName))
  add(query_595476, "api-version", newJString(apiVersion))
  add(path_595475, "name", newJString(name))
  add(path_595475, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_595477 = recoveryEntity
  result = call_595474.call(path_595475, query_595476, nil, nil, body_595477)

var webAppsRecover* = Call_WebAppsRecover_595465(name: "webAppsRecover",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
    validator: validate_WebAppsRecover_595466, base: "", url: url_WebAppsRecover_595467,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetProductionSlotConfig_595478 = ref object of OpenApiRestCall_593437
proc url_WebAppsResetProductionSlotConfig_595480(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetProductionSlotConfig_595479(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595481 = path.getOrDefault("resourceGroupName")
  valid_595481 = validateParameter(valid_595481, JString, required = true,
                                 default = nil)
  if valid_595481 != nil:
    section.add "resourceGroupName", valid_595481
  var valid_595482 = path.getOrDefault("name")
  valid_595482 = validateParameter(valid_595482, JString, required = true,
                                 default = nil)
  if valid_595482 != nil:
    section.add "name", valid_595482
  var valid_595483 = path.getOrDefault("subscriptionId")
  valid_595483 = validateParameter(valid_595483, JString, required = true,
                                 default = nil)
  if valid_595483 != nil:
    section.add "subscriptionId", valid_595483
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595484 = query.getOrDefault("api-version")
  valid_595484 = validateParameter(valid_595484, JString, required = true,
                                 default = nil)
  if valid_595484 != nil:
    section.add "api-version", valid_595484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595485: Call_WebAppsResetProductionSlotConfig_595478;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_595485.validator(path, query, header, formData, body)
  let scheme = call_595485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595485.url(scheme.get, call_595485.host, call_595485.base,
                         call_595485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595485, url, valid)

proc call*(call_595486: Call_WebAppsResetProductionSlotConfig_595478;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsResetProductionSlotConfig
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595487 = newJObject()
  var query_595488 = newJObject()
  add(path_595487, "resourceGroupName", newJString(resourceGroupName))
  add(query_595488, "api-version", newJString(apiVersion))
  add(path_595487, "name", newJString(name))
  add(path_595487, "subscriptionId", newJString(subscriptionId))
  result = call_595486.call(path_595487, query_595488, nil, nil, nil)

var webAppsResetProductionSlotConfig* = Call_WebAppsResetProductionSlotConfig_595478(
    name: "webAppsResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_WebAppsResetProductionSlotConfig_595479, base: "",
    url: url_WebAppsResetProductionSlotConfig_595480, schemes: {Scheme.Https})
type
  Call_WebAppsRestart_595489 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestart_595491(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestart_595490(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595492 = path.getOrDefault("resourceGroupName")
  valid_595492 = validateParameter(valid_595492, JString, required = true,
                                 default = nil)
  if valid_595492 != nil:
    section.add "resourceGroupName", valid_595492
  var valid_595493 = path.getOrDefault("name")
  valid_595493 = validateParameter(valid_595493, JString, required = true,
                                 default = nil)
  if valid_595493 != nil:
    section.add "name", valid_595493
  var valid_595494 = path.getOrDefault("subscriptionId")
  valid_595494 = validateParameter(valid_595494, JString, required = true,
                                 default = nil)
  if valid_595494 != nil:
    section.add "subscriptionId", valid_595494
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595495 = query.getOrDefault("api-version")
  valid_595495 = validateParameter(valid_595495, JString, required = true,
                                 default = nil)
  if valid_595495 != nil:
    section.add "api-version", valid_595495
  var valid_595496 = query.getOrDefault("synchronous")
  valid_595496 = validateParameter(valid_595496, JBool, required = false, default = nil)
  if valid_595496 != nil:
    section.add "synchronous", valid_595496
  var valid_595497 = query.getOrDefault("softRestart")
  valid_595497 = validateParameter(valid_595497, JBool, required = false, default = nil)
  if valid_595497 != nil:
    section.add "softRestart", valid_595497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595498: Call_WebAppsRestart_595489; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_595498.validator(path, query, header, formData, body)
  let scheme = call_595498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595498.url(scheme.get, call_595498.host, call_595498.base,
                         call_595498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595498, url, valid)

proc call*(call_595499: Call_WebAppsRestart_595489; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestart
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_595500 = newJObject()
  var query_595501 = newJObject()
  add(path_595500, "resourceGroupName", newJString(resourceGroupName))
  add(query_595501, "api-version", newJString(apiVersion))
  add(path_595500, "name", newJString(name))
  add(path_595500, "subscriptionId", newJString(subscriptionId))
  add(query_595501, "synchronous", newJBool(synchronous))
  add(query_595501, "softRestart", newJBool(softRestart))
  result = call_595499.call(path_595500, query_595501, nil, nil, nil)

var webAppsRestart* = Call_WebAppsRestart_595489(name: "webAppsRestart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_WebAppsRestart_595490, base: "", url: url_WebAppsRestart_595491,
    schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensions_595502 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSiteExtensions_595504(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensions_595503(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595505 = path.getOrDefault("resourceGroupName")
  valid_595505 = validateParameter(valid_595505, JString, required = true,
                                 default = nil)
  if valid_595505 != nil:
    section.add "resourceGroupName", valid_595505
  var valid_595506 = path.getOrDefault("name")
  valid_595506 = validateParameter(valid_595506, JString, required = true,
                                 default = nil)
  if valid_595506 != nil:
    section.add "name", valid_595506
  var valid_595507 = path.getOrDefault("subscriptionId")
  valid_595507 = validateParameter(valid_595507, JString, required = true,
                                 default = nil)
  if valid_595507 != nil:
    section.add "subscriptionId", valid_595507
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595508 = query.getOrDefault("api-version")
  valid_595508 = validateParameter(valid_595508, JString, required = true,
                                 default = nil)
  if valid_595508 != nil:
    section.add "api-version", valid_595508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595509: Call_WebAppsListSiteExtensions_595502; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  let valid = call_595509.validator(path, query, header, formData, body)
  let scheme = call_595509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595509.url(scheme.get, call_595509.host, call_595509.base,
                         call_595509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595509, url, valid)

proc call*(call_595510: Call_WebAppsListSiteExtensions_595502;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensions
  ## Get list of site extensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595511 = newJObject()
  var query_595512 = newJObject()
  add(path_595511, "resourceGroupName", newJString(resourceGroupName))
  add(query_595512, "api-version", newJString(apiVersion))
  add(path_595511, "name", newJString(name))
  add(path_595511, "subscriptionId", newJString(subscriptionId))
  result = call_595510.call(path_595511, query_595512, nil, nil, nil)

var webAppsListSiteExtensions* = Call_WebAppsListSiteExtensions_595502(
    name: "webAppsListSiteExtensions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    validator: validate_WebAppsListSiteExtensions_595503, base: "",
    url: url_WebAppsListSiteExtensions_595504, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtension_595525 = ref object of OpenApiRestCall_593437
proc url_WebAppsInstallSiteExtension_595527(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtension_595526(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595528 = path.getOrDefault("resourceGroupName")
  valid_595528 = validateParameter(valid_595528, JString, required = true,
                                 default = nil)
  if valid_595528 != nil:
    section.add "resourceGroupName", valid_595528
  var valid_595529 = path.getOrDefault("name")
  valid_595529 = validateParameter(valid_595529, JString, required = true,
                                 default = nil)
  if valid_595529 != nil:
    section.add "name", valid_595529
  var valid_595530 = path.getOrDefault("subscriptionId")
  valid_595530 = validateParameter(valid_595530, JString, required = true,
                                 default = nil)
  if valid_595530 != nil:
    section.add "subscriptionId", valid_595530
  var valid_595531 = path.getOrDefault("siteExtensionId")
  valid_595531 = validateParameter(valid_595531, JString, required = true,
                                 default = nil)
  if valid_595531 != nil:
    section.add "siteExtensionId", valid_595531
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595532 = query.getOrDefault("api-version")
  valid_595532 = validateParameter(valid_595532, JString, required = true,
                                 default = nil)
  if valid_595532 != nil:
    section.add "api-version", valid_595532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595533: Call_WebAppsInstallSiteExtension_595525; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_595533.validator(path, query, header, formData, body)
  let scheme = call_595533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595533.url(scheme.get, call_595533.host, call_595533.base,
                         call_595533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595533, url, valid)

proc call*(call_595534: Call_WebAppsInstallSiteExtension_595525;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtension
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_595535 = newJObject()
  var query_595536 = newJObject()
  add(path_595535, "resourceGroupName", newJString(resourceGroupName))
  add(query_595536, "api-version", newJString(apiVersion))
  add(path_595535, "name", newJString(name))
  add(path_595535, "subscriptionId", newJString(subscriptionId))
  add(path_595535, "siteExtensionId", newJString(siteExtensionId))
  result = call_595534.call(path_595535, query_595536, nil, nil, nil)

var webAppsInstallSiteExtension* = Call_WebAppsInstallSiteExtension_595525(
    name: "webAppsInstallSiteExtension", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtension_595526, base: "",
    url: url_WebAppsInstallSiteExtension_595527, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtension_595513 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSiteExtension_595515(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtension_595514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595516 = path.getOrDefault("resourceGroupName")
  valid_595516 = validateParameter(valid_595516, JString, required = true,
                                 default = nil)
  if valid_595516 != nil:
    section.add "resourceGroupName", valid_595516
  var valid_595517 = path.getOrDefault("name")
  valid_595517 = validateParameter(valid_595517, JString, required = true,
                                 default = nil)
  if valid_595517 != nil:
    section.add "name", valid_595517
  var valid_595518 = path.getOrDefault("subscriptionId")
  valid_595518 = validateParameter(valid_595518, JString, required = true,
                                 default = nil)
  if valid_595518 != nil:
    section.add "subscriptionId", valid_595518
  var valid_595519 = path.getOrDefault("siteExtensionId")
  valid_595519 = validateParameter(valid_595519, JString, required = true,
                                 default = nil)
  if valid_595519 != nil:
    section.add "siteExtensionId", valid_595519
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595520 = query.getOrDefault("api-version")
  valid_595520 = validateParameter(valid_595520, JString, required = true,
                                 default = nil)
  if valid_595520 != nil:
    section.add "api-version", valid_595520
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595521: Call_WebAppsGetSiteExtension_595513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_595521.validator(path, query, header, formData, body)
  let scheme = call_595521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595521.url(scheme.get, call_595521.host, call_595521.base,
                         call_595521.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595521, url, valid)

proc call*(call_595522: Call_WebAppsGetSiteExtension_595513;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtension
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_595523 = newJObject()
  var query_595524 = newJObject()
  add(path_595523, "resourceGroupName", newJString(resourceGroupName))
  add(query_595524, "api-version", newJString(apiVersion))
  add(path_595523, "name", newJString(name))
  add(path_595523, "subscriptionId", newJString(subscriptionId))
  add(path_595523, "siteExtensionId", newJString(siteExtensionId))
  result = call_595522.call(path_595523, query_595524, nil, nil, nil)

var webAppsGetSiteExtension* = Call_WebAppsGetSiteExtension_595513(
    name: "webAppsGetSiteExtension", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtension_595514, base: "",
    url: url_WebAppsGetSiteExtension_595515, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtension_595537 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSiteExtension_595539(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtension_595538(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595540 = path.getOrDefault("resourceGroupName")
  valid_595540 = validateParameter(valid_595540, JString, required = true,
                                 default = nil)
  if valid_595540 != nil:
    section.add "resourceGroupName", valid_595540
  var valid_595541 = path.getOrDefault("name")
  valid_595541 = validateParameter(valid_595541, JString, required = true,
                                 default = nil)
  if valid_595541 != nil:
    section.add "name", valid_595541
  var valid_595542 = path.getOrDefault("subscriptionId")
  valid_595542 = validateParameter(valid_595542, JString, required = true,
                                 default = nil)
  if valid_595542 != nil:
    section.add "subscriptionId", valid_595542
  var valid_595543 = path.getOrDefault("siteExtensionId")
  valid_595543 = validateParameter(valid_595543, JString, required = true,
                                 default = nil)
  if valid_595543 != nil:
    section.add "siteExtensionId", valid_595543
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595544 = query.getOrDefault("api-version")
  valid_595544 = validateParameter(valid_595544, JString, required = true,
                                 default = nil)
  if valid_595544 != nil:
    section.add "api-version", valid_595544
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595545: Call_WebAppsDeleteSiteExtension_595537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_595545.validator(path, query, header, formData, body)
  let scheme = call_595545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595545.url(scheme.get, call_595545.host, call_595545.base,
                         call_595545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595545, url, valid)

proc call*(call_595546: Call_WebAppsDeleteSiteExtension_595537;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtension
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_595547 = newJObject()
  var query_595548 = newJObject()
  add(path_595547, "resourceGroupName", newJString(resourceGroupName))
  add(query_595548, "api-version", newJString(apiVersion))
  add(path_595547, "name", newJString(name))
  add(path_595547, "subscriptionId", newJString(subscriptionId))
  add(path_595547, "siteExtensionId", newJString(siteExtensionId))
  result = call_595546.call(path_595547, query_595548, nil, nil, nil)

var webAppsDeleteSiteExtension* = Call_WebAppsDeleteSiteExtension_595537(
    name: "webAppsDeleteSiteExtension", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtension_595538, base: "",
    url: url_WebAppsDeleteSiteExtension_595539, schemes: {Scheme.Https})
type
  Call_WebAppsListSlots_595549 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlots_595551(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlots_595550(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets an app's deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595552 = path.getOrDefault("resourceGroupName")
  valid_595552 = validateParameter(valid_595552, JString, required = true,
                                 default = nil)
  if valid_595552 != nil:
    section.add "resourceGroupName", valid_595552
  var valid_595553 = path.getOrDefault("name")
  valid_595553 = validateParameter(valid_595553, JString, required = true,
                                 default = nil)
  if valid_595553 != nil:
    section.add "name", valid_595553
  var valid_595554 = path.getOrDefault("subscriptionId")
  valid_595554 = validateParameter(valid_595554, JString, required = true,
                                 default = nil)
  if valid_595554 != nil:
    section.add "subscriptionId", valid_595554
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595555 = query.getOrDefault("api-version")
  valid_595555 = validateParameter(valid_595555, JString, required = true,
                                 default = nil)
  if valid_595555 != nil:
    section.add "api-version", valid_595555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595556: Call_WebAppsListSlots_595549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets an app's deployment slots.
  ## 
  let valid = call_595556.validator(path, query, header, formData, body)
  let scheme = call_595556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595556.url(scheme.get, call_595556.host, call_595556.base,
                         call_595556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595556, url, valid)

proc call*(call_595557: Call_WebAppsListSlots_595549; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListSlots
  ## Gets an app's deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595558 = newJObject()
  var query_595559 = newJObject()
  add(path_595558, "resourceGroupName", newJString(resourceGroupName))
  add(query_595559, "api-version", newJString(apiVersion))
  add(path_595558, "name", newJString(name))
  add(path_595558, "subscriptionId", newJString(subscriptionId))
  result = call_595557.call(path_595558, query_595559, nil, nil, nil)

var webAppsListSlots* = Call_WebAppsListSlots_595549(name: "webAppsListSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_WebAppsListSlots_595550, base: "",
    url: url_WebAppsListSlots_595551, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSlot_595572 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSlot_595574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSlot_595573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595575 = path.getOrDefault("resourceGroupName")
  valid_595575 = validateParameter(valid_595575, JString, required = true,
                                 default = nil)
  if valid_595575 != nil:
    section.add "resourceGroupName", valid_595575
  var valid_595576 = path.getOrDefault("name")
  valid_595576 = validateParameter(valid_595576, JString, required = true,
                                 default = nil)
  if valid_595576 != nil:
    section.add "name", valid_595576
  var valid_595577 = path.getOrDefault("slot")
  valid_595577 = validateParameter(valid_595577, JString, required = true,
                                 default = nil)
  if valid_595577 != nil:
    section.add "slot", valid_595577
  var valid_595578 = path.getOrDefault("subscriptionId")
  valid_595578 = validateParameter(valid_595578, JString, required = true,
                                 default = nil)
  if valid_595578 != nil:
    section.add "subscriptionId", valid_595578
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JBool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JBool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JBool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name.
  section = newJObject()
  var valid_595579 = query.getOrDefault("skipDnsRegistration")
  valid_595579 = validateParameter(valid_595579, JBool, required = false, default = nil)
  if valid_595579 != nil:
    section.add "skipDnsRegistration", valid_595579
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595580 = query.getOrDefault("api-version")
  valid_595580 = validateParameter(valid_595580, JString, required = true,
                                 default = nil)
  if valid_595580 != nil:
    section.add "api-version", valid_595580
  var valid_595581 = query.getOrDefault("skipCustomDomainVerification")
  valid_595581 = validateParameter(valid_595581, JBool, required = false, default = nil)
  if valid_595581 != nil:
    section.add "skipCustomDomainVerification", valid_595581
  var valid_595582 = query.getOrDefault("forceDnsRegistration")
  valid_595582 = validateParameter(valid_595582, JBool, required = false, default = nil)
  if valid_595582 != nil:
    section.add "forceDnsRegistration", valid_595582
  var valid_595583 = query.getOrDefault("ttlInSeconds")
  valid_595583 = validateParameter(valid_595583, JString, required = false,
                                 default = nil)
  if valid_595583 != nil:
    section.add "ttlInSeconds", valid_595583
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595585: Call_WebAppsCreateOrUpdateSlot_595572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_595585.validator(path, query, header, formData, body)
  let scheme = call_595585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595585.url(scheme.get, call_595585.host, call_595585.base,
                         call_595585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595585, url, valid)

proc call*(call_595586: Call_WebAppsCreateOrUpdateSlot_595572;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: bool = false;
          skipCustomDomainVerification: bool = false;
          forceDnsRegistration: bool = false; ttlInSeconds: string = ""): Recallable =
  ## webAppsCreateOrUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   skipCustomDomainVerification: bool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   forceDnsRegistration: bool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name.
  var path_595587 = newJObject()
  var query_595588 = newJObject()
  var body_595589 = newJObject()
  if siteEnvelope != nil:
    body_595589 = siteEnvelope
  add(path_595587, "resourceGroupName", newJString(resourceGroupName))
  add(query_595588, "skipDnsRegistration", newJBool(skipDnsRegistration))
  add(query_595588, "api-version", newJString(apiVersion))
  add(path_595587, "name", newJString(name))
  add(query_595588, "skipCustomDomainVerification",
      newJBool(skipCustomDomainVerification))
  add(path_595587, "slot", newJString(slot))
  add(path_595587, "subscriptionId", newJString(subscriptionId))
  add(query_595588, "forceDnsRegistration", newJBool(forceDnsRegistration))
  add(query_595588, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_595586.call(path_595587, query_595588, nil, nil, body_595589)

var webAppsCreateOrUpdateSlot* = Call_WebAppsCreateOrUpdateSlot_595572(
    name: "webAppsCreateOrUpdateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsCreateOrUpdateSlot_595573, base: "",
    url: url_WebAppsCreateOrUpdateSlot_595574, schemes: {Scheme.Https})
type
  Call_WebAppsGetSlot_595560 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSlot_595562(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSlot_595561(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595563 = path.getOrDefault("resourceGroupName")
  valid_595563 = validateParameter(valid_595563, JString, required = true,
                                 default = nil)
  if valid_595563 != nil:
    section.add "resourceGroupName", valid_595563
  var valid_595564 = path.getOrDefault("name")
  valid_595564 = validateParameter(valid_595564, JString, required = true,
                                 default = nil)
  if valid_595564 != nil:
    section.add "name", valid_595564
  var valid_595565 = path.getOrDefault("slot")
  valid_595565 = validateParameter(valid_595565, JString, required = true,
                                 default = nil)
  if valid_595565 != nil:
    section.add "slot", valid_595565
  var valid_595566 = path.getOrDefault("subscriptionId")
  valid_595566 = validateParameter(valid_595566, JString, required = true,
                                 default = nil)
  if valid_595566 != nil:
    section.add "subscriptionId", valid_595566
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595567 = query.getOrDefault("api-version")
  valid_595567 = validateParameter(valid_595567, JString, required = true,
                                 default = nil)
  if valid_595567 != nil:
    section.add "api-version", valid_595567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595568: Call_WebAppsGetSlot_595560; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_595568.validator(path, query, header, formData, body)
  let scheme = call_595568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595568.url(scheme.get, call_595568.host, call_595568.base,
                         call_595568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595568, url, valid)

proc call*(call_595569: Call_WebAppsGetSlot_595560; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetSlot
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595570 = newJObject()
  var query_595571 = newJObject()
  add(path_595570, "resourceGroupName", newJString(resourceGroupName))
  add(query_595571, "api-version", newJString(apiVersion))
  add(path_595570, "name", newJString(name))
  add(path_595570, "slot", newJString(slot))
  add(path_595570, "subscriptionId", newJString(subscriptionId))
  result = call_595569.call(path_595570, query_595571, nil, nil, nil)

var webAppsGetSlot* = Call_WebAppsGetSlot_595560(name: "webAppsGetSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsGetSlot_595561, base: "", url: url_WebAppsGetSlot_595562,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlot_595605 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSlot_595607(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlot_595606(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595608 = path.getOrDefault("resourceGroupName")
  valid_595608 = validateParameter(valid_595608, JString, required = true,
                                 default = nil)
  if valid_595608 != nil:
    section.add "resourceGroupName", valid_595608
  var valid_595609 = path.getOrDefault("name")
  valid_595609 = validateParameter(valid_595609, JString, required = true,
                                 default = nil)
  if valid_595609 != nil:
    section.add "name", valid_595609
  var valid_595610 = path.getOrDefault("slot")
  valid_595610 = validateParameter(valid_595610, JString, required = true,
                                 default = nil)
  if valid_595610 != nil:
    section.add "slot", valid_595610
  var valid_595611 = path.getOrDefault("subscriptionId")
  valid_595611 = validateParameter(valid_595611, JString, required = true,
                                 default = nil)
  if valid_595611 != nil:
    section.add "subscriptionId", valid_595611
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JBool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   api-version: JString (required)
  ##              : API Version
  ##   skipCustomDomainVerification: JBool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   forceDnsRegistration: JBool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: JString
  ##               : Time to live in seconds for web app's default domain name.
  section = newJObject()
  var valid_595612 = query.getOrDefault("skipDnsRegistration")
  valid_595612 = validateParameter(valid_595612, JBool, required = false, default = nil)
  if valid_595612 != nil:
    section.add "skipDnsRegistration", valid_595612
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595613 = query.getOrDefault("api-version")
  valid_595613 = validateParameter(valid_595613, JString, required = true,
                                 default = nil)
  if valid_595613 != nil:
    section.add "api-version", valid_595613
  var valid_595614 = query.getOrDefault("skipCustomDomainVerification")
  valid_595614 = validateParameter(valid_595614, JBool, required = false, default = nil)
  if valid_595614 != nil:
    section.add "skipCustomDomainVerification", valid_595614
  var valid_595615 = query.getOrDefault("forceDnsRegistration")
  valid_595615 = validateParameter(valid_595615, JBool, required = false, default = nil)
  if valid_595615 != nil:
    section.add "forceDnsRegistration", valid_595615
  var valid_595616 = query.getOrDefault("ttlInSeconds")
  valid_595616 = validateParameter(valid_595616, JString, required = false,
                                 default = nil)
  if valid_595616 != nil:
    section.add "ttlInSeconds", valid_595616
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595618: Call_WebAppsUpdateSlot_595605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_595618.validator(path, query, header, formData, body)
  let scheme = call_595618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595618.url(scheme.get, call_595618.host, call_595618.base,
                         call_595618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595618, url, valid)

proc call*(call_595619: Call_WebAppsUpdateSlot_595605; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; skipDnsRegistration: bool = false;
          skipCustomDomainVerification: bool = false;
          forceDnsRegistration: bool = false; ttlInSeconds: string = ""): Recallable =
  ## webAppsUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true web app hostname is not registered with DNS on creation. This parameter is
  ##  only used for app creation.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   skipCustomDomainVerification: bool
  ##                               : If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   forceDnsRegistration: bool
  ##                       : If true, web app hostname is force registered with DNS.
  ##   ttlInSeconds: string
  ##               : Time to live in seconds for web app's default domain name.
  var path_595620 = newJObject()
  var query_595621 = newJObject()
  var body_595622 = newJObject()
  if siteEnvelope != nil:
    body_595622 = siteEnvelope
  add(path_595620, "resourceGroupName", newJString(resourceGroupName))
  add(query_595621, "skipDnsRegistration", newJBool(skipDnsRegistration))
  add(query_595621, "api-version", newJString(apiVersion))
  add(path_595620, "name", newJString(name))
  add(query_595621, "skipCustomDomainVerification",
      newJBool(skipCustomDomainVerification))
  add(path_595620, "slot", newJString(slot))
  add(path_595620, "subscriptionId", newJString(subscriptionId))
  add(query_595621, "forceDnsRegistration", newJBool(forceDnsRegistration))
  add(query_595621, "ttlInSeconds", newJString(ttlInSeconds))
  result = call_595619.call(path_595620, query_595621, nil, nil, body_595622)

var webAppsUpdateSlot* = Call_WebAppsUpdateSlot_595605(name: "webAppsUpdateSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsUpdateSlot_595606, base: "",
    url: url_WebAppsUpdateSlot_595607, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSlot_595590 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSlot_595592(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSlot_595591(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595593 = path.getOrDefault("resourceGroupName")
  valid_595593 = validateParameter(valid_595593, JString, required = true,
                                 default = nil)
  if valid_595593 != nil:
    section.add "resourceGroupName", valid_595593
  var valid_595594 = path.getOrDefault("name")
  valid_595594 = validateParameter(valid_595594, JString, required = true,
                                 default = nil)
  if valid_595594 != nil:
    section.add "name", valid_595594
  var valid_595595 = path.getOrDefault("slot")
  valid_595595 = validateParameter(valid_595595, JString, required = true,
                                 default = nil)
  if valid_595595 != nil:
    section.add "slot", valid_595595
  var valid_595596 = path.getOrDefault("subscriptionId")
  valid_595596 = validateParameter(valid_595596, JString, required = true,
                                 default = nil)
  if valid_595596 != nil:
    section.add "subscriptionId", valid_595596
  result.add "path", section
  ## parameters in `query` object:
  ##   skipDnsRegistration: JBool
  ##                      : If true, DNS registration is skipped.
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  var valid_595597 = query.getOrDefault("skipDnsRegistration")
  valid_595597 = validateParameter(valid_595597, JBool, required = false, default = nil)
  if valid_595597 != nil:
    section.add "skipDnsRegistration", valid_595597
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595598 = query.getOrDefault("api-version")
  valid_595598 = validateParameter(valid_595598, JString, required = true,
                                 default = nil)
  if valid_595598 != nil:
    section.add "api-version", valid_595598
  var valid_595599 = query.getOrDefault("deleteMetrics")
  valid_595599 = validateParameter(valid_595599, JBool, required = false, default = nil)
  if valid_595599 != nil:
    section.add "deleteMetrics", valid_595599
  var valid_595600 = query.getOrDefault("deleteEmptyServerFarm")
  valid_595600 = validateParameter(valid_595600, JBool, required = false, default = nil)
  if valid_595600 != nil:
    section.add "deleteEmptyServerFarm", valid_595600
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595601: Call_WebAppsDeleteSlot_595590; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_595601.validator(path, query, header, formData, body)
  let scheme = call_595601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595601.url(scheme.get, call_595601.host, call_595601.base,
                         call_595601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595601, url, valid)

proc call*(call_595602: Call_WebAppsDeleteSlot_595590; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          skipDnsRegistration: bool = false; deleteMetrics: bool = false;
          deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDeleteSlot
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   skipDnsRegistration: bool
  ##                      : If true, DNS registration is skipped.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   slot: string (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_595603 = newJObject()
  var query_595604 = newJObject()
  add(path_595603, "resourceGroupName", newJString(resourceGroupName))
  add(query_595604, "skipDnsRegistration", newJBool(skipDnsRegistration))
  add(query_595604, "api-version", newJString(apiVersion))
  add(path_595603, "name", newJString(name))
  add(path_595603, "slot", newJString(slot))
  add(path_595603, "subscriptionId", newJString(subscriptionId))
  add(query_595604, "deleteMetrics", newJBool(deleteMetrics))
  add(query_595604, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_595602.call(path_595603, query_595604, nil, nil, nil)

var webAppsDeleteSlot* = Call_WebAppsDeleteSlot_595590(name: "webAppsDeleteSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsDeleteSlot_595591, base: "",
    url: url_WebAppsDeleteSlot_595592, schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostnameSlot_595623 = ref object of OpenApiRestCall_593437
proc url_WebAppsAnalyzeCustomHostnameSlot_595625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostnameSlot_595624(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595626 = path.getOrDefault("resourceGroupName")
  valid_595626 = validateParameter(valid_595626, JString, required = true,
                                 default = nil)
  if valid_595626 != nil:
    section.add "resourceGroupName", valid_595626
  var valid_595627 = path.getOrDefault("name")
  valid_595627 = validateParameter(valid_595627, JString, required = true,
                                 default = nil)
  if valid_595627 != nil:
    section.add "name", valid_595627
  var valid_595628 = path.getOrDefault("slot")
  valid_595628 = validateParameter(valid_595628, JString, required = true,
                                 default = nil)
  if valid_595628 != nil:
    section.add "slot", valid_595628
  var valid_595629 = path.getOrDefault("subscriptionId")
  valid_595629 = validateParameter(valid_595629, JString, required = true,
                                 default = nil)
  if valid_595629 != nil:
    section.add "subscriptionId", valid_595629
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595630 = query.getOrDefault("api-version")
  valid_595630 = validateParameter(valid_595630, JString, required = true,
                                 default = nil)
  if valid_595630 != nil:
    section.add "api-version", valid_595630
  var valid_595631 = query.getOrDefault("hostName")
  valid_595631 = validateParameter(valid_595631, JString, required = false,
                                 default = nil)
  if valid_595631 != nil:
    section.add "hostName", valid_595631
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595632: Call_WebAppsAnalyzeCustomHostnameSlot_595623;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_595632.validator(path, query, header, formData, body)
  let scheme = call_595632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595632.url(scheme.get, call_595632.host, call_595632.base,
                         call_595632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595632, url, valid)

proc call*(call_595633: Call_WebAppsAnalyzeCustomHostnameSlot_595623;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostnameSlot
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595634 = newJObject()
  var query_595635 = newJObject()
  add(path_595634, "resourceGroupName", newJString(resourceGroupName))
  add(query_595635, "api-version", newJString(apiVersion))
  add(path_595634, "name", newJString(name))
  add(query_595635, "hostName", newJString(hostName))
  add(path_595634, "slot", newJString(slot))
  add(path_595634, "subscriptionId", newJString(subscriptionId))
  result = call_595633.call(path_595634, query_595635, nil, nil, nil)

var webAppsAnalyzeCustomHostnameSlot* = Call_WebAppsAnalyzeCustomHostnameSlot_595623(
    name: "webAppsAnalyzeCustomHostnameSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostnameSlot_595624, base: "",
    url: url_WebAppsAnalyzeCustomHostnameSlot_595625, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigurationSlot_595636 = ref object of OpenApiRestCall_593437
proc url_WebAppsApplySlotConfigurationSlot_595638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigurationSlot_595637(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595639 = path.getOrDefault("resourceGroupName")
  valid_595639 = validateParameter(valid_595639, JString, required = true,
                                 default = nil)
  if valid_595639 != nil:
    section.add "resourceGroupName", valid_595639
  var valid_595640 = path.getOrDefault("name")
  valid_595640 = validateParameter(valid_595640, JString, required = true,
                                 default = nil)
  if valid_595640 != nil:
    section.add "name", valid_595640
  var valid_595641 = path.getOrDefault("slot")
  valid_595641 = validateParameter(valid_595641, JString, required = true,
                                 default = nil)
  if valid_595641 != nil:
    section.add "slot", valid_595641
  var valid_595642 = path.getOrDefault("subscriptionId")
  valid_595642 = validateParameter(valid_595642, JString, required = true,
                                 default = nil)
  if valid_595642 != nil:
    section.add "subscriptionId", valid_595642
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595643 = query.getOrDefault("api-version")
  valid_595643 = validateParameter(valid_595643, JString, required = true,
                                 default = nil)
  if valid_595643 != nil:
    section.add "api-version", valid_595643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595645: Call_WebAppsApplySlotConfigurationSlot_595636;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_595645.validator(path, query, header, formData, body)
  let scheme = call_595645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595645.url(scheme.get, call_595645.host, call_595645.base,
                         call_595645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595645, url, valid)

proc call*(call_595646: Call_WebAppsApplySlotConfigurationSlot_595636;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigurationSlot
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_595647 = newJObject()
  var query_595648 = newJObject()
  var body_595649 = newJObject()
  add(path_595647, "resourceGroupName", newJString(resourceGroupName))
  add(query_595648, "api-version", newJString(apiVersion))
  add(path_595647, "name", newJString(name))
  add(path_595647, "slot", newJString(slot))
  add(path_595647, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_595649 = slotSwapEntity
  result = call_595646.call(path_595647, query_595648, nil, nil, body_595649)

var webAppsApplySlotConfigurationSlot* = Call_WebAppsApplySlotConfigurationSlot_595636(
    name: "webAppsApplySlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigurationSlot_595637, base: "",
    url: url_WebAppsApplySlotConfigurationSlot_595638, schemes: {Scheme.Https})
type
  Call_WebAppsBackupSlot_595650 = ref object of OpenApiRestCall_593437
proc url_WebAppsBackupSlot_595652(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackupSlot_595651(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595653 = path.getOrDefault("resourceGroupName")
  valid_595653 = validateParameter(valid_595653, JString, required = true,
                                 default = nil)
  if valid_595653 != nil:
    section.add "resourceGroupName", valid_595653
  var valid_595654 = path.getOrDefault("name")
  valid_595654 = validateParameter(valid_595654, JString, required = true,
                                 default = nil)
  if valid_595654 != nil:
    section.add "name", valid_595654
  var valid_595655 = path.getOrDefault("slot")
  valid_595655 = validateParameter(valid_595655, JString, required = true,
                                 default = nil)
  if valid_595655 != nil:
    section.add "slot", valid_595655
  var valid_595656 = path.getOrDefault("subscriptionId")
  valid_595656 = validateParameter(valid_595656, JString, required = true,
                                 default = nil)
  if valid_595656 != nil:
    section.add "subscriptionId", valid_595656
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595657 = query.getOrDefault("api-version")
  valid_595657 = validateParameter(valid_595657, JString, required = true,
                                 default = nil)
  if valid_595657 != nil:
    section.add "api-version", valid_595657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595659: Call_WebAppsBackupSlot_595650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_595659.validator(path, query, header, formData, body)
  let scheme = call_595659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595659.url(scheme.get, call_595659.host, call_595659.base,
                         call_595659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595659, url, valid)

proc call*(call_595660: Call_WebAppsBackupSlot_595650; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode): Recallable =
  ## webAppsBackupSlot
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_595661 = newJObject()
  var query_595662 = newJObject()
  var body_595663 = newJObject()
  add(path_595661, "resourceGroupName", newJString(resourceGroupName))
  add(query_595662, "api-version", newJString(apiVersion))
  add(path_595661, "name", newJString(name))
  add(path_595661, "slot", newJString(slot))
  add(path_595661, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595663 = request
  result = call_595660.call(path_595661, query_595662, nil, nil, body_595663)

var webAppsBackupSlot* = Call_WebAppsBackupSlot_595650(name: "webAppsBackupSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_WebAppsBackupSlot_595651, base: "",
    url: url_WebAppsBackupSlot_595652, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupsSlot_595664 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackupsSlot_595666(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupsSlot_595665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595667 = path.getOrDefault("resourceGroupName")
  valid_595667 = validateParameter(valid_595667, JString, required = true,
                                 default = nil)
  if valid_595667 != nil:
    section.add "resourceGroupName", valid_595667
  var valid_595668 = path.getOrDefault("name")
  valid_595668 = validateParameter(valid_595668, JString, required = true,
                                 default = nil)
  if valid_595668 != nil:
    section.add "name", valid_595668
  var valid_595669 = path.getOrDefault("slot")
  valid_595669 = validateParameter(valid_595669, JString, required = true,
                                 default = nil)
  if valid_595669 != nil:
    section.add "slot", valid_595669
  var valid_595670 = path.getOrDefault("subscriptionId")
  valid_595670 = validateParameter(valid_595670, JString, required = true,
                                 default = nil)
  if valid_595670 != nil:
    section.add "subscriptionId", valid_595670
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595671 = query.getOrDefault("api-version")
  valid_595671 = validateParameter(valid_595671, JString, required = true,
                                 default = nil)
  if valid_595671 != nil:
    section.add "api-version", valid_595671
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595672: Call_WebAppsListBackupsSlot_595664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_595672.validator(path, query, header, formData, body)
  let scheme = call_595672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595672.url(scheme.get, call_595672.host, call_595672.base,
                         call_595672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595672, url, valid)

proc call*(call_595673: Call_WebAppsListBackupsSlot_595664;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListBackupsSlot
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595674 = newJObject()
  var query_595675 = newJObject()
  add(path_595674, "resourceGroupName", newJString(resourceGroupName))
  add(query_595675, "api-version", newJString(apiVersion))
  add(path_595674, "name", newJString(name))
  add(path_595674, "slot", newJString(slot))
  add(path_595674, "subscriptionId", newJString(subscriptionId))
  result = call_595673.call(path_595674, query_595675, nil, nil, nil)

var webAppsListBackupsSlot* = Call_WebAppsListBackupsSlot_595664(
    name: "webAppsListBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_WebAppsListBackupsSlot_595665, base: "",
    url: url_WebAppsListBackupsSlot_595666, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverRestoreSlot_595676 = ref object of OpenApiRestCall_593437
proc url_WebAppsDiscoverRestoreSlot_595678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/discover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverRestoreSlot_595677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595679 = path.getOrDefault("resourceGroupName")
  valid_595679 = validateParameter(valid_595679, JString, required = true,
                                 default = nil)
  if valid_595679 != nil:
    section.add "resourceGroupName", valid_595679
  var valid_595680 = path.getOrDefault("name")
  valid_595680 = validateParameter(valid_595680, JString, required = true,
                                 default = nil)
  if valid_595680 != nil:
    section.add "name", valid_595680
  var valid_595681 = path.getOrDefault("slot")
  valid_595681 = validateParameter(valid_595681, JString, required = true,
                                 default = nil)
  if valid_595681 != nil:
    section.add "slot", valid_595681
  var valid_595682 = path.getOrDefault("subscriptionId")
  valid_595682 = validateParameter(valid_595682, JString, required = true,
                                 default = nil)
  if valid_595682 != nil:
    section.add "subscriptionId", valid_595682
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595683 = query.getOrDefault("api-version")
  valid_595683 = validateParameter(valid_595683, JString, required = true,
                                 default = nil)
  if valid_595683 != nil:
    section.add "api-version", valid_595683
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595685: Call_WebAppsDiscoverRestoreSlot_595676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ## 
  let valid = call_595685.validator(path, query, header, formData, body)
  let scheme = call_595685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595685.url(scheme.get, call_595685.host, call_595685.base,
                         call_595685.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595685, url, valid)

proc call*(call_595686: Call_WebAppsDiscoverRestoreSlot_595676;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverRestoreSlot
  ## Discovers an existing app backup that can be restored from a blob in Azure storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_595687 = newJObject()
  var query_595688 = newJObject()
  var body_595689 = newJObject()
  add(path_595687, "resourceGroupName", newJString(resourceGroupName))
  add(query_595688, "api-version", newJString(apiVersion))
  add(path_595687, "name", newJString(name))
  add(path_595687, "slot", newJString(slot))
  add(path_595687, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595689 = request
  result = call_595686.call(path_595687, query_595688, nil, nil, body_595689)

var webAppsDiscoverRestoreSlot* = Call_WebAppsDiscoverRestoreSlot_595676(
    name: "webAppsDiscoverRestoreSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
    validator: validate_WebAppsDiscoverRestoreSlot_595677, base: "",
    url: url_WebAppsDiscoverRestoreSlot_595678, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatusSlot_595690 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupStatusSlot_595692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatusSlot_595691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595693 = path.getOrDefault("resourceGroupName")
  valid_595693 = validateParameter(valid_595693, JString, required = true,
                                 default = nil)
  if valid_595693 != nil:
    section.add "resourceGroupName", valid_595693
  var valid_595694 = path.getOrDefault("name")
  valid_595694 = validateParameter(valid_595694, JString, required = true,
                                 default = nil)
  if valid_595694 != nil:
    section.add "name", valid_595694
  var valid_595695 = path.getOrDefault("slot")
  valid_595695 = validateParameter(valid_595695, JString, required = true,
                                 default = nil)
  if valid_595695 != nil:
    section.add "slot", valid_595695
  var valid_595696 = path.getOrDefault("subscriptionId")
  valid_595696 = validateParameter(valid_595696, JString, required = true,
                                 default = nil)
  if valid_595696 != nil:
    section.add "subscriptionId", valid_595696
  var valid_595697 = path.getOrDefault("backupId")
  valid_595697 = validateParameter(valid_595697, JString, required = true,
                                 default = nil)
  if valid_595697 != nil:
    section.add "backupId", valid_595697
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595698 = query.getOrDefault("api-version")
  valid_595698 = validateParameter(valid_595698, JString, required = true,
                                 default = nil)
  if valid_595698 != nil:
    section.add "api-version", valid_595698
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595699: Call_WebAppsGetBackupStatusSlot_595690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_595699.validator(path, query, header, formData, body)
  let scheme = call_595699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595699.url(scheme.get, call_595699.host, call_595699.base,
                         call_595699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595699, url, valid)

proc call*(call_595700: Call_WebAppsGetBackupStatusSlot_595690;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatusSlot
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_595701 = newJObject()
  var query_595702 = newJObject()
  add(path_595701, "resourceGroupName", newJString(resourceGroupName))
  add(query_595702, "api-version", newJString(apiVersion))
  add(path_595701, "name", newJString(name))
  add(path_595701, "slot", newJString(slot))
  add(path_595701, "subscriptionId", newJString(subscriptionId))
  add(path_595701, "backupId", newJString(backupId))
  result = call_595700.call(path_595701, query_595702, nil, nil, nil)

var webAppsGetBackupStatusSlot* = Call_WebAppsGetBackupStatusSlot_595690(
    name: "webAppsGetBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatusSlot_595691, base: "",
    url: url_WebAppsGetBackupStatusSlot_595692, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupSlot_595703 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackupSlot_595705(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupSlot_595704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595706 = path.getOrDefault("resourceGroupName")
  valid_595706 = validateParameter(valid_595706, JString, required = true,
                                 default = nil)
  if valid_595706 != nil:
    section.add "resourceGroupName", valid_595706
  var valid_595707 = path.getOrDefault("name")
  valid_595707 = validateParameter(valid_595707, JString, required = true,
                                 default = nil)
  if valid_595707 != nil:
    section.add "name", valid_595707
  var valid_595708 = path.getOrDefault("slot")
  valid_595708 = validateParameter(valid_595708, JString, required = true,
                                 default = nil)
  if valid_595708 != nil:
    section.add "slot", valid_595708
  var valid_595709 = path.getOrDefault("subscriptionId")
  valid_595709 = validateParameter(valid_595709, JString, required = true,
                                 default = nil)
  if valid_595709 != nil:
    section.add "subscriptionId", valid_595709
  var valid_595710 = path.getOrDefault("backupId")
  valid_595710 = validateParameter(valid_595710, JString, required = true,
                                 default = nil)
  if valid_595710 != nil:
    section.add "backupId", valid_595710
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595711 = query.getOrDefault("api-version")
  valid_595711 = validateParameter(valid_595711, JString, required = true,
                                 default = nil)
  if valid_595711 != nil:
    section.add "api-version", valid_595711
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595712: Call_WebAppsDeleteBackupSlot_595703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_595712.validator(path, query, header, formData, body)
  let scheme = call_595712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595712.url(scheme.get, call_595712.host, call_595712.base,
                         call_595712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595712, url, valid)

proc call*(call_595713: Call_WebAppsDeleteBackupSlot_595703;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackupSlot
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_595714 = newJObject()
  var query_595715 = newJObject()
  add(path_595714, "resourceGroupName", newJString(resourceGroupName))
  add(query_595715, "api-version", newJString(apiVersion))
  add(path_595714, "name", newJString(name))
  add(path_595714, "slot", newJString(slot))
  add(path_595714, "subscriptionId", newJString(subscriptionId))
  add(path_595714, "backupId", newJString(backupId))
  result = call_595713.call(path_595714, query_595715, nil, nil, nil)

var webAppsDeleteBackupSlot* = Call_WebAppsDeleteBackupSlot_595703(
    name: "webAppsDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackupSlot_595704, base: "",
    url: url_WebAppsDeleteBackupSlot_595705, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecretsSlot_595716 = ref object of OpenApiRestCall_593437
proc url_WebAppsListBackupStatusSecretsSlot_595718(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecretsSlot_595717(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595719 = path.getOrDefault("resourceGroupName")
  valid_595719 = validateParameter(valid_595719, JString, required = true,
                                 default = nil)
  if valid_595719 != nil:
    section.add "resourceGroupName", valid_595719
  var valid_595720 = path.getOrDefault("name")
  valid_595720 = validateParameter(valid_595720, JString, required = true,
                                 default = nil)
  if valid_595720 != nil:
    section.add "name", valid_595720
  var valid_595721 = path.getOrDefault("slot")
  valid_595721 = validateParameter(valid_595721, JString, required = true,
                                 default = nil)
  if valid_595721 != nil:
    section.add "slot", valid_595721
  var valid_595722 = path.getOrDefault("subscriptionId")
  valid_595722 = validateParameter(valid_595722, JString, required = true,
                                 default = nil)
  if valid_595722 != nil:
    section.add "subscriptionId", valid_595722
  var valid_595723 = path.getOrDefault("backupId")
  valid_595723 = validateParameter(valid_595723, JString, required = true,
                                 default = nil)
  if valid_595723 != nil:
    section.add "backupId", valid_595723
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595724 = query.getOrDefault("api-version")
  valid_595724 = validateParameter(valid_595724, JString, required = true,
                                 default = nil)
  if valid_595724 != nil:
    section.add "api-version", valid_595724
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595726: Call_WebAppsListBackupStatusSecretsSlot_595716;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_595726.validator(path, query, header, formData, body)
  let scheme = call_595726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595726.url(scheme.get, call_595726.host, call_595726.base,
                         call_595726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595726, url, valid)

proc call*(call_595727: Call_WebAppsListBackupStatusSecretsSlot_595716;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecretsSlot
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_595728 = newJObject()
  var query_595729 = newJObject()
  var body_595730 = newJObject()
  add(path_595728, "resourceGroupName", newJString(resourceGroupName))
  add(query_595729, "api-version", newJString(apiVersion))
  add(path_595728, "name", newJString(name))
  add(path_595728, "slot", newJString(slot))
  add(path_595728, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595730 = request
  add(path_595728, "backupId", newJString(backupId))
  result = call_595727.call(path_595728, query_595729, nil, nil, body_595730)

var webAppsListBackupStatusSecretsSlot* = Call_WebAppsListBackupStatusSecretsSlot_595716(
    name: "webAppsListBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecretsSlot_595717, base: "",
    url: url_WebAppsListBackupStatusSecretsSlot_595718, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSlot_595731 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestoreSlot_595733(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSlot_595732(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595734 = path.getOrDefault("resourceGroupName")
  valid_595734 = validateParameter(valid_595734, JString, required = true,
                                 default = nil)
  if valid_595734 != nil:
    section.add "resourceGroupName", valid_595734
  var valid_595735 = path.getOrDefault("name")
  valid_595735 = validateParameter(valid_595735, JString, required = true,
                                 default = nil)
  if valid_595735 != nil:
    section.add "name", valid_595735
  var valid_595736 = path.getOrDefault("slot")
  valid_595736 = validateParameter(valid_595736, JString, required = true,
                                 default = nil)
  if valid_595736 != nil:
    section.add "slot", valid_595736
  var valid_595737 = path.getOrDefault("subscriptionId")
  valid_595737 = validateParameter(valid_595737, JString, required = true,
                                 default = nil)
  if valid_595737 != nil:
    section.add "subscriptionId", valid_595737
  var valid_595738 = path.getOrDefault("backupId")
  valid_595738 = validateParameter(valid_595738, JString, required = true,
                                 default = nil)
  if valid_595738 != nil:
    section.add "backupId", valid_595738
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595739 = query.getOrDefault("api-version")
  valid_595739 = validateParameter(valid_595739, JString, required = true,
                                 default = nil)
  if valid_595739 != nil:
    section.add "api-version", valid_595739
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595741: Call_WebAppsRestoreSlot_595731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_595741.validator(path, query, header, formData, body)
  let scheme = call_595741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595741.url(scheme.get, call_595741.host, call_595741.base,
                         call_595741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595741, url, valid)

proc call*(call_595742: Call_WebAppsRestoreSlot_595731; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode; backupId: string): Recallable =
  ## webAppsRestoreSlot
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_595743 = newJObject()
  var query_595744 = newJObject()
  var body_595745 = newJObject()
  add(path_595743, "resourceGroupName", newJString(resourceGroupName))
  add(query_595744, "api-version", newJString(apiVersion))
  add(path_595743, "name", newJString(name))
  add(path_595743, "slot", newJString(slot))
  add(path_595743, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595745 = request
  add(path_595743, "backupId", newJString(backupId))
  result = call_595742.call(path_595743, query_595744, nil, nil, body_595745)

var webAppsRestoreSlot* = Call_WebAppsRestoreSlot_595731(
    name: "webAppsRestoreSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_WebAppsRestoreSlot_595732, base: "",
    url: url_WebAppsRestoreSlot_595733, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationsSlot_595746 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurationsSlot_595748(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationsSlot_595747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595749 = path.getOrDefault("resourceGroupName")
  valid_595749 = validateParameter(valid_595749, JString, required = true,
                                 default = nil)
  if valid_595749 != nil:
    section.add "resourceGroupName", valid_595749
  var valid_595750 = path.getOrDefault("name")
  valid_595750 = validateParameter(valid_595750, JString, required = true,
                                 default = nil)
  if valid_595750 != nil:
    section.add "name", valid_595750
  var valid_595751 = path.getOrDefault("slot")
  valid_595751 = validateParameter(valid_595751, JString, required = true,
                                 default = nil)
  if valid_595751 != nil:
    section.add "slot", valid_595751
  var valid_595752 = path.getOrDefault("subscriptionId")
  valid_595752 = validateParameter(valid_595752, JString, required = true,
                                 default = nil)
  if valid_595752 != nil:
    section.add "subscriptionId", valid_595752
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595753 = query.getOrDefault("api-version")
  valid_595753 = validateParameter(valid_595753, JString, required = true,
                                 default = nil)
  if valid_595753 != nil:
    section.add "api-version", valid_595753
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595754: Call_WebAppsListConfigurationsSlot_595746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_595754.validator(path, query, header, formData, body)
  let scheme = call_595754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595754.url(scheme.get, call_595754.host, call_595754.base,
                         call_595754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595754, url, valid)

proc call*(call_595755: Call_WebAppsListConfigurationsSlot_595746;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationsSlot
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595756 = newJObject()
  var query_595757 = newJObject()
  add(path_595756, "resourceGroupName", newJString(resourceGroupName))
  add(query_595757, "api-version", newJString(apiVersion))
  add(path_595756, "name", newJString(name))
  add(path_595756, "slot", newJString(slot))
  add(path_595756, "subscriptionId", newJString(subscriptionId))
  result = call_595755.call(path_595756, query_595757, nil, nil, nil)

var webAppsListConfigurationsSlot* = Call_WebAppsListConfigurationsSlot_595746(
    name: "webAppsListConfigurationsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    validator: validate_WebAppsListConfigurationsSlot_595747, base: "",
    url: url_WebAppsListConfigurationsSlot_595748, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettingsSlot_595758 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateApplicationSettingsSlot_595760(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettingsSlot_595759(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595761 = path.getOrDefault("resourceGroupName")
  valid_595761 = validateParameter(valid_595761, JString, required = true,
                                 default = nil)
  if valid_595761 != nil:
    section.add "resourceGroupName", valid_595761
  var valid_595762 = path.getOrDefault("name")
  valid_595762 = validateParameter(valid_595762, JString, required = true,
                                 default = nil)
  if valid_595762 != nil:
    section.add "name", valid_595762
  var valid_595763 = path.getOrDefault("slot")
  valid_595763 = validateParameter(valid_595763, JString, required = true,
                                 default = nil)
  if valid_595763 != nil:
    section.add "slot", valid_595763
  var valid_595764 = path.getOrDefault("subscriptionId")
  valid_595764 = validateParameter(valid_595764, JString, required = true,
                                 default = nil)
  if valid_595764 != nil:
    section.add "subscriptionId", valid_595764
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595765 = query.getOrDefault("api-version")
  valid_595765 = validateParameter(valid_595765, JString, required = true,
                                 default = nil)
  if valid_595765 != nil:
    section.add "api-version", valid_595765
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595767: Call_WebAppsUpdateApplicationSettingsSlot_595758;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_595767.validator(path, query, header, formData, body)
  let scheme = call_595767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595767.url(scheme.get, call_595767.host, call_595767.base,
                         call_595767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595767, url, valid)

proc call*(call_595768: Call_WebAppsUpdateApplicationSettingsSlot_595758;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettingsSlot
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595769 = newJObject()
  var query_595770 = newJObject()
  var body_595771 = newJObject()
  add(path_595769, "resourceGroupName", newJString(resourceGroupName))
  add(query_595770, "api-version", newJString(apiVersion))
  add(path_595769, "name", newJString(name))
  if appSettings != nil:
    body_595771 = appSettings
  add(path_595769, "slot", newJString(slot))
  add(path_595769, "subscriptionId", newJString(subscriptionId))
  result = call_595768.call(path_595769, query_595770, nil, nil, body_595771)

var webAppsUpdateApplicationSettingsSlot* = Call_WebAppsUpdateApplicationSettingsSlot_595758(
    name: "webAppsUpdateApplicationSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettingsSlot_595759, base: "",
    url: url_WebAppsUpdateApplicationSettingsSlot_595760, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettingsSlot_595772 = ref object of OpenApiRestCall_593437
proc url_WebAppsListApplicationSettingsSlot_595774(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettingsSlot_595773(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595775 = path.getOrDefault("resourceGroupName")
  valid_595775 = validateParameter(valid_595775, JString, required = true,
                                 default = nil)
  if valid_595775 != nil:
    section.add "resourceGroupName", valid_595775
  var valid_595776 = path.getOrDefault("name")
  valid_595776 = validateParameter(valid_595776, JString, required = true,
                                 default = nil)
  if valid_595776 != nil:
    section.add "name", valid_595776
  var valid_595777 = path.getOrDefault("slot")
  valid_595777 = validateParameter(valid_595777, JString, required = true,
                                 default = nil)
  if valid_595777 != nil:
    section.add "slot", valid_595777
  var valid_595778 = path.getOrDefault("subscriptionId")
  valid_595778 = validateParameter(valid_595778, JString, required = true,
                                 default = nil)
  if valid_595778 != nil:
    section.add "subscriptionId", valid_595778
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595779 = query.getOrDefault("api-version")
  valid_595779 = validateParameter(valid_595779, JString, required = true,
                                 default = nil)
  if valid_595779 != nil:
    section.add "api-version", valid_595779
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595780: Call_WebAppsListApplicationSettingsSlot_595772;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_595780.validator(path, query, header, formData, body)
  let scheme = call_595780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595780.url(scheme.get, call_595780.host, call_595780.base,
                         call_595780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595780, url, valid)

proc call*(call_595781: Call_WebAppsListApplicationSettingsSlot_595772;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettingsSlot
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595782 = newJObject()
  var query_595783 = newJObject()
  add(path_595782, "resourceGroupName", newJString(resourceGroupName))
  add(query_595783, "api-version", newJString(apiVersion))
  add(path_595782, "name", newJString(name))
  add(path_595782, "slot", newJString(slot))
  add(path_595782, "subscriptionId", newJString(subscriptionId))
  result = call_595781.call(path_595782, query_595783, nil, nil, nil)

var webAppsListApplicationSettingsSlot* = Call_WebAppsListApplicationSettingsSlot_595772(
    name: "webAppsListApplicationSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettingsSlot_595773, base: "",
    url: url_WebAppsListApplicationSettingsSlot_595774, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettingsSlot_595784 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateAuthSettingsSlot_595786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettingsSlot_595785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595787 = path.getOrDefault("resourceGroupName")
  valid_595787 = validateParameter(valid_595787, JString, required = true,
                                 default = nil)
  if valid_595787 != nil:
    section.add "resourceGroupName", valid_595787
  var valid_595788 = path.getOrDefault("name")
  valid_595788 = validateParameter(valid_595788, JString, required = true,
                                 default = nil)
  if valid_595788 != nil:
    section.add "name", valid_595788
  var valid_595789 = path.getOrDefault("slot")
  valid_595789 = validateParameter(valid_595789, JString, required = true,
                                 default = nil)
  if valid_595789 != nil:
    section.add "slot", valid_595789
  var valid_595790 = path.getOrDefault("subscriptionId")
  valid_595790 = validateParameter(valid_595790, JString, required = true,
                                 default = nil)
  if valid_595790 != nil:
    section.add "subscriptionId", valid_595790
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595791 = query.getOrDefault("api-version")
  valid_595791 = validateParameter(valid_595791, JString, required = true,
                                 default = nil)
  if valid_595791 != nil:
    section.add "api-version", valid_595791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595793: Call_WebAppsUpdateAuthSettingsSlot_595784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_595793.validator(path, query, header, formData, body)
  let scheme = call_595793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595793.url(scheme.get, call_595793.host, call_595793.base,
                         call_595793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595793, url, valid)

proc call*(call_595794: Call_WebAppsUpdateAuthSettingsSlot_595784;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettingsSlot
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_595795 = newJObject()
  var query_595796 = newJObject()
  var body_595797 = newJObject()
  add(path_595795, "resourceGroupName", newJString(resourceGroupName))
  add(query_595796, "api-version", newJString(apiVersion))
  add(path_595795, "name", newJString(name))
  add(path_595795, "slot", newJString(slot))
  add(path_595795, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_595797 = siteAuthSettings
  result = call_595794.call(path_595795, query_595796, nil, nil, body_595797)

var webAppsUpdateAuthSettingsSlot* = Call_WebAppsUpdateAuthSettingsSlot_595784(
    name: "webAppsUpdateAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettingsSlot_595785, base: "",
    url: url_WebAppsUpdateAuthSettingsSlot_595786, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettingsSlot_595798 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetAuthSettingsSlot_595800(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettingsSlot_595799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595801 = path.getOrDefault("resourceGroupName")
  valid_595801 = validateParameter(valid_595801, JString, required = true,
                                 default = nil)
  if valid_595801 != nil:
    section.add "resourceGroupName", valid_595801
  var valid_595802 = path.getOrDefault("name")
  valid_595802 = validateParameter(valid_595802, JString, required = true,
                                 default = nil)
  if valid_595802 != nil:
    section.add "name", valid_595802
  var valid_595803 = path.getOrDefault("slot")
  valid_595803 = validateParameter(valid_595803, JString, required = true,
                                 default = nil)
  if valid_595803 != nil:
    section.add "slot", valid_595803
  var valid_595804 = path.getOrDefault("subscriptionId")
  valid_595804 = validateParameter(valid_595804, JString, required = true,
                                 default = nil)
  if valid_595804 != nil:
    section.add "subscriptionId", valid_595804
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595805 = query.getOrDefault("api-version")
  valid_595805 = validateParameter(valid_595805, JString, required = true,
                                 default = nil)
  if valid_595805 != nil:
    section.add "api-version", valid_595805
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595806: Call_WebAppsGetAuthSettingsSlot_595798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_595806.validator(path, query, header, formData, body)
  let scheme = call_595806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595806.url(scheme.get, call_595806.host, call_595806.base,
                         call_595806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595806, url, valid)

proc call*(call_595807: Call_WebAppsGetAuthSettingsSlot_595798;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettingsSlot
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595808 = newJObject()
  var query_595809 = newJObject()
  add(path_595808, "resourceGroupName", newJString(resourceGroupName))
  add(query_595809, "api-version", newJString(apiVersion))
  add(path_595808, "name", newJString(name))
  add(path_595808, "slot", newJString(slot))
  add(path_595808, "subscriptionId", newJString(subscriptionId))
  result = call_595807.call(path_595808, query_595809, nil, nil, nil)

var webAppsGetAuthSettingsSlot* = Call_WebAppsGetAuthSettingsSlot_595798(
    name: "webAppsGetAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettingsSlot_595799, base: "",
    url: url_WebAppsGetAuthSettingsSlot_595800, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfigurationSlot_595810 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateBackupConfigurationSlot_595812(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfigurationSlot_595811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595813 = path.getOrDefault("resourceGroupName")
  valid_595813 = validateParameter(valid_595813, JString, required = true,
                                 default = nil)
  if valid_595813 != nil:
    section.add "resourceGroupName", valid_595813
  var valid_595814 = path.getOrDefault("name")
  valid_595814 = validateParameter(valid_595814, JString, required = true,
                                 default = nil)
  if valid_595814 != nil:
    section.add "name", valid_595814
  var valid_595815 = path.getOrDefault("slot")
  valid_595815 = validateParameter(valid_595815, JString, required = true,
                                 default = nil)
  if valid_595815 != nil:
    section.add "slot", valid_595815
  var valid_595816 = path.getOrDefault("subscriptionId")
  valid_595816 = validateParameter(valid_595816, JString, required = true,
                                 default = nil)
  if valid_595816 != nil:
    section.add "subscriptionId", valid_595816
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595817 = query.getOrDefault("api-version")
  valid_595817 = validateParameter(valid_595817, JString, required = true,
                                 default = nil)
  if valid_595817 != nil:
    section.add "api-version", valid_595817
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595819: Call_WebAppsUpdateBackupConfigurationSlot_595810;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_595819.validator(path, query, header, formData, body)
  let scheme = call_595819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595819.url(scheme.get, call_595819.host, call_595819.base,
                         call_595819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595819, url, valid)

proc call*(call_595820: Call_WebAppsUpdateBackupConfigurationSlot_595810;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfigurationSlot
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_595821 = newJObject()
  var query_595822 = newJObject()
  var body_595823 = newJObject()
  add(path_595821, "resourceGroupName", newJString(resourceGroupName))
  add(query_595822, "api-version", newJString(apiVersion))
  add(path_595821, "name", newJString(name))
  add(path_595821, "slot", newJString(slot))
  add(path_595821, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_595823 = request
  result = call_595820.call(path_595821, query_595822, nil, nil, body_595823)

var webAppsUpdateBackupConfigurationSlot* = Call_WebAppsUpdateBackupConfigurationSlot_595810(
    name: "webAppsUpdateBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsUpdateBackupConfigurationSlot_595811, base: "",
    url: url_WebAppsUpdateBackupConfigurationSlot_595812, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfigurationSlot_595824 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteBackupConfigurationSlot_595826(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfigurationSlot_595825(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595827 = path.getOrDefault("resourceGroupName")
  valid_595827 = validateParameter(valid_595827, JString, required = true,
                                 default = nil)
  if valid_595827 != nil:
    section.add "resourceGroupName", valid_595827
  var valid_595828 = path.getOrDefault("name")
  valid_595828 = validateParameter(valid_595828, JString, required = true,
                                 default = nil)
  if valid_595828 != nil:
    section.add "name", valid_595828
  var valid_595829 = path.getOrDefault("slot")
  valid_595829 = validateParameter(valid_595829, JString, required = true,
                                 default = nil)
  if valid_595829 != nil:
    section.add "slot", valid_595829
  var valid_595830 = path.getOrDefault("subscriptionId")
  valid_595830 = validateParameter(valid_595830, JString, required = true,
                                 default = nil)
  if valid_595830 != nil:
    section.add "subscriptionId", valid_595830
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595831 = query.getOrDefault("api-version")
  valid_595831 = validateParameter(valid_595831, JString, required = true,
                                 default = nil)
  if valid_595831 != nil:
    section.add "api-version", valid_595831
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595832: Call_WebAppsDeleteBackupConfigurationSlot_595824;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_595832.validator(path, query, header, formData, body)
  let scheme = call_595832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595832.url(scheme.get, call_595832.host, call_595832.base,
                         call_595832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595832, url, valid)

proc call*(call_595833: Call_WebAppsDeleteBackupConfigurationSlot_595824;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfigurationSlot
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595834 = newJObject()
  var query_595835 = newJObject()
  add(path_595834, "resourceGroupName", newJString(resourceGroupName))
  add(query_595835, "api-version", newJString(apiVersion))
  add(path_595834, "name", newJString(name))
  add(path_595834, "slot", newJString(slot))
  add(path_595834, "subscriptionId", newJString(subscriptionId))
  result = call_595833.call(path_595834, query_595835, nil, nil, nil)

var webAppsDeleteBackupConfigurationSlot* = Call_WebAppsDeleteBackupConfigurationSlot_595824(
    name: "webAppsDeleteBackupConfigurationSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsDeleteBackupConfigurationSlot_595825, base: "",
    url: url_WebAppsDeleteBackupConfigurationSlot_595826, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfigurationSlot_595836 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetBackupConfigurationSlot_595838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfigurationSlot_595837(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595839 = path.getOrDefault("resourceGroupName")
  valid_595839 = validateParameter(valid_595839, JString, required = true,
                                 default = nil)
  if valid_595839 != nil:
    section.add "resourceGroupName", valid_595839
  var valid_595840 = path.getOrDefault("name")
  valid_595840 = validateParameter(valid_595840, JString, required = true,
                                 default = nil)
  if valid_595840 != nil:
    section.add "name", valid_595840
  var valid_595841 = path.getOrDefault("slot")
  valid_595841 = validateParameter(valid_595841, JString, required = true,
                                 default = nil)
  if valid_595841 != nil:
    section.add "slot", valid_595841
  var valid_595842 = path.getOrDefault("subscriptionId")
  valid_595842 = validateParameter(valid_595842, JString, required = true,
                                 default = nil)
  if valid_595842 != nil:
    section.add "subscriptionId", valid_595842
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595843 = query.getOrDefault("api-version")
  valid_595843 = validateParameter(valid_595843, JString, required = true,
                                 default = nil)
  if valid_595843 != nil:
    section.add "api-version", valid_595843
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595844: Call_WebAppsGetBackupConfigurationSlot_595836;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_595844.validator(path, query, header, formData, body)
  let scheme = call_595844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595844.url(scheme.get, call_595844.host, call_595844.base,
                         call_595844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595844, url, valid)

proc call*(call_595845: Call_WebAppsGetBackupConfigurationSlot_595836;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfigurationSlot
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595846 = newJObject()
  var query_595847 = newJObject()
  add(path_595846, "resourceGroupName", newJString(resourceGroupName))
  add(query_595847, "api-version", newJString(apiVersion))
  add(path_595846, "name", newJString(name))
  add(path_595846, "slot", newJString(slot))
  add(path_595846, "subscriptionId", newJString(subscriptionId))
  result = call_595845.call(path_595846, query_595847, nil, nil, nil)

var webAppsGetBackupConfigurationSlot* = Call_WebAppsGetBackupConfigurationSlot_595836(
    name: "webAppsGetBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_WebAppsGetBackupConfigurationSlot_595837, base: "",
    url: url_WebAppsGetBackupConfigurationSlot_595838, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStringsSlot_595848 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConnectionStringsSlot_595850(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStringsSlot_595849(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595851 = path.getOrDefault("resourceGroupName")
  valid_595851 = validateParameter(valid_595851, JString, required = true,
                                 default = nil)
  if valid_595851 != nil:
    section.add "resourceGroupName", valid_595851
  var valid_595852 = path.getOrDefault("name")
  valid_595852 = validateParameter(valid_595852, JString, required = true,
                                 default = nil)
  if valid_595852 != nil:
    section.add "name", valid_595852
  var valid_595853 = path.getOrDefault("slot")
  valid_595853 = validateParameter(valid_595853, JString, required = true,
                                 default = nil)
  if valid_595853 != nil:
    section.add "slot", valid_595853
  var valid_595854 = path.getOrDefault("subscriptionId")
  valid_595854 = validateParameter(valid_595854, JString, required = true,
                                 default = nil)
  if valid_595854 != nil:
    section.add "subscriptionId", valid_595854
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595855 = query.getOrDefault("api-version")
  valid_595855 = validateParameter(valid_595855, JString, required = true,
                                 default = nil)
  if valid_595855 != nil:
    section.add "api-version", valid_595855
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595857: Call_WebAppsUpdateConnectionStringsSlot_595848;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_595857.validator(path, query, header, formData, body)
  let scheme = call_595857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595857.url(scheme.get, call_595857.host, call_595857.base,
                         call_595857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595857, url, valid)

proc call*(call_595858: Call_WebAppsUpdateConnectionStringsSlot_595848;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStringsSlot
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595859 = newJObject()
  var query_595860 = newJObject()
  var body_595861 = newJObject()
  add(path_595859, "resourceGroupName", newJString(resourceGroupName))
  add(query_595860, "api-version", newJString(apiVersion))
  add(path_595859, "name", newJString(name))
  add(path_595859, "slot", newJString(slot))
  if connectionStrings != nil:
    body_595861 = connectionStrings
  add(path_595859, "subscriptionId", newJString(subscriptionId))
  result = call_595858.call(path_595859, query_595860, nil, nil, body_595861)

var webAppsUpdateConnectionStringsSlot* = Call_WebAppsUpdateConnectionStringsSlot_595848(
    name: "webAppsUpdateConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStringsSlot_595849, base: "",
    url: url_WebAppsUpdateConnectionStringsSlot_595850, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStringsSlot_595862 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConnectionStringsSlot_595864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStringsSlot_595863(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595865 = path.getOrDefault("resourceGroupName")
  valid_595865 = validateParameter(valid_595865, JString, required = true,
                                 default = nil)
  if valid_595865 != nil:
    section.add "resourceGroupName", valid_595865
  var valid_595866 = path.getOrDefault("name")
  valid_595866 = validateParameter(valid_595866, JString, required = true,
                                 default = nil)
  if valid_595866 != nil:
    section.add "name", valid_595866
  var valid_595867 = path.getOrDefault("slot")
  valid_595867 = validateParameter(valid_595867, JString, required = true,
                                 default = nil)
  if valid_595867 != nil:
    section.add "slot", valid_595867
  var valid_595868 = path.getOrDefault("subscriptionId")
  valid_595868 = validateParameter(valid_595868, JString, required = true,
                                 default = nil)
  if valid_595868 != nil:
    section.add "subscriptionId", valid_595868
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595869 = query.getOrDefault("api-version")
  valid_595869 = validateParameter(valid_595869, JString, required = true,
                                 default = nil)
  if valid_595869 != nil:
    section.add "api-version", valid_595869
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595870: Call_WebAppsListConnectionStringsSlot_595862;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_595870.validator(path, query, header, formData, body)
  let scheme = call_595870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595870.url(scheme.get, call_595870.host, call_595870.base,
                         call_595870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595870, url, valid)

proc call*(call_595871: Call_WebAppsListConnectionStringsSlot_595862;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStringsSlot
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595872 = newJObject()
  var query_595873 = newJObject()
  add(path_595872, "resourceGroupName", newJString(resourceGroupName))
  add(query_595873, "api-version", newJString(apiVersion))
  add(path_595872, "name", newJString(name))
  add(path_595872, "slot", newJString(slot))
  add(path_595872, "subscriptionId", newJString(subscriptionId))
  result = call_595871.call(path_595872, query_595873, nil, nil, nil)

var webAppsListConnectionStringsSlot* = Call_WebAppsListConnectionStringsSlot_595862(
    name: "webAppsListConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStringsSlot_595863, base: "",
    url: url_WebAppsListConnectionStringsSlot_595864, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfigSlot_595886 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDiagnosticLogsConfigSlot_595888(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfigSlot_595887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595889 = path.getOrDefault("resourceGroupName")
  valid_595889 = validateParameter(valid_595889, JString, required = true,
                                 default = nil)
  if valid_595889 != nil:
    section.add "resourceGroupName", valid_595889
  var valid_595890 = path.getOrDefault("name")
  valid_595890 = validateParameter(valid_595890, JString, required = true,
                                 default = nil)
  if valid_595890 != nil:
    section.add "name", valid_595890
  var valid_595891 = path.getOrDefault("slot")
  valid_595891 = validateParameter(valid_595891, JString, required = true,
                                 default = nil)
  if valid_595891 != nil:
    section.add "slot", valid_595891
  var valid_595892 = path.getOrDefault("subscriptionId")
  valid_595892 = validateParameter(valid_595892, JString, required = true,
                                 default = nil)
  if valid_595892 != nil:
    section.add "subscriptionId", valid_595892
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595893 = query.getOrDefault("api-version")
  valid_595893 = validateParameter(valid_595893, JString, required = true,
                                 default = nil)
  if valid_595893 != nil:
    section.add "api-version", valid_595893
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595895: Call_WebAppsUpdateDiagnosticLogsConfigSlot_595886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_595895.validator(path, query, header, formData, body)
  let scheme = call_595895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595895.url(scheme.get, call_595895.host, call_595895.base,
                         call_595895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595895, url, valid)

proc call*(call_595896: Call_WebAppsUpdateDiagnosticLogsConfigSlot_595886;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfigSlot
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595897 = newJObject()
  var query_595898 = newJObject()
  var body_595899 = newJObject()
  add(path_595897, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_595899 = siteLogsConfig
  add(query_595898, "api-version", newJString(apiVersion))
  add(path_595897, "name", newJString(name))
  add(path_595897, "slot", newJString(slot))
  add(path_595897, "subscriptionId", newJString(subscriptionId))
  result = call_595896.call(path_595897, query_595898, nil, nil, body_595899)

var webAppsUpdateDiagnosticLogsConfigSlot* = Call_WebAppsUpdateDiagnosticLogsConfigSlot_595886(
    name: "webAppsUpdateDiagnosticLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfigSlot_595887, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfigSlot_595888, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfigurationSlot_595874 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDiagnosticLogsConfigurationSlot_595876(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfigurationSlot_595875(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595877 = path.getOrDefault("resourceGroupName")
  valid_595877 = validateParameter(valid_595877, JString, required = true,
                                 default = nil)
  if valid_595877 != nil:
    section.add "resourceGroupName", valid_595877
  var valid_595878 = path.getOrDefault("name")
  valid_595878 = validateParameter(valid_595878, JString, required = true,
                                 default = nil)
  if valid_595878 != nil:
    section.add "name", valid_595878
  var valid_595879 = path.getOrDefault("slot")
  valid_595879 = validateParameter(valid_595879, JString, required = true,
                                 default = nil)
  if valid_595879 != nil:
    section.add "slot", valid_595879
  var valid_595880 = path.getOrDefault("subscriptionId")
  valid_595880 = validateParameter(valid_595880, JString, required = true,
                                 default = nil)
  if valid_595880 != nil:
    section.add "subscriptionId", valid_595880
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595881 = query.getOrDefault("api-version")
  valid_595881 = validateParameter(valid_595881, JString, required = true,
                                 default = nil)
  if valid_595881 != nil:
    section.add "api-version", valid_595881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595882: Call_WebAppsGetDiagnosticLogsConfigurationSlot_595874;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_595882.validator(path, query, header, formData, body)
  let scheme = call_595882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595882.url(scheme.get, call_595882.host, call_595882.base,
                         call_595882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595882, url, valid)

proc call*(call_595883: Call_WebAppsGetDiagnosticLogsConfigurationSlot_595874;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfigurationSlot
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595884 = newJObject()
  var query_595885 = newJObject()
  add(path_595884, "resourceGroupName", newJString(resourceGroupName))
  add(query_595885, "api-version", newJString(apiVersion))
  add(path_595884, "name", newJString(name))
  add(path_595884, "slot", newJString(slot))
  add(path_595884, "subscriptionId", newJString(subscriptionId))
  result = call_595883.call(path_595884, query_595885, nil, nil, nil)

var webAppsGetDiagnosticLogsConfigurationSlot* = Call_WebAppsGetDiagnosticLogsConfigurationSlot_595874(
    name: "webAppsGetDiagnosticLogsConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfigurationSlot_595875,
    base: "", url: url_WebAppsGetDiagnosticLogsConfigurationSlot_595876,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadataSlot_595900 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateMetadataSlot_595902(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadataSlot_595901(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595903 = path.getOrDefault("resourceGroupName")
  valid_595903 = validateParameter(valid_595903, JString, required = true,
                                 default = nil)
  if valid_595903 != nil:
    section.add "resourceGroupName", valid_595903
  var valid_595904 = path.getOrDefault("name")
  valid_595904 = validateParameter(valid_595904, JString, required = true,
                                 default = nil)
  if valid_595904 != nil:
    section.add "name", valid_595904
  var valid_595905 = path.getOrDefault("slot")
  valid_595905 = validateParameter(valid_595905, JString, required = true,
                                 default = nil)
  if valid_595905 != nil:
    section.add "slot", valid_595905
  var valid_595906 = path.getOrDefault("subscriptionId")
  valid_595906 = validateParameter(valid_595906, JString, required = true,
                                 default = nil)
  if valid_595906 != nil:
    section.add "subscriptionId", valid_595906
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595907 = query.getOrDefault("api-version")
  valid_595907 = validateParameter(valid_595907, JString, required = true,
                                 default = nil)
  if valid_595907 != nil:
    section.add "api-version", valid_595907
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595909: Call_WebAppsUpdateMetadataSlot_595900; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_595909.validator(path, query, header, formData, body)
  let scheme = call_595909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595909.url(scheme.get, call_595909.host, call_595909.base,
                         call_595909.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595909, url, valid)

proc call*(call_595910: Call_WebAppsUpdateMetadataSlot_595900;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadataSlot
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_595911 = newJObject()
  var query_595912 = newJObject()
  var body_595913 = newJObject()
  add(path_595911, "resourceGroupName", newJString(resourceGroupName))
  add(query_595912, "api-version", newJString(apiVersion))
  add(path_595911, "name", newJString(name))
  add(path_595911, "slot", newJString(slot))
  add(path_595911, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_595913 = metadata
  result = call_595910.call(path_595911, query_595912, nil, nil, body_595913)

var webAppsUpdateMetadataSlot* = Call_WebAppsUpdateMetadataSlot_595900(
    name: "webAppsUpdateMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_WebAppsUpdateMetadataSlot_595901, base: "",
    url: url_WebAppsUpdateMetadataSlot_595902, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadataSlot_595914 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetadataSlot_595916(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadataSlot_595915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595917 = path.getOrDefault("resourceGroupName")
  valid_595917 = validateParameter(valid_595917, JString, required = true,
                                 default = nil)
  if valid_595917 != nil:
    section.add "resourceGroupName", valid_595917
  var valid_595918 = path.getOrDefault("name")
  valid_595918 = validateParameter(valid_595918, JString, required = true,
                                 default = nil)
  if valid_595918 != nil:
    section.add "name", valid_595918
  var valid_595919 = path.getOrDefault("slot")
  valid_595919 = validateParameter(valid_595919, JString, required = true,
                                 default = nil)
  if valid_595919 != nil:
    section.add "slot", valid_595919
  var valid_595920 = path.getOrDefault("subscriptionId")
  valid_595920 = validateParameter(valid_595920, JString, required = true,
                                 default = nil)
  if valid_595920 != nil:
    section.add "subscriptionId", valid_595920
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595921 = query.getOrDefault("api-version")
  valid_595921 = validateParameter(valid_595921, JString, required = true,
                                 default = nil)
  if valid_595921 != nil:
    section.add "api-version", valid_595921
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595922: Call_WebAppsListMetadataSlot_595914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_595922.validator(path, query, header, formData, body)
  let scheme = call_595922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595922.url(scheme.get, call_595922.host, call_595922.base,
                         call_595922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595922, url, valid)

proc call*(call_595923: Call_WebAppsListMetadataSlot_595914;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetadataSlot
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595924 = newJObject()
  var query_595925 = newJObject()
  add(path_595924, "resourceGroupName", newJString(resourceGroupName))
  add(query_595925, "api-version", newJString(apiVersion))
  add(path_595924, "name", newJString(name))
  add(path_595924, "slot", newJString(slot))
  add(path_595924, "subscriptionId", newJString(subscriptionId))
  result = call_595923.call(path_595924, query_595925, nil, nil, nil)

var webAppsListMetadataSlot* = Call_WebAppsListMetadataSlot_595914(
    name: "webAppsListMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_WebAppsListMetadataSlot_595915, base: "",
    url: url_WebAppsListMetadataSlot_595916, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentialsSlot_595926 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingCredentialsSlot_595928(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentialsSlot_595927(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595929 = path.getOrDefault("resourceGroupName")
  valid_595929 = validateParameter(valid_595929, JString, required = true,
                                 default = nil)
  if valid_595929 != nil:
    section.add "resourceGroupName", valid_595929
  var valid_595930 = path.getOrDefault("name")
  valid_595930 = validateParameter(valid_595930, JString, required = true,
                                 default = nil)
  if valid_595930 != nil:
    section.add "name", valid_595930
  var valid_595931 = path.getOrDefault("slot")
  valid_595931 = validateParameter(valid_595931, JString, required = true,
                                 default = nil)
  if valid_595931 != nil:
    section.add "slot", valid_595931
  var valid_595932 = path.getOrDefault("subscriptionId")
  valid_595932 = validateParameter(valid_595932, JString, required = true,
                                 default = nil)
  if valid_595932 != nil:
    section.add "subscriptionId", valid_595932
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595933 = query.getOrDefault("api-version")
  valid_595933 = validateParameter(valid_595933, JString, required = true,
                                 default = nil)
  if valid_595933 != nil:
    section.add "api-version", valid_595933
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595934: Call_WebAppsListPublishingCredentialsSlot_595926;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_595934.validator(path, query, header, formData, body)
  let scheme = call_595934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595934.url(scheme.get, call_595934.host, call_595934.base,
                         call_595934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595934, url, valid)

proc call*(call_595935: Call_WebAppsListPublishingCredentialsSlot_595926;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentialsSlot
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595936 = newJObject()
  var query_595937 = newJObject()
  add(path_595936, "resourceGroupName", newJString(resourceGroupName))
  add(query_595937, "api-version", newJString(apiVersion))
  add(path_595936, "name", newJString(name))
  add(path_595936, "slot", newJString(slot))
  add(path_595936, "subscriptionId", newJString(subscriptionId))
  result = call_595935.call(path_595936, query_595937, nil, nil, nil)

var webAppsListPublishingCredentialsSlot* = Call_WebAppsListPublishingCredentialsSlot_595926(
    name: "webAppsListPublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentialsSlot_595927, base: "",
    url: url_WebAppsListPublishingCredentialsSlot_595928, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettingsSlot_595938 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSitePushSettingsSlot_595940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettingsSlot_595939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595941 = path.getOrDefault("resourceGroupName")
  valid_595941 = validateParameter(valid_595941, JString, required = true,
                                 default = nil)
  if valid_595941 != nil:
    section.add "resourceGroupName", valid_595941
  var valid_595942 = path.getOrDefault("name")
  valid_595942 = validateParameter(valid_595942, JString, required = true,
                                 default = nil)
  if valid_595942 != nil:
    section.add "name", valid_595942
  var valid_595943 = path.getOrDefault("slot")
  valid_595943 = validateParameter(valid_595943, JString, required = true,
                                 default = nil)
  if valid_595943 != nil:
    section.add "slot", valid_595943
  var valid_595944 = path.getOrDefault("subscriptionId")
  valid_595944 = validateParameter(valid_595944, JString, required = true,
                                 default = nil)
  if valid_595944 != nil:
    section.add "subscriptionId", valid_595944
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595945 = query.getOrDefault("api-version")
  valid_595945 = validateParameter(valid_595945, JString, required = true,
                                 default = nil)
  if valid_595945 != nil:
    section.add "api-version", valid_595945
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595947: Call_WebAppsUpdateSitePushSettingsSlot_595938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_595947.validator(path, query, header, formData, body)
  let scheme = call_595947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595947.url(scheme.get, call_595947.host, call_595947.base,
                         call_595947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595947, url, valid)

proc call*(call_595948: Call_WebAppsUpdateSitePushSettingsSlot_595938;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettingsSlot
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_595949 = newJObject()
  var query_595950 = newJObject()
  var body_595951 = newJObject()
  add(path_595949, "resourceGroupName", newJString(resourceGroupName))
  add(query_595950, "api-version", newJString(apiVersion))
  add(path_595949, "name", newJString(name))
  add(path_595949, "slot", newJString(slot))
  add(path_595949, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_595951 = pushSettings
  result = call_595948.call(path_595949, query_595950, nil, nil, body_595951)

var webAppsUpdateSitePushSettingsSlot* = Call_WebAppsUpdateSitePushSettingsSlot_595938(
    name: "webAppsUpdateSitePushSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettingsSlot_595939, base: "",
    url: url_WebAppsUpdateSitePushSettingsSlot_595940, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettingsSlot_595952 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSitePushSettingsSlot_595954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettingsSlot_595953(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595955 = path.getOrDefault("resourceGroupName")
  valid_595955 = validateParameter(valid_595955, JString, required = true,
                                 default = nil)
  if valid_595955 != nil:
    section.add "resourceGroupName", valid_595955
  var valid_595956 = path.getOrDefault("name")
  valid_595956 = validateParameter(valid_595956, JString, required = true,
                                 default = nil)
  if valid_595956 != nil:
    section.add "name", valid_595956
  var valid_595957 = path.getOrDefault("slot")
  valid_595957 = validateParameter(valid_595957, JString, required = true,
                                 default = nil)
  if valid_595957 != nil:
    section.add "slot", valid_595957
  var valid_595958 = path.getOrDefault("subscriptionId")
  valid_595958 = validateParameter(valid_595958, JString, required = true,
                                 default = nil)
  if valid_595958 != nil:
    section.add "subscriptionId", valid_595958
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595959 = query.getOrDefault("api-version")
  valid_595959 = validateParameter(valid_595959, JString, required = true,
                                 default = nil)
  if valid_595959 != nil:
    section.add "api-version", valid_595959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595960: Call_WebAppsListSitePushSettingsSlot_595952;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_595960.validator(path, query, header, formData, body)
  let scheme = call_595960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595960.url(scheme.get, call_595960.host, call_595960.base,
                         call_595960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595960, url, valid)

proc call*(call_595961: Call_WebAppsListSitePushSettingsSlot_595952;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettingsSlot
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595962 = newJObject()
  var query_595963 = newJObject()
  add(path_595962, "resourceGroupName", newJString(resourceGroupName))
  add(query_595963, "api-version", newJString(apiVersion))
  add(path_595962, "name", newJString(name))
  add(path_595962, "slot", newJString(slot))
  add(path_595962, "subscriptionId", newJString(subscriptionId))
  result = call_595961.call(path_595962, query_595963, nil, nil, nil)

var webAppsListSitePushSettingsSlot* = Call_WebAppsListSitePushSettingsSlot_595952(
    name: "webAppsListSitePushSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettingsSlot_595953, base: "",
    url: url_WebAppsListSitePushSettingsSlot_595954, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfigurationSlot_595976 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateConfigurationSlot_595978(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfigurationSlot_595977(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595979 = path.getOrDefault("resourceGroupName")
  valid_595979 = validateParameter(valid_595979, JString, required = true,
                                 default = nil)
  if valid_595979 != nil:
    section.add "resourceGroupName", valid_595979
  var valid_595980 = path.getOrDefault("name")
  valid_595980 = validateParameter(valid_595980, JString, required = true,
                                 default = nil)
  if valid_595980 != nil:
    section.add "name", valid_595980
  var valid_595981 = path.getOrDefault("slot")
  valid_595981 = validateParameter(valid_595981, JString, required = true,
                                 default = nil)
  if valid_595981 != nil:
    section.add "slot", valid_595981
  var valid_595982 = path.getOrDefault("subscriptionId")
  valid_595982 = validateParameter(valid_595982, JString, required = true,
                                 default = nil)
  if valid_595982 != nil:
    section.add "subscriptionId", valid_595982
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595983 = query.getOrDefault("api-version")
  valid_595983 = validateParameter(valid_595983, JString, required = true,
                                 default = nil)
  if valid_595983 != nil:
    section.add "api-version", valid_595983
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595985: Call_WebAppsCreateOrUpdateConfigurationSlot_595976;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_595985.validator(path, query, header, formData, body)
  let scheme = call_595985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595985.url(scheme.get, call_595985.host, call_595985.base,
                         call_595985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595985, url, valid)

proc call*(call_595986: Call_WebAppsCreateOrUpdateConfigurationSlot_595976;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595987 = newJObject()
  var query_595988 = newJObject()
  var body_595989 = newJObject()
  add(path_595987, "resourceGroupName", newJString(resourceGroupName))
  add(query_595988, "api-version", newJString(apiVersion))
  add(path_595987, "name", newJString(name))
  if siteConfig != nil:
    body_595989 = siteConfig
  add(path_595987, "slot", newJString(slot))
  add(path_595987, "subscriptionId", newJString(subscriptionId))
  result = call_595986.call(path_595987, query_595988, nil, nil, body_595989)

var webAppsCreateOrUpdateConfigurationSlot* = Call_WebAppsCreateOrUpdateConfigurationSlot_595976(
    name: "webAppsCreateOrUpdateConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfigurationSlot_595977, base: "",
    url: url_WebAppsCreateOrUpdateConfigurationSlot_595978,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSlot_595964 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfigurationSlot_595966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSlot_595965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595967 = path.getOrDefault("resourceGroupName")
  valid_595967 = validateParameter(valid_595967, JString, required = true,
                                 default = nil)
  if valid_595967 != nil:
    section.add "resourceGroupName", valid_595967
  var valid_595968 = path.getOrDefault("name")
  valid_595968 = validateParameter(valid_595968, JString, required = true,
                                 default = nil)
  if valid_595968 != nil:
    section.add "name", valid_595968
  var valid_595969 = path.getOrDefault("slot")
  valid_595969 = validateParameter(valid_595969, JString, required = true,
                                 default = nil)
  if valid_595969 != nil:
    section.add "slot", valid_595969
  var valid_595970 = path.getOrDefault("subscriptionId")
  valid_595970 = validateParameter(valid_595970, JString, required = true,
                                 default = nil)
  if valid_595970 != nil:
    section.add "subscriptionId", valid_595970
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595971 = query.getOrDefault("api-version")
  valid_595971 = validateParameter(valid_595971, JString, required = true,
                                 default = nil)
  if valid_595971 != nil:
    section.add "api-version", valid_595971
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595972: Call_WebAppsGetConfigurationSlot_595964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_595972.validator(path, query, header, formData, body)
  let scheme = call_595972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595972.url(scheme.get, call_595972.host, call_595972.base,
                         call_595972.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595972, url, valid)

proc call*(call_595973: Call_WebAppsGetConfigurationSlot_595964;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSlot
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_595974 = newJObject()
  var query_595975 = newJObject()
  add(path_595974, "resourceGroupName", newJString(resourceGroupName))
  add(query_595975, "api-version", newJString(apiVersion))
  add(path_595974, "name", newJString(name))
  add(path_595974, "slot", newJString(slot))
  add(path_595974, "subscriptionId", newJString(subscriptionId))
  result = call_595973.call(path_595974, query_595975, nil, nil, nil)

var webAppsGetConfigurationSlot* = Call_WebAppsGetConfigurationSlot_595964(
    name: "webAppsGetConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsGetConfigurationSlot_595965, base: "",
    url: url_WebAppsGetConfigurationSlot_595966, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfigurationSlot_595990 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateConfigurationSlot_595992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfigurationSlot_595991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_595993 = path.getOrDefault("resourceGroupName")
  valid_595993 = validateParameter(valid_595993, JString, required = true,
                                 default = nil)
  if valid_595993 != nil:
    section.add "resourceGroupName", valid_595993
  var valid_595994 = path.getOrDefault("name")
  valid_595994 = validateParameter(valid_595994, JString, required = true,
                                 default = nil)
  if valid_595994 != nil:
    section.add "name", valid_595994
  var valid_595995 = path.getOrDefault("slot")
  valid_595995 = validateParameter(valid_595995, JString, required = true,
                                 default = nil)
  if valid_595995 != nil:
    section.add "slot", valid_595995
  var valid_595996 = path.getOrDefault("subscriptionId")
  valid_595996 = validateParameter(valid_595996, JString, required = true,
                                 default = nil)
  if valid_595996 != nil:
    section.add "subscriptionId", valid_595996
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_595997 = query.getOrDefault("api-version")
  valid_595997 = validateParameter(valid_595997, JString, required = true,
                                 default = nil)
  if valid_595997 != nil:
    section.add "api-version", valid_595997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595999: Call_WebAppsUpdateConfigurationSlot_595990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_595999.validator(path, query, header, formData, body)
  let scheme = call_595999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595999.url(scheme.get, call_595999.host, call_595999.base,
                         call_595999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595999, url, valid)

proc call*(call_596000: Call_WebAppsUpdateConfigurationSlot_595990;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596001 = newJObject()
  var query_596002 = newJObject()
  var body_596003 = newJObject()
  add(path_596001, "resourceGroupName", newJString(resourceGroupName))
  add(query_596002, "api-version", newJString(apiVersion))
  add(path_596001, "name", newJString(name))
  if siteConfig != nil:
    body_596003 = siteConfig
  add(path_596001, "slot", newJString(slot))
  add(path_596001, "subscriptionId", newJString(subscriptionId))
  result = call_596000.call(path_596001, query_596002, nil, nil, body_596003)

var webAppsUpdateConfigurationSlot* = Call_WebAppsUpdateConfigurationSlot_595990(
    name: "webAppsUpdateConfigurationSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsUpdateConfigurationSlot_595991, base: "",
    url: url_WebAppsUpdateConfigurationSlot_595992, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfoSlot_596004 = ref object of OpenApiRestCall_593437
proc url_WebAppsListConfigurationSnapshotInfoSlot_596006(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfoSlot_596005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596007 = path.getOrDefault("resourceGroupName")
  valid_596007 = validateParameter(valid_596007, JString, required = true,
                                 default = nil)
  if valid_596007 != nil:
    section.add "resourceGroupName", valid_596007
  var valid_596008 = path.getOrDefault("name")
  valid_596008 = validateParameter(valid_596008, JString, required = true,
                                 default = nil)
  if valid_596008 != nil:
    section.add "name", valid_596008
  var valid_596009 = path.getOrDefault("slot")
  valid_596009 = validateParameter(valid_596009, JString, required = true,
                                 default = nil)
  if valid_596009 != nil:
    section.add "slot", valid_596009
  var valid_596010 = path.getOrDefault("subscriptionId")
  valid_596010 = validateParameter(valid_596010, JString, required = true,
                                 default = nil)
  if valid_596010 != nil:
    section.add "subscriptionId", valid_596010
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596011 = query.getOrDefault("api-version")
  valid_596011 = validateParameter(valid_596011, JString, required = true,
                                 default = nil)
  if valid_596011 != nil:
    section.add "api-version", valid_596011
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596012: Call_WebAppsListConfigurationSnapshotInfoSlot_596004;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_596012.validator(path, query, header, formData, body)
  let scheme = call_596012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596012.url(scheme.get, call_596012.host, call_596012.base,
                         call_596012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596012, url, valid)

proc call*(call_596013: Call_WebAppsListConfigurationSnapshotInfoSlot_596004;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfoSlot
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596014 = newJObject()
  var query_596015 = newJObject()
  add(path_596014, "resourceGroupName", newJString(resourceGroupName))
  add(query_596015, "api-version", newJString(apiVersion))
  add(path_596014, "name", newJString(name))
  add(path_596014, "slot", newJString(slot))
  add(path_596014, "subscriptionId", newJString(subscriptionId))
  result = call_596013.call(path_596014, query_596015, nil, nil, nil)

var webAppsListConfigurationSnapshotInfoSlot* = Call_WebAppsListConfigurationSnapshotInfoSlot_596004(
    name: "webAppsListConfigurationSnapshotInfoSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfoSlot_596005, base: "",
    url: url_WebAppsListConfigurationSnapshotInfoSlot_596006,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshotSlot_596016 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetConfigurationSnapshotSlot_596018(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshotSlot_596017(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596019 = path.getOrDefault("resourceGroupName")
  valid_596019 = validateParameter(valid_596019, JString, required = true,
                                 default = nil)
  if valid_596019 != nil:
    section.add "resourceGroupName", valid_596019
  var valid_596020 = path.getOrDefault("name")
  valid_596020 = validateParameter(valid_596020, JString, required = true,
                                 default = nil)
  if valid_596020 != nil:
    section.add "name", valid_596020
  var valid_596021 = path.getOrDefault("snapshotId")
  valid_596021 = validateParameter(valid_596021, JString, required = true,
                                 default = nil)
  if valid_596021 != nil:
    section.add "snapshotId", valid_596021
  var valid_596022 = path.getOrDefault("slot")
  valid_596022 = validateParameter(valid_596022, JString, required = true,
                                 default = nil)
  if valid_596022 != nil:
    section.add "slot", valid_596022
  var valid_596023 = path.getOrDefault("subscriptionId")
  valid_596023 = validateParameter(valid_596023, JString, required = true,
                                 default = nil)
  if valid_596023 != nil:
    section.add "subscriptionId", valid_596023
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596024 = query.getOrDefault("api-version")
  valid_596024 = validateParameter(valid_596024, JString, required = true,
                                 default = nil)
  if valid_596024 != nil:
    section.add "api-version", valid_596024
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596025: Call_WebAppsGetConfigurationSnapshotSlot_596016;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_596025.validator(path, query, header, formData, body)
  let scheme = call_596025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596025.url(scheme.get, call_596025.host, call_596025.base,
                         call_596025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596025, url, valid)

proc call*(call_596026: Call_WebAppsGetConfigurationSnapshotSlot_596016;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshotSlot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596027 = newJObject()
  var query_596028 = newJObject()
  add(path_596027, "resourceGroupName", newJString(resourceGroupName))
  add(query_596028, "api-version", newJString(apiVersion))
  add(path_596027, "name", newJString(name))
  add(path_596027, "snapshotId", newJString(snapshotId))
  add(path_596027, "slot", newJString(slot))
  add(path_596027, "subscriptionId", newJString(subscriptionId))
  result = call_596026.call(path_596027, query_596028, nil, nil, nil)

var webAppsGetConfigurationSnapshotSlot* = Call_WebAppsGetConfigurationSnapshotSlot_596016(
    name: "webAppsGetConfigurationSnapshotSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshotSlot_596017, base: "",
    url: url_WebAppsGetConfigurationSnapshotSlot_596018, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596029 = ref object of OpenApiRestCall_593437
proc url_WebAppsRecoverSiteConfigurationSnapshotSlot_596031(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshotSlot_596030(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596032 = path.getOrDefault("resourceGroupName")
  valid_596032 = validateParameter(valid_596032, JString, required = true,
                                 default = nil)
  if valid_596032 != nil:
    section.add "resourceGroupName", valid_596032
  var valid_596033 = path.getOrDefault("name")
  valid_596033 = validateParameter(valid_596033, JString, required = true,
                                 default = nil)
  if valid_596033 != nil:
    section.add "name", valid_596033
  var valid_596034 = path.getOrDefault("snapshotId")
  valid_596034 = validateParameter(valid_596034, JString, required = true,
                                 default = nil)
  if valid_596034 != nil:
    section.add "snapshotId", valid_596034
  var valid_596035 = path.getOrDefault("slot")
  valid_596035 = validateParameter(valid_596035, JString, required = true,
                                 default = nil)
  if valid_596035 != nil:
    section.add "slot", valid_596035
  var valid_596036 = path.getOrDefault("subscriptionId")
  valid_596036 = validateParameter(valid_596036, JString, required = true,
                                 default = nil)
  if valid_596036 != nil:
    section.add "subscriptionId", valid_596036
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596037 = query.getOrDefault("api-version")
  valid_596037 = validateParameter(valid_596037, JString, required = true,
                                 default = nil)
  if valid_596037 != nil:
    section.add "api-version", valid_596037
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596038: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596029;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_596038.validator(path, query, header, formData, body)
  let scheme = call_596038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596038.url(scheme.get, call_596038.host, call_596038.base,
                         call_596038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596038, url, valid)

proc call*(call_596039: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596029;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshotSlot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596040 = newJObject()
  var query_596041 = newJObject()
  add(path_596040, "resourceGroupName", newJString(resourceGroupName))
  add(query_596041, "api-version", newJString(apiVersion))
  add(path_596040, "name", newJString(name))
  add(path_596040, "snapshotId", newJString(snapshotId))
  add(path_596040, "slot", newJString(slot))
  add(path_596040, "subscriptionId", newJString(subscriptionId))
  result = call_596039.call(path_596040, query_596041, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshotSlot* = Call_WebAppsRecoverSiteConfigurationSnapshotSlot_596029(
    name: "webAppsRecoverSiteConfigurationSnapshotSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshotSlot_596030,
    base: "", url: url_WebAppsRecoverSiteConfigurationSnapshotSlot_596031,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsSlot_596042 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebSiteContainerLogsSlot_596044(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsSlot_596043(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596045 = path.getOrDefault("resourceGroupName")
  valid_596045 = validateParameter(valid_596045, JString, required = true,
                                 default = nil)
  if valid_596045 != nil:
    section.add "resourceGroupName", valid_596045
  var valid_596046 = path.getOrDefault("name")
  valid_596046 = validateParameter(valid_596046, JString, required = true,
                                 default = nil)
  if valid_596046 != nil:
    section.add "name", valid_596046
  var valid_596047 = path.getOrDefault("slot")
  valid_596047 = validateParameter(valid_596047, JString, required = true,
                                 default = nil)
  if valid_596047 != nil:
    section.add "slot", valid_596047
  var valid_596048 = path.getOrDefault("subscriptionId")
  valid_596048 = validateParameter(valid_596048, JString, required = true,
                                 default = nil)
  if valid_596048 != nil:
    section.add "subscriptionId", valid_596048
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596049 = query.getOrDefault("api-version")
  valid_596049 = validateParameter(valid_596049, JString, required = true,
                                 default = nil)
  if valid_596049 != nil:
    section.add "api-version", valid_596049
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596050: Call_WebAppsGetWebSiteContainerLogsSlot_596042;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_596050.validator(path, query, header, formData, body)
  let scheme = call_596050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596050.url(scheme.get, call_596050.host, call_596050.base,
                         call_596050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596050, url, valid)

proc call*(call_596051: Call_WebAppsGetWebSiteContainerLogsSlot_596042;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsSlot
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596052 = newJObject()
  var query_596053 = newJObject()
  add(path_596052, "resourceGroupName", newJString(resourceGroupName))
  add(query_596053, "api-version", newJString(apiVersion))
  add(path_596052, "name", newJString(name))
  add(path_596052, "slot", newJString(slot))
  add(path_596052, "subscriptionId", newJString(subscriptionId))
  result = call_596051.call(path_596052, query_596053, nil, nil, nil)

var webAppsGetWebSiteContainerLogsSlot* = Call_WebAppsGetWebSiteContainerLogsSlot_596042(
    name: "webAppsGetWebSiteContainerLogsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogsSlot_596043, base: "",
    url: url_WebAppsGetWebSiteContainerLogsSlot_596044, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsZipSlot_596054 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebSiteContainerLogsZipSlot_596056(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsZipSlot_596055(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596057 = path.getOrDefault("resourceGroupName")
  valid_596057 = validateParameter(valid_596057, JString, required = true,
                                 default = nil)
  if valid_596057 != nil:
    section.add "resourceGroupName", valid_596057
  var valid_596058 = path.getOrDefault("name")
  valid_596058 = validateParameter(valid_596058, JString, required = true,
                                 default = nil)
  if valid_596058 != nil:
    section.add "name", valid_596058
  var valid_596059 = path.getOrDefault("slot")
  valid_596059 = validateParameter(valid_596059, JString, required = true,
                                 default = nil)
  if valid_596059 != nil:
    section.add "slot", valid_596059
  var valid_596060 = path.getOrDefault("subscriptionId")
  valid_596060 = validateParameter(valid_596060, JString, required = true,
                                 default = nil)
  if valid_596060 != nil:
    section.add "subscriptionId", valid_596060
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596061 = query.getOrDefault("api-version")
  valid_596061 = validateParameter(valid_596061, JString, required = true,
                                 default = nil)
  if valid_596061 != nil:
    section.add "api-version", valid_596061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596062: Call_WebAppsGetWebSiteContainerLogsZipSlot_596054;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_596062.validator(path, query, header, formData, body)
  let scheme = call_596062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596062.url(scheme.get, call_596062.host, call_596062.base,
                         call_596062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596062, url, valid)

proc call*(call_596063: Call_WebAppsGetWebSiteContainerLogsZipSlot_596054;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsZipSlot
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596064 = newJObject()
  var query_596065 = newJObject()
  add(path_596064, "resourceGroupName", newJString(resourceGroupName))
  add(query_596065, "api-version", newJString(apiVersion))
  add(path_596064, "name", newJString(name))
  add(path_596064, "slot", newJString(slot))
  add(path_596064, "subscriptionId", newJString(subscriptionId))
  result = call_596063.call(path_596064, query_596065, nil, nil, nil)

var webAppsGetWebSiteContainerLogsZipSlot* = Call_WebAppsGetWebSiteContainerLogsZipSlot_596054(
    name: "webAppsGetWebSiteContainerLogsZipSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    validator: validate_WebAppsGetWebSiteContainerLogsZipSlot_596055, base: "",
    url: url_WebAppsGetWebSiteContainerLogsZipSlot_596056, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobsSlot_596066 = ref object of OpenApiRestCall_593437
proc url_WebAppsListContinuousWebJobsSlot_596068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobsSlot_596067(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596069 = path.getOrDefault("resourceGroupName")
  valid_596069 = validateParameter(valid_596069, JString, required = true,
                                 default = nil)
  if valid_596069 != nil:
    section.add "resourceGroupName", valid_596069
  var valid_596070 = path.getOrDefault("name")
  valid_596070 = validateParameter(valid_596070, JString, required = true,
                                 default = nil)
  if valid_596070 != nil:
    section.add "name", valid_596070
  var valid_596071 = path.getOrDefault("slot")
  valid_596071 = validateParameter(valid_596071, JString, required = true,
                                 default = nil)
  if valid_596071 != nil:
    section.add "slot", valid_596071
  var valid_596072 = path.getOrDefault("subscriptionId")
  valid_596072 = validateParameter(valid_596072, JString, required = true,
                                 default = nil)
  if valid_596072 != nil:
    section.add "subscriptionId", valid_596072
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596073 = query.getOrDefault("api-version")
  valid_596073 = validateParameter(valid_596073, JString, required = true,
                                 default = nil)
  if valid_596073 != nil:
    section.add "api-version", valid_596073
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596074: Call_WebAppsListContinuousWebJobsSlot_596066;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_596074.validator(path, query, header, formData, body)
  let scheme = call_596074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596074.url(scheme.get, call_596074.host, call_596074.base,
                         call_596074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596074, url, valid)

proc call*(call_596075: Call_WebAppsListContinuousWebJobsSlot_596066;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobsSlot
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596076 = newJObject()
  var query_596077 = newJObject()
  add(path_596076, "resourceGroupName", newJString(resourceGroupName))
  add(query_596077, "api-version", newJString(apiVersion))
  add(path_596076, "name", newJString(name))
  add(path_596076, "slot", newJString(slot))
  add(path_596076, "subscriptionId", newJString(subscriptionId))
  result = call_596075.call(path_596076, query_596077, nil, nil, nil)

var webAppsListContinuousWebJobsSlot* = Call_WebAppsListContinuousWebJobsSlot_596066(
    name: "webAppsListContinuousWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobsSlot_596067, base: "",
    url: url_WebAppsListContinuousWebJobsSlot_596068, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJobSlot_596078 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetContinuousWebJobSlot_596080(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJobSlot_596079(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596081 = path.getOrDefault("resourceGroupName")
  valid_596081 = validateParameter(valid_596081, JString, required = true,
                                 default = nil)
  if valid_596081 != nil:
    section.add "resourceGroupName", valid_596081
  var valid_596082 = path.getOrDefault("name")
  valid_596082 = validateParameter(valid_596082, JString, required = true,
                                 default = nil)
  if valid_596082 != nil:
    section.add "name", valid_596082
  var valid_596083 = path.getOrDefault("slot")
  valid_596083 = validateParameter(valid_596083, JString, required = true,
                                 default = nil)
  if valid_596083 != nil:
    section.add "slot", valid_596083
  var valid_596084 = path.getOrDefault("subscriptionId")
  valid_596084 = validateParameter(valid_596084, JString, required = true,
                                 default = nil)
  if valid_596084 != nil:
    section.add "subscriptionId", valid_596084
  var valid_596085 = path.getOrDefault("webJobName")
  valid_596085 = validateParameter(valid_596085, JString, required = true,
                                 default = nil)
  if valid_596085 != nil:
    section.add "webJobName", valid_596085
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596086 = query.getOrDefault("api-version")
  valid_596086 = validateParameter(valid_596086, JString, required = true,
                                 default = nil)
  if valid_596086 != nil:
    section.add "api-version", valid_596086
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596087: Call_WebAppsGetContinuousWebJobSlot_596078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596087.validator(path, query, header, formData, body)
  let scheme = call_596087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596087.url(scheme.get, call_596087.host, call_596087.base,
                         call_596087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596087, url, valid)

proc call*(call_596088: Call_WebAppsGetContinuousWebJobSlot_596078;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJobSlot
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596089 = newJObject()
  var query_596090 = newJObject()
  add(path_596089, "resourceGroupName", newJString(resourceGroupName))
  add(query_596090, "api-version", newJString(apiVersion))
  add(path_596089, "name", newJString(name))
  add(path_596089, "slot", newJString(slot))
  add(path_596089, "subscriptionId", newJString(subscriptionId))
  add(path_596089, "webJobName", newJString(webJobName))
  result = call_596088.call(path_596089, query_596090, nil, nil, nil)

var webAppsGetContinuousWebJobSlot* = Call_WebAppsGetContinuousWebJobSlot_596078(
    name: "webAppsGetContinuousWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJobSlot_596079, base: "",
    url: url_WebAppsGetContinuousWebJobSlot_596080, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJobSlot_596091 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteContinuousWebJobSlot_596093(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJobSlot_596092(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596094 = path.getOrDefault("resourceGroupName")
  valid_596094 = validateParameter(valid_596094, JString, required = true,
                                 default = nil)
  if valid_596094 != nil:
    section.add "resourceGroupName", valid_596094
  var valid_596095 = path.getOrDefault("name")
  valid_596095 = validateParameter(valid_596095, JString, required = true,
                                 default = nil)
  if valid_596095 != nil:
    section.add "name", valid_596095
  var valid_596096 = path.getOrDefault("slot")
  valid_596096 = validateParameter(valid_596096, JString, required = true,
                                 default = nil)
  if valid_596096 != nil:
    section.add "slot", valid_596096
  var valid_596097 = path.getOrDefault("subscriptionId")
  valid_596097 = validateParameter(valid_596097, JString, required = true,
                                 default = nil)
  if valid_596097 != nil:
    section.add "subscriptionId", valid_596097
  var valid_596098 = path.getOrDefault("webJobName")
  valid_596098 = validateParameter(valid_596098, JString, required = true,
                                 default = nil)
  if valid_596098 != nil:
    section.add "webJobName", valid_596098
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596099 = query.getOrDefault("api-version")
  valid_596099 = validateParameter(valid_596099, JString, required = true,
                                 default = nil)
  if valid_596099 != nil:
    section.add "api-version", valid_596099
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596100: Call_WebAppsDeleteContinuousWebJobSlot_596091;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596100.validator(path, query, header, formData, body)
  let scheme = call_596100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596100.url(scheme.get, call_596100.host, call_596100.base,
                         call_596100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596100, url, valid)

proc call*(call_596101: Call_WebAppsDeleteContinuousWebJobSlot_596091;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJobSlot
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596102 = newJObject()
  var query_596103 = newJObject()
  add(path_596102, "resourceGroupName", newJString(resourceGroupName))
  add(query_596103, "api-version", newJString(apiVersion))
  add(path_596102, "name", newJString(name))
  add(path_596102, "slot", newJString(slot))
  add(path_596102, "subscriptionId", newJString(subscriptionId))
  add(path_596102, "webJobName", newJString(webJobName))
  result = call_596101.call(path_596102, query_596103, nil, nil, nil)

var webAppsDeleteContinuousWebJobSlot* = Call_WebAppsDeleteContinuousWebJobSlot_596091(
    name: "webAppsDeleteContinuousWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJobSlot_596092, base: "",
    url: url_WebAppsDeleteContinuousWebJobSlot_596093, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJobSlot_596104 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartContinuousWebJobSlot_596106(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJobSlot_596105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596107 = path.getOrDefault("resourceGroupName")
  valid_596107 = validateParameter(valid_596107, JString, required = true,
                                 default = nil)
  if valid_596107 != nil:
    section.add "resourceGroupName", valid_596107
  var valid_596108 = path.getOrDefault("name")
  valid_596108 = validateParameter(valid_596108, JString, required = true,
                                 default = nil)
  if valid_596108 != nil:
    section.add "name", valid_596108
  var valid_596109 = path.getOrDefault("slot")
  valid_596109 = validateParameter(valid_596109, JString, required = true,
                                 default = nil)
  if valid_596109 != nil:
    section.add "slot", valid_596109
  var valid_596110 = path.getOrDefault("subscriptionId")
  valid_596110 = validateParameter(valid_596110, JString, required = true,
                                 default = nil)
  if valid_596110 != nil:
    section.add "subscriptionId", valid_596110
  var valid_596111 = path.getOrDefault("webJobName")
  valid_596111 = validateParameter(valid_596111, JString, required = true,
                                 default = nil)
  if valid_596111 != nil:
    section.add "webJobName", valid_596111
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596112 = query.getOrDefault("api-version")
  valid_596112 = validateParameter(valid_596112, JString, required = true,
                                 default = nil)
  if valid_596112 != nil:
    section.add "api-version", valid_596112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596113: Call_WebAppsStartContinuousWebJobSlot_596104;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_596113.validator(path, query, header, formData, body)
  let scheme = call_596113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596113.url(scheme.get, call_596113.host, call_596113.base,
                         call_596113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596113, url, valid)

proc call*(call_596114: Call_WebAppsStartContinuousWebJobSlot_596104;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJobSlot
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596115 = newJObject()
  var query_596116 = newJObject()
  add(path_596115, "resourceGroupName", newJString(resourceGroupName))
  add(query_596116, "api-version", newJString(apiVersion))
  add(path_596115, "name", newJString(name))
  add(path_596115, "slot", newJString(slot))
  add(path_596115, "subscriptionId", newJString(subscriptionId))
  add(path_596115, "webJobName", newJString(webJobName))
  result = call_596114.call(path_596115, query_596116, nil, nil, nil)

var webAppsStartContinuousWebJobSlot* = Call_WebAppsStartContinuousWebJobSlot_596104(
    name: "webAppsStartContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJobSlot_596105, base: "",
    url: url_WebAppsStartContinuousWebJobSlot_596106, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJobSlot_596117 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopContinuousWebJobSlot_596119(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJobSlot_596118(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596120 = path.getOrDefault("resourceGroupName")
  valid_596120 = validateParameter(valid_596120, JString, required = true,
                                 default = nil)
  if valid_596120 != nil:
    section.add "resourceGroupName", valid_596120
  var valid_596121 = path.getOrDefault("name")
  valid_596121 = validateParameter(valid_596121, JString, required = true,
                                 default = nil)
  if valid_596121 != nil:
    section.add "name", valid_596121
  var valid_596122 = path.getOrDefault("slot")
  valid_596122 = validateParameter(valid_596122, JString, required = true,
                                 default = nil)
  if valid_596122 != nil:
    section.add "slot", valid_596122
  var valid_596123 = path.getOrDefault("subscriptionId")
  valid_596123 = validateParameter(valid_596123, JString, required = true,
                                 default = nil)
  if valid_596123 != nil:
    section.add "subscriptionId", valid_596123
  var valid_596124 = path.getOrDefault("webJobName")
  valid_596124 = validateParameter(valid_596124, JString, required = true,
                                 default = nil)
  if valid_596124 != nil:
    section.add "webJobName", valid_596124
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596125 = query.getOrDefault("api-version")
  valid_596125 = validateParameter(valid_596125, JString, required = true,
                                 default = nil)
  if valid_596125 != nil:
    section.add "api-version", valid_596125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596126: Call_WebAppsStopContinuousWebJobSlot_596117;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_596126.validator(path, query, header, formData, body)
  let scheme = call_596126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596126.url(scheme.get, call_596126.host, call_596126.base,
                         call_596126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596126, url, valid)

proc call*(call_596127: Call_WebAppsStopContinuousWebJobSlot_596117;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJobSlot
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_596128 = newJObject()
  var query_596129 = newJObject()
  add(path_596128, "resourceGroupName", newJString(resourceGroupName))
  add(query_596129, "api-version", newJString(apiVersion))
  add(path_596128, "name", newJString(name))
  add(path_596128, "slot", newJString(slot))
  add(path_596128, "subscriptionId", newJString(subscriptionId))
  add(path_596128, "webJobName", newJString(webJobName))
  result = call_596127.call(path_596128, query_596129, nil, nil, nil)

var webAppsStopContinuousWebJobSlot* = Call_WebAppsStopContinuousWebJobSlot_596117(
    name: "webAppsStopContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJobSlot_596118, base: "",
    url: url_WebAppsStopContinuousWebJobSlot_596119, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentsSlot_596130 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeploymentsSlot_596132(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentsSlot_596131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596133 = path.getOrDefault("resourceGroupName")
  valid_596133 = validateParameter(valid_596133, JString, required = true,
                                 default = nil)
  if valid_596133 != nil:
    section.add "resourceGroupName", valid_596133
  var valid_596134 = path.getOrDefault("name")
  valid_596134 = validateParameter(valid_596134, JString, required = true,
                                 default = nil)
  if valid_596134 != nil:
    section.add "name", valid_596134
  var valid_596135 = path.getOrDefault("slot")
  valid_596135 = validateParameter(valid_596135, JString, required = true,
                                 default = nil)
  if valid_596135 != nil:
    section.add "slot", valid_596135
  var valid_596136 = path.getOrDefault("subscriptionId")
  valid_596136 = validateParameter(valid_596136, JString, required = true,
                                 default = nil)
  if valid_596136 != nil:
    section.add "subscriptionId", valid_596136
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596137 = query.getOrDefault("api-version")
  valid_596137 = validateParameter(valid_596137, JString, required = true,
                                 default = nil)
  if valid_596137 != nil:
    section.add "api-version", valid_596137
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596138: Call_WebAppsListDeploymentsSlot_596130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_596138.validator(path, query, header, formData, body)
  let scheme = call_596138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596138.url(scheme.get, call_596138.host, call_596138.base,
                         call_596138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596138, url, valid)

proc call*(call_596139: Call_WebAppsListDeploymentsSlot_596130;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeploymentsSlot
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596140 = newJObject()
  var query_596141 = newJObject()
  add(path_596140, "resourceGroupName", newJString(resourceGroupName))
  add(query_596141, "api-version", newJString(apiVersion))
  add(path_596140, "name", newJString(name))
  add(path_596140, "slot", newJString(slot))
  add(path_596140, "subscriptionId", newJString(subscriptionId))
  result = call_596139.call(path_596140, query_596141, nil, nil, nil)

var webAppsListDeploymentsSlot* = Call_WebAppsListDeploymentsSlot_596130(
    name: "webAppsListDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_WebAppsListDeploymentsSlot_596131, base: "",
    url: url_WebAppsListDeploymentsSlot_596132, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeploymentSlot_596155 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateDeploymentSlot_596157(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeploymentSlot_596156(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596158 = path.getOrDefault("resourceGroupName")
  valid_596158 = validateParameter(valid_596158, JString, required = true,
                                 default = nil)
  if valid_596158 != nil:
    section.add "resourceGroupName", valid_596158
  var valid_596159 = path.getOrDefault("name")
  valid_596159 = validateParameter(valid_596159, JString, required = true,
                                 default = nil)
  if valid_596159 != nil:
    section.add "name", valid_596159
  var valid_596160 = path.getOrDefault("slot")
  valid_596160 = validateParameter(valid_596160, JString, required = true,
                                 default = nil)
  if valid_596160 != nil:
    section.add "slot", valid_596160
  var valid_596161 = path.getOrDefault("subscriptionId")
  valid_596161 = validateParameter(valid_596161, JString, required = true,
                                 default = nil)
  if valid_596161 != nil:
    section.add "subscriptionId", valid_596161
  var valid_596162 = path.getOrDefault("id")
  valid_596162 = validateParameter(valid_596162, JString, required = true,
                                 default = nil)
  if valid_596162 != nil:
    section.add "id", valid_596162
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596163 = query.getOrDefault("api-version")
  valid_596163 = validateParameter(valid_596163, JString, required = true,
                                 default = nil)
  if valid_596163 != nil:
    section.add "api-version", valid_596163
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596165: Call_WebAppsCreateDeploymentSlot_596155; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_596165.validator(path, query, header, formData, body)
  let scheme = call_596165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596165.url(scheme.get, call_596165.host, call_596165.base,
                         call_596165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596165, url, valid)

proc call*(call_596166: Call_WebAppsCreateDeploymentSlot_596155;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeploymentSlot
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_596167 = newJObject()
  var query_596168 = newJObject()
  var body_596169 = newJObject()
  add(path_596167, "resourceGroupName", newJString(resourceGroupName))
  add(query_596168, "api-version", newJString(apiVersion))
  add(path_596167, "name", newJString(name))
  add(path_596167, "slot", newJString(slot))
  add(path_596167, "subscriptionId", newJString(subscriptionId))
  add(path_596167, "id", newJString(id))
  if deployment != nil:
    body_596169 = deployment
  result = call_596166.call(path_596167, query_596168, nil, nil, body_596169)

var webAppsCreateDeploymentSlot* = Call_WebAppsCreateDeploymentSlot_596155(
    name: "webAppsCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsCreateDeploymentSlot_596156, base: "",
    url: url_WebAppsCreateDeploymentSlot_596157, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeploymentSlot_596142 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDeploymentSlot_596144(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeploymentSlot_596143(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596145 = path.getOrDefault("resourceGroupName")
  valid_596145 = validateParameter(valid_596145, JString, required = true,
                                 default = nil)
  if valid_596145 != nil:
    section.add "resourceGroupName", valid_596145
  var valid_596146 = path.getOrDefault("name")
  valid_596146 = validateParameter(valid_596146, JString, required = true,
                                 default = nil)
  if valid_596146 != nil:
    section.add "name", valid_596146
  var valid_596147 = path.getOrDefault("slot")
  valid_596147 = validateParameter(valid_596147, JString, required = true,
                                 default = nil)
  if valid_596147 != nil:
    section.add "slot", valid_596147
  var valid_596148 = path.getOrDefault("subscriptionId")
  valid_596148 = validateParameter(valid_596148, JString, required = true,
                                 default = nil)
  if valid_596148 != nil:
    section.add "subscriptionId", valid_596148
  var valid_596149 = path.getOrDefault("id")
  valid_596149 = validateParameter(valid_596149, JString, required = true,
                                 default = nil)
  if valid_596149 != nil:
    section.add "id", valid_596149
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596150 = query.getOrDefault("api-version")
  valid_596150 = validateParameter(valid_596150, JString, required = true,
                                 default = nil)
  if valid_596150 != nil:
    section.add "api-version", valid_596150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596151: Call_WebAppsGetDeploymentSlot_596142; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596151.validator(path, query, header, formData, body)
  let scheme = call_596151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596151.url(scheme.get, call_596151.host, call_596151.base,
                         call_596151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596151, url, valid)

proc call*(call_596152: Call_WebAppsGetDeploymentSlot_596142;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeploymentSlot
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_596153 = newJObject()
  var query_596154 = newJObject()
  add(path_596153, "resourceGroupName", newJString(resourceGroupName))
  add(query_596154, "api-version", newJString(apiVersion))
  add(path_596153, "name", newJString(name))
  add(path_596153, "slot", newJString(slot))
  add(path_596153, "subscriptionId", newJString(subscriptionId))
  add(path_596153, "id", newJString(id))
  result = call_596152.call(path_596153, query_596154, nil, nil, nil)

var webAppsGetDeploymentSlot* = Call_WebAppsGetDeploymentSlot_596142(
    name: "webAppsGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsGetDeploymentSlot_596143, base: "",
    url: url_WebAppsGetDeploymentSlot_596144, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeploymentSlot_596170 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDeploymentSlot_596172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeploymentSlot_596171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596173 = path.getOrDefault("resourceGroupName")
  valid_596173 = validateParameter(valid_596173, JString, required = true,
                                 default = nil)
  if valid_596173 != nil:
    section.add "resourceGroupName", valid_596173
  var valid_596174 = path.getOrDefault("name")
  valid_596174 = validateParameter(valid_596174, JString, required = true,
                                 default = nil)
  if valid_596174 != nil:
    section.add "name", valid_596174
  var valid_596175 = path.getOrDefault("slot")
  valid_596175 = validateParameter(valid_596175, JString, required = true,
                                 default = nil)
  if valid_596175 != nil:
    section.add "slot", valid_596175
  var valid_596176 = path.getOrDefault("subscriptionId")
  valid_596176 = validateParameter(valid_596176, JString, required = true,
                                 default = nil)
  if valid_596176 != nil:
    section.add "subscriptionId", valid_596176
  var valid_596177 = path.getOrDefault("id")
  valid_596177 = validateParameter(valid_596177, JString, required = true,
                                 default = nil)
  if valid_596177 != nil:
    section.add "id", valid_596177
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596178 = query.getOrDefault("api-version")
  valid_596178 = validateParameter(valid_596178, JString, required = true,
                                 default = nil)
  if valid_596178 != nil:
    section.add "api-version", valid_596178
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596179: Call_WebAppsDeleteDeploymentSlot_596170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_596179.validator(path, query, header, formData, body)
  let scheme = call_596179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596179.url(scheme.get, call_596179.host, call_596179.base,
                         call_596179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596179, url, valid)

proc call*(call_596180: Call_WebAppsDeleteDeploymentSlot_596170;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeploymentSlot
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_596181 = newJObject()
  var query_596182 = newJObject()
  add(path_596181, "resourceGroupName", newJString(resourceGroupName))
  add(query_596182, "api-version", newJString(apiVersion))
  add(path_596181, "name", newJString(name))
  add(path_596181, "slot", newJString(slot))
  add(path_596181, "subscriptionId", newJString(subscriptionId))
  add(path_596181, "id", newJString(id))
  result = call_596180.call(path_596181, query_596182, nil, nil, nil)

var webAppsDeleteDeploymentSlot* = Call_WebAppsDeleteDeploymentSlot_596170(
    name: "webAppsDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsDeleteDeploymentSlot_596171, base: "",
    url: url_WebAppsDeleteDeploymentSlot_596172, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLogSlot_596183 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDeploymentLogSlot_596185(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLogSlot_596184(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596186 = path.getOrDefault("resourceGroupName")
  valid_596186 = validateParameter(valid_596186, JString, required = true,
                                 default = nil)
  if valid_596186 != nil:
    section.add "resourceGroupName", valid_596186
  var valid_596187 = path.getOrDefault("name")
  valid_596187 = validateParameter(valid_596187, JString, required = true,
                                 default = nil)
  if valid_596187 != nil:
    section.add "name", valid_596187
  var valid_596188 = path.getOrDefault("slot")
  valid_596188 = validateParameter(valid_596188, JString, required = true,
                                 default = nil)
  if valid_596188 != nil:
    section.add "slot", valid_596188
  var valid_596189 = path.getOrDefault("subscriptionId")
  valid_596189 = validateParameter(valid_596189, JString, required = true,
                                 default = nil)
  if valid_596189 != nil:
    section.add "subscriptionId", valid_596189
  var valid_596190 = path.getOrDefault("id")
  valid_596190 = validateParameter(valid_596190, JString, required = true,
                                 default = nil)
  if valid_596190 != nil:
    section.add "id", valid_596190
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596191 = query.getOrDefault("api-version")
  valid_596191 = validateParameter(valid_596191, JString, required = true,
                                 default = nil)
  if valid_596191 != nil:
    section.add "api-version", valid_596191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596192: Call_WebAppsListDeploymentLogSlot_596183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_596192.validator(path, query, header, formData, body)
  let scheme = call_596192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596192.url(scheme.get, call_596192.host, call_596192.base,
                         call_596192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596192, url, valid)

proc call*(call_596193: Call_WebAppsListDeploymentLogSlot_596183;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLogSlot
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_596194 = newJObject()
  var query_596195 = newJObject()
  add(path_596194, "resourceGroupName", newJString(resourceGroupName))
  add(query_596195, "api-version", newJString(apiVersion))
  add(path_596194, "name", newJString(name))
  add(path_596194, "slot", newJString(slot))
  add(path_596194, "subscriptionId", newJString(subscriptionId))
  add(path_596194, "id", newJString(id))
  result = call_596193.call(path_596194, query_596195, nil, nil, nil)

var webAppsListDeploymentLogSlot* = Call_WebAppsListDeploymentLogSlot_596183(
    name: "webAppsListDeploymentLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLogSlot_596184, base: "",
    url: url_WebAppsListDeploymentLogSlot_596185, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiersSlot_596196 = ref object of OpenApiRestCall_593437
proc url_WebAppsListDomainOwnershipIdentifiersSlot_596198(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiersSlot_596197(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596199 = path.getOrDefault("resourceGroupName")
  valid_596199 = validateParameter(valid_596199, JString, required = true,
                                 default = nil)
  if valid_596199 != nil:
    section.add "resourceGroupName", valid_596199
  var valid_596200 = path.getOrDefault("name")
  valid_596200 = validateParameter(valid_596200, JString, required = true,
                                 default = nil)
  if valid_596200 != nil:
    section.add "name", valid_596200
  var valid_596201 = path.getOrDefault("slot")
  valid_596201 = validateParameter(valid_596201, JString, required = true,
                                 default = nil)
  if valid_596201 != nil:
    section.add "slot", valid_596201
  var valid_596202 = path.getOrDefault("subscriptionId")
  valid_596202 = validateParameter(valid_596202, JString, required = true,
                                 default = nil)
  if valid_596202 != nil:
    section.add "subscriptionId", valid_596202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596203 = query.getOrDefault("api-version")
  valid_596203 = validateParameter(valid_596203, JString, required = true,
                                 default = nil)
  if valid_596203 != nil:
    section.add "api-version", valid_596203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596204: Call_WebAppsListDomainOwnershipIdentifiersSlot_596196;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_596204.validator(path, query, header, formData, body)
  let scheme = call_596204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596204.url(scheme.get, call_596204.host, call_596204.base,
                         call_596204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596204, url, valid)

proc call*(call_596205: Call_WebAppsListDomainOwnershipIdentifiersSlot_596196;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiersSlot
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596206 = newJObject()
  var query_596207 = newJObject()
  add(path_596206, "resourceGroupName", newJString(resourceGroupName))
  add(query_596207, "api-version", newJString(apiVersion))
  add(path_596206, "name", newJString(name))
  add(path_596206, "slot", newJString(slot))
  add(path_596206, "subscriptionId", newJString(subscriptionId))
  result = call_596205.call(path_596206, query_596207, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiersSlot* = Call_WebAppsListDomainOwnershipIdentifiersSlot_596196(
    name: "webAppsListDomainOwnershipIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiersSlot_596197,
    base: "", url: url_WebAppsListDomainOwnershipIdentifiersSlot_596198,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596221 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596223(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596222(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596224 = path.getOrDefault("resourceGroupName")
  valid_596224 = validateParameter(valid_596224, JString, required = true,
                                 default = nil)
  if valid_596224 != nil:
    section.add "resourceGroupName", valid_596224
  var valid_596225 = path.getOrDefault("name")
  valid_596225 = validateParameter(valid_596225, JString, required = true,
                                 default = nil)
  if valid_596225 != nil:
    section.add "name", valid_596225
  var valid_596226 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596226 = validateParameter(valid_596226, JString, required = true,
                                 default = nil)
  if valid_596226 != nil:
    section.add "domainOwnershipIdentifierName", valid_596226
  var valid_596227 = path.getOrDefault("slot")
  valid_596227 = validateParameter(valid_596227, JString, required = true,
                                 default = nil)
  if valid_596227 != nil:
    section.add "slot", valid_596227
  var valid_596228 = path.getOrDefault("subscriptionId")
  valid_596228 = validateParameter(valid_596228, JString, required = true,
                                 default = nil)
  if valid_596228 != nil:
    section.add "subscriptionId", valid_596228
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596229 = query.getOrDefault("api-version")
  valid_596229 = validateParameter(valid_596229, JString, required = true,
                                 default = nil)
  if valid_596229 != nil:
    section.add "api-version", valid_596229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596231: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596221;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_596231.validator(path, query, header, formData, body)
  let scheme = call_596231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596231.url(scheme.get, call_596231.host, call_596231.base,
                         call_596231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596231, url, valid)

proc call*(call_596232: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596221;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596233 = newJObject()
  var query_596234 = newJObject()
  var body_596235 = newJObject()
  add(path_596233, "resourceGroupName", newJString(resourceGroupName))
  add(query_596234, "api-version", newJString(apiVersion))
  add(path_596233, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_596235 = domainOwnershipIdentifier
  add(path_596233, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596233, "slot", newJString(slot))
  add(path_596233, "subscriptionId", newJString(subscriptionId))
  result = call_596232.call(path_596233, query_596234, nil, nil, body_596235)

var webAppsCreateOrUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596221(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596222,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_596223,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifierSlot_596208 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetDomainOwnershipIdentifierSlot_596210(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifierSlot_596209(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596211 = path.getOrDefault("resourceGroupName")
  valid_596211 = validateParameter(valid_596211, JString, required = true,
                                 default = nil)
  if valid_596211 != nil:
    section.add "resourceGroupName", valid_596211
  var valid_596212 = path.getOrDefault("name")
  valid_596212 = validateParameter(valid_596212, JString, required = true,
                                 default = nil)
  if valid_596212 != nil:
    section.add "name", valid_596212
  var valid_596213 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596213 = validateParameter(valid_596213, JString, required = true,
                                 default = nil)
  if valid_596213 != nil:
    section.add "domainOwnershipIdentifierName", valid_596213
  var valid_596214 = path.getOrDefault("slot")
  valid_596214 = validateParameter(valid_596214, JString, required = true,
                                 default = nil)
  if valid_596214 != nil:
    section.add "slot", valid_596214
  var valid_596215 = path.getOrDefault("subscriptionId")
  valid_596215 = validateParameter(valid_596215, JString, required = true,
                                 default = nil)
  if valid_596215 != nil:
    section.add "subscriptionId", valid_596215
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596216 = query.getOrDefault("api-version")
  valid_596216 = validateParameter(valid_596216, JString, required = true,
                                 default = nil)
  if valid_596216 != nil:
    section.add "api-version", valid_596216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596217: Call_WebAppsGetDomainOwnershipIdentifierSlot_596208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_596217.validator(path, query, header, formData, body)
  let scheme = call_596217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596217.url(scheme.get, call_596217.host, call_596217.base,
                         call_596217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596217, url, valid)

proc call*(call_596218: Call_WebAppsGetDomainOwnershipIdentifierSlot_596208;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifierSlot
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596219 = newJObject()
  var query_596220 = newJObject()
  add(path_596219, "resourceGroupName", newJString(resourceGroupName))
  add(query_596220, "api-version", newJString(apiVersion))
  add(path_596219, "name", newJString(name))
  add(path_596219, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596219, "slot", newJString(slot))
  add(path_596219, "subscriptionId", newJString(subscriptionId))
  result = call_596218.call(path_596219, query_596220, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifierSlot* = Call_WebAppsGetDomainOwnershipIdentifierSlot_596208(
    name: "webAppsGetDomainOwnershipIdentifierSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifierSlot_596209, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifierSlot_596210,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596249 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateDomainOwnershipIdentifierSlot_596251(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifierSlot_596250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596252 = path.getOrDefault("resourceGroupName")
  valid_596252 = validateParameter(valid_596252, JString, required = true,
                                 default = nil)
  if valid_596252 != nil:
    section.add "resourceGroupName", valid_596252
  var valid_596253 = path.getOrDefault("name")
  valid_596253 = validateParameter(valid_596253, JString, required = true,
                                 default = nil)
  if valid_596253 != nil:
    section.add "name", valid_596253
  var valid_596254 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596254 = validateParameter(valid_596254, JString, required = true,
                                 default = nil)
  if valid_596254 != nil:
    section.add "domainOwnershipIdentifierName", valid_596254
  var valid_596255 = path.getOrDefault("slot")
  valid_596255 = validateParameter(valid_596255, JString, required = true,
                                 default = nil)
  if valid_596255 != nil:
    section.add "slot", valid_596255
  var valid_596256 = path.getOrDefault("subscriptionId")
  valid_596256 = validateParameter(valid_596256, JString, required = true,
                                 default = nil)
  if valid_596256 != nil:
    section.add "subscriptionId", valid_596256
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596257 = query.getOrDefault("api-version")
  valid_596257 = validateParameter(valid_596257, JString, required = true,
                                 default = nil)
  if valid_596257 != nil:
    section.add "api-version", valid_596257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596259: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_596259.validator(path, query, header, formData, body)
  let scheme = call_596259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596259.url(scheme.get, call_596259.host, call_596259.base,
                         call_596259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596259, url, valid)

proc call*(call_596260: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596249;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596261 = newJObject()
  var query_596262 = newJObject()
  var body_596263 = newJObject()
  add(path_596261, "resourceGroupName", newJString(resourceGroupName))
  add(query_596262, "api-version", newJString(apiVersion))
  add(path_596261, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_596263 = domainOwnershipIdentifier
  add(path_596261, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596261, "slot", newJString(slot))
  add(path_596261, "subscriptionId", newJString(subscriptionId))
  result = call_596260.call(path_596261, query_596262, nil, nil, body_596263)

var webAppsUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsUpdateDomainOwnershipIdentifierSlot_596249(
    name: "webAppsUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifierSlot_596250,
    base: "", url: url_WebAppsUpdateDomainOwnershipIdentifierSlot_596251,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596236 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteDomainOwnershipIdentifierSlot_596238(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifierSlot_596237(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596239 = path.getOrDefault("resourceGroupName")
  valid_596239 = validateParameter(valid_596239, JString, required = true,
                                 default = nil)
  if valid_596239 != nil:
    section.add "resourceGroupName", valid_596239
  var valid_596240 = path.getOrDefault("name")
  valid_596240 = validateParameter(valid_596240, JString, required = true,
                                 default = nil)
  if valid_596240 != nil:
    section.add "name", valid_596240
  var valid_596241 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_596241 = validateParameter(valid_596241, JString, required = true,
                                 default = nil)
  if valid_596241 != nil:
    section.add "domainOwnershipIdentifierName", valid_596241
  var valid_596242 = path.getOrDefault("slot")
  valid_596242 = validateParameter(valid_596242, JString, required = true,
                                 default = nil)
  if valid_596242 != nil:
    section.add "slot", valid_596242
  var valid_596243 = path.getOrDefault("subscriptionId")
  valid_596243 = validateParameter(valid_596243, JString, required = true,
                                 default = nil)
  if valid_596243 != nil:
    section.add "subscriptionId", valid_596243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596244 = query.getOrDefault("api-version")
  valid_596244 = validateParameter(valid_596244, JString, required = true,
                                 default = nil)
  if valid_596244 != nil:
    section.add "api-version", valid_596244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596245: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596236;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_596245.validator(path, query, header, formData, body)
  let scheme = call_596245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596245.url(scheme.get, call_596245.host, call_596245.base,
                         call_596245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596245, url, valid)

proc call*(call_596246: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596236;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifierSlot
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596247 = newJObject()
  var query_596248 = newJObject()
  add(path_596247, "resourceGroupName", newJString(resourceGroupName))
  add(query_596248, "api-version", newJString(apiVersion))
  add(path_596247, "name", newJString(name))
  add(path_596247, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_596247, "slot", newJString(slot))
  add(path_596247, "subscriptionId", newJString(subscriptionId))
  result = call_596246.call(path_596247, query_596248, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifierSlot* = Call_WebAppsDeleteDomainOwnershipIdentifierSlot_596236(
    name: "webAppsDeleteDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifierSlot_596237,
    base: "", url: url_WebAppsDeleteDomainOwnershipIdentifierSlot_596238,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperationSlot_596276 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateMSDeployOperationSlot_596278(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperationSlot_596277(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596279 = path.getOrDefault("resourceGroupName")
  valid_596279 = validateParameter(valid_596279, JString, required = true,
                                 default = nil)
  if valid_596279 != nil:
    section.add "resourceGroupName", valid_596279
  var valid_596280 = path.getOrDefault("name")
  valid_596280 = validateParameter(valid_596280, JString, required = true,
                                 default = nil)
  if valid_596280 != nil:
    section.add "name", valid_596280
  var valid_596281 = path.getOrDefault("slot")
  valid_596281 = validateParameter(valid_596281, JString, required = true,
                                 default = nil)
  if valid_596281 != nil:
    section.add "slot", valid_596281
  var valid_596282 = path.getOrDefault("subscriptionId")
  valid_596282 = validateParameter(valid_596282, JString, required = true,
                                 default = nil)
  if valid_596282 != nil:
    section.add "subscriptionId", valid_596282
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596283 = query.getOrDefault("api-version")
  valid_596283 = validateParameter(valid_596283, JString, required = true,
                                 default = nil)
  if valid_596283 != nil:
    section.add "api-version", valid_596283
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596285: Call_WebAppsCreateMSDeployOperationSlot_596276;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_596285.validator(path, query, header, formData, body)
  let scheme = call_596285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596285.url(scheme.get, call_596285.host, call_596285.base,
                         call_596285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596285, url, valid)

proc call*(call_596286: Call_WebAppsCreateMSDeployOperationSlot_596276;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_596287 = newJObject()
  var query_596288 = newJObject()
  var body_596289 = newJObject()
  add(path_596287, "resourceGroupName", newJString(resourceGroupName))
  add(query_596288, "api-version", newJString(apiVersion))
  add(path_596287, "name", newJString(name))
  add(path_596287, "slot", newJString(slot))
  add(path_596287, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_596289 = MSDeploy
  result = call_596286.call(path_596287, query_596288, nil, nil, body_596289)

var webAppsCreateMSDeployOperationSlot* = Call_WebAppsCreateMSDeployOperationSlot_596276(
    name: "webAppsCreateMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperationSlot_596277, base: "",
    url: url_WebAppsCreateMSDeployOperationSlot_596278, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatusSlot_596264 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployStatusSlot_596266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatusSlot_596265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596267 = path.getOrDefault("resourceGroupName")
  valid_596267 = validateParameter(valid_596267, JString, required = true,
                                 default = nil)
  if valid_596267 != nil:
    section.add "resourceGroupName", valid_596267
  var valid_596268 = path.getOrDefault("name")
  valid_596268 = validateParameter(valid_596268, JString, required = true,
                                 default = nil)
  if valid_596268 != nil:
    section.add "name", valid_596268
  var valid_596269 = path.getOrDefault("slot")
  valid_596269 = validateParameter(valid_596269, JString, required = true,
                                 default = nil)
  if valid_596269 != nil:
    section.add "slot", valid_596269
  var valid_596270 = path.getOrDefault("subscriptionId")
  valid_596270 = validateParameter(valid_596270, JString, required = true,
                                 default = nil)
  if valid_596270 != nil:
    section.add "subscriptionId", valid_596270
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596271 = query.getOrDefault("api-version")
  valid_596271 = validateParameter(valid_596271, JString, required = true,
                                 default = nil)
  if valid_596271 != nil:
    section.add "api-version", valid_596271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596272: Call_WebAppsGetMSDeployStatusSlot_596264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_596272.validator(path, query, header, formData, body)
  let scheme = call_596272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596272.url(scheme.get, call_596272.host, call_596272.base,
                         call_596272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596272, url, valid)

proc call*(call_596273: Call_WebAppsGetMSDeployStatusSlot_596264;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596274 = newJObject()
  var query_596275 = newJObject()
  add(path_596274, "resourceGroupName", newJString(resourceGroupName))
  add(query_596275, "api-version", newJString(apiVersion))
  add(path_596274, "name", newJString(name))
  add(path_596274, "slot", newJString(slot))
  add(path_596274, "subscriptionId", newJString(subscriptionId))
  result = call_596273.call(path_596274, query_596275, nil, nil, nil)

var webAppsGetMSDeployStatusSlot* = Call_WebAppsGetMSDeployStatusSlot_596264(
    name: "webAppsGetMSDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatusSlot_596265, base: "",
    url: url_WebAppsGetMSDeployStatusSlot_596266, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLogSlot_596290 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMSDeployLogSlot_596292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLogSlot_596291(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596293 = path.getOrDefault("resourceGroupName")
  valid_596293 = validateParameter(valid_596293, JString, required = true,
                                 default = nil)
  if valid_596293 != nil:
    section.add "resourceGroupName", valid_596293
  var valid_596294 = path.getOrDefault("name")
  valid_596294 = validateParameter(valid_596294, JString, required = true,
                                 default = nil)
  if valid_596294 != nil:
    section.add "name", valid_596294
  var valid_596295 = path.getOrDefault("slot")
  valid_596295 = validateParameter(valid_596295, JString, required = true,
                                 default = nil)
  if valid_596295 != nil:
    section.add "slot", valid_596295
  var valid_596296 = path.getOrDefault("subscriptionId")
  valid_596296 = validateParameter(valid_596296, JString, required = true,
                                 default = nil)
  if valid_596296 != nil:
    section.add "subscriptionId", valid_596296
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596297 = query.getOrDefault("api-version")
  valid_596297 = validateParameter(valid_596297, JString, required = true,
                                 default = nil)
  if valid_596297 != nil:
    section.add "api-version", valid_596297
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596298: Call_WebAppsGetMSDeployLogSlot_596290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_596298.validator(path, query, header, formData, body)
  let scheme = call_596298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596298.url(scheme.get, call_596298.host, call_596298.base,
                         call_596298.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596298, url, valid)

proc call*(call_596299: Call_WebAppsGetMSDeployLogSlot_596290;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596300 = newJObject()
  var query_596301 = newJObject()
  add(path_596300, "resourceGroupName", newJString(resourceGroupName))
  add(query_596301, "api-version", newJString(apiVersion))
  add(path_596300, "name", newJString(name))
  add(path_596300, "slot", newJString(slot))
  add(path_596300, "subscriptionId", newJString(subscriptionId))
  result = call_596299.call(path_596300, query_596301, nil, nil, nil)

var webAppsGetMSDeployLogSlot* = Call_WebAppsGetMSDeployLogSlot_596290(
    name: "webAppsGetMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLogSlot_596291, base: "",
    url: url_WebAppsGetMSDeployLogSlot_596292, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceFunctionsSlot_596302 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceFunctionsSlot_596304(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceFunctionsSlot_596303(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596305 = path.getOrDefault("resourceGroupName")
  valid_596305 = validateParameter(valid_596305, JString, required = true,
                                 default = nil)
  if valid_596305 != nil:
    section.add "resourceGroupName", valid_596305
  var valid_596306 = path.getOrDefault("name")
  valid_596306 = validateParameter(valid_596306, JString, required = true,
                                 default = nil)
  if valid_596306 != nil:
    section.add "name", valid_596306
  var valid_596307 = path.getOrDefault("slot")
  valid_596307 = validateParameter(valid_596307, JString, required = true,
                                 default = nil)
  if valid_596307 != nil:
    section.add "slot", valid_596307
  var valid_596308 = path.getOrDefault("subscriptionId")
  valid_596308 = validateParameter(valid_596308, JString, required = true,
                                 default = nil)
  if valid_596308 != nil:
    section.add "subscriptionId", valid_596308
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596309 = query.getOrDefault("api-version")
  valid_596309 = validateParameter(valid_596309, JString, required = true,
                                 default = nil)
  if valid_596309 != nil:
    section.add "api-version", valid_596309
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596310: Call_WebAppsListInstanceFunctionsSlot_596302;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_596310.validator(path, query, header, formData, body)
  let scheme = call_596310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596310.url(scheme.get, call_596310.host, call_596310.base,
                         call_596310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596310, url, valid)

proc call*(call_596311: Call_WebAppsListInstanceFunctionsSlot_596302;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceFunctionsSlot
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596312 = newJObject()
  var query_596313 = newJObject()
  add(path_596312, "resourceGroupName", newJString(resourceGroupName))
  add(query_596313, "api-version", newJString(apiVersion))
  add(path_596312, "name", newJString(name))
  add(path_596312, "slot", newJString(slot))
  add(path_596312, "subscriptionId", newJString(subscriptionId))
  result = call_596311.call(path_596312, query_596313, nil, nil, nil)

var webAppsListInstanceFunctionsSlot* = Call_WebAppsListInstanceFunctionsSlot_596302(
    name: "webAppsListInstanceFunctionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    validator: validate_WebAppsListInstanceFunctionsSlot_596303, base: "",
    url: url_WebAppsListInstanceFunctionsSlot_596304, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminTokenSlot_596314 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetFunctionsAdminTokenSlot_596316(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminTokenSlot_596315(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596317 = path.getOrDefault("resourceGroupName")
  valid_596317 = validateParameter(valid_596317, JString, required = true,
                                 default = nil)
  if valid_596317 != nil:
    section.add "resourceGroupName", valid_596317
  var valid_596318 = path.getOrDefault("name")
  valid_596318 = validateParameter(valid_596318, JString, required = true,
                                 default = nil)
  if valid_596318 != nil:
    section.add "name", valid_596318
  var valid_596319 = path.getOrDefault("slot")
  valid_596319 = validateParameter(valid_596319, JString, required = true,
                                 default = nil)
  if valid_596319 != nil:
    section.add "slot", valid_596319
  var valid_596320 = path.getOrDefault("subscriptionId")
  valid_596320 = validateParameter(valid_596320, JString, required = true,
                                 default = nil)
  if valid_596320 != nil:
    section.add "subscriptionId", valid_596320
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596321 = query.getOrDefault("api-version")
  valid_596321 = validateParameter(valid_596321, JString, required = true,
                                 default = nil)
  if valid_596321 != nil:
    section.add "api-version", valid_596321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596322: Call_WebAppsGetFunctionsAdminTokenSlot_596314;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_596322.validator(path, query, header, formData, body)
  let scheme = call_596322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596322.url(scheme.get, call_596322.host, call_596322.base,
                         call_596322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596322, url, valid)

proc call*(call_596323: Call_WebAppsGetFunctionsAdminTokenSlot_596314;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminTokenSlot
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596324 = newJObject()
  var query_596325 = newJObject()
  add(path_596324, "resourceGroupName", newJString(resourceGroupName))
  add(query_596325, "api-version", newJString(apiVersion))
  add(path_596324, "name", newJString(name))
  add(path_596324, "slot", newJString(slot))
  add(path_596324, "subscriptionId", newJString(subscriptionId))
  result = call_596323.call(path_596324, query_596325, nil, nil, nil)

var webAppsGetFunctionsAdminTokenSlot* = Call_WebAppsGetFunctionsAdminTokenSlot_596314(
    name: "webAppsGetFunctionsAdminTokenSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminTokenSlot_596315, base: "",
    url: url_WebAppsGetFunctionsAdminTokenSlot_596316, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceFunctionSlot_596339 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateInstanceFunctionSlot_596341(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceFunctionSlot_596340(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596342 = path.getOrDefault("resourceGroupName")
  valid_596342 = validateParameter(valid_596342, JString, required = true,
                                 default = nil)
  if valid_596342 != nil:
    section.add "resourceGroupName", valid_596342
  var valid_596343 = path.getOrDefault("name")
  valid_596343 = validateParameter(valid_596343, JString, required = true,
                                 default = nil)
  if valid_596343 != nil:
    section.add "name", valid_596343
  var valid_596344 = path.getOrDefault("slot")
  valid_596344 = validateParameter(valid_596344, JString, required = true,
                                 default = nil)
  if valid_596344 != nil:
    section.add "slot", valid_596344
  var valid_596345 = path.getOrDefault("subscriptionId")
  valid_596345 = validateParameter(valid_596345, JString, required = true,
                                 default = nil)
  if valid_596345 != nil:
    section.add "subscriptionId", valid_596345
  var valid_596346 = path.getOrDefault("functionName")
  valid_596346 = validateParameter(valid_596346, JString, required = true,
                                 default = nil)
  if valid_596346 != nil:
    section.add "functionName", valid_596346
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596347 = query.getOrDefault("api-version")
  valid_596347 = validateParameter(valid_596347, JString, required = true,
                                 default = nil)
  if valid_596347 != nil:
    section.add "api-version", valid_596347
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596349: Call_WebAppsCreateInstanceFunctionSlot_596339;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_596349.validator(path, query, header, formData, body)
  let scheme = call_596349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596349.url(scheme.get, call_596349.host, call_596349.base,
                         call_596349.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596349, url, valid)

proc call*(call_596350: Call_WebAppsCreateInstanceFunctionSlot_596339;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateInstanceFunctionSlot
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_596351 = newJObject()
  var query_596352 = newJObject()
  var body_596353 = newJObject()
  add(path_596351, "resourceGroupName", newJString(resourceGroupName))
  add(query_596352, "api-version", newJString(apiVersion))
  add(path_596351, "name", newJString(name))
  add(path_596351, "slot", newJString(slot))
  add(path_596351, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_596353 = functionEnvelope
  add(path_596351, "functionName", newJString(functionName))
  result = call_596350.call(path_596351, query_596352, nil, nil, body_596353)

var webAppsCreateInstanceFunctionSlot* = Call_WebAppsCreateInstanceFunctionSlot_596339(
    name: "webAppsCreateInstanceFunctionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsCreateInstanceFunctionSlot_596340, base: "",
    url: url_WebAppsCreateInstanceFunctionSlot_596341, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceFunctionSlot_596326 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceFunctionSlot_596328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceFunctionSlot_596327(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596329 = path.getOrDefault("resourceGroupName")
  valid_596329 = validateParameter(valid_596329, JString, required = true,
                                 default = nil)
  if valid_596329 != nil:
    section.add "resourceGroupName", valid_596329
  var valid_596330 = path.getOrDefault("name")
  valid_596330 = validateParameter(valid_596330, JString, required = true,
                                 default = nil)
  if valid_596330 != nil:
    section.add "name", valid_596330
  var valid_596331 = path.getOrDefault("slot")
  valid_596331 = validateParameter(valid_596331, JString, required = true,
                                 default = nil)
  if valid_596331 != nil:
    section.add "slot", valid_596331
  var valid_596332 = path.getOrDefault("subscriptionId")
  valid_596332 = validateParameter(valid_596332, JString, required = true,
                                 default = nil)
  if valid_596332 != nil:
    section.add "subscriptionId", valid_596332
  var valid_596333 = path.getOrDefault("functionName")
  valid_596333 = validateParameter(valid_596333, JString, required = true,
                                 default = nil)
  if valid_596333 != nil:
    section.add "functionName", valid_596333
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596334 = query.getOrDefault("api-version")
  valid_596334 = validateParameter(valid_596334, JString, required = true,
                                 default = nil)
  if valid_596334 != nil:
    section.add "api-version", valid_596334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596335: Call_WebAppsGetInstanceFunctionSlot_596326; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_596335.validator(path, query, header, formData, body)
  let scheme = call_596335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596335.url(scheme.get, call_596335.host, call_596335.base,
                         call_596335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596335, url, valid)

proc call*(call_596336: Call_WebAppsGetInstanceFunctionSlot_596326;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsGetInstanceFunctionSlot
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_596337 = newJObject()
  var query_596338 = newJObject()
  add(path_596337, "resourceGroupName", newJString(resourceGroupName))
  add(query_596338, "api-version", newJString(apiVersion))
  add(path_596337, "name", newJString(name))
  add(path_596337, "slot", newJString(slot))
  add(path_596337, "subscriptionId", newJString(subscriptionId))
  add(path_596337, "functionName", newJString(functionName))
  result = call_596336.call(path_596337, query_596338, nil, nil, nil)

var webAppsGetInstanceFunctionSlot* = Call_WebAppsGetInstanceFunctionSlot_596326(
    name: "webAppsGetInstanceFunctionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsGetInstanceFunctionSlot_596327, base: "",
    url: url_WebAppsGetInstanceFunctionSlot_596328, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceFunctionSlot_596354 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteInstanceFunctionSlot_596356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceFunctionSlot_596355(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596357 = path.getOrDefault("resourceGroupName")
  valid_596357 = validateParameter(valid_596357, JString, required = true,
                                 default = nil)
  if valid_596357 != nil:
    section.add "resourceGroupName", valid_596357
  var valid_596358 = path.getOrDefault("name")
  valid_596358 = validateParameter(valid_596358, JString, required = true,
                                 default = nil)
  if valid_596358 != nil:
    section.add "name", valid_596358
  var valid_596359 = path.getOrDefault("slot")
  valid_596359 = validateParameter(valid_596359, JString, required = true,
                                 default = nil)
  if valid_596359 != nil:
    section.add "slot", valid_596359
  var valid_596360 = path.getOrDefault("subscriptionId")
  valid_596360 = validateParameter(valid_596360, JString, required = true,
                                 default = nil)
  if valid_596360 != nil:
    section.add "subscriptionId", valid_596360
  var valid_596361 = path.getOrDefault("functionName")
  valid_596361 = validateParameter(valid_596361, JString, required = true,
                                 default = nil)
  if valid_596361 != nil:
    section.add "functionName", valid_596361
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596362 = query.getOrDefault("api-version")
  valid_596362 = validateParameter(valid_596362, JString, required = true,
                                 default = nil)
  if valid_596362 != nil:
    section.add "api-version", valid_596362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596363: Call_WebAppsDeleteInstanceFunctionSlot_596354;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_596363.validator(path, query, header, formData, body)
  let scheme = call_596363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596363.url(scheme.get, call_596363.host, call_596363.base,
                         call_596363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596363, url, valid)

proc call*(call_596364: Call_WebAppsDeleteInstanceFunctionSlot_596354;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteInstanceFunctionSlot
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_596365 = newJObject()
  var query_596366 = newJObject()
  add(path_596365, "resourceGroupName", newJString(resourceGroupName))
  add(query_596366, "api-version", newJString(apiVersion))
  add(path_596365, "name", newJString(name))
  add(path_596365, "slot", newJString(slot))
  add(path_596365, "subscriptionId", newJString(subscriptionId))
  add(path_596365, "functionName", newJString(functionName))
  result = call_596364.call(path_596365, query_596366, nil, nil, nil)

var webAppsDeleteInstanceFunctionSlot* = Call_WebAppsDeleteInstanceFunctionSlot_596354(
    name: "webAppsDeleteInstanceFunctionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsDeleteInstanceFunctionSlot_596355, base: "",
    url: url_WebAppsDeleteInstanceFunctionSlot_596356, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecretsSlot_596367 = ref object of OpenApiRestCall_593437
proc url_WebAppsListFunctionSecretsSlot_596369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecretsSlot_596368(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596370 = path.getOrDefault("resourceGroupName")
  valid_596370 = validateParameter(valid_596370, JString, required = true,
                                 default = nil)
  if valid_596370 != nil:
    section.add "resourceGroupName", valid_596370
  var valid_596371 = path.getOrDefault("name")
  valid_596371 = validateParameter(valid_596371, JString, required = true,
                                 default = nil)
  if valid_596371 != nil:
    section.add "name", valid_596371
  var valid_596372 = path.getOrDefault("slot")
  valid_596372 = validateParameter(valid_596372, JString, required = true,
                                 default = nil)
  if valid_596372 != nil:
    section.add "slot", valid_596372
  var valid_596373 = path.getOrDefault("subscriptionId")
  valid_596373 = validateParameter(valid_596373, JString, required = true,
                                 default = nil)
  if valid_596373 != nil:
    section.add "subscriptionId", valid_596373
  var valid_596374 = path.getOrDefault("functionName")
  valid_596374 = validateParameter(valid_596374, JString, required = true,
                                 default = nil)
  if valid_596374 != nil:
    section.add "functionName", valid_596374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596375 = query.getOrDefault("api-version")
  valid_596375 = validateParameter(valid_596375, JString, required = true,
                                 default = nil)
  if valid_596375 != nil:
    section.add "api-version", valid_596375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596376: Call_WebAppsListFunctionSecretsSlot_596367; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_596376.validator(path, query, header, formData, body)
  let scheme = call_596376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596376.url(scheme.get, call_596376.host, call_596376.base,
                         call_596376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596376, url, valid)

proc call*(call_596377: Call_WebAppsListFunctionSecretsSlot_596367;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecretsSlot
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_596378 = newJObject()
  var query_596379 = newJObject()
  add(path_596378, "resourceGroupName", newJString(resourceGroupName))
  add(query_596379, "api-version", newJString(apiVersion))
  add(path_596378, "name", newJString(name))
  add(path_596378, "slot", newJString(slot))
  add(path_596378, "subscriptionId", newJString(subscriptionId))
  add(path_596378, "functionName", newJString(functionName))
  result = call_596377.call(path_596378, query_596379, nil, nil, nil)

var webAppsListFunctionSecretsSlot* = Call_WebAppsListFunctionSecretsSlot_596367(
    name: "webAppsListFunctionSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecretsSlot_596368, base: "",
    url: url_WebAppsListFunctionSecretsSlot_596369, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindingsSlot_596380 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHostNameBindingsSlot_596382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindingsSlot_596381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596383 = path.getOrDefault("resourceGroupName")
  valid_596383 = validateParameter(valid_596383, JString, required = true,
                                 default = nil)
  if valid_596383 != nil:
    section.add "resourceGroupName", valid_596383
  var valid_596384 = path.getOrDefault("name")
  valid_596384 = validateParameter(valid_596384, JString, required = true,
                                 default = nil)
  if valid_596384 != nil:
    section.add "name", valid_596384
  var valid_596385 = path.getOrDefault("slot")
  valid_596385 = validateParameter(valid_596385, JString, required = true,
                                 default = nil)
  if valid_596385 != nil:
    section.add "slot", valid_596385
  var valid_596386 = path.getOrDefault("subscriptionId")
  valid_596386 = validateParameter(valid_596386, JString, required = true,
                                 default = nil)
  if valid_596386 != nil:
    section.add "subscriptionId", valid_596386
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596387 = query.getOrDefault("api-version")
  valid_596387 = validateParameter(valid_596387, JString, required = true,
                                 default = nil)
  if valid_596387 != nil:
    section.add "api-version", valid_596387
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596388: Call_WebAppsListHostNameBindingsSlot_596380;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_596388.validator(path, query, header, formData, body)
  let scheme = call_596388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596388.url(scheme.get, call_596388.host, call_596388.base,
                         call_596388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596388, url, valid)

proc call*(call_596389: Call_WebAppsListHostNameBindingsSlot_596380;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindingsSlot
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596390 = newJObject()
  var query_596391 = newJObject()
  add(path_596390, "resourceGroupName", newJString(resourceGroupName))
  add(query_596391, "api-version", newJString(apiVersion))
  add(path_596390, "name", newJString(name))
  add(path_596390, "slot", newJString(slot))
  add(path_596390, "subscriptionId", newJString(subscriptionId))
  result = call_596389.call(path_596390, query_596391, nil, nil, nil)

var webAppsListHostNameBindingsSlot* = Call_WebAppsListHostNameBindingsSlot_596380(
    name: "webAppsListHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindingsSlot_596381, base: "",
    url: url_WebAppsListHostNameBindingsSlot_596382, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBindingSlot_596405 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHostNameBindingSlot_596407(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBindingSlot_596406(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596408 = path.getOrDefault("resourceGroupName")
  valid_596408 = validateParameter(valid_596408, JString, required = true,
                                 default = nil)
  if valid_596408 != nil:
    section.add "resourceGroupName", valid_596408
  var valid_596409 = path.getOrDefault("name")
  valid_596409 = validateParameter(valid_596409, JString, required = true,
                                 default = nil)
  if valid_596409 != nil:
    section.add "name", valid_596409
  var valid_596410 = path.getOrDefault("slot")
  valid_596410 = validateParameter(valid_596410, JString, required = true,
                                 default = nil)
  if valid_596410 != nil:
    section.add "slot", valid_596410
  var valid_596411 = path.getOrDefault("subscriptionId")
  valid_596411 = validateParameter(valid_596411, JString, required = true,
                                 default = nil)
  if valid_596411 != nil:
    section.add "subscriptionId", valid_596411
  var valid_596412 = path.getOrDefault("hostName")
  valid_596412 = validateParameter(valid_596412, JString, required = true,
                                 default = nil)
  if valid_596412 != nil:
    section.add "hostName", valid_596412
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596413 = query.getOrDefault("api-version")
  valid_596413 = validateParameter(valid_596413, JString, required = true,
                                 default = nil)
  if valid_596413 != nil:
    section.add "api-version", valid_596413
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596415: Call_WebAppsCreateOrUpdateHostNameBindingSlot_596405;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_596415.validator(path, query, header, formData, body)
  let scheme = call_596415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596415.url(scheme.get, call_596415.host, call_596415.base,
                         call_596415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596415, url, valid)

proc call*(call_596416: Call_WebAppsCreateOrUpdateHostNameBindingSlot_596405;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBindingSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_596417 = newJObject()
  var query_596418 = newJObject()
  var body_596419 = newJObject()
  add(path_596417, "resourceGroupName", newJString(resourceGroupName))
  add(query_596418, "api-version", newJString(apiVersion))
  add(path_596417, "name", newJString(name))
  add(path_596417, "slot", newJString(slot))
  add(path_596417, "subscriptionId", newJString(subscriptionId))
  add(path_596417, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_596419 = hostNameBinding
  result = call_596416.call(path_596417, query_596418, nil, nil, body_596419)

var webAppsCreateOrUpdateHostNameBindingSlot* = Call_WebAppsCreateOrUpdateHostNameBindingSlot_596405(
    name: "webAppsCreateOrUpdateHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBindingSlot_596406, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBindingSlot_596407,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBindingSlot_596392 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHostNameBindingSlot_596394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBindingSlot_596393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596395 = path.getOrDefault("resourceGroupName")
  valid_596395 = validateParameter(valid_596395, JString, required = true,
                                 default = nil)
  if valid_596395 != nil:
    section.add "resourceGroupName", valid_596395
  var valid_596396 = path.getOrDefault("name")
  valid_596396 = validateParameter(valid_596396, JString, required = true,
                                 default = nil)
  if valid_596396 != nil:
    section.add "name", valid_596396
  var valid_596397 = path.getOrDefault("slot")
  valid_596397 = validateParameter(valid_596397, JString, required = true,
                                 default = nil)
  if valid_596397 != nil:
    section.add "slot", valid_596397
  var valid_596398 = path.getOrDefault("subscriptionId")
  valid_596398 = validateParameter(valid_596398, JString, required = true,
                                 default = nil)
  if valid_596398 != nil:
    section.add "subscriptionId", valid_596398
  var valid_596399 = path.getOrDefault("hostName")
  valid_596399 = validateParameter(valid_596399, JString, required = true,
                                 default = nil)
  if valid_596399 != nil:
    section.add "hostName", valid_596399
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596400 = query.getOrDefault("api-version")
  valid_596400 = validateParameter(valid_596400, JString, required = true,
                                 default = nil)
  if valid_596400 != nil:
    section.add "api-version", valid_596400
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596401: Call_WebAppsGetHostNameBindingSlot_596392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_596401.validator(path, query, header, formData, body)
  let scheme = call_596401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596401.url(scheme.get, call_596401.host, call_596401.base,
                         call_596401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596401, url, valid)

proc call*(call_596402: Call_WebAppsGetHostNameBindingSlot_596392;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBindingSlot
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_596403 = newJObject()
  var query_596404 = newJObject()
  add(path_596403, "resourceGroupName", newJString(resourceGroupName))
  add(query_596404, "api-version", newJString(apiVersion))
  add(path_596403, "name", newJString(name))
  add(path_596403, "slot", newJString(slot))
  add(path_596403, "subscriptionId", newJString(subscriptionId))
  add(path_596403, "hostName", newJString(hostName))
  result = call_596402.call(path_596403, query_596404, nil, nil, nil)

var webAppsGetHostNameBindingSlot* = Call_WebAppsGetHostNameBindingSlot_596392(
    name: "webAppsGetHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBindingSlot_596393, base: "",
    url: url_WebAppsGetHostNameBindingSlot_596394, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBindingSlot_596420 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHostNameBindingSlot_596422(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBindingSlot_596421(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596423 = path.getOrDefault("resourceGroupName")
  valid_596423 = validateParameter(valid_596423, JString, required = true,
                                 default = nil)
  if valid_596423 != nil:
    section.add "resourceGroupName", valid_596423
  var valid_596424 = path.getOrDefault("name")
  valid_596424 = validateParameter(valid_596424, JString, required = true,
                                 default = nil)
  if valid_596424 != nil:
    section.add "name", valid_596424
  var valid_596425 = path.getOrDefault("slot")
  valid_596425 = validateParameter(valid_596425, JString, required = true,
                                 default = nil)
  if valid_596425 != nil:
    section.add "slot", valid_596425
  var valid_596426 = path.getOrDefault("subscriptionId")
  valid_596426 = validateParameter(valid_596426, JString, required = true,
                                 default = nil)
  if valid_596426 != nil:
    section.add "subscriptionId", valid_596426
  var valid_596427 = path.getOrDefault("hostName")
  valid_596427 = validateParameter(valid_596427, JString, required = true,
                                 default = nil)
  if valid_596427 != nil:
    section.add "hostName", valid_596427
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596428 = query.getOrDefault("api-version")
  valid_596428 = validateParameter(valid_596428, JString, required = true,
                                 default = nil)
  if valid_596428 != nil:
    section.add "api-version", valid_596428
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596429: Call_WebAppsDeleteHostNameBindingSlot_596420;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_596429.validator(path, query, header, formData, body)
  let scheme = call_596429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596429.url(scheme.get, call_596429.host, call_596429.base,
                         call_596429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596429, url, valid)

proc call*(call_596430: Call_WebAppsDeleteHostNameBindingSlot_596420;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBindingSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_596431 = newJObject()
  var query_596432 = newJObject()
  add(path_596431, "resourceGroupName", newJString(resourceGroupName))
  add(query_596432, "api-version", newJString(apiVersion))
  add(path_596431, "name", newJString(name))
  add(path_596431, "slot", newJString(slot))
  add(path_596431, "subscriptionId", newJString(subscriptionId))
  add(path_596431, "hostName", newJString(hostName))
  result = call_596430.call(path_596431, query_596432, nil, nil, nil)

var webAppsDeleteHostNameBindingSlot* = Call_WebAppsDeleteHostNameBindingSlot_596420(
    name: "webAppsDeleteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBindingSlot_596421, base: "",
    url: url_WebAppsDeleteHostNameBindingSlot_596422, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnectionSlot_596447 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateHybridConnectionSlot_596449(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnectionSlot_596448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596450 = path.getOrDefault("namespaceName")
  valid_596450 = validateParameter(valid_596450, JString, required = true,
                                 default = nil)
  if valid_596450 != nil:
    section.add "namespaceName", valid_596450
  var valid_596451 = path.getOrDefault("resourceGroupName")
  valid_596451 = validateParameter(valid_596451, JString, required = true,
                                 default = nil)
  if valid_596451 != nil:
    section.add "resourceGroupName", valid_596451
  var valid_596452 = path.getOrDefault("name")
  valid_596452 = validateParameter(valid_596452, JString, required = true,
                                 default = nil)
  if valid_596452 != nil:
    section.add "name", valid_596452
  var valid_596453 = path.getOrDefault("slot")
  valid_596453 = validateParameter(valid_596453, JString, required = true,
                                 default = nil)
  if valid_596453 != nil:
    section.add "slot", valid_596453
  var valid_596454 = path.getOrDefault("subscriptionId")
  valid_596454 = validateParameter(valid_596454, JString, required = true,
                                 default = nil)
  if valid_596454 != nil:
    section.add "subscriptionId", valid_596454
  var valid_596455 = path.getOrDefault("relayName")
  valid_596455 = validateParameter(valid_596455, JString, required = true,
                                 default = nil)
  if valid_596455 != nil:
    section.add "relayName", valid_596455
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596456 = query.getOrDefault("api-version")
  valid_596456 = validateParameter(valid_596456, JString, required = true,
                                 default = nil)
  if valid_596456 != nil:
    section.add "api-version", valid_596456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596458: Call_WebAppsCreateOrUpdateHybridConnectionSlot_596447;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_596458.validator(path, query, header, formData, body)
  let scheme = call_596458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596458.url(scheme.get, call_596458.host, call_596458.base,
                         call_596458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596458, url, valid)

proc call*(call_596459: Call_WebAppsCreateOrUpdateHybridConnectionSlot_596447;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596460 = newJObject()
  var query_596461 = newJObject()
  var body_596462 = newJObject()
  add(path_596460, "namespaceName", newJString(namespaceName))
  add(path_596460, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596462 = connectionEnvelope
  add(path_596460, "name", newJString(name))
  add(query_596461, "api-version", newJString(apiVersion))
  add(path_596460, "slot", newJString(slot))
  add(path_596460, "subscriptionId", newJString(subscriptionId))
  add(path_596460, "relayName", newJString(relayName))
  result = call_596459.call(path_596460, query_596461, nil, nil, body_596462)

var webAppsCreateOrUpdateHybridConnectionSlot* = Call_WebAppsCreateOrUpdateHybridConnectionSlot_596447(
    name: "webAppsCreateOrUpdateHybridConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnectionSlot_596448,
    base: "", url: url_WebAppsCreateOrUpdateHybridConnectionSlot_596449,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnectionSlot_596433 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetHybridConnectionSlot_596435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnectionSlot_596434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596436 = path.getOrDefault("namespaceName")
  valid_596436 = validateParameter(valid_596436, JString, required = true,
                                 default = nil)
  if valid_596436 != nil:
    section.add "namespaceName", valid_596436
  var valid_596437 = path.getOrDefault("resourceGroupName")
  valid_596437 = validateParameter(valid_596437, JString, required = true,
                                 default = nil)
  if valid_596437 != nil:
    section.add "resourceGroupName", valid_596437
  var valid_596438 = path.getOrDefault("name")
  valid_596438 = validateParameter(valid_596438, JString, required = true,
                                 default = nil)
  if valid_596438 != nil:
    section.add "name", valid_596438
  var valid_596439 = path.getOrDefault("slot")
  valid_596439 = validateParameter(valid_596439, JString, required = true,
                                 default = nil)
  if valid_596439 != nil:
    section.add "slot", valid_596439
  var valid_596440 = path.getOrDefault("subscriptionId")
  valid_596440 = validateParameter(valid_596440, JString, required = true,
                                 default = nil)
  if valid_596440 != nil:
    section.add "subscriptionId", valid_596440
  var valid_596441 = path.getOrDefault("relayName")
  valid_596441 = validateParameter(valid_596441, JString, required = true,
                                 default = nil)
  if valid_596441 != nil:
    section.add "relayName", valid_596441
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596442 = query.getOrDefault("api-version")
  valid_596442 = validateParameter(valid_596442, JString, required = true,
                                 default = nil)
  if valid_596442 != nil:
    section.add "api-version", valid_596442
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596443: Call_WebAppsGetHybridConnectionSlot_596433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_596443.validator(path, query, header, formData, body)
  let scheme = call_596443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596443.url(scheme.get, call_596443.host, call_596443.base,
                         call_596443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596443, url, valid)

proc call*(call_596444: Call_WebAppsGetHybridConnectionSlot_596433;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnectionSlot
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596445 = newJObject()
  var query_596446 = newJObject()
  add(path_596445, "namespaceName", newJString(namespaceName))
  add(path_596445, "resourceGroupName", newJString(resourceGroupName))
  add(query_596446, "api-version", newJString(apiVersion))
  add(path_596445, "name", newJString(name))
  add(path_596445, "slot", newJString(slot))
  add(path_596445, "subscriptionId", newJString(subscriptionId))
  add(path_596445, "relayName", newJString(relayName))
  result = call_596444.call(path_596445, query_596446, nil, nil, nil)

var webAppsGetHybridConnectionSlot* = Call_WebAppsGetHybridConnectionSlot_596433(
    name: "webAppsGetHybridConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnectionSlot_596434, base: "",
    url: url_WebAppsGetHybridConnectionSlot_596435, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnectionSlot_596477 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateHybridConnectionSlot_596479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnectionSlot_596478(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596480 = path.getOrDefault("namespaceName")
  valid_596480 = validateParameter(valid_596480, JString, required = true,
                                 default = nil)
  if valid_596480 != nil:
    section.add "namespaceName", valid_596480
  var valid_596481 = path.getOrDefault("resourceGroupName")
  valid_596481 = validateParameter(valid_596481, JString, required = true,
                                 default = nil)
  if valid_596481 != nil:
    section.add "resourceGroupName", valid_596481
  var valid_596482 = path.getOrDefault("name")
  valid_596482 = validateParameter(valid_596482, JString, required = true,
                                 default = nil)
  if valid_596482 != nil:
    section.add "name", valid_596482
  var valid_596483 = path.getOrDefault("slot")
  valid_596483 = validateParameter(valid_596483, JString, required = true,
                                 default = nil)
  if valid_596483 != nil:
    section.add "slot", valid_596483
  var valid_596484 = path.getOrDefault("subscriptionId")
  valid_596484 = validateParameter(valid_596484, JString, required = true,
                                 default = nil)
  if valid_596484 != nil:
    section.add "subscriptionId", valid_596484
  var valid_596485 = path.getOrDefault("relayName")
  valid_596485 = validateParameter(valid_596485, JString, required = true,
                                 default = nil)
  if valid_596485 != nil:
    section.add "relayName", valid_596485
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596486 = query.getOrDefault("api-version")
  valid_596486 = validateParameter(valid_596486, JString, required = true,
                                 default = nil)
  if valid_596486 != nil:
    section.add "api-version", valid_596486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596488: Call_WebAppsUpdateHybridConnectionSlot_596477;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_596488.validator(path, query, header, formData, body)
  let scheme = call_596488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596488.url(scheme.get, call_596488.host, call_596488.base,
                         call_596488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596488, url, valid)

proc call*(call_596489: Call_WebAppsUpdateHybridConnectionSlot_596477;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596490 = newJObject()
  var query_596491 = newJObject()
  var body_596492 = newJObject()
  add(path_596490, "namespaceName", newJString(namespaceName))
  add(path_596490, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596492 = connectionEnvelope
  add(path_596490, "name", newJString(name))
  add(query_596491, "api-version", newJString(apiVersion))
  add(path_596490, "slot", newJString(slot))
  add(path_596490, "subscriptionId", newJString(subscriptionId))
  add(path_596490, "relayName", newJString(relayName))
  result = call_596489.call(path_596490, query_596491, nil, nil, body_596492)

var webAppsUpdateHybridConnectionSlot* = Call_WebAppsUpdateHybridConnectionSlot_596477(
    name: "webAppsUpdateHybridConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnectionSlot_596478, base: "",
    url: url_WebAppsUpdateHybridConnectionSlot_596479, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnectionSlot_596463 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteHybridConnectionSlot_596465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnectionSlot_596464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596466 = path.getOrDefault("namespaceName")
  valid_596466 = validateParameter(valid_596466, JString, required = true,
                                 default = nil)
  if valid_596466 != nil:
    section.add "namespaceName", valid_596466
  var valid_596467 = path.getOrDefault("resourceGroupName")
  valid_596467 = validateParameter(valid_596467, JString, required = true,
                                 default = nil)
  if valid_596467 != nil:
    section.add "resourceGroupName", valid_596467
  var valid_596468 = path.getOrDefault("name")
  valid_596468 = validateParameter(valid_596468, JString, required = true,
                                 default = nil)
  if valid_596468 != nil:
    section.add "name", valid_596468
  var valid_596469 = path.getOrDefault("slot")
  valid_596469 = validateParameter(valid_596469, JString, required = true,
                                 default = nil)
  if valid_596469 != nil:
    section.add "slot", valid_596469
  var valid_596470 = path.getOrDefault("subscriptionId")
  valid_596470 = validateParameter(valid_596470, JString, required = true,
                                 default = nil)
  if valid_596470 != nil:
    section.add "subscriptionId", valid_596470
  var valid_596471 = path.getOrDefault("relayName")
  valid_596471 = validateParameter(valid_596471, JString, required = true,
                                 default = nil)
  if valid_596471 != nil:
    section.add "relayName", valid_596471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596472 = query.getOrDefault("api-version")
  valid_596472 = validateParameter(valid_596472, JString, required = true,
                                 default = nil)
  if valid_596472 != nil:
    section.add "api-version", valid_596472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596473: Call_WebAppsDeleteHybridConnectionSlot_596463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_596473.validator(path, query, header, formData, body)
  let scheme = call_596473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596473.url(scheme.get, call_596473.host, call_596473.base,
                         call_596473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596473, url, valid)

proc call*(call_596474: Call_WebAppsDeleteHybridConnectionSlot_596463;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnectionSlot
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596475 = newJObject()
  var query_596476 = newJObject()
  add(path_596475, "namespaceName", newJString(namespaceName))
  add(path_596475, "resourceGroupName", newJString(resourceGroupName))
  add(query_596476, "api-version", newJString(apiVersion))
  add(path_596475, "name", newJString(name))
  add(path_596475, "slot", newJString(slot))
  add(path_596475, "subscriptionId", newJString(subscriptionId))
  add(path_596475, "relayName", newJString(relayName))
  result = call_596474.call(path_596475, query_596476, nil, nil, nil)

var webAppsDeleteHybridConnectionSlot* = Call_WebAppsDeleteHybridConnectionSlot_596463(
    name: "webAppsDeleteHybridConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnectionSlot_596464, base: "",
    url: url_WebAppsDeleteHybridConnectionSlot_596465, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeysSlot_596493 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnectionKeysSlot_596495(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeysSlot_596494(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_596496 = path.getOrDefault("namespaceName")
  valid_596496 = validateParameter(valid_596496, JString, required = true,
                                 default = nil)
  if valid_596496 != nil:
    section.add "namespaceName", valid_596496
  var valid_596497 = path.getOrDefault("resourceGroupName")
  valid_596497 = validateParameter(valid_596497, JString, required = true,
                                 default = nil)
  if valid_596497 != nil:
    section.add "resourceGroupName", valid_596497
  var valid_596498 = path.getOrDefault("name")
  valid_596498 = validateParameter(valid_596498, JString, required = true,
                                 default = nil)
  if valid_596498 != nil:
    section.add "name", valid_596498
  var valid_596499 = path.getOrDefault("slot")
  valid_596499 = validateParameter(valid_596499, JString, required = true,
                                 default = nil)
  if valid_596499 != nil:
    section.add "slot", valid_596499
  var valid_596500 = path.getOrDefault("subscriptionId")
  valid_596500 = validateParameter(valid_596500, JString, required = true,
                                 default = nil)
  if valid_596500 != nil:
    section.add "subscriptionId", valid_596500
  var valid_596501 = path.getOrDefault("relayName")
  valid_596501 = validateParameter(valid_596501, JString, required = true,
                                 default = nil)
  if valid_596501 != nil:
    section.add "relayName", valid_596501
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596502 = query.getOrDefault("api-version")
  valid_596502 = validateParameter(valid_596502, JString, required = true,
                                 default = nil)
  if valid_596502 != nil:
    section.add "api-version", valid_596502
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596503: Call_WebAppsListHybridConnectionKeysSlot_596493;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_596503.validator(path, query, header, formData, body)
  let scheme = call_596503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596503.url(scheme.get, call_596503.host, call_596503.base,
                         call_596503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596503, url, valid)

proc call*(call_596504: Call_WebAppsListHybridConnectionKeysSlot_596493;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeysSlot
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_596505 = newJObject()
  var query_596506 = newJObject()
  add(path_596505, "namespaceName", newJString(namespaceName))
  add(path_596505, "resourceGroupName", newJString(resourceGroupName))
  add(query_596506, "api-version", newJString(apiVersion))
  add(path_596505, "name", newJString(name))
  add(path_596505, "slot", newJString(slot))
  add(path_596505, "subscriptionId", newJString(subscriptionId))
  add(path_596505, "relayName", newJString(relayName))
  result = call_596504.call(path_596505, query_596506, nil, nil, nil)

var webAppsListHybridConnectionKeysSlot* = Call_WebAppsListHybridConnectionKeysSlot_596493(
    name: "webAppsListHybridConnectionKeysSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeysSlot_596494, base: "",
    url: url_WebAppsListHybridConnectionKeysSlot_596495, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionsSlot_596507 = ref object of OpenApiRestCall_593437
proc url_WebAppsListHybridConnectionsSlot_596509(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionsSlot_596508(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596510 = path.getOrDefault("resourceGroupName")
  valid_596510 = validateParameter(valid_596510, JString, required = true,
                                 default = nil)
  if valid_596510 != nil:
    section.add "resourceGroupName", valid_596510
  var valid_596511 = path.getOrDefault("name")
  valid_596511 = validateParameter(valid_596511, JString, required = true,
                                 default = nil)
  if valid_596511 != nil:
    section.add "name", valid_596511
  var valid_596512 = path.getOrDefault("slot")
  valid_596512 = validateParameter(valid_596512, JString, required = true,
                                 default = nil)
  if valid_596512 != nil:
    section.add "slot", valid_596512
  var valid_596513 = path.getOrDefault("subscriptionId")
  valid_596513 = validateParameter(valid_596513, JString, required = true,
                                 default = nil)
  if valid_596513 != nil:
    section.add "subscriptionId", valid_596513
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596514 = query.getOrDefault("api-version")
  valid_596514 = validateParameter(valid_596514, JString, required = true,
                                 default = nil)
  if valid_596514 != nil:
    section.add "api-version", valid_596514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596515: Call_WebAppsListHybridConnectionsSlot_596507;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_596515.validator(path, query, header, formData, body)
  let scheme = call_596515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596515.url(scheme.get, call_596515.host, call_596515.base,
                         call_596515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596515, url, valid)

proc call*(call_596516: Call_WebAppsListHybridConnectionsSlot_596507;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnectionsSlot
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596517 = newJObject()
  var query_596518 = newJObject()
  add(path_596517, "resourceGroupName", newJString(resourceGroupName))
  add(query_596518, "api-version", newJString(apiVersion))
  add(path_596517, "name", newJString(name))
  add(path_596517, "slot", newJString(slot))
  add(path_596517, "subscriptionId", newJString(subscriptionId))
  result = call_596516.call(path_596517, query_596518, nil, nil, nil)

var webAppsListHybridConnectionsSlot* = Call_WebAppsListHybridConnectionsSlot_596507(
    name: "webAppsListHybridConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnectionsSlot_596508, base: "",
    url: url_WebAppsListHybridConnectionsSlot_596509, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnectionsSlot_596519 = ref object of OpenApiRestCall_593437
proc url_WebAppsListRelayServiceConnectionsSlot_596521(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnectionsSlot_596520(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596522 = path.getOrDefault("resourceGroupName")
  valid_596522 = validateParameter(valid_596522, JString, required = true,
                                 default = nil)
  if valid_596522 != nil:
    section.add "resourceGroupName", valid_596522
  var valid_596523 = path.getOrDefault("name")
  valid_596523 = validateParameter(valid_596523, JString, required = true,
                                 default = nil)
  if valid_596523 != nil:
    section.add "name", valid_596523
  var valid_596524 = path.getOrDefault("slot")
  valid_596524 = validateParameter(valid_596524, JString, required = true,
                                 default = nil)
  if valid_596524 != nil:
    section.add "slot", valid_596524
  var valid_596525 = path.getOrDefault("subscriptionId")
  valid_596525 = validateParameter(valid_596525, JString, required = true,
                                 default = nil)
  if valid_596525 != nil:
    section.add "subscriptionId", valid_596525
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596526 = query.getOrDefault("api-version")
  valid_596526 = validateParameter(valid_596526, JString, required = true,
                                 default = nil)
  if valid_596526 != nil:
    section.add "api-version", valid_596526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596527: Call_WebAppsListRelayServiceConnectionsSlot_596519;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_596527.validator(path, query, header, formData, body)
  let scheme = call_596527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596527.url(scheme.get, call_596527.host, call_596527.base,
                         call_596527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596527, url, valid)

proc call*(call_596528: Call_WebAppsListRelayServiceConnectionsSlot_596519;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnectionsSlot
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596529 = newJObject()
  var query_596530 = newJObject()
  add(path_596529, "resourceGroupName", newJString(resourceGroupName))
  add(query_596530, "api-version", newJString(apiVersion))
  add(path_596529, "name", newJString(name))
  add(path_596529, "slot", newJString(slot))
  add(path_596529, "subscriptionId", newJString(subscriptionId))
  result = call_596528.call(path_596529, query_596530, nil, nil, nil)

var webAppsListRelayServiceConnectionsSlot* = Call_WebAppsListRelayServiceConnectionsSlot_596519(
    name: "webAppsListRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnectionsSlot_596520, base: "",
    url: url_WebAppsListRelayServiceConnectionsSlot_596521,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596544 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596546(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596545(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596547 = path.getOrDefault("resourceGroupName")
  valid_596547 = validateParameter(valid_596547, JString, required = true,
                                 default = nil)
  if valid_596547 != nil:
    section.add "resourceGroupName", valid_596547
  var valid_596548 = path.getOrDefault("name")
  valid_596548 = validateParameter(valid_596548, JString, required = true,
                                 default = nil)
  if valid_596548 != nil:
    section.add "name", valid_596548
  var valid_596549 = path.getOrDefault("slot")
  valid_596549 = validateParameter(valid_596549, JString, required = true,
                                 default = nil)
  if valid_596549 != nil:
    section.add "slot", valid_596549
  var valid_596550 = path.getOrDefault("subscriptionId")
  valid_596550 = validateParameter(valid_596550, JString, required = true,
                                 default = nil)
  if valid_596550 != nil:
    section.add "subscriptionId", valid_596550
  var valid_596551 = path.getOrDefault("entityName")
  valid_596551 = validateParameter(valid_596551, JString, required = true,
                                 default = nil)
  if valid_596551 != nil:
    section.add "entityName", valid_596551
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596552 = query.getOrDefault("api-version")
  valid_596552 = validateParameter(valid_596552, JString, required = true,
                                 default = nil)
  if valid_596552 != nil:
    section.add "api-version", valid_596552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596554: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596544;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_596554.validator(path, query, header, formData, body)
  let scheme = call_596554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596554.url(scheme.get, call_596554.host, call_596554.base,
                         call_596554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596554, url, valid)

proc call*(call_596555: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596544;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_596556 = newJObject()
  var query_596557 = newJObject()
  var body_596558 = newJObject()
  add(path_596556, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596558 = connectionEnvelope
  add(path_596556, "name", newJString(name))
  add(query_596557, "api-version", newJString(apiVersion))
  add(path_596556, "slot", newJString(slot))
  add(path_596556, "subscriptionId", newJString(subscriptionId))
  add(path_596556, "entityName", newJString(entityName))
  result = call_596555.call(path_596556, query_596557, nil, nil, body_596558)

var webAppsCreateOrUpdateRelayServiceConnectionSlot* = Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596544(
    name: "webAppsCreateOrUpdateRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596545,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_596546,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnectionSlot_596531 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetRelayServiceConnectionSlot_596533(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnectionSlot_596532(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596534 = path.getOrDefault("resourceGroupName")
  valid_596534 = validateParameter(valid_596534, JString, required = true,
                                 default = nil)
  if valid_596534 != nil:
    section.add "resourceGroupName", valid_596534
  var valid_596535 = path.getOrDefault("name")
  valid_596535 = validateParameter(valid_596535, JString, required = true,
                                 default = nil)
  if valid_596535 != nil:
    section.add "name", valid_596535
  var valid_596536 = path.getOrDefault("slot")
  valid_596536 = validateParameter(valid_596536, JString, required = true,
                                 default = nil)
  if valid_596536 != nil:
    section.add "slot", valid_596536
  var valid_596537 = path.getOrDefault("subscriptionId")
  valid_596537 = validateParameter(valid_596537, JString, required = true,
                                 default = nil)
  if valid_596537 != nil:
    section.add "subscriptionId", valid_596537
  var valid_596538 = path.getOrDefault("entityName")
  valid_596538 = validateParameter(valid_596538, JString, required = true,
                                 default = nil)
  if valid_596538 != nil:
    section.add "entityName", valid_596538
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596539 = query.getOrDefault("api-version")
  valid_596539 = validateParameter(valid_596539, JString, required = true,
                                 default = nil)
  if valid_596539 != nil:
    section.add "api-version", valid_596539
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596540: Call_WebAppsGetRelayServiceConnectionSlot_596531;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_596540.validator(path, query, header, formData, body)
  let scheme = call_596540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596540.url(scheme.get, call_596540.host, call_596540.base,
                         call_596540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596540, url, valid)

proc call*(call_596541: Call_WebAppsGetRelayServiceConnectionSlot_596531;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnectionSlot
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_596542 = newJObject()
  var query_596543 = newJObject()
  add(path_596542, "resourceGroupName", newJString(resourceGroupName))
  add(query_596543, "api-version", newJString(apiVersion))
  add(path_596542, "name", newJString(name))
  add(path_596542, "slot", newJString(slot))
  add(path_596542, "subscriptionId", newJString(subscriptionId))
  add(path_596542, "entityName", newJString(entityName))
  result = call_596541.call(path_596542, query_596543, nil, nil, nil)

var webAppsGetRelayServiceConnectionSlot* = Call_WebAppsGetRelayServiceConnectionSlot_596531(
    name: "webAppsGetRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnectionSlot_596532, base: "",
    url: url_WebAppsGetRelayServiceConnectionSlot_596533, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnectionSlot_596572 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateRelayServiceConnectionSlot_596574(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnectionSlot_596573(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596575 = path.getOrDefault("resourceGroupName")
  valid_596575 = validateParameter(valid_596575, JString, required = true,
                                 default = nil)
  if valid_596575 != nil:
    section.add "resourceGroupName", valid_596575
  var valid_596576 = path.getOrDefault("name")
  valid_596576 = validateParameter(valid_596576, JString, required = true,
                                 default = nil)
  if valid_596576 != nil:
    section.add "name", valid_596576
  var valid_596577 = path.getOrDefault("slot")
  valid_596577 = validateParameter(valid_596577, JString, required = true,
                                 default = nil)
  if valid_596577 != nil:
    section.add "slot", valid_596577
  var valid_596578 = path.getOrDefault("subscriptionId")
  valid_596578 = validateParameter(valid_596578, JString, required = true,
                                 default = nil)
  if valid_596578 != nil:
    section.add "subscriptionId", valid_596578
  var valid_596579 = path.getOrDefault("entityName")
  valid_596579 = validateParameter(valid_596579, JString, required = true,
                                 default = nil)
  if valid_596579 != nil:
    section.add "entityName", valid_596579
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596580 = query.getOrDefault("api-version")
  valid_596580 = validateParameter(valid_596580, JString, required = true,
                                 default = nil)
  if valid_596580 != nil:
    section.add "api-version", valid_596580
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596582: Call_WebAppsUpdateRelayServiceConnectionSlot_596572;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_596582.validator(path, query, header, formData, body)
  let scheme = call_596582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596582.url(scheme.get, call_596582.host, call_596582.base,
                         call_596582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596582, url, valid)

proc call*(call_596583: Call_WebAppsUpdateRelayServiceConnectionSlot_596572;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_596584 = newJObject()
  var query_596585 = newJObject()
  var body_596586 = newJObject()
  add(path_596584, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_596586 = connectionEnvelope
  add(path_596584, "name", newJString(name))
  add(query_596585, "api-version", newJString(apiVersion))
  add(path_596584, "slot", newJString(slot))
  add(path_596584, "subscriptionId", newJString(subscriptionId))
  add(path_596584, "entityName", newJString(entityName))
  result = call_596583.call(path_596584, query_596585, nil, nil, body_596586)

var webAppsUpdateRelayServiceConnectionSlot* = Call_WebAppsUpdateRelayServiceConnectionSlot_596572(
    name: "webAppsUpdateRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnectionSlot_596573, base: "",
    url: url_WebAppsUpdateRelayServiceConnectionSlot_596574,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnectionSlot_596559 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteRelayServiceConnectionSlot_596561(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnectionSlot_596560(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596562 = path.getOrDefault("resourceGroupName")
  valid_596562 = validateParameter(valid_596562, JString, required = true,
                                 default = nil)
  if valid_596562 != nil:
    section.add "resourceGroupName", valid_596562
  var valid_596563 = path.getOrDefault("name")
  valid_596563 = validateParameter(valid_596563, JString, required = true,
                                 default = nil)
  if valid_596563 != nil:
    section.add "name", valid_596563
  var valid_596564 = path.getOrDefault("slot")
  valid_596564 = validateParameter(valid_596564, JString, required = true,
                                 default = nil)
  if valid_596564 != nil:
    section.add "slot", valid_596564
  var valid_596565 = path.getOrDefault("subscriptionId")
  valid_596565 = validateParameter(valid_596565, JString, required = true,
                                 default = nil)
  if valid_596565 != nil:
    section.add "subscriptionId", valid_596565
  var valid_596566 = path.getOrDefault("entityName")
  valid_596566 = validateParameter(valid_596566, JString, required = true,
                                 default = nil)
  if valid_596566 != nil:
    section.add "entityName", valid_596566
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596567 = query.getOrDefault("api-version")
  valid_596567 = validateParameter(valid_596567, JString, required = true,
                                 default = nil)
  if valid_596567 != nil:
    section.add "api-version", valid_596567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596568: Call_WebAppsDeleteRelayServiceConnectionSlot_596559;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_596568.validator(path, query, header, formData, body)
  let scheme = call_596568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596568.url(scheme.get, call_596568.host, call_596568.base,
                         call_596568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596568, url, valid)

proc call*(call_596569: Call_WebAppsDeleteRelayServiceConnectionSlot_596559;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnectionSlot
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_596570 = newJObject()
  var query_596571 = newJObject()
  add(path_596570, "resourceGroupName", newJString(resourceGroupName))
  add(query_596571, "api-version", newJString(apiVersion))
  add(path_596570, "name", newJString(name))
  add(path_596570, "slot", newJString(slot))
  add(path_596570, "subscriptionId", newJString(subscriptionId))
  add(path_596570, "entityName", newJString(entityName))
  result = call_596569.call(path_596570, query_596571, nil, nil, nil)

var webAppsDeleteRelayServiceConnectionSlot* = Call_WebAppsDeleteRelayServiceConnectionSlot_596559(
    name: "webAppsDeleteRelayServiceConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnectionSlot_596560, base: "",
    url: url_WebAppsDeleteRelayServiceConnectionSlot_596561,
    schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiersSlot_596587 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceIdentifiersSlot_596589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiersSlot_596588(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596590 = path.getOrDefault("resourceGroupName")
  valid_596590 = validateParameter(valid_596590, JString, required = true,
                                 default = nil)
  if valid_596590 != nil:
    section.add "resourceGroupName", valid_596590
  var valid_596591 = path.getOrDefault("name")
  valid_596591 = validateParameter(valid_596591, JString, required = true,
                                 default = nil)
  if valid_596591 != nil:
    section.add "name", valid_596591
  var valid_596592 = path.getOrDefault("slot")
  valid_596592 = validateParameter(valid_596592, JString, required = true,
                                 default = nil)
  if valid_596592 != nil:
    section.add "slot", valid_596592
  var valid_596593 = path.getOrDefault("subscriptionId")
  valid_596593 = validateParameter(valid_596593, JString, required = true,
                                 default = nil)
  if valid_596593 != nil:
    section.add "subscriptionId", valid_596593
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596594 = query.getOrDefault("api-version")
  valid_596594 = validateParameter(valid_596594, JString, required = true,
                                 default = nil)
  if valid_596594 != nil:
    section.add "api-version", valid_596594
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596595: Call_WebAppsListInstanceIdentifiersSlot_596587;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_596595.validator(path, query, header, formData, body)
  let scheme = call_596595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596595.url(scheme.get, call_596595.host, call_596595.base,
                         call_596595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596595, url, valid)

proc call*(call_596596: Call_WebAppsListInstanceIdentifiersSlot_596587;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiersSlot
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596597 = newJObject()
  var query_596598 = newJObject()
  add(path_596597, "resourceGroupName", newJString(resourceGroupName))
  add(query_596598, "api-version", newJString(apiVersion))
  add(path_596597, "name", newJString(name))
  add(path_596597, "slot", newJString(slot))
  add(path_596597, "subscriptionId", newJString(subscriptionId))
  result = call_596596.call(path_596597, query_596598, nil, nil, nil)

var webAppsListInstanceIdentifiersSlot* = Call_WebAppsListInstanceIdentifiersSlot_596587(
    name: "webAppsListInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_WebAppsListInstanceIdentifiersSlot_596588, base: "",
    url: url_WebAppsListInstanceIdentifiersSlot_596589, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperationSlot_596612 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateInstanceMSDeployOperationSlot_596614(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperationSlot_596613(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596615 = path.getOrDefault("resourceGroupName")
  valid_596615 = validateParameter(valid_596615, JString, required = true,
                                 default = nil)
  if valid_596615 != nil:
    section.add "resourceGroupName", valid_596615
  var valid_596616 = path.getOrDefault("name")
  valid_596616 = validateParameter(valid_596616, JString, required = true,
                                 default = nil)
  if valid_596616 != nil:
    section.add "name", valid_596616
  var valid_596617 = path.getOrDefault("slot")
  valid_596617 = validateParameter(valid_596617, JString, required = true,
                                 default = nil)
  if valid_596617 != nil:
    section.add "slot", valid_596617
  var valid_596618 = path.getOrDefault("subscriptionId")
  valid_596618 = validateParameter(valid_596618, JString, required = true,
                                 default = nil)
  if valid_596618 != nil:
    section.add "subscriptionId", valid_596618
  var valid_596619 = path.getOrDefault("instanceId")
  valid_596619 = validateParameter(valid_596619, JString, required = true,
                                 default = nil)
  if valid_596619 != nil:
    section.add "instanceId", valid_596619
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596620 = query.getOrDefault("api-version")
  valid_596620 = validateParameter(valid_596620, JString, required = true,
                                 default = nil)
  if valid_596620 != nil:
    section.add "api-version", valid_596620
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596622: Call_WebAppsCreateInstanceMSDeployOperationSlot_596612;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_596622.validator(path, query, header, formData, body)
  let scheme = call_596622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596622.url(scheme.get, call_596622.host, call_596622.base,
                         call_596622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596622, url, valid)

proc call*(call_596623: Call_WebAppsCreateInstanceMSDeployOperationSlot_596612;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_596624 = newJObject()
  var query_596625 = newJObject()
  var body_596626 = newJObject()
  add(path_596624, "resourceGroupName", newJString(resourceGroupName))
  add(query_596625, "api-version", newJString(apiVersion))
  add(path_596624, "name", newJString(name))
  add(path_596624, "slot", newJString(slot))
  add(path_596624, "subscriptionId", newJString(subscriptionId))
  add(path_596624, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_596626 = MSDeploy
  result = call_596623.call(path_596624, query_596625, nil, nil, body_596626)

var webAppsCreateInstanceMSDeployOperationSlot* = Call_WebAppsCreateInstanceMSDeployOperationSlot_596612(
    name: "webAppsCreateInstanceMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperationSlot_596613,
    base: "", url: url_WebAppsCreateInstanceMSDeployOperationSlot_596614,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatusSlot_596599 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMsDeployStatusSlot_596601(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatusSlot_596600(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596602 = path.getOrDefault("resourceGroupName")
  valid_596602 = validateParameter(valid_596602, JString, required = true,
                                 default = nil)
  if valid_596602 != nil:
    section.add "resourceGroupName", valid_596602
  var valid_596603 = path.getOrDefault("name")
  valid_596603 = validateParameter(valid_596603, JString, required = true,
                                 default = nil)
  if valid_596603 != nil:
    section.add "name", valid_596603
  var valid_596604 = path.getOrDefault("slot")
  valid_596604 = validateParameter(valid_596604, JString, required = true,
                                 default = nil)
  if valid_596604 != nil:
    section.add "slot", valid_596604
  var valid_596605 = path.getOrDefault("subscriptionId")
  valid_596605 = validateParameter(valid_596605, JString, required = true,
                                 default = nil)
  if valid_596605 != nil:
    section.add "subscriptionId", valid_596605
  var valid_596606 = path.getOrDefault("instanceId")
  valid_596606 = validateParameter(valid_596606, JString, required = true,
                                 default = nil)
  if valid_596606 != nil:
    section.add "instanceId", valid_596606
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596607 = query.getOrDefault("api-version")
  valid_596607 = validateParameter(valid_596607, JString, required = true,
                                 default = nil)
  if valid_596607 != nil:
    section.add "api-version", valid_596607
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596608: Call_WebAppsGetInstanceMsDeployStatusSlot_596599;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_596608.validator(path, query, header, formData, body)
  let scheme = call_596608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596608.url(scheme.get, call_596608.host, call_596608.base,
                         call_596608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596608, url, valid)

proc call*(call_596609: Call_WebAppsGetInstanceMsDeployStatusSlot_596599;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_596610 = newJObject()
  var query_596611 = newJObject()
  add(path_596610, "resourceGroupName", newJString(resourceGroupName))
  add(query_596611, "api-version", newJString(apiVersion))
  add(path_596610, "name", newJString(name))
  add(path_596610, "slot", newJString(slot))
  add(path_596610, "subscriptionId", newJString(subscriptionId))
  add(path_596610, "instanceId", newJString(instanceId))
  result = call_596609.call(path_596610, query_596611, nil, nil, nil)

var webAppsGetInstanceMsDeployStatusSlot* = Call_WebAppsGetInstanceMsDeployStatusSlot_596599(
    name: "webAppsGetInstanceMsDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatusSlot_596600, base: "",
    url: url_WebAppsGetInstanceMsDeployStatusSlot_596601, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLogSlot_596627 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceMSDeployLogSlot_596629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLogSlot_596628(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596630 = path.getOrDefault("resourceGroupName")
  valid_596630 = validateParameter(valid_596630, JString, required = true,
                                 default = nil)
  if valid_596630 != nil:
    section.add "resourceGroupName", valid_596630
  var valid_596631 = path.getOrDefault("name")
  valid_596631 = validateParameter(valid_596631, JString, required = true,
                                 default = nil)
  if valid_596631 != nil:
    section.add "name", valid_596631
  var valid_596632 = path.getOrDefault("slot")
  valid_596632 = validateParameter(valid_596632, JString, required = true,
                                 default = nil)
  if valid_596632 != nil:
    section.add "slot", valid_596632
  var valid_596633 = path.getOrDefault("subscriptionId")
  valid_596633 = validateParameter(valid_596633, JString, required = true,
                                 default = nil)
  if valid_596633 != nil:
    section.add "subscriptionId", valid_596633
  var valid_596634 = path.getOrDefault("instanceId")
  valid_596634 = validateParameter(valid_596634, JString, required = true,
                                 default = nil)
  if valid_596634 != nil:
    section.add "instanceId", valid_596634
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596635 = query.getOrDefault("api-version")
  valid_596635 = validateParameter(valid_596635, JString, required = true,
                                 default = nil)
  if valid_596635 != nil:
    section.add "api-version", valid_596635
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596636: Call_WebAppsGetInstanceMSDeployLogSlot_596627;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_596636.validator(path, query, header, formData, body)
  let scheme = call_596636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596636.url(scheme.get, call_596636.host, call_596636.base,
                         call_596636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596636, url, valid)

proc call*(call_596637: Call_WebAppsGetInstanceMSDeployLogSlot_596627;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_596638 = newJObject()
  var query_596639 = newJObject()
  add(path_596638, "resourceGroupName", newJString(resourceGroupName))
  add(query_596639, "api-version", newJString(apiVersion))
  add(path_596638, "name", newJString(name))
  add(path_596638, "slot", newJString(slot))
  add(path_596638, "subscriptionId", newJString(subscriptionId))
  add(path_596638, "instanceId", newJString(instanceId))
  result = call_596637.call(path_596638, query_596639, nil, nil, nil)

var webAppsGetInstanceMSDeployLogSlot* = Call_WebAppsGetInstanceMSDeployLogSlot_596627(
    name: "webAppsGetInstanceMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLogSlot_596628, base: "",
    url: url_WebAppsGetInstanceMSDeployLogSlot_596629, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessesSlot_596640 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessesSlot_596642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessesSlot_596641(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596643 = path.getOrDefault("resourceGroupName")
  valid_596643 = validateParameter(valid_596643, JString, required = true,
                                 default = nil)
  if valid_596643 != nil:
    section.add "resourceGroupName", valid_596643
  var valid_596644 = path.getOrDefault("name")
  valid_596644 = validateParameter(valid_596644, JString, required = true,
                                 default = nil)
  if valid_596644 != nil:
    section.add "name", valid_596644
  var valid_596645 = path.getOrDefault("slot")
  valid_596645 = validateParameter(valid_596645, JString, required = true,
                                 default = nil)
  if valid_596645 != nil:
    section.add "slot", valid_596645
  var valid_596646 = path.getOrDefault("subscriptionId")
  valid_596646 = validateParameter(valid_596646, JString, required = true,
                                 default = nil)
  if valid_596646 != nil:
    section.add "subscriptionId", valid_596646
  var valid_596647 = path.getOrDefault("instanceId")
  valid_596647 = validateParameter(valid_596647, JString, required = true,
                                 default = nil)
  if valid_596647 != nil:
    section.add "instanceId", valid_596647
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596648 = query.getOrDefault("api-version")
  valid_596648 = validateParameter(valid_596648, JString, required = true,
                                 default = nil)
  if valid_596648 != nil:
    section.add "api-version", valid_596648
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596649: Call_WebAppsListInstanceProcessesSlot_596640;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596649.validator(path, query, header, formData, body)
  let scheme = call_596649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596649.url(scheme.get, call_596649.host, call_596649.base,
                         call_596649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596649, url, valid)

proc call*(call_596650: Call_WebAppsListInstanceProcessesSlot_596640;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596651 = newJObject()
  var query_596652 = newJObject()
  add(path_596651, "resourceGroupName", newJString(resourceGroupName))
  add(query_596652, "api-version", newJString(apiVersion))
  add(path_596651, "name", newJString(name))
  add(path_596651, "slot", newJString(slot))
  add(path_596651, "subscriptionId", newJString(subscriptionId))
  add(path_596651, "instanceId", newJString(instanceId))
  result = call_596650.call(path_596651, query_596652, nil, nil, nil)

var webAppsListInstanceProcessesSlot* = Call_WebAppsListInstanceProcessesSlot_596640(
    name: "webAppsListInstanceProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcessesSlot_596641, base: "",
    url: url_WebAppsListInstanceProcessesSlot_596642, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessSlot_596653 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessSlot_596655(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessSlot_596654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596656 = path.getOrDefault("resourceGroupName")
  valid_596656 = validateParameter(valid_596656, JString, required = true,
                                 default = nil)
  if valid_596656 != nil:
    section.add "resourceGroupName", valid_596656
  var valid_596657 = path.getOrDefault("name")
  valid_596657 = validateParameter(valid_596657, JString, required = true,
                                 default = nil)
  if valid_596657 != nil:
    section.add "name", valid_596657
  var valid_596658 = path.getOrDefault("processId")
  valid_596658 = validateParameter(valid_596658, JString, required = true,
                                 default = nil)
  if valid_596658 != nil:
    section.add "processId", valid_596658
  var valid_596659 = path.getOrDefault("slot")
  valid_596659 = validateParameter(valid_596659, JString, required = true,
                                 default = nil)
  if valid_596659 != nil:
    section.add "slot", valid_596659
  var valid_596660 = path.getOrDefault("subscriptionId")
  valid_596660 = validateParameter(valid_596660, JString, required = true,
                                 default = nil)
  if valid_596660 != nil:
    section.add "subscriptionId", valid_596660
  var valid_596661 = path.getOrDefault("instanceId")
  valid_596661 = validateParameter(valid_596661, JString, required = true,
                                 default = nil)
  if valid_596661 != nil:
    section.add "instanceId", valid_596661
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596662 = query.getOrDefault("api-version")
  valid_596662 = validateParameter(valid_596662, JString, required = true,
                                 default = nil)
  if valid_596662 != nil:
    section.add "api-version", valid_596662
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596663: Call_WebAppsGetInstanceProcessSlot_596653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596663.validator(path, query, header, formData, body)
  let scheme = call_596663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596663.url(scheme.get, call_596663.host, call_596663.base,
                         call_596663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596663, url, valid)

proc call*(call_596664: Call_WebAppsGetInstanceProcessSlot_596653;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596665 = newJObject()
  var query_596666 = newJObject()
  add(path_596665, "resourceGroupName", newJString(resourceGroupName))
  add(query_596666, "api-version", newJString(apiVersion))
  add(path_596665, "name", newJString(name))
  add(path_596665, "processId", newJString(processId))
  add(path_596665, "slot", newJString(slot))
  add(path_596665, "subscriptionId", newJString(subscriptionId))
  add(path_596665, "instanceId", newJString(instanceId))
  result = call_596664.call(path_596665, query_596666, nil, nil, nil)

var webAppsGetInstanceProcessSlot* = Call_WebAppsGetInstanceProcessSlot_596653(
    name: "webAppsGetInstanceProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcessSlot_596654, base: "",
    url: url_WebAppsGetInstanceProcessSlot_596655, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcessSlot_596667 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteInstanceProcessSlot_596669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcessSlot_596668(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596670 = path.getOrDefault("resourceGroupName")
  valid_596670 = validateParameter(valid_596670, JString, required = true,
                                 default = nil)
  if valid_596670 != nil:
    section.add "resourceGroupName", valid_596670
  var valid_596671 = path.getOrDefault("name")
  valid_596671 = validateParameter(valid_596671, JString, required = true,
                                 default = nil)
  if valid_596671 != nil:
    section.add "name", valid_596671
  var valid_596672 = path.getOrDefault("processId")
  valid_596672 = validateParameter(valid_596672, JString, required = true,
                                 default = nil)
  if valid_596672 != nil:
    section.add "processId", valid_596672
  var valid_596673 = path.getOrDefault("slot")
  valid_596673 = validateParameter(valid_596673, JString, required = true,
                                 default = nil)
  if valid_596673 != nil:
    section.add "slot", valid_596673
  var valid_596674 = path.getOrDefault("subscriptionId")
  valid_596674 = validateParameter(valid_596674, JString, required = true,
                                 default = nil)
  if valid_596674 != nil:
    section.add "subscriptionId", valid_596674
  var valid_596675 = path.getOrDefault("instanceId")
  valid_596675 = validateParameter(valid_596675, JString, required = true,
                                 default = nil)
  if valid_596675 != nil:
    section.add "instanceId", valid_596675
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596676 = query.getOrDefault("api-version")
  valid_596676 = validateParameter(valid_596676, JString, required = true,
                                 default = nil)
  if valid_596676 != nil:
    section.add "api-version", valid_596676
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596677: Call_WebAppsDeleteInstanceProcessSlot_596667;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_596677.validator(path, query, header, formData, body)
  let scheme = call_596677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596677.url(scheme.get, call_596677.host, call_596677.base,
                         call_596677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596677, url, valid)

proc call*(call_596678: Call_WebAppsDeleteInstanceProcessSlot_596667;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596679 = newJObject()
  var query_596680 = newJObject()
  add(path_596679, "resourceGroupName", newJString(resourceGroupName))
  add(query_596680, "api-version", newJString(apiVersion))
  add(path_596679, "name", newJString(name))
  add(path_596679, "processId", newJString(processId))
  add(path_596679, "slot", newJString(slot))
  add(path_596679, "subscriptionId", newJString(subscriptionId))
  add(path_596679, "instanceId", newJString(instanceId))
  result = call_596678.call(path_596679, query_596680, nil, nil, nil)

var webAppsDeleteInstanceProcessSlot* = Call_WebAppsDeleteInstanceProcessSlot_596667(
    name: "webAppsDeleteInstanceProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcessSlot_596668, base: "",
    url: url_WebAppsDeleteInstanceProcessSlot_596669, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDumpSlot_596681 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessDumpSlot_596683(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDumpSlot_596682(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596684 = path.getOrDefault("resourceGroupName")
  valid_596684 = validateParameter(valid_596684, JString, required = true,
                                 default = nil)
  if valid_596684 != nil:
    section.add "resourceGroupName", valid_596684
  var valid_596685 = path.getOrDefault("name")
  valid_596685 = validateParameter(valid_596685, JString, required = true,
                                 default = nil)
  if valid_596685 != nil:
    section.add "name", valid_596685
  var valid_596686 = path.getOrDefault("processId")
  valid_596686 = validateParameter(valid_596686, JString, required = true,
                                 default = nil)
  if valid_596686 != nil:
    section.add "processId", valid_596686
  var valid_596687 = path.getOrDefault("slot")
  valid_596687 = validateParameter(valid_596687, JString, required = true,
                                 default = nil)
  if valid_596687 != nil:
    section.add "slot", valid_596687
  var valid_596688 = path.getOrDefault("subscriptionId")
  valid_596688 = validateParameter(valid_596688, JString, required = true,
                                 default = nil)
  if valid_596688 != nil:
    section.add "subscriptionId", valid_596688
  var valid_596689 = path.getOrDefault("instanceId")
  valid_596689 = validateParameter(valid_596689, JString, required = true,
                                 default = nil)
  if valid_596689 != nil:
    section.add "instanceId", valid_596689
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596690 = query.getOrDefault("api-version")
  valid_596690 = validateParameter(valid_596690, JString, required = true,
                                 default = nil)
  if valid_596690 != nil:
    section.add "api-version", valid_596690
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596691: Call_WebAppsGetInstanceProcessDumpSlot_596681;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596691.validator(path, query, header, formData, body)
  let scheme = call_596691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596691.url(scheme.get, call_596691.host, call_596691.base,
                         call_596691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596691, url, valid)

proc call*(call_596692: Call_WebAppsGetInstanceProcessDumpSlot_596681;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596693 = newJObject()
  var query_596694 = newJObject()
  add(path_596693, "resourceGroupName", newJString(resourceGroupName))
  add(query_596694, "api-version", newJString(apiVersion))
  add(path_596693, "name", newJString(name))
  add(path_596693, "processId", newJString(processId))
  add(path_596693, "slot", newJString(slot))
  add(path_596693, "subscriptionId", newJString(subscriptionId))
  add(path_596693, "instanceId", newJString(instanceId))
  result = call_596692.call(path_596693, query_596694, nil, nil, nil)

var webAppsGetInstanceProcessDumpSlot* = Call_WebAppsGetInstanceProcessDumpSlot_596681(
    name: "webAppsGetInstanceProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDumpSlot_596682, base: "",
    url: url_WebAppsGetInstanceProcessDumpSlot_596683, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModulesSlot_596695 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessModulesSlot_596697(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModulesSlot_596696(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596698 = path.getOrDefault("resourceGroupName")
  valid_596698 = validateParameter(valid_596698, JString, required = true,
                                 default = nil)
  if valid_596698 != nil:
    section.add "resourceGroupName", valid_596698
  var valid_596699 = path.getOrDefault("name")
  valid_596699 = validateParameter(valid_596699, JString, required = true,
                                 default = nil)
  if valid_596699 != nil:
    section.add "name", valid_596699
  var valid_596700 = path.getOrDefault("processId")
  valid_596700 = validateParameter(valid_596700, JString, required = true,
                                 default = nil)
  if valid_596700 != nil:
    section.add "processId", valid_596700
  var valid_596701 = path.getOrDefault("slot")
  valid_596701 = validateParameter(valid_596701, JString, required = true,
                                 default = nil)
  if valid_596701 != nil:
    section.add "slot", valid_596701
  var valid_596702 = path.getOrDefault("subscriptionId")
  valid_596702 = validateParameter(valid_596702, JString, required = true,
                                 default = nil)
  if valid_596702 != nil:
    section.add "subscriptionId", valid_596702
  var valid_596703 = path.getOrDefault("instanceId")
  valid_596703 = validateParameter(valid_596703, JString, required = true,
                                 default = nil)
  if valid_596703 != nil:
    section.add "instanceId", valid_596703
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596704 = query.getOrDefault("api-version")
  valid_596704 = validateParameter(valid_596704, JString, required = true,
                                 default = nil)
  if valid_596704 != nil:
    section.add "api-version", valid_596704
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596705: Call_WebAppsListInstanceProcessModulesSlot_596695;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596705.validator(path, query, header, formData, body)
  let scheme = call_596705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596705.url(scheme.get, call_596705.host, call_596705.base,
                         call_596705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596705, url, valid)

proc call*(call_596706: Call_WebAppsListInstanceProcessModulesSlot_596695;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596707 = newJObject()
  var query_596708 = newJObject()
  add(path_596707, "resourceGroupName", newJString(resourceGroupName))
  add(query_596708, "api-version", newJString(apiVersion))
  add(path_596707, "name", newJString(name))
  add(path_596707, "processId", newJString(processId))
  add(path_596707, "slot", newJString(slot))
  add(path_596707, "subscriptionId", newJString(subscriptionId))
  add(path_596707, "instanceId", newJString(instanceId))
  result = call_596706.call(path_596707, query_596708, nil, nil, nil)

var webAppsListInstanceProcessModulesSlot* = Call_WebAppsListInstanceProcessModulesSlot_596695(
    name: "webAppsListInstanceProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModulesSlot_596696, base: "",
    url: url_WebAppsListInstanceProcessModulesSlot_596697, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModuleSlot_596709 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessModuleSlot_596711(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModuleSlot_596710(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596712 = path.getOrDefault("resourceGroupName")
  valid_596712 = validateParameter(valid_596712, JString, required = true,
                                 default = nil)
  if valid_596712 != nil:
    section.add "resourceGroupName", valid_596712
  var valid_596713 = path.getOrDefault("name")
  valid_596713 = validateParameter(valid_596713, JString, required = true,
                                 default = nil)
  if valid_596713 != nil:
    section.add "name", valid_596713
  var valid_596714 = path.getOrDefault("processId")
  valid_596714 = validateParameter(valid_596714, JString, required = true,
                                 default = nil)
  if valid_596714 != nil:
    section.add "processId", valid_596714
  var valid_596715 = path.getOrDefault("slot")
  valid_596715 = validateParameter(valid_596715, JString, required = true,
                                 default = nil)
  if valid_596715 != nil:
    section.add "slot", valid_596715
  var valid_596716 = path.getOrDefault("subscriptionId")
  valid_596716 = validateParameter(valid_596716, JString, required = true,
                                 default = nil)
  if valid_596716 != nil:
    section.add "subscriptionId", valid_596716
  var valid_596717 = path.getOrDefault("baseAddress")
  valid_596717 = validateParameter(valid_596717, JString, required = true,
                                 default = nil)
  if valid_596717 != nil:
    section.add "baseAddress", valid_596717
  var valid_596718 = path.getOrDefault("instanceId")
  valid_596718 = validateParameter(valid_596718, JString, required = true,
                                 default = nil)
  if valid_596718 != nil:
    section.add "instanceId", valid_596718
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596719 = query.getOrDefault("api-version")
  valid_596719 = validateParameter(valid_596719, JString, required = true,
                                 default = nil)
  if valid_596719 != nil:
    section.add "api-version", valid_596719
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596720: Call_WebAppsGetInstanceProcessModuleSlot_596709;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596720.validator(path, query, header, formData, body)
  let scheme = call_596720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596720.url(scheme.get, call_596720.host, call_596720.base,
                         call_596720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596720, url, valid)

proc call*(call_596721: Call_WebAppsGetInstanceProcessModuleSlot_596709;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string;
          baseAddress: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596722 = newJObject()
  var query_596723 = newJObject()
  add(path_596722, "resourceGroupName", newJString(resourceGroupName))
  add(query_596723, "api-version", newJString(apiVersion))
  add(path_596722, "name", newJString(name))
  add(path_596722, "processId", newJString(processId))
  add(path_596722, "slot", newJString(slot))
  add(path_596722, "subscriptionId", newJString(subscriptionId))
  add(path_596722, "baseAddress", newJString(baseAddress))
  add(path_596722, "instanceId", newJString(instanceId))
  result = call_596721.call(path_596722, query_596723, nil, nil, nil)

var webAppsGetInstanceProcessModuleSlot* = Call_WebAppsGetInstanceProcessModuleSlot_596709(
    name: "webAppsGetInstanceProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModuleSlot_596710, base: "",
    url: url_WebAppsGetInstanceProcessModuleSlot_596711, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreadsSlot_596724 = ref object of OpenApiRestCall_593437
proc url_WebAppsListInstanceProcessThreadsSlot_596726(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreadsSlot_596725(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596727 = path.getOrDefault("resourceGroupName")
  valid_596727 = validateParameter(valid_596727, JString, required = true,
                                 default = nil)
  if valid_596727 != nil:
    section.add "resourceGroupName", valid_596727
  var valid_596728 = path.getOrDefault("name")
  valid_596728 = validateParameter(valid_596728, JString, required = true,
                                 default = nil)
  if valid_596728 != nil:
    section.add "name", valid_596728
  var valid_596729 = path.getOrDefault("processId")
  valid_596729 = validateParameter(valid_596729, JString, required = true,
                                 default = nil)
  if valid_596729 != nil:
    section.add "processId", valid_596729
  var valid_596730 = path.getOrDefault("slot")
  valid_596730 = validateParameter(valid_596730, JString, required = true,
                                 default = nil)
  if valid_596730 != nil:
    section.add "slot", valid_596730
  var valid_596731 = path.getOrDefault("subscriptionId")
  valid_596731 = validateParameter(valid_596731, JString, required = true,
                                 default = nil)
  if valid_596731 != nil:
    section.add "subscriptionId", valid_596731
  var valid_596732 = path.getOrDefault("instanceId")
  valid_596732 = validateParameter(valid_596732, JString, required = true,
                                 default = nil)
  if valid_596732 != nil:
    section.add "instanceId", valid_596732
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596733 = query.getOrDefault("api-version")
  valid_596733 = validateParameter(valid_596733, JString, required = true,
                                 default = nil)
  if valid_596733 != nil:
    section.add "api-version", valid_596733
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596734: Call_WebAppsListInstanceProcessThreadsSlot_596724;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596734.validator(path, query, header, formData, body)
  let scheme = call_596734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596734.url(scheme.get, call_596734.host, call_596734.base,
                         call_596734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596734, url, valid)

proc call*(call_596735: Call_WebAppsListInstanceProcessThreadsSlot_596724;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_596736 = newJObject()
  var query_596737 = newJObject()
  add(path_596736, "resourceGroupName", newJString(resourceGroupName))
  add(query_596737, "api-version", newJString(apiVersion))
  add(path_596736, "name", newJString(name))
  add(path_596736, "processId", newJString(processId))
  add(path_596736, "slot", newJString(slot))
  add(path_596736, "subscriptionId", newJString(subscriptionId))
  add(path_596736, "instanceId", newJString(instanceId))
  result = call_596735.call(path_596736, query_596737, nil, nil, nil)

var webAppsListInstanceProcessThreadsSlot* = Call_WebAppsListInstanceProcessThreadsSlot_596724(
    name: "webAppsListInstanceProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreadsSlot_596725, base: "",
    url: url_WebAppsListInstanceProcessThreadsSlot_596726, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThreadSlot_596738 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetInstanceProcessThreadSlot_596740(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThreadSlot_596739(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596741 = path.getOrDefault("resourceGroupName")
  valid_596741 = validateParameter(valid_596741, JString, required = true,
                                 default = nil)
  if valid_596741 != nil:
    section.add "resourceGroupName", valid_596741
  var valid_596742 = path.getOrDefault("name")
  valid_596742 = validateParameter(valid_596742, JString, required = true,
                                 default = nil)
  if valid_596742 != nil:
    section.add "name", valid_596742
  var valid_596743 = path.getOrDefault("processId")
  valid_596743 = validateParameter(valid_596743, JString, required = true,
                                 default = nil)
  if valid_596743 != nil:
    section.add "processId", valid_596743
  var valid_596744 = path.getOrDefault("slot")
  valid_596744 = validateParameter(valid_596744, JString, required = true,
                                 default = nil)
  if valid_596744 != nil:
    section.add "slot", valid_596744
  var valid_596745 = path.getOrDefault("subscriptionId")
  valid_596745 = validateParameter(valid_596745, JString, required = true,
                                 default = nil)
  if valid_596745 != nil:
    section.add "subscriptionId", valid_596745
  var valid_596746 = path.getOrDefault("instanceId")
  valid_596746 = validateParameter(valid_596746, JString, required = true,
                                 default = nil)
  if valid_596746 != nil:
    section.add "instanceId", valid_596746
  var valid_596747 = path.getOrDefault("threadId")
  valid_596747 = validateParameter(valid_596747, JString, required = true,
                                 default = nil)
  if valid_596747 != nil:
    section.add "threadId", valid_596747
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596748 = query.getOrDefault("api-version")
  valid_596748 = validateParameter(valid_596748, JString, required = true,
                                 default = nil)
  if valid_596748 != nil:
    section.add "api-version", valid_596748
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596749: Call_WebAppsGetInstanceProcessThreadSlot_596738;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_596749.validator(path, query, header, formData, body)
  let scheme = call_596749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596749.url(scheme.get, call_596749.host, call_596749.base,
                         call_596749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596749, url, valid)

proc call*(call_596750: Call_WebAppsGetInstanceProcessThreadSlot_596738;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_596751 = newJObject()
  var query_596752 = newJObject()
  add(path_596751, "resourceGroupName", newJString(resourceGroupName))
  add(query_596752, "api-version", newJString(apiVersion))
  add(path_596751, "name", newJString(name))
  add(path_596751, "processId", newJString(processId))
  add(path_596751, "slot", newJString(slot))
  add(path_596751, "subscriptionId", newJString(subscriptionId))
  add(path_596751, "instanceId", newJString(instanceId))
  add(path_596751, "threadId", newJString(threadId))
  result = call_596750.call(path_596751, query_596752, nil, nil, nil)

var webAppsGetInstanceProcessThreadSlot* = Call_WebAppsGetInstanceProcessThreadSlot_596738(
    name: "webAppsGetInstanceProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThreadSlot_596739, base: "",
    url: url_WebAppsGetInstanceProcessThreadSlot_596740, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneableSlot_596753 = ref object of OpenApiRestCall_593437
proc url_WebAppsIsCloneableSlot_596755(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneableSlot_596754(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596756 = path.getOrDefault("resourceGroupName")
  valid_596756 = validateParameter(valid_596756, JString, required = true,
                                 default = nil)
  if valid_596756 != nil:
    section.add "resourceGroupName", valid_596756
  var valid_596757 = path.getOrDefault("name")
  valid_596757 = validateParameter(valid_596757, JString, required = true,
                                 default = nil)
  if valid_596757 != nil:
    section.add "name", valid_596757
  var valid_596758 = path.getOrDefault("slot")
  valid_596758 = validateParameter(valid_596758, JString, required = true,
                                 default = nil)
  if valid_596758 != nil:
    section.add "slot", valid_596758
  var valid_596759 = path.getOrDefault("subscriptionId")
  valid_596759 = validateParameter(valid_596759, JString, required = true,
                                 default = nil)
  if valid_596759 != nil:
    section.add "subscriptionId", valid_596759
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596760 = query.getOrDefault("api-version")
  valid_596760 = validateParameter(valid_596760, JString, required = true,
                                 default = nil)
  if valid_596760 != nil:
    section.add "api-version", valid_596760
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596761: Call_WebAppsIsCloneableSlot_596753; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_596761.validator(path, query, header, formData, body)
  let scheme = call_596761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596761.url(scheme.get, call_596761.host, call_596761.base,
                         call_596761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596761, url, valid)

proc call*(call_596762: Call_WebAppsIsCloneableSlot_596753;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsIsCloneableSlot
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596763 = newJObject()
  var query_596764 = newJObject()
  add(path_596763, "resourceGroupName", newJString(resourceGroupName))
  add(query_596764, "api-version", newJString(apiVersion))
  add(path_596763, "name", newJString(name))
  add(path_596763, "slot", newJString(slot))
  add(path_596763, "subscriptionId", newJString(subscriptionId))
  result = call_596762.call(path_596763, query_596764, nil, nil, nil)

var webAppsIsCloneableSlot* = Call_WebAppsIsCloneableSlot_596753(
    name: "webAppsIsCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_WebAppsIsCloneableSlot_596754, base: "",
    url: url_WebAppsIsCloneableSlot_596755, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggersSlot_596765 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSyncFunctionTriggersSlot_596767(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggersSlot_596766(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596768 = path.getOrDefault("resourceGroupName")
  valid_596768 = validateParameter(valid_596768, JString, required = true,
                                 default = nil)
  if valid_596768 != nil:
    section.add "resourceGroupName", valid_596768
  var valid_596769 = path.getOrDefault("name")
  valid_596769 = validateParameter(valid_596769, JString, required = true,
                                 default = nil)
  if valid_596769 != nil:
    section.add "name", valid_596769
  var valid_596770 = path.getOrDefault("slot")
  valid_596770 = validateParameter(valid_596770, JString, required = true,
                                 default = nil)
  if valid_596770 != nil:
    section.add "slot", valid_596770
  var valid_596771 = path.getOrDefault("subscriptionId")
  valid_596771 = validateParameter(valid_596771, JString, required = true,
                                 default = nil)
  if valid_596771 != nil:
    section.add "subscriptionId", valid_596771
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596772 = query.getOrDefault("api-version")
  valid_596772 = validateParameter(valid_596772, JString, required = true,
                                 default = nil)
  if valid_596772 != nil:
    section.add "api-version", valid_596772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596773: Call_WebAppsListSyncFunctionTriggersSlot_596765;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_596773.validator(path, query, header, formData, body)
  let scheme = call_596773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596773.url(scheme.get, call_596773.host, call_596773.base,
                         call_596773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596773, url, valid)

proc call*(call_596774: Call_WebAppsListSyncFunctionTriggersSlot_596765;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggersSlot
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596775 = newJObject()
  var query_596776 = newJObject()
  add(path_596775, "resourceGroupName", newJString(resourceGroupName))
  add(query_596776, "api-version", newJString(apiVersion))
  add(path_596775, "name", newJString(name))
  add(path_596775, "slot", newJString(slot))
  add(path_596775, "subscriptionId", newJString(subscriptionId))
  result = call_596774.call(path_596775, query_596776, nil, nil, nil)

var webAppsListSyncFunctionTriggersSlot* = Call_WebAppsListSyncFunctionTriggersSlot_596765(
    name: "webAppsListSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggersSlot_596766, base: "",
    url: url_WebAppsListSyncFunctionTriggersSlot_596767, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitionsSlot_596777 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetricDefinitionsSlot_596779(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitionsSlot_596778(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596780 = path.getOrDefault("resourceGroupName")
  valid_596780 = validateParameter(valid_596780, JString, required = true,
                                 default = nil)
  if valid_596780 != nil:
    section.add "resourceGroupName", valid_596780
  var valid_596781 = path.getOrDefault("name")
  valid_596781 = validateParameter(valid_596781, JString, required = true,
                                 default = nil)
  if valid_596781 != nil:
    section.add "name", valid_596781
  var valid_596782 = path.getOrDefault("slot")
  valid_596782 = validateParameter(valid_596782, JString, required = true,
                                 default = nil)
  if valid_596782 != nil:
    section.add "slot", valid_596782
  var valid_596783 = path.getOrDefault("subscriptionId")
  valid_596783 = validateParameter(valid_596783, JString, required = true,
                                 default = nil)
  if valid_596783 != nil:
    section.add "subscriptionId", valid_596783
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596784 = query.getOrDefault("api-version")
  valid_596784 = validateParameter(valid_596784, JString, required = true,
                                 default = nil)
  if valid_596784 != nil:
    section.add "api-version", valid_596784
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596785: Call_WebAppsListMetricDefinitionsSlot_596777;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_596785.validator(path, query, header, formData, body)
  let scheme = call_596785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596785.url(scheme.get, call_596785.host, call_596785.base,
                         call_596785.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596785, url, valid)

proc call*(call_596786: Call_WebAppsListMetricDefinitionsSlot_596777;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitionsSlot
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596787 = newJObject()
  var query_596788 = newJObject()
  add(path_596787, "resourceGroupName", newJString(resourceGroupName))
  add(query_596788, "api-version", newJString(apiVersion))
  add(path_596787, "name", newJString(name))
  add(path_596787, "slot", newJString(slot))
  add(path_596787, "subscriptionId", newJString(subscriptionId))
  result = call_596786.call(path_596787, query_596788, nil, nil, nil)

var webAppsListMetricDefinitionsSlot* = Call_WebAppsListMetricDefinitionsSlot_596777(
    name: "webAppsListMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitionsSlot_596778, base: "",
    url: url_WebAppsListMetricDefinitionsSlot_596779, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricsSlot_596789 = ref object of OpenApiRestCall_593437
proc url_WebAppsListMetricsSlot_596791(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricsSlot_596790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596792 = path.getOrDefault("resourceGroupName")
  valid_596792 = validateParameter(valid_596792, JString, required = true,
                                 default = nil)
  if valid_596792 != nil:
    section.add "resourceGroupName", valid_596792
  var valid_596793 = path.getOrDefault("name")
  valid_596793 = validateParameter(valid_596793, JString, required = true,
                                 default = nil)
  if valid_596793 != nil:
    section.add "name", valid_596793
  var valid_596794 = path.getOrDefault("slot")
  valid_596794 = validateParameter(valid_596794, JString, required = true,
                                 default = nil)
  if valid_596794 != nil:
    section.add "slot", valid_596794
  var valid_596795 = path.getOrDefault("subscriptionId")
  valid_596795 = validateParameter(valid_596795, JString, required = true,
                                 default = nil)
  if valid_596795 != nil:
    section.add "subscriptionId", valid_596795
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596796 = query.getOrDefault("api-version")
  valid_596796 = validateParameter(valid_596796, JString, required = true,
                                 default = nil)
  if valid_596796 != nil:
    section.add "api-version", valid_596796
  var valid_596797 = query.getOrDefault("details")
  valid_596797 = validateParameter(valid_596797, JBool, required = false, default = nil)
  if valid_596797 != nil:
    section.add "details", valid_596797
  var valid_596798 = query.getOrDefault("$filter")
  valid_596798 = validateParameter(valid_596798, JString, required = false,
                                 default = nil)
  if valid_596798 != nil:
    section.add "$filter", valid_596798
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596799: Call_WebAppsListMetricsSlot_596789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_596799.validator(path, query, header, formData, body)
  let scheme = call_596799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596799.url(scheme.get, call_596799.host, call_596799.base,
                         call_596799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596799, url, valid)

proc call*(call_596800: Call_WebAppsListMetricsSlot_596789;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetricsSlot
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_596801 = newJObject()
  var query_596802 = newJObject()
  add(path_596801, "resourceGroupName", newJString(resourceGroupName))
  add(query_596802, "api-version", newJString(apiVersion))
  add(path_596801, "name", newJString(name))
  add(query_596802, "details", newJBool(details))
  add(path_596801, "slot", newJString(slot))
  add(path_596801, "subscriptionId", newJString(subscriptionId))
  add(query_596802, "$filter", newJString(Filter))
  result = call_596800.call(path_596801, query_596802, nil, nil, nil)

var webAppsListMetricsSlot* = Call_WebAppsListMetricsSlot_596789(
    name: "webAppsListMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_WebAppsListMetricsSlot_596790, base: "",
    url: url_WebAppsListMetricsSlot_596791, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatusSlot_596803 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetMigrateMySqlStatusSlot_596805(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatusSlot_596804(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596806 = path.getOrDefault("resourceGroupName")
  valid_596806 = validateParameter(valid_596806, JString, required = true,
                                 default = nil)
  if valid_596806 != nil:
    section.add "resourceGroupName", valid_596806
  var valid_596807 = path.getOrDefault("name")
  valid_596807 = validateParameter(valid_596807, JString, required = true,
                                 default = nil)
  if valid_596807 != nil:
    section.add "name", valid_596807
  var valid_596808 = path.getOrDefault("slot")
  valid_596808 = validateParameter(valid_596808, JString, required = true,
                                 default = nil)
  if valid_596808 != nil:
    section.add "slot", valid_596808
  var valid_596809 = path.getOrDefault("subscriptionId")
  valid_596809 = validateParameter(valid_596809, JString, required = true,
                                 default = nil)
  if valid_596809 != nil:
    section.add "subscriptionId", valid_596809
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596810 = query.getOrDefault("api-version")
  valid_596810 = validateParameter(valid_596810, JString, required = true,
                                 default = nil)
  if valid_596810 != nil:
    section.add "api-version", valid_596810
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596811: Call_WebAppsGetMigrateMySqlStatusSlot_596803;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_596811.validator(path, query, header, formData, body)
  let scheme = call_596811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596811.url(scheme.get, call_596811.host, call_596811.base,
                         call_596811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596811, url, valid)

proc call*(call_596812: Call_WebAppsGetMigrateMySqlStatusSlot_596803;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatusSlot
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596813 = newJObject()
  var query_596814 = newJObject()
  add(path_596813, "resourceGroupName", newJString(resourceGroupName))
  add(query_596814, "api-version", newJString(apiVersion))
  add(path_596813, "name", newJString(name))
  add(path_596813, "slot", newJString(slot))
  add(path_596813, "subscriptionId", newJString(subscriptionId))
  result = call_596812.call(path_596813, query_596814, nil, nil, nil)

var webAppsGetMigrateMySqlStatusSlot* = Call_WebAppsGetMigrateMySqlStatusSlot_596803(
    name: "webAppsGetMigrateMySqlStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatusSlot_596804, base: "",
    url: url_WebAppsGetMigrateMySqlStatusSlot_596805, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeaturesSlot_596815 = ref object of OpenApiRestCall_593437
proc url_WebAppsListNetworkFeaturesSlot_596817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeaturesSlot_596816(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596818 = path.getOrDefault("resourceGroupName")
  valid_596818 = validateParameter(valid_596818, JString, required = true,
                                 default = nil)
  if valid_596818 != nil:
    section.add "resourceGroupName", valid_596818
  var valid_596819 = path.getOrDefault("name")
  valid_596819 = validateParameter(valid_596819, JString, required = true,
                                 default = nil)
  if valid_596819 != nil:
    section.add "name", valid_596819
  var valid_596820 = path.getOrDefault("slot")
  valid_596820 = validateParameter(valid_596820, JString, required = true,
                                 default = nil)
  if valid_596820 != nil:
    section.add "slot", valid_596820
  var valid_596821 = path.getOrDefault("subscriptionId")
  valid_596821 = validateParameter(valid_596821, JString, required = true,
                                 default = nil)
  if valid_596821 != nil:
    section.add "subscriptionId", valid_596821
  var valid_596822 = path.getOrDefault("view")
  valid_596822 = validateParameter(valid_596822, JString, required = true,
                                 default = nil)
  if valid_596822 != nil:
    section.add "view", valid_596822
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596823 = query.getOrDefault("api-version")
  valid_596823 = validateParameter(valid_596823, JString, required = true,
                                 default = nil)
  if valid_596823 != nil:
    section.add "api-version", valid_596823
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596824: Call_WebAppsListNetworkFeaturesSlot_596815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_596824.validator(path, query, header, formData, body)
  let scheme = call_596824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596824.url(scheme.get, call_596824.host, call_596824.base,
                         call_596824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596824, url, valid)

proc call*(call_596825: Call_WebAppsListNetworkFeaturesSlot_596815;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeaturesSlot
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_596826 = newJObject()
  var query_596827 = newJObject()
  add(path_596826, "resourceGroupName", newJString(resourceGroupName))
  add(query_596827, "api-version", newJString(apiVersion))
  add(path_596826, "name", newJString(name))
  add(path_596826, "slot", newJString(slot))
  add(path_596826, "subscriptionId", newJString(subscriptionId))
  add(path_596826, "view", newJString(view))
  result = call_596825.call(path_596826, query_596827, nil, nil, nil)

var webAppsListNetworkFeaturesSlot* = Call_WebAppsListNetworkFeaturesSlot_596815(
    name: "webAppsListNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeaturesSlot_596816, base: "",
    url: url_WebAppsListNetworkFeaturesSlot_596817, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceSlot_596828 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartWebSiteNetworkTraceSlot_596830(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceSlot_596829(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596831 = path.getOrDefault("resourceGroupName")
  valid_596831 = validateParameter(valid_596831, JString, required = true,
                                 default = nil)
  if valid_596831 != nil:
    section.add "resourceGroupName", valid_596831
  var valid_596832 = path.getOrDefault("name")
  valid_596832 = validateParameter(valid_596832, JString, required = true,
                                 default = nil)
  if valid_596832 != nil:
    section.add "name", valid_596832
  var valid_596833 = path.getOrDefault("slot")
  valid_596833 = validateParameter(valid_596833, JString, required = true,
                                 default = nil)
  if valid_596833 != nil:
    section.add "slot", valid_596833
  var valid_596834 = path.getOrDefault("subscriptionId")
  valid_596834 = validateParameter(valid_596834, JString, required = true,
                                 default = nil)
  if valid_596834 != nil:
    section.add "subscriptionId", valid_596834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596835 = query.getOrDefault("api-version")
  valid_596835 = validateParameter(valid_596835, JString, required = true,
                                 default = nil)
  if valid_596835 != nil:
    section.add "api-version", valid_596835
  var valid_596836 = query.getOrDefault("durationInSeconds")
  valid_596836 = validateParameter(valid_596836, JInt, required = false, default = nil)
  if valid_596836 != nil:
    section.add "durationInSeconds", valid_596836
  var valid_596837 = query.getOrDefault("maxFrameLength")
  valid_596837 = validateParameter(valid_596837, JInt, required = false, default = nil)
  if valid_596837 != nil:
    section.add "maxFrameLength", valid_596837
  var valid_596838 = query.getOrDefault("sasUrl")
  valid_596838 = validateParameter(valid_596838, JString, required = false,
                                 default = nil)
  if valid_596838 != nil:
    section.add "sasUrl", valid_596838
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596839: Call_WebAppsStartWebSiteNetworkTraceSlot_596828;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_596839.validator(path, query, header, formData, body)
  let scheme = call_596839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596839.url(scheme.get, call_596839.host, call_596839.base,
                         call_596839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596839, url, valid)

proc call*(call_596840: Call_WebAppsStartWebSiteNetworkTraceSlot_596828;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceSlot
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_596841 = newJObject()
  var query_596842 = newJObject()
  add(path_596841, "resourceGroupName", newJString(resourceGroupName))
  add(query_596842, "api-version", newJString(apiVersion))
  add(path_596841, "name", newJString(name))
  add(path_596841, "slot", newJString(slot))
  add(path_596841, "subscriptionId", newJString(subscriptionId))
  add(query_596842, "durationInSeconds", newJInt(durationInSeconds))
  add(query_596842, "maxFrameLength", newJInt(maxFrameLength))
  add(query_596842, "sasUrl", newJString(sasUrl))
  result = call_596840.call(path_596841, query_596842, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceSlot* = Call_WebAppsStartWebSiteNetworkTraceSlot_596828(
    name: "webAppsStartWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTraceSlot_596829, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceSlot_596830, schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTraceSlot_596843 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopWebSiteNetworkTraceSlot_596845(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTraceSlot_596844(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596846 = path.getOrDefault("resourceGroupName")
  valid_596846 = validateParameter(valid_596846, JString, required = true,
                                 default = nil)
  if valid_596846 != nil:
    section.add "resourceGroupName", valid_596846
  var valid_596847 = path.getOrDefault("name")
  valid_596847 = validateParameter(valid_596847, JString, required = true,
                                 default = nil)
  if valid_596847 != nil:
    section.add "name", valid_596847
  var valid_596848 = path.getOrDefault("slot")
  valid_596848 = validateParameter(valid_596848, JString, required = true,
                                 default = nil)
  if valid_596848 != nil:
    section.add "slot", valid_596848
  var valid_596849 = path.getOrDefault("subscriptionId")
  valid_596849 = validateParameter(valid_596849, JString, required = true,
                                 default = nil)
  if valid_596849 != nil:
    section.add "subscriptionId", valid_596849
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596850 = query.getOrDefault("api-version")
  valid_596850 = validateParameter(valid_596850, JString, required = true,
                                 default = nil)
  if valid_596850 != nil:
    section.add "api-version", valid_596850
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596851: Call_WebAppsStopWebSiteNetworkTraceSlot_596843;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_596851.validator(path, query, header, formData, body)
  let scheme = call_596851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596851.url(scheme.get, call_596851.host, call_596851.base,
                         call_596851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596851, url, valid)

proc call*(call_596852: Call_WebAppsStopWebSiteNetworkTraceSlot_596843;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596853 = newJObject()
  var query_596854 = newJObject()
  add(path_596853, "resourceGroupName", newJString(resourceGroupName))
  add(query_596854, "api-version", newJString(apiVersion))
  add(path_596853, "name", newJString(name))
  add(path_596853, "slot", newJString(slot))
  add(path_596853, "subscriptionId", newJString(subscriptionId))
  result = call_596852.call(path_596853, query_596854, nil, nil, nil)

var webAppsStopWebSiteNetworkTraceSlot* = Call_WebAppsStopWebSiteNetworkTraceSlot_596843(
    name: "webAppsStopWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTraceSlot_596844, base: "",
    url: url_WebAppsStopWebSiteNetworkTraceSlot_596845, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPasswordSlot_596855 = ref object of OpenApiRestCall_593437
proc url_WebAppsGenerateNewSitePublishingPasswordSlot_596857(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPasswordSlot_596856(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596858 = path.getOrDefault("resourceGroupName")
  valid_596858 = validateParameter(valid_596858, JString, required = true,
                                 default = nil)
  if valid_596858 != nil:
    section.add "resourceGroupName", valid_596858
  var valid_596859 = path.getOrDefault("name")
  valid_596859 = validateParameter(valid_596859, JString, required = true,
                                 default = nil)
  if valid_596859 != nil:
    section.add "name", valid_596859
  var valid_596860 = path.getOrDefault("slot")
  valid_596860 = validateParameter(valid_596860, JString, required = true,
                                 default = nil)
  if valid_596860 != nil:
    section.add "slot", valid_596860
  var valid_596861 = path.getOrDefault("subscriptionId")
  valid_596861 = validateParameter(valid_596861, JString, required = true,
                                 default = nil)
  if valid_596861 != nil:
    section.add "subscriptionId", valid_596861
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596862 = query.getOrDefault("api-version")
  valid_596862 = validateParameter(valid_596862, JString, required = true,
                                 default = nil)
  if valid_596862 != nil:
    section.add "api-version", valid_596862
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596863: Call_WebAppsGenerateNewSitePublishingPasswordSlot_596855;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_596863.validator(path, query, header, formData, body)
  let scheme = call_596863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596863.url(scheme.get, call_596863.host, call_596863.base,
                         call_596863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596863, url, valid)

proc call*(call_596864: Call_WebAppsGenerateNewSitePublishingPasswordSlot_596855;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPasswordSlot
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596865 = newJObject()
  var query_596866 = newJObject()
  add(path_596865, "resourceGroupName", newJString(resourceGroupName))
  add(query_596866, "api-version", newJString(apiVersion))
  add(path_596865, "name", newJString(name))
  add(path_596865, "slot", newJString(slot))
  add(path_596865, "subscriptionId", newJString(subscriptionId))
  result = call_596864.call(path_596865, query_596866, nil, nil, nil)

var webAppsGenerateNewSitePublishingPasswordSlot* = Call_WebAppsGenerateNewSitePublishingPasswordSlot_596855(
    name: "webAppsGenerateNewSitePublishingPasswordSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPasswordSlot_596856,
    base: "", url: url_WebAppsGenerateNewSitePublishingPasswordSlot_596857,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCountersSlot_596867 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPerfMonCountersSlot_596869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCountersSlot_596868(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596870 = path.getOrDefault("resourceGroupName")
  valid_596870 = validateParameter(valid_596870, JString, required = true,
                                 default = nil)
  if valid_596870 != nil:
    section.add "resourceGroupName", valid_596870
  var valid_596871 = path.getOrDefault("name")
  valid_596871 = validateParameter(valid_596871, JString, required = true,
                                 default = nil)
  if valid_596871 != nil:
    section.add "name", valid_596871
  var valid_596872 = path.getOrDefault("slot")
  valid_596872 = validateParameter(valid_596872, JString, required = true,
                                 default = nil)
  if valid_596872 != nil:
    section.add "slot", valid_596872
  var valid_596873 = path.getOrDefault("subscriptionId")
  valid_596873 = validateParameter(valid_596873, JString, required = true,
                                 default = nil)
  if valid_596873 != nil:
    section.add "subscriptionId", valid_596873
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596874 = query.getOrDefault("api-version")
  valid_596874 = validateParameter(valid_596874, JString, required = true,
                                 default = nil)
  if valid_596874 != nil:
    section.add "api-version", valid_596874
  var valid_596875 = query.getOrDefault("$filter")
  valid_596875 = validateParameter(valid_596875, JString, required = false,
                                 default = nil)
  if valid_596875 != nil:
    section.add "$filter", valid_596875
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596876: Call_WebAppsListPerfMonCountersSlot_596867; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_596876.validator(path, query, header, formData, body)
  let scheme = call_596876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596876.url(scheme.get, call_596876.host, call_596876.base,
                         call_596876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596876, url, valid)

proc call*(call_596877: Call_WebAppsListPerfMonCountersSlot_596867;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCountersSlot
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_596878 = newJObject()
  var query_596879 = newJObject()
  add(path_596878, "resourceGroupName", newJString(resourceGroupName))
  add(query_596879, "api-version", newJString(apiVersion))
  add(path_596878, "name", newJString(name))
  add(path_596878, "slot", newJString(slot))
  add(path_596878, "subscriptionId", newJString(subscriptionId))
  add(query_596879, "$filter", newJString(Filter))
  result = call_596877.call(path_596878, query_596879, nil, nil, nil)

var webAppsListPerfMonCountersSlot* = Call_WebAppsListPerfMonCountersSlot_596867(
    name: "webAppsListPerfMonCountersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    validator: validate_WebAppsListPerfMonCountersSlot_596868, base: "",
    url: url_WebAppsListPerfMonCountersSlot_596869, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlagSlot_596880 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSitePhpErrorLogFlagSlot_596882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlagSlot_596881(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596883 = path.getOrDefault("resourceGroupName")
  valid_596883 = validateParameter(valid_596883, JString, required = true,
                                 default = nil)
  if valid_596883 != nil:
    section.add "resourceGroupName", valid_596883
  var valid_596884 = path.getOrDefault("name")
  valid_596884 = validateParameter(valid_596884, JString, required = true,
                                 default = nil)
  if valid_596884 != nil:
    section.add "name", valid_596884
  var valid_596885 = path.getOrDefault("slot")
  valid_596885 = validateParameter(valid_596885, JString, required = true,
                                 default = nil)
  if valid_596885 != nil:
    section.add "slot", valid_596885
  var valid_596886 = path.getOrDefault("subscriptionId")
  valid_596886 = validateParameter(valid_596886, JString, required = true,
                                 default = nil)
  if valid_596886 != nil:
    section.add "subscriptionId", valid_596886
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596887 = query.getOrDefault("api-version")
  valid_596887 = validateParameter(valid_596887, JString, required = true,
                                 default = nil)
  if valid_596887 != nil:
    section.add "api-version", valid_596887
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596888: Call_WebAppsGetSitePhpErrorLogFlagSlot_596880;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_596888.validator(path, query, header, formData, body)
  let scheme = call_596888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596888.url(scheme.get, call_596888.host, call_596888.base,
                         call_596888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596888, url, valid)

proc call*(call_596889: Call_WebAppsGetSitePhpErrorLogFlagSlot_596880;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlagSlot
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596890 = newJObject()
  var query_596891 = newJObject()
  add(path_596890, "resourceGroupName", newJString(resourceGroupName))
  add(query_596891, "api-version", newJString(apiVersion))
  add(path_596890, "name", newJString(name))
  add(path_596890, "slot", newJString(slot))
  add(path_596890, "subscriptionId", newJString(subscriptionId))
  result = call_596889.call(path_596890, query_596891, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlagSlot* = Call_WebAppsGetSitePhpErrorLogFlagSlot_596880(
    name: "webAppsGetSitePhpErrorLogFlagSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlagSlot_596881, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlagSlot_596882, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOnsSlot_596892 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPremierAddOnsSlot_596894(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOnsSlot_596893(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596895 = path.getOrDefault("resourceGroupName")
  valid_596895 = validateParameter(valid_596895, JString, required = true,
                                 default = nil)
  if valid_596895 != nil:
    section.add "resourceGroupName", valid_596895
  var valid_596896 = path.getOrDefault("name")
  valid_596896 = validateParameter(valid_596896, JString, required = true,
                                 default = nil)
  if valid_596896 != nil:
    section.add "name", valid_596896
  var valid_596897 = path.getOrDefault("slot")
  valid_596897 = validateParameter(valid_596897, JString, required = true,
                                 default = nil)
  if valid_596897 != nil:
    section.add "slot", valid_596897
  var valid_596898 = path.getOrDefault("subscriptionId")
  valid_596898 = validateParameter(valid_596898, JString, required = true,
                                 default = nil)
  if valid_596898 != nil:
    section.add "subscriptionId", valid_596898
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596899 = query.getOrDefault("api-version")
  valid_596899 = validateParameter(valid_596899, JString, required = true,
                                 default = nil)
  if valid_596899 != nil:
    section.add "api-version", valid_596899
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596900: Call_WebAppsListPremierAddOnsSlot_596892; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_596900.validator(path, query, header, formData, body)
  let scheme = call_596900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596900.url(scheme.get, call_596900.host, call_596900.base,
                         call_596900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596900, url, valid)

proc call*(call_596901: Call_WebAppsListPremierAddOnsSlot_596892;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOnsSlot
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596902 = newJObject()
  var query_596903 = newJObject()
  add(path_596902, "resourceGroupName", newJString(resourceGroupName))
  add(query_596903, "api-version", newJString(apiVersion))
  add(path_596902, "name", newJString(name))
  add(path_596902, "slot", newJString(slot))
  add(path_596902, "subscriptionId", newJString(subscriptionId))
  result = call_596901.call(path_596902, query_596903, nil, nil, nil)

var webAppsListPremierAddOnsSlot* = Call_WebAppsListPremierAddOnsSlot_596892(
    name: "webAppsListPremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_WebAppsListPremierAddOnsSlot_596893, base: "",
    url: url_WebAppsListPremierAddOnsSlot_596894, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOnSlot_596917 = ref object of OpenApiRestCall_593437
proc url_WebAppsAddPremierAddOnSlot_596919(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOnSlot_596918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596920 = path.getOrDefault("resourceGroupName")
  valid_596920 = validateParameter(valid_596920, JString, required = true,
                                 default = nil)
  if valid_596920 != nil:
    section.add "resourceGroupName", valid_596920
  var valid_596921 = path.getOrDefault("name")
  valid_596921 = validateParameter(valid_596921, JString, required = true,
                                 default = nil)
  if valid_596921 != nil:
    section.add "name", valid_596921
  var valid_596922 = path.getOrDefault("slot")
  valid_596922 = validateParameter(valid_596922, JString, required = true,
                                 default = nil)
  if valid_596922 != nil:
    section.add "slot", valid_596922
  var valid_596923 = path.getOrDefault("subscriptionId")
  valid_596923 = validateParameter(valid_596923, JString, required = true,
                                 default = nil)
  if valid_596923 != nil:
    section.add "subscriptionId", valid_596923
  var valid_596924 = path.getOrDefault("premierAddOnName")
  valid_596924 = validateParameter(valid_596924, JString, required = true,
                                 default = nil)
  if valid_596924 != nil:
    section.add "premierAddOnName", valid_596924
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596925 = query.getOrDefault("api-version")
  valid_596925 = validateParameter(valid_596925, JString, required = true,
                                 default = nil)
  if valid_596925 != nil:
    section.add "api-version", valid_596925
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596927: Call_WebAppsAddPremierAddOnSlot_596917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_596927.validator(path, query, header, formData, body)
  let scheme = call_596927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596927.url(scheme.get, call_596927.host, call_596927.base,
                         call_596927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596927, url, valid)

proc call*(call_596928: Call_WebAppsAddPremierAddOnSlot_596917;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_596929 = newJObject()
  var query_596930 = newJObject()
  var body_596931 = newJObject()
  add(path_596929, "resourceGroupName", newJString(resourceGroupName))
  add(query_596930, "api-version", newJString(apiVersion))
  add(path_596929, "name", newJString(name))
  if premierAddOn != nil:
    body_596931 = premierAddOn
  add(path_596929, "slot", newJString(slot))
  add(path_596929, "subscriptionId", newJString(subscriptionId))
  add(path_596929, "premierAddOnName", newJString(premierAddOnName))
  result = call_596928.call(path_596929, query_596930, nil, nil, body_596931)

var webAppsAddPremierAddOnSlot* = Call_WebAppsAddPremierAddOnSlot_596917(
    name: "webAppsAddPremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOnSlot_596918, base: "",
    url: url_WebAppsAddPremierAddOnSlot_596919, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOnSlot_596904 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPremierAddOnSlot_596906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOnSlot_596905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596907 = path.getOrDefault("resourceGroupName")
  valid_596907 = validateParameter(valid_596907, JString, required = true,
                                 default = nil)
  if valid_596907 != nil:
    section.add "resourceGroupName", valid_596907
  var valid_596908 = path.getOrDefault("name")
  valid_596908 = validateParameter(valid_596908, JString, required = true,
                                 default = nil)
  if valid_596908 != nil:
    section.add "name", valid_596908
  var valid_596909 = path.getOrDefault("slot")
  valid_596909 = validateParameter(valid_596909, JString, required = true,
                                 default = nil)
  if valid_596909 != nil:
    section.add "slot", valid_596909
  var valid_596910 = path.getOrDefault("subscriptionId")
  valid_596910 = validateParameter(valid_596910, JString, required = true,
                                 default = nil)
  if valid_596910 != nil:
    section.add "subscriptionId", valid_596910
  var valid_596911 = path.getOrDefault("premierAddOnName")
  valid_596911 = validateParameter(valid_596911, JString, required = true,
                                 default = nil)
  if valid_596911 != nil:
    section.add "premierAddOnName", valid_596911
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596912 = query.getOrDefault("api-version")
  valid_596912 = validateParameter(valid_596912, JString, required = true,
                                 default = nil)
  if valid_596912 != nil:
    section.add "api-version", valid_596912
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596913: Call_WebAppsGetPremierAddOnSlot_596904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_596913.validator(path, query, header, formData, body)
  let scheme = call_596913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596913.url(scheme.get, call_596913.host, call_596913.base,
                         call_596913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596913, url, valid)

proc call*(call_596914: Call_WebAppsGetPremierAddOnSlot_596904;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOnSlot
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_596915 = newJObject()
  var query_596916 = newJObject()
  add(path_596915, "resourceGroupName", newJString(resourceGroupName))
  add(query_596916, "api-version", newJString(apiVersion))
  add(path_596915, "name", newJString(name))
  add(path_596915, "slot", newJString(slot))
  add(path_596915, "subscriptionId", newJString(subscriptionId))
  add(path_596915, "premierAddOnName", newJString(premierAddOnName))
  result = call_596914.call(path_596915, query_596916, nil, nil, nil)

var webAppsGetPremierAddOnSlot* = Call_WebAppsGetPremierAddOnSlot_596904(
    name: "webAppsGetPremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOnSlot_596905, base: "",
    url: url_WebAppsGetPremierAddOnSlot_596906, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOnSlot_596932 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePremierAddOnSlot_596934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOnSlot_596933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596935 = path.getOrDefault("resourceGroupName")
  valid_596935 = validateParameter(valid_596935, JString, required = true,
                                 default = nil)
  if valid_596935 != nil:
    section.add "resourceGroupName", valid_596935
  var valid_596936 = path.getOrDefault("name")
  valid_596936 = validateParameter(valid_596936, JString, required = true,
                                 default = nil)
  if valid_596936 != nil:
    section.add "name", valid_596936
  var valid_596937 = path.getOrDefault("slot")
  valid_596937 = validateParameter(valid_596937, JString, required = true,
                                 default = nil)
  if valid_596937 != nil:
    section.add "slot", valid_596937
  var valid_596938 = path.getOrDefault("subscriptionId")
  valid_596938 = validateParameter(valid_596938, JString, required = true,
                                 default = nil)
  if valid_596938 != nil:
    section.add "subscriptionId", valid_596938
  var valid_596939 = path.getOrDefault("premierAddOnName")
  valid_596939 = validateParameter(valid_596939, JString, required = true,
                                 default = nil)
  if valid_596939 != nil:
    section.add "premierAddOnName", valid_596939
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596940 = query.getOrDefault("api-version")
  valid_596940 = validateParameter(valid_596940, JString, required = true,
                                 default = nil)
  if valid_596940 != nil:
    section.add "api-version", valid_596940
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596941: Call_WebAppsDeletePremierAddOnSlot_596932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_596941.validator(path, query, header, formData, body)
  let scheme = call_596941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596941.url(scheme.get, call_596941.host, call_596941.base,
                         call_596941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596941, url, valid)

proc call*(call_596942: Call_WebAppsDeletePremierAddOnSlot_596932;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOnSlot
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_596943 = newJObject()
  var query_596944 = newJObject()
  add(path_596943, "resourceGroupName", newJString(resourceGroupName))
  add(query_596944, "api-version", newJString(apiVersion))
  add(path_596943, "name", newJString(name))
  add(path_596943, "slot", newJString(slot))
  add(path_596943, "subscriptionId", newJString(subscriptionId))
  add(path_596943, "premierAddOnName", newJString(premierAddOnName))
  result = call_596942.call(path_596943, query_596944, nil, nil, nil)

var webAppsDeletePremierAddOnSlot* = Call_WebAppsDeletePremierAddOnSlot_596932(
    name: "webAppsDeletePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOnSlot_596933, base: "",
    url: url_WebAppsDeletePremierAddOnSlot_596934, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessesSlot_596945 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessesSlot_596947(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessesSlot_596946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596948 = path.getOrDefault("resourceGroupName")
  valid_596948 = validateParameter(valid_596948, JString, required = true,
                                 default = nil)
  if valid_596948 != nil:
    section.add "resourceGroupName", valid_596948
  var valid_596949 = path.getOrDefault("name")
  valid_596949 = validateParameter(valid_596949, JString, required = true,
                                 default = nil)
  if valid_596949 != nil:
    section.add "name", valid_596949
  var valid_596950 = path.getOrDefault("slot")
  valid_596950 = validateParameter(valid_596950, JString, required = true,
                                 default = nil)
  if valid_596950 != nil:
    section.add "slot", valid_596950
  var valid_596951 = path.getOrDefault("subscriptionId")
  valid_596951 = validateParameter(valid_596951, JString, required = true,
                                 default = nil)
  if valid_596951 != nil:
    section.add "subscriptionId", valid_596951
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596952 = query.getOrDefault("api-version")
  valid_596952 = validateParameter(valid_596952, JString, required = true,
                                 default = nil)
  if valid_596952 != nil:
    section.add "api-version", valid_596952
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596953: Call_WebAppsListProcessesSlot_596945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596953.validator(path, query, header, formData, body)
  let scheme = call_596953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596953.url(scheme.get, call_596953.host, call_596953.base,
                         call_596953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596953, url, valid)

proc call*(call_596954: Call_WebAppsListProcessesSlot_596945;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596955 = newJObject()
  var query_596956 = newJObject()
  add(path_596955, "resourceGroupName", newJString(resourceGroupName))
  add(query_596956, "api-version", newJString(apiVersion))
  add(path_596955, "name", newJString(name))
  add(path_596955, "slot", newJString(slot))
  add(path_596955, "subscriptionId", newJString(subscriptionId))
  result = call_596954.call(path_596955, query_596956, nil, nil, nil)

var webAppsListProcessesSlot* = Call_WebAppsListProcessesSlot_596945(
    name: "webAppsListProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    validator: validate_WebAppsListProcessesSlot_596946, base: "",
    url: url_WebAppsListProcessesSlot_596947, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessSlot_596957 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessSlot_596959(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessSlot_596958(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596960 = path.getOrDefault("resourceGroupName")
  valid_596960 = validateParameter(valid_596960, JString, required = true,
                                 default = nil)
  if valid_596960 != nil:
    section.add "resourceGroupName", valid_596960
  var valid_596961 = path.getOrDefault("name")
  valid_596961 = validateParameter(valid_596961, JString, required = true,
                                 default = nil)
  if valid_596961 != nil:
    section.add "name", valid_596961
  var valid_596962 = path.getOrDefault("processId")
  valid_596962 = validateParameter(valid_596962, JString, required = true,
                                 default = nil)
  if valid_596962 != nil:
    section.add "processId", valid_596962
  var valid_596963 = path.getOrDefault("slot")
  valid_596963 = validateParameter(valid_596963, JString, required = true,
                                 default = nil)
  if valid_596963 != nil:
    section.add "slot", valid_596963
  var valid_596964 = path.getOrDefault("subscriptionId")
  valid_596964 = validateParameter(valid_596964, JString, required = true,
                                 default = nil)
  if valid_596964 != nil:
    section.add "subscriptionId", valid_596964
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596965 = query.getOrDefault("api-version")
  valid_596965 = validateParameter(valid_596965, JString, required = true,
                                 default = nil)
  if valid_596965 != nil:
    section.add "api-version", valid_596965
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596966: Call_WebAppsGetProcessSlot_596957; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596966.validator(path, query, header, formData, body)
  let scheme = call_596966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596966.url(scheme.get, call_596966.host, call_596966.base,
                         call_596966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596966, url, valid)

proc call*(call_596967: Call_WebAppsGetProcessSlot_596957;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596968 = newJObject()
  var query_596969 = newJObject()
  add(path_596968, "resourceGroupName", newJString(resourceGroupName))
  add(query_596969, "api-version", newJString(apiVersion))
  add(path_596968, "name", newJString(name))
  add(path_596968, "processId", newJString(processId))
  add(path_596968, "slot", newJString(slot))
  add(path_596968, "subscriptionId", newJString(subscriptionId))
  result = call_596967.call(path_596968, query_596969, nil, nil, nil)

var webAppsGetProcessSlot* = Call_WebAppsGetProcessSlot_596957(
    name: "webAppsGetProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsGetProcessSlot_596958, base: "",
    url: url_WebAppsGetProcessSlot_596959, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcessSlot_596970 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteProcessSlot_596972(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcessSlot_596971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596973 = path.getOrDefault("resourceGroupName")
  valid_596973 = validateParameter(valid_596973, JString, required = true,
                                 default = nil)
  if valid_596973 != nil:
    section.add "resourceGroupName", valid_596973
  var valid_596974 = path.getOrDefault("name")
  valid_596974 = validateParameter(valid_596974, JString, required = true,
                                 default = nil)
  if valid_596974 != nil:
    section.add "name", valid_596974
  var valid_596975 = path.getOrDefault("processId")
  valid_596975 = validateParameter(valid_596975, JString, required = true,
                                 default = nil)
  if valid_596975 != nil:
    section.add "processId", valid_596975
  var valid_596976 = path.getOrDefault("slot")
  valid_596976 = validateParameter(valid_596976, JString, required = true,
                                 default = nil)
  if valid_596976 != nil:
    section.add "slot", valid_596976
  var valid_596977 = path.getOrDefault("subscriptionId")
  valid_596977 = validateParameter(valid_596977, JString, required = true,
                                 default = nil)
  if valid_596977 != nil:
    section.add "subscriptionId", valid_596977
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596978 = query.getOrDefault("api-version")
  valid_596978 = validateParameter(valid_596978, JString, required = true,
                                 default = nil)
  if valid_596978 != nil:
    section.add "api-version", valid_596978
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596979: Call_WebAppsDeleteProcessSlot_596970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_596979.validator(path, query, header, formData, body)
  let scheme = call_596979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596979.url(scheme.get, call_596979.host, call_596979.base,
                         call_596979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596979, url, valid)

proc call*(call_596980: Call_WebAppsDeleteProcessSlot_596970;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596981 = newJObject()
  var query_596982 = newJObject()
  add(path_596981, "resourceGroupName", newJString(resourceGroupName))
  add(query_596982, "api-version", newJString(apiVersion))
  add(path_596981, "name", newJString(name))
  add(path_596981, "processId", newJString(processId))
  add(path_596981, "slot", newJString(slot))
  add(path_596981, "subscriptionId", newJString(subscriptionId))
  result = call_596980.call(path_596981, query_596982, nil, nil, nil)

var webAppsDeleteProcessSlot* = Call_WebAppsDeleteProcessSlot_596970(
    name: "webAppsDeleteProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsDeleteProcessSlot_596971, base: "",
    url: url_WebAppsDeleteProcessSlot_596972, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDumpSlot_596983 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessDumpSlot_596985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDumpSlot_596984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596986 = path.getOrDefault("resourceGroupName")
  valid_596986 = validateParameter(valid_596986, JString, required = true,
                                 default = nil)
  if valid_596986 != nil:
    section.add "resourceGroupName", valid_596986
  var valid_596987 = path.getOrDefault("name")
  valid_596987 = validateParameter(valid_596987, JString, required = true,
                                 default = nil)
  if valid_596987 != nil:
    section.add "name", valid_596987
  var valid_596988 = path.getOrDefault("processId")
  valid_596988 = validateParameter(valid_596988, JString, required = true,
                                 default = nil)
  if valid_596988 != nil:
    section.add "processId", valid_596988
  var valid_596989 = path.getOrDefault("slot")
  valid_596989 = validateParameter(valid_596989, JString, required = true,
                                 default = nil)
  if valid_596989 != nil:
    section.add "slot", valid_596989
  var valid_596990 = path.getOrDefault("subscriptionId")
  valid_596990 = validateParameter(valid_596990, JString, required = true,
                                 default = nil)
  if valid_596990 != nil:
    section.add "subscriptionId", valid_596990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_596991 = query.getOrDefault("api-version")
  valid_596991 = validateParameter(valid_596991, JString, required = true,
                                 default = nil)
  if valid_596991 != nil:
    section.add "api-version", valid_596991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596992: Call_WebAppsGetProcessDumpSlot_596983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_596992.validator(path, query, header, formData, body)
  let scheme = call_596992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596992.url(scheme.get, call_596992.host, call_596992.base,
                         call_596992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596992, url, valid)

proc call*(call_596993: Call_WebAppsGetProcessDumpSlot_596983;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_596994 = newJObject()
  var query_596995 = newJObject()
  add(path_596994, "resourceGroupName", newJString(resourceGroupName))
  add(query_596995, "api-version", newJString(apiVersion))
  add(path_596994, "name", newJString(name))
  add(path_596994, "processId", newJString(processId))
  add(path_596994, "slot", newJString(slot))
  add(path_596994, "subscriptionId", newJString(subscriptionId))
  result = call_596993.call(path_596994, query_596995, nil, nil, nil)

var webAppsGetProcessDumpSlot* = Call_WebAppsGetProcessDumpSlot_596983(
    name: "webAppsGetProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDumpSlot_596984, base: "",
    url: url_WebAppsGetProcessDumpSlot_596985, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModulesSlot_596996 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessModulesSlot_596998(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModulesSlot_596997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_596999 = path.getOrDefault("resourceGroupName")
  valid_596999 = validateParameter(valid_596999, JString, required = true,
                                 default = nil)
  if valid_596999 != nil:
    section.add "resourceGroupName", valid_596999
  var valid_597000 = path.getOrDefault("name")
  valid_597000 = validateParameter(valid_597000, JString, required = true,
                                 default = nil)
  if valid_597000 != nil:
    section.add "name", valid_597000
  var valid_597001 = path.getOrDefault("processId")
  valid_597001 = validateParameter(valid_597001, JString, required = true,
                                 default = nil)
  if valid_597001 != nil:
    section.add "processId", valid_597001
  var valid_597002 = path.getOrDefault("slot")
  valid_597002 = validateParameter(valid_597002, JString, required = true,
                                 default = nil)
  if valid_597002 != nil:
    section.add "slot", valid_597002
  var valid_597003 = path.getOrDefault("subscriptionId")
  valid_597003 = validateParameter(valid_597003, JString, required = true,
                                 default = nil)
  if valid_597003 != nil:
    section.add "subscriptionId", valid_597003
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597004 = query.getOrDefault("api-version")
  valid_597004 = validateParameter(valid_597004, JString, required = true,
                                 default = nil)
  if valid_597004 != nil:
    section.add "api-version", valid_597004
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597005: Call_WebAppsListProcessModulesSlot_596996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597005.validator(path, query, header, formData, body)
  let scheme = call_597005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597005.url(scheme.get, call_597005.host, call_597005.base,
                         call_597005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597005, url, valid)

proc call*(call_597006: Call_WebAppsListProcessModulesSlot_596996;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597007 = newJObject()
  var query_597008 = newJObject()
  add(path_597007, "resourceGroupName", newJString(resourceGroupName))
  add(query_597008, "api-version", newJString(apiVersion))
  add(path_597007, "name", newJString(name))
  add(path_597007, "processId", newJString(processId))
  add(path_597007, "slot", newJString(slot))
  add(path_597007, "subscriptionId", newJString(subscriptionId))
  result = call_597006.call(path_597007, query_597008, nil, nil, nil)

var webAppsListProcessModulesSlot* = Call_WebAppsListProcessModulesSlot_596996(
    name: "webAppsListProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModulesSlot_596997, base: "",
    url: url_WebAppsListProcessModulesSlot_596998, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModuleSlot_597009 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessModuleSlot_597011(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModuleSlot_597010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597012 = path.getOrDefault("resourceGroupName")
  valid_597012 = validateParameter(valid_597012, JString, required = true,
                                 default = nil)
  if valid_597012 != nil:
    section.add "resourceGroupName", valid_597012
  var valid_597013 = path.getOrDefault("name")
  valid_597013 = validateParameter(valid_597013, JString, required = true,
                                 default = nil)
  if valid_597013 != nil:
    section.add "name", valid_597013
  var valid_597014 = path.getOrDefault("processId")
  valid_597014 = validateParameter(valid_597014, JString, required = true,
                                 default = nil)
  if valid_597014 != nil:
    section.add "processId", valid_597014
  var valid_597015 = path.getOrDefault("slot")
  valid_597015 = validateParameter(valid_597015, JString, required = true,
                                 default = nil)
  if valid_597015 != nil:
    section.add "slot", valid_597015
  var valid_597016 = path.getOrDefault("subscriptionId")
  valid_597016 = validateParameter(valid_597016, JString, required = true,
                                 default = nil)
  if valid_597016 != nil:
    section.add "subscriptionId", valid_597016
  var valid_597017 = path.getOrDefault("baseAddress")
  valid_597017 = validateParameter(valid_597017, JString, required = true,
                                 default = nil)
  if valid_597017 != nil:
    section.add "baseAddress", valid_597017
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597018 = query.getOrDefault("api-version")
  valid_597018 = validateParameter(valid_597018, JString, required = true,
                                 default = nil)
  if valid_597018 != nil:
    section.add "api-version", valid_597018
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597019: Call_WebAppsGetProcessModuleSlot_597009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597019.validator(path, query, header, formData, body)
  let scheme = call_597019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597019.url(scheme.get, call_597019.host, call_597019.base,
                         call_597019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597019, url, valid)

proc call*(call_597020: Call_WebAppsGetProcessModuleSlot_597009;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_597021 = newJObject()
  var query_597022 = newJObject()
  add(path_597021, "resourceGroupName", newJString(resourceGroupName))
  add(query_597022, "api-version", newJString(apiVersion))
  add(path_597021, "name", newJString(name))
  add(path_597021, "processId", newJString(processId))
  add(path_597021, "slot", newJString(slot))
  add(path_597021, "subscriptionId", newJString(subscriptionId))
  add(path_597021, "baseAddress", newJString(baseAddress))
  result = call_597020.call(path_597021, query_597022, nil, nil, nil)

var webAppsGetProcessModuleSlot* = Call_WebAppsGetProcessModuleSlot_597009(
    name: "webAppsGetProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModuleSlot_597010, base: "",
    url: url_WebAppsGetProcessModuleSlot_597011, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreadsSlot_597023 = ref object of OpenApiRestCall_593437
proc url_WebAppsListProcessThreadsSlot_597025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreadsSlot_597024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597026 = path.getOrDefault("resourceGroupName")
  valid_597026 = validateParameter(valid_597026, JString, required = true,
                                 default = nil)
  if valid_597026 != nil:
    section.add "resourceGroupName", valid_597026
  var valid_597027 = path.getOrDefault("name")
  valid_597027 = validateParameter(valid_597027, JString, required = true,
                                 default = nil)
  if valid_597027 != nil:
    section.add "name", valid_597027
  var valid_597028 = path.getOrDefault("processId")
  valid_597028 = validateParameter(valid_597028, JString, required = true,
                                 default = nil)
  if valid_597028 != nil:
    section.add "processId", valid_597028
  var valid_597029 = path.getOrDefault("slot")
  valid_597029 = validateParameter(valid_597029, JString, required = true,
                                 default = nil)
  if valid_597029 != nil:
    section.add "slot", valid_597029
  var valid_597030 = path.getOrDefault("subscriptionId")
  valid_597030 = validateParameter(valid_597030, JString, required = true,
                                 default = nil)
  if valid_597030 != nil:
    section.add "subscriptionId", valid_597030
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597031 = query.getOrDefault("api-version")
  valid_597031 = validateParameter(valid_597031, JString, required = true,
                                 default = nil)
  if valid_597031 != nil:
    section.add "api-version", valid_597031
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597032: Call_WebAppsListProcessThreadsSlot_597023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_597032.validator(path, query, header, formData, body)
  let scheme = call_597032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597032.url(scheme.get, call_597032.host, call_597032.base,
                         call_597032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597032, url, valid)

proc call*(call_597033: Call_WebAppsListProcessThreadsSlot_597023;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597034 = newJObject()
  var query_597035 = newJObject()
  add(path_597034, "resourceGroupName", newJString(resourceGroupName))
  add(query_597035, "api-version", newJString(apiVersion))
  add(path_597034, "name", newJString(name))
  add(path_597034, "processId", newJString(processId))
  add(path_597034, "slot", newJString(slot))
  add(path_597034, "subscriptionId", newJString(subscriptionId))
  result = call_597033.call(path_597034, query_597035, nil, nil, nil)

var webAppsListProcessThreadsSlot* = Call_WebAppsListProcessThreadsSlot_597023(
    name: "webAppsListProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreadsSlot_597024, base: "",
    url: url_WebAppsListProcessThreadsSlot_597025, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThreadSlot_597036 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetProcessThreadSlot_597038(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThreadSlot_597037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597039 = path.getOrDefault("resourceGroupName")
  valid_597039 = validateParameter(valid_597039, JString, required = true,
                                 default = nil)
  if valid_597039 != nil:
    section.add "resourceGroupName", valid_597039
  var valid_597040 = path.getOrDefault("name")
  valid_597040 = validateParameter(valid_597040, JString, required = true,
                                 default = nil)
  if valid_597040 != nil:
    section.add "name", valid_597040
  var valid_597041 = path.getOrDefault("processId")
  valid_597041 = validateParameter(valid_597041, JString, required = true,
                                 default = nil)
  if valid_597041 != nil:
    section.add "processId", valid_597041
  var valid_597042 = path.getOrDefault("slot")
  valid_597042 = validateParameter(valid_597042, JString, required = true,
                                 default = nil)
  if valid_597042 != nil:
    section.add "slot", valid_597042
  var valid_597043 = path.getOrDefault("subscriptionId")
  valid_597043 = validateParameter(valid_597043, JString, required = true,
                                 default = nil)
  if valid_597043 != nil:
    section.add "subscriptionId", valid_597043
  var valid_597044 = path.getOrDefault("threadId")
  valid_597044 = validateParameter(valid_597044, JString, required = true,
                                 default = nil)
  if valid_597044 != nil:
    section.add "threadId", valid_597044
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597045 = query.getOrDefault("api-version")
  valid_597045 = validateParameter(valid_597045, JString, required = true,
                                 default = nil)
  if valid_597045 != nil:
    section.add "api-version", valid_597045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597046: Call_WebAppsGetProcessThreadSlot_597036; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_597046.validator(path, query, header, formData, body)
  let scheme = call_597046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597046.url(scheme.get, call_597046.host, call_597046.base,
                         call_597046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597046, url, valid)

proc call*(call_597047: Call_WebAppsGetProcessThreadSlot_597036;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_597048 = newJObject()
  var query_597049 = newJObject()
  add(path_597048, "resourceGroupName", newJString(resourceGroupName))
  add(query_597049, "api-version", newJString(apiVersion))
  add(path_597048, "name", newJString(name))
  add(path_597048, "processId", newJString(processId))
  add(path_597048, "slot", newJString(slot))
  add(path_597048, "subscriptionId", newJString(subscriptionId))
  add(path_597048, "threadId", newJString(threadId))
  result = call_597047.call(path_597048, query_597049, nil, nil, nil)

var webAppsGetProcessThreadSlot* = Call_WebAppsGetProcessThreadSlot_597036(
    name: "webAppsGetProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThreadSlot_597037, base: "",
    url: url_WebAppsGetProcessThreadSlot_597038, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificatesSlot_597050 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublicCertificatesSlot_597052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificatesSlot_597051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597053 = path.getOrDefault("resourceGroupName")
  valid_597053 = validateParameter(valid_597053, JString, required = true,
                                 default = nil)
  if valid_597053 != nil:
    section.add "resourceGroupName", valid_597053
  var valid_597054 = path.getOrDefault("name")
  valid_597054 = validateParameter(valid_597054, JString, required = true,
                                 default = nil)
  if valid_597054 != nil:
    section.add "name", valid_597054
  var valid_597055 = path.getOrDefault("slot")
  valid_597055 = validateParameter(valid_597055, JString, required = true,
                                 default = nil)
  if valid_597055 != nil:
    section.add "slot", valid_597055
  var valid_597056 = path.getOrDefault("subscriptionId")
  valid_597056 = validateParameter(valid_597056, JString, required = true,
                                 default = nil)
  if valid_597056 != nil:
    section.add "subscriptionId", valid_597056
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597057 = query.getOrDefault("api-version")
  valid_597057 = validateParameter(valid_597057, JString, required = true,
                                 default = nil)
  if valid_597057 != nil:
    section.add "api-version", valid_597057
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597058: Call_WebAppsListPublicCertificatesSlot_597050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_597058.validator(path, query, header, formData, body)
  let scheme = call_597058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597058.url(scheme.get, call_597058.host, call_597058.base,
                         call_597058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597058, url, valid)

proc call*(call_597059: Call_WebAppsListPublicCertificatesSlot_597050;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificatesSlot
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597060 = newJObject()
  var query_597061 = newJObject()
  add(path_597060, "resourceGroupName", newJString(resourceGroupName))
  add(query_597061, "api-version", newJString(apiVersion))
  add(path_597060, "name", newJString(name))
  add(path_597060, "slot", newJString(slot))
  add(path_597060, "subscriptionId", newJString(subscriptionId))
  result = call_597059.call(path_597060, query_597061, nil, nil, nil)

var webAppsListPublicCertificatesSlot* = Call_WebAppsListPublicCertificatesSlot_597050(
    name: "webAppsListPublicCertificatesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    validator: validate_WebAppsListPublicCertificatesSlot_597051, base: "",
    url: url_WebAppsListPublicCertificatesSlot_597052, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificateSlot_597075 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdatePublicCertificateSlot_597077(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificateSlot_597076(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597078 = path.getOrDefault("resourceGroupName")
  valid_597078 = validateParameter(valid_597078, JString, required = true,
                                 default = nil)
  if valid_597078 != nil:
    section.add "resourceGroupName", valid_597078
  var valid_597079 = path.getOrDefault("name")
  valid_597079 = validateParameter(valid_597079, JString, required = true,
                                 default = nil)
  if valid_597079 != nil:
    section.add "name", valid_597079
  var valid_597080 = path.getOrDefault("slot")
  valid_597080 = validateParameter(valid_597080, JString, required = true,
                                 default = nil)
  if valid_597080 != nil:
    section.add "slot", valid_597080
  var valid_597081 = path.getOrDefault("subscriptionId")
  valid_597081 = validateParameter(valid_597081, JString, required = true,
                                 default = nil)
  if valid_597081 != nil:
    section.add "subscriptionId", valid_597081
  var valid_597082 = path.getOrDefault("publicCertificateName")
  valid_597082 = validateParameter(valid_597082, JString, required = true,
                                 default = nil)
  if valid_597082 != nil:
    section.add "publicCertificateName", valid_597082
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597083 = query.getOrDefault("api-version")
  valid_597083 = validateParameter(valid_597083, JString, required = true,
                                 default = nil)
  if valid_597083 != nil:
    section.add "api-version", valid_597083
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597085: Call_WebAppsCreateOrUpdatePublicCertificateSlot_597075;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_597085.validator(path, query, header, formData, body)
  let scheme = call_597085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597085.url(scheme.get, call_597085.host, call_597085.base,
                         call_597085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597085, url, valid)

proc call*(call_597086: Call_WebAppsCreateOrUpdatePublicCertificateSlot_597075;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificateSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_597087 = newJObject()
  var query_597088 = newJObject()
  var body_597089 = newJObject()
  add(path_597087, "resourceGroupName", newJString(resourceGroupName))
  add(query_597088, "api-version", newJString(apiVersion))
  add(path_597087, "name", newJString(name))
  add(path_597087, "slot", newJString(slot))
  add(path_597087, "subscriptionId", newJString(subscriptionId))
  add(path_597087, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_597089 = publicCertificate
  result = call_597086.call(path_597087, query_597088, nil, nil, body_597089)

var webAppsCreateOrUpdatePublicCertificateSlot* = Call_WebAppsCreateOrUpdatePublicCertificateSlot_597075(
    name: "webAppsCreateOrUpdatePublicCertificateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificateSlot_597076,
    base: "", url: url_WebAppsCreateOrUpdatePublicCertificateSlot_597077,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificateSlot_597062 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetPublicCertificateSlot_597064(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificateSlot_597063(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597065 = path.getOrDefault("resourceGroupName")
  valid_597065 = validateParameter(valid_597065, JString, required = true,
                                 default = nil)
  if valid_597065 != nil:
    section.add "resourceGroupName", valid_597065
  var valid_597066 = path.getOrDefault("name")
  valid_597066 = validateParameter(valid_597066, JString, required = true,
                                 default = nil)
  if valid_597066 != nil:
    section.add "name", valid_597066
  var valid_597067 = path.getOrDefault("slot")
  valid_597067 = validateParameter(valid_597067, JString, required = true,
                                 default = nil)
  if valid_597067 != nil:
    section.add "slot", valid_597067
  var valid_597068 = path.getOrDefault("subscriptionId")
  valid_597068 = validateParameter(valid_597068, JString, required = true,
                                 default = nil)
  if valid_597068 != nil:
    section.add "subscriptionId", valid_597068
  var valid_597069 = path.getOrDefault("publicCertificateName")
  valid_597069 = validateParameter(valid_597069, JString, required = true,
                                 default = nil)
  if valid_597069 != nil:
    section.add "publicCertificateName", valid_597069
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597070 = query.getOrDefault("api-version")
  valid_597070 = validateParameter(valid_597070, JString, required = true,
                                 default = nil)
  if valid_597070 != nil:
    section.add "api-version", valid_597070
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597071: Call_WebAppsGetPublicCertificateSlot_597062;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_597071.validator(path, query, header, formData, body)
  let scheme = call_597071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597071.url(scheme.get, call_597071.host, call_597071.base,
                         call_597071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597071, url, valid)

proc call*(call_597072: Call_WebAppsGetPublicCertificateSlot_597062;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificateSlot
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_597073 = newJObject()
  var query_597074 = newJObject()
  add(path_597073, "resourceGroupName", newJString(resourceGroupName))
  add(query_597074, "api-version", newJString(apiVersion))
  add(path_597073, "name", newJString(name))
  add(path_597073, "slot", newJString(slot))
  add(path_597073, "subscriptionId", newJString(subscriptionId))
  add(path_597073, "publicCertificateName", newJString(publicCertificateName))
  result = call_597072.call(path_597073, query_597074, nil, nil, nil)

var webAppsGetPublicCertificateSlot* = Call_WebAppsGetPublicCertificateSlot_597062(
    name: "webAppsGetPublicCertificateSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificateSlot_597063, base: "",
    url: url_WebAppsGetPublicCertificateSlot_597064, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificateSlot_597090 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeletePublicCertificateSlot_597092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificateSlot_597091(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597093 = path.getOrDefault("resourceGroupName")
  valid_597093 = validateParameter(valid_597093, JString, required = true,
                                 default = nil)
  if valid_597093 != nil:
    section.add "resourceGroupName", valid_597093
  var valid_597094 = path.getOrDefault("name")
  valid_597094 = validateParameter(valid_597094, JString, required = true,
                                 default = nil)
  if valid_597094 != nil:
    section.add "name", valid_597094
  var valid_597095 = path.getOrDefault("slot")
  valid_597095 = validateParameter(valid_597095, JString, required = true,
                                 default = nil)
  if valid_597095 != nil:
    section.add "slot", valid_597095
  var valid_597096 = path.getOrDefault("subscriptionId")
  valid_597096 = validateParameter(valid_597096, JString, required = true,
                                 default = nil)
  if valid_597096 != nil:
    section.add "subscriptionId", valid_597096
  var valid_597097 = path.getOrDefault("publicCertificateName")
  valid_597097 = validateParameter(valid_597097, JString, required = true,
                                 default = nil)
  if valid_597097 != nil:
    section.add "publicCertificateName", valid_597097
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597098 = query.getOrDefault("api-version")
  valid_597098 = validateParameter(valid_597098, JString, required = true,
                                 default = nil)
  if valid_597098 != nil:
    section.add "api-version", valid_597098
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597099: Call_WebAppsDeletePublicCertificateSlot_597090;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_597099.validator(path, query, header, formData, body)
  let scheme = call_597099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597099.url(scheme.get, call_597099.host, call_597099.base,
                         call_597099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597099, url, valid)

proc call*(call_597100: Call_WebAppsDeletePublicCertificateSlot_597090;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificateSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_597101 = newJObject()
  var query_597102 = newJObject()
  add(path_597101, "resourceGroupName", newJString(resourceGroupName))
  add(query_597102, "api-version", newJString(apiVersion))
  add(path_597101, "name", newJString(name))
  add(path_597101, "slot", newJString(slot))
  add(path_597101, "subscriptionId", newJString(subscriptionId))
  add(path_597101, "publicCertificateName", newJString(publicCertificateName))
  result = call_597100.call(path_597101, query_597102, nil, nil, nil)

var webAppsDeletePublicCertificateSlot* = Call_WebAppsDeletePublicCertificateSlot_597090(
    name: "webAppsDeletePublicCertificateSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificateSlot_597091, base: "",
    url: url_WebAppsDeletePublicCertificateSlot_597092, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597103 = ref object of OpenApiRestCall_593437
proc url_WebAppsListPublishingProfileXmlWithSecretsSlot_597105(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecretsSlot_597104(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597106 = path.getOrDefault("resourceGroupName")
  valid_597106 = validateParameter(valid_597106, JString, required = true,
                                 default = nil)
  if valid_597106 != nil:
    section.add "resourceGroupName", valid_597106
  var valid_597107 = path.getOrDefault("name")
  valid_597107 = validateParameter(valid_597107, JString, required = true,
                                 default = nil)
  if valid_597107 != nil:
    section.add "name", valid_597107
  var valid_597108 = path.getOrDefault("slot")
  valid_597108 = validateParameter(valid_597108, JString, required = true,
                                 default = nil)
  if valid_597108 != nil:
    section.add "slot", valid_597108
  var valid_597109 = path.getOrDefault("subscriptionId")
  valid_597109 = validateParameter(valid_597109, JString, required = true,
                                 default = nil)
  if valid_597109 != nil:
    section.add "subscriptionId", valid_597109
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597110 = query.getOrDefault("api-version")
  valid_597110 = validateParameter(valid_597110, JString, required = true,
                                 default = nil)
  if valid_597110 != nil:
    section.add "api-version", valid_597110
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597112: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597103;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_597112.validator(path, query, header, formData, body)
  let scheme = call_597112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597112.url(scheme.get, call_597112.host, call_597112.base,
                         call_597112.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597112, url, valid)

proc call*(call_597113: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597103;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecretsSlot
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_597114 = newJObject()
  var query_597115 = newJObject()
  var body_597116 = newJObject()
  add(path_597114, "resourceGroupName", newJString(resourceGroupName))
  add(query_597115, "api-version", newJString(apiVersion))
  add(path_597114, "name", newJString(name))
  add(path_597114, "slot", newJString(slot))
  add(path_597114, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_597116 = publishingProfileOptions
  result = call_597113.call(path_597114, query_597115, nil, nil, body_597116)

var webAppsListPublishingProfileXmlWithSecretsSlot* = Call_WebAppsListPublishingProfileXmlWithSecretsSlot_597103(
    name: "webAppsListPublishingProfileXmlWithSecretsSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecretsSlot_597104,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecretsSlot_597105,
    schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSlot_597117 = ref object of OpenApiRestCall_593437
proc url_WebAppsRecoverSlot_597119(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSlot_597118(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Recovers a web app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597120 = path.getOrDefault("resourceGroupName")
  valid_597120 = validateParameter(valid_597120, JString, required = true,
                                 default = nil)
  if valid_597120 != nil:
    section.add "resourceGroupName", valid_597120
  var valid_597121 = path.getOrDefault("name")
  valid_597121 = validateParameter(valid_597121, JString, required = true,
                                 default = nil)
  if valid_597121 != nil:
    section.add "name", valid_597121
  var valid_597122 = path.getOrDefault("slot")
  valid_597122 = validateParameter(valid_597122, JString, required = true,
                                 default = nil)
  if valid_597122 != nil:
    section.add "slot", valid_597122
  var valid_597123 = path.getOrDefault("subscriptionId")
  valid_597123 = validateParameter(valid_597123, JString, required = true,
                                 default = nil)
  if valid_597123 != nil:
    section.add "subscriptionId", valid_597123
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597124 = query.getOrDefault("api-version")
  valid_597124 = validateParameter(valid_597124, JString, required = true,
                                 default = nil)
  if valid_597124 != nil:
    section.add "api-version", valid_597124
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597126: Call_WebAppsRecoverSlot_597117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Recovers a web app to a previous snapshot.
  ## 
  let valid = call_597126.validator(path, query, header, formData, body)
  let scheme = call_597126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597126.url(scheme.get, call_597126.host, call_597126.base,
                         call_597126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597126, url, valid)

proc call*(call_597127: Call_WebAppsRecoverSlot_597117; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          recoveryEntity: JsonNode): Recallable =
  ## webAppsRecoverSlot
  ## Recovers a web app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   recoveryEntity: JObject (required)
  ##                 : Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_597128 = newJObject()
  var query_597129 = newJObject()
  var body_597130 = newJObject()
  add(path_597128, "resourceGroupName", newJString(resourceGroupName))
  add(query_597129, "api-version", newJString(apiVersion))
  add(path_597128, "name", newJString(name))
  add(path_597128, "slot", newJString(slot))
  add(path_597128, "subscriptionId", newJString(subscriptionId))
  if recoveryEntity != nil:
    body_597130 = recoveryEntity
  result = call_597127.call(path_597128, query_597129, nil, nil, body_597130)

var webAppsRecoverSlot* = Call_WebAppsRecoverSlot_597117(
    name: "webAppsRecoverSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
    validator: validate_WebAppsRecoverSlot_597118, base: "",
    url: url_WebAppsRecoverSlot_597119, schemes: {Scheme.Https})
type
  Call_WebAppsResetSlotConfigurationSlot_597131 = ref object of OpenApiRestCall_593437
proc url_WebAppsResetSlotConfigurationSlot_597133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetSlotConfigurationSlot_597132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597134 = path.getOrDefault("resourceGroupName")
  valid_597134 = validateParameter(valid_597134, JString, required = true,
                                 default = nil)
  if valid_597134 != nil:
    section.add "resourceGroupName", valid_597134
  var valid_597135 = path.getOrDefault("name")
  valid_597135 = validateParameter(valid_597135, JString, required = true,
                                 default = nil)
  if valid_597135 != nil:
    section.add "name", valid_597135
  var valid_597136 = path.getOrDefault("slot")
  valid_597136 = validateParameter(valid_597136, JString, required = true,
                                 default = nil)
  if valid_597136 != nil:
    section.add "slot", valid_597136
  var valid_597137 = path.getOrDefault("subscriptionId")
  valid_597137 = validateParameter(valid_597137, JString, required = true,
                                 default = nil)
  if valid_597137 != nil:
    section.add "subscriptionId", valid_597137
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597138 = query.getOrDefault("api-version")
  valid_597138 = validateParameter(valid_597138, JString, required = true,
                                 default = nil)
  if valid_597138 != nil:
    section.add "api-version", valid_597138
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597139: Call_WebAppsResetSlotConfigurationSlot_597131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_597139.validator(path, query, header, formData, body)
  let scheme = call_597139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597139.url(scheme.get, call_597139.host, call_597139.base,
                         call_597139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597139, url, valid)

proc call*(call_597140: Call_WebAppsResetSlotConfigurationSlot_597131;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsResetSlotConfigurationSlot
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597141 = newJObject()
  var query_597142 = newJObject()
  add(path_597141, "resourceGroupName", newJString(resourceGroupName))
  add(query_597142, "api-version", newJString(apiVersion))
  add(path_597141, "name", newJString(name))
  add(path_597141, "slot", newJString(slot))
  add(path_597141, "subscriptionId", newJString(subscriptionId))
  result = call_597140.call(path_597141, query_597142, nil, nil, nil)

var webAppsResetSlotConfigurationSlot* = Call_WebAppsResetSlotConfigurationSlot_597131(
    name: "webAppsResetSlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_WebAppsResetSlotConfigurationSlot_597132, base: "",
    url: url_WebAppsResetSlotConfigurationSlot_597133, schemes: {Scheme.Https})
type
  Call_WebAppsRestartSlot_597143 = ref object of OpenApiRestCall_593437
proc url_WebAppsRestartSlot_597145(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestartSlot_597144(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597146 = path.getOrDefault("resourceGroupName")
  valid_597146 = validateParameter(valid_597146, JString, required = true,
                                 default = nil)
  if valid_597146 != nil:
    section.add "resourceGroupName", valid_597146
  var valid_597147 = path.getOrDefault("name")
  valid_597147 = validateParameter(valid_597147, JString, required = true,
                                 default = nil)
  if valid_597147 != nil:
    section.add "name", valid_597147
  var valid_597148 = path.getOrDefault("slot")
  valid_597148 = validateParameter(valid_597148, JString, required = true,
                                 default = nil)
  if valid_597148 != nil:
    section.add "slot", valid_597148
  var valid_597149 = path.getOrDefault("subscriptionId")
  valid_597149 = validateParameter(valid_597149, JString, required = true,
                                 default = nil)
  if valid_597149 != nil:
    section.add "subscriptionId", valid_597149
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597150 = query.getOrDefault("api-version")
  valid_597150 = validateParameter(valid_597150, JString, required = true,
                                 default = nil)
  if valid_597150 != nil:
    section.add "api-version", valid_597150
  var valid_597151 = query.getOrDefault("synchronous")
  valid_597151 = validateParameter(valid_597151, JBool, required = false, default = nil)
  if valid_597151 != nil:
    section.add "synchronous", valid_597151
  var valid_597152 = query.getOrDefault("softRestart")
  valid_597152 = validateParameter(valid_597152, JBool, required = false, default = nil)
  if valid_597152 != nil:
    section.add "softRestart", valid_597152
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597153: Call_WebAppsRestartSlot_597143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_597153.validator(path, query, header, formData, body)
  let scheme = call_597153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597153.url(scheme.get, call_597153.host, call_597153.base,
                         call_597153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597153, url, valid)

proc call*(call_597154: Call_WebAppsRestartSlot_597143; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestartSlot
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_597155 = newJObject()
  var query_597156 = newJObject()
  add(path_597155, "resourceGroupName", newJString(resourceGroupName))
  add(query_597156, "api-version", newJString(apiVersion))
  add(path_597155, "name", newJString(name))
  add(path_597155, "slot", newJString(slot))
  add(path_597155, "subscriptionId", newJString(subscriptionId))
  add(query_597156, "synchronous", newJBool(synchronous))
  add(query_597156, "softRestart", newJBool(softRestart))
  result = call_597154.call(path_597155, query_597156, nil, nil, nil)

var webAppsRestartSlot* = Call_WebAppsRestartSlot_597143(
    name: "webAppsRestartSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_WebAppsRestartSlot_597144, base: "",
    url: url_WebAppsRestartSlot_597145, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensionsSlot_597157 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSiteExtensionsSlot_597159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensionsSlot_597158(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597160 = path.getOrDefault("resourceGroupName")
  valid_597160 = validateParameter(valid_597160, JString, required = true,
                                 default = nil)
  if valid_597160 != nil:
    section.add "resourceGroupName", valid_597160
  var valid_597161 = path.getOrDefault("name")
  valid_597161 = validateParameter(valid_597161, JString, required = true,
                                 default = nil)
  if valid_597161 != nil:
    section.add "name", valid_597161
  var valid_597162 = path.getOrDefault("slot")
  valid_597162 = validateParameter(valid_597162, JString, required = true,
                                 default = nil)
  if valid_597162 != nil:
    section.add "slot", valid_597162
  var valid_597163 = path.getOrDefault("subscriptionId")
  valid_597163 = validateParameter(valid_597163, JString, required = true,
                                 default = nil)
  if valid_597163 != nil:
    section.add "subscriptionId", valid_597163
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597164 = query.getOrDefault("api-version")
  valid_597164 = validateParameter(valid_597164, JString, required = true,
                                 default = nil)
  if valid_597164 != nil:
    section.add "api-version", valid_597164
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597165: Call_WebAppsListSiteExtensionsSlot_597157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of site extensions for a web site, or a deployment slot.
  ## 
  let valid = call_597165.validator(path, query, header, formData, body)
  let scheme = call_597165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597165.url(scheme.get, call_597165.host, call_597165.base,
                         call_597165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597165, url, valid)

proc call*(call_597166: Call_WebAppsListSiteExtensionsSlot_597157;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensionsSlot
  ## Get list of site extensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597167 = newJObject()
  var query_597168 = newJObject()
  add(path_597167, "resourceGroupName", newJString(resourceGroupName))
  add(query_597168, "api-version", newJString(apiVersion))
  add(path_597167, "name", newJString(name))
  add(path_597167, "slot", newJString(slot))
  add(path_597167, "subscriptionId", newJString(subscriptionId))
  result = call_597166.call(path_597167, query_597168, nil, nil, nil)

var webAppsListSiteExtensionsSlot* = Call_WebAppsListSiteExtensionsSlot_597157(
    name: "webAppsListSiteExtensionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    validator: validate_WebAppsListSiteExtensionsSlot_597158, base: "",
    url: url_WebAppsListSiteExtensionsSlot_597159, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtensionSlot_597182 = ref object of OpenApiRestCall_593437
proc url_WebAppsInstallSiteExtensionSlot_597184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtensionSlot_597183(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597185 = path.getOrDefault("resourceGroupName")
  valid_597185 = validateParameter(valid_597185, JString, required = true,
                                 default = nil)
  if valid_597185 != nil:
    section.add "resourceGroupName", valid_597185
  var valid_597186 = path.getOrDefault("name")
  valid_597186 = validateParameter(valid_597186, JString, required = true,
                                 default = nil)
  if valid_597186 != nil:
    section.add "name", valid_597186
  var valid_597187 = path.getOrDefault("slot")
  valid_597187 = validateParameter(valid_597187, JString, required = true,
                                 default = nil)
  if valid_597187 != nil:
    section.add "slot", valid_597187
  var valid_597188 = path.getOrDefault("subscriptionId")
  valid_597188 = validateParameter(valid_597188, JString, required = true,
                                 default = nil)
  if valid_597188 != nil:
    section.add "subscriptionId", valid_597188
  var valid_597189 = path.getOrDefault("siteExtensionId")
  valid_597189 = validateParameter(valid_597189, JString, required = true,
                                 default = nil)
  if valid_597189 != nil:
    section.add "siteExtensionId", valid_597189
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597190 = query.getOrDefault("api-version")
  valid_597190 = validateParameter(valid_597190, JString, required = true,
                                 default = nil)
  if valid_597190 != nil:
    section.add "api-version", valid_597190
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597191: Call_WebAppsInstallSiteExtensionSlot_597182;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_597191.validator(path, query, header, formData, body)
  let scheme = call_597191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597191.url(scheme.get, call_597191.host, call_597191.base,
                         call_597191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597191, url, valid)

proc call*(call_597192: Call_WebAppsInstallSiteExtensionSlot_597182;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtensionSlot
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_597193 = newJObject()
  var query_597194 = newJObject()
  add(path_597193, "resourceGroupName", newJString(resourceGroupName))
  add(query_597194, "api-version", newJString(apiVersion))
  add(path_597193, "name", newJString(name))
  add(path_597193, "slot", newJString(slot))
  add(path_597193, "subscriptionId", newJString(subscriptionId))
  add(path_597193, "siteExtensionId", newJString(siteExtensionId))
  result = call_597192.call(path_597193, query_597194, nil, nil, nil)

var webAppsInstallSiteExtensionSlot* = Call_WebAppsInstallSiteExtensionSlot_597182(
    name: "webAppsInstallSiteExtensionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtensionSlot_597183, base: "",
    url: url_WebAppsInstallSiteExtensionSlot_597184, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtensionSlot_597169 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSiteExtensionSlot_597171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtensionSlot_597170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597172 = path.getOrDefault("resourceGroupName")
  valid_597172 = validateParameter(valid_597172, JString, required = true,
                                 default = nil)
  if valid_597172 != nil:
    section.add "resourceGroupName", valid_597172
  var valid_597173 = path.getOrDefault("name")
  valid_597173 = validateParameter(valid_597173, JString, required = true,
                                 default = nil)
  if valid_597173 != nil:
    section.add "name", valid_597173
  var valid_597174 = path.getOrDefault("slot")
  valid_597174 = validateParameter(valid_597174, JString, required = true,
                                 default = nil)
  if valid_597174 != nil:
    section.add "slot", valid_597174
  var valid_597175 = path.getOrDefault("subscriptionId")
  valid_597175 = validateParameter(valid_597175, JString, required = true,
                                 default = nil)
  if valid_597175 != nil:
    section.add "subscriptionId", valid_597175
  var valid_597176 = path.getOrDefault("siteExtensionId")
  valid_597176 = validateParameter(valid_597176, JString, required = true,
                                 default = nil)
  if valid_597176 != nil:
    section.add "siteExtensionId", valid_597176
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597177 = query.getOrDefault("api-version")
  valid_597177 = validateParameter(valid_597177, JString, required = true,
                                 default = nil)
  if valid_597177 != nil:
    section.add "api-version", valid_597177
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597178: Call_WebAppsGetSiteExtensionSlot_597169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_597178.validator(path, query, header, formData, body)
  let scheme = call_597178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597178.url(scheme.get, call_597178.host, call_597178.base,
                         call_597178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597178, url, valid)

proc call*(call_597179: Call_WebAppsGetSiteExtensionSlot_597169;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtensionSlot
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_597180 = newJObject()
  var query_597181 = newJObject()
  add(path_597180, "resourceGroupName", newJString(resourceGroupName))
  add(query_597181, "api-version", newJString(apiVersion))
  add(path_597180, "name", newJString(name))
  add(path_597180, "slot", newJString(slot))
  add(path_597180, "subscriptionId", newJString(subscriptionId))
  add(path_597180, "siteExtensionId", newJString(siteExtensionId))
  result = call_597179.call(path_597180, query_597181, nil, nil, nil)

var webAppsGetSiteExtensionSlot* = Call_WebAppsGetSiteExtensionSlot_597169(
    name: "webAppsGetSiteExtensionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtensionSlot_597170, base: "",
    url: url_WebAppsGetSiteExtensionSlot_597171, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtensionSlot_597195 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSiteExtensionSlot_597197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtensionSlot_597196(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597198 = path.getOrDefault("resourceGroupName")
  valid_597198 = validateParameter(valid_597198, JString, required = true,
                                 default = nil)
  if valid_597198 != nil:
    section.add "resourceGroupName", valid_597198
  var valid_597199 = path.getOrDefault("name")
  valid_597199 = validateParameter(valid_597199, JString, required = true,
                                 default = nil)
  if valid_597199 != nil:
    section.add "name", valid_597199
  var valid_597200 = path.getOrDefault("slot")
  valid_597200 = validateParameter(valid_597200, JString, required = true,
                                 default = nil)
  if valid_597200 != nil:
    section.add "slot", valid_597200
  var valid_597201 = path.getOrDefault("subscriptionId")
  valid_597201 = validateParameter(valid_597201, JString, required = true,
                                 default = nil)
  if valid_597201 != nil:
    section.add "subscriptionId", valid_597201
  var valid_597202 = path.getOrDefault("siteExtensionId")
  valid_597202 = validateParameter(valid_597202, JString, required = true,
                                 default = nil)
  if valid_597202 != nil:
    section.add "siteExtensionId", valid_597202
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597203 = query.getOrDefault("api-version")
  valid_597203 = validateParameter(valid_597203, JString, required = true,
                                 default = nil)
  if valid_597203 != nil:
    section.add "api-version", valid_597203
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597204: Call_WebAppsDeleteSiteExtensionSlot_597195; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_597204.validator(path, query, header, formData, body)
  let scheme = call_597204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597204.url(scheme.get, call_597204.host, call_597204.base,
                         call_597204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597204, url, valid)

proc call*(call_597205: Call_WebAppsDeleteSiteExtensionSlot_597195;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtensionSlot
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_597206 = newJObject()
  var query_597207 = newJObject()
  add(path_597206, "resourceGroupName", newJString(resourceGroupName))
  add(query_597207, "api-version", newJString(apiVersion))
  add(path_597206, "name", newJString(name))
  add(path_597206, "slot", newJString(slot))
  add(path_597206, "subscriptionId", newJString(subscriptionId))
  add(path_597206, "siteExtensionId", newJString(siteExtensionId))
  result = call_597205.call(path_597206, query_597207, nil, nil, nil)

var webAppsDeleteSiteExtensionSlot* = Call_WebAppsDeleteSiteExtensionSlot_597195(
    name: "webAppsDeleteSiteExtensionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtensionSlot_597196, base: "",
    url: url_WebAppsDeleteSiteExtensionSlot_597197, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesSlot_597208 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlotDifferencesSlot_597210(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesSlot_597209(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597211 = path.getOrDefault("resourceGroupName")
  valid_597211 = validateParameter(valid_597211, JString, required = true,
                                 default = nil)
  if valid_597211 != nil:
    section.add "resourceGroupName", valid_597211
  var valid_597212 = path.getOrDefault("name")
  valid_597212 = validateParameter(valid_597212, JString, required = true,
                                 default = nil)
  if valid_597212 != nil:
    section.add "name", valid_597212
  var valid_597213 = path.getOrDefault("slot")
  valid_597213 = validateParameter(valid_597213, JString, required = true,
                                 default = nil)
  if valid_597213 != nil:
    section.add "slot", valid_597213
  var valid_597214 = path.getOrDefault("subscriptionId")
  valid_597214 = validateParameter(valid_597214, JString, required = true,
                                 default = nil)
  if valid_597214 != nil:
    section.add "subscriptionId", valid_597214
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597215 = query.getOrDefault("api-version")
  valid_597215 = validateParameter(valid_597215, JString, required = true,
                                 default = nil)
  if valid_597215 != nil:
    section.add "api-version", valid_597215
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597217: Call_WebAppsListSlotDifferencesSlot_597208; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_597217.validator(path, query, header, formData, body)
  let scheme = call_597217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597217.url(scheme.get, call_597217.host, call_597217.base,
                         call_597217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597217, url, valid)

proc call*(call_597218: Call_WebAppsListSlotDifferencesSlot_597208;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesSlot
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_597219 = newJObject()
  var query_597220 = newJObject()
  var body_597221 = newJObject()
  add(path_597219, "resourceGroupName", newJString(resourceGroupName))
  add(query_597220, "api-version", newJString(apiVersion))
  add(path_597219, "name", newJString(name))
  add(path_597219, "slot", newJString(slot))
  add(path_597219, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597221 = slotSwapEntity
  result = call_597218.call(path_597219, query_597220, nil, nil, body_597221)

var webAppsListSlotDifferencesSlot* = Call_WebAppsListSlotDifferencesSlot_597208(
    name: "webAppsListSlotDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesSlot_597209, base: "",
    url: url_WebAppsListSlotDifferencesSlot_597210, schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotSlot_597222 = ref object of OpenApiRestCall_593437
proc url_WebAppsSwapSlotSlot_597224(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotSlot_597223(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597225 = path.getOrDefault("resourceGroupName")
  valid_597225 = validateParameter(valid_597225, JString, required = true,
                                 default = nil)
  if valid_597225 != nil:
    section.add "resourceGroupName", valid_597225
  var valid_597226 = path.getOrDefault("name")
  valid_597226 = validateParameter(valid_597226, JString, required = true,
                                 default = nil)
  if valid_597226 != nil:
    section.add "name", valid_597226
  var valid_597227 = path.getOrDefault("slot")
  valid_597227 = validateParameter(valid_597227, JString, required = true,
                                 default = nil)
  if valid_597227 != nil:
    section.add "slot", valid_597227
  var valid_597228 = path.getOrDefault("subscriptionId")
  valid_597228 = validateParameter(valid_597228, JString, required = true,
                                 default = nil)
  if valid_597228 != nil:
    section.add "subscriptionId", valid_597228
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597229 = query.getOrDefault("api-version")
  valid_597229 = validateParameter(valid_597229, JString, required = true,
                                 default = nil)
  if valid_597229 != nil:
    section.add "api-version", valid_597229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597231: Call_WebAppsSwapSlotSlot_597222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_597231.validator(path, query, header, formData, body)
  let scheme = call_597231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597231.url(scheme.get, call_597231.host, call_597231.base,
                         call_597231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597231, url, valid)

proc call*(call_597232: Call_WebAppsSwapSlotSlot_597222; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotSlot
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_597233 = newJObject()
  var query_597234 = newJObject()
  var body_597235 = newJObject()
  add(path_597233, "resourceGroupName", newJString(resourceGroupName))
  add(query_597234, "api-version", newJString(apiVersion))
  add(path_597233, "name", newJString(name))
  add(path_597233, "slot", newJString(slot))
  add(path_597233, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597235 = slotSwapEntity
  result = call_597232.call(path_597233, query_597234, nil, nil, body_597235)

var webAppsSwapSlotSlot* = Call_WebAppsSwapSlotSlot_597222(
    name: "webAppsSwapSlotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_WebAppsSwapSlotSlot_597223, base: "",
    url: url_WebAppsSwapSlotSlot_597224, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsSlot_597236 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSnapshotsSlot_597238(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsSlot_597237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597239 = path.getOrDefault("resourceGroupName")
  valid_597239 = validateParameter(valid_597239, JString, required = true,
                                 default = nil)
  if valid_597239 != nil:
    section.add "resourceGroupName", valid_597239
  var valid_597240 = path.getOrDefault("name")
  valid_597240 = validateParameter(valid_597240, JString, required = true,
                                 default = nil)
  if valid_597240 != nil:
    section.add "name", valid_597240
  var valid_597241 = path.getOrDefault("slot")
  valid_597241 = validateParameter(valid_597241, JString, required = true,
                                 default = nil)
  if valid_597241 != nil:
    section.add "slot", valid_597241
  var valid_597242 = path.getOrDefault("subscriptionId")
  valid_597242 = validateParameter(valid_597242, JString, required = true,
                                 default = nil)
  if valid_597242 != nil:
    section.add "subscriptionId", valid_597242
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597243 = query.getOrDefault("api-version")
  valid_597243 = validateParameter(valid_597243, JString, required = true,
                                 default = nil)
  if valid_597243 != nil:
    section.add "api-version", valid_597243
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597244: Call_WebAppsListSnapshotsSlot_597236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_597244.validator(path, query, header, formData, body)
  let scheme = call_597244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597244.url(scheme.get, call_597244.host, call_597244.base,
                         call_597244.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597244, url, valid)

proc call*(call_597245: Call_WebAppsListSnapshotsSlot_597236;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsSlot
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597246 = newJObject()
  var query_597247 = newJObject()
  add(path_597246, "resourceGroupName", newJString(resourceGroupName))
  add(query_597247, "api-version", newJString(apiVersion))
  add(path_597246, "name", newJString(name))
  add(path_597246, "slot", newJString(slot))
  add(path_597246, "subscriptionId", newJString(subscriptionId))
  result = call_597245.call(path_597246, query_597247, nil, nil, nil)

var webAppsListSnapshotsSlot* = Call_WebAppsListSnapshotsSlot_597236(
    name: "webAppsListSnapshotsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_WebAppsListSnapshotsSlot_597237, base: "",
    url: url_WebAppsListSnapshotsSlot_597238, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControlSlot_597260 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSourceControlSlot_597262(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControlSlot_597261(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597263 = path.getOrDefault("resourceGroupName")
  valid_597263 = validateParameter(valid_597263, JString, required = true,
                                 default = nil)
  if valid_597263 != nil:
    section.add "resourceGroupName", valid_597263
  var valid_597264 = path.getOrDefault("name")
  valid_597264 = validateParameter(valid_597264, JString, required = true,
                                 default = nil)
  if valid_597264 != nil:
    section.add "name", valid_597264
  var valid_597265 = path.getOrDefault("slot")
  valid_597265 = validateParameter(valid_597265, JString, required = true,
                                 default = nil)
  if valid_597265 != nil:
    section.add "slot", valid_597265
  var valid_597266 = path.getOrDefault("subscriptionId")
  valid_597266 = validateParameter(valid_597266, JString, required = true,
                                 default = nil)
  if valid_597266 != nil:
    section.add "subscriptionId", valid_597266
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597267 = query.getOrDefault("api-version")
  valid_597267 = validateParameter(valid_597267, JString, required = true,
                                 default = nil)
  if valid_597267 != nil:
    section.add "api-version", valid_597267
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597269: Call_WebAppsCreateOrUpdateSourceControlSlot_597260;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_597269.validator(path, query, header, formData, body)
  let scheme = call_597269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597269.url(scheme.get, call_597269.host, call_597269.base,
                         call_597269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597269, url, valid)

proc call*(call_597270: Call_WebAppsCreateOrUpdateSourceControlSlot_597260;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_597271 = newJObject()
  var query_597272 = newJObject()
  var body_597273 = newJObject()
  add(path_597271, "resourceGroupName", newJString(resourceGroupName))
  add(query_597272, "api-version", newJString(apiVersion))
  add(path_597271, "name", newJString(name))
  add(path_597271, "slot", newJString(slot))
  add(path_597271, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597273 = siteSourceControl
  result = call_597270.call(path_597271, query_597272, nil, nil, body_597273)

var webAppsCreateOrUpdateSourceControlSlot* = Call_WebAppsCreateOrUpdateSourceControlSlot_597260(
    name: "webAppsCreateOrUpdateSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControlSlot_597261, base: "",
    url: url_WebAppsCreateOrUpdateSourceControlSlot_597262,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControlSlot_597248 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSourceControlSlot_597250(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControlSlot_597249(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597251 = path.getOrDefault("resourceGroupName")
  valid_597251 = validateParameter(valid_597251, JString, required = true,
                                 default = nil)
  if valid_597251 != nil:
    section.add "resourceGroupName", valid_597251
  var valid_597252 = path.getOrDefault("name")
  valid_597252 = validateParameter(valid_597252, JString, required = true,
                                 default = nil)
  if valid_597252 != nil:
    section.add "name", valid_597252
  var valid_597253 = path.getOrDefault("slot")
  valid_597253 = validateParameter(valid_597253, JString, required = true,
                                 default = nil)
  if valid_597253 != nil:
    section.add "slot", valid_597253
  var valid_597254 = path.getOrDefault("subscriptionId")
  valid_597254 = validateParameter(valid_597254, JString, required = true,
                                 default = nil)
  if valid_597254 != nil:
    section.add "subscriptionId", valid_597254
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597255 = query.getOrDefault("api-version")
  valid_597255 = validateParameter(valid_597255, JString, required = true,
                                 default = nil)
  if valid_597255 != nil:
    section.add "api-version", valid_597255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597256: Call_WebAppsGetSourceControlSlot_597248; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_597256.validator(path, query, header, formData, body)
  let scheme = call_597256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597256.url(scheme.get, call_597256.host, call_597256.base,
                         call_597256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597256, url, valid)

proc call*(call_597257: Call_WebAppsGetSourceControlSlot_597248;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControlSlot
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597258 = newJObject()
  var query_597259 = newJObject()
  add(path_597258, "resourceGroupName", newJString(resourceGroupName))
  add(query_597259, "api-version", newJString(apiVersion))
  add(path_597258, "name", newJString(name))
  add(path_597258, "slot", newJString(slot))
  add(path_597258, "subscriptionId", newJString(subscriptionId))
  result = call_597257.call(path_597258, query_597259, nil, nil, nil)

var webAppsGetSourceControlSlot* = Call_WebAppsGetSourceControlSlot_597248(
    name: "webAppsGetSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControlSlot_597249, base: "",
    url: url_WebAppsGetSourceControlSlot_597250, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControlSlot_597286 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSourceControlSlot_597288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControlSlot_597287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597289 = path.getOrDefault("resourceGroupName")
  valid_597289 = validateParameter(valid_597289, JString, required = true,
                                 default = nil)
  if valid_597289 != nil:
    section.add "resourceGroupName", valid_597289
  var valid_597290 = path.getOrDefault("name")
  valid_597290 = validateParameter(valid_597290, JString, required = true,
                                 default = nil)
  if valid_597290 != nil:
    section.add "name", valid_597290
  var valid_597291 = path.getOrDefault("slot")
  valid_597291 = validateParameter(valid_597291, JString, required = true,
                                 default = nil)
  if valid_597291 != nil:
    section.add "slot", valid_597291
  var valid_597292 = path.getOrDefault("subscriptionId")
  valid_597292 = validateParameter(valid_597292, JString, required = true,
                                 default = nil)
  if valid_597292 != nil:
    section.add "subscriptionId", valid_597292
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597293 = query.getOrDefault("api-version")
  valid_597293 = validateParameter(valid_597293, JString, required = true,
                                 default = nil)
  if valid_597293 != nil:
    section.add "api-version", valid_597293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597295: Call_WebAppsUpdateSourceControlSlot_597286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_597295.validator(path, query, header, formData, body)
  let scheme = call_597295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597295.url(scheme.get, call_597295.host, call_597295.base,
                         call_597295.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597295, url, valid)

proc call*(call_597296: Call_WebAppsUpdateSourceControlSlot_597286;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_597297 = newJObject()
  var query_597298 = newJObject()
  var body_597299 = newJObject()
  add(path_597297, "resourceGroupName", newJString(resourceGroupName))
  add(query_597298, "api-version", newJString(apiVersion))
  add(path_597297, "name", newJString(name))
  add(path_597297, "slot", newJString(slot))
  add(path_597297, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597299 = siteSourceControl
  result = call_597296.call(path_597297, query_597298, nil, nil, body_597299)

var webAppsUpdateSourceControlSlot* = Call_WebAppsUpdateSourceControlSlot_597286(
    name: "webAppsUpdateSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControlSlot_597287, base: "",
    url: url_WebAppsUpdateSourceControlSlot_597288, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControlSlot_597274 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSourceControlSlot_597276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControlSlot_597275(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597277 = path.getOrDefault("resourceGroupName")
  valid_597277 = validateParameter(valid_597277, JString, required = true,
                                 default = nil)
  if valid_597277 != nil:
    section.add "resourceGroupName", valid_597277
  var valid_597278 = path.getOrDefault("name")
  valid_597278 = validateParameter(valid_597278, JString, required = true,
                                 default = nil)
  if valid_597278 != nil:
    section.add "name", valid_597278
  var valid_597279 = path.getOrDefault("slot")
  valid_597279 = validateParameter(valid_597279, JString, required = true,
                                 default = nil)
  if valid_597279 != nil:
    section.add "slot", valid_597279
  var valid_597280 = path.getOrDefault("subscriptionId")
  valid_597280 = validateParameter(valid_597280, JString, required = true,
                                 default = nil)
  if valid_597280 != nil:
    section.add "subscriptionId", valid_597280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597281 = query.getOrDefault("api-version")
  valid_597281 = validateParameter(valid_597281, JString, required = true,
                                 default = nil)
  if valid_597281 != nil:
    section.add "api-version", valid_597281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597282: Call_WebAppsDeleteSourceControlSlot_597274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_597282.validator(path, query, header, formData, body)
  let scheme = call_597282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597282.url(scheme.get, call_597282.host, call_597282.base,
                         call_597282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597282, url, valid)

proc call*(call_597283: Call_WebAppsDeleteSourceControlSlot_597274;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControlSlot
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597284 = newJObject()
  var query_597285 = newJObject()
  add(path_597284, "resourceGroupName", newJString(resourceGroupName))
  add(query_597285, "api-version", newJString(apiVersion))
  add(path_597284, "name", newJString(name))
  add(path_597284, "slot", newJString(slot))
  add(path_597284, "subscriptionId", newJString(subscriptionId))
  result = call_597283.call(path_597284, query_597285, nil, nil, nil)

var webAppsDeleteSourceControlSlot* = Call_WebAppsDeleteSourceControlSlot_597274(
    name: "webAppsDeleteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControlSlot_597275, base: "",
    url: url_WebAppsDeleteSourceControlSlot_597276, schemes: {Scheme.Https})
type
  Call_WebAppsStartSlot_597300 = ref object of OpenApiRestCall_593437
proc url_WebAppsStartSlot_597302(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartSlot_597301(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597303 = path.getOrDefault("resourceGroupName")
  valid_597303 = validateParameter(valid_597303, JString, required = true,
                                 default = nil)
  if valid_597303 != nil:
    section.add "resourceGroupName", valid_597303
  var valid_597304 = path.getOrDefault("name")
  valid_597304 = validateParameter(valid_597304, JString, required = true,
                                 default = nil)
  if valid_597304 != nil:
    section.add "name", valid_597304
  var valid_597305 = path.getOrDefault("slot")
  valid_597305 = validateParameter(valid_597305, JString, required = true,
                                 default = nil)
  if valid_597305 != nil:
    section.add "slot", valid_597305
  var valid_597306 = path.getOrDefault("subscriptionId")
  valid_597306 = validateParameter(valid_597306, JString, required = true,
                                 default = nil)
  if valid_597306 != nil:
    section.add "subscriptionId", valid_597306
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597307 = query.getOrDefault("api-version")
  valid_597307 = validateParameter(valid_597307, JString, required = true,
                                 default = nil)
  if valid_597307 != nil:
    section.add "api-version", valid_597307
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597308: Call_WebAppsStartSlot_597300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_597308.validator(path, query, header, formData, body)
  let scheme = call_597308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597308.url(scheme.get, call_597308.host, call_597308.base,
                         call_597308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597308, url, valid)

proc call*(call_597309: Call_WebAppsStartSlot_597300; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStartSlot
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597310 = newJObject()
  var query_597311 = newJObject()
  add(path_597310, "resourceGroupName", newJString(resourceGroupName))
  add(query_597311, "api-version", newJString(apiVersion))
  add(path_597310, "name", newJString(name))
  add(path_597310, "slot", newJString(slot))
  add(path_597310, "subscriptionId", newJString(subscriptionId))
  result = call_597309.call(path_597310, query_597311, nil, nil, nil)

var webAppsStartSlot* = Call_WebAppsStartSlot_597300(name: "webAppsStartSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_WebAppsStartSlot_597301, base: "",
    url: url_WebAppsStartSlot_597302, schemes: {Scheme.Https})
type
  Call_WebAppsStopSlot_597312 = ref object of OpenApiRestCall_593437
proc url_WebAppsStopSlot_597314(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopSlot_597313(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597315 = path.getOrDefault("resourceGroupName")
  valid_597315 = validateParameter(valid_597315, JString, required = true,
                                 default = nil)
  if valid_597315 != nil:
    section.add "resourceGroupName", valid_597315
  var valid_597316 = path.getOrDefault("name")
  valid_597316 = validateParameter(valid_597316, JString, required = true,
                                 default = nil)
  if valid_597316 != nil:
    section.add "name", valid_597316
  var valid_597317 = path.getOrDefault("slot")
  valid_597317 = validateParameter(valid_597317, JString, required = true,
                                 default = nil)
  if valid_597317 != nil:
    section.add "slot", valid_597317
  var valid_597318 = path.getOrDefault("subscriptionId")
  valid_597318 = validateParameter(valid_597318, JString, required = true,
                                 default = nil)
  if valid_597318 != nil:
    section.add "subscriptionId", valid_597318
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597319 = query.getOrDefault("api-version")
  valid_597319 = validateParameter(valid_597319, JString, required = true,
                                 default = nil)
  if valid_597319 != nil:
    section.add "api-version", valid_597319
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597320: Call_WebAppsStopSlot_597312; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_597320.validator(path, query, header, formData, body)
  let scheme = call_597320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597320.url(scheme.get, call_597320.host, call_597320.base,
                         call_597320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597320, url, valid)

proc call*(call_597321: Call_WebAppsStopSlot_597312; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStopSlot
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597322 = newJObject()
  var query_597323 = newJObject()
  add(path_597322, "resourceGroupName", newJString(resourceGroupName))
  add(query_597323, "api-version", newJString(apiVersion))
  add(path_597322, "name", newJString(name))
  add(path_597322, "slot", newJString(slot))
  add(path_597322, "subscriptionId", newJString(subscriptionId))
  result = call_597321.call(path_597322, query_597323, nil, nil, nil)

var webAppsStopSlot* = Call_WebAppsStopSlot_597312(name: "webAppsStopSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_WebAppsStopSlot_597313, base: "", url: url_WebAppsStopSlot_597314,
    schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepositorySlot_597324 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncRepositorySlot_597326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepositorySlot_597325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597327 = path.getOrDefault("resourceGroupName")
  valid_597327 = validateParameter(valid_597327, JString, required = true,
                                 default = nil)
  if valid_597327 != nil:
    section.add "resourceGroupName", valid_597327
  var valid_597328 = path.getOrDefault("name")
  valid_597328 = validateParameter(valid_597328, JString, required = true,
                                 default = nil)
  if valid_597328 != nil:
    section.add "name", valid_597328
  var valid_597329 = path.getOrDefault("slot")
  valid_597329 = validateParameter(valid_597329, JString, required = true,
                                 default = nil)
  if valid_597329 != nil:
    section.add "slot", valid_597329
  var valid_597330 = path.getOrDefault("subscriptionId")
  valid_597330 = validateParameter(valid_597330, JString, required = true,
                                 default = nil)
  if valid_597330 != nil:
    section.add "subscriptionId", valid_597330
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597331 = query.getOrDefault("api-version")
  valid_597331 = validateParameter(valid_597331, JString, required = true,
                                 default = nil)
  if valid_597331 != nil:
    section.add "api-version", valid_597331
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597332: Call_WebAppsSyncRepositorySlot_597324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_597332.validator(path, query, header, formData, body)
  let scheme = call_597332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597332.url(scheme.get, call_597332.host, call_597332.base,
                         call_597332.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597332, url, valid)

proc call*(call_597333: Call_WebAppsSyncRepositorySlot_597324;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepositorySlot
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597334 = newJObject()
  var query_597335 = newJObject()
  add(path_597334, "resourceGroupName", newJString(resourceGroupName))
  add(query_597335, "api-version", newJString(apiVersion))
  add(path_597334, "name", newJString(name))
  add(path_597334, "slot", newJString(slot))
  add(path_597334, "subscriptionId", newJString(subscriptionId))
  result = call_597333.call(path_597334, query_597335, nil, nil, nil)

var webAppsSyncRepositorySlot* = Call_WebAppsSyncRepositorySlot_597324(
    name: "webAppsSyncRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_WebAppsSyncRepositorySlot_597325, base: "",
    url: url_WebAppsSyncRepositorySlot_597326, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggersSlot_597336 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncFunctionTriggersSlot_597338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggersSlot_597337(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597339 = path.getOrDefault("resourceGroupName")
  valid_597339 = validateParameter(valid_597339, JString, required = true,
                                 default = nil)
  if valid_597339 != nil:
    section.add "resourceGroupName", valid_597339
  var valid_597340 = path.getOrDefault("name")
  valid_597340 = validateParameter(valid_597340, JString, required = true,
                                 default = nil)
  if valid_597340 != nil:
    section.add "name", valid_597340
  var valid_597341 = path.getOrDefault("slot")
  valid_597341 = validateParameter(valid_597341, JString, required = true,
                                 default = nil)
  if valid_597341 != nil:
    section.add "slot", valid_597341
  var valid_597342 = path.getOrDefault("subscriptionId")
  valid_597342 = validateParameter(valid_597342, JString, required = true,
                                 default = nil)
  if valid_597342 != nil:
    section.add "subscriptionId", valid_597342
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597343 = query.getOrDefault("api-version")
  valid_597343 = validateParameter(valid_597343, JString, required = true,
                                 default = nil)
  if valid_597343 != nil:
    section.add "api-version", valid_597343
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597344: Call_WebAppsSyncFunctionTriggersSlot_597336;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_597344.validator(path, query, header, formData, body)
  let scheme = call_597344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597344.url(scheme.get, call_597344.host, call_597344.base,
                         call_597344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597344, url, valid)

proc call*(call_597345: Call_WebAppsSyncFunctionTriggersSlot_597336;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggersSlot
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597346 = newJObject()
  var query_597347 = newJObject()
  add(path_597346, "resourceGroupName", newJString(resourceGroupName))
  add(query_597347, "api-version", newJString(apiVersion))
  add(path_597346, "name", newJString(name))
  add(path_597346, "slot", newJString(slot))
  add(path_597346, "subscriptionId", newJString(subscriptionId))
  result = call_597345.call(path_597346, query_597347, nil, nil, nil)

var webAppsSyncFunctionTriggersSlot* = Call_WebAppsSyncFunctionTriggersSlot_597336(
    name: "webAppsSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggersSlot_597337, base: "",
    url: url_WebAppsSyncFunctionTriggersSlot_597338, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobsSlot_597348 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobsSlot_597350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobsSlot_597349(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597351 = path.getOrDefault("resourceGroupName")
  valid_597351 = validateParameter(valid_597351, JString, required = true,
                                 default = nil)
  if valid_597351 != nil:
    section.add "resourceGroupName", valid_597351
  var valid_597352 = path.getOrDefault("name")
  valid_597352 = validateParameter(valid_597352, JString, required = true,
                                 default = nil)
  if valid_597352 != nil:
    section.add "name", valid_597352
  var valid_597353 = path.getOrDefault("slot")
  valid_597353 = validateParameter(valid_597353, JString, required = true,
                                 default = nil)
  if valid_597353 != nil:
    section.add "slot", valid_597353
  var valid_597354 = path.getOrDefault("subscriptionId")
  valid_597354 = validateParameter(valid_597354, JString, required = true,
                                 default = nil)
  if valid_597354 != nil:
    section.add "subscriptionId", valid_597354
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597355 = query.getOrDefault("api-version")
  valid_597355 = validateParameter(valid_597355, JString, required = true,
                                 default = nil)
  if valid_597355 != nil:
    section.add "api-version", valid_597355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597356: Call_WebAppsListTriggeredWebJobsSlot_597348;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_597356.validator(path, query, header, formData, body)
  let scheme = call_597356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597356.url(scheme.get, call_597356.host, call_597356.base,
                         call_597356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597356, url, valid)

proc call*(call_597357: Call_WebAppsListTriggeredWebJobsSlot_597348;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobsSlot
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597358 = newJObject()
  var query_597359 = newJObject()
  add(path_597358, "resourceGroupName", newJString(resourceGroupName))
  add(query_597359, "api-version", newJString(apiVersion))
  add(path_597358, "name", newJString(name))
  add(path_597358, "slot", newJString(slot))
  add(path_597358, "subscriptionId", newJString(subscriptionId))
  result = call_597357.call(path_597358, query_597359, nil, nil, nil)

var webAppsListTriggeredWebJobsSlot* = Call_WebAppsListTriggeredWebJobsSlot_597348(
    name: "webAppsListTriggeredWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobsSlot_597349, base: "",
    url: url_WebAppsListTriggeredWebJobsSlot_597350, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobSlot_597360 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJobSlot_597362(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobSlot_597361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597363 = path.getOrDefault("resourceGroupName")
  valid_597363 = validateParameter(valid_597363, JString, required = true,
                                 default = nil)
  if valid_597363 != nil:
    section.add "resourceGroupName", valid_597363
  var valid_597364 = path.getOrDefault("name")
  valid_597364 = validateParameter(valid_597364, JString, required = true,
                                 default = nil)
  if valid_597364 != nil:
    section.add "name", valid_597364
  var valid_597365 = path.getOrDefault("slot")
  valid_597365 = validateParameter(valid_597365, JString, required = true,
                                 default = nil)
  if valid_597365 != nil:
    section.add "slot", valid_597365
  var valid_597366 = path.getOrDefault("subscriptionId")
  valid_597366 = validateParameter(valid_597366, JString, required = true,
                                 default = nil)
  if valid_597366 != nil:
    section.add "subscriptionId", valid_597366
  var valid_597367 = path.getOrDefault("webJobName")
  valid_597367 = validateParameter(valid_597367, JString, required = true,
                                 default = nil)
  if valid_597367 != nil:
    section.add "webJobName", valid_597367
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597368 = query.getOrDefault("api-version")
  valid_597368 = validateParameter(valid_597368, JString, required = true,
                                 default = nil)
  if valid_597368 != nil:
    section.add "api-version", valid_597368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597369: Call_WebAppsGetTriggeredWebJobSlot_597360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_597369.validator(path, query, header, formData, body)
  let scheme = call_597369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597369.url(scheme.get, call_597369.host, call_597369.base,
                         call_597369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597369, url, valid)

proc call*(call_597370: Call_WebAppsGetTriggeredWebJobSlot_597360;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobSlot
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597371 = newJObject()
  var query_597372 = newJObject()
  add(path_597371, "resourceGroupName", newJString(resourceGroupName))
  add(query_597372, "api-version", newJString(apiVersion))
  add(path_597371, "name", newJString(name))
  add(path_597371, "slot", newJString(slot))
  add(path_597371, "subscriptionId", newJString(subscriptionId))
  add(path_597371, "webJobName", newJString(webJobName))
  result = call_597370.call(path_597371, query_597372, nil, nil, nil)

var webAppsGetTriggeredWebJobSlot* = Call_WebAppsGetTriggeredWebJobSlot_597360(
    name: "webAppsGetTriggeredWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJobSlot_597361, base: "",
    url: url_WebAppsGetTriggeredWebJobSlot_597362, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJobSlot_597373 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteTriggeredWebJobSlot_597375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJobSlot_597374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597376 = path.getOrDefault("resourceGroupName")
  valid_597376 = validateParameter(valid_597376, JString, required = true,
                                 default = nil)
  if valid_597376 != nil:
    section.add "resourceGroupName", valid_597376
  var valid_597377 = path.getOrDefault("name")
  valid_597377 = validateParameter(valid_597377, JString, required = true,
                                 default = nil)
  if valid_597377 != nil:
    section.add "name", valid_597377
  var valid_597378 = path.getOrDefault("slot")
  valid_597378 = validateParameter(valid_597378, JString, required = true,
                                 default = nil)
  if valid_597378 != nil:
    section.add "slot", valid_597378
  var valid_597379 = path.getOrDefault("subscriptionId")
  valid_597379 = validateParameter(valid_597379, JString, required = true,
                                 default = nil)
  if valid_597379 != nil:
    section.add "subscriptionId", valid_597379
  var valid_597380 = path.getOrDefault("webJobName")
  valid_597380 = validateParameter(valid_597380, JString, required = true,
                                 default = nil)
  if valid_597380 != nil:
    section.add "webJobName", valid_597380
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597381 = query.getOrDefault("api-version")
  valid_597381 = validateParameter(valid_597381, JString, required = true,
                                 default = nil)
  if valid_597381 != nil:
    section.add "api-version", valid_597381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597382: Call_WebAppsDeleteTriggeredWebJobSlot_597373;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_597382.validator(path, query, header, formData, body)
  let scheme = call_597382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597382.url(scheme.get, call_597382.host, call_597382.base,
                         call_597382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597382, url, valid)

proc call*(call_597383: Call_WebAppsDeleteTriggeredWebJobSlot_597373;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJobSlot
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597384 = newJObject()
  var query_597385 = newJObject()
  add(path_597384, "resourceGroupName", newJString(resourceGroupName))
  add(query_597385, "api-version", newJString(apiVersion))
  add(path_597384, "name", newJString(name))
  add(path_597384, "slot", newJString(slot))
  add(path_597384, "subscriptionId", newJString(subscriptionId))
  add(path_597384, "webJobName", newJString(webJobName))
  result = call_597383.call(path_597384, query_597385, nil, nil, nil)

var webAppsDeleteTriggeredWebJobSlot* = Call_WebAppsDeleteTriggeredWebJobSlot_597373(
    name: "webAppsDeleteTriggeredWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJobSlot_597374, base: "",
    url: url_WebAppsDeleteTriggeredWebJobSlot_597375, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistorySlot_597386 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobHistorySlot_597388(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistorySlot_597387(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597389 = path.getOrDefault("resourceGroupName")
  valid_597389 = validateParameter(valid_597389, JString, required = true,
                                 default = nil)
  if valid_597389 != nil:
    section.add "resourceGroupName", valid_597389
  var valid_597390 = path.getOrDefault("name")
  valid_597390 = validateParameter(valid_597390, JString, required = true,
                                 default = nil)
  if valid_597390 != nil:
    section.add "name", valid_597390
  var valid_597391 = path.getOrDefault("slot")
  valid_597391 = validateParameter(valid_597391, JString, required = true,
                                 default = nil)
  if valid_597391 != nil:
    section.add "slot", valid_597391
  var valid_597392 = path.getOrDefault("subscriptionId")
  valid_597392 = validateParameter(valid_597392, JString, required = true,
                                 default = nil)
  if valid_597392 != nil:
    section.add "subscriptionId", valid_597392
  var valid_597393 = path.getOrDefault("webJobName")
  valid_597393 = validateParameter(valid_597393, JString, required = true,
                                 default = nil)
  if valid_597393 != nil:
    section.add "webJobName", valid_597393
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597394 = query.getOrDefault("api-version")
  valid_597394 = validateParameter(valid_597394, JString, required = true,
                                 default = nil)
  if valid_597394 != nil:
    section.add "api-version", valid_597394
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597395: Call_WebAppsListTriggeredWebJobHistorySlot_597386;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_597395.validator(path, query, header, formData, body)
  let scheme = call_597395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597395.url(scheme.get, call_597395.host, call_597395.base,
                         call_597395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597395, url, valid)

proc call*(call_597396: Call_WebAppsListTriggeredWebJobHistorySlot_597386;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistorySlot
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597397 = newJObject()
  var query_597398 = newJObject()
  add(path_597397, "resourceGroupName", newJString(resourceGroupName))
  add(query_597398, "api-version", newJString(apiVersion))
  add(path_597397, "name", newJString(name))
  add(path_597397, "slot", newJString(slot))
  add(path_597397, "subscriptionId", newJString(subscriptionId))
  add(path_597397, "webJobName", newJString(webJobName))
  result = call_597396.call(path_597397, query_597398, nil, nil, nil)

var webAppsListTriggeredWebJobHistorySlot* = Call_WebAppsListTriggeredWebJobHistorySlot_597386(
    name: "webAppsListTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistorySlot_597387, base: "",
    url: url_WebAppsListTriggeredWebJobHistorySlot_597388, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistorySlot_597399 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJobHistorySlot_597401(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistorySlot_597400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597402 = path.getOrDefault("resourceGroupName")
  valid_597402 = validateParameter(valid_597402, JString, required = true,
                                 default = nil)
  if valid_597402 != nil:
    section.add "resourceGroupName", valid_597402
  var valid_597403 = path.getOrDefault("name")
  valid_597403 = validateParameter(valid_597403, JString, required = true,
                                 default = nil)
  if valid_597403 != nil:
    section.add "name", valid_597403
  var valid_597404 = path.getOrDefault("slot")
  valid_597404 = validateParameter(valid_597404, JString, required = true,
                                 default = nil)
  if valid_597404 != nil:
    section.add "slot", valid_597404
  var valid_597405 = path.getOrDefault("subscriptionId")
  valid_597405 = validateParameter(valid_597405, JString, required = true,
                                 default = nil)
  if valid_597405 != nil:
    section.add "subscriptionId", valid_597405
  var valid_597406 = path.getOrDefault("id")
  valid_597406 = validateParameter(valid_597406, JString, required = true,
                                 default = nil)
  if valid_597406 != nil:
    section.add "id", valid_597406
  var valid_597407 = path.getOrDefault("webJobName")
  valid_597407 = validateParameter(valid_597407, JString, required = true,
                                 default = nil)
  if valid_597407 != nil:
    section.add "webJobName", valid_597407
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597408 = query.getOrDefault("api-version")
  valid_597408 = validateParameter(valid_597408, JString, required = true,
                                 default = nil)
  if valid_597408 != nil:
    section.add "api-version", valid_597408
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597409: Call_WebAppsGetTriggeredWebJobHistorySlot_597399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_597409.validator(path, query, header, formData, body)
  let scheme = call_597409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597409.url(scheme.get, call_597409.host, call_597409.base,
                         call_597409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597409, url, valid)

proc call*(call_597410: Call_WebAppsGetTriggeredWebJobHistorySlot_597399;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistorySlot
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597411 = newJObject()
  var query_597412 = newJObject()
  add(path_597411, "resourceGroupName", newJString(resourceGroupName))
  add(query_597412, "api-version", newJString(apiVersion))
  add(path_597411, "name", newJString(name))
  add(path_597411, "slot", newJString(slot))
  add(path_597411, "subscriptionId", newJString(subscriptionId))
  add(path_597411, "id", newJString(id))
  add(path_597411, "webJobName", newJString(webJobName))
  result = call_597410.call(path_597411, query_597412, nil, nil, nil)

var webAppsGetTriggeredWebJobHistorySlot* = Call_WebAppsGetTriggeredWebJobHistorySlot_597399(
    name: "webAppsGetTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistorySlot_597400, base: "",
    url: url_WebAppsGetTriggeredWebJobHistorySlot_597401, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJobSlot_597413 = ref object of OpenApiRestCall_593437
proc url_WebAppsRunTriggeredWebJobSlot_597415(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJobSlot_597414(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597416 = path.getOrDefault("resourceGroupName")
  valid_597416 = validateParameter(valid_597416, JString, required = true,
                                 default = nil)
  if valid_597416 != nil:
    section.add "resourceGroupName", valid_597416
  var valid_597417 = path.getOrDefault("name")
  valid_597417 = validateParameter(valid_597417, JString, required = true,
                                 default = nil)
  if valid_597417 != nil:
    section.add "name", valid_597417
  var valid_597418 = path.getOrDefault("slot")
  valid_597418 = validateParameter(valid_597418, JString, required = true,
                                 default = nil)
  if valid_597418 != nil:
    section.add "slot", valid_597418
  var valid_597419 = path.getOrDefault("subscriptionId")
  valid_597419 = validateParameter(valid_597419, JString, required = true,
                                 default = nil)
  if valid_597419 != nil:
    section.add "subscriptionId", valid_597419
  var valid_597420 = path.getOrDefault("webJobName")
  valid_597420 = validateParameter(valid_597420, JString, required = true,
                                 default = nil)
  if valid_597420 != nil:
    section.add "webJobName", valid_597420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597421 = query.getOrDefault("api-version")
  valid_597421 = validateParameter(valid_597421, JString, required = true,
                                 default = nil)
  if valid_597421 != nil:
    section.add "api-version", valid_597421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597422: Call_WebAppsRunTriggeredWebJobSlot_597413; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_597422.validator(path, query, header, formData, body)
  let scheme = call_597422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597422.url(scheme.get, call_597422.host, call_597422.base,
                         call_597422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597422, url, valid)

proc call*(call_597423: Call_WebAppsRunTriggeredWebJobSlot_597413;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJobSlot
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597424 = newJObject()
  var query_597425 = newJObject()
  add(path_597424, "resourceGroupName", newJString(resourceGroupName))
  add(query_597425, "api-version", newJString(apiVersion))
  add(path_597424, "name", newJString(name))
  add(path_597424, "slot", newJString(slot))
  add(path_597424, "subscriptionId", newJString(subscriptionId))
  add(path_597424, "webJobName", newJString(webJobName))
  result = call_597423.call(path_597424, query_597425, nil, nil, nil)

var webAppsRunTriggeredWebJobSlot* = Call_WebAppsRunTriggeredWebJobSlot_597413(
    name: "webAppsRunTriggeredWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJobSlot_597414, base: "",
    url: url_WebAppsRunTriggeredWebJobSlot_597415, schemes: {Scheme.Https})
type
  Call_WebAppsListUsagesSlot_597426 = ref object of OpenApiRestCall_593437
proc url_WebAppsListUsagesSlot_597428(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsagesSlot_597427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597429 = path.getOrDefault("resourceGroupName")
  valid_597429 = validateParameter(valid_597429, JString, required = true,
                                 default = nil)
  if valid_597429 != nil:
    section.add "resourceGroupName", valid_597429
  var valid_597430 = path.getOrDefault("name")
  valid_597430 = validateParameter(valid_597430, JString, required = true,
                                 default = nil)
  if valid_597430 != nil:
    section.add "name", valid_597430
  var valid_597431 = path.getOrDefault("slot")
  valid_597431 = validateParameter(valid_597431, JString, required = true,
                                 default = nil)
  if valid_597431 != nil:
    section.add "slot", valid_597431
  var valid_597432 = path.getOrDefault("subscriptionId")
  valid_597432 = validateParameter(valid_597432, JString, required = true,
                                 default = nil)
  if valid_597432 != nil:
    section.add "subscriptionId", valid_597432
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597433 = query.getOrDefault("api-version")
  valid_597433 = validateParameter(valid_597433, JString, required = true,
                                 default = nil)
  if valid_597433 != nil:
    section.add "api-version", valid_597433
  var valid_597434 = query.getOrDefault("$filter")
  valid_597434 = validateParameter(valid_597434, JString, required = false,
                                 default = nil)
  if valid_597434 != nil:
    section.add "$filter", valid_597434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597435: Call_WebAppsListUsagesSlot_597426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_597435.validator(path, query, header, formData, body)
  let scheme = call_597435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597435.url(scheme.get, call_597435.host, call_597435.base,
                         call_597435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597435, url, valid)

proc call*(call_597436: Call_WebAppsListUsagesSlot_597426;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListUsagesSlot
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597437 = newJObject()
  var query_597438 = newJObject()
  add(path_597437, "resourceGroupName", newJString(resourceGroupName))
  add(query_597438, "api-version", newJString(apiVersion))
  add(path_597437, "name", newJString(name))
  add(path_597437, "slot", newJString(slot))
  add(path_597437, "subscriptionId", newJString(subscriptionId))
  add(query_597438, "$filter", newJString(Filter))
  result = call_597436.call(path_597437, query_597438, nil, nil, nil)

var webAppsListUsagesSlot* = Call_WebAppsListUsagesSlot_597426(
    name: "webAppsListUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_WebAppsListUsagesSlot_597427, base: "",
    url: url_WebAppsListUsagesSlot_597428, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnectionsSlot_597439 = ref object of OpenApiRestCall_593437
proc url_WebAppsListVnetConnectionsSlot_597441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnectionsSlot_597440(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597442 = path.getOrDefault("resourceGroupName")
  valid_597442 = validateParameter(valid_597442, JString, required = true,
                                 default = nil)
  if valid_597442 != nil:
    section.add "resourceGroupName", valid_597442
  var valid_597443 = path.getOrDefault("name")
  valid_597443 = validateParameter(valid_597443, JString, required = true,
                                 default = nil)
  if valid_597443 != nil:
    section.add "name", valid_597443
  var valid_597444 = path.getOrDefault("slot")
  valid_597444 = validateParameter(valid_597444, JString, required = true,
                                 default = nil)
  if valid_597444 != nil:
    section.add "slot", valid_597444
  var valid_597445 = path.getOrDefault("subscriptionId")
  valid_597445 = validateParameter(valid_597445, JString, required = true,
                                 default = nil)
  if valid_597445 != nil:
    section.add "subscriptionId", valid_597445
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597446 = query.getOrDefault("api-version")
  valid_597446 = validateParameter(valid_597446, JString, required = true,
                                 default = nil)
  if valid_597446 != nil:
    section.add "api-version", valid_597446
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597447: Call_WebAppsListVnetConnectionsSlot_597439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_597447.validator(path, query, header, formData, body)
  let scheme = call_597447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597447.url(scheme.get, call_597447.host, call_597447.base,
                         call_597447.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597447, url, valid)

proc call*(call_597448: Call_WebAppsListVnetConnectionsSlot_597439;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnectionsSlot
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597449 = newJObject()
  var query_597450 = newJObject()
  add(path_597449, "resourceGroupName", newJString(resourceGroupName))
  add(query_597450, "api-version", newJString(apiVersion))
  add(path_597449, "name", newJString(name))
  add(path_597449, "slot", newJString(slot))
  add(path_597449, "subscriptionId", newJString(subscriptionId))
  result = call_597448.call(path_597449, query_597450, nil, nil, nil)

var webAppsListVnetConnectionsSlot* = Call_WebAppsListVnetConnectionsSlot_597439(
    name: "webAppsListVnetConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnectionsSlot_597440, base: "",
    url: url_WebAppsListVnetConnectionsSlot_597441, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionSlot_597464 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnectionSlot_597466(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionSlot_597465(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597467 = path.getOrDefault("resourceGroupName")
  valid_597467 = validateParameter(valid_597467, JString, required = true,
                                 default = nil)
  if valid_597467 != nil:
    section.add "resourceGroupName", valid_597467
  var valid_597468 = path.getOrDefault("name")
  valid_597468 = validateParameter(valid_597468, JString, required = true,
                                 default = nil)
  if valid_597468 != nil:
    section.add "name", valid_597468
  var valid_597469 = path.getOrDefault("vnetName")
  valid_597469 = validateParameter(valid_597469, JString, required = true,
                                 default = nil)
  if valid_597469 != nil:
    section.add "vnetName", valid_597469
  var valid_597470 = path.getOrDefault("slot")
  valid_597470 = validateParameter(valid_597470, JString, required = true,
                                 default = nil)
  if valid_597470 != nil:
    section.add "slot", valid_597470
  var valid_597471 = path.getOrDefault("subscriptionId")
  valid_597471 = validateParameter(valid_597471, JString, required = true,
                                 default = nil)
  if valid_597471 != nil:
    section.add "subscriptionId", valid_597471
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597472 = query.getOrDefault("api-version")
  valid_597472 = validateParameter(valid_597472, JString, required = true,
                                 default = nil)
  if valid_597472 != nil:
    section.add "api-version", valid_597472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597474: Call_WebAppsCreateOrUpdateVnetConnectionSlot_597464;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_597474.validator(path, query, header, formData, body)
  let scheme = call_597474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597474.url(scheme.get, call_597474.host, call_597474.base,
                         call_597474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597474, url, valid)

proc call*(call_597475: Call_WebAppsCreateOrUpdateVnetConnectionSlot_597464;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597476 = newJObject()
  var query_597477 = newJObject()
  var body_597478 = newJObject()
  add(path_597476, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597478 = connectionEnvelope
  add(path_597476, "name", newJString(name))
  add(path_597476, "vnetName", newJString(vnetName))
  add(query_597477, "api-version", newJString(apiVersion))
  add(path_597476, "slot", newJString(slot))
  add(path_597476, "subscriptionId", newJString(subscriptionId))
  result = call_597475.call(path_597476, query_597477, nil, nil, body_597478)

var webAppsCreateOrUpdateVnetConnectionSlot* = Call_WebAppsCreateOrUpdateVnetConnectionSlot_597464(
    name: "webAppsCreateOrUpdateVnetConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionSlot_597465, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnectionSlot_597466,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionSlot_597451 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnectionSlot_597453(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionSlot_597452(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597454 = path.getOrDefault("resourceGroupName")
  valid_597454 = validateParameter(valid_597454, JString, required = true,
                                 default = nil)
  if valid_597454 != nil:
    section.add "resourceGroupName", valid_597454
  var valid_597455 = path.getOrDefault("name")
  valid_597455 = validateParameter(valid_597455, JString, required = true,
                                 default = nil)
  if valid_597455 != nil:
    section.add "name", valid_597455
  var valid_597456 = path.getOrDefault("vnetName")
  valid_597456 = validateParameter(valid_597456, JString, required = true,
                                 default = nil)
  if valid_597456 != nil:
    section.add "vnetName", valid_597456
  var valid_597457 = path.getOrDefault("slot")
  valid_597457 = validateParameter(valid_597457, JString, required = true,
                                 default = nil)
  if valid_597457 != nil:
    section.add "slot", valid_597457
  var valid_597458 = path.getOrDefault("subscriptionId")
  valid_597458 = validateParameter(valid_597458, JString, required = true,
                                 default = nil)
  if valid_597458 != nil:
    section.add "subscriptionId", valid_597458
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597459 = query.getOrDefault("api-version")
  valid_597459 = validateParameter(valid_597459, JString, required = true,
                                 default = nil)
  if valid_597459 != nil:
    section.add "api-version", valid_597459
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597460: Call_WebAppsGetVnetConnectionSlot_597451; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_597460.validator(path, query, header, formData, body)
  let scheme = call_597460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597460.url(scheme.get, call_597460.host, call_597460.base,
                         call_597460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597460, url, valid)

proc call*(call_597461: Call_WebAppsGetVnetConnectionSlot_597451;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionSlot
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597462 = newJObject()
  var query_597463 = newJObject()
  add(path_597462, "resourceGroupName", newJString(resourceGroupName))
  add(query_597463, "api-version", newJString(apiVersion))
  add(path_597462, "name", newJString(name))
  add(path_597462, "vnetName", newJString(vnetName))
  add(path_597462, "slot", newJString(slot))
  add(path_597462, "subscriptionId", newJString(subscriptionId))
  result = call_597461.call(path_597462, query_597463, nil, nil, nil)

var webAppsGetVnetConnectionSlot* = Call_WebAppsGetVnetConnectionSlot_597451(
    name: "webAppsGetVnetConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnectionSlot_597452, base: "",
    url: url_WebAppsGetVnetConnectionSlot_597453, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionSlot_597492 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnectionSlot_597494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionSlot_597493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597495 = path.getOrDefault("resourceGroupName")
  valid_597495 = validateParameter(valid_597495, JString, required = true,
                                 default = nil)
  if valid_597495 != nil:
    section.add "resourceGroupName", valid_597495
  var valid_597496 = path.getOrDefault("name")
  valid_597496 = validateParameter(valid_597496, JString, required = true,
                                 default = nil)
  if valid_597496 != nil:
    section.add "name", valid_597496
  var valid_597497 = path.getOrDefault("vnetName")
  valid_597497 = validateParameter(valid_597497, JString, required = true,
                                 default = nil)
  if valid_597497 != nil:
    section.add "vnetName", valid_597497
  var valid_597498 = path.getOrDefault("slot")
  valid_597498 = validateParameter(valid_597498, JString, required = true,
                                 default = nil)
  if valid_597498 != nil:
    section.add "slot", valid_597498
  var valid_597499 = path.getOrDefault("subscriptionId")
  valid_597499 = validateParameter(valid_597499, JString, required = true,
                                 default = nil)
  if valid_597499 != nil:
    section.add "subscriptionId", valid_597499
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597500 = query.getOrDefault("api-version")
  valid_597500 = validateParameter(valid_597500, JString, required = true,
                                 default = nil)
  if valid_597500 != nil:
    section.add "api-version", valid_597500
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597502: Call_WebAppsUpdateVnetConnectionSlot_597492;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_597502.validator(path, query, header, formData, body)
  let scheme = call_597502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597502.url(scheme.get, call_597502.host, call_597502.base,
                         call_597502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597502, url, valid)

proc call*(call_597503: Call_WebAppsUpdateVnetConnectionSlot_597492;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597504 = newJObject()
  var query_597505 = newJObject()
  var body_597506 = newJObject()
  add(path_597504, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597506 = connectionEnvelope
  add(path_597504, "name", newJString(name))
  add(path_597504, "vnetName", newJString(vnetName))
  add(query_597505, "api-version", newJString(apiVersion))
  add(path_597504, "slot", newJString(slot))
  add(path_597504, "subscriptionId", newJString(subscriptionId))
  result = call_597503.call(path_597504, query_597505, nil, nil, body_597506)

var webAppsUpdateVnetConnectionSlot* = Call_WebAppsUpdateVnetConnectionSlot_597492(
    name: "webAppsUpdateVnetConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnectionSlot_597493, base: "",
    url: url_WebAppsUpdateVnetConnectionSlot_597494, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnectionSlot_597479 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteVnetConnectionSlot_597481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnectionSlot_597480(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597482 = path.getOrDefault("resourceGroupName")
  valid_597482 = validateParameter(valid_597482, JString, required = true,
                                 default = nil)
  if valid_597482 != nil:
    section.add "resourceGroupName", valid_597482
  var valid_597483 = path.getOrDefault("name")
  valid_597483 = validateParameter(valid_597483, JString, required = true,
                                 default = nil)
  if valid_597483 != nil:
    section.add "name", valid_597483
  var valid_597484 = path.getOrDefault("vnetName")
  valid_597484 = validateParameter(valid_597484, JString, required = true,
                                 default = nil)
  if valid_597484 != nil:
    section.add "vnetName", valid_597484
  var valid_597485 = path.getOrDefault("slot")
  valid_597485 = validateParameter(valid_597485, JString, required = true,
                                 default = nil)
  if valid_597485 != nil:
    section.add "slot", valid_597485
  var valid_597486 = path.getOrDefault("subscriptionId")
  valid_597486 = validateParameter(valid_597486, JString, required = true,
                                 default = nil)
  if valid_597486 != nil:
    section.add "subscriptionId", valid_597486
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597487 = query.getOrDefault("api-version")
  valid_597487 = validateParameter(valid_597487, JString, required = true,
                                 default = nil)
  if valid_597487 != nil:
    section.add "api-version", valid_597487
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597488: Call_WebAppsDeleteVnetConnectionSlot_597479;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_597488.validator(path, query, header, formData, body)
  let scheme = call_597488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597488.url(scheme.get, call_597488.host, call_597488.base,
                         call_597488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597488, url, valid)

proc call*(call_597489: Call_WebAppsDeleteVnetConnectionSlot_597479;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnectionSlot
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597490 = newJObject()
  var query_597491 = newJObject()
  add(path_597490, "resourceGroupName", newJString(resourceGroupName))
  add(query_597491, "api-version", newJString(apiVersion))
  add(path_597490, "name", newJString(name))
  add(path_597490, "vnetName", newJString(vnetName))
  add(path_597490, "slot", newJString(slot))
  add(path_597490, "subscriptionId", newJString(subscriptionId))
  result = call_597489.call(path_597490, query_597491, nil, nil, nil)

var webAppsDeleteVnetConnectionSlot* = Call_WebAppsDeleteVnetConnectionSlot_597479(
    name: "webAppsDeleteVnetConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnectionSlot_597480, base: "",
    url: url_WebAppsDeleteVnetConnectionSlot_597481, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597521 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597523(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597522(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597524 = path.getOrDefault("resourceGroupName")
  valid_597524 = validateParameter(valid_597524, JString, required = true,
                                 default = nil)
  if valid_597524 != nil:
    section.add "resourceGroupName", valid_597524
  var valid_597525 = path.getOrDefault("name")
  valid_597525 = validateParameter(valid_597525, JString, required = true,
                                 default = nil)
  if valid_597525 != nil:
    section.add "name", valid_597525
  var valid_597526 = path.getOrDefault("vnetName")
  valid_597526 = validateParameter(valid_597526, JString, required = true,
                                 default = nil)
  if valid_597526 != nil:
    section.add "vnetName", valid_597526
  var valid_597527 = path.getOrDefault("slot")
  valid_597527 = validateParameter(valid_597527, JString, required = true,
                                 default = nil)
  if valid_597527 != nil:
    section.add "slot", valid_597527
  var valid_597528 = path.getOrDefault("gatewayName")
  valid_597528 = validateParameter(valid_597528, JString, required = true,
                                 default = nil)
  if valid_597528 != nil:
    section.add "gatewayName", valid_597528
  var valid_597529 = path.getOrDefault("subscriptionId")
  valid_597529 = validateParameter(valid_597529, JString, required = true,
                                 default = nil)
  if valid_597529 != nil:
    section.add "subscriptionId", valid_597529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597530 = query.getOrDefault("api-version")
  valid_597530 = validateParameter(valid_597530, JString, required = true,
                                 default = nil)
  if valid_597530 != nil:
    section.add "api-version", valid_597530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597532: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597521;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_597532.validator(path, query, header, formData, body)
  let scheme = call_597532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597532.url(scheme.get, call_597532.host, call_597532.base,
                         call_597532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597532, url, valid)

proc call*(call_597533: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597521;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597534 = newJObject()
  var query_597535 = newJObject()
  var body_597536 = newJObject()
  add(path_597534, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597536 = connectionEnvelope
  add(path_597534, "name", newJString(name))
  add(path_597534, "vnetName", newJString(vnetName))
  add(query_597535, "api-version", newJString(apiVersion))
  add(path_597534, "slot", newJString(slot))
  add(path_597534, "gatewayName", newJString(gatewayName))
  add(path_597534, "subscriptionId", newJString(subscriptionId))
  result = call_597533.call(path_597534, query_597535, nil, nil, body_597536)

var webAppsCreateOrUpdateVnetConnectionGatewaySlot* = Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597521(
    name: "webAppsCreateOrUpdateVnetConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597522,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_597523,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGatewaySlot_597507 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnectionGatewaySlot_597509(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGatewaySlot_597508(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597510 = path.getOrDefault("resourceGroupName")
  valid_597510 = validateParameter(valid_597510, JString, required = true,
                                 default = nil)
  if valid_597510 != nil:
    section.add "resourceGroupName", valid_597510
  var valid_597511 = path.getOrDefault("name")
  valid_597511 = validateParameter(valid_597511, JString, required = true,
                                 default = nil)
  if valid_597511 != nil:
    section.add "name", valid_597511
  var valid_597512 = path.getOrDefault("vnetName")
  valid_597512 = validateParameter(valid_597512, JString, required = true,
                                 default = nil)
  if valid_597512 != nil:
    section.add "vnetName", valid_597512
  var valid_597513 = path.getOrDefault("slot")
  valid_597513 = validateParameter(valid_597513, JString, required = true,
                                 default = nil)
  if valid_597513 != nil:
    section.add "slot", valid_597513
  var valid_597514 = path.getOrDefault("gatewayName")
  valid_597514 = validateParameter(valid_597514, JString, required = true,
                                 default = nil)
  if valid_597514 != nil:
    section.add "gatewayName", valid_597514
  var valid_597515 = path.getOrDefault("subscriptionId")
  valid_597515 = validateParameter(valid_597515, JString, required = true,
                                 default = nil)
  if valid_597515 != nil:
    section.add "subscriptionId", valid_597515
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597516 = query.getOrDefault("api-version")
  valid_597516 = validateParameter(valid_597516, JString, required = true,
                                 default = nil)
  if valid_597516 != nil:
    section.add "api-version", valid_597516
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597517: Call_WebAppsGetVnetConnectionGatewaySlot_597507;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_597517.validator(path, query, header, formData, body)
  let scheme = call_597517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597517.url(scheme.get, call_597517.host, call_597517.base,
                         call_597517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597517, url, valid)

proc call*(call_597518: Call_WebAppsGetVnetConnectionGatewaySlot_597507;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGatewaySlot
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597519 = newJObject()
  var query_597520 = newJObject()
  add(path_597519, "resourceGroupName", newJString(resourceGroupName))
  add(query_597520, "api-version", newJString(apiVersion))
  add(path_597519, "name", newJString(name))
  add(path_597519, "vnetName", newJString(vnetName))
  add(path_597519, "slot", newJString(slot))
  add(path_597519, "gatewayName", newJString(gatewayName))
  add(path_597519, "subscriptionId", newJString(subscriptionId))
  result = call_597518.call(path_597519, query_597520, nil, nil, nil)

var webAppsGetVnetConnectionGatewaySlot* = Call_WebAppsGetVnetConnectionGatewaySlot_597507(
    name: "webAppsGetVnetConnectionGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGatewaySlot_597508, base: "",
    url: url_WebAppsGetVnetConnectionGatewaySlot_597509, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGatewaySlot_597537 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnectionGatewaySlot_597539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGatewaySlot_597538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597540 = path.getOrDefault("resourceGroupName")
  valid_597540 = validateParameter(valid_597540, JString, required = true,
                                 default = nil)
  if valid_597540 != nil:
    section.add "resourceGroupName", valid_597540
  var valid_597541 = path.getOrDefault("name")
  valid_597541 = validateParameter(valid_597541, JString, required = true,
                                 default = nil)
  if valid_597541 != nil:
    section.add "name", valid_597541
  var valid_597542 = path.getOrDefault("vnetName")
  valid_597542 = validateParameter(valid_597542, JString, required = true,
                                 default = nil)
  if valid_597542 != nil:
    section.add "vnetName", valid_597542
  var valid_597543 = path.getOrDefault("slot")
  valid_597543 = validateParameter(valid_597543, JString, required = true,
                                 default = nil)
  if valid_597543 != nil:
    section.add "slot", valid_597543
  var valid_597544 = path.getOrDefault("gatewayName")
  valid_597544 = validateParameter(valid_597544, JString, required = true,
                                 default = nil)
  if valid_597544 != nil:
    section.add "gatewayName", valid_597544
  var valid_597545 = path.getOrDefault("subscriptionId")
  valid_597545 = validateParameter(valid_597545, JString, required = true,
                                 default = nil)
  if valid_597545 != nil:
    section.add "subscriptionId", valid_597545
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597546 = query.getOrDefault("api-version")
  valid_597546 = validateParameter(valid_597546, JString, required = true,
                                 default = nil)
  if valid_597546 != nil:
    section.add "api-version", valid_597546
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597548: Call_WebAppsUpdateVnetConnectionGatewaySlot_597537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_597548.validator(path, query, header, formData, body)
  let scheme = call_597548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597548.url(scheme.get, call_597548.host, call_597548.base,
                         call_597548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597548, url, valid)

proc call*(call_597549: Call_WebAppsUpdateVnetConnectionGatewaySlot_597537;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597550 = newJObject()
  var query_597551 = newJObject()
  var body_597552 = newJObject()
  add(path_597550, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597552 = connectionEnvelope
  add(path_597550, "name", newJString(name))
  add(path_597550, "vnetName", newJString(vnetName))
  add(query_597551, "api-version", newJString(apiVersion))
  add(path_597550, "slot", newJString(slot))
  add(path_597550, "gatewayName", newJString(gatewayName))
  add(path_597550, "subscriptionId", newJString(subscriptionId))
  result = call_597549.call(path_597550, query_597551, nil, nil, body_597552)

var webAppsUpdateVnetConnectionGatewaySlot* = Call_WebAppsUpdateVnetConnectionGatewaySlot_597537(
    name: "webAppsUpdateVnetConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGatewaySlot_597538, base: "",
    url: url_WebAppsUpdateVnetConnectionGatewaySlot_597539,
    schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobsSlot_597553 = ref object of OpenApiRestCall_593437
proc url_WebAppsListWebJobsSlot_597555(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobsSlot_597554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597556 = path.getOrDefault("resourceGroupName")
  valid_597556 = validateParameter(valid_597556, JString, required = true,
                                 default = nil)
  if valid_597556 != nil:
    section.add "resourceGroupName", valid_597556
  var valid_597557 = path.getOrDefault("name")
  valid_597557 = validateParameter(valid_597557, JString, required = true,
                                 default = nil)
  if valid_597557 != nil:
    section.add "name", valid_597557
  var valid_597558 = path.getOrDefault("slot")
  valid_597558 = validateParameter(valid_597558, JString, required = true,
                                 default = nil)
  if valid_597558 != nil:
    section.add "slot", valid_597558
  var valid_597559 = path.getOrDefault("subscriptionId")
  valid_597559 = validateParameter(valid_597559, JString, required = true,
                                 default = nil)
  if valid_597559 != nil:
    section.add "subscriptionId", valid_597559
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597560 = query.getOrDefault("api-version")
  valid_597560 = validateParameter(valid_597560, JString, required = true,
                                 default = nil)
  if valid_597560 != nil:
    section.add "api-version", valid_597560
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597561: Call_WebAppsListWebJobsSlot_597553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_597561.validator(path, query, header, formData, body)
  let scheme = call_597561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597561.url(scheme.get, call_597561.host, call_597561.base,
                         call_597561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597561, url, valid)

proc call*(call_597562: Call_WebAppsListWebJobsSlot_597553;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListWebJobsSlot
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597563 = newJObject()
  var query_597564 = newJObject()
  add(path_597563, "resourceGroupName", newJString(resourceGroupName))
  add(query_597564, "api-version", newJString(apiVersion))
  add(path_597563, "name", newJString(name))
  add(path_597563, "slot", newJString(slot))
  add(path_597563, "subscriptionId", newJString(subscriptionId))
  result = call_597562.call(path_597563, query_597564, nil, nil, nil)

var webAppsListWebJobsSlot* = Call_WebAppsListWebJobsSlot_597553(
    name: "webAppsListWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    validator: validate_WebAppsListWebJobsSlot_597554, base: "",
    url: url_WebAppsListWebJobsSlot_597555, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJobSlot_597565 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebJobSlot_597567(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJobSlot_597566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597568 = path.getOrDefault("resourceGroupName")
  valid_597568 = validateParameter(valid_597568, JString, required = true,
                                 default = nil)
  if valid_597568 != nil:
    section.add "resourceGroupName", valid_597568
  var valid_597569 = path.getOrDefault("name")
  valid_597569 = validateParameter(valid_597569, JString, required = true,
                                 default = nil)
  if valid_597569 != nil:
    section.add "name", valid_597569
  var valid_597570 = path.getOrDefault("slot")
  valid_597570 = validateParameter(valid_597570, JString, required = true,
                                 default = nil)
  if valid_597570 != nil:
    section.add "slot", valid_597570
  var valid_597571 = path.getOrDefault("subscriptionId")
  valid_597571 = validateParameter(valid_597571, JString, required = true,
                                 default = nil)
  if valid_597571 != nil:
    section.add "subscriptionId", valid_597571
  var valid_597572 = path.getOrDefault("webJobName")
  valid_597572 = validateParameter(valid_597572, JString, required = true,
                                 default = nil)
  if valid_597572 != nil:
    section.add "webJobName", valid_597572
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597573 = query.getOrDefault("api-version")
  valid_597573 = validateParameter(valid_597573, JString, required = true,
                                 default = nil)
  if valid_597573 != nil:
    section.add "api-version", valid_597573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597574: Call_WebAppsGetWebJobSlot_597565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_597574.validator(path, query, header, formData, body)
  let scheme = call_597574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597574.url(scheme.get, call_597574.host, call_597574.base,
                         call_597574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597574, url, valid)

proc call*(call_597575: Call_WebAppsGetWebJobSlot_597565;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJobSlot
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_597576 = newJObject()
  var query_597577 = newJObject()
  add(path_597576, "resourceGroupName", newJString(resourceGroupName))
  add(query_597577, "api-version", newJString(apiVersion))
  add(path_597576, "name", newJString(name))
  add(path_597576, "slot", newJString(slot))
  add(path_597576, "subscriptionId", newJString(subscriptionId))
  add(path_597576, "webJobName", newJString(webJobName))
  result = call_597575.call(path_597576, query_597577, nil, nil, nil)

var webAppsGetWebJobSlot* = Call_WebAppsGetWebJobSlot_597565(
    name: "webAppsGetWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJobSlot_597566, base: "",
    url: url_WebAppsGetWebJobSlot_597567, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesFromProduction_597578 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSlotDifferencesFromProduction_597580(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesFromProduction_597579(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597581 = path.getOrDefault("resourceGroupName")
  valid_597581 = validateParameter(valid_597581, JString, required = true,
                                 default = nil)
  if valid_597581 != nil:
    section.add "resourceGroupName", valid_597581
  var valid_597582 = path.getOrDefault("name")
  valid_597582 = validateParameter(valid_597582, JString, required = true,
                                 default = nil)
  if valid_597582 != nil:
    section.add "name", valid_597582
  var valid_597583 = path.getOrDefault("subscriptionId")
  valid_597583 = validateParameter(valid_597583, JString, required = true,
                                 default = nil)
  if valid_597583 != nil:
    section.add "subscriptionId", valid_597583
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597584 = query.getOrDefault("api-version")
  valid_597584 = validateParameter(valid_597584, JString, required = true,
                                 default = nil)
  if valid_597584 != nil:
    section.add "api-version", valid_597584
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597586: Call_WebAppsListSlotDifferencesFromProduction_597578;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_597586.validator(path, query, header, formData, body)
  let scheme = call_597586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597586.url(scheme.get, call_597586.host, call_597586.base,
                         call_597586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597586, url, valid)

proc call*(call_597587: Call_WebAppsListSlotDifferencesFromProduction_597578;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesFromProduction
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_597588 = newJObject()
  var query_597589 = newJObject()
  var body_597590 = newJObject()
  add(path_597588, "resourceGroupName", newJString(resourceGroupName))
  add(query_597589, "api-version", newJString(apiVersion))
  add(path_597588, "name", newJString(name))
  add(path_597588, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597590 = slotSwapEntity
  result = call_597587.call(path_597588, query_597589, nil, nil, body_597590)

var webAppsListSlotDifferencesFromProduction* = Call_WebAppsListSlotDifferencesFromProduction_597578(
    name: "webAppsListSlotDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesFromProduction_597579, base: "",
    url: url_WebAppsListSlotDifferencesFromProduction_597580,
    schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotWithProduction_597591 = ref object of OpenApiRestCall_593437
proc url_WebAppsSwapSlotWithProduction_597593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotWithProduction_597592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597594 = path.getOrDefault("resourceGroupName")
  valid_597594 = validateParameter(valid_597594, JString, required = true,
                                 default = nil)
  if valid_597594 != nil:
    section.add "resourceGroupName", valid_597594
  var valid_597595 = path.getOrDefault("name")
  valid_597595 = validateParameter(valid_597595, JString, required = true,
                                 default = nil)
  if valid_597595 != nil:
    section.add "name", valid_597595
  var valid_597596 = path.getOrDefault("subscriptionId")
  valid_597596 = validateParameter(valid_597596, JString, required = true,
                                 default = nil)
  if valid_597596 != nil:
    section.add "subscriptionId", valid_597596
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597597 = query.getOrDefault("api-version")
  valid_597597 = validateParameter(valid_597597, JString, required = true,
                                 default = nil)
  if valid_597597 != nil:
    section.add "api-version", valid_597597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597599: Call_WebAppsSwapSlotWithProduction_597591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_597599.validator(path, query, header, formData, body)
  let scheme = call_597599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597599.url(scheme.get, call_597599.host, call_597599.base,
                         call_597599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597599, url, valid)

proc call*(call_597600: Call_WebAppsSwapSlotWithProduction_597591;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotWithProduction
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_597601 = newJObject()
  var query_597602 = newJObject()
  var body_597603 = newJObject()
  add(path_597601, "resourceGroupName", newJString(resourceGroupName))
  add(query_597602, "api-version", newJString(apiVersion))
  add(path_597601, "name", newJString(name))
  add(path_597601, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_597603 = slotSwapEntity
  result = call_597600.call(path_597601, query_597602, nil, nil, body_597603)

var webAppsSwapSlotWithProduction* = Call_WebAppsSwapSlotWithProduction_597591(
    name: "webAppsSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_WebAppsSwapSlotWithProduction_597592, base: "",
    url: url_WebAppsSwapSlotWithProduction_597593, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshots_597604 = ref object of OpenApiRestCall_593437
proc url_WebAppsListSnapshots_597606(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshots_597605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597607 = path.getOrDefault("resourceGroupName")
  valid_597607 = validateParameter(valid_597607, JString, required = true,
                                 default = nil)
  if valid_597607 != nil:
    section.add "resourceGroupName", valid_597607
  var valid_597608 = path.getOrDefault("name")
  valid_597608 = validateParameter(valid_597608, JString, required = true,
                                 default = nil)
  if valid_597608 != nil:
    section.add "name", valid_597608
  var valid_597609 = path.getOrDefault("subscriptionId")
  valid_597609 = validateParameter(valid_597609, JString, required = true,
                                 default = nil)
  if valid_597609 != nil:
    section.add "subscriptionId", valid_597609
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597610 = query.getOrDefault("api-version")
  valid_597610 = validateParameter(valid_597610, JString, required = true,
                                 default = nil)
  if valid_597610 != nil:
    section.add "api-version", valid_597610
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597611: Call_WebAppsListSnapshots_597604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_597611.validator(path, query, header, formData, body)
  let scheme = call_597611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597611.url(scheme.get, call_597611.host, call_597611.base,
                         call_597611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597611, url, valid)

proc call*(call_597612: Call_WebAppsListSnapshots_597604;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshots
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597613 = newJObject()
  var query_597614 = newJObject()
  add(path_597613, "resourceGroupName", newJString(resourceGroupName))
  add(query_597614, "api-version", newJString(apiVersion))
  add(path_597613, "name", newJString(name))
  add(path_597613, "subscriptionId", newJString(subscriptionId))
  result = call_597612.call(path_597613, query_597614, nil, nil, nil)

var webAppsListSnapshots* = Call_WebAppsListSnapshots_597604(
    name: "webAppsListSnapshots", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_WebAppsListSnapshots_597605, base: "",
    url: url_WebAppsListSnapshots_597606, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControl_597626 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateSourceControl_597628(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControl_597627(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597629 = path.getOrDefault("resourceGroupName")
  valid_597629 = validateParameter(valid_597629, JString, required = true,
                                 default = nil)
  if valid_597629 != nil:
    section.add "resourceGroupName", valid_597629
  var valid_597630 = path.getOrDefault("name")
  valid_597630 = validateParameter(valid_597630, JString, required = true,
                                 default = nil)
  if valid_597630 != nil:
    section.add "name", valid_597630
  var valid_597631 = path.getOrDefault("subscriptionId")
  valid_597631 = validateParameter(valid_597631, JString, required = true,
                                 default = nil)
  if valid_597631 != nil:
    section.add "subscriptionId", valid_597631
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597632 = query.getOrDefault("api-version")
  valid_597632 = validateParameter(valid_597632, JString, required = true,
                                 default = nil)
  if valid_597632 != nil:
    section.add "api-version", valid_597632
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597634: Call_WebAppsCreateOrUpdateSourceControl_597626;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_597634.validator(path, query, header, formData, body)
  let scheme = call_597634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597634.url(scheme.get, call_597634.host, call_597634.base,
                         call_597634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597634, url, valid)

proc call*(call_597635: Call_WebAppsCreateOrUpdateSourceControl_597626;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_597636 = newJObject()
  var query_597637 = newJObject()
  var body_597638 = newJObject()
  add(path_597636, "resourceGroupName", newJString(resourceGroupName))
  add(query_597637, "api-version", newJString(apiVersion))
  add(path_597636, "name", newJString(name))
  add(path_597636, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597638 = siteSourceControl
  result = call_597635.call(path_597636, query_597637, nil, nil, body_597638)

var webAppsCreateOrUpdateSourceControl* = Call_WebAppsCreateOrUpdateSourceControl_597626(
    name: "webAppsCreateOrUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControl_597627, base: "",
    url: url_WebAppsCreateOrUpdateSourceControl_597628, schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControl_597615 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetSourceControl_597617(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControl_597616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597618 = path.getOrDefault("resourceGroupName")
  valid_597618 = validateParameter(valid_597618, JString, required = true,
                                 default = nil)
  if valid_597618 != nil:
    section.add "resourceGroupName", valid_597618
  var valid_597619 = path.getOrDefault("name")
  valid_597619 = validateParameter(valid_597619, JString, required = true,
                                 default = nil)
  if valid_597619 != nil:
    section.add "name", valid_597619
  var valid_597620 = path.getOrDefault("subscriptionId")
  valid_597620 = validateParameter(valid_597620, JString, required = true,
                                 default = nil)
  if valid_597620 != nil:
    section.add "subscriptionId", valid_597620
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597621 = query.getOrDefault("api-version")
  valid_597621 = validateParameter(valid_597621, JString, required = true,
                                 default = nil)
  if valid_597621 != nil:
    section.add "api-version", valid_597621
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597622: Call_WebAppsGetSourceControl_597615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_597622.validator(path, query, header, formData, body)
  let scheme = call_597622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597622.url(scheme.get, call_597622.host, call_597622.base,
                         call_597622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597622, url, valid)

proc call*(call_597623: Call_WebAppsGetSourceControl_597615;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControl
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597624 = newJObject()
  var query_597625 = newJObject()
  add(path_597624, "resourceGroupName", newJString(resourceGroupName))
  add(query_597625, "api-version", newJString(apiVersion))
  add(path_597624, "name", newJString(name))
  add(path_597624, "subscriptionId", newJString(subscriptionId))
  result = call_597623.call(path_597624, query_597625, nil, nil, nil)

var webAppsGetSourceControl* = Call_WebAppsGetSourceControl_597615(
    name: "webAppsGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControl_597616, base: "",
    url: url_WebAppsGetSourceControl_597617, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControl_597650 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateSourceControl_597652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControl_597651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597653 = path.getOrDefault("resourceGroupName")
  valid_597653 = validateParameter(valid_597653, JString, required = true,
                                 default = nil)
  if valid_597653 != nil:
    section.add "resourceGroupName", valid_597653
  var valid_597654 = path.getOrDefault("name")
  valid_597654 = validateParameter(valid_597654, JString, required = true,
                                 default = nil)
  if valid_597654 != nil:
    section.add "name", valid_597654
  var valid_597655 = path.getOrDefault("subscriptionId")
  valid_597655 = validateParameter(valid_597655, JString, required = true,
                                 default = nil)
  if valid_597655 != nil:
    section.add "subscriptionId", valid_597655
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597656 = query.getOrDefault("api-version")
  valid_597656 = validateParameter(valid_597656, JString, required = true,
                                 default = nil)
  if valid_597656 != nil:
    section.add "api-version", valid_597656
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597658: Call_WebAppsUpdateSourceControl_597650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_597658.validator(path, query, header, formData, body)
  let scheme = call_597658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597658.url(scheme.get, call_597658.host, call_597658.base,
                         call_597658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597658, url, valid)

proc call*(call_597659: Call_WebAppsUpdateSourceControl_597650;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_597660 = newJObject()
  var query_597661 = newJObject()
  var body_597662 = newJObject()
  add(path_597660, "resourceGroupName", newJString(resourceGroupName))
  add(query_597661, "api-version", newJString(apiVersion))
  add(path_597660, "name", newJString(name))
  add(path_597660, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_597662 = siteSourceControl
  result = call_597659.call(path_597660, query_597661, nil, nil, body_597662)

var webAppsUpdateSourceControl* = Call_WebAppsUpdateSourceControl_597650(
    name: "webAppsUpdateSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControl_597651, base: "",
    url: url_WebAppsUpdateSourceControl_597652, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControl_597639 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteSourceControl_597641(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControl_597640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597642 = path.getOrDefault("resourceGroupName")
  valid_597642 = validateParameter(valid_597642, JString, required = true,
                                 default = nil)
  if valid_597642 != nil:
    section.add "resourceGroupName", valid_597642
  var valid_597643 = path.getOrDefault("name")
  valid_597643 = validateParameter(valid_597643, JString, required = true,
                                 default = nil)
  if valid_597643 != nil:
    section.add "name", valid_597643
  var valid_597644 = path.getOrDefault("subscriptionId")
  valid_597644 = validateParameter(valid_597644, JString, required = true,
                                 default = nil)
  if valid_597644 != nil:
    section.add "subscriptionId", valid_597644
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597645 = query.getOrDefault("api-version")
  valid_597645 = validateParameter(valid_597645, JString, required = true,
                                 default = nil)
  if valid_597645 != nil:
    section.add "api-version", valid_597645
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597646: Call_WebAppsDeleteSourceControl_597639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_597646.validator(path, query, header, formData, body)
  let scheme = call_597646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597646.url(scheme.get, call_597646.host, call_597646.base,
                         call_597646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597646, url, valid)

proc call*(call_597647: Call_WebAppsDeleteSourceControl_597639;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControl
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597648 = newJObject()
  var query_597649 = newJObject()
  add(path_597648, "resourceGroupName", newJString(resourceGroupName))
  add(query_597649, "api-version", newJString(apiVersion))
  add(path_597648, "name", newJString(name))
  add(path_597648, "subscriptionId", newJString(subscriptionId))
  result = call_597647.call(path_597648, query_597649, nil, nil, nil)

var webAppsDeleteSourceControl* = Call_WebAppsDeleteSourceControl_597639(
    name: "webAppsDeleteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControl_597640, base: "",
    url: url_WebAppsDeleteSourceControl_597641, schemes: {Scheme.Https})
type
  Call_WebAppsStart_597663 = ref object of OpenApiRestCall_593437
proc url_WebAppsStart_597665(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStart_597664(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597666 = path.getOrDefault("resourceGroupName")
  valid_597666 = validateParameter(valid_597666, JString, required = true,
                                 default = nil)
  if valid_597666 != nil:
    section.add "resourceGroupName", valid_597666
  var valid_597667 = path.getOrDefault("name")
  valid_597667 = validateParameter(valid_597667, JString, required = true,
                                 default = nil)
  if valid_597667 != nil:
    section.add "name", valid_597667
  var valid_597668 = path.getOrDefault("subscriptionId")
  valid_597668 = validateParameter(valid_597668, JString, required = true,
                                 default = nil)
  if valid_597668 != nil:
    section.add "subscriptionId", valid_597668
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597669 = query.getOrDefault("api-version")
  valid_597669 = validateParameter(valid_597669, JString, required = true,
                                 default = nil)
  if valid_597669 != nil:
    section.add "api-version", valid_597669
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597670: Call_WebAppsStart_597663; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_597670.validator(path, query, header, formData, body)
  let scheme = call_597670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597670.url(scheme.get, call_597670.host, call_597670.base,
                         call_597670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597670, url, valid)

proc call*(call_597671: Call_WebAppsStart_597663; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStart
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597672 = newJObject()
  var query_597673 = newJObject()
  add(path_597672, "resourceGroupName", newJString(resourceGroupName))
  add(query_597673, "api-version", newJString(apiVersion))
  add(path_597672, "name", newJString(name))
  add(path_597672, "subscriptionId", newJString(subscriptionId))
  result = call_597671.call(path_597672, query_597673, nil, nil, nil)

var webAppsStart* = Call_WebAppsStart_597663(name: "webAppsStart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_WebAppsStart_597664, base: "", url: url_WebAppsStart_597665,
    schemes: {Scheme.Https})
type
  Call_WebAppsStop_597674 = ref object of OpenApiRestCall_593437
proc url_WebAppsStop_597676(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStop_597675(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597677 = path.getOrDefault("resourceGroupName")
  valid_597677 = validateParameter(valid_597677, JString, required = true,
                                 default = nil)
  if valid_597677 != nil:
    section.add "resourceGroupName", valid_597677
  var valid_597678 = path.getOrDefault("name")
  valid_597678 = validateParameter(valid_597678, JString, required = true,
                                 default = nil)
  if valid_597678 != nil:
    section.add "name", valid_597678
  var valid_597679 = path.getOrDefault("subscriptionId")
  valid_597679 = validateParameter(valid_597679, JString, required = true,
                                 default = nil)
  if valid_597679 != nil:
    section.add "subscriptionId", valid_597679
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597680 = query.getOrDefault("api-version")
  valid_597680 = validateParameter(valid_597680, JString, required = true,
                                 default = nil)
  if valid_597680 != nil:
    section.add "api-version", valid_597680
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597681: Call_WebAppsStop_597674; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_597681.validator(path, query, header, formData, body)
  let scheme = call_597681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597681.url(scheme.get, call_597681.host, call_597681.base,
                         call_597681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597681, url, valid)

proc call*(call_597682: Call_WebAppsStop_597674; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStop
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597683 = newJObject()
  var query_597684 = newJObject()
  add(path_597683, "resourceGroupName", newJString(resourceGroupName))
  add(query_597684, "api-version", newJString(apiVersion))
  add(path_597683, "name", newJString(name))
  add(path_597683, "subscriptionId", newJString(subscriptionId))
  result = call_597682.call(path_597683, query_597684, nil, nil, nil)

var webAppsStop* = Call_WebAppsStop_597674(name: "webAppsStop",
                                        meth: HttpMethod.HttpPost,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
                                        validator: validate_WebAppsStop_597675,
                                        base: "", url: url_WebAppsStop_597676,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepository_597685 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncRepository_597687(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepository_597686(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597688 = path.getOrDefault("resourceGroupName")
  valid_597688 = validateParameter(valid_597688, JString, required = true,
                                 default = nil)
  if valid_597688 != nil:
    section.add "resourceGroupName", valid_597688
  var valid_597689 = path.getOrDefault("name")
  valid_597689 = validateParameter(valid_597689, JString, required = true,
                                 default = nil)
  if valid_597689 != nil:
    section.add "name", valid_597689
  var valid_597690 = path.getOrDefault("subscriptionId")
  valid_597690 = validateParameter(valid_597690, JString, required = true,
                                 default = nil)
  if valid_597690 != nil:
    section.add "subscriptionId", valid_597690
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597691 = query.getOrDefault("api-version")
  valid_597691 = validateParameter(valid_597691, JString, required = true,
                                 default = nil)
  if valid_597691 != nil:
    section.add "api-version", valid_597691
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597692: Call_WebAppsSyncRepository_597685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_597692.validator(path, query, header, formData, body)
  let scheme = call_597692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597692.url(scheme.get, call_597692.host, call_597692.base,
                         call_597692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597692, url, valid)

proc call*(call_597693: Call_WebAppsSyncRepository_597685;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepository
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597694 = newJObject()
  var query_597695 = newJObject()
  add(path_597694, "resourceGroupName", newJString(resourceGroupName))
  add(query_597695, "api-version", newJString(apiVersion))
  add(path_597694, "name", newJString(name))
  add(path_597694, "subscriptionId", newJString(subscriptionId))
  result = call_597693.call(path_597694, query_597695, nil, nil, nil)

var webAppsSyncRepository* = Call_WebAppsSyncRepository_597685(
    name: "webAppsSyncRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_WebAppsSyncRepository_597686, base: "",
    url: url_WebAppsSyncRepository_597687, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggers_597696 = ref object of OpenApiRestCall_593437
proc url_WebAppsSyncFunctionTriggers_597698(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggers_597697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597699 = path.getOrDefault("resourceGroupName")
  valid_597699 = validateParameter(valid_597699, JString, required = true,
                                 default = nil)
  if valid_597699 != nil:
    section.add "resourceGroupName", valid_597699
  var valid_597700 = path.getOrDefault("name")
  valid_597700 = validateParameter(valid_597700, JString, required = true,
                                 default = nil)
  if valid_597700 != nil:
    section.add "name", valid_597700
  var valid_597701 = path.getOrDefault("subscriptionId")
  valid_597701 = validateParameter(valid_597701, JString, required = true,
                                 default = nil)
  if valid_597701 != nil:
    section.add "subscriptionId", valid_597701
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597702 = query.getOrDefault("api-version")
  valid_597702 = validateParameter(valid_597702, JString, required = true,
                                 default = nil)
  if valid_597702 != nil:
    section.add "api-version", valid_597702
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597703: Call_WebAppsSyncFunctionTriggers_597696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_597703.validator(path, query, header, formData, body)
  let scheme = call_597703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597703.url(scheme.get, call_597703.host, call_597703.base,
                         call_597703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597703, url, valid)

proc call*(call_597704: Call_WebAppsSyncFunctionTriggers_597696;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggers
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597705 = newJObject()
  var query_597706 = newJObject()
  add(path_597705, "resourceGroupName", newJString(resourceGroupName))
  add(query_597706, "api-version", newJString(apiVersion))
  add(path_597705, "name", newJString(name))
  add(path_597705, "subscriptionId", newJString(subscriptionId))
  result = call_597704.call(path_597705, query_597706, nil, nil, nil)

var webAppsSyncFunctionTriggers* = Call_WebAppsSyncFunctionTriggers_597696(
    name: "webAppsSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggers_597697, base: "",
    url: url_WebAppsSyncFunctionTriggers_597698, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobs_597707 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobs_597709(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobs_597708(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597710 = path.getOrDefault("resourceGroupName")
  valid_597710 = validateParameter(valid_597710, JString, required = true,
                                 default = nil)
  if valid_597710 != nil:
    section.add "resourceGroupName", valid_597710
  var valid_597711 = path.getOrDefault("name")
  valid_597711 = validateParameter(valid_597711, JString, required = true,
                                 default = nil)
  if valid_597711 != nil:
    section.add "name", valid_597711
  var valid_597712 = path.getOrDefault("subscriptionId")
  valid_597712 = validateParameter(valid_597712, JString, required = true,
                                 default = nil)
  if valid_597712 != nil:
    section.add "subscriptionId", valid_597712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597713 = query.getOrDefault("api-version")
  valid_597713 = validateParameter(valid_597713, JString, required = true,
                                 default = nil)
  if valid_597713 != nil:
    section.add "api-version", valid_597713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597714: Call_WebAppsListTriggeredWebJobs_597707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_597714.validator(path, query, header, formData, body)
  let scheme = call_597714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597714.url(scheme.get, call_597714.host, call_597714.base,
                         call_597714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597714, url, valid)

proc call*(call_597715: Call_WebAppsListTriggeredWebJobs_597707;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobs
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597716 = newJObject()
  var query_597717 = newJObject()
  add(path_597716, "resourceGroupName", newJString(resourceGroupName))
  add(query_597717, "api-version", newJString(apiVersion))
  add(path_597716, "name", newJString(name))
  add(path_597716, "subscriptionId", newJString(subscriptionId))
  result = call_597715.call(path_597716, query_597717, nil, nil, nil)

var webAppsListTriggeredWebJobs* = Call_WebAppsListTriggeredWebJobs_597707(
    name: "webAppsListTriggeredWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobs_597708, base: "",
    url: url_WebAppsListTriggeredWebJobs_597709, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJob_597718 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJob_597720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJob_597719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597721 = path.getOrDefault("resourceGroupName")
  valid_597721 = validateParameter(valid_597721, JString, required = true,
                                 default = nil)
  if valid_597721 != nil:
    section.add "resourceGroupName", valid_597721
  var valid_597722 = path.getOrDefault("name")
  valid_597722 = validateParameter(valid_597722, JString, required = true,
                                 default = nil)
  if valid_597722 != nil:
    section.add "name", valid_597722
  var valid_597723 = path.getOrDefault("subscriptionId")
  valid_597723 = validateParameter(valid_597723, JString, required = true,
                                 default = nil)
  if valid_597723 != nil:
    section.add "subscriptionId", valid_597723
  var valid_597724 = path.getOrDefault("webJobName")
  valid_597724 = validateParameter(valid_597724, JString, required = true,
                                 default = nil)
  if valid_597724 != nil:
    section.add "webJobName", valid_597724
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597725 = query.getOrDefault("api-version")
  valid_597725 = validateParameter(valid_597725, JString, required = true,
                                 default = nil)
  if valid_597725 != nil:
    section.add "api-version", valid_597725
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597726: Call_WebAppsGetTriggeredWebJob_597718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_597726.validator(path, query, header, formData, body)
  let scheme = call_597726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597726.url(scheme.get, call_597726.host, call_597726.base,
                         call_597726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597726, url, valid)

proc call*(call_597727: Call_WebAppsGetTriggeredWebJob_597718;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJob
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597728 = newJObject()
  var query_597729 = newJObject()
  add(path_597728, "resourceGroupName", newJString(resourceGroupName))
  add(query_597729, "api-version", newJString(apiVersion))
  add(path_597728, "name", newJString(name))
  add(path_597728, "subscriptionId", newJString(subscriptionId))
  add(path_597728, "webJobName", newJString(webJobName))
  result = call_597727.call(path_597728, query_597729, nil, nil, nil)

var webAppsGetTriggeredWebJob* = Call_WebAppsGetTriggeredWebJob_597718(
    name: "webAppsGetTriggeredWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJob_597719, base: "",
    url: url_WebAppsGetTriggeredWebJob_597720, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJob_597730 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteTriggeredWebJob_597732(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJob_597731(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597733 = path.getOrDefault("resourceGroupName")
  valid_597733 = validateParameter(valid_597733, JString, required = true,
                                 default = nil)
  if valid_597733 != nil:
    section.add "resourceGroupName", valid_597733
  var valid_597734 = path.getOrDefault("name")
  valid_597734 = validateParameter(valid_597734, JString, required = true,
                                 default = nil)
  if valid_597734 != nil:
    section.add "name", valid_597734
  var valid_597735 = path.getOrDefault("subscriptionId")
  valid_597735 = validateParameter(valid_597735, JString, required = true,
                                 default = nil)
  if valid_597735 != nil:
    section.add "subscriptionId", valid_597735
  var valid_597736 = path.getOrDefault("webJobName")
  valid_597736 = validateParameter(valid_597736, JString, required = true,
                                 default = nil)
  if valid_597736 != nil:
    section.add "webJobName", valid_597736
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597737 = query.getOrDefault("api-version")
  valid_597737 = validateParameter(valid_597737, JString, required = true,
                                 default = nil)
  if valid_597737 != nil:
    section.add "api-version", valid_597737
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597738: Call_WebAppsDeleteTriggeredWebJob_597730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_597738.validator(path, query, header, formData, body)
  let scheme = call_597738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597738.url(scheme.get, call_597738.host, call_597738.base,
                         call_597738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597738, url, valid)

proc call*(call_597739: Call_WebAppsDeleteTriggeredWebJob_597730;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJob
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597740 = newJObject()
  var query_597741 = newJObject()
  add(path_597740, "resourceGroupName", newJString(resourceGroupName))
  add(query_597741, "api-version", newJString(apiVersion))
  add(path_597740, "name", newJString(name))
  add(path_597740, "subscriptionId", newJString(subscriptionId))
  add(path_597740, "webJobName", newJString(webJobName))
  result = call_597739.call(path_597740, query_597741, nil, nil, nil)

var webAppsDeleteTriggeredWebJob* = Call_WebAppsDeleteTriggeredWebJob_597730(
    name: "webAppsDeleteTriggeredWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJob_597731, base: "",
    url: url_WebAppsDeleteTriggeredWebJob_597732, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistory_597742 = ref object of OpenApiRestCall_593437
proc url_WebAppsListTriggeredWebJobHistory_597744(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistory_597743(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597745 = path.getOrDefault("resourceGroupName")
  valid_597745 = validateParameter(valid_597745, JString, required = true,
                                 default = nil)
  if valid_597745 != nil:
    section.add "resourceGroupName", valid_597745
  var valid_597746 = path.getOrDefault("name")
  valid_597746 = validateParameter(valid_597746, JString, required = true,
                                 default = nil)
  if valid_597746 != nil:
    section.add "name", valid_597746
  var valid_597747 = path.getOrDefault("subscriptionId")
  valid_597747 = validateParameter(valid_597747, JString, required = true,
                                 default = nil)
  if valid_597747 != nil:
    section.add "subscriptionId", valid_597747
  var valid_597748 = path.getOrDefault("webJobName")
  valid_597748 = validateParameter(valid_597748, JString, required = true,
                                 default = nil)
  if valid_597748 != nil:
    section.add "webJobName", valid_597748
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597749 = query.getOrDefault("api-version")
  valid_597749 = validateParameter(valid_597749, JString, required = true,
                                 default = nil)
  if valid_597749 != nil:
    section.add "api-version", valid_597749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597750: Call_WebAppsListTriggeredWebJobHistory_597742;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_597750.validator(path, query, header, formData, body)
  let scheme = call_597750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597750.url(scheme.get, call_597750.host, call_597750.base,
                         call_597750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597750, url, valid)

proc call*(call_597751: Call_WebAppsListTriggeredWebJobHistory_597742;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistory
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597752 = newJObject()
  var query_597753 = newJObject()
  add(path_597752, "resourceGroupName", newJString(resourceGroupName))
  add(query_597753, "api-version", newJString(apiVersion))
  add(path_597752, "name", newJString(name))
  add(path_597752, "subscriptionId", newJString(subscriptionId))
  add(path_597752, "webJobName", newJString(webJobName))
  result = call_597751.call(path_597752, query_597753, nil, nil, nil)

var webAppsListTriggeredWebJobHistory* = Call_WebAppsListTriggeredWebJobHistory_597742(
    name: "webAppsListTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistory_597743, base: "",
    url: url_WebAppsListTriggeredWebJobHistory_597744, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistory_597754 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetTriggeredWebJobHistory_597756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistory_597755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597757 = path.getOrDefault("resourceGroupName")
  valid_597757 = validateParameter(valid_597757, JString, required = true,
                                 default = nil)
  if valid_597757 != nil:
    section.add "resourceGroupName", valid_597757
  var valid_597758 = path.getOrDefault("name")
  valid_597758 = validateParameter(valid_597758, JString, required = true,
                                 default = nil)
  if valid_597758 != nil:
    section.add "name", valid_597758
  var valid_597759 = path.getOrDefault("subscriptionId")
  valid_597759 = validateParameter(valid_597759, JString, required = true,
                                 default = nil)
  if valid_597759 != nil:
    section.add "subscriptionId", valid_597759
  var valid_597760 = path.getOrDefault("id")
  valid_597760 = validateParameter(valid_597760, JString, required = true,
                                 default = nil)
  if valid_597760 != nil:
    section.add "id", valid_597760
  var valid_597761 = path.getOrDefault("webJobName")
  valid_597761 = validateParameter(valid_597761, JString, required = true,
                                 default = nil)
  if valid_597761 != nil:
    section.add "webJobName", valid_597761
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597762 = query.getOrDefault("api-version")
  valid_597762 = validateParameter(valid_597762, JString, required = true,
                                 default = nil)
  if valid_597762 != nil:
    section.add "api-version", valid_597762
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597763: Call_WebAppsGetTriggeredWebJobHistory_597754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_597763.validator(path, query, header, formData, body)
  let scheme = call_597763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597763.url(scheme.get, call_597763.host, call_597763.base,
                         call_597763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597763, url, valid)

proc call*(call_597764: Call_WebAppsGetTriggeredWebJobHistory_597754;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistory
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597765 = newJObject()
  var query_597766 = newJObject()
  add(path_597765, "resourceGroupName", newJString(resourceGroupName))
  add(query_597766, "api-version", newJString(apiVersion))
  add(path_597765, "name", newJString(name))
  add(path_597765, "subscriptionId", newJString(subscriptionId))
  add(path_597765, "id", newJString(id))
  add(path_597765, "webJobName", newJString(webJobName))
  result = call_597764.call(path_597765, query_597766, nil, nil, nil)

var webAppsGetTriggeredWebJobHistory* = Call_WebAppsGetTriggeredWebJobHistory_597754(
    name: "webAppsGetTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistory_597755, base: "",
    url: url_WebAppsGetTriggeredWebJobHistory_597756, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJob_597767 = ref object of OpenApiRestCall_593437
proc url_WebAppsRunTriggeredWebJob_597769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJob_597768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597770 = path.getOrDefault("resourceGroupName")
  valid_597770 = validateParameter(valid_597770, JString, required = true,
                                 default = nil)
  if valid_597770 != nil:
    section.add "resourceGroupName", valid_597770
  var valid_597771 = path.getOrDefault("name")
  valid_597771 = validateParameter(valid_597771, JString, required = true,
                                 default = nil)
  if valid_597771 != nil:
    section.add "name", valid_597771
  var valid_597772 = path.getOrDefault("subscriptionId")
  valid_597772 = validateParameter(valid_597772, JString, required = true,
                                 default = nil)
  if valid_597772 != nil:
    section.add "subscriptionId", valid_597772
  var valid_597773 = path.getOrDefault("webJobName")
  valid_597773 = validateParameter(valid_597773, JString, required = true,
                                 default = nil)
  if valid_597773 != nil:
    section.add "webJobName", valid_597773
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597774 = query.getOrDefault("api-version")
  valid_597774 = validateParameter(valid_597774, JString, required = true,
                                 default = nil)
  if valid_597774 != nil:
    section.add "api-version", valid_597774
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597775: Call_WebAppsRunTriggeredWebJob_597767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_597775.validator(path, query, header, formData, body)
  let scheme = call_597775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597775.url(scheme.get, call_597775.host, call_597775.base,
                         call_597775.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597775, url, valid)

proc call*(call_597776: Call_WebAppsRunTriggeredWebJob_597767;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJob
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_597777 = newJObject()
  var query_597778 = newJObject()
  add(path_597777, "resourceGroupName", newJString(resourceGroupName))
  add(query_597778, "api-version", newJString(apiVersion))
  add(path_597777, "name", newJString(name))
  add(path_597777, "subscriptionId", newJString(subscriptionId))
  add(path_597777, "webJobName", newJString(webJobName))
  result = call_597776.call(path_597777, query_597778, nil, nil, nil)

var webAppsRunTriggeredWebJob* = Call_WebAppsRunTriggeredWebJob_597767(
    name: "webAppsRunTriggeredWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJob_597768, base: "",
    url: url_WebAppsRunTriggeredWebJob_597769, schemes: {Scheme.Https})
type
  Call_WebAppsListUsages_597779 = ref object of OpenApiRestCall_593437
proc url_WebAppsListUsages_597781(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsages_597780(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597782 = path.getOrDefault("resourceGroupName")
  valid_597782 = validateParameter(valid_597782, JString, required = true,
                                 default = nil)
  if valid_597782 != nil:
    section.add "resourceGroupName", valid_597782
  var valid_597783 = path.getOrDefault("name")
  valid_597783 = validateParameter(valid_597783, JString, required = true,
                                 default = nil)
  if valid_597783 != nil:
    section.add "name", valid_597783
  var valid_597784 = path.getOrDefault("subscriptionId")
  valid_597784 = validateParameter(valid_597784, JString, required = true,
                                 default = nil)
  if valid_597784 != nil:
    section.add "subscriptionId", valid_597784
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597785 = query.getOrDefault("api-version")
  valid_597785 = validateParameter(valid_597785, JString, required = true,
                                 default = nil)
  if valid_597785 != nil:
    section.add "api-version", valid_597785
  var valid_597786 = query.getOrDefault("$filter")
  valid_597786 = validateParameter(valid_597786, JString, required = false,
                                 default = nil)
  if valid_597786 != nil:
    section.add "$filter", valid_597786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597787: Call_WebAppsListUsages_597779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_597787.validator(path, query, header, formData, body)
  let scheme = call_597787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597787.url(scheme.get, call_597787.host, call_597787.base,
                         call_597787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597787, url, valid)

proc call*(call_597788: Call_WebAppsListUsages_597779; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          Filter: string = ""): Recallable =
  ## webAppsListUsages
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_597789 = newJObject()
  var query_597790 = newJObject()
  add(path_597789, "resourceGroupName", newJString(resourceGroupName))
  add(query_597790, "api-version", newJString(apiVersion))
  add(path_597789, "name", newJString(name))
  add(path_597789, "subscriptionId", newJString(subscriptionId))
  add(query_597790, "$filter", newJString(Filter))
  result = call_597788.call(path_597789, query_597790, nil, nil, nil)

var webAppsListUsages* = Call_WebAppsListUsages_597779(name: "webAppsListUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_WebAppsListUsages_597780, base: "",
    url: url_WebAppsListUsages_597781, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnections_597791 = ref object of OpenApiRestCall_593437
proc url_WebAppsListVnetConnections_597793(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnections_597792(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597794 = path.getOrDefault("resourceGroupName")
  valid_597794 = validateParameter(valid_597794, JString, required = true,
                                 default = nil)
  if valid_597794 != nil:
    section.add "resourceGroupName", valid_597794
  var valid_597795 = path.getOrDefault("name")
  valid_597795 = validateParameter(valid_597795, JString, required = true,
                                 default = nil)
  if valid_597795 != nil:
    section.add "name", valid_597795
  var valid_597796 = path.getOrDefault("subscriptionId")
  valid_597796 = validateParameter(valid_597796, JString, required = true,
                                 default = nil)
  if valid_597796 != nil:
    section.add "subscriptionId", valid_597796
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597797 = query.getOrDefault("api-version")
  valid_597797 = validateParameter(valid_597797, JString, required = true,
                                 default = nil)
  if valid_597797 != nil:
    section.add "api-version", valid_597797
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597798: Call_WebAppsListVnetConnections_597791; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_597798.validator(path, query, header, formData, body)
  let scheme = call_597798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597798.url(scheme.get, call_597798.host, call_597798.base,
                         call_597798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597798, url, valid)

proc call*(call_597799: Call_WebAppsListVnetConnections_597791;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnections
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597800 = newJObject()
  var query_597801 = newJObject()
  add(path_597800, "resourceGroupName", newJString(resourceGroupName))
  add(query_597801, "api-version", newJString(apiVersion))
  add(path_597800, "name", newJString(name))
  add(path_597800, "subscriptionId", newJString(subscriptionId))
  result = call_597799.call(path_597800, query_597801, nil, nil, nil)

var webAppsListVnetConnections* = Call_WebAppsListVnetConnections_597791(
    name: "webAppsListVnetConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnections_597792, base: "",
    url: url_WebAppsListVnetConnections_597793, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnection_597814 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnection_597816(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnection_597815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597817 = path.getOrDefault("resourceGroupName")
  valid_597817 = validateParameter(valid_597817, JString, required = true,
                                 default = nil)
  if valid_597817 != nil:
    section.add "resourceGroupName", valid_597817
  var valid_597818 = path.getOrDefault("name")
  valid_597818 = validateParameter(valid_597818, JString, required = true,
                                 default = nil)
  if valid_597818 != nil:
    section.add "name", valid_597818
  var valid_597819 = path.getOrDefault("vnetName")
  valid_597819 = validateParameter(valid_597819, JString, required = true,
                                 default = nil)
  if valid_597819 != nil:
    section.add "vnetName", valid_597819
  var valid_597820 = path.getOrDefault("subscriptionId")
  valid_597820 = validateParameter(valid_597820, JString, required = true,
                                 default = nil)
  if valid_597820 != nil:
    section.add "subscriptionId", valid_597820
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597821 = query.getOrDefault("api-version")
  valid_597821 = validateParameter(valid_597821, JString, required = true,
                                 default = nil)
  if valid_597821 != nil:
    section.add "api-version", valid_597821
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597823: Call_WebAppsCreateOrUpdateVnetConnection_597814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_597823.validator(path, query, header, formData, body)
  let scheme = call_597823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597823.url(scheme.get, call_597823.host, call_597823.base,
                         call_597823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597823, url, valid)

proc call*(call_597824: Call_WebAppsCreateOrUpdateVnetConnection_597814;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597825 = newJObject()
  var query_597826 = newJObject()
  var body_597827 = newJObject()
  add(path_597825, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597827 = connectionEnvelope
  add(path_597825, "name", newJString(name))
  add(path_597825, "vnetName", newJString(vnetName))
  add(query_597826, "api-version", newJString(apiVersion))
  add(path_597825, "subscriptionId", newJString(subscriptionId))
  result = call_597824.call(path_597825, query_597826, nil, nil, body_597827)

var webAppsCreateOrUpdateVnetConnection* = Call_WebAppsCreateOrUpdateVnetConnection_597814(
    name: "webAppsCreateOrUpdateVnetConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnection_597815, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnection_597816, schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnection_597802 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnection_597804(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnection_597803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597805 = path.getOrDefault("resourceGroupName")
  valid_597805 = validateParameter(valid_597805, JString, required = true,
                                 default = nil)
  if valid_597805 != nil:
    section.add "resourceGroupName", valid_597805
  var valid_597806 = path.getOrDefault("name")
  valid_597806 = validateParameter(valid_597806, JString, required = true,
                                 default = nil)
  if valid_597806 != nil:
    section.add "name", valid_597806
  var valid_597807 = path.getOrDefault("vnetName")
  valid_597807 = validateParameter(valid_597807, JString, required = true,
                                 default = nil)
  if valid_597807 != nil:
    section.add "vnetName", valid_597807
  var valid_597808 = path.getOrDefault("subscriptionId")
  valid_597808 = validateParameter(valid_597808, JString, required = true,
                                 default = nil)
  if valid_597808 != nil:
    section.add "subscriptionId", valid_597808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597809 = query.getOrDefault("api-version")
  valid_597809 = validateParameter(valid_597809, JString, required = true,
                                 default = nil)
  if valid_597809 != nil:
    section.add "api-version", valid_597809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597810: Call_WebAppsGetVnetConnection_597802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_597810.validator(path, query, header, formData, body)
  let scheme = call_597810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597810.url(scheme.get, call_597810.host, call_597810.base,
                         call_597810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597810, url, valid)

proc call*(call_597811: Call_WebAppsGetVnetConnection_597802;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnection
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597812 = newJObject()
  var query_597813 = newJObject()
  add(path_597812, "resourceGroupName", newJString(resourceGroupName))
  add(query_597813, "api-version", newJString(apiVersion))
  add(path_597812, "name", newJString(name))
  add(path_597812, "vnetName", newJString(vnetName))
  add(path_597812, "subscriptionId", newJString(subscriptionId))
  result = call_597811.call(path_597812, query_597813, nil, nil, nil)

var webAppsGetVnetConnection* = Call_WebAppsGetVnetConnection_597802(
    name: "webAppsGetVnetConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnection_597803, base: "",
    url: url_WebAppsGetVnetConnection_597804, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnection_597840 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnection_597842(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnection_597841(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597843 = path.getOrDefault("resourceGroupName")
  valid_597843 = validateParameter(valid_597843, JString, required = true,
                                 default = nil)
  if valid_597843 != nil:
    section.add "resourceGroupName", valid_597843
  var valid_597844 = path.getOrDefault("name")
  valid_597844 = validateParameter(valid_597844, JString, required = true,
                                 default = nil)
  if valid_597844 != nil:
    section.add "name", valid_597844
  var valid_597845 = path.getOrDefault("vnetName")
  valid_597845 = validateParameter(valid_597845, JString, required = true,
                                 default = nil)
  if valid_597845 != nil:
    section.add "vnetName", valid_597845
  var valid_597846 = path.getOrDefault("subscriptionId")
  valid_597846 = validateParameter(valid_597846, JString, required = true,
                                 default = nil)
  if valid_597846 != nil:
    section.add "subscriptionId", valid_597846
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597847 = query.getOrDefault("api-version")
  valid_597847 = validateParameter(valid_597847, JString, required = true,
                                 default = nil)
  if valid_597847 != nil:
    section.add "api-version", valid_597847
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597849: Call_WebAppsUpdateVnetConnection_597840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_597849.validator(path, query, header, formData, body)
  let scheme = call_597849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597849.url(scheme.get, call_597849.host, call_597849.base,
                         call_597849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597849, url, valid)

proc call*(call_597850: Call_WebAppsUpdateVnetConnection_597840;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597851 = newJObject()
  var query_597852 = newJObject()
  var body_597853 = newJObject()
  add(path_597851, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597853 = connectionEnvelope
  add(path_597851, "name", newJString(name))
  add(path_597851, "vnetName", newJString(vnetName))
  add(query_597852, "api-version", newJString(apiVersion))
  add(path_597851, "subscriptionId", newJString(subscriptionId))
  result = call_597850.call(path_597851, query_597852, nil, nil, body_597853)

var webAppsUpdateVnetConnection* = Call_WebAppsUpdateVnetConnection_597840(
    name: "webAppsUpdateVnetConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnection_597841, base: "",
    url: url_WebAppsUpdateVnetConnection_597842, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnection_597828 = ref object of OpenApiRestCall_593437
proc url_WebAppsDeleteVnetConnection_597830(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnection_597829(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597831 = path.getOrDefault("resourceGroupName")
  valid_597831 = validateParameter(valid_597831, JString, required = true,
                                 default = nil)
  if valid_597831 != nil:
    section.add "resourceGroupName", valid_597831
  var valid_597832 = path.getOrDefault("name")
  valid_597832 = validateParameter(valid_597832, JString, required = true,
                                 default = nil)
  if valid_597832 != nil:
    section.add "name", valid_597832
  var valid_597833 = path.getOrDefault("vnetName")
  valid_597833 = validateParameter(valid_597833, JString, required = true,
                                 default = nil)
  if valid_597833 != nil:
    section.add "vnetName", valid_597833
  var valid_597834 = path.getOrDefault("subscriptionId")
  valid_597834 = validateParameter(valid_597834, JString, required = true,
                                 default = nil)
  if valid_597834 != nil:
    section.add "subscriptionId", valid_597834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597835 = query.getOrDefault("api-version")
  valid_597835 = validateParameter(valid_597835, JString, required = true,
                                 default = nil)
  if valid_597835 != nil:
    section.add "api-version", valid_597835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597836: Call_WebAppsDeleteVnetConnection_597828; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_597836.validator(path, query, header, formData, body)
  let scheme = call_597836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597836.url(scheme.get, call_597836.host, call_597836.base,
                         call_597836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597836, url, valid)

proc call*(call_597837: Call_WebAppsDeleteVnetConnection_597828;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnection
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597838 = newJObject()
  var query_597839 = newJObject()
  add(path_597838, "resourceGroupName", newJString(resourceGroupName))
  add(query_597839, "api-version", newJString(apiVersion))
  add(path_597838, "name", newJString(name))
  add(path_597838, "vnetName", newJString(vnetName))
  add(path_597838, "subscriptionId", newJString(subscriptionId))
  result = call_597837.call(path_597838, query_597839, nil, nil, nil)

var webAppsDeleteVnetConnection* = Call_WebAppsDeleteVnetConnection_597828(
    name: "webAppsDeleteVnetConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnection_597829, base: "",
    url: url_WebAppsDeleteVnetConnection_597830, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGateway_597867 = ref object of OpenApiRestCall_593437
proc url_WebAppsCreateOrUpdateVnetConnectionGateway_597869(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGateway_597868(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597870 = path.getOrDefault("resourceGroupName")
  valid_597870 = validateParameter(valid_597870, JString, required = true,
                                 default = nil)
  if valid_597870 != nil:
    section.add "resourceGroupName", valid_597870
  var valid_597871 = path.getOrDefault("name")
  valid_597871 = validateParameter(valid_597871, JString, required = true,
                                 default = nil)
  if valid_597871 != nil:
    section.add "name", valid_597871
  var valid_597872 = path.getOrDefault("vnetName")
  valid_597872 = validateParameter(valid_597872, JString, required = true,
                                 default = nil)
  if valid_597872 != nil:
    section.add "vnetName", valid_597872
  var valid_597873 = path.getOrDefault("gatewayName")
  valid_597873 = validateParameter(valid_597873, JString, required = true,
                                 default = nil)
  if valid_597873 != nil:
    section.add "gatewayName", valid_597873
  var valid_597874 = path.getOrDefault("subscriptionId")
  valid_597874 = validateParameter(valid_597874, JString, required = true,
                                 default = nil)
  if valid_597874 != nil:
    section.add "subscriptionId", valid_597874
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597875 = query.getOrDefault("api-version")
  valid_597875 = validateParameter(valid_597875, JString, required = true,
                                 default = nil)
  if valid_597875 != nil:
    section.add "api-version", valid_597875
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597877: Call_WebAppsCreateOrUpdateVnetConnectionGateway_597867;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_597877.validator(path, query, header, formData, body)
  let scheme = call_597877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597877.url(scheme.get, call_597877.host, call_597877.base,
                         call_597877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597877, url, valid)

proc call*(call_597878: Call_WebAppsCreateOrUpdateVnetConnectionGateway_597867;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597879 = newJObject()
  var query_597880 = newJObject()
  var body_597881 = newJObject()
  add(path_597879, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597881 = connectionEnvelope
  add(path_597879, "name", newJString(name))
  add(path_597879, "vnetName", newJString(vnetName))
  add(query_597880, "api-version", newJString(apiVersion))
  add(path_597879, "gatewayName", newJString(gatewayName))
  add(path_597879, "subscriptionId", newJString(subscriptionId))
  result = call_597878.call(path_597879, query_597880, nil, nil, body_597881)

var webAppsCreateOrUpdateVnetConnectionGateway* = Call_WebAppsCreateOrUpdateVnetConnectionGateway_597867(
    name: "webAppsCreateOrUpdateVnetConnectionGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGateway_597868,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGateway_597869,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGateway_597854 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetVnetConnectionGateway_597856(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGateway_597855(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597857 = path.getOrDefault("resourceGroupName")
  valid_597857 = validateParameter(valid_597857, JString, required = true,
                                 default = nil)
  if valid_597857 != nil:
    section.add "resourceGroupName", valid_597857
  var valid_597858 = path.getOrDefault("name")
  valid_597858 = validateParameter(valid_597858, JString, required = true,
                                 default = nil)
  if valid_597858 != nil:
    section.add "name", valid_597858
  var valid_597859 = path.getOrDefault("vnetName")
  valid_597859 = validateParameter(valid_597859, JString, required = true,
                                 default = nil)
  if valid_597859 != nil:
    section.add "vnetName", valid_597859
  var valid_597860 = path.getOrDefault("gatewayName")
  valid_597860 = validateParameter(valid_597860, JString, required = true,
                                 default = nil)
  if valid_597860 != nil:
    section.add "gatewayName", valid_597860
  var valid_597861 = path.getOrDefault("subscriptionId")
  valid_597861 = validateParameter(valid_597861, JString, required = true,
                                 default = nil)
  if valid_597861 != nil:
    section.add "subscriptionId", valid_597861
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597862 = query.getOrDefault("api-version")
  valid_597862 = validateParameter(valid_597862, JString, required = true,
                                 default = nil)
  if valid_597862 != nil:
    section.add "api-version", valid_597862
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597863: Call_WebAppsGetVnetConnectionGateway_597854;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_597863.validator(path, query, header, formData, body)
  let scheme = call_597863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597863.url(scheme.get, call_597863.host, call_597863.base,
                         call_597863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597863, url, valid)

proc call*(call_597864: Call_WebAppsGetVnetConnectionGateway_597854;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGateway
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597865 = newJObject()
  var query_597866 = newJObject()
  add(path_597865, "resourceGroupName", newJString(resourceGroupName))
  add(query_597866, "api-version", newJString(apiVersion))
  add(path_597865, "name", newJString(name))
  add(path_597865, "vnetName", newJString(vnetName))
  add(path_597865, "gatewayName", newJString(gatewayName))
  add(path_597865, "subscriptionId", newJString(subscriptionId))
  result = call_597864.call(path_597865, query_597866, nil, nil, nil)

var webAppsGetVnetConnectionGateway* = Call_WebAppsGetVnetConnectionGateway_597854(
    name: "webAppsGetVnetConnectionGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGateway_597855, base: "",
    url: url_WebAppsGetVnetConnectionGateway_597856, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGateway_597882 = ref object of OpenApiRestCall_593437
proc url_WebAppsUpdateVnetConnectionGateway_597884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGateway_597883(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597885 = path.getOrDefault("resourceGroupName")
  valid_597885 = validateParameter(valid_597885, JString, required = true,
                                 default = nil)
  if valid_597885 != nil:
    section.add "resourceGroupName", valid_597885
  var valid_597886 = path.getOrDefault("name")
  valid_597886 = validateParameter(valid_597886, JString, required = true,
                                 default = nil)
  if valid_597886 != nil:
    section.add "name", valid_597886
  var valid_597887 = path.getOrDefault("vnetName")
  valid_597887 = validateParameter(valid_597887, JString, required = true,
                                 default = nil)
  if valid_597887 != nil:
    section.add "vnetName", valid_597887
  var valid_597888 = path.getOrDefault("gatewayName")
  valid_597888 = validateParameter(valid_597888, JString, required = true,
                                 default = nil)
  if valid_597888 != nil:
    section.add "gatewayName", valid_597888
  var valid_597889 = path.getOrDefault("subscriptionId")
  valid_597889 = validateParameter(valid_597889, JString, required = true,
                                 default = nil)
  if valid_597889 != nil:
    section.add "subscriptionId", valid_597889
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597890 = query.getOrDefault("api-version")
  valid_597890 = validateParameter(valid_597890, JString, required = true,
                                 default = nil)
  if valid_597890 != nil:
    section.add "api-version", valid_597890
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597892: Call_WebAppsUpdateVnetConnectionGateway_597882;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_597892.validator(path, query, header, formData, body)
  let scheme = call_597892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597892.url(scheme.get, call_597892.host, call_597892.base,
                         call_597892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597892, url, valid)

proc call*(call_597893: Call_WebAppsUpdateVnetConnectionGateway_597882;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597894 = newJObject()
  var query_597895 = newJObject()
  var body_597896 = newJObject()
  add(path_597894, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_597896 = connectionEnvelope
  add(path_597894, "name", newJString(name))
  add(path_597894, "vnetName", newJString(vnetName))
  add(query_597895, "api-version", newJString(apiVersion))
  add(path_597894, "gatewayName", newJString(gatewayName))
  add(path_597894, "subscriptionId", newJString(subscriptionId))
  result = call_597893.call(path_597894, query_597895, nil, nil, body_597896)

var webAppsUpdateVnetConnectionGateway* = Call_WebAppsUpdateVnetConnectionGateway_597882(
    name: "webAppsUpdateVnetConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGateway_597883, base: "",
    url: url_WebAppsUpdateVnetConnectionGateway_597884, schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobs_597897 = ref object of OpenApiRestCall_593437
proc url_WebAppsListWebJobs_597899(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobs_597898(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597900 = path.getOrDefault("resourceGroupName")
  valid_597900 = validateParameter(valid_597900, JString, required = true,
                                 default = nil)
  if valid_597900 != nil:
    section.add "resourceGroupName", valid_597900
  var valid_597901 = path.getOrDefault("name")
  valid_597901 = validateParameter(valid_597901, JString, required = true,
                                 default = nil)
  if valid_597901 != nil:
    section.add "name", valid_597901
  var valid_597902 = path.getOrDefault("subscriptionId")
  valid_597902 = validateParameter(valid_597902, JString, required = true,
                                 default = nil)
  if valid_597902 != nil:
    section.add "subscriptionId", valid_597902
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597903 = query.getOrDefault("api-version")
  valid_597903 = validateParameter(valid_597903, JString, required = true,
                                 default = nil)
  if valid_597903 != nil:
    section.add "api-version", valid_597903
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597904: Call_WebAppsListWebJobs_597897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_597904.validator(path, query, header, formData, body)
  let scheme = call_597904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597904.url(scheme.get, call_597904.host, call_597904.base,
                         call_597904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597904, url, valid)

proc call*(call_597905: Call_WebAppsListWebJobs_597897; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListWebJobs
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_597906 = newJObject()
  var query_597907 = newJObject()
  add(path_597906, "resourceGroupName", newJString(resourceGroupName))
  add(query_597907, "api-version", newJString(apiVersion))
  add(path_597906, "name", newJString(name))
  add(path_597906, "subscriptionId", newJString(subscriptionId))
  result = call_597905.call(path_597906, query_597907, nil, nil, nil)

var webAppsListWebJobs* = Call_WebAppsListWebJobs_597897(
    name: "webAppsListWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    validator: validate_WebAppsListWebJobs_597898, base: "",
    url: url_WebAppsListWebJobs_597899, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJob_597908 = ref object of OpenApiRestCall_593437
proc url_WebAppsGetWebJob_597910(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJob_597909(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_597911 = path.getOrDefault("resourceGroupName")
  valid_597911 = validateParameter(valid_597911, JString, required = true,
                                 default = nil)
  if valid_597911 != nil:
    section.add "resourceGroupName", valid_597911
  var valid_597912 = path.getOrDefault("name")
  valid_597912 = validateParameter(valid_597912, JString, required = true,
                                 default = nil)
  if valid_597912 != nil:
    section.add "name", valid_597912
  var valid_597913 = path.getOrDefault("subscriptionId")
  valid_597913 = validateParameter(valid_597913, JString, required = true,
                                 default = nil)
  if valid_597913 != nil:
    section.add "subscriptionId", valid_597913
  var valid_597914 = path.getOrDefault("webJobName")
  valid_597914 = validateParameter(valid_597914, JString, required = true,
                                 default = nil)
  if valid_597914 != nil:
    section.add "webJobName", valid_597914
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_597915 = query.getOrDefault("api-version")
  valid_597915 = validateParameter(valid_597915, JString, required = true,
                                 default = nil)
  if valid_597915 != nil:
    section.add "api-version", valid_597915
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597916: Call_WebAppsGetWebJob_597908; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_597916.validator(path, query, header, formData, body)
  let scheme = call_597916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597916.url(scheme.get, call_597916.host, call_597916.base,
                         call_597916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597916, url, valid)

proc call*(call_597917: Call_WebAppsGetWebJob_597908; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJob
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_597918 = newJObject()
  var query_597919 = newJObject()
  add(path_597918, "resourceGroupName", newJString(resourceGroupName))
  add(query_597919, "api-version", newJString(apiVersion))
  add(path_597918, "name", newJString(name))
  add(path_597918, "subscriptionId", newJString(subscriptionId))
  add(path_597918, "webJobName", newJString(webJobName))
  result = call_597917.call(path_597918, query_597919, nil, nil, nil)

var webAppsGetWebJob* = Call_WebAppsGetWebJob_597908(name: "webAppsGetWebJob",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJob_597909, base: "",
    url: url_WebAppsGetWebJob_597910, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
